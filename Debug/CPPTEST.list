
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001138c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08011540  08011540  00021540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011920  08011920  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011920  08011920  00021920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011928  08011928  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011928  08011928  00021928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801192c  0801192c  0002192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08011930  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d4  200001e0  08011b10  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08011b10  00031bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263ac  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b97  00000000  00000000  000565bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c78  00000000  00000000  0005b158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a50  00000000  00000000  0005cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006fc4  00000000  00000000  0005e820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019584  00000000  00000000  000657e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb8e1  00000000  00000000  0007ed68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a20  00000000  00000000  0016a6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011524 	.word	0x08011524

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08011524 	.word	0x08011524

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	200b      	movs	r0, #11
 8001070:	f001 fb8c 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001074:	200b      	movs	r0, #11
 8001076:	f001 fba5 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	200d      	movs	r0, #13
 8001080:	f001 fb84 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001084:	200d      	movs	r0, #13
 8001086:	f001 fb9d 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2105      	movs	r1, #5
 800108e:	200e      	movs	r0, #14
 8001090:	f001 fb7c 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001094:	200e      	movs	r0, #14
 8001096:	f001 fb95 	bl	80027c4 <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <MX_FREERTOS_Init+0x18>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_FREERTOS_Init+0x1c>)
 80010b2:	f009 fbeb 	bl	800a88c <osThreadNew>
 80010b6:	4602      	mov	r2, r0
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <MX_FREERTOS_Init+0x20>)
 80010ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	080115b8 	.word	0x080115b8
 80010c4:	080010cd 	.word	0x080010cd
 80010c8:	200011fc 	.word	0x200011fc

080010cc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f009 fc7f 	bl	800a9d8 <osDelay>
 80010da:	e7fb      	b.n	80010d4 <StartDefaultTask+0x8>

080010dc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	4b73      	ldr	r3, [pc, #460]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a72      	ldr	r2, [pc, #456]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b70      	ldr	r3, [pc, #448]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a6b      	ldr	r2, [pc, #428]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b69      	ldr	r3, [pc, #420]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b65      	ldr	r3, [pc, #404]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a64      	ldr	r2, [pc, #400]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b62      	ldr	r3, [pc, #392]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b5e      	ldr	r3, [pc, #376]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a5d      	ldr	r2, [pc, #372]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b57      	ldr	r3, [pc, #348]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a56      	ldr	r2, [pc, #344]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b54      	ldr	r3, [pc, #336]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 80011a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <MX_GPIO_Init+0x1e8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80011bc:	4842      	ldr	r0, [pc, #264]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 80011be:	f001 ffd1 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2140      	movs	r1, #64	; 0x40
 80011c6:	4841      	ldr	r0, [pc, #260]	; (80012cc <MX_GPIO_Init+0x1f0>)
 80011c8:	f001 ffcc 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <MX_GPIO_Init+0x1f4>)
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	483c      	ldr	r0, [pc, #240]	; (80012d4 <MX_GPIO_Init+0x1f8>)
 80011e2:	f001 fe15 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011e6:	2332      	movs	r3, #50	; 0x32
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f6:	230b      	movs	r3, #11
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4834      	ldr	r0, [pc, #208]	; (80012d4 <MX_GPIO_Init+0x1f8>)
 8001202:	f001 fe05 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001206:	2386      	movs	r3, #134	; 0x86
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001216:	230b      	movs	r3, #11
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	482d      	ldr	r0, [pc, #180]	; (80012d8 <MX_GPIO_Init+0x1fc>)
 8001222:	f001 fdf5 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001226:	f244 0381 	movw	r3, #16513	; 0x4081
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4822      	ldr	r0, [pc, #136]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001240:	f001 fde6 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001256:	230b      	movs	r3, #11
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4819      	ldr	r0, [pc, #100]	; (80012c8 <MX_GPIO_Init+0x1ec>)
 8001262:	f001 fdd5 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001266:	2340      	movs	r3, #64	; 0x40
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_GPIO_Init+0x1f0>)
 800127e:	f001 fdc7 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_GPIO_Init+0x1f0>)
 8001296:	f001 fdbb 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800129a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ac:	230b      	movs	r3, #11
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_GPIO_Init+0x1f0>)
 80012b8:	f001 fdaa 	bl	8002e10 <HAL_GPIO_Init>

}
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	10110000 	.word	0x10110000
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020000 	.word	0x40020000

080012dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_I2C1_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <MX_I2C1_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_I2C1_Init+0x74>)
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <MX_I2C1_Init+0x7c>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_I2C1_Init+0x74>)
 80012fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_I2C1_Init+0x74>)
 800131a:	f001 ff3d 	bl	8003198 <HAL_I2C_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001324:	f000 f9e6 	bl	80016f4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	4809      	ldr	r0, [pc, #36]	; (8001350 <MX_I2C1_Init+0x74>)
 800132c:	f004 fae9 	bl	8005902 <HAL_I2CEx_ConfigAnalogFilter>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001336:	f000 f9dd 	bl	80016f4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_I2C1_Init+0x74>)
 800133e:	f004 fb1c 	bl	800597a <HAL_I2CEx_ConfigDigitalFilter>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001348:	f000 f9d4 	bl	80016f4 <Error_Handler>
  }

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20001200 	.word	0x20001200
 8001354:	40005400 	.word	0x40005400
 8001358:	00061a80 	.word	0x00061a80

0800135c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C2_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <MX_I2C2_Init+0x7c>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_I2C2_Init+0x74>)
 800137a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_I2C2_Init+0x74>)
 800139a:	f001 fefd 	bl	8003198 <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 f9a6 	bl	80016f4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_I2C2_Init+0x74>)
 80013ac:	f004 faa9 	bl	8005902 <HAL_I2CEx_ConfigAnalogFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80013b6:	f000 f99d 	bl	80016f4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C2_Init+0x74>)
 80013be:	f004 fadc 	bl	800597a <HAL_I2CEx_ConfigDigitalFilter>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80013c8:	f000 f994 	bl	80016f4 <Error_Handler>
  }

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20001254 	.word	0x20001254
 80013d4:	40005800 	.word	0x40005800
 80013d8:	00061a80 	.word	0x00061a80

080013dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_I2C_MspInit+0x168>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d15b      	bne.n	80014b6 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800141a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001420:	2312      	movs	r3, #18
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001424:	2301      	movs	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142c:	2304      	movs	r3, #4
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4845      	ldr	r0, [pc, #276]	; (800154c <HAL_I2C_MspInit+0x170>)
 8001438:	f001 fcea 	bl	8002e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a40      	ldr	r2, [pc, #256]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001446:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_I2C_MspInit+0x174>)
 800145a:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <HAL_I2C_MspInit+0x178>)
 800145c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <HAL_I2C_MspInit+0x174>)
 8001460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001464:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_I2C_MspInit+0x174>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800146c:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_I2C_MspInit+0x174>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_I2C_MspInit+0x174>)
 8001474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001478:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_I2C_MspInit+0x174>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001480:	4b33      	ldr	r3, [pc, #204]	; (8001550 <HAL_I2C_MspInit+0x174>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001486:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_I2C_MspInit+0x174>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_I2C_MspInit+0x174>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_I2C_MspInit+0x174>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001498:	482d      	ldr	r0, [pc, #180]	; (8001550 <HAL_I2C_MspInit+0x174>)
 800149a:	f001 f9a1 	bl	80027e0 <HAL_DMA_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80014a4:	f000 f926 	bl	80016f4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_I2C_MspInit+0x174>)
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
 80014ae:	4a28      	ldr	r2, [pc, #160]	; (8001550 <HAL_I2C_MspInit+0x174>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014b4:	e041      	b.n	800153a <HAL_I2C_MspInit+0x15e>
  else if(i2cHandle->Instance==I2C2)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_I2C_MspInit+0x17c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d13c      	bne.n	800153a <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e2:	2312      	movs	r3, #18
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ee:	2304      	movs	r3, #4
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4814      	ldr	r0, [pc, #80]	; (800154c <HAL_I2C_MspInit+0x170>)
 80014fa:	f001 fc89 	bl	8002e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_I2C_MspInit+0x16c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2105      	movs	r1, #5
 800151e:	2021      	movs	r0, #33	; 0x21
 8001520:	f001 f934 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001524:	2021      	movs	r0, #33	; 0x21
 8001526:	f001 f94d 	bl	80027c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	2022      	movs	r0, #34	; 0x22
 8001530:	f001 f92c 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001534:	2022      	movs	r0, #34	; 0x22
 8001536:	f001 f945 	bl	80027c4 <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40005400 	.word	0x40005400
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400
 8001550:	200012a8 	.word	0x200012a8
 8001554:	40026010 	.word	0x40026010
 8001558:	40005800 	.word	0x40005800

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f000 fff8 	bl	8002554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f826 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f7ff fdb8 	bl	80010dc <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f7ff fd6c 	bl	8001048 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001570:	f000 fd98 	bl	80020a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001574:	f000 ff3c 	bl	80023f0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001578:	f7ff feb0 	bl	80012dc <MX_I2C1_Init>
  MX_TIM11_Init();
 800157c:	f000 fbcc 	bl	8001d18 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001580:	f000 fa6c 	bl	8001a5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001584:	f000 faec 	bl	8001b60 <MX_TIM4_Init>
  MX_UART7_Init();
 8001588:	f000 fd34 	bl	8001ff4 <MX_UART7_Init>
  MX_USART2_UART_Init();
 800158c:	f000 fd60 	bl	8002050 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001590:	f000 fb7e 	bl	8001c90 <MX_TIM9_Init>
  MX_I2C2_Init();
 8001594:	f7ff fee2 	bl	800135c <MX_I2C2_Init>
  MX_UART4_Init();
 8001598:	f000 fd02 	bl	8001fa0 <MX_UART4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800159c:	f000 f874 	bl	8001688 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  userMain();
 80015a0:	f009 f8ba 	bl	800a718 <userMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80015a4:	f009 f908 	bl	800a7b8 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80015a8:	f7ff fd7e 	bl	80010a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80015ac:	f009 f938 	bl	800a820 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <main+0x54>
	...

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b094      	sub	sp, #80	; 0x50
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2230      	movs	r2, #48	; 0x30
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00b fcc5 	bl	800cf52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <SystemClock_Config+0xcc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <SystemClock_Config+0xcc>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <SystemClock_Config+0xcc>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <SystemClock_Config+0xd0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <SystemClock_Config+0xd0>)
 80015fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <SystemClock_Config+0xd0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001610:	2301      	movs	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161a:	2302      	movs	r3, #2
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001624:	2308      	movs	r3, #8
 8001626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001628:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800162c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800162e:	2302      	movs	r3, #2
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001632:	2307      	movs	r3, #7
 8001634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	4618      	mov	r0, r3
 800163c:	f004 fafa 	bl	8005c34 <HAL_RCC_OscConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001646:	f000 f855 	bl	80016f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164a:	230f      	movs	r3, #15
 800164c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164e:	2302      	movs	r3, #2
 8001650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001656:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800165a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2105      	movs	r1, #5
 8001668:	4618      	mov	r0, r3
 800166a:	f004 fd53 	bl	8006114 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001674:	f000 f83e 	bl	80016f4 <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	; 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	201f      	movs	r0, #31
 8001692:	f001 f87b 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001696:	201f      	movs	r0, #31
 8001698:	f001 f894 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	2105      	movs	r1, #5
 80016a0:	2020      	movs	r0, #32
 80016a2:	f001 f873 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016a6:	2020      	movs	r0, #32
 80016a8:	f001 f88c 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	2052      	movs	r0, #82	; 0x52
 80016b2:	f001 f86b 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 80016b6:	2052      	movs	r0, #82	; 0x52
 80016b8:	f001 f884 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2105      	movs	r1, #5
 80016c0:	2034      	movs	r0, #52	; 0x34
 80016c2:	f001 f863 	bl	800278c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016c6:	2034      	movs	r0, #52	; 0x34
 80016c8:	f001 f87c 	bl	80027c4 <HAL_NVIC_EnableIRQ>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016e2:	f000 ff59 	bl	8002598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40001000 	.word	0x40001000

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_MspInit+0x54>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_MspInit+0x54>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x54>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_MspInit+0x54>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_MspInit+0x54>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_MspInit+0x54>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	210f      	movs	r1, #15
 8001746:	f06f 0001 	mvn.w	r0, #1
 800174a:	f001 f81f 	bl	800278c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	2036      	movs	r0, #54	; 0x36
 8001772:	f001 f80b 	bl	800278c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001776:	2036      	movs	r0, #54	; 0x36
 8001778:	f001 f824 	bl	80027c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_InitTick+0xa4>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_InitTick+0xa4>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_InitTick+0xa4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 fea8 	bl	80064f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017a8:	f004 fe7e 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 80017ac:	4603      	mov	r3, r0
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_InitTick+0xa8>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	3b01      	subs	r3, #1
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_InitTick+0xac>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_InitTick+0xb0>)
 80017c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_InitTick+0xac>)
 80017c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_InitTick+0xac>)
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_InitTick+0xac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_InitTick+0xac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017e0:	4809      	ldr	r0, [pc, #36]	; (8001808 <HAL_InitTick+0xac>)
 80017e2:	f004 febb 	bl	800655c <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017ec:	4806      	ldr	r0, [pc, #24]	; (8001808 <HAL_InitTick+0xac>)
 80017ee:	f004 fee0 	bl	80065b2 <HAL_TIM_Base_Start_IT>
 80017f2:	4603      	mov	r3, r0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3730      	adds	r7, #48	; 0x30
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	431bde83 	.word	0x431bde83
 8001808:	20001308 	.word	0x20001308
 800180c:	40001000 	.word	0x40001000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <DMA1_Stream0_IRQHandler+0x10>)
 800184a:	f001 f899 	bl	8002980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200012a8 	.word	0x200012a8

08001858 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <DMA1_Stream2_IRQHandler+0x10>)
 800185e:	f001 f88f 	bl	8002980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20001448 	.word	0x20001448

0800186c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <DMA1_Stream3_IRQHandler+0x10>)
 8001872:	f001 f885 	bl	8002980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20001528 	.word	0x20001528

08001880 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001886:	f004 fee3 	bl	8006650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200013c8 	.word	0x200013c8

08001894 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <I2C1_EV_IRQHandler+0x10>)
 800189a:	f002 f8d5 	bl	8003a48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20001200 	.word	0x20001200

080018a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <I2C1_ER_IRQHandler+0x10>)
 80018ae:	f002 fa31 	bl	8003d14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20001200 	.word	0x20001200

080018bc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <I2C2_EV_IRQHandler+0x10>)
 80018c2:	f002 f8c1 	bl	8003a48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20001254 	.word	0x20001254

080018d0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <I2C2_ER_IRQHandler+0x10>)
 80018d6:	f002 fa1d 	bl	8003d14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20001254 	.word	0x20001254

080018e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <USART3_IRQHandler+0x10>)
 80018ea:	f005 fdbf 	bl	800746c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200014e8 	.word	0x200014e8

080018f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <UART4_IRQHandler+0x10>)
 80018fe:	f005 fdb5 	bl	800746c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20001588 	.word	0x20001588

0800190c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM6_DAC_IRQHandler+0x10>)
 8001912:	f004 fe9d 	bl	8006650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20001308 	.word	0x20001308

08001920 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <UART7_IRQHandler+0x10>)
 8001926:	f005 fda1 	bl	800746c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200014a8 	.word	0x200014a8

08001934 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
	}

return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:
	}
	return len;
}

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x50>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x16>
		heap_end = &end;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <_sbrk+0x50>)
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <_sbrk+0x54>)
 80019ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <_sbrk+0x50>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <_sbrk+0x50>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	466a      	mov	r2, sp
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d907      	bls.n	8001a12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a02:	f00b fa61 	bl	800cec8 <__errno>
 8001a06:	4602      	mov	r2, r0
 8001a08:	230c      	movs	r3, #12
 8001a0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	e006      	b.n	8001a20 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <_sbrk+0x50>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <_sbrk+0x50>)
 8001a1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200001fc 	.word	0x200001fc
 8001a2c:	20001bb8 	.word	0x20001bb8

08001a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <SystemInit+0x28>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <SystemInit+0x28>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SystemInit+0x28>)
 8001a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <MX_TIM3_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08e      	sub	sp, #56	; 0x38
 8001a60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001a8e:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <MX_TIM3_Init+0x100>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001a92:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001a94:	2229      	movs	r2, #41	; 0x29
 8001a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001aa0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab2:	4829      	ldr	r0, [pc, #164]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001ab4:	f004 fd52 	bl	800655c <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001abe:	f7ff fe19 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4822      	ldr	r0, [pc, #136]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001ad0:	f004 ff8c 	bl	80069ec <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ada:	f7ff fe0b 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ade:	481e      	ldr	r0, [pc, #120]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001ae0:	f004 fd8b 	bl	80065fa <HAL_TIM_PWM_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aea:	f7ff fe03 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	4619      	mov	r1, r3
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001afe:	f005 fb3f 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b08:	f7ff fdf4 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0c:	2360      	movs	r3, #96	; 0x60
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001b24:	f004 fe9c 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b2e:	f7ff fde1 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2204      	movs	r2, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001b3a:	f004 fe91 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b44:	f7ff fdd6 	bl	80016f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <MX_TIM3_Init+0xfc>)
 8001b4a:	f000 f97f 	bl	8001e4c <HAL_TIM_MspPostInit>

}
 8001b4e:	bf00      	nop
 8001b50:	3738      	adds	r7, #56	; 0x38
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20001388 	.word	0x20001388
 8001b5c:	40000400 	.word	0x40000400

08001b60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08e      	sub	sp, #56	; 0x38
 8001b64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	f107 0320 	add.w	r3, r7, #32
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	615a      	str	r2, [r3, #20]
 8001b8e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001b92:	4a3e      	ldr	r2, [pc, #248]	; (8001c8c <MX_TIM4_Init+0x12c>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001b98:	2229      	movs	r2, #41	; 0x29
 8001b9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001ba4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001ba8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bb6:	4834      	ldr	r0, [pc, #208]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001bb8:	f004 fcd0 	bl	800655c <HAL_TIM_Base_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001bc2:	f7ff fd97 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	482d      	ldr	r0, [pc, #180]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001bd4:	f004 ff0a 	bl	80069ec <HAL_TIM_ConfigClockSource>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001bde:	f7ff fd89 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001be2:	4829      	ldr	r0, [pc, #164]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001be4:	f004 fd09 	bl	80065fa <HAL_TIM_PWM_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bee:	f7ff fd81 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4821      	ldr	r0, [pc, #132]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001c02:	f005 fabd 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c0c:	f7ff fd72 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c10:	2360      	movs	r3, #96	; 0x60
 8001c12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	4619      	mov	r1, r3
 8001c26:	4818      	ldr	r0, [pc, #96]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001c28:	f004 fe1a 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c32:	f7ff fd5f 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2204      	movs	r2, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4812      	ldr	r0, [pc, #72]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001c3e:	f004 fe0f 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c48:	f7ff fd54 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001c54:	f004 fe04 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c5e:	f7ff fd49 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	220c      	movs	r2, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	4807      	ldr	r0, [pc, #28]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001c6a:	f004 fdf9 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c74:	f7ff fd3e 	bl	80016f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <MX_TIM4_Init+0x128>)
 8001c7a:	f000 f8e7 	bl	8001e4c <HAL_TIM_MspPostInit>

}
 8001c7e:	bf00      	nop
 8001c80:	3738      	adds	r7, #56	; 0x38
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20001348 	.word	0x20001348
 8001c8c:	40000800 	.word	0x40000800

08001c90 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <MX_TIM9_Init+0x84>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001cce:	f004 fc94 	bl	80065fa <HAL_TIM_PWM_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8001cd8:	f7ff fd0c 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001cf4:	f004 fdb4 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8001cfe:	f7ff fcf9 	bl	80016f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM9_Init+0x80>)
 8001d04:	f000 f8a2 	bl	8001e4c <HAL_TIM_MspPostInit>

}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20001408 	.word	0x20001408
 8001d14:	40014000 	.word	0x40014000

08001d18 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_TIM11_Init+0x40>)
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <MX_TIM11_Init+0x44>)
 8001d20:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1680-1;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_TIM11_Init+0x40>)
 8001d24:	f240 628f 	movw	r2, #1679	; 0x68f
 8001d28:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_TIM11_Init+0x40>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_TIM11_Init+0x40>)
 8001d32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d36:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_TIM11_Init+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_TIM11_Init+0x40>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_TIM11_Init+0x40>)
 8001d46:	f004 fc09 	bl	800655c <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001d50:	f7ff fcd0 	bl	80016f4 <Error_Handler>
  }

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200013c8 	.word	0x200013c8
 8001d5c:	40014800 	.word	0x40014800

08001d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_TIM_Base_MspInit+0x98>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10e      	bne.n	8001d90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001d8e:	e02e      	b.n	8001dee <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <HAL_TIM_Base_MspInit+0xa0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
}
 8001db6:	e01a      	b.n	8001dee <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM11)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_TIM_Base_MspInit+0xa4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d115      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_TIM_Base_MspInit+0x9c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2105      	movs	r1, #5
 8001de2:	201a      	movs	r0, #26
 8001de4:	f000 fcd2 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001de8:	201a      	movs	r0, #26
 8001dea:	f000 fceb 	bl	80027c4 <HAL_NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40000800 	.word	0x40000800
 8001e04:	40014800 	.word	0x40014800

08001e08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10d      	bne.n	8001e36 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_TIM_PWM_MspInit+0x40>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_TIM_PWM_MspInit+0x40>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_TIM_PWM_MspInit+0x40>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40014000 	.word	0x40014000
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_TIM_MspPostInit+0x134>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d13c      	bne.n	8001ee8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a43      	ldr	r2, [pc, #268]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ea6:	2340      	movs	r3, #64	; 0x40
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4831      	ldr	r0, [pc, #196]	; (8001f88 <HAL_TIM_MspPostInit+0x13c>)
 8001ec2:	f000 ffa5 	bl	8002e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	482a      	ldr	r0, [pc, #168]	; (8001f8c <HAL_TIM_MspPostInit+0x140>)
 8001ee2:	f000 ff95 	bl	8002e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001ee6:	e047      	b.n	8001f78 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_TIM_MspPostInit+0x144>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d11f      	bne.n	8001f32 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f0e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f20:	2302      	movs	r3, #2
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481a      	ldr	r0, [pc, #104]	; (8001f94 <HAL_TIM_MspPostInit+0x148>)
 8001f2c:	f000 ff70 	bl	8002e10 <HAL_GPIO_Init>
}
 8001f30:	e022      	b.n	8001f78 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM9)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_TIM_MspPostInit+0x14c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d11d      	bne.n	8001f78 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_TIM_MspPostInit+0x138>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	480a      	ldr	r0, [pc, #40]	; (8001f9c <HAL_TIM_MspPostInit+0x150>)
 8001f74:	f000 ff4c 	bl	8002e10 <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_UART4_Init+0x50>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001fb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_UART4_Init+0x4c>)
 8001fd8:	f005 f962 	bl	80072a0 <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001fe2:	f7ff fb87 	bl	80016f4 <Error_Handler>
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20001588 	.word	0x20001588
 8001ff0:	40004c00 	.word	0x40004c00

08001ff4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_UART7_Init+0x50>)
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <MX_UART7_Init+0x54>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_UART7_Init+0x50>)
 8002000:	4a12      	ldr	r2, [pc, #72]	; (800204c <MX_UART7_Init+0x58>)
 8002002:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_UART7_Init+0x50>)
 8002006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800200a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <MX_UART7_Init+0x50>)
 800200e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002012:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_UART7_Init+0x50>)
 8002016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_UART7_Init+0x50>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_UART7_Init+0x50>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_UART7_Init+0x50>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_UART7_Init+0x50>)
 8002030:	f005 f936 	bl	80072a0 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 800203a:	f7ff fb5b 	bl	80016f4 <Error_Handler>
  }

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200014a8 	.word	0x200014a8
 8002048:	40007800 	.word	0x40007800
 800204c:	000186a0 	.word	0x000186a0

08002050 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_USART2_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800207c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002080:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800208a:	f005 f909 	bl	80072a0 <HAL_UART_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002094:	f7ff fb2e 	bl	80016f4 <Error_Handler>
  }

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200015c8 	.word	0x200015c8
 80020a0:	40004400 	.word	0x40004400

080020a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <MX_USART3_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020b0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80020b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020dc:	f005 f8e0 	bl	80072a0 <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020e6:	f7ff fb05 	bl	80016f4 <Error_Handler>
  }

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200014e8 	.word	0x200014e8
 80020f4:	40004800 	.word	0x40004800

080020f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b090      	sub	sp, #64	; 0x40
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a88      	ldr	r2, [pc, #544]	; (8002338 <HAL_UART_MspInit+0x240>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d15c      	bne.n	80021d4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
 800211e:	4b87      	ldr	r3, [pc, #540]	; (800233c <HAL_UART_MspInit+0x244>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a86      	ldr	r2, [pc, #536]	; (800233c <HAL_UART_MspInit+0x244>)
 8002124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b84      	ldr	r3, [pc, #528]	; (800233c <HAL_UART_MspInit+0x244>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	4b80      	ldr	r3, [pc, #512]	; (800233c <HAL_UART_MspInit+0x244>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a7f      	ldr	r2, [pc, #508]	; (800233c <HAL_UART_MspInit+0x244>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b7d      	ldr	r3, [pc, #500]	; (800233c <HAL_UART_MspInit+0x244>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002152:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800215c:	2301      	movs	r3, #1
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002164:	2308      	movs	r3, #8
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800216c:	4619      	mov	r1, r3
 800216e:	4874      	ldr	r0, [pc, #464]	; (8002340 <HAL_UART_MspInit+0x248>)
 8002170:	f000 fe4e 	bl	8002e10 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002174:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_UART_MspInit+0x24c>)
 8002176:	4a74      	ldr	r2, [pc, #464]	; (8002348 <HAL_UART_MspInit+0x250>)
 8002178:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800217a:	4b72      	ldr	r3, [pc, #456]	; (8002344 <HAL_UART_MspInit+0x24c>)
 800217c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002180:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002182:	4b70      	ldr	r3, [pc, #448]	; (8002344 <HAL_UART_MspInit+0x24c>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002188:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <HAL_UART_MspInit+0x24c>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218e:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <HAL_UART_MspInit+0x24c>)
 8002190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002194:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002196:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_UART_MspInit+0x24c>)
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219c:	4b69      	ldr	r3, [pc, #420]	; (8002344 <HAL_UART_MspInit+0x24c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80021a2:	4b68      	ldr	r3, [pc, #416]	; (8002344 <HAL_UART_MspInit+0x24c>)
 80021a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021aa:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_UART_MspInit+0x24c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b0:	4b64      	ldr	r3, [pc, #400]	; (8002344 <HAL_UART_MspInit+0x24c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80021b6:	4863      	ldr	r0, [pc, #396]	; (8002344 <HAL_UART_MspInit+0x24c>)
 80021b8:	f000 fb12 	bl	80027e0 <HAL_DMA_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021c2:	f7ff fa97 	bl	80016f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a5e      	ldr	r2, [pc, #376]	; (8002344 <HAL_UART_MspInit+0x24c>)
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
 80021cc:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <HAL_UART_MspInit+0x24c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021d2:	e103      	b.n	80023dc <HAL_UART_MspInit+0x2e4>
  else if(uartHandle->Instance==UART7)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a5c      	ldr	r2, [pc, #368]	; (800234c <HAL_UART_MspInit+0x254>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d15c      	bne.n	8002298 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_UART7_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_UART_MspInit+0x244>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a55      	ldr	r2, [pc, #340]	; (800233c <HAL_UART_MspInit+0x244>)
 80021e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_UART_MspInit+0x244>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	4b4f      	ldr	r3, [pc, #316]	; (800233c <HAL_UART_MspInit+0x244>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_UART_MspInit+0x244>)
 8002204:	f043 0310 	orr.w	r3, r3, #16
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b4c      	ldr	r3, [pc, #304]	; (800233c <HAL_UART_MspInit+0x244>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002216:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002220:	2301      	movs	r3, #1
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002228:	2308      	movs	r3, #8
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800222c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002230:	4619      	mov	r1, r3
 8002232:	4847      	ldr	r0, [pc, #284]	; (8002350 <HAL_UART_MspInit+0x258>)
 8002234:	f000 fdec 	bl	8002e10 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002238:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_UART_MspInit+0x25c>)
 800223a:	4a47      	ldr	r2, [pc, #284]	; (8002358 <HAL_UART_MspInit+0x260>)
 800223c:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800223e:	4b45      	ldr	r3, [pc, #276]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002240:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002244:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224c:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_UART_MspInit+0x25c>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002258:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_UART_MspInit+0x25c>)
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002260:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002274:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800227a:	4836      	ldr	r0, [pc, #216]	; (8002354 <HAL_UART_MspInit+0x25c>)
 800227c:	f000 fab0 	bl	80027e0 <HAL_DMA_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_UART_MspInit+0x192>
      Error_Handler();
 8002286:	f7ff fa35 	bl	80016f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a31      	ldr	r2, [pc, #196]	; (8002354 <HAL_UART_MspInit+0x25c>)
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
 8002290:	4a30      	ldr	r2, [pc, #192]	; (8002354 <HAL_UART_MspInit+0x25c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002296:	e0a1      	b.n	80023dc <HAL_UART_MspInit+0x2e4>
  else if(uartHandle->Instance==USART2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_UART_MspInit+0x264>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d162      	bne.n	8002368 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_UART_MspInit+0x244>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a24      	ldr	r2, [pc, #144]	; (800233c <HAL_UART_MspInit+0x244>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_UART_MspInit+0x244>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_UART_MspInit+0x244>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_UART_MspInit+0x244>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_UART_MspInit+0x244>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_UART_MspInit+0x244>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a16      	ldr	r2, [pc, #88]	; (800233c <HAL_UART_MspInit+0x244>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_UART_MspInit+0x244>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f6:	2301      	movs	r3, #1
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002306:	2307      	movs	r3, #7
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230e:	4619      	mov	r1, r3
 8002310:	4813      	ldr	r0, [pc, #76]	; (8002360 <HAL_UART_MspInit+0x268>)
 8002312:	f000 fd7d 	bl	8002e10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002316:	2370      	movs	r3, #112	; 0x70
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002326:	2307      	movs	r3, #7
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <HAL_UART_MspInit+0x26c>)
 8002332:	f000 fd6d 	bl	8002e10 <HAL_GPIO_Init>
}
 8002336:	e051      	b.n	80023dc <HAL_UART_MspInit+0x2e4>
 8002338:	40004c00 	.word	0x40004c00
 800233c:	40023800 	.word	0x40023800
 8002340:	40020800 	.word	0x40020800
 8002344:	20001448 	.word	0x20001448
 8002348:	40026040 	.word	0x40026040
 800234c:	40007800 	.word	0x40007800
 8002350:	40021000 	.word	0x40021000
 8002354:	20001528 	.word	0x20001528
 8002358:	40026058 	.word	0x40026058
 800235c:	40004400 	.word	0x40004400
 8002360:	40020000 	.word	0x40020000
 8002364:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_UART_MspInit+0x2ec>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d134      	bne.n	80023dc <HAL_UART_MspInit+0x2e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_UART_MspInit+0x2f0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_UART_MspInit+0x2f0>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_UART_MspInit+0x2f0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_UART_MspInit+0x2f0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <HAL_UART_MspInit+0x2f0>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_UART_MspInit+0x2f0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023bc:	2307      	movs	r3, #7
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	4809      	ldr	r0, [pc, #36]	; (80023ec <HAL_UART_MspInit+0x2f4>)
 80023c8:	f000 fd22 	bl	8002e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2105      	movs	r1, #5
 80023d0:	2027      	movs	r0, #39	; 0x27
 80023d2:	f000 f9db 	bl	800278c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023d6:	2027      	movs	r0, #39	; 0x27
 80023d8:	f000 f9f4 	bl	80027c4 <HAL_NVIC_EnableIRQ>
}
 80023dc:	bf00      	nop
 80023de:	3740      	adds	r7, #64	; 0x40
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40004800 	.word	0x40004800
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020c00 	.word	0x40020c00

080023f0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023fe:	2204      	movs	r2, #4
 8002400:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002404:	2202      	movs	r2, #2
 8002406:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002410:	2202      	movs	r2, #2
 8002412:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002416:	2201      	movs	r2, #1
 8002418:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002428:	2201      	movs	r2, #1
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002434:	f003 fae0 	bl	80059f8 <HAL_PCD_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800243e:	f7ff f959 	bl	80016f4 <Error_Handler>
  }

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20001608 	.word	0x20001608

0800244c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246c:	d13f      	bne.n	80024ee <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800248a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800249c:	230a      	movs	r3, #10
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	4815      	ldr	r0, [pc, #84]	; (80024fc <HAL_PCD_MspInit+0xb0>)
 80024a8:	f000 fcb2 	bl	8002e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	480e      	ldr	r0, [pc, #56]	; (80024fc <HAL_PCD_MspInit+0xb0>)
 80024c2:	f000 fca5 	bl	8002e10 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 80024cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d0:	6353      	str	r3, [r2, #52]	; 0x34
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_PCD_MspInit+0xac>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000

08002500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002538 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002506:	e003      	b.n	8002510 <LoopCopyDataInit>

08002508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800250a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800250c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800250e:	3104      	adds	r1, #4

08002510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002510:	480b      	ldr	r0, [pc, #44]	; (8002540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002518:	d3f6      	bcc.n	8002508 <CopyDataInit>
  ldr  r2, =_sbss
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800251c:	e002      	b.n	8002524 <LoopFillZerobss>

0800251e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800251e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002520:	f842 3b04 	str.w	r3, [r2], #4

08002524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002528:	d3f9      	bcc.n	800251e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800252a:	f7ff fa81 	bl	8001a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252e:	f00a fcd1 	bl	800ced4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002532:	f7ff f813 	bl	800155c <main>
  bx  lr    
 8002536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002538:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800253c:	08011930 	.word	0x08011930
  ldr  r0, =_sdata
 8002540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002544:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002548:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800254c:	20001bb4 	.word	0x20001bb4

08002550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC_IRQHandler>
	...

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_Init+0x40>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <HAL_Init+0x40>)
 800256a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800256e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_Init+0x40>)
 8002576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 f8fa 	bl	8002776 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff f8ea 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002588:	f7ff f8bc 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000008 	.word	0x20000008
 80025bc:	20001a10 	.word	0x20001a10

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20001a10 	.word	0x20001a10

080025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_Delay+0x40>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000008 	.word	0x20000008

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	60d3      	str	r3, [r2, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff4c 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279e:	f7ff ff61 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f7ff ffb1 	bl	8002710 <NVIC_EncodePriority>
 80027ae:	4602      	mov	r2, r0
 80027b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff80 	bl	80026bc <__NVIC_SetPriority>
}
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff54 	bl	8002680 <__NVIC_EnableIRQ>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff fee8 	bl	80025c0 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e099      	b.n	8002930 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281c:	e00f      	b.n	800283e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800281e:	f7ff fecf 	bl	80025c0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b05      	cmp	r3, #5
 800282a:	d908      	bls.n	800283e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e078      	b.n	8002930 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e8      	bne.n	800281e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_DMA_Init+0x158>)
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2b04      	cmp	r3, #4
 8002896:	d107      	bne.n	80028a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	4313      	orrs	r3, r2
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f023 0307 	bic.w	r3, r3, #7
 80028be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d117      	bne.n	8002902 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00e      	beq.n	8002902 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fa19 	bl	8002d1c <DMA_CheckFifoParam>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028fe:	2301      	movs	r3, #1
 8002900:	e016      	b.n	8002930 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f9d0 	bl	8002cb0 <DMA_CalcBaseAndBitshift>
 8002910:	4603      	mov	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	223f      	movs	r2, #63	; 0x3f
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	f010803f 	.word	0xf010803f

0800293c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d004      	beq.n	800295a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2280      	movs	r2, #128	; 0x80
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00c      	b.n	8002974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2205      	movs	r2, #5
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800298c:	4b92      	ldr	r3, [pc, #584]	; (8002bd8 <HAL_DMA_IRQHandler+0x258>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a92      	ldr	r2, [pc, #584]	; (8002bdc <HAL_DMA_IRQHandler+0x25c>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0a9b      	lsrs	r3, r3, #10
 8002998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2208      	movs	r2, #8
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01a      	beq.n	80029ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	2208      	movs	r2, #8
 80029da:	409a      	lsls	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	2201      	movs	r2, #1
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	2201      	movs	r2, #1
 8002a10:	409a      	lsls	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0202 	orr.w	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2204      	movs	r2, #4
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d012      	beq.n	8002a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a44:	2204      	movs	r2, #4
 8002a46:	409a      	lsls	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	f043 0204 	orr.w	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d043      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d03c      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d108      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d024      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e01f      	b.n	8002af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e016      	b.n	8002af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0208 	bic.w	r2, r2, #8
 8002ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	2220      	movs	r2, #32
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 808e 	beq.w	8002c1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8086 	beq.w	8002c1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	2220      	movs	r2, #32
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d136      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0216 	bic.w	r2, r2, #22
 8002b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x1da>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0208 	bic.w	r2, r2, #8
 8002b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	223f      	movs	r2, #63	; 0x3f
 8002b70:	409a      	lsls	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07d      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
        }
        return;
 8002b96:	e078      	b.n	8002c8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01c      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d108      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d030      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e02b      	b.n	8002c1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d027      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e022      	b.n	8002c1e <HAL_DMA_IRQHandler+0x29e>
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0210 	bic.w	r2, r2, #16
 8002bfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d032      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d022      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d307      	bcc.n	8002c66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f2      	bne.n	8002c4a <HAL_DMA_IRQHandler+0x2ca>
 8002c64:	e000      	b.n	8002c68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e000      	b.n	8002c8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c8a:	bf00      	nop
    }
  }
}
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop

08002c94 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca2:	b2db      	uxtb	r3, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3b10      	subs	r3, #16
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <DMA_CalcBaseAndBitshift+0x64>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <DMA_CalcBaseAndBitshift+0x68>)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d909      	bls.n	8002cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ce6:	f023 0303 	bic.w	r3, r3, #3
 8002cea:	1d1a      	adds	r2, r3, #4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	659a      	str	r2, [r3, #88]	; 0x58
 8002cf0:	e007      	b.n	8002d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	aaaaaaab 	.word	0xaaaaaaab
 8002d18:	080115f4 	.word	0x080115f4

08002d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11f      	bne.n	8002d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d855      	bhi.n	8002de8 <DMA_CheckFifoParam+0xcc>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <DMA_CheckFifoParam+0x28>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d67 	.word	0x08002d67
 8002d4c:	08002d55 	.word	0x08002d55
 8002d50:	08002de9 	.word	0x08002de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d045      	beq.n	8002dec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d64:	e042      	b.n	8002dec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d6e:	d13f      	bne.n	8002df0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d74:	e03c      	b.n	8002df0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7e:	d121      	bne.n	8002dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d836      	bhi.n	8002df4 <DMA_CheckFifoParam+0xd8>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <DMA_CheckFifoParam+0x70>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002d9d 	.word	0x08002d9d
 8002d90:	08002da3 	.word	0x08002da3
 8002d94:	08002d9d 	.word	0x08002d9d
 8002d98:	08002db5 	.word	0x08002db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002da0:	e02f      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d024      	beq.n	8002df8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db2:	e021      	b.n	8002df8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dbc:	d11e      	bne.n	8002dfc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dc2:	e01b      	b.n	8002dfc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d902      	bls.n	8002dd0 <DMA_CheckFifoParam+0xb4>
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d003      	beq.n	8002dd6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dce:	e018      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e015      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00e      	beq.n	8002e00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      break;
 8002de6:	e00b      	b.n	8002e00 <DMA_CheckFifoParam+0xe4>
      break;
 8002de8:	bf00      	nop
 8002dea:	e00a      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      break;
 8002dec:	bf00      	nop
 8002dee:	e008      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      break;
 8002df0:	bf00      	nop
 8002df2:	e006      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      break;
 8002df4:	bf00      	nop
 8002df6:	e004      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      break;
 8002df8:	bf00      	nop
 8002dfa:	e002      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      break;   
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <DMA_CheckFifoParam+0xe6>
      break;
 8002e00:	bf00      	nop
    }
  } 
  
  return status; 
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e177      	b.n	800311c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	f040 8166 	bne.w	8003116 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00b      	beq.n	8002e6a <HAL_GPIO_Init+0x5a>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5e:	2b11      	cmp	r3, #17
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b12      	cmp	r3, #18
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0xfc>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b12      	cmp	r3, #18
 8002f0a:	d123      	bne.n	8002f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0203 	and.w	r2, r3, #3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80c0 	beq.w	8003116 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b65      	ldr	r3, [pc, #404]	; (8003130 <HAL_GPIO_Init+0x320>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	4a64      	ldr	r2, [pc, #400]	; (8003130 <HAL_GPIO_Init+0x320>)
 8002fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa6:	4b62      	ldr	r3, [pc, #392]	; (8003130 <HAL_GPIO_Init+0x320>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb2:	4a60      	ldr	r2, [pc, #384]	; (8003134 <HAL_GPIO_Init+0x324>)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	220f      	movs	r2, #15
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a57      	ldr	r2, [pc, #348]	; (8003138 <HAL_GPIO_Init+0x328>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d037      	beq.n	800304e <HAL_GPIO_Init+0x23e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x32c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_GPIO_Init+0x23a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_GPIO_Init+0x330>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d02b      	beq.n	8003046 <HAL_GPIO_Init+0x236>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a54      	ldr	r2, [pc, #336]	; (8003144 <HAL_GPIO_Init+0x334>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d025      	beq.n	8003042 <HAL_GPIO_Init+0x232>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a53      	ldr	r2, [pc, #332]	; (8003148 <HAL_GPIO_Init+0x338>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01f      	beq.n	800303e <HAL_GPIO_Init+0x22e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_GPIO_Init+0x33c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d019      	beq.n	800303a <HAL_GPIO_Init+0x22a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a51      	ldr	r2, [pc, #324]	; (8003150 <HAL_GPIO_Init+0x340>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_GPIO_Init+0x226>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a50      	ldr	r2, [pc, #320]	; (8003154 <HAL_GPIO_Init+0x344>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00d      	beq.n	8003032 <HAL_GPIO_Init+0x222>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4f      	ldr	r2, [pc, #316]	; (8003158 <HAL_GPIO_Init+0x348>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <HAL_GPIO_Init+0x21e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4e      	ldr	r2, [pc, #312]	; (800315c <HAL_GPIO_Init+0x34c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_GPIO_Init+0x21a>
 8003026:	2309      	movs	r3, #9
 8003028:	e012      	b.n	8003050 <HAL_GPIO_Init+0x240>
 800302a:	230a      	movs	r3, #10
 800302c:	e010      	b.n	8003050 <HAL_GPIO_Init+0x240>
 800302e:	2308      	movs	r3, #8
 8003030:	e00e      	b.n	8003050 <HAL_GPIO_Init+0x240>
 8003032:	2307      	movs	r3, #7
 8003034:	e00c      	b.n	8003050 <HAL_GPIO_Init+0x240>
 8003036:	2306      	movs	r3, #6
 8003038:	e00a      	b.n	8003050 <HAL_GPIO_Init+0x240>
 800303a:	2305      	movs	r3, #5
 800303c:	e008      	b.n	8003050 <HAL_GPIO_Init+0x240>
 800303e:	2304      	movs	r3, #4
 8003040:	e006      	b.n	8003050 <HAL_GPIO_Init+0x240>
 8003042:	2303      	movs	r3, #3
 8003044:	e004      	b.n	8003050 <HAL_GPIO_Init+0x240>
 8003046:	2302      	movs	r3, #2
 8003048:	e002      	b.n	8003050 <HAL_GPIO_Init+0x240>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_GPIO_Init+0x240>
 800304e:	2300      	movs	r3, #0
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	f002 0203 	and.w	r2, r2, #3
 8003056:	0092      	lsls	r2, r2, #2
 8003058:	4093      	lsls	r3, r2
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003060:	4934      	ldr	r1, [pc, #208]	; (8003134 <HAL_GPIO_Init+0x324>)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	3302      	adds	r3, #2
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306e:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <HAL_GPIO_Init+0x350>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003092:	4a33      	ldr	r2, [pc, #204]	; (8003160 <HAL_GPIO_Init+0x350>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003098:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_GPIO_Init+0x350>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030bc:	4a28      	ldr	r2, [pc, #160]	; (8003160 <HAL_GPIO_Init+0x350>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_GPIO_Init+0x350>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_GPIO_Init+0x350>)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_GPIO_Init+0x350>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_GPIO_Init+0x350>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3301      	adds	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	f67f ae84 	bls.w	8002e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003124:	bf00      	nop
 8003126:	3724      	adds	r7, #36	; 0x24
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40023800 	.word	0x40023800
 8003134:	40013800 	.word	0x40013800
 8003138:	40020000 	.word	0x40020000
 800313c:	40020400 	.word	0x40020400
 8003140:	40020800 	.word	0x40020800
 8003144:	40020c00 	.word	0x40020c00
 8003148:	40021000 	.word	0x40021000
 800314c:	40021400 	.word	0x40021400
 8003150:	40021800 	.word	0x40021800
 8003154:	40021c00 	.word	0x40021c00
 8003158:	40022000 	.word	0x40022000
 800315c:	40022400 	.word	0x40022400
 8003160:	40013c00 	.word	0x40013c00

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003180:	e003      	b.n	800318a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	619a      	str	r2, [r3, #24]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e11f      	b.n	80033ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe f90c 	bl	80013dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031fc:	f003 f954 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8003200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a7b      	ldr	r2, [pc, #492]	; (80033f4 <HAL_I2C_Init+0x25c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d807      	bhi.n	800321c <HAL_I2C_Init+0x84>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a7a      	ldr	r2, [pc, #488]	; (80033f8 <HAL_I2C_Init+0x260>)
 8003210:	4293      	cmp	r3, r2
 8003212:	bf94      	ite	ls
 8003214:	2301      	movls	r3, #1
 8003216:	2300      	movhi	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e006      	b.n	800322a <HAL_I2C_Init+0x92>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a77      	ldr	r2, [pc, #476]	; (80033fc <HAL_I2C_Init+0x264>)
 8003220:	4293      	cmp	r3, r2
 8003222:	bf94      	ite	ls
 8003224:	2301      	movls	r3, #1
 8003226:	2300      	movhi	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0db      	b.n	80033ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a72      	ldr	r2, [pc, #456]	; (8003400 <HAL_I2C_Init+0x268>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0c9b      	lsrs	r3, r3, #18
 800323c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a64      	ldr	r2, [pc, #400]	; (80033f4 <HAL_I2C_Init+0x25c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d802      	bhi.n	800326c <HAL_I2C_Init+0xd4>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	e009      	b.n	8003280 <HAL_I2C_Init+0xe8>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_I2C_Init+0x26c>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	3301      	adds	r3, #1
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	430b      	orrs	r3, r1
 8003286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4956      	ldr	r1, [pc, #344]	; (80033f4 <HAL_I2C_Init+0x25c>)
 800329c:	428b      	cmp	r3, r1
 800329e:	d80d      	bhi.n	80032bc <HAL_I2C_Init+0x124>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e59      	subs	r1, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	bf38      	it	cc
 80032b8:	2304      	movcc	r3, #4
 80032ba:	e04f      	b.n	800335c <HAL_I2C_Init+0x1c4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <HAL_I2C_Init+0x150>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e012      	b.n	800330e <HAL_I2C_Init+0x176>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	0099      	lsls	r1, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Init+0x17e>
 8003312:	2301      	movs	r3, #1
 8003314:	e022      	b.n	800335c <HAL_I2C_Init+0x1c4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <HAL_I2C_Init+0x1a4>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1e58      	subs	r0, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	e00f      	b.n	800335c <HAL_I2C_Init+0x1c4>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e58      	subs	r0, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	0099      	lsls	r1, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003352:	3301      	adds	r3, #1
 8003354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	6809      	ldr	r1, [r1, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800338a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6911      	ldr	r1, [r2, #16]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	430b      	orrs	r3, r1
 800339e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	000186a0 	.word	0x000186a0
 80033f8:	001e847f 	.word	0x001e847f
 80033fc:	003d08ff 	.word	0x003d08ff
 8003400:	431bde83 	.word	0x431bde83
 8003404:	10624dd3 	.word	0x10624dd3

08003408 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003422:	f7ff f8cd 	bl	80025c0 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b20      	cmp	r3, #32
 8003432:	f040 80d9 	bne.w	80035e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2319      	movs	r3, #25
 800343c:	2201      	movs	r2, #1
 800343e:	496d      	ldr	r1, [pc, #436]	; (80035f4 <HAL_I2C_Mem_Write+0x1ec>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f002 f866 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	e0cc      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_I2C_Mem_Write+0x56>
 800345a:	2302      	movs	r3, #2
 800345c:	e0c5      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d007      	beq.n	8003484 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2221      	movs	r2, #33	; 0x21
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a3a      	ldr	r2, [r7, #32]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a4d      	ldr	r2, [pc, #308]	; (80035f8 <HAL_I2C_Mem_Write+0x1f0>)
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034c6:	88f8      	ldrh	r0, [r7, #6]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f001 fe22 	bl	8005120 <I2C_RequestMemoryWrite>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d052      	beq.n	8003588 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e081      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f002 f8e7 	bl	80056be <I2C_WaitOnTXEFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d107      	bne.n	800350e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e06b      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_I2C_Mem_Write+0x180>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d017      	beq.n	8003588 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1aa      	bne.n	80034e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f002 f8d3 	bl	8005740 <I2C_WaitOnBTFFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d107      	bne.n	80035b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e016      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	00100002 	.word	0x00100002
 80035f8:	ffff0000 	.word	0xffff0000

080035fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003616:	f7fe ffd3 	bl	80025c0 <HAL_GetTick>
 800361a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b20      	cmp	r3, #32
 8003626:	f040 8208 	bne.w	8003a3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2319      	movs	r3, #25
 8003630:	2201      	movs	r2, #1
 8003632:	497b      	ldr	r1, [pc, #492]	; (8003820 <HAL_I2C_Mem_Read+0x224>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f001 ff6c 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
 8003642:	e1fb      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Mem_Read+0x56>
 800364e:	2302      	movs	r3, #2
 8003650:	e1f4      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d007      	beq.n	8003678 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2222      	movs	r2, #34	; 0x22
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_I2C_Mem_Read+0x228>)
 80036b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ba:	88f8      	ldrh	r0, [r7, #6]
 80036bc:	893a      	ldrh	r2, [r7, #8]
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f001 fdbc 	bl	8005248 <I2C_RequestMemoryRead>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e1b0      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d113      	bne.n	800370a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	623b      	str	r3, [r7, #32]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e184      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	2b01      	cmp	r3, #1
 8003710:	d11b      	bne.n	800374a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e164      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	2b02      	cmp	r3, #2
 8003750:	d11b      	bne.n	800378a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003760:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	e144      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037a0:	e138      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	f200 80f1 	bhi.w	800398e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d123      	bne.n	80037fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f002 f802 	bl	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e139      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037fa:	e10b      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b02      	cmp	r3, #2
 8003802:	d14e      	bne.n	80038a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	2200      	movs	r2, #0
 800380c:	4906      	ldr	r1, [pc, #24]	; (8003828 <HAL_I2C_Mem_Read+0x22c>)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f001 fe7f 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e10e      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
 800381e:	bf00      	nop
 8003820:	00100002 	.word	0x00100002
 8003824:	ffff0000 	.word	0xffff0000
 8003828:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a0:	e0b8      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2200      	movs	r2, #0
 80038aa:	4966      	ldr	r1, [pc, #408]	; (8003a44 <HAL_I2C_Mem_Read+0x448>)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f001 fe30 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0bf      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	2200      	movs	r2, #0
 8003906:	494f      	ldr	r1, [pc, #316]	; (8003a44 <HAL_I2C_Mem_Read+0x448>)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f001 fe02 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e091      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800398c:	e042      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f001 ff15 	bl	80057c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e04c      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d118      	bne.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f aec2 	bne.w	80037a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	00010004 	.word	0x00010004

08003a48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d003      	beq.n	8003a80 <HAL_I2C_EV_IRQHandler+0x38>
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	f040 80b6 	bne.w	8003bec <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10d      	bne.n	8003ab6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003aa0:	d003      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x62>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_EV_IRQHandler+0x66>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x68>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	f000 8127 	beq.w	8003d04 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_I2C_EV_IRQHandler+0x92>
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	0a5b      	lsrs	r3, r3, #9
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f001 fefd 	bl	80058cc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fd12 	bl	80044fc <I2C_Master_SB>
 8003ad8:	e087      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_I2C_EV_IRQHandler+0xb2>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	0a5b      	lsrs	r3, r3, #9
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fd88 	bl	8004608 <I2C_Master_ADD10>
 8003af8:	e077      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	085b      	lsrs	r3, r3, #1
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_I2C_EV_IRQHandler+0xd2>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	0a5b      	lsrs	r3, r3, #9
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fda2 	bl	800465c <I2C_Master_ADDR>
 8003b18:	e067      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d030      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b34:	f000 80e8 	beq.w	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	09db      	lsrs	r3, r3, #7
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00f      	beq.n	8003b64 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f9de 	bl	8003f1e <I2C_MasterTransmit_TXE>
 8003b62:	e042      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80cb 	beq.w	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	0a5b      	lsrs	r3, r3, #9
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80c4 	beq.w	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fa68 	bl	8004056 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b86:	e0bf      	b.n	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b96:	f000 80b7 	beq.w	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00f      	beq.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x17e>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0a9b      	lsrs	r3, r3, #10
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x17e>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d103      	bne.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fb30 	bl	8004224 <I2C_MasterReceive_RXNE>
 8003bc4:	e011      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 809a 	beq.w	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	0a5b      	lsrs	r3, r3, #9
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8093 	beq.w	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fba0 	bl	8004328 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be8:	e08e      	b.n	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003bea:	e08d      	b.n	8003d08 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e007      	b.n	8003c0e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d012      	beq.n	8003c40 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	0a5b      	lsrs	r3, r3, #9
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 ff5e 	bl	8004afa <I2C_Slave_ADDR>
 8003c3e:	e066      	b.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_I2C_EV_IRQHandler+0x218>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	0a5b      	lsrs	r3, r3, #9
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 ff93 	bl	8004b84 <I2C_Slave_STOPF>
 8003c5e:	e056      	b.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	2b21      	cmp	r3, #33	; 0x21
 8003c64:	d002      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0x224>
 8003c66:	7bbb      	ldrb	r3, [r7, #14]
 8003c68:	2b29      	cmp	r3, #41	; 0x29
 8003c6a:	d125      	bne.n	8003cb8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	09db      	lsrs	r3, r3, #7
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00f      	beq.n	8003c98 <HAL_I2C_EV_IRQHandler+0x250>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <HAL_I2C_EV_IRQHandler+0x250>
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fe74 	bl	800497e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c96:	e039      	b.n	8003d0c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d033      	beq.n	8003d0c <HAL_I2C_EV_IRQHandler+0x2c4>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	0a5b      	lsrs	r3, r3, #9
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02d      	beq.n	8003d0c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fea1 	bl	80049f8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cb6:	e029      	b.n	8003d0c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x29c>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	0a9b      	lsrs	r3, r3, #10
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x29c>
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 feac 	bl	8004a3a <I2C_SlaveReceive_RXNE>
 8003ce2:	e014      	b.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00e      	beq.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	0a5b      	lsrs	r3, r3, #9
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 feda 	bl	8004ab6 <I2C_SlaveReceive_BTF>
 8003d02:	e004      	b.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003d04:	bf00      	nop
 8003d06:	e002      	b.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d0c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d36:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00e      	beq.n	8003d62 <HAL_I2C_ER_IRQHandler+0x4e>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	0a5b      	lsrs	r3, r3, #9
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <HAL_I2C_ER_IRQHandler+0x78>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d8a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03f      	beq.n	8003e18 <HAL_I2C_ER_IRQHandler+0x104>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d039      	beq.n	8003e18 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003da4:	7efb      	ldrb	r3, [r7, #27]
 8003da6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003dbe:	7ebb      	ldrb	r3, [r7, #26]
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d112      	bne.n	8003dea <HAL_I2C_ER_IRQHandler+0xd6>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_I2C_ER_IRQHandler+0xd6>
 8003dca:	7cfb      	ldrb	r3, [r7, #19]
 8003dcc:	2b21      	cmp	r3, #33	; 0x21
 8003dce:	d008      	beq.n	8003de2 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	2b29      	cmp	r3, #41	; 0x29
 8003dd4:	d005      	beq.n	8003de2 <HAL_I2C_ER_IRQHandler+0xce>
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b28      	cmp	r3, #40	; 0x28
 8003dda:	d106      	bne.n	8003dea <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b21      	cmp	r3, #33	; 0x21
 8003de0:	d103      	bne.n	8003dea <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fffe 	bl	8004de4 <I2C_Slave_AF>
 8003de8:	e016      	b.n	8003e18 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003dfc:	7efb      	ldrb	r3, [r7, #27]
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d002      	beq.n	8003e08 <HAL_I2C_ER_IRQHandler+0xf4>
 8003e02:	7efb      	ldrb	r3, [r7, #27]
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d107      	bne.n	8003e18 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	0adb      	lsrs	r3, r3, #11
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <HAL_I2C_ER_IRQHandler+0x12e>
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	f043 0308 	orr.w	r3, r3, #8
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003e40:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 f835 	bl	8004ec4 <I2C_ITError>
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	3728      	adds	r7, #40	; 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	70fb      	strb	r3, [r7, #3]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d150      	bne.n	8003fe6 <I2C_MasterTransmit_TXE+0xc8>
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b21      	cmp	r3, #33	; 0x21
 8003f48:	d14d      	bne.n	8003fe6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d01d      	beq.n	8003f8c <I2C_MasterTransmit_TXE+0x6e>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d01a      	beq.n	8003f8c <I2C_MasterTransmit_TXE+0x6e>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f5c:	d016      	beq.n	8003f8c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2211      	movs	r2, #17
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff ff6c 	bl	8003e62 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f8a:	e060      	b.n	800404e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f9a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b40      	cmp	r3, #64	; 0x40
 8003fc4:	d107      	bne.n	8003fd6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ff87 	bl	8003ee2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fd4:	e03b      	b.n	800404e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ff3f 	bl	8003e62 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fe4:	e033      	b.n	800404e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	2b21      	cmp	r3, #33	; 0x21
 8003fea:	d005      	beq.n	8003ff8 <I2C_MasterTransmit_TXE+0xda>
 8003fec:	7bbb      	ldrb	r3, [r7, #14]
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d12d      	bne.n	800404e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b22      	cmp	r3, #34	; 0x22
 8003ff6:	d12a      	bne.n	800404e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004010:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004012:	e01c      	b.n	800404e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d103      	bne.n	8004028 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f898 	bl	8004156 <I2C_MemoryTransmit_TXE_BTF>
}
 8004026:	e012      	b.n	800404e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800404c:	e7ff      	b.n	800404e <I2C_MasterTransmit_TXE+0x130>
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b21      	cmp	r3, #33	; 0x21
 800406e:	d165      	bne.n	800413c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d012      	beq.n	80040a0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800409e:	e056      	b.n	800414e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d01d      	beq.n	80040e2 <I2C_MasterTransmit_BTF+0x8c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d01a      	beq.n	80040e2 <I2C_MasterTransmit_BTF+0x8c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040b2:	d016      	beq.n	80040e2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2211      	movs	r2, #17
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fec1 	bl	8003e62 <HAL_I2C_MasterTxCpltCallback>
}
 80040e0:	e035      	b.n	800414e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040f0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004100:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d107      	bne.n	800412c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fedc 	bl	8003ee2 <HAL_I2C_MemTxCpltCallback>
}
 800412a:	e010      	b.n	800414e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fe94 	bl	8003e62 <HAL_I2C_MasterTxCpltCallback>
}
 800413a:	e008      	b.n	800414e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d102      	bne.n	800414e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f804 	bl	8004156 <I2C_MemoryTransmit_TXE_BTF>
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11d      	bne.n	80041a2 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	2b01      	cmp	r3, #1
 800416c:	d10b      	bne.n	8004186 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	b2da      	uxtb	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004184:	e048      	b.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418a:	b29b      	uxth	r3, r3
 800418c:	121b      	asrs	r3, r3, #8
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041a0:	e03a      	b.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10b      	bne.n	80041c2 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041c0:	e02a      	b.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d126      	bne.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b22      	cmp	r3, #34	; 0x22
 80041d4:	d108      	bne.n	80041e8 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]
}
 80041e6:	e017      	b.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b21      	cmp	r3, #33	; 0x21
 80041f2:	d111      	bne.n	8004218 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b22      	cmp	r3, #34	; 0x22
 8004236:	d173      	bne.n	8004320 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d920      	bls.n	8004288 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b03      	cmp	r3, #3
 8004274:	d154      	bne.n	8004320 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004284:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004286:	e04b      	b.n	8004320 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	2b02      	cmp	r3, #2
 800428e:	d047      	beq.n	8004320 <I2C_MasterReceive_RXNE+0xfc>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d002      	beq.n	800429c <I2C_MasterReceive_RXNE+0x78>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d141      	bne.n	8004320 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ba:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d10a      	bne.n	800430c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f006 fa2b 	bl	800a760 <HAL_I2C_MemRxCpltCallback>
}
 800430a:	e009      	b.n	8004320 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2212      	movs	r2, #18
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fdab 	bl	8003e76 <HAL_I2C_MasterRxCpltCallback>
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b04      	cmp	r3, #4
 800433e:	d11b      	bne.n	8004378 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004376:	e0bd      	b.n	80044f4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b03      	cmp	r3, #3
 8004380:	d129      	bne.n	80043d6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004390:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d00a      	beq.n	80043ae <I2C_MasterReceive_BTF+0x86>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d007      	beq.n	80043ae <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043d4:	e08e      	b.n	80044f4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d176      	bne.n	80044ce <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d002      	beq.n	80043ec <I2C_MasterReceive_BTF+0xc4>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d108      	bne.n	80043fe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e019      	b.n	8004432 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d002      	beq.n	800440a <I2C_MasterReceive_BTF+0xe2>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d108      	bne.n	800441c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e00a      	b.n	8004432 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d007      	beq.n	8004432 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004430:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800448c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d10a      	bne.n	80044b8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f006 f955 	bl	800a760 <HAL_I2C_MemRxCpltCallback>
}
 80044b6:	e01d      	b.n	80044f4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2212      	movs	r2, #18
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fcd5 	bl	8003e76 <HAL_I2C_MasterRxCpltCallback>
}
 80044cc:	e012      	b.n	80044f4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d117      	bne.n	8004540 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004528:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800452a:	e067      	b.n	80045fc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	611a      	str	r2, [r3, #16]
}
 800453e:	e05d      	b.n	80045fc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004548:	d133      	bne.n	80045b2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b21      	cmp	r3, #33	; 0x21
 8004554:	d109      	bne.n	800456a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004566:	611a      	str	r2, [r3, #16]
 8004568:	e008      	b.n	800457c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	b2da      	uxtb	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <I2C_Master_SB+0x92>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d108      	bne.n	80045a0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	2b00      	cmp	r3, #0
 8004594:	d032      	beq.n	80045fc <I2C_Master_SB+0x100>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02d      	beq.n	80045fc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ae:	605a      	str	r2, [r3, #4]
}
 80045b0:	e024      	b.n	80045fc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10e      	bne.n	80045d8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	b29b      	uxth	r3, r3
 80045c0:	11db      	asrs	r3, r3, #7
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0306 	and.w	r3, r3, #6
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f063 030f 	orn	r3, r3, #15
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	611a      	str	r2, [r3, #16]
}
 80045d6:	e011      	b.n	80045fc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10d      	bne.n	80045fc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	11db      	asrs	r3, r3, #7
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f003 0306 	and.w	r3, r3, #6
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f063 030e 	orn	r3, r3, #14
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	b2da      	uxtb	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <I2C_Master_ADD10+0x24>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <I2C_Master_ADD10+0x38>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800464e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800465c:	b480      	push	{r7}
 800465e:	b091      	sub	sp, #68	; 0x44
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	f040 8169 	bne.w	800495a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <I2C_Master_ADDR+0x54>
 8004690:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d10b      	bne.n	80046b0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004698:	2300      	movs	r3, #0
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	e160      	b.n	8004972 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d11d      	bne.n	80046f4 <I2C_Master_ADDR+0x98>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046c0:	d118      	bne.n	80046f4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c2:	2300      	movs	r3, #0
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	651a      	str	r2, [r3, #80]	; 0x50
 80046f2:	e13e      	b.n	8004972 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d113      	bne.n	8004726 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fe:	2300      	movs	r3, #0
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e115      	b.n	8004952 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	f040 808a 	bne.w	8004846 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004738:	d137      	bne.n	80047aa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004748:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004758:	d113      	bne.n	8004782 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	e0e7      	b.n	8004952 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	623b      	str	r3, [r7, #32]
 8004796:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e0d3      	b.n	8004952 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d02e      	beq.n	800480e <I2C_Master_ADDR+0x1b2>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d02b      	beq.n	800480e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b12      	cmp	r3, #18
 80047ba:	d102      	bne.n	80047c2 <I2C_Master_ADDR+0x166>
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d125      	bne.n	800480e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d00e      	beq.n	80047e6 <I2C_Master_ADDR+0x18a>
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d00b      	beq.n	80047e6 <I2C_Master_ADDR+0x18a>
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d008      	beq.n	80047e6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e007      	b.n	80047f6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	e0a1      	b.n	8004952 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e085      	b.n	8004952 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d14d      	bne.n	80048ec <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	2b04      	cmp	r3, #4
 8004854:	d016      	beq.n	8004884 <I2C_Master_ADDR+0x228>
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	2b02      	cmp	r3, #2
 800485a:	d013      	beq.n	8004884 <I2C_Master_ADDR+0x228>
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	2b10      	cmp	r3, #16
 8004860:	d010      	beq.n	8004884 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004870:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e007      	b.n	8004894 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004892:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a2:	d117      	bne.n	80048d4 <I2C_Master_ADDR+0x278>
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048aa:	d00b      	beq.n	80048c4 <I2C_Master_ADDR+0x268>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d008      	beq.n	80048c4 <I2C_Master_ADDR+0x268>
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d005      	beq.n	80048c4 <I2C_Master_ADDR+0x268>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d002      	beq.n	80048c4 <I2C_Master_ADDR+0x268>
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d107      	bne.n	80048d4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	e032      	b.n	8004952 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048fa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490a:	d117      	bne.n	800493c <I2C_Master_ADDR+0x2e0>
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004912:	d00b      	beq.n	800492c <I2C_Master_ADDR+0x2d0>
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	2b01      	cmp	r3, #1
 8004918:	d008      	beq.n	800492c <I2C_Master_ADDR+0x2d0>
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2b08      	cmp	r3, #8
 800491e:	d005      	beq.n	800492c <I2C_Master_ADDR+0x2d0>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b10      	cmp	r3, #16
 8004924:	d002      	beq.n	800492c <I2C_Master_ADDR+0x2d0>
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b20      	cmp	r3, #32
 800492a:	d107      	bne.n	800493c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800493a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004958:	e00b      	b.n	8004972 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
}
 8004970:	e7ff      	b.n	8004972 <I2C_Master_ADDR+0x316>
 8004972:	bf00      	nop
 8004974:	3744      	adds	r7, #68	; 0x44
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02b      	beq.n	80049f0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d114      	bne.n	80049f0 <I2C_SlaveTransmit_TXE+0x72>
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b29      	cmp	r3, #41	; 0x29
 80049ca:	d111      	bne.n	80049f0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2221      	movs	r2, #33	; 0x21
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2228      	movs	r2, #40	; 0x28
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fa4d 	bl	8003e8a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d011      	beq.n	8004a2e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02c      	beq.n	8004aae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d114      	bne.n	8004aae <I2C_SlaveReceive_RXNE+0x74>
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b2a      	cmp	r3, #42	; 0x2a
 8004a88:	d111      	bne.n	8004aae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2222      	movs	r2, #34	; 0x22
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2228      	movs	r2, #40	; 0x28
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff f9f8 	bl	8003e9e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d012      	beq.n	8004aee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b14:	2b28      	cmp	r3, #40	; 0x28
 8004b16:	d127      	bne.n	8004b68 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b26:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	09db      	lsrs	r3, r3, #7
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	81bb      	strh	r3, [r7, #12]
 8004b4a:	e002      	b.n	8004b52 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b5a:	89ba      	ldrh	r2, [r7, #12]
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff f9a6 	bl	8003eb2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b66:	e008      	b.n	8004b7a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0202 	mvn.w	r2, #2
 8004b70:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	d172      	bne.n	8004cc8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b22      	cmp	r3, #34	; 0x22
 8004be6:	d002      	beq.n	8004bee <I2C_Slave_STOPF+0x6a>
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b2a      	cmp	r3, #42	; 0x2a
 8004bec:	d135      	bne.n	8004c5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe f834 	bl	8002c94 <HAL_DMA_GetState>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d049      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <I2C_Slave_STOPF+0x258>)
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fd fe7c 	bl	800293c <HAL_DMA_Abort_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03d      	beq.n	8004cc6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c54:	4610      	mov	r0, r2
 8004c56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c58:	e035      	b.n	8004cc6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fffe 	bl	8002c94 <HAL_DMA_GetState>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d014      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	4a4e      	ldr	r2, [pc, #312]	; (8004ddc <I2C_Slave_STOPF+0x258>)
 8004ca4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fe46 	bl	800293c <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
 8004cc4:	e000      	b.n	8004cc8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03e      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d112      	bne.n	8004d06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d112      	bne.n	8004d3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8b3 	bl	8004ec4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d5e:	e039      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b2a      	cmp	r3, #42	; 0x2a
 8004d64:	d109      	bne.n	8004d7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2228      	movs	r2, #40	; 0x28
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff f892 	bl	8003e9e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b28      	cmp	r3, #40	; 0x28
 8004d84:	d111      	bne.n	8004daa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <I2C_Slave_STOPF+0x25c>)
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff f893 	bl	8003ece <HAL_I2C_ListenCpltCallback>
}
 8004da8:	e014      	b.n	8004dd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	2b22      	cmp	r3, #34	; 0x22
 8004db0:	d002      	beq.n	8004db8 <I2C_Slave_STOPF+0x234>
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b22      	cmp	r3, #34	; 0x22
 8004db6:	d10d      	bne.n	8004dd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff f865 	bl	8003e9e <HAL_I2C_SlaveRxCpltCallback>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08005415 	.word	0x08005415
 8004de0:	ffff0000 	.word	0xffff0000

08004de4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d002      	beq.n	8004e06 <I2C_Slave_AF+0x22>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d129      	bne.n	8004e5a <I2C_Slave_AF+0x76>
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b28      	cmp	r3, #40	; 0x28
 8004e0a:	d126      	bne.n	8004e5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <I2C_Slave_AF+0xdc>)
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff f83b 	bl	8003ece <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004e58:	e02e      	b.n	8004eb8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b21      	cmp	r3, #33	; 0x21
 8004e5e:	d126      	bne.n	8004eae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <I2C_Slave_AF+0xdc>)
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2221      	movs	r2, #33	; 0x21
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fe ffef 	bl	8003e8a <HAL_I2C_SlaveTxCpltCallback>
}
 8004eac:	e004      	b.n	8004eb8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eb6:	615a      	str	r2, [r3, #20]
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	ffff0000 	.word	0xffff0000

08004ec4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d10a      	bne.n	8004ef6 <I2C_ITError+0x32>
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b22      	cmp	r3, #34	; 0x22
 8004ee4:	d107      	bne.n	8004ef6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004efc:	2b28      	cmp	r3, #40	; 0x28
 8004efe:	d107      	bne.n	8004f10 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2228      	movs	r2, #40	; 0x28
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f0e:	e015      	b.n	8004f3c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1e:	d006      	beq.n	8004f2e <I2C_ITError+0x6a>
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b60      	cmp	r3, #96	; 0x60
 8004f24:	d003      	beq.n	8004f2e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d162      	bne.n	8005012 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d020      	beq.n	8004fac <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	4a6a      	ldr	r2, [pc, #424]	; (8005118 <I2C_ITError+0x254>)
 8004f70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fd fce0 	bl	800293c <HAL_DMA_Abort_IT>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8089 	beq.w	8005096 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4798      	blx	r3
 8004faa:	e074      	b.n	8005096 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	4a59      	ldr	r2, [pc, #356]	; (8005118 <I2C_ITError+0x254>)
 8004fb2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fd fcbf 	bl	800293c <HAL_DMA_Abort_IT>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d068      	beq.n	8005096 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d10b      	bne.n	8004fea <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800500c:	4610      	mov	r0, r2
 800500e:	4798      	blx	r3
 8005010:	e041      	b.n	8005096 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b60      	cmp	r3, #96	; 0x60
 800501c:	d125      	bne.n	800506a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d10b      	bne.n	8005052 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fe ff51 	bl	8003f0a <HAL_I2C_AbortCpltCallback>
 8005068:	e015      	b.n	8005096 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d10b      	bne.n	8005090 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7fe ff30 	bl	8003ef6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10e      	bne.n	80050c4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d113      	bne.n	8005110 <I2C_ITError+0x24c>
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b28      	cmp	r3, #40	; 0x28
 80050ec:	d110      	bne.n	8005110 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a0a      	ldr	r2, [pc, #40]	; (800511c <I2C_ITError+0x258>)
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fe fedf 	bl	8003ece <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08005415 	.word	0x08005415
 800511c:	ffff0000 	.word	0xffff0000

08005120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	4603      	mov	r3, r0
 8005130:	817b      	strh	r3, [r7, #10]
 8005132:	460b      	mov	r3, r1
 8005134:	813b      	strh	r3, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	2200      	movs	r2, #0
 8005152:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f9db 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e05f      	b.n	800523c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800517c:	897b      	ldrh	r3, [r7, #10]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800518a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	492c      	ldr	r1, [pc, #176]	; (8005244 <I2C_RequestMemoryWrite+0x124>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa14 	bl	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e04c      	b.n	800523c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	6a39      	ldr	r1, [r7, #32]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fa7e 	bl	80056be <I2C_WaitOnTXEFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00d      	beq.n	80051e4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d107      	bne.n	80051e0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e02b      	b.n	800523c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ea:	893b      	ldrh	r3, [r7, #8]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]
 80051f4:	e021      	b.n	800523a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051f6:	893b      	ldrh	r3, [r7, #8]
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	6a39      	ldr	r1, [r7, #32]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fa58 	bl	80056be <I2C_WaitOnTXEFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	2b04      	cmp	r3, #4
 800521a:	d107      	bne.n	800522c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e005      	b.n	800523c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005230:	893b      	ldrh	r3, [r7, #8]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	00010002 	.word	0x00010002

08005248 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	4603      	mov	r3, r0
 8005258:	817b      	strh	r3, [r7, #10]
 800525a:	460b      	mov	r3, r1
 800525c:	813b      	strh	r3, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005270:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005280:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2200      	movs	r2, #0
 800528a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f93f 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e0a9      	b.n	8005408 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	4951      	ldr	r1, [pc, #324]	; (8005410 <I2C_RequestMemoryRead+0x1c8>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f978 	bl	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e096      	b.n	8005408 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f2:	6a39      	ldr	r1, [r7, #32]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f9e2 	bl	80056be <I2C_WaitOnTXEFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00d      	beq.n	800531c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	2b04      	cmp	r3, #4
 8005306:	d107      	bne.n	8005318 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005316:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e075      	b.n	8005408 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005322:	893b      	ldrh	r3, [r7, #8]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]
 800532c:	e021      	b.n	8005372 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800532e:	893b      	ldrh	r3, [r7, #8]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	b29b      	uxth	r3, r3
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533e:	6a39      	ldr	r1, [r7, #32]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f9bc 	bl	80056be <I2C_WaitOnTXEFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	2b04      	cmp	r3, #4
 8005352:	d107      	bne.n	8005364 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005362:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e04f      	b.n	8005408 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	6a39      	ldr	r1, [r7, #32]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f9a1 	bl	80056be <I2C_WaitOnTXEFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00d      	beq.n	800539e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b04      	cmp	r3, #4
 8005388:	d107      	bne.n	800539a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005398:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e034      	b.n	8005408 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f8a9 	bl	8005512 <I2C_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e013      	b.n	8005408 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053e0:	897b      	ldrh	r3, [r7, #10]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	6a3a      	ldr	r2, [r7, #32]
 80053f4:	4906      	ldr	r1, [pc, #24]	; (8005410 <I2C_RequestMemoryRead+0x1c8>)
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f8e2 	bl	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	00010002 	.word	0x00010002

08005414 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	2200      	movs	r2, #0
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	2200      	movs	r2, #0
 8005448:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005458:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	2200      	movs	r2, #0
 800546e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	2200      	movs	r2, #0
 800547e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d10e      	bne.n	80054ba <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7fe fd29 	bl	8003f0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054b8:	e027      	b.n	800550a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054ba:	7afb      	ldrb	r3, [r7, #11]
 80054bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054c0:	2b28      	cmp	r3, #40	; 0x28
 80054c2:	d117      	bne.n	80054f4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2228      	movs	r2, #40	; 0x28
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054f2:	e007      	b.n	8005504 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7fe fcf6 	bl	8003ef6 <HAL_I2C_ErrorCallback>
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005522:	e025      	b.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d021      	beq.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552c:	f7fd f848 	bl	80025c0 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d302      	bcc.n	8005542 <I2C_WaitOnFlagUntilTimeout+0x30>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d116      	bne.n	8005570 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e023      	b.n	80055b8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	0c1b      	lsrs	r3, r3, #16
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d10d      	bne.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x84>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	43da      	mvns	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	e00c      	b.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	43da      	mvns	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d0b6      	beq.n	8005524 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ce:	e051      	b.n	8005674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055de:	d123      	bne.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0204 	orr.w	r2, r3, #4
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e046      	b.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d021      	beq.n	8005674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005630:	f7fc ffc6 	bl	80025c0 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d116      	bne.n	8005674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e020      	b.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10c      	bne.n	8005698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	43da      	mvns	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e00b      	b.n	80056b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	43da      	mvns	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d18d      	bne.n	80055d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ca:	e02d      	b.n	8005728 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f8ce 	bl	800586e <I2C_IsAcknowledgeFailed>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e02d      	b.n	8005738 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d021      	beq.n	8005728 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e4:	f7fc ff6c 	bl	80025c0 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d302      	bcc.n	80056fa <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d116      	bne.n	8005728 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f043 0220 	orr.w	r2, r3, #32
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e007      	b.n	8005738 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d1ca      	bne.n	80056cc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800574c:	e02d      	b.n	80057aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f88d 	bl	800586e <I2C_IsAcknowledgeFailed>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e02d      	b.n	80057ba <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d021      	beq.n	80057aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fc ff2b 	bl	80025c0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e007      	b.n	80057ba <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d1ca      	bne.n	800574e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057ce:	e042      	b.n	8005856 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d119      	bne.n	8005812 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0210 	mvn.w	r2, #16
 80057e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e029      	b.n	8005866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005812:	f7fc fed5 	bl	80025c0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	d302      	bcc.n	8005828 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d116      	bne.n	8005856 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f043 0220 	orr.w	r2, r3, #32
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e007      	b.n	8005866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d1b5      	bne.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005884:	d11b      	bne.n	80058be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800588e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058dc:	d103      	bne.n	80058e6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80058e4:	e007      	b.n	80058f6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058ee:	d102      	bne.n	80058f6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2208      	movs	r2, #8
 80058f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b20      	cmp	r3, #32
 8005916:	d129      	bne.n	800596c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2224      	movs	r2, #36	; 0x24
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0210 	bic.w	r2, r2, #16
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e000      	b.n	800596e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800596c:	2302      	movs	r3, #2
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b20      	cmp	r3, #32
 8005992:	d12a      	bne.n	80059ea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	; 0x24
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	f023 030f 	bic.w	r3, r3, #15
 80059ba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	89fb      	ldrh	r3, [r7, #14]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	89fa      	ldrh	r2, [r7, #14]
 80059cc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e000      	b.n	80059ec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
  }
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fa:	b08f      	sub	sp, #60	; 0x3c
 80059fc:	af0a      	add	r7, sp, #40	; 0x28
 80059fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e10f      	b.n	8005c2a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fc fd11 	bl	800244c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f002 fb6c 	bl	8008126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	687e      	ldr	r6, [r7, #4]
 8005a56:	466d      	mov	r5, sp
 8005a58:	f106 0410 	add.w	r4, r6, #16
 8005a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a68:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a6c:	1d33      	adds	r3, r6, #4
 8005a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a70:	6838      	ldr	r0, [r7, #0]
 8005a72:	f002 faf7 	bl	8008064 <USB_CoreInit>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0d0      	b.n	8005c2a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f002 fb5a 	bl	8008148 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
 8005a98:	e04a      	b.n	8005b30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	333d      	adds	r3, #61	; 0x3d
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005aae:	7bfa      	ldrb	r2, [r7, #15]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	333c      	adds	r3, #60	; 0x3c
 8005abe:	7bfa      	ldrb	r2, [r7, #15]
 8005ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ac2:	7bfa      	ldrb	r2, [r7, #15]
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	b298      	uxth	r0, r3
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3342      	adds	r3, #66	; 0x42
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ada:	7bfa      	ldrb	r2, [r7, #15]
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	333f      	adds	r3, #63	; 0x3f
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005aee:	7bfa      	ldrb	r2, [r7, #15]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	3344      	adds	r3, #68	; 0x44
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b02:	7bfa      	ldrb	r2, [r7, #15]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	3348      	adds	r3, #72	; 0x48
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b16:	7bfa      	ldrb	r2, [r7, #15]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3350      	adds	r3, #80	; 0x50
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
 8005b30:	7bfa      	ldrb	r2, [r7, #15]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3af      	bcc.n	8005a9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	73fb      	strb	r3, [r7, #15]
 8005b3e:	e044      	b.n	8005bca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b40:	7bfa      	ldrb	r2, [r7, #15]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b56:	7bfa      	ldrb	r2, [r7, #15]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b6c:	7bfa      	ldrb	r2, [r7, #15]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b98:	7bfa      	ldrb	r2, [r7, #15]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bae:	7bfa      	ldrb	r2, [r7, #15]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
 8005bca:	7bfa      	ldrb	r2, [r7, #15]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3b5      	bcc.n	8005b40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	687e      	ldr	r6, [r7, #4]
 8005bdc:	466d      	mov	r5, sp
 8005bde:	f106 0410 	add.w	r4, r6, #16
 8005be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bee:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bf2:	1d33      	adds	r3, r6, #4
 8005bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bf6:	6838      	ldr	r0, [r7, #0]
 8005bf8:	f002 fad0 	bl	800819c <USB_DevInit>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e00d      	b.n	8005c2a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f002 fc7f 	bl	8008526 <USB_DevDisconnect>

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e25b      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d075      	beq.n	8005d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c52:	4ba3      	ldr	r3, [pc, #652]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d00c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c5e:	4ba0      	ldr	r3, [pc, #640]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d112      	bne.n	8005c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c6a:	4b9d      	ldr	r3, [pc, #628]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c76:	d10b      	bne.n	8005c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	4b99      	ldr	r3, [pc, #612]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d05b      	beq.n	8005d3c <HAL_RCC_OscConfig+0x108>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d157      	bne.n	8005d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e236      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d106      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x74>
 8005c9a:	4b91      	ldr	r3, [pc, #580]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a90      	ldr	r2, [pc, #576]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e01d      	b.n	8005ce4 <HAL_RCC_OscConfig+0xb0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x98>
 8005cb2:	4b8b      	ldr	r3, [pc, #556]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a8a      	ldr	r2, [pc, #552]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b88      	ldr	r3, [pc, #544]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a87      	ldr	r2, [pc, #540]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e00b      	b.n	8005ce4 <HAL_RCC_OscConfig+0xb0>
 8005ccc:	4b84      	ldr	r3, [pc, #528]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a83      	ldr	r2, [pc, #524]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	4b81      	ldr	r3, [pc, #516]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a80      	ldr	r2, [pc, #512]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d013      	beq.n	8005d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cec:	f7fc fc68 	bl	80025c0 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fc fc64 	bl	80025c0 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e1fb      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	4b76      	ldr	r3, [pc, #472]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0xc0>
 8005d12:	e014      	b.n	8005d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fc fc54 	bl	80025c0 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fc fc50 	bl	80025c0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	; 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e1e7      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2e:	4b6c      	ldr	r3, [pc, #432]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0xe8>
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d063      	beq.n	8005e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d4a:	4b65      	ldr	r3, [pc, #404]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 030c 	and.w	r3, r3, #12
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d56:	4b62      	ldr	r3, [pc, #392]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d11c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d62:	4b5f      	ldr	r3, [pc, #380]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d116      	bne.n	8005d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6e:	4b5c      	ldr	r3, [pc, #368]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_RCC_OscConfig+0x152>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d001      	beq.n	8005d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e1bb      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d86:	4b56      	ldr	r3, [pc, #344]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4952      	ldr	r1, [pc, #328]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9a:	e03a      	b.n	8005e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da4:	4b4f      	ldr	r3, [pc, #316]	; (8005ee4 <HAL_RCC_OscConfig+0x2b0>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005daa:	f7fc fc09 	bl	80025c0 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005db2:	f7fc fc05 	bl	80025c0 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e19c      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc4:	4b46      	ldr	r3, [pc, #280]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f0      	beq.n	8005db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd0:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	4940      	ldr	r1, [pc, #256]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]
 8005de4:	e015      	b.n	8005e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de6:	4b3f      	ldr	r3, [pc, #252]	; (8005ee4 <HAL_RCC_OscConfig+0x2b0>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fc fbe8 	bl	80025c0 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df4:	f7fc fbe4 	bl	80025c0 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e17b      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e06:	4b36      	ldr	r3, [pc, #216]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d030      	beq.n	8005e80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d016      	beq.n	8005e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e26:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <HAL_RCC_OscConfig+0x2b4>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2c:	f7fc fbc8 	bl	80025c0 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e34:	f7fc fbc4 	bl	80025c0 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e15b      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e46:	4b26      	ldr	r3, [pc, #152]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x200>
 8005e52:	e015      	b.n	8005e80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e54:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <HAL_RCC_OscConfig+0x2b4>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5a:	f7fc fbb1 	bl	80025c0 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e62:	f7fc fbad 	bl	80025c0 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e144      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e74:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f0      	bne.n	8005e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80a0 	beq.w	8005fce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e92:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10f      	bne.n	8005ebe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eac:	6413      	str	r3, [r2, #64]	; 0x40
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_OscConfig+0x2b8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d121      	bne.n	8005f0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <HAL_RCC_OscConfig+0x2b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a07      	ldr	r2, [pc, #28]	; (8005eec <HAL_RCC_OscConfig+0x2b8>)
 8005ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed6:	f7fc fb73 	bl	80025c0 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005edc:	e011      	b.n	8005f02 <HAL_RCC_OscConfig+0x2ce>
 8005ede:	bf00      	nop
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	42470000 	.word	0x42470000
 8005ee8:	42470e80 	.word	0x42470e80
 8005eec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef0:	f7fc fb66 	bl	80025c0 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e0fd      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f02:	4b81      	ldr	r3, [pc, #516]	; (8006108 <HAL_RCC_OscConfig+0x4d4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d106      	bne.n	8005f24 <HAL_RCC_OscConfig+0x2f0>
 8005f16:	4b7d      	ldr	r3, [pc, #500]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	4a7c      	ldr	r2, [pc, #496]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	6713      	str	r3, [r2, #112]	; 0x70
 8005f22:	e01c      	b.n	8005f5e <HAL_RCC_OscConfig+0x32a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d10c      	bne.n	8005f46 <HAL_RCC_OscConfig+0x312>
 8005f2c:	4b77      	ldr	r3, [pc, #476]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	4a76      	ldr	r2, [pc, #472]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f32:	f043 0304 	orr.w	r3, r3, #4
 8005f36:	6713      	str	r3, [r2, #112]	; 0x70
 8005f38:	4b74      	ldr	r3, [pc, #464]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4a73      	ldr	r2, [pc, #460]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	6713      	str	r3, [r2, #112]	; 0x70
 8005f44:	e00b      	b.n	8005f5e <HAL_RCC_OscConfig+0x32a>
 8005f46:	4b71      	ldr	r3, [pc, #452]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	4a70      	ldr	r2, [pc, #448]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6713      	str	r3, [r2, #112]	; 0x70
 8005f52:	4b6e      	ldr	r3, [pc, #440]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a6d      	ldr	r2, [pc, #436]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f58:	f023 0304 	bic.w	r3, r3, #4
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d015      	beq.n	8005f92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f66:	f7fc fb2b 	bl	80025c0 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6c:	e00a      	b.n	8005f84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f6e:	f7fc fb27 	bl	80025c0 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e0bc      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f84:	4b61      	ldr	r3, [pc, #388]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0ee      	beq.n	8005f6e <HAL_RCC_OscConfig+0x33a>
 8005f90:	e014      	b.n	8005fbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f92:	f7fc fb15 	bl	80025c0 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f9a:	f7fc fb11 	bl	80025c0 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0a6      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb0:	4b56      	ldr	r3, [pc, #344]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1ee      	bne.n	8005f9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc2:	4b52      	ldr	r3, [pc, #328]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	4a51      	ldr	r2, [pc, #324]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8092 	beq.w	80060fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fd8:	4b4c      	ldr	r3, [pc, #304]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d05c      	beq.n	800609e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d141      	bne.n	8006070 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fec:	4b48      	ldr	r3, [pc, #288]	; (8006110 <HAL_RCC_OscConfig+0x4dc>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff2:	f7fc fae5 	bl	80025c0 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ffa:	f7fc fae1 	bl	80025c0 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e078      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600c:	4b3f      	ldr	r3, [pc, #252]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1f0      	bne.n	8005ffa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69da      	ldr	r2, [r3, #28]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	019b      	lsls	r3, r3, #6
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	3b01      	subs	r3, #1
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	061b      	lsls	r3, r3, #24
 800603c:	4933      	ldr	r1, [pc, #204]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 800603e:	4313      	orrs	r3, r2
 8006040:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006042:	4b33      	ldr	r3, [pc, #204]	; (8006110 <HAL_RCC_OscConfig+0x4dc>)
 8006044:	2201      	movs	r2, #1
 8006046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fc faba 	bl	80025c0 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006050:	f7fc fab6 	bl	80025c0 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e04d      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006062:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0x41c>
 800606e:	e045      	b.n	80060fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006070:	4b27      	ldr	r3, [pc, #156]	; (8006110 <HAL_RCC_OscConfig+0x4dc>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006076:	f7fc faa3 	bl	80025c0 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607e:	f7fc fa9f 	bl	80025c0 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e036      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCC_OscConfig+0x44a>
 800609c:	e02e      	b.n	80060fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e029      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060aa:	4b18      	ldr	r3, [pc, #96]	; (800610c <HAL_RCC_OscConfig+0x4d8>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d11c      	bne.n	80060f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d115      	bne.n	80060f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060d2:	4013      	ands	r3, r2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10d      	bne.n	80060f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d106      	bne.n	80060f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d001      	beq.n	80060fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40007000 	.word	0x40007000
 800610c:	40023800 	.word	0x40023800
 8006110:	42470060 	.word	0x42470060

08006114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e0cc      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006128:	4b68      	ldr	r3, [pc, #416]	; (80062cc <HAL_RCC_ClockConfig+0x1b8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d90c      	bls.n	8006150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006136:	4b65      	ldr	r3, [pc, #404]	; (80062cc <HAL_RCC_ClockConfig+0x1b8>)
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800613e:	4b63      	ldr	r3, [pc, #396]	; (80062cc <HAL_RCC_ClockConfig+0x1b8>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d001      	beq.n	8006150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0b8      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d020      	beq.n	800619e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006168:	4b59      	ldr	r3, [pc, #356]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4a58      	ldr	r2, [pc, #352]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006180:	4b53      	ldr	r3, [pc, #332]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4a52      	ldr	r2, [pc, #328]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800618a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800618c:	4b50      	ldr	r3, [pc, #320]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	494d      	ldr	r1, [pc, #308]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	4313      	orrs	r3, r2
 800619c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d044      	beq.n	8006234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d107      	bne.n	80061c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b2:	4b47      	ldr	r3, [pc, #284]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d119      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e07f      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d003      	beq.n	80061d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d107      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d2:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e06f      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e2:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e067      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061f2:	4b37      	ldr	r3, [pc, #220]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f023 0203 	bic.w	r2, r3, #3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4934      	ldr	r1, [pc, #208]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	4313      	orrs	r3, r2
 8006202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006204:	f7fc f9dc 	bl	80025c0 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620a:	e00a      	b.n	8006222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620c:	f7fc f9d8 	bl	80025c0 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f241 3288 	movw	r2, #5000	; 0x1388
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e04f      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006222:	4b2b      	ldr	r3, [pc, #172]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 020c 	and.w	r2, r3, #12
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	429a      	cmp	r2, r3
 8006232:	d1eb      	bne.n	800620c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <HAL_RCC_ClockConfig+0x1b8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d20c      	bcs.n	800625c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b22      	ldr	r3, [pc, #136]	; (80062cc <HAL_RCC_ClockConfig+0x1b8>)
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624a:	4b20      	ldr	r3, [pc, #128]	; (80062cc <HAL_RCC_ClockConfig+0x1b8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d001      	beq.n	800625c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e032      	b.n	80062c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006268:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	4916      	ldr	r1, [pc, #88]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006286:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	490e      	ldr	r1, [pc, #56]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	4313      	orrs	r3, r2
 8006298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800629a:	f000 f821 	bl	80062e0 <HAL_RCC_GetSysClockFreq>
 800629e:	4601      	mov	r1, r0
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <HAL_RCC_ClockConfig+0x1c0>)
 80062ac:	5cd3      	ldrb	r3, [r2, r3]
 80062ae:	fa21 f303 	lsr.w	r3, r1, r3
 80062b2:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <HAL_RCC_ClockConfig+0x1c4>)
 80062b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <HAL_RCC_ClockConfig+0x1c8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fb fa4e 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40023c00 	.word	0x40023c00
 80062d0:	40023800 	.word	0x40023800
 80062d4:	080115dc 	.word	0x080115dc
 80062d8:	20000000 	.word	0x20000000
 80062dc:	20000004 	.word	0x20000004

080062e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	607b      	str	r3, [r7, #4]
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
 80062ee:	2300      	movs	r3, #0
 80062f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f6:	4b63      	ldr	r3, [pc, #396]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d007      	beq.n	8006312 <HAL_RCC_GetSysClockFreq+0x32>
 8006302:	2b08      	cmp	r3, #8
 8006304:	d008      	beq.n	8006318 <HAL_RCC_GetSysClockFreq+0x38>
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 80b4 	bne.w	8006474 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800630c:	4b5e      	ldr	r3, [pc, #376]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800630e:	60bb      	str	r3, [r7, #8]
       break;
 8006310:	e0b3      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006312:	4b5e      	ldr	r3, [pc, #376]	; (800648c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006314:	60bb      	str	r3, [r7, #8]
      break;
 8006316:	e0b0      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006318:	4b5a      	ldr	r3, [pc, #360]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006320:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006322:	4b58      	ldr	r3, [pc, #352]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d04a      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632e:	4b55      	ldr	r3, [pc, #340]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	099b      	lsrs	r3, r3, #6
 8006334:	f04f 0400 	mov.w	r4, #0
 8006338:	f240 11ff 	movw	r1, #511	; 0x1ff
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	ea03 0501 	and.w	r5, r3, r1
 8006344:	ea04 0602 	and.w	r6, r4, r2
 8006348:	4629      	mov	r1, r5
 800634a:	4632      	mov	r2, r6
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	f04f 0400 	mov.w	r4, #0
 8006354:	0154      	lsls	r4, r2, #5
 8006356:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800635a:	014b      	lsls	r3, r1, #5
 800635c:	4619      	mov	r1, r3
 800635e:	4622      	mov	r2, r4
 8006360:	1b49      	subs	r1, r1, r5
 8006362:	eb62 0206 	sbc.w	r2, r2, r6
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	f04f 0400 	mov.w	r4, #0
 800636e:	0194      	lsls	r4, r2, #6
 8006370:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006374:	018b      	lsls	r3, r1, #6
 8006376:	1a5b      	subs	r3, r3, r1
 8006378:	eb64 0402 	sbc.w	r4, r4, r2
 800637c:	f04f 0100 	mov.w	r1, #0
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	00e2      	lsls	r2, r4, #3
 8006386:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800638a:	00d9      	lsls	r1, r3, #3
 800638c:	460b      	mov	r3, r1
 800638e:	4614      	mov	r4, r2
 8006390:	195b      	adds	r3, r3, r5
 8006392:	eb44 0406 	adc.w	r4, r4, r6
 8006396:	f04f 0100 	mov.w	r1, #0
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	0262      	lsls	r2, r4, #9
 80063a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80063a4:	0259      	lsls	r1, r3, #9
 80063a6:	460b      	mov	r3, r1
 80063a8:	4614      	mov	r4, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	4621      	mov	r1, r4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f04f 0400 	mov.w	r4, #0
 80063b4:	461a      	mov	r2, r3
 80063b6:	4623      	mov	r3, r4
 80063b8:	f7fa fcc6 	bl	8000d48 <__aeabi_uldivmod>
 80063bc:	4603      	mov	r3, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e049      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c4:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	099b      	lsrs	r3, r3, #6
 80063ca:	f04f 0400 	mov.w	r4, #0
 80063ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	ea03 0501 	and.w	r5, r3, r1
 80063da:	ea04 0602 	and.w	r6, r4, r2
 80063de:	4629      	mov	r1, r5
 80063e0:	4632      	mov	r2, r6
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	f04f 0400 	mov.w	r4, #0
 80063ea:	0154      	lsls	r4, r2, #5
 80063ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063f0:	014b      	lsls	r3, r1, #5
 80063f2:	4619      	mov	r1, r3
 80063f4:	4622      	mov	r2, r4
 80063f6:	1b49      	subs	r1, r1, r5
 80063f8:	eb62 0206 	sbc.w	r2, r2, r6
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	f04f 0400 	mov.w	r4, #0
 8006404:	0194      	lsls	r4, r2, #6
 8006406:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800640a:	018b      	lsls	r3, r1, #6
 800640c:	1a5b      	subs	r3, r3, r1
 800640e:	eb64 0402 	sbc.w	r4, r4, r2
 8006412:	f04f 0100 	mov.w	r1, #0
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	00e2      	lsls	r2, r4, #3
 800641c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006420:	00d9      	lsls	r1, r3, #3
 8006422:	460b      	mov	r3, r1
 8006424:	4614      	mov	r4, r2
 8006426:	195b      	adds	r3, r3, r5
 8006428:	eb44 0406 	adc.w	r4, r4, r6
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	02a2      	lsls	r2, r4, #10
 8006436:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800643a:	0299      	lsls	r1, r3, #10
 800643c:	460b      	mov	r3, r1
 800643e:	4614      	mov	r4, r2
 8006440:	4618      	mov	r0, r3
 8006442:	4621      	mov	r1, r4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f04f 0400 	mov.w	r4, #0
 800644a:	461a      	mov	r2, r3
 800644c:	4623      	mov	r3, r4
 800644e:	f7fa fc7b 	bl	8000d48 <__aeabi_uldivmod>
 8006452:	4603      	mov	r3, r0
 8006454:	460c      	mov	r4, r1
 8006456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	3301      	adds	r3, #1
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006470:	60bb      	str	r3, [r7, #8]
      break;
 8006472:	e002      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006476:	60bb      	str	r3, [r7, #8]
      break;
 8006478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800647a:	68bb      	ldr	r3, [r7, #8]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006484:	40023800 	.word	0x40023800
 8006488:	00f42400 	.word	0x00f42400
 800648c:	007a1200 	.word	0x007a1200

08006490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000000 	.word	0x20000000

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064ac:	f7ff fff0 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064b0:	4601      	mov	r1, r0
 80064b2:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0a9b      	lsrs	r3, r3, #10
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4a03      	ldr	r2, [pc, #12]	; (80064cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064be:	5cd3      	ldrb	r3, [r2, r3]
 80064c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	080115ec 	.word	0x080115ec

080064d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064d4:	f7ff ffdc 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064d8:	4601      	mov	r1, r0
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	0b5b      	lsrs	r3, r3, #13
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	4a03      	ldr	r2, [pc, #12]	; (80064f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e6:	5cd3      	ldrb	r3, [r2, r3]
 80064e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	080115ec 	.word	0x080115ec

080064f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	220f      	movs	r2, #15
 8006506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006508:	4b12      	ldr	r3, [pc, #72]	; (8006554 <HAL_RCC_GetClockConfig+0x5c>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0203 	and.w	r2, r3, #3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006514:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <HAL_RCC_GetClockConfig+0x5c>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006520:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <HAL_RCC_GetClockConfig+0x5c>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <HAL_RCC_GetClockConfig+0x5c>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	08db      	lsrs	r3, r3, #3
 8006532:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800653a:	4b07      	ldr	r3, [pc, #28]	; (8006558 <HAL_RCC_GetClockConfig+0x60>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	601a      	str	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800
 8006558:	40023c00 	.word	0x40023c00

0800655c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e01d      	b.n	80065aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb fbec 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f000 fb06 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0201 	orr.w	r2, r2, #1
 80065c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b06      	cmp	r3, #6
 80065da:	d007      	beq.n	80065ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e01d      	b.n	8006648 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fb fbf1 	bl	8001e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f000 fab7 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d122      	bne.n	80066ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d11b      	bne.n	80066ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0202 	mvn.w	r2, #2
 800667c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa6b 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa5d 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fa6e 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d122      	bne.n	8006700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d11b      	bne.n	8006700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0204 	mvn.w	r2, #4
 80066d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa41 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa33 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fa44 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b08      	cmp	r3, #8
 800670c:	d122      	bne.n	8006754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b08      	cmp	r3, #8
 800671a:	d11b      	bne.n	8006754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0208 	mvn.w	r2, #8
 8006724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa17 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 8006740:	e005      	b.n	800674e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa09 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fa1a 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b10      	cmp	r3, #16
 8006760:	d122      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b10      	cmp	r3, #16
 800676e:	d11b      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0210 	mvn.w	r2, #16
 8006778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2208      	movs	r2, #8
 800677e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f9ed 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 8006794:	e005      	b.n	80067a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9df 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f9f0 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10e      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0201 	mvn.w	r2, #1
 80067cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fa ff7e 	bl	80016d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	2b80      	cmp	r3, #128	; 0x80
 80067e0:	d10e      	bne.n	8006800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d107      	bne.n	8006800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fd46 	bl	800728c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d10e      	bne.n	800682c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d107      	bne.n	800682c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9b5 	bl	8006b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b20      	cmp	r3, #32
 8006838:	d10e      	bne.n	8006858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b20      	cmp	r3, #32
 8006846:	d107      	bne.n	8006858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0220 	mvn.w	r2, #32
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fd10 	bl	8007278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006876:	2302      	movs	r3, #2
 8006878:	e0b4      	b.n	80069e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b0c      	cmp	r3, #12
 800688e:	f200 809f 	bhi.w	80069d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068cd 	.word	0x080068cd
 800689c:	080069d1 	.word	0x080069d1
 80068a0:	080069d1 	.word	0x080069d1
 80068a4:	080069d1 	.word	0x080069d1
 80068a8:	0800690d 	.word	0x0800690d
 80068ac:	080069d1 	.word	0x080069d1
 80068b0:	080069d1 	.word	0x080069d1
 80068b4:	080069d1 	.word	0x080069d1
 80068b8:	0800694f 	.word	0x0800694f
 80068bc:	080069d1 	.word	0x080069d1
 80068c0:	080069d1 	.word	0x080069d1
 80068c4:	080069d1 	.word	0x080069d1
 80068c8:	0800698f 	.word	0x0800698f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fa0a 	bl	8006cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0208 	orr.w	r2, r2, #8
 80068e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0204 	bic.w	r2, r2, #4
 80068f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6999      	ldr	r1, [r3, #24]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	619a      	str	r2, [r3, #24]
      break;
 800690a:	e062      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fa5a 	bl	8006dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6999      	ldr	r1, [r3, #24]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	021a      	lsls	r2, r3, #8
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	619a      	str	r2, [r3, #24]
      break;
 800694c:	e041      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 faaf 	bl	8006eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0208 	orr.w	r2, r2, #8
 8006968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0204 	bic.w	r2, r2, #4
 8006978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69d9      	ldr	r1, [r3, #28]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	61da      	str	r2, [r3, #28]
      break;
 800698c:	e021      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68b9      	ldr	r1, [r7, #8]
 8006994:	4618      	mov	r0, r3
 8006996:	f000 fb03 	bl	8006fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69da      	ldr	r2, [r3, #28]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69d9      	ldr	r1, [r3, #28]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	021a      	lsls	r2, r3, #8
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	61da      	str	r2, [r3, #28]
      break;
 80069ce:	e000      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80069d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_ConfigClockSource+0x18>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e0a6      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x166>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d067      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x120>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d80b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x6c>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d073      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x140>
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d802      	bhi.n	8006a4e <HAL_TIM_ConfigClockSource+0x62>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d06f      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006a4c:	e078      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d06c      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x140>
 8006a52:	2b30      	cmp	r3, #48	; 0x30
 8006a54:	d06a      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006a56:	e073      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a58:	2b70      	cmp	r3, #112	; 0x70
 8006a5a:	d00d      	beq.n	8006a78 <HAL_TIM_ConfigClockSource+0x8c>
 8006a5c:	2b70      	cmp	r3, #112	; 0x70
 8006a5e:	d804      	bhi.n	8006a6a <HAL_TIM_ConfigClockSource+0x7e>
 8006a60:	2b50      	cmp	r3, #80	; 0x50
 8006a62:	d033      	beq.n	8006acc <HAL_TIM_ConfigClockSource+0xe0>
 8006a64:	2b60      	cmp	r3, #96	; 0x60
 8006a66:	d041      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006a68:	e06a      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d066      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x152>
 8006a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a74:	d017      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006a76:	e063      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6899      	ldr	r1, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f000 fb5a 	bl	8007140 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	609a      	str	r2, [r3, #8]
      break;
 8006aa4:	e04c      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6899      	ldr	r1, [r3, #8]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f000 fb43 	bl	8007140 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac8:	609a      	str	r2, [r3, #8]
      break;
 8006aca:	e039      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f000 fab7 	bl	800704c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2150      	movs	r1, #80	; 0x50
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fb10 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006aea:	e029      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6859      	ldr	r1, [r3, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	461a      	mov	r2, r3
 8006afa:	f000 fad6 	bl	80070aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2160      	movs	r1, #96	; 0x60
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fb00 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006b0a:	e019      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6859      	ldr	r1, [r3, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f000 fa97 	bl	800704c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2140      	movs	r1, #64	; 0x40
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 faf0 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006b2a:	e009      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f000 fae7 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006b3c:	e000      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a40      	ldr	r2, [pc, #256]	; (8006cc0 <TIM_Base_SetConfig+0x114>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d013      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d00f      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <TIM_Base_SetConfig+0x118>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00b      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a3c      	ldr	r2, [pc, #240]	; (8006cc8 <TIM_Base_SetConfig+0x11c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d007      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a3b      	ldr	r2, [pc, #236]	; (8006ccc <TIM_Base_SetConfig+0x120>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a3a      	ldr	r2, [pc, #232]	; (8006cd0 <TIM_Base_SetConfig+0x124>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d108      	bne.n	8006bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2f      	ldr	r2, [pc, #188]	; (8006cc0 <TIM_Base_SetConfig+0x114>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d02b      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0c:	d027      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <TIM_Base_SetConfig+0x118>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d023      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <TIM_Base_SetConfig+0x11c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01f      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <TIM_Base_SetConfig+0x120>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01b      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <TIM_Base_SetConfig+0x124>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d017      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_Base_SetConfig+0x128>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <TIM_Base_SetConfig+0x12c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a26      	ldr	r2, [pc, #152]	; (8006cdc <TIM_Base_SetConfig+0x130>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a25      	ldr	r2, [pc, #148]	; (8006ce0 <TIM_Base_SetConfig+0x134>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a24      	ldr	r2, [pc, #144]	; (8006ce4 <TIM_Base_SetConfig+0x138>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a23      	ldr	r2, [pc, #140]	; (8006ce8 <TIM_Base_SetConfig+0x13c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a0a      	ldr	r2, [pc, #40]	; (8006cc0 <TIM_Base_SetConfig+0x114>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0xf8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a0c      	ldr	r2, [pc, #48]	; (8006cd0 <TIM_Base_SetConfig+0x124>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d103      	bne.n	8006cac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00
 8006cd0:	40010400 	.word	0x40010400
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800
 8006ce0:	40001800 	.word	0x40001800
 8006ce4:	40001c00 	.word	0x40001c00
 8006ce8:	40002000 	.word	0x40002000

08006cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 0302 	bic.w	r3, r3, #2
 8006d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a20      	ldr	r2, [pc, #128]	; (8006dc4 <TIM_OC1_SetConfig+0xd8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_OC1_SetConfig+0x64>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	; (8006dc8 <TIM_OC1_SetConfig+0xdc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10c      	bne.n	8006d6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0308 	bic.w	r3, r3, #8
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <TIM_OC1_SetConfig+0xd8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC1_SetConfig+0x8e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <TIM_OC1_SetConfig+0xdc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d111      	bne.n	8006d9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	621a      	str	r2, [r3, #32]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010400 	.word	0x40010400

08006dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0210 	bic.w	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0320 	bic.w	r3, r3, #32
 8006e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <TIM_OC2_SetConfig+0xe4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_OC2_SetConfig+0x68>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a21      	ldr	r2, [pc, #132]	; (8006eb4 <TIM_OC2_SetConfig+0xe8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d10d      	bne.n	8006e50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <TIM_OC2_SetConfig+0xe4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC2_SetConfig+0x94>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <TIM_OC2_SetConfig+0xe8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d113      	bne.n	8006e88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40010400 	.word	0x40010400

08006eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a21      	ldr	r2, [pc, #132]	; (8006f98 <TIM_OC3_SetConfig+0xe0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_OC3_SetConfig+0x66>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a20      	ldr	r2, [pc, #128]	; (8006f9c <TIM_OC3_SetConfig+0xe4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d10d      	bne.n	8006f3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <TIM_OC3_SetConfig+0xe0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_OC3_SetConfig+0x92>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <TIM_OC3_SetConfig+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d113      	bne.n	8006f72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	621a      	str	r2, [r3, #32]
}
 8006f8c:	bf00      	nop
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	40010400 	.word	0x40010400

08006fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a12      	ldr	r2, [pc, #72]	; (8007044 <TIM_OC4_SetConfig+0xa4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC4_SetConfig+0x68>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a11      	ldr	r2, [pc, #68]	; (8007048 <TIM_OC4_SetConfig+0xa8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d109      	bne.n	800701c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400

0800704c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f023 0201 	bic.w	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 030a 	bic.w	r3, r3, #10
 8007088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 0210 	bic.w	r2, r3, #16
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	031b      	lsls	r3, r3, #12
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	f043 0307 	orr.w	r3, r3, #7
 800712c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	609a      	str	r2, [r3, #8]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	431a      	orrs	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4313      	orrs	r3, r2
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	609a      	str	r2, [r3, #8]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007194:	2302      	movs	r3, #2
 8007196:	e05a      	b.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a21      	ldr	r2, [pc, #132]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e4:	d01d      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1d      	ldr	r2, [pc, #116]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1a      	ldr	r2, [pc, #104]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a18      	ldr	r2, [pc, #96]	; (800726c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a17      	ldr	r2, [pc, #92]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d10c      	bne.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4313      	orrs	r3, r2
 8007232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40010400 	.word	0x40010400
 8007270:	40014000 	.word	0x40014000
 8007274:	40001800 	.word	0x40001800

08007278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e03f      	b.n	8007332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fa ff16 	bl	80020f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fb41 	bl	800796c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b088      	sub	sp, #32
 800733e:	af02      	add	r7, sp, #8
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b20      	cmp	r3, #32
 8007358:	f040 8083 	bne.w	8007462 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <HAL_UART_Transmit+0x2e>
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e07b      	b.n	8007464 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_UART_Transmit+0x40>
 8007376:	2302      	movs	r3, #2
 8007378:	e074      	b.n	8007464 <HAL_UART_Transmit+0x12a>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2221      	movs	r2, #33	; 0x21
 800738c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007390:	f7fb f916 	bl	80025c0 <HAL_GetTick>
 8007394:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	88fa      	ldrh	r2, [r7, #6]
 800739a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80073aa:	e042      	b.n	8007432 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c2:	d122      	bne.n	800740a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2200      	movs	r2, #0
 80073cc:	2180      	movs	r1, #128	; 0x80
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f960 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e042      	b.n	8007464 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	3302      	adds	r3, #2
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	e017      	b.n	8007432 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	3301      	adds	r3, #1
 8007406:	60bb      	str	r3, [r7, #8]
 8007408:	e013      	b.n	8007432 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2200      	movs	r2, #0
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f93d 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e01f      	b.n	8007464 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	60ba      	str	r2, [r7, #8]
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1b7      	bne.n	80073ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 f924 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e006      	b.n	8007464 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	e000      	b.n	8007464 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007462:	2302      	movs	r3, #2
  }
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800748c:	2300      	movs	r3, #0
 800748e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10d      	bne.n	80074be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <HAL_UART_IRQHandler+0x52>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9d6 	bl	8007868 <UART_Receive_IT>
      return;
 80074bc:	e0d1      	b.n	8007662 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80b0 	beq.w	8007626 <HAL_UART_IRQHandler+0x1ba>
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d105      	bne.n	80074dc <HAL_UART_IRQHandler+0x70>
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80a5 	beq.w	8007626 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <HAL_UART_IRQHandler+0x90>
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f4:	f043 0201 	orr.w	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <HAL_UART_IRQHandler+0xb0>
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	f043 0202 	orr.w	r2, r3, #2
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_UART_IRQHandler+0xd0>
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007534:	f043 0204 	orr.w	r2, r3, #4
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00f      	beq.n	8007566 <HAL_UART_IRQHandler+0xfa>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <HAL_UART_IRQHandler+0xee>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	f043 0208 	orr.w	r2, r3, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d078      	beq.n	8007660 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d007      	beq.n	8007588 <HAL_UART_IRQHandler+0x11c>
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f970 	bl	8007868 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	bf0c      	ite	eq
 8007596:	2301      	moveq	r3, #1
 8007598:	2300      	movne	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d102      	bne.n	80075b0 <HAL_UART_IRQHandler+0x144>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d031      	beq.n	8007614 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8b9 	bl	8007728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d123      	bne.n	800760c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d013      	beq.n	8007604 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e0:	4a21      	ldr	r2, [pc, #132]	; (8007668 <HAL_UART_IRQHandler+0x1fc>)
 80075e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fb f9a7 	bl	800293c <HAL_DMA_Abort_IT>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d016      	beq.n	8007622 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075fe:	4610      	mov	r0, r2
 8007600:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007602:	e00e      	b.n	8007622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f83b 	bl	8007680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760a:	e00a      	b.n	8007622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f837 	bl	8007680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007612:	e006      	b.n	8007622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f833 	bl	8007680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007620:	e01e      	b.n	8007660 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007622:	bf00      	nop
    return;
 8007624:	e01c      	b.n	8007660 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_UART_IRQHandler+0x1d6>
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f8a6 	bl	800778c <UART_Transmit_IT>
    return;
 8007640:	e00f      	b.n	8007662 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <HAL_UART_IRQHandler+0x1f6>
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8ee 	bl	8007838 <UART_EndTransmit_IT>
    return;
 800765c:	bf00      	nop
 800765e:	e000      	b.n	8007662 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007660:	bf00      	nop
  }
}
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	08007765 	.word	0x08007765

0800766c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	4613      	mov	r3, r2
 80076a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a4:	e02c      	b.n	8007700 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ac:	d028      	beq.n	8007700 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076b4:	f7fa ff84 	bl	80025c0 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d21d      	bcs.n	8007700 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695a      	ldr	r2, [r3, #20]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0201 	bic.w	r2, r2, #1
 80076e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e00f      	b.n	8007720 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	4013      	ands	r3, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	429a      	cmp	r2, r3
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	429a      	cmp	r2, r3
 800771c:	d0c3      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800773e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695a      	ldr	r2, [r3, #20]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff ff7e 	bl	8007680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b21      	cmp	r3, #33	; 0x21
 800779e:	d144      	bne.n	800782a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a8:	d11a      	bne.n	80077e0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077be:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	1c9a      	adds	r2, r3, #2
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	621a      	str	r2, [r3, #32]
 80077d2:	e00e      	b.n	80077f2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	621a      	str	r2, [r3, #32]
 80077de:	e008      	b.n	80077f2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	1c59      	adds	r1, r3, #1
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6211      	str	r1, [r2, #32]
 80077ea:	781a      	ldrb	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	4619      	mov	r1, r3
 8007800:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10f      	bne.n	8007826 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007814:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007824:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e000      	b.n	800782c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800782a:	2302      	movs	r3, #2
  }
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800784e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff ff07 	bl	800766c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b22      	cmp	r3, #34	; 0x22
 800787a:	d171      	bne.n	8007960 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007884:	d123      	bne.n	80078ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10e      	bne.n	80078b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b29b      	uxth	r3, r3
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	1c9a      	adds	r2, r3, #2
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	629a      	str	r2, [r3, #40]	; 0x28
 80078b0:	e029      	b.n	8007906 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	629a      	str	r2, [r3, #40]	; 0x28
 80078cc:	e01b      	b.n	8007906 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6858      	ldr	r0, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	1c59      	adds	r1, r3, #1
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6291      	str	r1, [r2, #40]	; 0x28
 80078e6:	b2c2      	uxtb	r2, r0
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e00c      	b.n	8007906 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	1c58      	adds	r0, r3, #1
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	6288      	str	r0, [r1, #40]	; 0x28
 80078fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	4619      	mov	r1, r3
 8007914:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007916:	2b00      	cmp	r3, #0
 8007918:	d120      	bne.n	800795c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0220 	bic.w	r2, r2, #32
 8007928:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f002 ff0e 	bl	800a774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e002      	b.n	8007962 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	e000      	b.n	8007962 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80079ae:	f023 030c 	bic.w	r3, r3, #12
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	68f9      	ldr	r1, [r7, #12]
 80079b8:	430b      	orrs	r3, r1
 80079ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079da:	f040 818b 	bne.w	8007cf4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4ac1      	ldr	r2, [pc, #772]	; (8007ce8 <UART_SetConfig+0x37c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d005      	beq.n	80079f4 <UART_SetConfig+0x88>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4abf      	ldr	r2, [pc, #764]	; (8007cec <UART_SetConfig+0x380>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	f040 80bd 	bne.w	8007b6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079f4:	f7fe fd6c 	bl	80064d0 <HAL_RCC_GetPCLK2Freq>
 80079f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	461d      	mov	r5, r3
 80079fe:	f04f 0600 	mov.w	r6, #0
 8007a02:	46a8      	mov	r8, r5
 8007a04:	46b1      	mov	r9, r6
 8007a06:	eb18 0308 	adds.w	r3, r8, r8
 8007a0a:	eb49 0409 	adc.w	r4, r9, r9
 8007a0e:	4698      	mov	r8, r3
 8007a10:	46a1      	mov	r9, r4
 8007a12:	eb18 0805 	adds.w	r8, r8, r5
 8007a16:	eb49 0906 	adc.w	r9, r9, r6
 8007a1a:	f04f 0100 	mov.w	r1, #0
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a2e:	4688      	mov	r8, r1
 8007a30:	4691      	mov	r9, r2
 8007a32:	eb18 0005 	adds.w	r0, r8, r5
 8007a36:	eb49 0106 	adc.w	r1, r9, r6
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	461d      	mov	r5, r3
 8007a40:	f04f 0600 	mov.w	r6, #0
 8007a44:	196b      	adds	r3, r5, r5
 8007a46:	eb46 0406 	adc.w	r4, r6, r6
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	f7f9 f97b 	bl	8000d48 <__aeabi_uldivmod>
 8007a52:	4603      	mov	r3, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	461a      	mov	r2, r3
 8007a58:	4ba5      	ldr	r3, [pc, #660]	; (8007cf0 <UART_SetConfig+0x384>)
 8007a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	461d      	mov	r5, r3
 8007a68:	f04f 0600 	mov.w	r6, #0
 8007a6c:	46a9      	mov	r9, r5
 8007a6e:	46b2      	mov	sl, r6
 8007a70:	eb19 0309 	adds.w	r3, r9, r9
 8007a74:	eb4a 040a 	adc.w	r4, sl, sl
 8007a78:	4699      	mov	r9, r3
 8007a7a:	46a2      	mov	sl, r4
 8007a7c:	eb19 0905 	adds.w	r9, r9, r5
 8007a80:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a84:	f04f 0100 	mov.w	r1, #0
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a98:	4689      	mov	r9, r1
 8007a9a:	4692      	mov	sl, r2
 8007a9c:	eb19 0005 	adds.w	r0, r9, r5
 8007aa0:	eb4a 0106 	adc.w	r1, sl, r6
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	461d      	mov	r5, r3
 8007aaa:	f04f 0600 	mov.w	r6, #0
 8007aae:	196b      	adds	r3, r5, r5
 8007ab0:	eb46 0406 	adc.w	r4, r6, r6
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	f7f9 f946 	bl	8000d48 <__aeabi_uldivmod>
 8007abc:	4603      	mov	r3, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4b8b      	ldr	r3, [pc, #556]	; (8007cf0 <UART_SetConfig+0x384>)
 8007ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	2164      	movs	r1, #100	; 0x64
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	3332      	adds	r3, #50	; 0x32
 8007ad6:	4a86      	ldr	r2, [pc, #536]	; (8007cf0 <UART_SetConfig+0x384>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ae4:	4498      	add	r8, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	461d      	mov	r5, r3
 8007aea:	f04f 0600 	mov.w	r6, #0
 8007aee:	46a9      	mov	r9, r5
 8007af0:	46b2      	mov	sl, r6
 8007af2:	eb19 0309 	adds.w	r3, r9, r9
 8007af6:	eb4a 040a 	adc.w	r4, sl, sl
 8007afa:	4699      	mov	r9, r3
 8007afc:	46a2      	mov	sl, r4
 8007afe:	eb19 0905 	adds.w	r9, r9, r5
 8007b02:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b06:	f04f 0100 	mov.w	r1, #0
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b1a:	4689      	mov	r9, r1
 8007b1c:	4692      	mov	sl, r2
 8007b1e:	eb19 0005 	adds.w	r0, r9, r5
 8007b22:	eb4a 0106 	adc.w	r1, sl, r6
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	f04f 0600 	mov.w	r6, #0
 8007b30:	196b      	adds	r3, r5, r5
 8007b32:	eb46 0406 	adc.w	r4, r6, r6
 8007b36:	461a      	mov	r2, r3
 8007b38:	4623      	mov	r3, r4
 8007b3a:	f7f9 f905 	bl	8000d48 <__aeabi_uldivmod>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	461a      	mov	r2, r3
 8007b44:	4b6a      	ldr	r3, [pc, #424]	; (8007cf0 <UART_SetConfig+0x384>)
 8007b46:	fba3 1302 	umull	r1, r3, r3, r2
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	2164      	movs	r1, #100	; 0x64
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	3332      	adds	r3, #50	; 0x32
 8007b58:	4a65      	ldr	r2, [pc, #404]	; (8007cf0 <UART_SetConfig+0x384>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	f003 0207 	and.w	r2, r3, #7
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4442      	add	r2, r8
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	e26f      	b.n	800804e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b6e:	f7fe fc9b 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8007b72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	461d      	mov	r5, r3
 8007b78:	f04f 0600 	mov.w	r6, #0
 8007b7c:	46a8      	mov	r8, r5
 8007b7e:	46b1      	mov	r9, r6
 8007b80:	eb18 0308 	adds.w	r3, r8, r8
 8007b84:	eb49 0409 	adc.w	r4, r9, r9
 8007b88:	4698      	mov	r8, r3
 8007b8a:	46a1      	mov	r9, r4
 8007b8c:	eb18 0805 	adds.w	r8, r8, r5
 8007b90:	eb49 0906 	adc.w	r9, r9, r6
 8007b94:	f04f 0100 	mov.w	r1, #0
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ba0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ba4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ba8:	4688      	mov	r8, r1
 8007baa:	4691      	mov	r9, r2
 8007bac:	eb18 0005 	adds.w	r0, r8, r5
 8007bb0:	eb49 0106 	adc.w	r1, r9, r6
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	461d      	mov	r5, r3
 8007bba:	f04f 0600 	mov.w	r6, #0
 8007bbe:	196b      	adds	r3, r5, r5
 8007bc0:	eb46 0406 	adc.w	r4, r6, r6
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4623      	mov	r3, r4
 8007bc8:	f7f9 f8be 	bl	8000d48 <__aeabi_uldivmod>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <UART_SetConfig+0x384>)
 8007bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	461d      	mov	r5, r3
 8007be2:	f04f 0600 	mov.w	r6, #0
 8007be6:	46a9      	mov	r9, r5
 8007be8:	46b2      	mov	sl, r6
 8007bea:	eb19 0309 	adds.w	r3, r9, r9
 8007bee:	eb4a 040a 	adc.w	r4, sl, sl
 8007bf2:	4699      	mov	r9, r3
 8007bf4:	46a2      	mov	sl, r4
 8007bf6:	eb19 0905 	adds.w	r9, r9, r5
 8007bfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bfe:	f04f 0100 	mov.w	r1, #0
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c12:	4689      	mov	r9, r1
 8007c14:	4692      	mov	sl, r2
 8007c16:	eb19 0005 	adds.w	r0, r9, r5
 8007c1a:	eb4a 0106 	adc.w	r1, sl, r6
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	461d      	mov	r5, r3
 8007c24:	f04f 0600 	mov.w	r6, #0
 8007c28:	196b      	adds	r3, r5, r5
 8007c2a:	eb46 0406 	adc.w	r4, r6, r6
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4623      	mov	r3, r4
 8007c32:	f7f9 f889 	bl	8000d48 <__aeabi_uldivmod>
 8007c36:	4603      	mov	r3, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4b2c      	ldr	r3, [pc, #176]	; (8007cf0 <UART_SetConfig+0x384>)
 8007c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	2164      	movs	r1, #100	; 0x64
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	3332      	adds	r3, #50	; 0x32
 8007c50:	4a27      	ldr	r2, [pc, #156]	; (8007cf0 <UART_SetConfig+0x384>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c5e:	4498      	add	r8, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	461d      	mov	r5, r3
 8007c64:	f04f 0600 	mov.w	r6, #0
 8007c68:	46a9      	mov	r9, r5
 8007c6a:	46b2      	mov	sl, r6
 8007c6c:	eb19 0309 	adds.w	r3, r9, r9
 8007c70:	eb4a 040a 	adc.w	r4, sl, sl
 8007c74:	4699      	mov	r9, r3
 8007c76:	46a2      	mov	sl, r4
 8007c78:	eb19 0905 	adds.w	r9, r9, r5
 8007c7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c80:	f04f 0100 	mov.w	r1, #0
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c94:	4689      	mov	r9, r1
 8007c96:	4692      	mov	sl, r2
 8007c98:	eb19 0005 	adds.w	r0, r9, r5
 8007c9c:	eb4a 0106 	adc.w	r1, sl, r6
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	461d      	mov	r5, r3
 8007ca6:	f04f 0600 	mov.w	r6, #0
 8007caa:	196b      	adds	r3, r5, r5
 8007cac:	eb46 0406 	adc.w	r4, r6, r6
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	f7f9 f848 	bl	8000d48 <__aeabi_uldivmod>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <UART_SetConfig+0x384>)
 8007cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	2164      	movs	r1, #100	; 0x64
 8007cc8:	fb01 f303 	mul.w	r3, r1, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	3332      	adds	r3, #50	; 0x32
 8007cd2:	4a07      	ldr	r2, [pc, #28]	; (8007cf0 <UART_SetConfig+0x384>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	f003 0207 	and.w	r2, r3, #7
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4442      	add	r2, r8
 8007ce4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007ce6:	e1b2      	b.n	800804e <UART_SetConfig+0x6e2>
 8007ce8:	40011000 	.word	0x40011000
 8007cec:	40011400 	.word	0x40011400
 8007cf0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4ad7      	ldr	r2, [pc, #860]	; (8008058 <UART_SetConfig+0x6ec>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d005      	beq.n	8007d0a <UART_SetConfig+0x39e>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4ad6      	ldr	r2, [pc, #856]	; (800805c <UART_SetConfig+0x6f0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	f040 80d1 	bne.w	8007eac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d0a:	f7fe fbe1 	bl	80064d0 <HAL_RCC_GetPCLK2Freq>
 8007d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	469a      	mov	sl, r3
 8007d14:	f04f 0b00 	mov.w	fp, #0
 8007d18:	46d0      	mov	r8, sl
 8007d1a:	46d9      	mov	r9, fp
 8007d1c:	eb18 0308 	adds.w	r3, r8, r8
 8007d20:	eb49 0409 	adc.w	r4, r9, r9
 8007d24:	4698      	mov	r8, r3
 8007d26:	46a1      	mov	r9, r4
 8007d28:	eb18 080a 	adds.w	r8, r8, sl
 8007d2c:	eb49 090b 	adc.w	r9, r9, fp
 8007d30:	f04f 0100 	mov.w	r1, #0
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d44:	4688      	mov	r8, r1
 8007d46:	4691      	mov	r9, r2
 8007d48:	eb1a 0508 	adds.w	r5, sl, r8
 8007d4c:	eb4b 0609 	adc.w	r6, fp, r9
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4619      	mov	r1, r3
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	f04f 0400 	mov.w	r4, #0
 8007d62:	0094      	lsls	r4, r2, #2
 8007d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d68:	008b      	lsls	r3, r1, #2
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	4631      	mov	r1, r6
 8007d72:	f7f8 ffe9 	bl	8000d48 <__aeabi_uldivmod>
 8007d76:	4603      	mov	r3, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4bb8      	ldr	r3, [pc, #736]	; (8008060 <UART_SetConfig+0x6f4>)
 8007d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	469b      	mov	fp, r3
 8007d8c:	f04f 0c00 	mov.w	ip, #0
 8007d90:	46d9      	mov	r9, fp
 8007d92:	46e2      	mov	sl, ip
 8007d94:	eb19 0309 	adds.w	r3, r9, r9
 8007d98:	eb4a 040a 	adc.w	r4, sl, sl
 8007d9c:	4699      	mov	r9, r3
 8007d9e:	46a2      	mov	sl, r4
 8007da0:	eb19 090b 	adds.w	r9, r9, fp
 8007da4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007da8:	f04f 0100 	mov.w	r1, #0
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	4692      	mov	sl, r2
 8007dc0:	eb1b 0509 	adds.w	r5, fp, r9
 8007dc4:	eb4c 060a 	adc.w	r6, ip, sl
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	f04f 0300 	mov.w	r3, #0
 8007dd6:	f04f 0400 	mov.w	r4, #0
 8007dda:	0094      	lsls	r4, r2, #2
 8007ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007de0:	008b      	lsls	r3, r1, #2
 8007de2:	461a      	mov	r2, r3
 8007de4:	4623      	mov	r3, r4
 8007de6:	4628      	mov	r0, r5
 8007de8:	4631      	mov	r1, r6
 8007dea:	f7f8 ffad 	bl	8000d48 <__aeabi_uldivmod>
 8007dee:	4603      	mov	r3, r0
 8007df0:	460c      	mov	r4, r1
 8007df2:	461a      	mov	r2, r3
 8007df4:	4b9a      	ldr	r3, [pc, #616]	; (8008060 <UART_SetConfig+0x6f4>)
 8007df6:	fba3 1302 	umull	r1, r3, r3, r2
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	2164      	movs	r1, #100	; 0x64
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	3332      	adds	r3, #50	; 0x32
 8007e08:	4a95      	ldr	r2, [pc, #596]	; (8008060 <UART_SetConfig+0x6f4>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e14:	4498      	add	r8, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	469b      	mov	fp, r3
 8007e1a:	f04f 0c00 	mov.w	ip, #0
 8007e1e:	46d9      	mov	r9, fp
 8007e20:	46e2      	mov	sl, ip
 8007e22:	eb19 0309 	adds.w	r3, r9, r9
 8007e26:	eb4a 040a 	adc.w	r4, sl, sl
 8007e2a:	4699      	mov	r9, r3
 8007e2c:	46a2      	mov	sl, r4
 8007e2e:	eb19 090b 	adds.w	r9, r9, fp
 8007e32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e36:	f04f 0100 	mov.w	r1, #0
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e4a:	4689      	mov	r9, r1
 8007e4c:	4692      	mov	sl, r2
 8007e4e:	eb1b 0509 	adds.w	r5, fp, r9
 8007e52:	eb4c 060a 	adc.w	r6, ip, sl
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	f04f 0400 	mov.w	r4, #0
 8007e68:	0094      	lsls	r4, r2, #2
 8007e6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e6e:	008b      	lsls	r3, r1, #2
 8007e70:	461a      	mov	r2, r3
 8007e72:	4623      	mov	r3, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	4631      	mov	r1, r6
 8007e78:	f7f8 ff66 	bl	8000d48 <__aeabi_uldivmod>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b77      	ldr	r3, [pc, #476]	; (8008060 <UART_SetConfig+0x6f4>)
 8007e84:	fba3 1302 	umull	r1, r3, r3, r2
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	2164      	movs	r1, #100	; 0x64
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	3332      	adds	r3, #50	; 0x32
 8007e96:	4a72      	ldr	r2, [pc, #456]	; (8008060 <UART_SetConfig+0x6f4>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	f003 020f 	and.w	r2, r3, #15
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4442      	add	r2, r8
 8007ea8:	609a      	str	r2, [r3, #8]
 8007eaa:	e0d0      	b.n	800804e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7fe fafc 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	f04f 0b00 	mov.w	fp, #0
 8007eba:	46d0      	mov	r8, sl
 8007ebc:	46d9      	mov	r9, fp
 8007ebe:	eb18 0308 	adds.w	r3, r8, r8
 8007ec2:	eb49 0409 	adc.w	r4, r9, r9
 8007ec6:	4698      	mov	r8, r3
 8007ec8:	46a1      	mov	r9, r4
 8007eca:	eb18 080a 	adds.w	r8, r8, sl
 8007ece:	eb49 090b 	adc.w	r9, r9, fp
 8007ed2:	f04f 0100 	mov.w	r1, #0
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ede:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ee2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ee6:	4688      	mov	r8, r1
 8007ee8:	4691      	mov	r9, r2
 8007eea:	eb1a 0508 	adds.w	r5, sl, r8
 8007eee:	eb4b 0609 	adc.w	r6, fp, r9
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	f04f 0400 	mov.w	r4, #0
 8007f04:	0094      	lsls	r4, r2, #2
 8007f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f0a:	008b      	lsls	r3, r1, #2
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4623      	mov	r3, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	4631      	mov	r1, r6
 8007f14:	f7f8 ff18 	bl	8000d48 <__aeabi_uldivmod>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b50      	ldr	r3, [pc, #320]	; (8008060 <UART_SetConfig+0x6f4>)
 8007f20:	fba3 2302 	umull	r2, r3, r3, r2
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	469b      	mov	fp, r3
 8007f2e:	f04f 0c00 	mov.w	ip, #0
 8007f32:	46d9      	mov	r9, fp
 8007f34:	46e2      	mov	sl, ip
 8007f36:	eb19 0309 	adds.w	r3, r9, r9
 8007f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8007f3e:	4699      	mov	r9, r3
 8007f40:	46a2      	mov	sl, r4
 8007f42:	eb19 090b 	adds.w	r9, r9, fp
 8007f46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f4a:	f04f 0100 	mov.w	r1, #0
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f5e:	4689      	mov	r9, r1
 8007f60:	4692      	mov	sl, r2
 8007f62:	eb1b 0509 	adds.w	r5, fp, r9
 8007f66:	eb4c 060a 	adc.w	r6, ip, sl
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	f04f 0400 	mov.w	r4, #0
 8007f7c:	0094      	lsls	r4, r2, #2
 8007f7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f82:	008b      	lsls	r3, r1, #2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4623      	mov	r3, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	f7f8 fedc 	bl	8000d48 <__aeabi_uldivmod>
 8007f90:	4603      	mov	r3, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	461a      	mov	r2, r3
 8007f96:	4b32      	ldr	r3, [pc, #200]	; (8008060 <UART_SetConfig+0x6f4>)
 8007f98:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	2164      	movs	r1, #100	; 0x64
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	3332      	adds	r3, #50	; 0x32
 8007faa:	4a2d      	ldr	r2, [pc, #180]	; (8008060 <UART_SetConfig+0x6f4>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb6:	4498      	add	r8, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	469b      	mov	fp, r3
 8007fbc:	f04f 0c00 	mov.w	ip, #0
 8007fc0:	46d9      	mov	r9, fp
 8007fc2:	46e2      	mov	sl, ip
 8007fc4:	eb19 0309 	adds.w	r3, r9, r9
 8007fc8:	eb4a 040a 	adc.w	r4, sl, sl
 8007fcc:	4699      	mov	r9, r3
 8007fce:	46a2      	mov	sl, r4
 8007fd0:	eb19 090b 	adds.w	r9, r9, fp
 8007fd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fec:	4689      	mov	r9, r1
 8007fee:	4692      	mov	sl, r2
 8007ff0:	eb1b 0509 	adds.w	r5, fp, r9
 8007ff4:	eb4c 060a 	adc.w	r6, ip, sl
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	f04f 0400 	mov.w	r4, #0
 800800a:	0094      	lsls	r4, r2, #2
 800800c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008010:	008b      	lsls	r3, r1, #2
 8008012:	461a      	mov	r2, r3
 8008014:	4623      	mov	r3, r4
 8008016:	4628      	mov	r0, r5
 8008018:	4631      	mov	r1, r6
 800801a:	f7f8 fe95 	bl	8000d48 <__aeabi_uldivmod>
 800801e:	4603      	mov	r3, r0
 8008020:	460c      	mov	r4, r1
 8008022:	461a      	mov	r2, r3
 8008024:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <UART_SetConfig+0x6f4>)
 8008026:	fba3 1302 	umull	r1, r3, r3, r2
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	2164      	movs	r1, #100	; 0x64
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	3332      	adds	r3, #50	; 0x32
 8008038:	4a09      	ldr	r2, [pc, #36]	; (8008060 <UART_SetConfig+0x6f4>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4442      	add	r2, r8
 800804a:	609a      	str	r2, [r3, #8]
}
 800804c:	e7ff      	b.n	800804e <UART_SetConfig+0x6e2>
 800804e:	bf00      	nop
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	40011000 	.word	0x40011000
 800805c:	40011400 	.word	0x40011400
 8008060:	51eb851f 	.word	0x51eb851f

08008064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008064:	b084      	sub	sp, #16
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	f107 001c 	add.w	r0, r7, #28
 8008072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	2b01      	cmp	r3, #1
 800807a:	d122      	bne.n	80080c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d105      	bne.n	80080b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa4e 	bl	8008558 <USB_CoreReset>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]
 80080c0:	e01a      	b.n	80080f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa42 	bl	8008558 <USB_CoreReset>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	639a      	str	r2, [r3, #56]	; 0x38
 80080ea:	e005      	b.n	80080f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d10b      	bne.n	8008116 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f043 0206 	orr.w	r2, r3, #6
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f043 0220 	orr.w	r2, r3, #32
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008122:	b004      	add	sp, #16
 8008124:	4770      	bx	lr

08008126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f023 0201 	bic.w	r2, r3, #1
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d106      	bne.n	8008174 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	60da      	str	r2, [r3, #12]
 8008172:	e00b      	b.n	800818c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	60da      	str	r2, [r3, #12]
 8008186:	e001      	b.n	800818c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e003      	b.n	8008194 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800818c:	2032      	movs	r0, #50	; 0x32
 800818e:	f7fa fa23 	bl	80025d8 <HAL_Delay>

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800819c:	b084      	sub	sp, #16
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081b6:	2300      	movs	r3, #0
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	e009      	b.n	80081d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3340      	adds	r3, #64	; 0x40
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	3301      	adds	r3, #1
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b0e      	cmp	r3, #14
 80081d4:	d9f2      	bls.n	80081bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d11c      	bne.n	8008216 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ea:	f043 0302 	orr.w	r3, r3, #2
 80081ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	639a      	str	r2, [r3, #56]	; 0x38
 8008214:	e00b      	b.n	800822e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008234:	461a      	mov	r2, r3
 8008236:	2300      	movs	r3, #0
 8008238:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008240:	4619      	mov	r1, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008248:	461a      	mov	r2, r3
 800824a:	680b      	ldr	r3, [r1, #0]
 800824c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008250:	2b01      	cmp	r3, #1
 8008252:	d10c      	bne.n	800826e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800825a:	2100      	movs	r1, #0
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f949 	bl	80084f4 <USB_SetDevSpeed>
 8008262:	e008      	b.n	8008276 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008264:	2101      	movs	r1, #1
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f944 	bl	80084f4 <USB_SetDevSpeed>
 800826c:	e003      	b.n	8008276 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800826e:	2103      	movs	r1, #3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f93f 	bl	80084f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008276:	2110      	movs	r1, #16
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f8f3 	bl	8008464 <USB_FlushTxFifo>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f911 	bl	80084b0 <USB_FlushRxFifo>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829e:	461a      	mov	r2, r3
 80082a0:	2300      	movs	r3, #0
 80082a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	461a      	mov	r2, r3
 80082ac:	2300      	movs	r3, #0
 80082ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	461a      	mov	r2, r3
 80082b8:	2300      	movs	r3, #0
 80082ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	e043      	b.n	800834a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d8:	d118      	bne.n	800830c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	461a      	mov	r2, r3
 80082ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	e013      	b.n	800831e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008302:	461a      	mov	r2, r3
 8008304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	e008      	b.n	800831e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008318:	461a      	mov	r2, r3
 800831a:	2300      	movs	r3, #0
 800831c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832a:	461a      	mov	r2, r3
 800832c:	2300      	movs	r3, #0
 800832e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	461a      	mov	r2, r3
 800833e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	3301      	adds	r3, #1
 8008348:	613b      	str	r3, [r7, #16]
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	429a      	cmp	r2, r3
 8008350:	d3b7      	bcc.n	80082c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008352:	2300      	movs	r3, #0
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	e043      	b.n	80083e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800836a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800836e:	d118      	bne.n	80083a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008382:	461a      	mov	r2, r3
 8008384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	e013      	b.n	80083b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008398:	461a      	mov	r2, r3
 800839a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	e008      	b.n	80083b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	461a      	mov	r2, r3
 80083b0:	2300      	movs	r3, #0
 80083b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	461a      	mov	r2, r3
 80083c2:	2300      	movs	r3, #0
 80083c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	461a      	mov	r2, r3
 80083d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3301      	adds	r3, #1
 80083de:	613b      	str	r3, [r7, #16]
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d3b7      	bcc.n	8008358 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008408:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	2b00      	cmp	r3, #0
 800840e:	d105      	bne.n	800841c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	f043 0210 	orr.w	r2, r3, #16
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699a      	ldr	r2, [r3, #24]
 8008420:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <USB_DevInit+0x2c4>)
 8008422:	4313      	orrs	r3, r2
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f043 0208 	orr.w	r2, r3, #8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800843a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d107      	bne.n	8008450 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008448:	f043 0304 	orr.w	r3, r3, #4
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800845c:	b004      	add	sp, #16
 800845e:	4770      	bx	lr
 8008460:	803c3800 	.word	0x803c3800

08008464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	019b      	lsls	r3, r3, #6
 8008476:	f043 0220 	orr.w	r2, r3, #32
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <USB_FlushTxFifo+0x48>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d901      	bls.n	8008490 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e006      	b.n	800849e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b20      	cmp	r3, #32
 800849a:	d0f0      	beq.n	800847e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	00030d40 	.word	0x00030d40

080084b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2210      	movs	r2, #16
 80084c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <USB_FlushRxFifo+0x40>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d901      	bls.n	80084d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e006      	b.n	80084e2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f003 0310 	and.w	r3, r3, #16
 80084dc:	2b10      	cmp	r3, #16
 80084de:	d0f0      	beq.n	80084c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	00030d40 	.word	0x00030d40

080084f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008514:	4313      	orrs	r3, r2
 8008516:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008540:	f043 0302 	orr.w	r3, r3, #2
 8008544:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008546:	2003      	movs	r0, #3
 8008548:	f7fa f846 	bl	80025d8 <HAL_Delay>

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <USB_CoreReset+0x64>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d901      	bls.n	8008576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e01b      	b.n	80085ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	daf2      	bge.n	8008564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f043 0201 	orr.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3301      	adds	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4a09      	ldr	r2, [pc, #36]	; (80085bc <USB_CoreReset+0x64>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d901      	bls.n	80085a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e006      	b.n	80085ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d0f0      	beq.n	800858e <USB_CoreReset+0x36>

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	00030d40 	.word	0x00030d40

080085c0 <BME280>:
#include "main.h"
#include "bme280.h"

#define BME280_I2C bme280.hi2c

void BME280(I2C_HandleTypeDef *hi2c){
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	bme280.hi2c = hi2c;
 80085c8:	4a04      	ldr	r2, [pc, #16]	; (80085dc <BME280+0x1c>)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6013      	str	r3, [r2, #0]
	BME280_reset();
 80085ce:	f000 f807 	bl	80085e0 <BME280_reset>
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	20001a14 	.word	0x20001a14

080085e0 <BME280_reset>:
uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 80085e4:	22b6      	movs	r2, #182	; 0xb6
 80085e6:	21e0      	movs	r1, #224	; 0xe0
 80085e8:	20ec      	movs	r0, #236	; 0xec
 80085ea:	f000 fb75 	bl	8008cd8 <BME280_writeByte>
}
 80085ee:	bf00      	nop
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <BME280_readTemperature>:

int32_t BME280_readTemperature(){
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	2203      	movs	r2, #3
 80085fc:	21fa      	movs	r1, #250	; 0xfa
 80085fe:	20ec      	movs	r0, #236	; 0xec
 8008600:	f000 fb88 	bl	8008d14 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8008604:	793b      	ldrb	r3, [r7, #4]
 8008606:	061a      	lsls	r2, r3, #24
 8008608:	797b      	ldrb	r3, [r7, #5]
 800860a:	041b      	lsls	r3, r3, #16
 800860c:	431a      	orrs	r2, r3
 800860e:	79bb      	ldrb	r3, [r7, #6]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	4313      	orrs	r3, r2
 8008614:	131b      	asrs	r3, r3, #12
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <BME280_readPressure>:

int32_t BME280_readPressure(){
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	2203      	movs	r2, #3
 8008628:	21f7      	movs	r1, #247	; 0xf7
 800862a:	20ec      	movs	r0, #236	; 0xec
 800862c:	f000 fb72 	bl	8008d14 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8008630:	793b      	ldrb	r3, [r7, #4]
 8008632:	061a      	lsls	r2, r3, #24
 8008634:	797b      	ldrb	r3, [r7, #5]
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	431a      	orrs	r2, r3
 800863a:	79bb      	ldrb	r3, [r7, #6]
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	4313      	orrs	r3, r2
 8008640:	131b      	asrs	r3, r3, #12
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <BME280_readHumidity>:
int16_t BME280_readHumidity(){
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
 8008650:	1d3b      	adds	r3, r7, #4
 8008652:	2202      	movs	r2, #2
 8008654:	21fd      	movs	r1, #253	; 0xfd
 8008656:	20ec      	movs	r0, #236	; 0xec
 8008658:	f000 fb5c 	bl	8008d14 <BME280_readBytes>
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
 800865c:	793b      	ldrb	r3, [r7, #4]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	b21a      	sxth	r2, r3
 8008662:	797b      	ldrb	r3, [r7, #5]
 8008664:	b21b      	sxth	r3, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	b21b      	sxth	r3, r3
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <BME280_init>:

void BME280_init(uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b08b      	sub	sp, #44	; 0x2c
 8008678:	af00      	add	r7, sp, #0
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	461a      	mov	r2, r3
 8008682:	4623      	mov	r3, r4
 8008684:	71fb      	strb	r3, [r7, #7]
 8008686:	4603      	mov	r3, r0
 8008688:	71bb      	strb	r3, [r7, #6]
 800868a:	460b      	mov	r3, r1
 800868c:	717b      	strb	r3, [r7, #5]
 800868e:	4613      	mov	r3, r2
 8008690:	713b      	strb	r3, [r7, #4]
	// Configure the BME280
	  // Set H oversampling rate
	  BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 8008692:	79bb      	ldrb	r3, [r7, #6]
 8008694:	f003 0307 	and.w	r3, r3, #7
 8008698:	b2db      	uxtb	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	21f2      	movs	r1, #242	; 0xf2
 800869e:	20ec      	movs	r0, #236	; 0xec
 80086a0:	f000 fb1a 	bl	8008cd8 <BME280_writeByte>
	  // Set T and P oversampling rates and sensor mode
  	  BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 80086a4:	797b      	ldrb	r3, [r7, #5]
 80086a6:	015b      	lsls	r3, r3, #5
 80086a8:	b25a      	sxtb	r2, r3
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	b25b      	sxtb	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b25a      	sxtb	r2, r3
 80086b4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	b25b      	sxtb	r3, r3
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	21f4      	movs	r1, #244	; 0xf4
 80086c2:	20ec      	movs	r0, #236	; 0xec
 80086c4:	f000 fb08 	bl	8008cd8 <BME280_writeByte>
	  // Set standby time interval in normal mode and bandwidth
	  BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 80086c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80086cc:	015b      	lsls	r3, r3, #5
 80086ce:	b25a      	sxtb	r2, r3
 80086d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	b25b      	sxtb	r3, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	461a      	mov	r2, r3
 80086e0:	21f5      	movs	r1, #245	; 0xf5
 80086e2:	20ec      	movs	r0, #236	; 0xec
 80086e4:	f000 faf8 	bl	8008cd8 <BME280_writeByte>

	  //wait.
	  HAL_Delay(50);
 80086e8:	2032      	movs	r0, #50	; 0x32
 80086ea:	f7f9 ff75 	bl	80025d8 <HAL_Delay>
	  uint8_t calib[26];
	  BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	221a      	movs	r2, #26
 80086f4:	2188      	movs	r1, #136	; 0x88
 80086f6:	20ec      	movs	r0, #236	; 0xec
 80086f8:	f000 fb0c 	bl	8008d14 <BME280_readBytes>
	  bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 80086fc:	7b7b      	ldrb	r3, [r7, #13]
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	b21a      	sxth	r2, r3
 8008702:	7b3b      	ldrb	r3, [r7, #12]
 8008704:	b21b      	sxth	r3, r3
 8008706:	4313      	orrs	r3, r2
 8008708:	b21b      	sxth	r3, r3
 800870a:	b29a      	uxth	r2, r3
 800870c:	4b4d      	ldr	r3, [pc, #308]	; (8008844 <BME280_init+0x1d0>)
 800870e:	811a      	strh	r2, [r3, #8]
	  bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	b21a      	sxth	r2, r3
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	b21b      	sxth	r3, r3
 800871a:	4313      	orrs	r3, r2
 800871c:	b21a      	sxth	r2, r3
 800871e:	4b49      	ldr	r3, [pc, #292]	; (8008844 <BME280_init+0x1d0>)
 8008720:	821a      	strh	r2, [r3, #16]
	  bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 8008722:	7c7b      	ldrb	r3, [r7, #17]
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	b21a      	sxth	r2, r3
 8008728:	7c3b      	ldrb	r3, [r7, #16]
 800872a:	b21b      	sxth	r3, r3
 800872c:	4313      	orrs	r3, r2
 800872e:	b21a      	sxth	r2, r3
 8008730:	4b44      	ldr	r3, [pc, #272]	; (8008844 <BME280_init+0x1d0>)
 8008732:	825a      	strh	r2, [r3, #18]
	  bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 8008734:	7cfb      	ldrb	r3, [r7, #19]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	b21a      	sxth	r2, r3
 800873a:	7cbb      	ldrb	r3, [r7, #18]
 800873c:	b21b      	sxth	r3, r3
 800873e:	4313      	orrs	r3, r2
 8008740:	b21b      	sxth	r3, r3
 8008742:	b29a      	uxth	r2, r3
 8008744:	4b3f      	ldr	r3, [pc, #252]	; (8008844 <BME280_init+0x1d0>)
 8008746:	815a      	strh	r2, [r3, #10]
	  bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8008748:	7d7b      	ldrb	r3, [r7, #21]
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	b21a      	sxth	r2, r3
 800874e:	7d3b      	ldrb	r3, [r7, #20]
 8008750:	b21b      	sxth	r3, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	b21a      	sxth	r2, r3
 8008756:	4b3b      	ldr	r3, [pc, #236]	; (8008844 <BME280_init+0x1d0>)
 8008758:	829a      	strh	r2, [r3, #20]
	  bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	b21a      	sxth	r2, r3
 8008760:	7dbb      	ldrb	r3, [r7, #22]
 8008762:	b21b      	sxth	r3, r3
 8008764:	4313      	orrs	r3, r2
 8008766:	b21a      	sxth	r2, r3
 8008768:	4b36      	ldr	r3, [pc, #216]	; (8008844 <BME280_init+0x1d0>)
 800876a:	82da      	strh	r2, [r3, #22]
	  bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 800876c:	7e7b      	ldrb	r3, [r7, #25]
 800876e:	021b      	lsls	r3, r3, #8
 8008770:	b21a      	sxth	r2, r3
 8008772:	7e3b      	ldrb	r3, [r7, #24]
 8008774:	b21b      	sxth	r3, r3
 8008776:	4313      	orrs	r3, r2
 8008778:	b21a      	sxth	r2, r3
 800877a:	4b32      	ldr	r3, [pc, #200]	; (8008844 <BME280_init+0x1d0>)
 800877c:	831a      	strh	r2, [r3, #24]
	  bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 800877e:	7efb      	ldrb	r3, [r7, #27]
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	b21a      	sxth	r2, r3
 8008784:	7ebb      	ldrb	r3, [r7, #26]
 8008786:	b21b      	sxth	r3, r3
 8008788:	4313      	orrs	r3, r2
 800878a:	b21a      	sxth	r2, r3
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <BME280_init+0x1d0>)
 800878e:	835a      	strh	r2, [r3, #26]
	  bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 8008790:	7f7b      	ldrb	r3, [r7, #29]
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	b21a      	sxth	r2, r3
 8008796:	7f3b      	ldrb	r3, [r7, #28]
 8008798:	b21b      	sxth	r3, r3
 800879a:	4313      	orrs	r3, r2
 800879c:	b21a      	sxth	r2, r3
 800879e:	4b29      	ldr	r3, [pc, #164]	; (8008844 <BME280_init+0x1d0>)
 80087a0:	839a      	strh	r2, [r3, #28]
	  bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 80087a2:	7ffb      	ldrb	r3, [r7, #31]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	b21a      	sxth	r2, r3
 80087a8:	7fbb      	ldrb	r3, [r7, #30]
 80087aa:	b21b      	sxth	r3, r3
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b21a      	sxth	r2, r3
 80087b0:	4b24      	ldr	r3, [pc, #144]	; (8008844 <BME280_init+0x1d0>)
 80087b2:	83da      	strh	r2, [r3, #30]
	  bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 80087b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	b21a      	sxth	r2, r3
 80087bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087c0:	b21b      	sxth	r3, r3
 80087c2:	4313      	orrs	r3, r2
 80087c4:	b21a      	sxth	r2, r3
 80087c6:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <BME280_init+0x1d0>)
 80087c8:	841a      	strh	r2, [r3, #32]
	  bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 80087ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ce:	021b      	lsls	r3, r3, #8
 80087d0:	b21a      	sxth	r2, r3
 80087d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80087d6:	b21b      	sxth	r3, r3
 80087d8:	4313      	orrs	r3, r2
 80087da:	b21a      	sxth	r2, r3
 80087dc:	4b19      	ldr	r3, [pc, #100]	; (8008844 <BME280_init+0x1d0>)
 80087de:	845a      	strh	r2, [r3, #34]	; 0x22
	  bme280._dig_H1 = calib[25];
 80087e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <BME280_init+0x1d0>)
 80087e6:	711a      	strb	r2, [r3, #4]
	  BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 80087e8:	f107 030c 	add.w	r3, r7, #12
 80087ec:	2207      	movs	r2, #7
 80087ee:	21e1      	movs	r1, #225	; 0xe1
 80087f0:	20ec      	movs	r0, #236	; 0xec
 80087f2:	f000 fa8f 	bl	8008d14 <BME280_readBytes>
	  bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 80087f6:	7b7b      	ldrb	r3, [r7, #13]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	b21a      	sxth	r2, r3
 80087fc:	7b3b      	ldrb	r3, [r7, #12]
 80087fe:	b21b      	sxth	r3, r3
 8008800:	4313      	orrs	r3, r2
 8008802:	b21a      	sxth	r2, r3
 8008804:	4b0f      	ldr	r3, [pc, #60]	; (8008844 <BME280_init+0x1d0>)
 8008806:	849a      	strh	r2, [r3, #36]	; 0x24
	  bme280._dig_H3 = calib[2];
 8008808:	7bba      	ldrb	r2, [r7, #14]
 800880a:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <BME280_init+0x1d0>)
 800880c:	715a      	strb	r2, [r3, #5]
	  bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	021a      	lsls	r2, r3, #8
 8008812:	7c3b      	ldrb	r3, [r7, #16]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	b2db      	uxtb	r3, r3
 8008818:	4313      	orrs	r3, r2
 800881a:	111b      	asrs	r3, r3, #4
 800881c:	b29a      	uxth	r2, r3
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <BME280_init+0x1d0>)
 8008820:	819a      	strh	r2, [r3, #12]
	  bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8008822:	7c7b      	ldrb	r3, [r7, #17]
 8008824:	021a      	lsls	r2, r3, #8
 8008826:	7c3b      	ldrb	r3, [r7, #16]
 8008828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800882c:	4313      	orrs	r3, r2
 800882e:	111b      	asrs	r3, r3, #4
 8008830:	b29a      	uxth	r2, r3
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <BME280_init+0x1d0>)
 8008834:	81da      	strh	r2, [r3, #14]
	  bme280._dig_H6 = calib[6];
 8008836:	7cba      	ldrb	r2, [r7, #18]
 8008838:	4b02      	ldr	r3, [pc, #8]	; (8008844 <BME280_init+0x1d0>)
 800883a:	719a      	strb	r2, [r3, #6]
}
 800883c:	bf00      	nop
 800883e:	372c      	adds	r7, #44	; 0x2c
 8008840:	46bd      	mov	sp, r7
 8008842:	bd90      	pop	{r4, r7, pc}
 8008844:	20001a14 	.word	0x20001a14

08008848 <BME280_compensate_T>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	10da      	asrs	r2, r3, #3
 8008854:	4b19      	ldr	r3, [pc, #100]	; (80088bc <BME280_compensate_T+0x74>)
 8008856:	891b      	ldrh	r3, [r3, #8]
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	4a17      	ldr	r2, [pc, #92]	; (80088bc <BME280_compensate_T+0x74>)
 800885e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8008862:	fb02 f303 	mul.w	r3, r2, r3
 8008866:	12db      	asrs	r3, r3, #11
 8008868:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	111b      	asrs	r3, r3, #4
 800886e:	4a13      	ldr	r2, [pc, #76]	; (80088bc <BME280_compensate_T+0x74>)
 8008870:	8912      	ldrh	r2, [r2, #8]
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	1112      	asrs	r2, r2, #4
 8008878:	4910      	ldr	r1, [pc, #64]	; (80088bc <BME280_compensate_T+0x74>)
 800887a:	8909      	ldrh	r1, [r1, #8]
 800887c:	1a52      	subs	r2, r2, r1
 800887e:	fb02 f303 	mul.w	r3, r2, r3
 8008882:	131b      	asrs	r3, r3, #12
 8008884:	4a0d      	ldr	r2, [pc, #52]	; (80088bc <BME280_compensate_T+0x74>)
 8008886:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800888a:	fb02 f303 	mul.w	r3, r2, r3
 800888e:	139b      	asrs	r3, r3, #14
 8008890:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	4413      	add	r3, r2
 8008898:	4a08      	ldr	r2, [pc, #32]	; (80088bc <BME280_compensate_T+0x74>)
 800889a:	6293      	str	r3, [r2, #40]	; 0x28
	  T = (bme280._t_fine * 5 + 128) >> 8;
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <BME280_compensate_T+0x74>)
 800889e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	3380      	adds	r3, #128	; 0x80
 80088a8:	121b      	asrs	r3, r3, #8
 80088aa:	60fb      	str	r3, [r7, #12]
	  return T;
 80088ac:	68fb      	ldr	r3, [r7, #12]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	371c      	adds	r7, #28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20001a14 	.word	0x20001a14

080088c0 <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 80088c0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80088c4:	b088      	sub	sp, #32
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 80088ca:	4b65      	ldr	r3, [pc, #404]	; (8008a60 <BME280_compensate_P+0x1a0>)
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	4619      	mov	r1, r3
 80088d0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80088d4:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80088d8:	f142 34ff 	adc.w	r4, r2, #4294967295
 80088dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	fb02 f203 	mul.w	r2, r2, r3
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	69b9      	ldr	r1, [r7, #24]
 80088ec:	fb01 f303 	mul.w	r3, r1, r3
 80088f0:	441a      	add	r2, r3
 80088f2:	69b9      	ldr	r1, [r7, #24]
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	fba1 3403 	umull	r3, r4, r1, r3
 80088fa:	4422      	add	r2, r4
 80088fc:	4614      	mov	r4, r2
 80088fe:	4a58      	ldr	r2, [pc, #352]	; (8008a60 <BME280_compensate_P+0x1a0>)
 8008900:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8008904:	b211      	sxth	r1, r2
 8008906:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800890a:	fb01 f504 	mul.w	r5, r1, r4
 800890e:	fb03 f002 	mul.w	r0, r3, r2
 8008912:	4428      	add	r0, r5
 8008914:	fba3 3401 	umull	r3, r4, r3, r1
 8008918:	1902      	adds	r2, r0, r4
 800891a:	4614      	mov	r4, r2
 800891c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008920:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 8008924:	4b4e      	ldr	r3, [pc, #312]	; (8008a60 <BME280_compensate_P+0x1a0>)
 8008926:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800892a:	b21b      	sxth	r3, r3
 800892c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	fb04 f102 	mul.w	r1, r4, r2
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	fb03 f202 	mul.w	r2, r3, r2
 800893c:	1888      	adds	r0, r1, r2
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	fba2 1203 	umull	r1, r2, r2, r3
 8008944:	1883      	adds	r3, r0, r2
 8008946:	461a      	mov	r2, r3
 8008948:	f04f 0500 	mov.w	r5, #0
 800894c:	f04f 0600 	mov.w	r6, #0
 8008950:	0456      	lsls	r6, r2, #17
 8008952:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8008956:	044d      	lsls	r5, r1, #17
 8008958:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800895c:	186b      	adds	r3, r5, r1
 800895e:	eb46 0402 	adc.w	r4, r6, r2
 8008962:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 8008966:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <BME280_compensate_P+0x1a0>)
 8008968:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800896c:	b219      	sxth	r1, r3
 800896e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8008972:	f04f 0500 	mov.w	r5, #0
 8008976:	f04f 0600 	mov.w	r6, #0
 800897a:	00ce      	lsls	r6, r1, #3
 800897c:	2500      	movs	r5, #0
 800897e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008982:	186b      	adds	r3, r5, r1
 8008984:	eb46 0402 	adc.w	r4, r6, r2
 8008988:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	fb02 f203 	mul.w	r2, r2, r3
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	69b9      	ldr	r1, [r7, #24]
 8008998:	fb01 f303 	mul.w	r3, r1, r3
 800899c:	441a      	add	r2, r3
 800899e:	69b9      	ldr	r1, [r7, #24]
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	fba1 3403 	umull	r3, r4, r1, r3
 80089a6:	4422      	add	r2, r4
 80089a8:	4614      	mov	r4, r2
 80089aa:	4a2d      	ldr	r2, [pc, #180]	; (8008a60 <BME280_compensate_P+0x1a0>)
 80089ac:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80089b0:	b211      	sxth	r1, r2
 80089b2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80089b6:	fb01 f504 	mul.w	r5, r1, r4
 80089ba:	fb03 f002 	mul.w	r0, r3, r2
 80089be:	4428      	add	r0, r5
 80089c0:	fba3 3401 	umull	r3, r4, r3, r1
 80089c4:	1902      	adds	r2, r0, r4
 80089c6:	4614      	mov	r4, r2
 80089c8:	f04f 0100 	mov.w	r1, #0
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	0a19      	lsrs	r1, r3, #8
 80089d2:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80089d6:	1222      	asrs	r2, r4, #8
 80089d8:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <BME280_compensate_P+0x1a0>)
 80089da:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80089de:	b21b      	sxth	r3, r3
 80089e0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80089e4:	69b8      	ldr	r0, [r7, #24]
 80089e6:	fb04 f500 	mul.w	r5, r4, r0
 80089ea:	69f8      	ldr	r0, [r7, #28]
 80089ec:	fb03 f000 	mul.w	r0, r3, r0
 80089f0:	4428      	add	r0, r5
 80089f2:	69bd      	ldr	r5, [r7, #24]
 80089f4:	fba5 5603 	umull	r5, r6, r5, r3
 80089f8:	1983      	adds	r3, r0, r6
 80089fa:	461e      	mov	r6, r3
 80089fc:	f04f 0b00 	mov.w	fp, #0
 8008a00:	f04f 0c00 	mov.w	ip, #0
 8008a04:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8008a08:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8008a0c:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8008a10:	eb1b 0301 	adds.w	r3, fp, r1
 8008a14:	eb4c 0402 	adc.w	r4, ip, r2
 8008a18:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 8008a1c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008a20:	1c19      	adds	r1, r3, #0
 8008a22:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8008a26:	4b0e      	ldr	r3, [pc, #56]	; (8008a60 <BME280_compensate_P+0x1a0>)
 8008a28:	895b      	ldrh	r3, [r3, #10]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f04f 0400 	mov.w	r4, #0
 8008a30:	fb03 f502 	mul.w	r5, r3, r2
 8008a34:	fb01 f004 	mul.w	r0, r1, r4
 8008a38:	4428      	add	r0, r5
 8008a3a:	fba1 3403 	umull	r3, r4, r1, r3
 8008a3e:	1902      	adds	r2, r0, r4
 8008a40:	4614      	mov	r4, r2
 8008a42:	f04f 0100 	mov.w	r1, #0
 8008a46:	f04f 0200 	mov.w	r2, #0
 8008a4a:	1061      	asrs	r1, r4, #1
 8008a4c:	17e2      	asrs	r2, r4, #31
 8008a4e:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 8008a52:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008a56:	4323      	orrs	r3, r4
 8008a58:	d104      	bne.n	8008a64 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e0d7      	b.n	8008c0e <BME280_compensate_P+0x34e>
 8008a5e:	bf00      	nop
 8008a60:	20001a14 	.word	0x20001a14
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8008a6a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008a6e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	ea4f 0963 	mov.w	r9, r3, asr #1
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8008a7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008a82:	4645      	mov	r5, r8
 8008a84:	464e      	mov	r6, r9
 8008a86:	1aed      	subs	r5, r5, r3
 8008a88:	eb66 0604 	sbc.w	r6, r6, r4
 8008a8c:	46a8      	mov	r8, r5
 8008a8e:	46b1      	mov	r9, r6
 8008a90:	eb18 0308 	adds.w	r3, r8, r8
 8008a94:	eb49 0409 	adc.w	r4, r9, r9
 8008a98:	4698      	mov	r8, r3
 8008a9a:	46a1      	mov	r9, r4
 8008a9c:	eb18 0805 	adds.w	r8, r8, r5
 8008aa0:	eb49 0906 	adc.w	r9, r9, r6
 8008aa4:	f04f 0100 	mov.w	r1, #0
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8008ab0:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8008ab4:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8008ab8:	eb18 0801 	adds.w	r8, r8, r1
 8008abc:	eb49 0902 	adc.w	r9, r9, r2
 8008ac0:	f04f 0100 	mov.w	r1, #0
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8008acc:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8008ad0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8008ad4:	4688      	mov	r8, r1
 8008ad6:	4691      	mov	r9, r2
 8008ad8:	eb18 0805 	adds.w	r8, r8, r5
 8008adc:	eb49 0906 	adc.w	r9, r9, r6
 8008ae0:	f04f 0100 	mov.w	r1, #0
 8008ae4:	f04f 0200 	mov.w	r2, #0
 8008ae8:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8008aec:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8008af0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8008af4:	4688      	mov	r8, r1
 8008af6:	4691      	mov	r9, r2
 8008af8:	eb18 0005 	adds.w	r0, r8, r5
 8008afc:	eb49 0106 	adc.w	r1, r9, r6
 8008b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b04:	f7f8 f8d0 	bl	8000ca8 <__aeabi_ldivmod>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 8008b10:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <BME280_compensate_P+0x358>)
 8008b12:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008b16:	b219      	sxth	r1, r3
 8008b18:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8008b1c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8008b20:	f04f 0300 	mov.w	r3, #0
 8008b24:	f04f 0400 	mov.w	r4, #0
 8008b28:	0b6b      	lsrs	r3, r5, #13
 8008b2a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8008b2e:	1374      	asrs	r4, r6, #13
 8008b30:	fb03 f502 	mul.w	r5, r3, r2
 8008b34:	fb01 f004 	mul.w	r0, r1, r4
 8008b38:	4428      	add	r0, r5
 8008b3a:	fba1 1203 	umull	r1, r2, r1, r3
 8008b3e:	1883      	adds	r3, r0, r2
 8008b40:	461a      	mov	r2, r3
 8008b42:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8008b46:	f04f 0300 	mov.w	r3, #0
 8008b4a:	f04f 0400 	mov.w	r4, #0
 8008b4e:	0b6b      	lsrs	r3, r5, #13
 8008b50:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8008b54:	1374      	asrs	r4, r6, #13
 8008b56:	fb03 f502 	mul.w	r5, r3, r2
 8008b5a:	fb01 f004 	mul.w	r0, r1, r4
 8008b5e:	4428      	add	r0, r5
 8008b60:	fba1 1203 	umull	r1, r2, r1, r3
 8008b64:	1883      	adds	r3, r0, r2
 8008b66:	461a      	mov	r2, r3
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	f04f 0400 	mov.w	r4, #0
 8008b70:	0e4b      	lsrs	r3, r1, #25
 8008b72:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008b76:	1654      	asrs	r4, r2, #25
 8008b78:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 8008b7c:	4b26      	ldr	r3, [pc, #152]	; (8008c18 <BME280_compensate_P+0x358>)
 8008b7e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	fb04 f102 	mul.w	r1, r4, r2
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	fb03 f202 	mul.w	r2, r3, r2
 8008b94:	1888      	adds	r0, r1, r2
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	fba2 1203 	umull	r1, r2, r2, r3
 8008b9c:	1883      	adds	r3, r0, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f04f 0300 	mov.w	r3, #0
 8008ba4:	f04f 0400 	mov.w	r4, #0
 8008ba8:	0ccb      	lsrs	r3, r1, #19
 8008baa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8008bae:	14d4      	asrs	r4, r2, #19
 8008bb0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8008bb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008bb8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008bbc:	eb11 0803 	adds.w	r8, r1, r3
 8008bc0:	eb42 0904 	adc.w	r9, r2, r4
 8008bc4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008bc8:	eb13 0508 	adds.w	r5, r3, r8
 8008bcc:	eb44 0609 	adc.w	r6, r4, r9
 8008bd0:	f04f 0100 	mov.w	r1, #0
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	0a29      	lsrs	r1, r5, #8
 8008bda:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8008bde:	1232      	asrs	r2, r6, #8
 8008be0:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <BME280_compensate_P+0x358>)
 8008be2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8008be6:	b21d      	sxth	r5, r3
 8008be8:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8008bec:	f04f 0800 	mov.w	r8, #0
 8008bf0:	f04f 0900 	mov.w	r9, #0
 8008bf4:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8008bf8:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8008bfc:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8008c00:	eb18 0301 	adds.w	r3, r8, r1
 8008c04:	eb49 0402 	adc.w	r4, r9, r2
 8008c08:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3720      	adds	r7, #32
 8008c12:	46bd      	mov	sp, r7
 8008c14:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8008c18:	20001a14 	.word	0x20001a14

08008c1c <BME280_compensate_H>:

// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22integer and 10fractional bits).
// Output value of “47445”represents 47445/1024= 46.333%RH
uint32_t BME280_compensate_H(int32_t adc_H){
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	int32_t var;

	var = (bme280._t_fine - ((int32_t)76800));
 8008c24:	4b2b      	ldr	r3, [pc, #172]	; (8008cd4 <BME280_compensate_H+0xb8>)
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8008c2c:	60fb      	str	r3, [r7, #12]
	var = (((((adc_H << 14) - (((int32_t)bme280._dig_H4) << 20) - (((int32_t)bme280._dig_H5) * var)) +
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	039a      	lsls	r2, r3, #14
 8008c32:	4b28      	ldr	r3, [pc, #160]	; (8008cd4 <BME280_compensate_H+0xb8>)
 8008c34:	899b      	ldrh	r3, [r3, #12]
 8008c36:	051b      	lsls	r3, r3, #20
 8008c38:	1ad2      	subs	r2, r2, r3
 8008c3a:	4b26      	ldr	r3, [pc, #152]	; (8008cd4 <BME280_compensate_H+0xb8>)
 8008c3c:	89db      	ldrh	r3, [r3, #14]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	fb03 f301 	mul.w	r3, r3, r1
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	((int32_t)16384)) >> 15) * (((((((var * ((int32_t)bme280._dig_H6)) >> 10) * (((var *
 8008c4c:	13db      	asrs	r3, r3, #15
 8008c4e:	4a21      	ldr	r2, [pc, #132]	; (8008cd4 <BME280_compensate_H+0xb8>)
 8008c50:	7992      	ldrb	r2, [r2, #6]
 8008c52:	4611      	mov	r1, r2
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	fb02 f201 	mul.w	r2, r2, r1
 8008c5a:	1292      	asrs	r2, r2, #10
	((int32_t)bme280._dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)bme280._dig_H2) + 8192) >> 14));
 8008c5c:	491d      	ldr	r1, [pc, #116]	; (8008cd4 <BME280_compensate_H+0xb8>)
 8008c5e:	7949      	ldrb	r1, [r1, #5]
 8008c60:	4608      	mov	r0, r1
	((int32_t)16384)) >> 15) * (((((((var * ((int32_t)bme280._dig_H6)) >> 10) * (((var *
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	fb01 f100 	mul.w	r1, r1, r0
	((int32_t)bme280._dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)bme280._dig_H2) + 8192) >> 14));
 8008c68:	12c9      	asrs	r1, r1, #11
 8008c6a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	((int32_t)16384)) >> 15) * (((((((var * ((int32_t)bme280._dig_H6)) >> 10) * (((var *
 8008c6e:	fb01 f202 	mul.w	r2, r1, r2
	((int32_t)bme280._dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)bme280._dig_H2) + 8192) >> 14));
 8008c72:	1292      	asrs	r2, r2, #10
 8008c74:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008c78:	4916      	ldr	r1, [pc, #88]	; (8008cd4 <BME280_compensate_H+0xb8>)
 8008c7a:	f9b1 1024 	ldrsh.w	r1, [r1, #36]	; 0x24
 8008c7e:	fb01 f202 	mul.w	r2, r1, r2
 8008c82:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008c86:	1392      	asrs	r2, r2, #14
	var = (((((adc_H << 14) - (((int32_t)bme280._dig_H4) << 20) - (((int32_t)bme280._dig_H5) * var)) +
 8008c88:	fb02 f303 	mul.w	r3, r2, r3
 8008c8c:	60fb      	str	r3, [r7, #12]
	var = (var - (((((var >> 15) * (var >> 15)) >> 7) * ((int32_t)bme280._dig_H1)) >> 4));
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	13db      	asrs	r3, r3, #15
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	13d2      	asrs	r2, r2, #15
 8008c96:	fb02 f303 	mul.w	r3, r2, r3
 8008c9a:	11db      	asrs	r3, r3, #7
 8008c9c:	4a0d      	ldr	r2, [pc, #52]	; (8008cd4 <BME280_compensate_H+0xb8>)
 8008c9e:	7912      	ldrb	r2, [r2, #4]
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	111b      	asrs	r3, r3, #4
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	60fb      	str	r3, [r7, #12]
	var = (var < 0 ? 0 : var);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008cb2:	60fb      	str	r3, [r7, #12]
	var = (var > 419430400 ? 419430400 : var);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8008cba:	bfa8      	it	ge
 8008cbc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8008cc0:	60fb      	str	r3, [r7, #12]
	return(uint32_t)(var >> 12);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	131b      	asrs	r3, r3, #12
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20001a14 	.word	0x20001a14

08008cd8 <BME280_writeByte>:

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af04      	add	r7, sp, #16
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	71bb      	strb	r3, [r7, #6]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(BME280_I2C, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <BME280_writeByte+0x38>)
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	b299      	uxth	r1, r3
 8008cf2:	79bb      	ldrb	r3, [r7, #6]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	2364      	movs	r3, #100	; 0x64
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	1d7b      	adds	r3, r7, #5
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2301      	movs	r3, #1
 8008d04:	f7fa fb80 	bl	8003408 <HAL_I2C_Mem_Write>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20001a14 	.word	0x20001a14

08008d14 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8008d14:	b590      	push	{r4, r7, lr}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af04      	add	r7, sp, #16
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	71fb      	strb	r3, [r7, #7]
 8008d20:	460b      	mov	r3, r1
 8008d22:	71bb      	strb	r3, [r7, #6]
 8008d24:	4613      	mov	r3, r2
 8008d26:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(BME280_I2C, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <BME280_readBytes+0x40>)
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	b299      	uxth	r1, r3
 8008d30:	79bb      	ldrb	r3, [r7, #6]
 8008d32:	b29c      	uxth	r4, r3
 8008d34:	797b      	ldrb	r3, [r7, #5]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	2264      	movs	r2, #100	; 0x64
 8008d3a:	9202      	str	r2, [sp, #8]
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	2301      	movs	r3, #1
 8008d44:	4622      	mov	r2, r4
 8008d46:	f7fa fc59 	bl	80035fc <HAL_I2C_Mem_Read>
}
 8008d4a:	bf00      	nop
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd90      	pop	{r4, r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20001a14 	.word	0x20001a14

08008d58 <TM_GPS_Update>:
#endif

	HAL_UART_Receive_DMA(huart, GPS_DmaBuf, GPS_DMA_BUF_SIZE);
}

TM_GPS_Result_t TM_GPS_Update() {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
	/* Check for data in USART */
//	while (!GPS_USART_BUFFER_EMPTY) {

//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8008d5e:	2300      	movs	r3, #0
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	e017      	b.n	8008d94 <TM_GPS_Update+0x3c>
		TM_GPS_INT_Do(&gps.GPS_Data, (char)GPS_DmaBuf[i]);
 8008d64:	4a17      	ldr	r2, [pc, #92]	; (8008dc4 <TM_GPS_Update+0x6c>)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4413      	add	r3, r2
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4816      	ldr	r0, [pc, #88]	; (8008dc8 <TM_GPS_Update+0x70>)
 8008d70:	f000 f82e 	bl	8008dd0 <TM_GPS_INT_Do>
		if (gps.GPS_Data.Status == TM_GPS_Result_NewData) {
 8008d74:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <TM_GPS_Update+0x70>)
 8008d76:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d107      	bne.n	8008d8e <TM_GPS_Update+0x36>
//			return gps.GPS_Data.Status;
			gps.hz_cnt++;
 8008d7e:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <TM_GPS_Update+0x70>)
 8008d80:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008d84:	3301      	adds	r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <TM_GPS_Update+0x70>)
 8008d8a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3301      	adds	r3, #1
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008d9a:	dbe3      	blt.n	8008d64 <TM_GPS_Update+0xc>
//			gps.GPS_Data->Status = TM_GPS_Result_OldData;
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <TM_GPS_Update+0x74>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <TM_GPS_Update+0x58>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gps.GPS_Data, TM_GPS_Result_FirstDataWaiting);
 8008da4:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <TM_GPS_Update+0x70>)
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8008dac:	2302      	movs	r3, #2
 8008dae:	e004      	b.n	8008dba <TM_GPS_Update+0x62>
	}
	
	/* We have old data */
	TM_GPS_INT_ReturnWithStatus(&gps.GPS_Data, TM_GPS_Result_OldData);
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <TM_GPS_Update+0x70>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8008db8:	2301      	movs	r3, #1
//	HAL_UART_Receive_IT(&huart4, &GPS_Data->buf, 1);
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000348 	.word	0x20000348
 8008dc8:	20001a40 	.word	0x20001a40
 8008dcc:	2000033c 	.word	0x2000033c

08008dd0 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8008dd0:	b590      	push	{r4, r7, lr}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 f837 	bl	8009e50 <TM_GPS_INT_FlagsOk>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d006      	beq.n	8008df6 <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f85f 	bl	8009eac <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	}
	if (c == '$') {										/* Start of string detected */
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	2b24      	cmp	r3, #36	; 0x24
 8008dfa:	d116      	bne.n	8008e2a <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8008dfc:	4b5d      	ldr	r3, [pc, #372]	; (8008f74 <TM_GPS_INT_Do+0x1a4>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8008e02:	4b5d      	ldr	r3, [pc, #372]	; (8008f78 <TM_GPS_INT_Do+0x1a8>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8008e08:	4b5c      	ldr	r3, [pc, #368]	; (8008f7c <TM_GPS_INT_Do+0x1ac>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8008e0e:	4b5c      	ldr	r3, [pc, #368]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 8008e14:	4b5a      	ldr	r3, [pc, #360]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	b2d1      	uxtb	r1, r2
 8008e1c:	4a58      	ldr	r2, [pc, #352]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008e1e:	7011      	strb	r1, [r2, #0]
 8008e20:	4619      	mov	r1, r3
 8008e22:	4a58      	ldr	r2, [pc, #352]	; (8008f84 <TM_GPS_INT_Do+0x1b4>)
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	5453      	strb	r3, [r2, r1]
 8008e28:	e09b      	b.n	8008f62 <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	2b2c      	cmp	r3, #44	; 0x2c
 8008e2e:	d120      	bne.n	8008e72 <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8008e30:	4b51      	ldr	r3, [pc, #324]	; (8008f78 <TM_GPS_INT_Do+0x1a8>)
 8008e32:	781a      	ldrb	r2, [r3, #0]
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	4053      	eors	r3, r2
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	4b4f      	ldr	r3, [pc, #316]	; (8008f78 <TM_GPS_INT_Do+0x1a8>)
 8008e3c:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8008e3e:	4b50      	ldr	r3, [pc, #320]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	b2d1      	uxtb	r1, r2
 8008e46:	4a4e      	ldr	r2, [pc, #312]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008e48:	7011      	strb	r1, [r2, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	4b4d      	ldr	r3, [pc, #308]	; (8008f84 <TM_GPS_INT_Do+0x1b4>)
 8008e4e:	2100      	movs	r1, #0
 8008e50:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 f84e 	bl	8009ef4 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f89f 	bl	8008f9c <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8008e5e:	4b47      	ldr	r3, [pc, #284]	; (8008f7c <TM_GPS_INT_Do+0x1ac>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	4b45      	ldr	r3, [pc, #276]	; (8008f7c <TM_GPS_INT_Do+0x1ac>)
 8008e68:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8008e6a:	4b45      	ldr	r3, [pc, #276]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e077      	b.n	8008f62 <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	2b0a      	cmp	r3, #10
 8008e76:	d113      	bne.n	8008ea0 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8008e78:	4b40      	ldr	r3, [pc, #256]	; (8008f7c <TM_GPS_INT_Do+0x1ac>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8008e7e:	4b42      	ldr	r3, [pc, #264]	; (8008f88 <TM_GPS_INT_Do+0x1b8>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d16d      	bne.n	8008f62 <TM_GPS_INT_Do+0x192>
 8008e86:	4b41      	ldr	r3, [pc, #260]	; (8008f8c <TM_GPS_INT_Do+0x1bc>)
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	4b41      	ldr	r3, [pc, #260]	; (8008f90 <TM_GPS_INT_Do+0x1c0>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d167      	bne.n	8008f62 <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8008e92:	4b40      	ldr	r3, [pc, #256]	; (8008f94 <TM_GPS_INT_Do+0x1c4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e9a:	4a3e      	ldr	r2, [pc, #248]	; (8008f94 <TM_GPS_INT_Do+0x1c4>)
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	e060      	b.n	8008f62 <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	2b0d      	cmp	r3, #13
 8008ea4:	d128      	bne.n	8008ef8 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 8008ea6:	4b36      	ldr	r3, [pc, #216]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	b2d1      	uxtb	r1, r2
 8008eae:	4a34      	ldr	r2, [pc, #208]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008eb0:	7011      	strb	r1, [r2, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	4b33      	ldr	r3, [pc, #204]	; (8008f84 <TM_GPS_INT_Do+0x1b4>)
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8008eba:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <TM_GPS_INT_Do+0x1b4>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 ff9c 	bl	8009dfc <TM_GPS_INT_Hex2Dec>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	b2dc      	uxtb	r4, r3
 8008eca:	4b2e      	ldr	r3, [pc, #184]	; (8008f84 <TM_GPS_INT_Do+0x1b4>)
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 ff94 	bl	8009dfc <TM_GPS_INT_Hex2Dec>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	4423      	add	r3, r4
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <TM_GPS_INT_Do+0x1c8>)
 8008edc:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8008ede:	4b2e      	ldr	r3, [pc, #184]	; (8008f98 <TM_GPS_INT_Do+0x1c8>)
 8008ee0:	781a      	ldrb	r2, [r3, #0]
 8008ee2:	4b25      	ldr	r3, [pc, #148]	; (8008f78 <TM_GPS_INT_Do+0x1a8>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d002      	beq.n	8008ef0 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 ffde 	bl	8009eac <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8008ef0:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <TM_GPS_INT_Do+0x1ac>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e034      	b.n	8008f62 <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	2b2a      	cmp	r3, #42	; 0x2a
 8008efc:	d11c      	bne.n	8008f38 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8008efe:	4b1d      	ldr	r3, [pc, #116]	; (8008f74 <TM_GPS_INT_Do+0x1a4>)
 8008f00:	2201      	movs	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8008f04:	4b1e      	ldr	r3, [pc, #120]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	b2d1      	uxtb	r1, r2
 8008f0c:	4a1c      	ldr	r2, [pc, #112]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008f0e:	7011      	strb	r1, [r2, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <TM_GPS_INT_Do+0x1b4>)
 8008f14:	2100      	movs	r1, #0
 8008f16:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 ffeb 	bl	8009ef4 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f83c 	bl	8008f9c <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8008f24:	4b15      	ldr	r3, [pc, #84]	; (8008f7c <TM_GPS_INT_Do+0x1ac>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	4b13      	ldr	r3, [pc, #76]	; (8008f7c <TM_GPS_INT_Do+0x1ac>)
 8008f2e:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8008f30:	4b13      	ldr	r3, [pc, #76]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
 8008f36:	e014      	b.n	8008f62 <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8008f38:	4b0e      	ldr	r3, [pc, #56]	; (8008f74 <TM_GPS_INT_Do+0x1a4>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <TM_GPS_INT_Do+0x1a8>)
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	4053      	eors	r3, r2
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <TM_GPS_INT_Do+0x1a8>)
 8008f4c:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	b2d1      	uxtb	r1, r2
 8008f56:	4a0a      	ldr	r2, [pc, #40]	; (8008f80 <TM_GPS_INT_Do+0x1b0>)
 8008f58:	7011      	strb	r1, [r2, #0]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <TM_GPS_INT_Do+0x1b4>)
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fe3a 	bl	8009bdc <TM_GPS_INT_Return>
 8008f68:	4603      	mov	r3, r0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd90      	pop	{r4, r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000213 	.word	0x20000213
 8008f78:	20000211 	.word	0x20000211
 8008f7c:	2000020f 	.word	0x2000020f
 8008f80:	20000210 	.word	0x20000210
 8008f84:	20000200 	.word	0x20000200
 8008f88:	20000009 	.word	0x20000009
 8008f8c:	20000474 	.word	0x20000474
 8008f90:	20000475 	.word	0x20000475
 8008f94:	20000214 	.word	0x20000214
 8008f98:	20000212 	.word	0x20000212

08008f9c <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8008f9c:	b5b0      	push	{r4, r5, r7, lr}
 8008f9e:	ed2d 8b02 	vpush	{d8}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8008fa8:	4bc9      	ldr	r3, [pc, #804]	; (80092d0 <TM_GPS_INT_CheckTerm+0x334>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d134      	bne.n	800901a <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 8008fb0:	49c8      	ldr	r1, [pc, #800]	; (80092d4 <TM_GPS_INT_CheckTerm+0x338>)
 8008fb2:	48c9      	ldr	r0, [pc, #804]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 8008fb4:	f000 febc 	bl	8009d30 <TM_GPS_INT_StringStartsWith>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 8008fbe:	4bc7      	ldr	r3, [pc, #796]	; (80092dc <TM_GPS_INT_CheckTerm+0x340>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	e023      	b.n	800900e <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8008fc6:	49c6      	ldr	r1, [pc, #792]	; (80092e0 <TM_GPS_INT_CheckTerm+0x344>)
 8008fc8:	48c3      	ldr	r0, [pc, #780]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 8008fca:	f000 feb1 	bl	8009d30 <TM_GPS_INT_StringStartsWith>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8008fd4:	4bc1      	ldr	r3, [pc, #772]	; (80092dc <TM_GPS_INT_CheckTerm+0x340>)
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	701a      	strb	r2, [r3, #0]
 8008fda:	e018      	b.n	800900e <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8008fdc:	49c1      	ldr	r1, [pc, #772]	; (80092e4 <TM_GPS_INT_CheckTerm+0x348>)
 8008fde:	48be      	ldr	r0, [pc, #760]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 8008fe0:	f000 fea6 	bl	8009d30 <TM_GPS_INT_StringStartsWith>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8008fea:	4bbc      	ldr	r3, [pc, #752]	; (80092dc <TM_GPS_INT_CheckTerm+0x340>)
 8008fec:	2202      	movs	r2, #2
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	e00d      	b.n	800900e <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 8008ff2:	49bd      	ldr	r1, [pc, #756]	; (80092e8 <TM_GPS_INT_CheckTerm+0x34c>)
 8008ff4:	48b8      	ldr	r0, [pc, #736]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 8008ff6:	f000 fe9b 	bl	8009d30 <TM_GPS_INT_StringStartsWith>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 8009000:	4bb6      	ldr	r3, [pc, #728]	; (80092dc <TM_GPS_INT_CheckTerm+0x340>)
 8009002:	2203      	movs	r2, #3
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	e002      	b.n	800900e <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8009008:	4bb4      	ldr	r3, [pc, #720]	; (80092dc <TM_GPS_INT_CheckTerm+0x340>)
 800900a:	2204      	movs	r2, #4
 800900c:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 800900e:	49b2      	ldr	r1, [pc, #712]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 8009010:	48b6      	ldr	r0, [pc, #728]	; (80092ec <TM_GPS_INT_CheckTerm+0x350>)
 8009012:	f004 ffed 	bl	800dff0 <strcpy>
 8009016:	f000 bdc7 	b.w	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 800901a:	4bb0      	ldr	r3, [pc, #704]	; (80092dc <TM_GPS_INT_CheckTerm+0x340>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	015b      	lsls	r3, r3, #5
 8009020:	4aab      	ldr	r2, [pc, #684]	; (80092d0 <TM_GPS_INT_CheckTerm+0x334>)
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	4313      	orrs	r3, r2
 8009026:	3b01      	subs	r3, #1
 8009028:	2b62      	cmp	r3, #98	; 0x62
 800902a:	f200 8525 	bhi.w	8009a78 <TM_GPS_INT_CheckTerm+0xadc>
 800902e:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <TM_GPS_INT_CheckTerm+0x98>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	080095cd 	.word	0x080095cd
 8009038:	080091c1 	.word	0x080091c1
 800903c:	080092a9 	.word	0x080092a9
 8009040:	08009305 	.word	0x08009305
 8009044:	080093ed 	.word	0x080093ed
 8009048:	08009435 	.word	0x08009435
 800904c:	08009413 	.word	0x08009413
 8009050:	08009a79 	.word	0x08009a79
 8009054:	08009457 	.word	0x08009457
 8009058:	08009a79 	.word	0x08009a79
 800905c:	08009a79 	.word	0x08009a79
 8009060:	08009a79 	.word	0x08009a79
 8009064:	08009a79 	.word	0x08009a79
 8009068:	08009a79 	.word	0x08009a79
 800906c:	08009a79 	.word	0x08009a79
 8009070:	08009a79 	.word	0x08009a79
 8009074:	08009a79 	.word	0x08009a79
 8009078:	08009a79 	.word	0x08009a79
 800907c:	08009a79 	.word	0x08009a79
 8009080:	08009a79 	.word	0x08009a79
 8009084:	08009a79 	.word	0x08009a79
 8009088:	08009a79 	.word	0x08009a79
 800908c:	08009a79 	.word	0x08009a79
 8009090:	08009a79 	.word	0x08009a79
 8009094:	08009a79 	.word	0x08009a79
 8009098:	08009a79 	.word	0x08009a79
 800909c:	08009a79 	.word	0x08009a79
 80090a0:	08009a79 	.word	0x08009a79
 80090a4:	08009a79 	.word	0x08009a79
 80090a8:	08009a79 	.word	0x08009a79
 80090ac:	08009a79 	.word	0x08009a79
 80090b0:	08009a79 	.word	0x08009a79
 80090b4:	08009a79 	.word	0x08009a79
 80090b8:	080097c3 	.word	0x080097c3
 80090bc:	08009a79 	.word	0x08009a79
 80090c0:	08009a79 	.word	0x08009a79
 80090c4:	08009a79 	.word	0x08009a79
 80090c8:	08009a79 	.word	0x08009a79
 80090cc:	0800968b 	.word	0x0800968b
 80090d0:	080097e5 	.word	0x080097e5
 80090d4:	08009729 	.word	0x08009729
 80090d8:	08009a79 	.word	0x08009a79
 80090dc:	08009a79 	.word	0x08009a79
 80090e0:	08009a79 	.word	0x08009a79
 80090e4:	08009a79 	.word	0x08009a79
 80090e8:	08009a79 	.word	0x08009a79
 80090ec:	08009a79 	.word	0x08009a79
 80090f0:	08009a79 	.word	0x08009a79
 80090f4:	08009a79 	.word	0x08009a79
 80090f8:	08009a79 	.word	0x08009a79
 80090fc:	08009a79 	.word	0x08009a79
 8009100:	08009a79 	.word	0x08009a79
 8009104:	08009a79 	.word	0x08009a79
 8009108:	08009a79 	.word	0x08009a79
 800910c:	08009a79 	.word	0x08009a79
 8009110:	08009a79 	.word	0x08009a79
 8009114:	08009a79 	.word	0x08009a79
 8009118:	08009a79 	.word	0x08009a79
 800911c:	08009a79 	.word	0x08009a79
 8009120:	08009a79 	.word	0x08009a79
 8009124:	08009a79 	.word	0x08009a79
 8009128:	08009a79 	.word	0x08009a79
 800912c:	08009a79 	.word	0x08009a79
 8009130:	08009a79 	.word	0x08009a79
 8009134:	08009a79 	.word	0x08009a79
 8009138:	080099e5 	.word	0x080099e5
 800913c:	08009a09 	.word	0x08009a09
 8009140:	08009a09 	.word	0x08009a09
 8009144:	08009a09 	.word	0x08009a09
 8009148:	08009a09 	.word	0x08009a09
 800914c:	08009a09 	.word	0x08009a09
 8009150:	08009a09 	.word	0x08009a09
 8009154:	08009a09 	.word	0x08009a09
 8009158:	08009a09 	.word	0x08009a09
 800915c:	08009a09 	.word	0x08009a09
 8009160:	08009a09 	.word	0x08009a09
 8009164:	08009a09 	.word	0x08009a09
 8009168:	08009a09 	.word	0x08009a09
 800916c:	080098f1 	.word	0x080098f1
 8009170:	0800985f 	.word	0x0800985f
 8009174:	0800996b 	.word	0x0800996b
 8009178:	08009a79 	.word	0x08009a79
 800917c:	08009a79 	.word	0x08009a79
 8009180:	08009a79 	.word	0x08009a79
 8009184:	08009a79 	.word	0x08009a79
 8009188:	08009a79 	.word	0x08009a79
 800918c:	08009a79 	.word	0x08009a79
 8009190:	08009a79 	.word	0x08009a79
 8009194:	08009a79 	.word	0x08009a79
 8009198:	08009a79 	.word	0x08009a79
 800919c:	08009a79 	.word	0x08009a79
 80091a0:	08009a79 	.word	0x08009a79
 80091a4:	08009a79 	.word	0x08009a79
 80091a8:	08009a79 	.word	0x08009a79
 80091ac:	08009a79 	.word	0x08009a79
 80091b0:	08009a79 	.word	0x08009a79
 80091b4:	08009a79 	.word	0x08009a79
 80091b8:	08009a79 	.word	0x08009a79
 80091bc:	08009a55 	.word	0x08009a55
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80091c0:	f107 0308 	add.w	r3, r7, #8
 80091c4:	4619      	mov	r1, r3
 80091c6:	4844      	ldr	r0, [pc, #272]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 80091c8:	f000 fdcf 	bl	8009d6a <TM_GPS_INT_Atoi>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4a47      	ldr	r2, [pc, #284]	; (80092f0 <TM_GPS_INT_CheckTerm+0x354>)
 80091d4:	fba2 2303 	umull	r2, r3, r2, r3
 80091d8:	095b      	lsrs	r3, r3, #5
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e2:	4b44      	ldr	r3, [pc, #272]	; (80092f4 <TM_GPS_INT_CheckTerm+0x358>)
 80091e4:	edc3 7a00 	vstr	s15, [r3]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 80091e8:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <TM_GPS_INT_CheckTerm+0x358>)
 80091ea:	ed93 7a00 	vldr	s14, [r3]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4b3f      	ldr	r3, [pc, #252]	; (80092f0 <TM_GPS_INT_CheckTerm+0x354>)
 80091f2:	fba3 1302 	umull	r1, r3, r3, r2
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	2164      	movs	r1, #100	; 0x64
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	ee07 3a90 	vmov	s15, r3
 8009204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009208:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 80092f8 <TM_GPS_INT_CheckTerm+0x35c>
 800920c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009214:	4b37      	ldr	r3, [pc, #220]	; (80092f4 <TM_GPS_INT_CheckTerm+0x358>)
 8009216:	edc3 7a00 	vstr	s15, [r3]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	3301      	adds	r3, #1
 800921e:	73fb      	strb	r3, [r7, #15]
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	4a2d      	ldr	r2, [pc, #180]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 8009224:	4413      	add	r3, r2
 8009226:	f107 0208 	add.w	r2, r7, #8
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fd9c 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	4618      	mov	r0, r3
 800923a:	f7f7 f973 	bl	8000524 <__aeabi_ui2d>
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	4619      	mov	r1, r3
 8009246:	200a      	movs	r0, #10
 8009248:	f000 fdbc 	bl	8009dc4 <TM_GPS_INT_Pow>
 800924c:	4603      	mov	r3, r0
 800924e:	4618      	mov	r0, r3
 8009250:	f7f7 f968 	bl	8000524 <__aeabi_ui2d>
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	4b28      	ldr	r3, [pc, #160]	; (80092fc <TM_GPS_INT_CheckTerm+0x360>)
 800925a:	f7f7 f9dd 	bl	8000618 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4620      	mov	r0, r4
 8009264:	4629      	mov	r1, r5
 8009266:	f7f7 fb01 	bl	800086c <__aeabi_ddiv>
 800926a:	4603      	mov	r3, r0
 800926c:	460c      	mov	r4, r1
 800926e:	4625      	mov	r5, r4
 8009270:	461c      	mov	r4, r3
 8009272:	4b20      	ldr	r3, [pc, #128]	; (80092f4 <TM_GPS_INT_CheckTerm+0x358>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f7f7 f976 	bl	8000568 <__aeabi_f2d>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4620      	mov	r0, r4
 8009282:	4629      	mov	r1, r5
 8009284:	f7f7 f812 	bl	80002ac <__adddf3>
 8009288:	4603      	mov	r3, r0
 800928a:	460c      	mov	r4, r1
 800928c:	4618      	mov	r0, r3
 800928e:	4621      	mov	r1, r4
 8009290:	f7f7 fcba 	bl	8000c08 <__aeabi_d2f>
 8009294:	4602      	mov	r2, r0
 8009296:	4b17      	ldr	r3, [pc, #92]	; (80092f4 <TM_GPS_INT_CheckTerm+0x358>)
 8009298:	601a      	str	r2, [r3, #0]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 800929a:	4b19      	ldr	r3, [pc, #100]	; (8009300 <TM_GPS_INT_CheckTerm+0x364>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	4a17      	ldr	r2, [pc, #92]	; (8009300 <TM_GPS_INT_CheckTerm+0x364>)
 80092a4:	6013      	str	r3, [r2, #0]
			break;
 80092a6:	e3ea      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 80092a8:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <TM_GPS_INT_CheckTerm+0x33c>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2b53      	cmp	r3, #83	; 0x53
 80092ae:	d107      	bne.n	80092c0 <TM_GPS_INT_CheckTerm+0x324>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 80092b0:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <TM_GPS_INT_CheckTerm+0x358>)
 80092b2:	edd3 7a00 	vldr	s15, [r3]
 80092b6:	eef1 7a67 	vneg.f32	s15, s15
 80092ba:	4b0e      	ldr	r3, [pc, #56]	; (80092f4 <TM_GPS_INT_CheckTerm+0x358>)
 80092bc:	edc3 7a00 	vstr	s15, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 80092c0:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <TM_GPS_INT_CheckTerm+0x364>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c8:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <TM_GPS_INT_CheckTerm+0x364>)
 80092ca:	6013      	str	r3, [r2, #0]
			break;
 80092cc:	e3d7      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
 80092ce:	bf00      	nop
 80092d0:	2000020f 	.word	0x2000020f
 80092d4:	0801154c 	.word	0x0801154c
 80092d8:	20000200 	.word	0x20000200
 80092dc:	20000009 	.word	0x20000009
 80092e0:	08011554 	.word	0x08011554
 80092e4:	0801155c 	.word	0x0801155c
 80092e8:	08011564 	.word	0x08011564
 80092ec:	20000340 	.word	0x20000340
 80092f0:	51eb851f 	.word	0x51eb851f
 80092f4:	2000021c 	.word	0x2000021c
 80092f8:	42700000 	.word	0x42700000
 80092fc:	404e0000 	.word	0x404e0000
 8009300:	20000214 	.word	0x20000214
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8009304:	f107 0308 	add.w	r3, r7, #8
 8009308:	4619      	mov	r1, r3
 800930a:	48a9      	ldr	r0, [pc, #676]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 800930c:	f000 fd2d 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4aa7      	ldr	r2, [pc, #668]	; (80095b4 <TM_GPS_INT_CheckTerm+0x618>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	4ba4      	ldr	r3, [pc, #656]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 8009328:	edc3 7a01 	vstr	s15, [r3, #4]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 800932c:	4ba2      	ldr	r3, [pc, #648]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 800932e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	4b9f      	ldr	r3, [pc, #636]	; (80095b4 <TM_GPS_INT_CheckTerm+0x618>)
 8009336:	fba3 1302 	umull	r1, r3, r3, r2
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2164      	movs	r1, #100	; 0x64
 800933e:	fb01 f303 	mul.w	r3, r1, r3
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934c:	ed9f 6a9b 	vldr	s12, [pc, #620]	; 80095bc <TM_GPS_INT_CheckTerm+0x620>
 8009350:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009358:	4b97      	ldr	r3, [pc, #604]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 800935a:	edc3 7a01 	vstr	s15, [r3, #4]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	3301      	adds	r3, #1
 8009362:	73fb      	strb	r3, [r7, #15]
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	4a92      	ldr	r2, [pc, #584]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 8009368:	4413      	add	r3, r2
 800936a:	f107 0208 	add.w	r2, r7, #8
 800936e:	4611      	mov	r1, r2
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fcfa 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009376:	4603      	mov	r3, r0
 8009378:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4618      	mov	r0, r3
 800937e:	f7f7 f8d1 	bl	8000524 <__aeabi_ui2d>
 8009382:	4604      	mov	r4, r0
 8009384:	460d      	mov	r5, r1
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	4619      	mov	r1, r3
 800938a:	200a      	movs	r0, #10
 800938c:	f000 fd1a 	bl	8009dc4 <TM_GPS_INT_Pow>
 8009390:	4603      	mov	r3, r0
 8009392:	4618      	mov	r0, r3
 8009394:	f7f7 f8c6 	bl	8000524 <__aeabi_ui2d>
 8009398:	f04f 0200 	mov.w	r2, #0
 800939c:	4b88      	ldr	r3, [pc, #544]	; (80095c0 <TM_GPS_INT_CheckTerm+0x624>)
 800939e:	f7f7 f93b 	bl	8000618 <__aeabi_dmul>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	f7f7 fa5f 	bl	800086c <__aeabi_ddiv>
 80093ae:	4603      	mov	r3, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	4625      	mov	r5, r4
 80093b4:	461c      	mov	r4, r3
 80093b6:	4b80      	ldr	r3, [pc, #512]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f7 f8d4 	bl	8000568 <__aeabi_f2d>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4620      	mov	r0, r4
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7f6 ff70 	bl	80002ac <__adddf3>
 80093cc:	4603      	mov	r3, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	4618      	mov	r0, r3
 80093d2:	4621      	mov	r1, r4
 80093d4:	f7f7 fc18 	bl	8000c08 <__aeabi_d2f>
 80093d8:	4602      	mov	r2, r0
 80093da:	4b77      	ldr	r3, [pc, #476]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 80093dc:	605a      	str	r2, [r3, #4]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 80093de:	4b79      	ldr	r3, [pc, #484]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f043 0302 	orr.w	r3, r3, #2
 80093e6:	4a77      	ldr	r2, [pc, #476]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 80093e8:	6013      	str	r3, [r2, #0]
			break;
 80093ea:	e348      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 80093ec:	4b70      	ldr	r3, [pc, #448]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b57      	cmp	r3, #87	; 0x57
 80093f2:	d107      	bne.n	8009404 <TM_GPS_INT_CheckTerm+0x468>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 80093f4:	4b70      	ldr	r3, [pc, #448]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 80093f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80093fa:	eef1 7a67 	vneg.f32	s15, s15
 80093fe:	4b6e      	ldr	r3, [pc, #440]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 8009400:	edc3 7a01 	vstr	s15, [r3, #4]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8009404:	4b6f      	ldr	r3, [pc, #444]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f043 0320 	orr.w	r3, r3, #32
 800940c:	4a6d      	ldr	r2, [pc, #436]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 800940e:	6013      	str	r3, [r2, #0]
			break;
 8009410:	e335      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8009412:	f107 0308 	add.w	r3, r7, #8
 8009416:	4619      	mov	r1, r3
 8009418:	4865      	ldr	r0, [pc, #404]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 800941a:	f000 fca6 	bl	8009d6a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	b2da      	uxtb	r2, r3
 8009422:	4b65      	ldr	r3, [pc, #404]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 8009424:	731a      	strb	r2, [r3, #12]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 8009426:	4b67      	ldr	r3, [pc, #412]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f043 0304 	orr.w	r3, r3, #4
 800942e:	4a65      	ldr	r2, [pc, #404]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 8009430:	6013      	str	r3, [r2, #0]
			break;
 8009432:	e324      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8009434:	f107 0308 	add.w	r3, r7, #8
 8009438:	4619      	mov	r1, r3
 800943a:	485d      	ldr	r0, [pc, #372]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 800943c:	f000 fc95 	bl	8009d6a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	b2da      	uxtb	r2, r3
 8009444:	4b5c      	ldr	r3, [pc, #368]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 8009446:	735a      	strb	r2, [r3, #13]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 8009448:	4b5e      	ldr	r3, [pc, #376]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f043 0308 	orr.w	r3, r3, #8
 8009450:	4a5c      	ldr	r2, [pc, #368]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 8009452:	6013      	str	r3, [r2, #0]
			break;
 8009454:	e313      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 8009456:	4b56      	ldr	r3, [pc, #344]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b2d      	cmp	r3, #45	; 0x2d
 800945c:	d156      	bne.n	800950c <TM_GPS_INT_CheckTerm+0x570>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 800945e:	f107 0308 	add.w	r3, r7, #8
 8009462:	4619      	mov	r1, r3
 8009464:	4858      	ldr	r0, [pc, #352]	; (80095c8 <TM_GPS_INT_CheckTerm+0x62c>)
 8009466:	f000 fc80 	bl	8009d6a <TM_GPS_INT_Atoi>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009478:	4b4f      	ldr	r3, [pc, #316]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 800947a:	edc3 7a02 	vstr	s15, [r3, #8]
				
				count++;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	3301      	adds	r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	3301      	adds	r3, #1
 8009488:	73fb      	strb	r3, [r7, #15]
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	4a48      	ldr	r2, [pc, #288]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 800948e:	4413      	add	r3, r2
 8009490:	f107 0208 	add.w	r2, r7, #8
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fc67 	bl	8009d6a <TM_GPS_INT_Atoi>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f7 f83e 	bl	8000524 <__aeabi_ui2d>
 80094a8:	4604      	mov	r4, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	4619      	mov	r1, r3
 80094b0:	200a      	movs	r0, #10
 80094b2:	f000 fc87 	bl	8009dc4 <TM_GPS_INT_Pow>
 80094b6:	4603      	mov	r3, r0
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7f7 f833 	bl	8000524 <__aeabi_ui2d>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4620      	mov	r0, r4
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7f7 f9d1 	bl	800086c <__aeabi_ddiv>
 80094ca:	4603      	mov	r3, r0
 80094cc:	460c      	mov	r4, r1
 80094ce:	4625      	mov	r5, r4
 80094d0:	461c      	mov	r4, r3
 80094d2:	4b39      	ldr	r3, [pc, #228]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f7 f846 	bl	8000568 <__aeabi_f2d>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4620      	mov	r0, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	f7f6 fee2 	bl	80002ac <__adddf3>
 80094e8:	4603      	mov	r3, r0
 80094ea:	460c      	mov	r4, r1
 80094ec:	4618      	mov	r0, r3
 80094ee:	4621      	mov	r1, r4
 80094f0:	f7f7 fb8a 	bl	8000c08 <__aeabi_d2f>
 80094f4:	4602      	mov	r2, r0
 80094f6:	4b30      	ldr	r3, [pc, #192]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 80094f8:	609a      	str	r2, [r3, #8]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 80094fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8009500:	eef1 7a67 	vneg.f32	s15, s15
 8009504:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 8009506:	edc3 7a02 	vstr	s15, [r3, #8]
 800950a:	e04a      	b.n	80095a2 <TM_GPS_INT_CheckTerm+0x606>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4619      	mov	r1, r3
 8009512:	4827      	ldr	r0, [pc, #156]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 8009514:	f000 fc29 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 8009528:	edc3 7a02 	vstr	s15, [r3, #8]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	3301      	adds	r3, #1
 8009530:	73fb      	strb	r3, [r7, #15]
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4a1e      	ldr	r2, [pc, #120]	; (80095b0 <TM_GPS_INT_CheckTerm+0x614>)
 8009536:	4413      	add	r3, r2
 8009538:	f107 0208 	add.w	r2, r7, #8
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fc13 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4618      	mov	r0, r3
 800954c:	f7f6 ffea 	bl	8000524 <__aeabi_ui2d>
 8009550:	4604      	mov	r4, r0
 8009552:	460d      	mov	r5, r1
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	4619      	mov	r1, r3
 8009558:	200a      	movs	r0, #10
 800955a:	f000 fc33 	bl	8009dc4 <TM_GPS_INT_Pow>
 800955e:	4603      	mov	r3, r0
 8009560:	4618      	mov	r0, r3
 8009562:	f7f6 ffdf 	bl	8000524 <__aeabi_ui2d>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	4620      	mov	r0, r4
 800956c:	4629      	mov	r1, r5
 800956e:	f7f7 f97d 	bl	800086c <__aeabi_ddiv>
 8009572:	4603      	mov	r3, r0
 8009574:	460c      	mov	r4, r1
 8009576:	4625      	mov	r5, r4
 8009578:	461c      	mov	r4, r3
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	4618      	mov	r0, r3
 8009580:	f7f6 fff2 	bl	8000568 <__aeabi_f2d>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4620      	mov	r0, r4
 800958a:	4629      	mov	r1, r5
 800958c:	f7f6 fe8e 	bl	80002ac <__adddf3>
 8009590:	4603      	mov	r3, r0
 8009592:	460c      	mov	r4, r1
 8009594:	4618      	mov	r0, r3
 8009596:	4621      	mov	r1, r4
 8009598:	f7f7 fb36 	bl	8000c08 <__aeabi_d2f>
 800959c:	4602      	mov	r2, r0
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <TM_GPS_INT_CheckTerm+0x61c>)
 80095a0:	609a      	str	r2, [r3, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f043 0310 	orr.w	r3, r3, #16
 80095aa:	4a06      	ldr	r2, [pc, #24]	; (80095c4 <TM_GPS_INT_CheckTerm+0x628>)
 80095ac:	6013      	str	r3, [r2, #0]
			break;
 80095ae:	e266      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
 80095b0:	20000200 	.word	0x20000200
 80095b4:	51eb851f 	.word	0x51eb851f
 80095b8:	2000021c 	.word	0x2000021c
 80095bc:	42700000 	.word	0x42700000
 80095c0:	404e0000 	.word	0x404e0000
 80095c4:	20000214 	.word	0x20000214
 80095c8:	20000201 	.word	0x20000201
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80095cc:	f107 0308 	add.w	r3, r7, #8
 80095d0:	4619      	mov	r1, r3
 80095d2:	48c1      	ldr	r0, [pc, #772]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 80095d4:	f000 fbc9 	bl	8009d6a <TM_GPS_INT_Atoi>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	4bbf      	ldr	r3, [pc, #764]	; (80098dc <TM_GPS_INT_CheckTerm+0x940>)
 80095e0:	fba3 1302 	umull	r1, r3, r3, r2
 80095e4:	095b      	lsrs	r3, r3, #5
 80095e6:	2164      	movs	r1, #100	; 0x64
 80095e8:	fb01 f303 	mul.w	r3, r1, r3
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	4bbb      	ldr	r3, [pc, #748]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 80095f2:	741a      	strb	r2, [r3, #16]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fe:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 80098e4 <TM_GPS_INT_CheckTerm+0x948>
 8009602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800960a:	ee17 2a90 	vmov	r2, s15
 800960e:	4bb3      	ldr	r3, [pc, #716]	; (80098dc <TM_GPS_INT_CheckTerm+0x940>)
 8009610:	fb83 1302 	smull	r1, r3, r3, r2
 8009614:	1159      	asrs	r1, r3, #5
 8009616:	17d3      	asrs	r3, r2, #31
 8009618:	1acb      	subs	r3, r1, r3
 800961a:	2164      	movs	r1, #100	; 0x64
 800961c:	fb01 f303 	mul.w	r3, r1, r3
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	b2da      	uxtb	r2, r3
 8009624:	4bae      	ldr	r3, [pc, #696]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 8009626:	73da      	strb	r2, [r3, #15]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009632:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80098e8 <TM_GPS_INT_CheckTerm+0x94c>
 8009636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800963a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800963e:	ee17 2a90 	vmov	r2, s15
 8009642:	4ba6      	ldr	r3, [pc, #664]	; (80098dc <TM_GPS_INT_CheckTerm+0x940>)
 8009644:	fb83 1302 	smull	r1, r3, r3, r2
 8009648:	1159      	asrs	r1, r3, #5
 800964a:	17d3      	asrs	r3, r2, #31
 800964c:	1acb      	subs	r3, r1, r3
 800964e:	2164      	movs	r1, #100	; 0x64
 8009650:	fb01 f303 	mul.w	r3, r1, r3
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	b2da      	uxtb	r2, r3
 8009658:	4ba1      	ldr	r3, [pc, #644]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 800965a:	739a      	strb	r2, [r3, #14]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	3301      	adds	r3, #1
 8009660:	73fb      	strb	r3, [r7, #15]
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4a9c      	ldr	r2, [pc, #624]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 8009666:	4413      	add	r3, r2
 8009668:	f107 0208 	add.w	r2, r7, #8
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fb7b 	bl	8009d6a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	b29a      	uxth	r2, r3
 8009678:	4b99      	ldr	r3, [pc, #612]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 800967a:	825a      	strh	r2, [r3, #18]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 800967c:	4b9b      	ldr	r3, [pc, #620]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009684:	4a99      	ldr	r2, [pc, #612]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 8009686:	6013      	str	r3, [r2, #0]
			break;
 8009688:	e1f9      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800968a:	f107 0308 	add.w	r3, r7, #8
 800968e:	4619      	mov	r1, r3
 8009690:	4891      	ldr	r0, [pc, #580]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 8009692:	f000 fb6a 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	ee07 3a90 	vmov	s15, r3
 80096a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a4:	4b8e      	ldr	r3, [pc, #568]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 80096a6:	edc3 7a06 	vstr	s15, [r3, #24]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	3301      	adds	r3, #1
 80096ae:	73fb      	strb	r3, [r7, #15]
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	4a89      	ldr	r2, [pc, #548]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 80096b4:	4413      	add	r3, r2
 80096b6:	f107 0208 	add.w	r2, r7, #8
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fb54 	bl	8009d6a <TM_GPS_INT_Atoi>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	ee07 3a90 	vmov	s15, r3
 80096cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d0:	ee17 0a90 	vmov	r0, s15
 80096d4:	f7f6 ff48 	bl	8000568 <__aeabi_f2d>
 80096d8:	4604      	mov	r4, r0
 80096da:	460d      	mov	r5, r1
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	4619      	mov	r1, r3
 80096e0:	200a      	movs	r0, #10
 80096e2:	f000 fb6f 	bl	8009dc4 <TM_GPS_INT_Pow>
 80096e6:	4603      	mov	r3, r0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7f6 ff1b 	bl	8000524 <__aeabi_ui2d>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4620      	mov	r0, r4
 80096f4:	4629      	mov	r1, r5
 80096f6:	f7f7 f8b9 	bl	800086c <__aeabi_ddiv>
 80096fa:	4603      	mov	r3, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	4618      	mov	r0, r3
 8009700:	4621      	mov	r1, r4
 8009702:	f7f7 fa81 	bl	8000c08 <__aeabi_d2f>
 8009706:	ee07 0a10 	vmov	s14, r0
 800970a:	4b75      	ldr	r3, [pc, #468]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 800970c:	edd3 7a06 	vldr	s15, [r3, #24]
 8009710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009714:	4b72      	ldr	r3, [pc, #456]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 8009716:	edc3 7a06 	vstr	s15, [r3, #24]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 800971a:	4b74      	ldr	r3, [pc, #464]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009722:	4a72      	ldr	r2, [pc, #456]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 8009724:	6013      	str	r3, [r2, #0]
			break;
 8009726:	e1aa      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8009728:	f107 0308 	add.w	r3, r7, #8
 800972c:	4619      	mov	r1, r3
 800972e:	486a      	ldr	r0, [pc, #424]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 8009730:	f000 fb1b 	bl	8009d6a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	4b69      	ldr	r3, [pc, #420]	; (80098dc <TM_GPS_INT_CheckTerm+0x940>)
 8009738:	fba3 1302 	umull	r1, r3, r3, r2
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	2164      	movs	r1, #100	; 0x64
 8009740:	fb01 f303 	mul.w	r3, r1, r3
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	b2da      	uxtb	r2, r3
 8009748:	4b65      	ldr	r3, [pc, #404]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 800974a:	759a      	strb	r2, [r3, #22]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009756:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80098e4 <TM_GPS_INT_CheckTerm+0x948>
 800975a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800975e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009762:	ee17 2a90 	vmov	r2, s15
 8009766:	4b5d      	ldr	r3, [pc, #372]	; (80098dc <TM_GPS_INT_CheckTerm+0x940>)
 8009768:	fb83 1302 	smull	r1, r3, r3, r2
 800976c:	1159      	asrs	r1, r3, #5
 800976e:	17d3      	asrs	r3, r2, #31
 8009770:	1acb      	subs	r3, r1, r3
 8009772:	2164      	movs	r1, #100	; 0x64
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	b2da      	uxtb	r2, r3
 800977c:	4b58      	ldr	r3, [pc, #352]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 800977e:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80098e8 <TM_GPS_INT_CheckTerm+0x94c>
 800978e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009796:	ee17 2a90 	vmov	r2, s15
 800979a:	4b50      	ldr	r3, [pc, #320]	; (80098dc <TM_GPS_INT_CheckTerm+0x940>)
 800979c:	fb83 1302 	smull	r1, r3, r3, r2
 80097a0:	1159      	asrs	r1, r3, #5
 80097a2:	17d3      	asrs	r3, r2, #31
 80097a4:	1acb      	subs	r3, r1, r3
 80097a6:	2164      	movs	r1, #100	; 0x64
 80097a8:	fb01 f303 	mul.w	r3, r1, r3
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	4b4b      	ldr	r3, [pc, #300]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 80097b2:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 80097b4:	4b4d      	ldr	r3, [pc, #308]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097bc:	4a4b      	ldr	r2, [pc, #300]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 80097be:	6013      	str	r3, [r2, #0]
			break;
 80097c0:	e15d      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 80097c2:	4b45      	ldr	r3, [pc, #276]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b41      	cmp	r3, #65	; 0x41
 80097c8:	bf0c      	ite	eq
 80097ca:	2301      	moveq	r3, #1
 80097cc:	2300      	movne	r3, #0
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	461a      	mov	r2, r3
 80097d2:	4b43      	ldr	r3, [pc, #268]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 80097d4:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 80097d6:	4b45      	ldr	r3, [pc, #276]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097de:	4a43      	ldr	r2, [pc, #268]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 80097e0:	6013      	str	r3, [r2, #0]
			break;
 80097e2:	e14c      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	4619      	mov	r1, r3
 80097ea:	483b      	ldr	r0, [pc, #236]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 80097ec:	f000 fabd 	bl	8009d6a <TM_GPS_INT_Atoi>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fe:	4b38      	ldr	r3, [pc, #224]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 8009800:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	3301      	adds	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	4a32      	ldr	r2, [pc, #200]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 800980e:	4413      	add	r3, r2
 8009810:	f107 0208 	add.w	r2, r7, #8
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f000 faa7 	bl	8009d6a <TM_GPS_INT_Atoi>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	ee07 3a90 	vmov	s15, r3
 8009826:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	4619      	mov	r1, r3
 800982e:	200a      	movs	r0, #10
 8009830:	f000 fac8 	bl	8009dc4 <TM_GPS_INT_Pow>
 8009834:	ee07 0a90 	vmov	s15, r0
 8009838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8009840:	4b27      	ldr	r3, [pc, #156]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 8009842:	edd3 7a08 	vldr	s15, [r3, #32]
 8009846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800984a:	4b25      	ldr	r3, [pc, #148]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 800984c:	edc3 7a08 	vstr	s15, [r3, #32]
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 8009850:	4b26      	ldr	r3, [pc, #152]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009858:	4a24      	ldr	r2, [pc, #144]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 800985a:	6013      	str	r3, [r2, #0]
			break;
 800985c:	e10f      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800985e:	f107 0308 	add.w	r3, r7, #8
 8009862:	4619      	mov	r1, r3
 8009864:	481c      	ldr	r0, [pc, #112]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 8009866:	f000 fa80 	bl	8009d6a <TM_GPS_INT_Atoi>
 800986a:	4603      	mov	r3, r0
 800986c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	ee07 3a90 	vmov	s15, r3
 8009874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009878:	4b19      	ldr	r3, [pc, #100]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 800987a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	3301      	adds	r3, #1
 8009882:	73fb      	strb	r3, [r7, #15]
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	4a14      	ldr	r2, [pc, #80]	; (80098d8 <TM_GPS_INT_CheckTerm+0x93c>)
 8009888:	4413      	add	r3, r2
 800988a:	f107 0208 	add.w	r2, r7, #8
 800988e:	4611      	mov	r1, r2
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fa6a 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	ee07 3a90 	vmov	s15, r3
 80098a0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	4619      	mov	r1, r3
 80098a8:	200a      	movs	r0, #10
 80098aa:	f000 fa8b 	bl	8009dc4 <TM_GPS_INT_Pow>
 80098ae:	ee07 0a90 	vmov	s15, r0
 80098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b6:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80098ba:	4b09      	ldr	r3, [pc, #36]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 80098bc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80098c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098c4:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <TM_GPS_INT_CheckTerm+0x944>)
 80098c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 80098ca:	4b08      	ldr	r3, [pc, #32]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80098d2:	4a06      	ldr	r2, [pc, #24]	; (80098ec <TM_GPS_INT_CheckTerm+0x950>)
 80098d4:	6013      	str	r3, [r2, #0]
			break;
 80098d6:	e0d2      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
 80098d8:	20000200 	.word	0x20000200
 80098dc:	51eb851f 	.word	0x51eb851f
 80098e0:	2000021c 	.word	0x2000021c
 80098e4:	3c23d70a 	.word	0x3c23d70a
 80098e8:	38d1b717 	.word	0x38d1b717
 80098ec:	20000214 	.word	0x20000214
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80098f0:	f107 0308 	add.w	r3, r7, #8
 80098f4:	4619      	mov	r1, r3
 80098f6:	48af      	ldr	r0, [pc, #700]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 80098f8:	f000 fa37 	bl	8009d6a <TM_GPS_INT_Atoi>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990a:	4bab      	ldr	r3, [pc, #684]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 800990c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	3301      	adds	r3, #1
 8009914:	73fb      	strb	r3, [r7, #15]
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	4aa6      	ldr	r2, [pc, #664]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 800991a:	4413      	add	r3, r2
 800991c:	f107 0208 	add.w	r2, r7, #8
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fa21 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	4619      	mov	r1, r3
 800993a:	200a      	movs	r0, #10
 800993c:	f000 fa42 	bl	8009dc4 <TM_GPS_INT_Pow>
 8009940:	ee07 0a90 	vmov	s15, r0
 8009944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009948:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800994c:	4b9a      	ldr	r3, [pc, #616]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 800994e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009956:	4b98      	ldr	r3, [pc, #608]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009958:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 800995c:	4b97      	ldr	r3, [pc, #604]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009964:	4a95      	ldr	r2, [pc, #596]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 8009966:	6013      	str	r3, [r2, #0]
			break;
 8009968:	e089      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800996a:	f107 0308 	add.w	r3, r7, #8
 800996e:	4619      	mov	r1, r3
 8009970:	4890      	ldr	r0, [pc, #576]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 8009972:	f000 f9fa 	bl	8009d6a <TM_GPS_INT_Atoi>
 8009976:	4603      	mov	r3, r0
 8009978:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009984:	4b8c      	ldr	r3, [pc, #560]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009986:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	3301      	adds	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	4a88      	ldr	r2, [pc, #544]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 8009994:	4413      	add	r3, r2
 8009996:	f107 0208 	add.w	r2, r7, #8
 800999a:	4611      	mov	r1, r2
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f9e4 	bl	8009d6a <TM_GPS_INT_Atoi>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	ee07 3a90 	vmov	s15, r3
 80099ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	4619      	mov	r1, r3
 80099b4:	200a      	movs	r0, #10
 80099b6:	f000 fa05 	bl	8009dc4 <TM_GPS_INT_Pow>
 80099ba:	ee07 0a90 	vmov	s15, r0
 80099be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c2:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80099c6:	4b7c      	ldr	r3, [pc, #496]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 80099c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80099cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099d0:	4b79      	ldr	r3, [pc, #484]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 80099d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 80099d6:	4b79      	ldr	r3, [pc, #484]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099de:	4a77      	ldr	r2, [pc, #476]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 80099e0:	6013      	str	r3, [r2, #0]
			break;
 80099e2:	e04c      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80099e4:	f107 0308 	add.w	r3, r7, #8
 80099e8:	4619      	mov	r1, r3
 80099ea:	4872      	ldr	r0, [pc, #456]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 80099ec:	f000 f9bd 	bl	8009d6a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	4b70      	ldr	r3, [pc, #448]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 80099f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 80099fa:	4b70      	ldr	r3, [pc, #448]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a02:	4a6e      	ldr	r2, [pc, #440]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 8009a04:	6013      	str	r3, [r2, #0]
			break;
 8009a06:	e03a      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4869      	ldr	r0, [pc, #420]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 8009a10:	f000 f9ab 	bl	8009d6a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	4b6a      	ldr	r3, [pc, #424]	; (8009bc0 <TM_GPS_INT_CheckTerm+0xc24>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	3b03      	subs	r3, #3
 8009a1c:	b2d1      	uxtb	r1, r2
 8009a1e:	4a66      	ldr	r2, [pc, #408]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009a20:	4413      	add	r3, r2
 8009a22:	460a      	mov	r2, r1
 8009a24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			ids_count++;							/* Increase number of satellites found */
 8009a28:	4b66      	ldr	r3, [pc, #408]	; (8009bc4 <TM_GPS_INT_CheckTerm+0xc28>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	4b64      	ldr	r3, [pc, #400]	; (8009bc4 <TM_GPS_INT_CheckTerm+0xc28>)
 8009a32:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 8009a34:	4b60      	ldr	r3, [pc, #384]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009a36:	7b1a      	ldrb	r2, [r3, #12]
 8009a38:	4b62      	ldr	r3, [pc, #392]	; (8009bc4 <TM_GPS_INT_CheckTerm+0xc28>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d11d      	bne.n	8009a7c <TM_GPS_INT_CheckTerm+0xae0>
				ids_count = 0;						/* Reset count, we have all statements */
 8009a40:	4b60      	ldr	r3, [pc, #384]	; (8009bc4 <TM_GPS_INT_CheckTerm+0xc28>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8009a46:	4b5d      	ldr	r3, [pc, #372]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a4e:	4a5b      	ldr	r2, [pc, #364]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 8009a50:	6013      	str	r3, [r2, #0]
			}
			break;
 8009a52:	e013      	b.n	8009a7c <TM_GPS_INT_CheckTerm+0xae0>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8009a54:	f107 0308 	add.w	r3, r7, #8
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4856      	ldr	r0, [pc, #344]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 8009a5c:	f000 f985 	bl	8009d6a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	4b54      	ldr	r3, [pc, #336]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 8009a6a:	4b54      	ldr	r3, [pc, #336]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a72:	4a52      	ldr	r2, [pc, #328]	; (8009bbc <TM_GPS_INT_CheckTerm+0xc20>)
 8009a74:	6013      	str	r3, [r2, #0]
			break;
 8009a76:	e002      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
#endif
		default: 
			break;
 8009a78:	bf00      	nop
 8009a7a:	e000      	b.n	8009a7e <TM_GPS_INT_CheckTerm+0xae2>
			break;
 8009a7c:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8009a7e:	4b52      	ldr	r3, [pc, #328]	; (8009bc8 <TM_GPS_INT_CheckTerm+0xc2c>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	f040 8090 	bne.w	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
		if (GPS_Term_Number == 1) {
 8009a88:	4b4d      	ldr	r3, [pc, #308]	; (8009bc0 <TM_GPS_INT_CheckTerm+0xc24>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d109      	bne.n	8009aa4 <TM_GPS_INT_CheckTerm+0xb08>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8009a90:	f107 0308 	add.w	r3, r7, #8
 8009a94:	4619      	mov	r1, r3
 8009a96:	4847      	ldr	r0, [pc, #284]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 8009a98:	f000 f967 	bl	8009d6a <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	4b4a      	ldr	r3, [pc, #296]	; (8009bcc <TM_GPS_INT_CheckTerm+0xc30>)
 8009aa2:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8009aa4:	4b46      	ldr	r3, [pc, #280]	; (8009bc0 <TM_GPS_INT_CheckTerm+0xc24>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d109      	bne.n	8009ac0 <TM_GPS_INT_CheckTerm+0xb24>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 8009aac:	f107 0308 	add.w	r3, r7, #8
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4840      	ldr	r0, [pc, #256]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 8009ab4:	f000 f959 	bl	8009d6a <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	4b44      	ldr	r3, [pc, #272]	; (8009bd0 <TM_GPS_INT_CheckTerm+0xc34>)
 8009abe:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8009ac0:	4b3f      	ldr	r3, [pc, #252]	; (8009bc0 <TM_GPS_INT_CheckTerm+0xc24>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d96f      	bls.n	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 8009ac8:	f107 0308 	add.w	r3, r7, #8
 8009acc:	4619      	mov	r1, r3
 8009ace:	4839      	ldr	r0, [pc, #228]	; (8009bb4 <TM_GPS_INT_CheckTerm+0xc18>)
 8009ad0:	f000 f94b 	bl	8009d6a <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8009ad4:	4b3a      	ldr	r3, [pc, #232]	; (8009bc0 <TM_GPS_INT_CheckTerm+0xc24>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	3b04      	subs	r3, #4
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	4b3d      	ldr	r3, [pc, #244]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009ade:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8009ae0:	4b3c      	ldr	r3, [pc, #240]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	4b3b      	ldr	r3, [pc, #236]	; (8009bd8 <TM_GPS_INT_CheckTerm+0xc3c>)
 8009aec:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8009aee:	4b38      	ldr	r3, [pc, #224]	; (8009bd0 <TM_GPS_INT_CheckTerm+0xc34>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	333f      	adds	r3, #63	; 0x3f
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	089b      	lsrs	r3, r3, #2
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	4413      	add	r3, r2
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	4b33      	ldr	r3, [pc, #204]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009b08:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 8009b0a:	4b32      	ldr	r3, [pc, #200]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b17      	cmp	r3, #23
 8009b10:	d84a      	bhi.n	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8009b12:	4b31      	ldr	r3, [pc, #196]	; (8009bd8 <TM_GPS_INT_CheckTerm+0xc3c>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10e      	bne.n	8009b38 <TM_GPS_INT_CheckTerm+0xb9c>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	4b2d      	ldr	r3, [pc, #180]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	4619      	mov	r1, r3
 8009b22:	b2d0      	uxtb	r0, r2
 8009b24:	4a24      	ldr	r2, [pc, #144]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009b26:	460b      	mov	r3, r1
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	440b      	add	r3, r1
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	4413      	add	r3, r2
 8009b30:	333e      	adds	r3, #62	; 0x3e
 8009b32:	4602      	mov	r2, r0
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e037      	b.n	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
				} else if (GPGSV_Term_Mod == 1) {
 8009b38:	4b27      	ldr	r3, [pc, #156]	; (8009bd8 <TM_GPS_INT_CheckTerm+0xc3c>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d10e      	bne.n	8009b5e <TM_GPS_INT_CheckTerm+0xbc2>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	4619      	mov	r1, r3
 8009b48:	b2d0      	uxtb	r0, r2
 8009b4a:	4a1b      	ldr	r2, [pc, #108]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	440b      	add	r3, r1
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	4413      	add	r3, r2
 8009b56:	333f      	adds	r3, #63	; 0x3f
 8009b58:	4602      	mov	r2, r0
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	e024      	b.n	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
				} else if (GPGSV_Term_Mod == 2) {
 8009b5e:	4b1e      	ldr	r3, [pc, #120]	; (8009bd8 <TM_GPS_INT_CheckTerm+0xc3c>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d10e      	bne.n	8009b84 <TM_GPS_INT_CheckTerm+0xbe8>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	b290      	uxth	r0, r2
 8009b70:	4a11      	ldr	r2, [pc, #68]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009b72:	460b      	mov	r3, r1
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	440b      	add	r3, r1
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	4413      	add	r3, r2
 8009b7c:	3340      	adds	r3, #64	; 0x40
 8009b7e:	4602      	mov	r2, r0
 8009b80:	801a      	strh	r2, [r3, #0]
 8009b82:	e011      	b.n	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
				} else if (GPGSV_Term_Mod == 3) {
 8009b84:	4b14      	ldr	r3, [pc, #80]	; (8009bd8 <TM_GPS_INT_CheckTerm+0xc3c>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d10d      	bne.n	8009ba8 <TM_GPS_INT_CheckTerm+0xc0c>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <TM_GPS_INT_CheckTerm+0xc38>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	4619      	mov	r1, r3
 8009b94:	b2d0      	uxtb	r0, r2
 8009b96:	4a08      	ldr	r2, [pc, #32]	; (8009bb8 <TM_GPS_INT_CheckTerm+0xc1c>)
 8009b98:	460b      	mov	r3, r1
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	440b      	add	r3, r1
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	4413      	add	r3, r2
 8009ba2:	3342      	adds	r3, #66	; 0x42
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	ecbd 8b02 	vpop	{d8}
 8009bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000200 	.word	0x20000200
 8009bb8:	2000021c 	.word	0x2000021c
 8009bbc:	20000214 	.word	0x20000214
 8009bc0:	2000020f 	.word	0x2000020f
 8009bc4:	20000478 	.word	0x20000478
 8009bc8:	20000009 	.word	0x20000009
 8009bcc:	20000474 	.word	0x20000474
 8009bd0:	20000475 	.word	0x20000475
 8009bd4:	20000476 	.word	0x20000476
 8009bd8:	20000477 	.word	0x20000477

08009bdc <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f933 	bl	8009e50 <TM_GPS_INT_FlagsOk>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 8087 	beq.w	8009d00 <TM_GPS_INT_Return+0x124>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8009bf2:	4b4d      	ldr	r3, [pc, #308]	; (8009d28 <TM_GPS_INT_Return+0x14c>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 8009bf8:	4b4c      	ldr	r3, [pc, #304]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	601a      	str	r2, [r3, #0]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8009c00:	4b4a      	ldr	r3, [pc, #296]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	605a      	str	r2, [r3, #4]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8009c08:	4b48      	ldr	r3, [pc, #288]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c0a:	7b1a      	ldrb	r2, [r3, #12]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	731a      	strb	r2, [r3, #12]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8009c10:	4b46      	ldr	r3, [pc, #280]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c12:	7b5a      	ldrb	r2, [r3, #13]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	735a      	strb	r2, [r3, #13]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8009c18:	4b44      	ldr	r3, [pc, #272]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	609a      	str	r2, [r3, #8]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a42      	ldr	r2, [pc, #264]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c24:	330e      	adds	r3, #14
 8009c26:	320e      	adds	r2, #14
 8009c28:	6811      	ldr	r1, [r2, #0]
 8009c2a:	6019      	str	r1, [r3, #0]
 8009c2c:	8892      	ldrh	r2, [r2, #4]
 8009c2e:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8009c30:	4b3e      	ldr	r3, [pc, #248]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c32:	699a      	ldr	r2, [r3, #24]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	619a      	str	r2, [r3, #24]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a3c      	ldr	r2, [pc, #240]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c3c:	3314      	adds	r3, #20
 8009c3e:	3214      	adds	r2, #20
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	4611      	mov	r1, r2
 8009c44:	8019      	strh	r1, [r3, #0]
 8009c46:	3302      	adds	r3, #2
 8009c48:	0c12      	lsrs	r2, r2, #16
 8009c4a:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8009c4c:	4b37      	ldr	r3, [pc, #220]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c4e:	7f1a      	ldrb	r2, [r3, #28]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	771a      	strb	r2, [r3, #28]
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8009c54:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c56:	6a1a      	ldr	r2, [r3, #32]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	621a      	str	r2, [r3, #32]
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8009c5c:	4b33      	ldr	r3, [pc, #204]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	625a      	str	r2, [r3, #36]	; 0x24
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8009c64:	4b31      	ldr	r3, [pc, #196]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8009c6c:	4b2f      	ldr	r3, [pc, #188]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	629a      	str	r2, [r3, #40]	; 0x28
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8009c74:	4b2d      	ldr	r3, [pc, #180]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c76:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		for (i = 0; i < 12; i++) {
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
 8009c84:	e00d      	b.n	8009ca2 <TM_GPS_INT_Return+0xc6>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8009c86:	7bfa      	ldrb	r2, [r7, #15]
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	4928      	ldr	r1, [pc, #160]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	4413      	add	r3, r2
 8009c96:	460a      	mov	r2, r1
 8009c98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		for (i = 0; i < 12; i++) {
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	2b0b      	cmp	r3, #11
 8009ca6:	d9ee      	bls.n	8009c86 <TM_GPS_INT_Return+0xaa>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8009ca8:	4b20      	ldr	r3, [pc, #128]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009caa:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
 8009cb8:	e019      	b.n	8009cee <TM_GPS_INT_Return+0x112>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 8009cba:	7bfa      	ldrb	r2, [r7, #15]
 8009cbc:	7bf9      	ldrb	r1, [r7, #15]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	440b      	add	r3, r1
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	4403      	add	r3, r0
 8009cca:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8009cce:	4917      	ldr	r1, [pc, #92]	; (8009d2c <TM_GPS_INT_Return+0x150>)
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	4413      	add	r3, r2
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	440b      	add	r3, r1
 8009cda:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6811      	ldr	r1, [r2, #0]
 8009ce2:	6019      	str	r1, [r3, #0]
 8009ce4:	8892      	ldrh	r2, [r2, #4]
 8009ce6:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	3301      	adds	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	2b17      	cmp	r3, #23
 8009cf2:	d9e2      	bls.n	8009cba <TM_GPS_INT_Return+0xde>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e00e      	b.n	8009d1e <TM_GPS_INT_Return+0x142>
	}
	
	if (TM_GPS_FirstTime) {
 8009d00:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <TM_GPS_INT_Return+0x14c>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <TM_GPS_INT_Return+0x138>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8009d10:	2302      	movs	r3, #2
 8009d12:	e004      	b.n	8009d1e <TM_GPS_INT_Return+0x142>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8009d1c:	2301      	movs	r3, #1
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	2000033c 	.word	0x2000033c
 8009d2c:	2000021c 	.word	0x2000021c

08009d30 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
	while (*str) {
 8009d3a:	e00b      	b.n	8009d54 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	603a      	str	r2, [r7, #0]
 8009d42:	781a      	ldrb	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1c59      	adds	r1, r3, #1
 8009d48:	6079      	str	r1, [r7, #4]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d001      	beq.n	8009d54 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e004      	b.n	8009d5e <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1ef      	bne.n	8009d3c <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8009d5c:	2301      	movs	r3, #1
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8009d7e:	e012      	b.n	8009da6 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	440b      	add	r3, r1
 8009d98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	601a      	str	r2, [r3, #0]
		count++;
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	3301      	adds	r3, #1
 8009da4:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b2f      	cmp	r3, #47	; 0x2f
 8009dac:	d903      	bls.n	8009db6 <TM_GPS_INT_Atoi+0x4c>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b39      	cmp	r3, #57	; 0x39
 8009db4:	d9e4      	bls.n	8009d80 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	460a      	mov	r2, r1
 8009dce:	71fb      	strb	r3, [r7, #7]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8009dd8:	e004      	b.n	8009de4 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 8009dda:	79fa      	ldrb	r2, [r7, #7]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
 8009de2:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8009de4:	79bb      	ldrb	r3, [r7, #6]
 8009de6:	1e5a      	subs	r2, r3, #1
 8009de8:	71ba      	strb	r2, [r7, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1f5      	bne.n	8009dda <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 8009dee:	68fb      	ldr	r3, [r7, #12]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	2b2f      	cmp	r3, #47	; 0x2f
 8009e0a:	d906      	bls.n	8009e1a <TM_GPS_INT_Hex2Dec+0x1e>
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	2b39      	cmp	r3, #57	; 0x39
 8009e10:	d803      	bhi.n	8009e1a <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	3b30      	subs	r3, #48	; 0x30
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	e014      	b.n	8009e44 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	2b40      	cmp	r3, #64	; 0x40
 8009e1e:	d906      	bls.n	8009e2e <TM_GPS_INT_Hex2Dec+0x32>
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	2b46      	cmp	r3, #70	; 0x46
 8009e24:	d803      	bhi.n	8009e2e <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	3b37      	subs	r3, #55	; 0x37
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	e00a      	b.n	8009e44 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8009e2e:	79fb      	ldrb	r3, [r7, #7]
 8009e30:	2b60      	cmp	r3, #96	; 0x60
 8009e32:	d906      	bls.n	8009e42 <TM_GPS_INT_Hex2Dec+0x46>
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	2b66      	cmp	r3, #102	; 0x66
 8009e38:	d803      	bhi.n	8009e42 <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8009e3a:	79fb      	ldrb	r3, [r7, #7]
 8009e3c:	3b57      	subs	r3, #87	; 0x57
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	e000      	b.n	8009e44 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8009e58:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <TM_GPS_INT_FlagsOk+0x54>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	4b12      	ldr	r3, [pc, #72]	; (8009ea8 <TM_GPS_INT_FlagsOk+0x58>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d118      	bne.n	8009e96 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
 8009e68:	e00d      	b.n	8009e86 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	333c      	adds	r3, #60	; 0x3c
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	7ddb      	ldrb	r3, [r3, #23]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	e00b      	b.n	8009e98 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	3301      	adds	r3, #1
 8009e84:	73fb      	strb	r3, [r7, #15]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009e8c:	7bfa      	ldrb	r2, [r7, #15]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d3eb      	bcc.n	8009e6a <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	20000214 	.word	0x20000214
 8009ea8:	20000218 	.word	0x20000218

08009eac <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8009eb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <TM_GPS_INT_ClearFlags+0x44>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]
 8009ebe:	e00a      	b.n	8009ed6 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	333c      	adds	r3, #60	; 0x3c
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	73fb      	strb	r3, [r7, #15]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d3ee      	bcc.n	8009ec0 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8009ee2:	bf00      	nop
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	20000214 	.word	0x20000214

08009ef4 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8009efc:	4baf      	ldr	r3, [pc, #700]	; (800a1bc <TM_GPS_INT_CheckEmpty+0x2c8>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	f040 8151 	bne.w	800a1a8 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8009f06:	4bae      	ldr	r3, [pc, #696]	; (800a1c0 <TM_GPS_INT_CheckEmpty+0x2cc>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	015b      	lsls	r3, r3, #5
 8009f0c:	4aad      	ldr	r2, [pc, #692]	; (800a1c4 <TM_GPS_INT_CheckEmpty+0x2d0>)
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	3b01      	subs	r3, #1
 8009f14:	2b62      	cmp	r3, #98	; 0x62
 8009f16:	f200 8149 	bhi.w	800a1ac <TM_GPS_INT_CheckEmpty+0x2b8>
 8009f1a:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <TM_GPS_INT_CheckEmpty+0x2c>)
 8009f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f20:	0800a10f 	.word	0x0800a10f
 8009f24:	0800a0ad 	.word	0x0800a0ad
 8009f28:	0800a0bb 	.word	0x0800a0bb
 8009f2c:	0800a0c9 	.word	0x0800a0c9
 8009f30:	0800a0d7 	.word	0x0800a0d7
 8009f34:	0800a0f3 	.word	0x0800a0f3
 8009f38:	0800a0e5 	.word	0x0800a0e5
 8009f3c:	0800a1ad 	.word	0x0800a1ad
 8009f40:	0800a101 	.word	0x0800a101
 8009f44:	0800a1ad 	.word	0x0800a1ad
 8009f48:	0800a1ad 	.word	0x0800a1ad
 8009f4c:	0800a1ad 	.word	0x0800a1ad
 8009f50:	0800a1ad 	.word	0x0800a1ad
 8009f54:	0800a1ad 	.word	0x0800a1ad
 8009f58:	0800a1ad 	.word	0x0800a1ad
 8009f5c:	0800a1ad 	.word	0x0800a1ad
 8009f60:	0800a1ad 	.word	0x0800a1ad
 8009f64:	0800a1ad 	.word	0x0800a1ad
 8009f68:	0800a1ad 	.word	0x0800a1ad
 8009f6c:	0800a1ad 	.word	0x0800a1ad
 8009f70:	0800a1ad 	.word	0x0800a1ad
 8009f74:	0800a1ad 	.word	0x0800a1ad
 8009f78:	0800a1ad 	.word	0x0800a1ad
 8009f7c:	0800a1ad 	.word	0x0800a1ad
 8009f80:	0800a1ad 	.word	0x0800a1ad
 8009f84:	0800a1ad 	.word	0x0800a1ad
 8009f88:	0800a1ad 	.word	0x0800a1ad
 8009f8c:	0800a1ad 	.word	0x0800a1ad
 8009f90:	0800a1ad 	.word	0x0800a1ad
 8009f94:	0800a1ad 	.word	0x0800a1ad
 8009f98:	0800a1ad 	.word	0x0800a1ad
 8009f9c:	0800a1ad 	.word	0x0800a1ad
 8009fa0:	0800a1ad 	.word	0x0800a1ad
 8009fa4:	0800a139 	.word	0x0800a139
 8009fa8:	0800a1ad 	.word	0x0800a1ad
 8009fac:	0800a1ad 	.word	0x0800a1ad
 8009fb0:	0800a1ad 	.word	0x0800a1ad
 8009fb4:	0800a1ad 	.word	0x0800a1ad
 8009fb8:	0800a11d 	.word	0x0800a11d
 8009fbc:	0800a147 	.word	0x0800a147
 8009fc0:	0800a12b 	.word	0x0800a12b
 8009fc4:	0800a1ad 	.word	0x0800a1ad
 8009fc8:	0800a1ad 	.word	0x0800a1ad
 8009fcc:	0800a1ad 	.word	0x0800a1ad
 8009fd0:	0800a1ad 	.word	0x0800a1ad
 8009fd4:	0800a1ad 	.word	0x0800a1ad
 8009fd8:	0800a1ad 	.word	0x0800a1ad
 8009fdc:	0800a1ad 	.word	0x0800a1ad
 8009fe0:	0800a1ad 	.word	0x0800a1ad
 8009fe4:	0800a1ad 	.word	0x0800a1ad
 8009fe8:	0800a1ad 	.word	0x0800a1ad
 8009fec:	0800a1ad 	.word	0x0800a1ad
 8009ff0:	0800a1ad 	.word	0x0800a1ad
 8009ff4:	0800a1ad 	.word	0x0800a1ad
 8009ff8:	0800a1ad 	.word	0x0800a1ad
 8009ffc:	0800a1ad 	.word	0x0800a1ad
 800a000:	0800a1ad 	.word	0x0800a1ad
 800a004:	0800a1ad 	.word	0x0800a1ad
 800a008:	0800a1ad 	.word	0x0800a1ad
 800a00c:	0800a1ad 	.word	0x0800a1ad
 800a010:	0800a1ad 	.word	0x0800a1ad
 800a014:	0800a1ad 	.word	0x0800a1ad
 800a018:	0800a1ad 	.word	0x0800a1ad
 800a01c:	0800a1ad 	.word	0x0800a1ad
 800a020:	0800a1ad 	.word	0x0800a1ad
 800a024:	0800a17f 	.word	0x0800a17f
 800a028:	0800a18d 	.word	0x0800a18d
 800a02c:	0800a18d 	.word	0x0800a18d
 800a030:	0800a18d 	.word	0x0800a18d
 800a034:	0800a18d 	.word	0x0800a18d
 800a038:	0800a18d 	.word	0x0800a18d
 800a03c:	0800a18d 	.word	0x0800a18d
 800a040:	0800a18d 	.word	0x0800a18d
 800a044:	0800a18d 	.word	0x0800a18d
 800a048:	0800a18d 	.word	0x0800a18d
 800a04c:	0800a18d 	.word	0x0800a18d
 800a050:	0800a18d 	.word	0x0800a18d
 800a054:	0800a18d 	.word	0x0800a18d
 800a058:	0800a163 	.word	0x0800a163
 800a05c:	0800a155 	.word	0x0800a155
 800a060:	0800a171 	.word	0x0800a171
 800a064:	0800a1ad 	.word	0x0800a1ad
 800a068:	0800a1ad 	.word	0x0800a1ad
 800a06c:	0800a1ad 	.word	0x0800a1ad
 800a070:	0800a1ad 	.word	0x0800a1ad
 800a074:	0800a1ad 	.word	0x0800a1ad
 800a078:	0800a1ad 	.word	0x0800a1ad
 800a07c:	0800a1ad 	.word	0x0800a1ad
 800a080:	0800a1ad 	.word	0x0800a1ad
 800a084:	0800a1ad 	.word	0x0800a1ad
 800a088:	0800a1ad 	.word	0x0800a1ad
 800a08c:	0800a1ad 	.word	0x0800a1ad
 800a090:	0800a1ad 	.word	0x0800a1ad
 800a094:	0800a1ad 	.word	0x0800a1ad
 800a098:	0800a1ad 	.word	0x0800a1ad
 800a09c:	0800a1ad 	.word	0x0800a1ad
 800a0a0:	0800a1ad 	.word	0x0800a1ad
 800a0a4:	0800a1ad 	.word	0x0800a1ad
 800a0a8:	0800a19b 	.word	0x0800a19b
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 800a0ac:	4b46      	ldr	r3, [pc, #280]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f043 0301 	orr.w	r3, r3, #1
 800a0b4:	4a44      	ldr	r2, [pc, #272]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	e079      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 800a0ba:	4b43      	ldr	r3, [pc, #268]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c2:	4a41      	ldr	r2, [pc, #260]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e072      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 800a0c8:	4b3f      	ldr	r3, [pc, #252]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	4a3d      	ldr	r2, [pc, #244]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	e06b      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 800a0d6:	4b3c      	ldr	r3, [pc, #240]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f043 0320 	orr.w	r3, r3, #32
 800a0de:	4a3a      	ldr	r2, [pc, #232]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	e064      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 800a0e4:	4b38      	ldr	r3, [pc, #224]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f043 0304 	orr.w	r3, r3, #4
 800a0ec:	4a36      	ldr	r2, [pc, #216]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	e05d      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 800a0f2:	4b35      	ldr	r3, [pc, #212]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f043 0308 	orr.w	r3, r3, #8
 800a0fa:	4a33      	ldr	r2, [pc, #204]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	e056      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 800a100:	4b31      	ldr	r3, [pc, #196]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f043 0310 	orr.w	r3, r3, #16
 800a108:	4a2f      	ldr	r2, [pc, #188]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	e04f      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 800a10e:	4b2e      	ldr	r3, [pc, #184]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a116:	4a2c      	ldr	r2, [pc, #176]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	e048      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 800a11c:	4b2a      	ldr	r3, [pc, #168]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a124:	4a28      	ldr	r2, [pc, #160]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	e041      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 800a12a:	4b27      	ldr	r3, [pc, #156]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a132:	4a25      	ldr	r2, [pc, #148]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	e03a      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 800a138:	4b23      	ldr	r3, [pc, #140]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a140:	4a21      	ldr	r2, [pc, #132]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	e033      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a14e:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	e02c      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 800a154:	4b1c      	ldr	r3, [pc, #112]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a15c:	4a1a      	ldr	r2, [pc, #104]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	e025      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 800a162:	4b19      	ldr	r3, [pc, #100]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a16a:	4a17      	ldr	r2, [pc, #92]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	e01e      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 800a170:	4b15      	ldr	r3, [pc, #84]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a178:	4a13      	ldr	r2, [pc, #76]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	e017      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 800a17e:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a186:	4a10      	ldr	r2, [pc, #64]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	e010      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 800a18c:	4b0e      	ldr	r3, [pc, #56]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a194:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a196:	6013      	str	r3, [r2, #0]
				break;
 800a198:	e009      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 800a19a:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1a2:	4a09      	ldr	r2, [pc, #36]	; (800a1c8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	e002      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 800a1a8:	bf00      	nop
 800a1aa:	e000      	b.n	800a1ae <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 800a1ac:	bf00      	nop
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	20000210 	.word	0x20000210
 800a1c0:	20000009 	.word	0x20000009
 800a1c4:	2000020f 	.word	0x2000020f
 800a1c8:	20000214 	.word	0x20000214

0800a1cc <sbus_decoding>:

void sbus_reset(UART_HandleTypeDef *huart){
	HAL_UART_Receive_DMA(huart, sbus_dmaBuf, SBUS_DMA_BUF_SIZE);
}

void sbus_decoding() { // input to HAL_UART_RxCpltCallback
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
	if(sbus_rxBuf[23] & SBUS_LOST_FRAME || sbus_rxBuf[23] & SBUS_FAIL_SAFE){//failsafe frame
 800a1d2:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <sbus_decoding+0x2c>)
 800a1d4:	7ddb      	ldrb	r3, [r3, #23]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <sbus_decoding+0x1e>
 800a1de:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <sbus_decoding+0x2c>)
 800a1e0:	7ddb      	ldrb	r3, [r3, #23]
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <sbus_decoding+0x34>
//		printf("fail safe\r\n");
		sbus_errcnt++;
 800a1ea:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <sbus_decoding+0x30>)
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	4b02      	ldr	r3, [pc, #8]	; (800a1fc <sbus_decoding+0x30>)
 800a1f4:	801a      	strh	r2, [r3, #0]
		return;
 800a1f6:	e170      	b.n	800a4da <sbus_decoding+0x30e>
 800a1f8:	2000047c 	.word	0x2000047c
 800a1fc:	200004fe 	.word	0x200004fe
	}

	sbus_rcValue[0] = ((uint16_t)sbus_rxBuf[1] >> 0 | ((uint16_t)sbus_rxBuf[2] << 8)) & 0x07FF;
 800a200:	4b95      	ldr	r3, [pc, #596]	; (800a458 <sbus_decoding+0x28c>)
 800a202:	785b      	ldrb	r3, [r3, #1]
 800a204:	b21a      	sxth	r2, r3
 800a206:	4b94      	ldr	r3, [pc, #592]	; (800a458 <sbus_decoding+0x28c>)
 800a208:	789b      	ldrb	r3, [r3, #2]
 800a20a:	021b      	lsls	r3, r3, #8
 800a20c:	b21b      	sxth	r3, r3
 800a20e:	4313      	orrs	r3, r2
 800a210:	b21b      	sxth	r3, r3
 800a212:	b29b      	uxth	r3, r3
 800a214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a218:	b29a      	uxth	r2, r3
 800a21a:	4b90      	ldr	r3, [pc, #576]	; (800a45c <sbus_decoding+0x290>)
 800a21c:	801a      	strh	r2, [r3, #0]
	sbus_rcValue[1] = ((uint16_t)sbus_rxBuf[2] >> 3 | ((uint16_t)sbus_rxBuf[3] << 5)) & 0x07FF;
 800a21e:	4b8e      	ldr	r3, [pc, #568]	; (800a458 <sbus_decoding+0x28c>)
 800a220:	789b      	ldrb	r3, [r3, #2]
 800a222:	08db      	lsrs	r3, r3, #3
 800a224:	b2db      	uxtb	r3, r3
 800a226:	b21a      	sxth	r2, r3
 800a228:	4b8b      	ldr	r3, [pc, #556]	; (800a458 <sbus_decoding+0x28c>)
 800a22a:	78db      	ldrb	r3, [r3, #3]
 800a22c:	015b      	lsls	r3, r3, #5
 800a22e:	b21b      	sxth	r3, r3
 800a230:	4313      	orrs	r3, r2
 800a232:	b21b      	sxth	r3, r3
 800a234:	b29b      	uxth	r3, r3
 800a236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	4b87      	ldr	r3, [pc, #540]	; (800a45c <sbus_decoding+0x290>)
 800a23e:	805a      	strh	r2, [r3, #2]
	sbus_rcValue[2] = ((uint16_t)sbus_rxBuf[3] >> 6 | ((uint16_t)sbus_rxBuf[4] << 2) | (uint16_t)sbus_rxBuf[5] << 10) & 0x07FF;
 800a240:	4b85      	ldr	r3, [pc, #532]	; (800a458 <sbus_decoding+0x28c>)
 800a242:	78db      	ldrb	r3, [r3, #3]
 800a244:	099b      	lsrs	r3, r3, #6
 800a246:	b2db      	uxtb	r3, r3
 800a248:	b21a      	sxth	r2, r3
 800a24a:	4b83      	ldr	r3, [pc, #524]	; (800a458 <sbus_decoding+0x28c>)
 800a24c:	791b      	ldrb	r3, [r3, #4]
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	b21b      	sxth	r3, r3
 800a252:	4313      	orrs	r3, r2
 800a254:	b21a      	sxth	r2, r3
 800a256:	4b80      	ldr	r3, [pc, #512]	; (800a458 <sbus_decoding+0x28c>)
 800a258:	795b      	ldrb	r3, [r3, #5]
 800a25a:	029b      	lsls	r3, r3, #10
 800a25c:	b21b      	sxth	r3, r3
 800a25e:	4313      	orrs	r3, r2
 800a260:	b21b      	sxth	r3, r3
 800a262:	b29b      	uxth	r3, r3
 800a264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a268:	b29a      	uxth	r2, r3
 800a26a:	4b7c      	ldr	r3, [pc, #496]	; (800a45c <sbus_decoding+0x290>)
 800a26c:	809a      	strh	r2, [r3, #4]
	sbus_rcValue[3] = ((uint16_t)sbus_rxBuf[5] >> 1 | ((uint16_t)sbus_rxBuf[6] << 7)) & 0x07FF;
 800a26e:	4b7a      	ldr	r3, [pc, #488]	; (800a458 <sbus_decoding+0x28c>)
 800a270:	795b      	ldrb	r3, [r3, #5]
 800a272:	085b      	lsrs	r3, r3, #1
 800a274:	b2db      	uxtb	r3, r3
 800a276:	b21a      	sxth	r2, r3
 800a278:	4b77      	ldr	r3, [pc, #476]	; (800a458 <sbus_decoding+0x28c>)
 800a27a:	799b      	ldrb	r3, [r3, #6]
 800a27c:	01db      	lsls	r3, r3, #7
 800a27e:	b21b      	sxth	r3, r3
 800a280:	4313      	orrs	r3, r2
 800a282:	b21b      	sxth	r3, r3
 800a284:	b29b      	uxth	r3, r3
 800a286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	4b73      	ldr	r3, [pc, #460]	; (800a45c <sbus_decoding+0x290>)
 800a28e:	80da      	strh	r2, [r3, #6]
	sbus_rcValue[4] = ((uint16_t)sbus_rxBuf[6] >> 4 | ((uint16_t)sbus_rxBuf[7] << 4)) & 0x07FF;
 800a290:	4b71      	ldr	r3, [pc, #452]	; (800a458 <sbus_decoding+0x28c>)
 800a292:	799b      	ldrb	r3, [r3, #6]
 800a294:	091b      	lsrs	r3, r3, #4
 800a296:	b2db      	uxtb	r3, r3
 800a298:	b21a      	sxth	r2, r3
 800a29a:	4b6f      	ldr	r3, [pc, #444]	; (800a458 <sbus_decoding+0x28c>)
 800a29c:	79db      	ldrb	r3, [r3, #7]
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b21b      	sxth	r3, r3
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	4b6b      	ldr	r3, [pc, #428]	; (800a45c <sbus_decoding+0x290>)
 800a2b0:	811a      	strh	r2, [r3, #8]
	sbus_rcValue[5] = ((uint16_t)sbus_rxBuf[7] >> 7 | ((uint16_t)sbus_rxBuf[8] << 1) | (uint16_t)sbus_rxBuf[9] << 9) & 0x07FF;
 800a2b2:	4b69      	ldr	r3, [pc, #420]	; (800a458 <sbus_decoding+0x28c>)
 800a2b4:	79db      	ldrb	r3, [r3, #7]
 800a2b6:	09db      	lsrs	r3, r3, #7
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	b21a      	sxth	r2, r3
 800a2bc:	4b66      	ldr	r3, [pc, #408]	; (800a458 <sbus_decoding+0x28c>)
 800a2be:	7a1b      	ldrb	r3, [r3, #8]
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	b21b      	sxth	r3, r3
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	b21a      	sxth	r2, r3
 800a2c8:	4b63      	ldr	r3, [pc, #396]	; (800a458 <sbus_decoding+0x28c>)
 800a2ca:	7a5b      	ldrb	r3, [r3, #9]
 800a2cc:	025b      	lsls	r3, r3, #9
 800a2ce:	b21b      	sxth	r3, r3
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	b21b      	sxth	r3, r3
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	4b5f      	ldr	r3, [pc, #380]	; (800a45c <sbus_decoding+0x290>)
 800a2de:	815a      	strh	r2, [r3, #10]
	sbus_rcValue[6] = ((uint16_t)sbus_rxBuf[9] >> 2 | ((uint16_t)sbus_rxBuf[10] << 6)) & 0x07FF;
 800a2e0:	4b5d      	ldr	r3, [pc, #372]	; (800a458 <sbus_decoding+0x28c>)
 800a2e2:	7a5b      	ldrb	r3, [r3, #9]
 800a2e4:	089b      	lsrs	r3, r3, #2
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	b21a      	sxth	r2, r3
 800a2ea:	4b5b      	ldr	r3, [pc, #364]	; (800a458 <sbus_decoding+0x28c>)
 800a2ec:	7a9b      	ldrb	r3, [r3, #10]
 800a2ee:	019b      	lsls	r3, r3, #6
 800a2f0:	b21b      	sxth	r3, r3
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	b21b      	sxth	r3, r3
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	4b57      	ldr	r3, [pc, #348]	; (800a45c <sbus_decoding+0x290>)
 800a300:	819a      	strh	r2, [r3, #12]
	sbus_rcValue[7] = ((uint16_t)sbus_rxBuf[10] >> 5 | ((uint16_t)sbus_rxBuf[11] << 3)) & 0x07FF;
 800a302:	4b55      	ldr	r3, [pc, #340]	; (800a458 <sbus_decoding+0x28c>)
 800a304:	7a9b      	ldrb	r3, [r3, #10]
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	b21a      	sxth	r2, r3
 800a30c:	4b52      	ldr	r3, [pc, #328]	; (800a458 <sbus_decoding+0x28c>)
 800a30e:	7adb      	ldrb	r3, [r3, #11]
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	b21b      	sxth	r3, r3
 800a314:	4313      	orrs	r3, r2
 800a316:	b21b      	sxth	r3, r3
 800a318:	b29b      	uxth	r3, r3
 800a31a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a31e:	b29a      	uxth	r2, r3
 800a320:	4b4e      	ldr	r3, [pc, #312]	; (800a45c <sbus_decoding+0x290>)
 800a322:	81da      	strh	r2, [r3, #14]

	sbus_rcValue[8] = ((uint16_t)sbus_rxBuf[12] << 0 | ((uint16_t)sbus_rxBuf[13] << 8)) & 0x07FF;
 800a324:	4b4c      	ldr	r3, [pc, #304]	; (800a458 <sbus_decoding+0x28c>)
 800a326:	7b1b      	ldrb	r3, [r3, #12]
 800a328:	b21a      	sxth	r2, r3
 800a32a:	4b4b      	ldr	r3, [pc, #300]	; (800a458 <sbus_decoding+0x28c>)
 800a32c:	7b5b      	ldrb	r3, [r3, #13]
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	b21b      	sxth	r3, r3
 800a332:	4313      	orrs	r3, r2
 800a334:	b21b      	sxth	r3, r3
 800a336:	b29b      	uxth	r3, r3
 800a338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	4b47      	ldr	r3, [pc, #284]	; (800a45c <sbus_decoding+0x290>)
 800a340:	821a      	strh	r2, [r3, #16]
	sbus_rcValue[9] = ((uint16_t)sbus_rxBuf[13] >> 3 | ((uint16_t)sbus_rxBuf[14] << 5)) & 0x07FF;
 800a342:	4b45      	ldr	r3, [pc, #276]	; (800a458 <sbus_decoding+0x28c>)
 800a344:	7b5b      	ldrb	r3, [r3, #13]
 800a346:	08db      	lsrs	r3, r3, #3
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	b21a      	sxth	r2, r3
 800a34c:	4b42      	ldr	r3, [pc, #264]	; (800a458 <sbus_decoding+0x28c>)
 800a34e:	7b9b      	ldrb	r3, [r3, #14]
 800a350:	015b      	lsls	r3, r3, #5
 800a352:	b21b      	sxth	r3, r3
 800a354:	4313      	orrs	r3, r2
 800a356:	b21b      	sxth	r3, r3
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a35e:	b29a      	uxth	r2, r3
 800a360:	4b3e      	ldr	r3, [pc, #248]	; (800a45c <sbus_decoding+0x290>)
 800a362:	825a      	strh	r2, [r3, #18]
	sbus_rcValue[10] = ((uint16_t)sbus_rxBuf[14] >> 6 | ((uint16_t)sbus_rxBuf[15] << 2) | (uint16_t)sbus_rxBuf[16] << 10) & 0x07FF;
 800a364:	4b3c      	ldr	r3, [pc, #240]	; (800a458 <sbus_decoding+0x28c>)
 800a366:	7b9b      	ldrb	r3, [r3, #14]
 800a368:	099b      	lsrs	r3, r3, #6
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	b21a      	sxth	r2, r3
 800a36e:	4b3a      	ldr	r3, [pc, #232]	; (800a458 <sbus_decoding+0x28c>)
 800a370:	7bdb      	ldrb	r3, [r3, #15]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	b21b      	sxth	r3, r3
 800a376:	4313      	orrs	r3, r2
 800a378:	b21a      	sxth	r2, r3
 800a37a:	4b37      	ldr	r3, [pc, #220]	; (800a458 <sbus_decoding+0x28c>)
 800a37c:	7c1b      	ldrb	r3, [r3, #16]
 800a37e:	029b      	lsls	r3, r3, #10
 800a380:	b21b      	sxth	r3, r3
 800a382:	4313      	orrs	r3, r2
 800a384:	b21b      	sxth	r3, r3
 800a386:	b29b      	uxth	r3, r3
 800a388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	4b33      	ldr	r3, [pc, #204]	; (800a45c <sbus_decoding+0x290>)
 800a390:	829a      	strh	r2, [r3, #20]
	sbus_rcValue[11] = ((uint16_t)sbus_rxBuf[16] >> 1 | ((uint16_t)sbus_rxBuf[17] << 7)) & 0x07FF;
 800a392:	4b31      	ldr	r3, [pc, #196]	; (800a458 <sbus_decoding+0x28c>)
 800a394:	7c1b      	ldrb	r3, [r3, #16]
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	b21a      	sxth	r2, r3
 800a39c:	4b2e      	ldr	r3, [pc, #184]	; (800a458 <sbus_decoding+0x28c>)
 800a39e:	7c5b      	ldrb	r3, [r3, #17]
 800a3a0:	01db      	lsls	r3, r3, #7
 800a3a2:	b21b      	sxth	r3, r3
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	b21b      	sxth	r3, r3
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	4b2a      	ldr	r3, [pc, #168]	; (800a45c <sbus_decoding+0x290>)
 800a3b2:	82da      	strh	r2, [r3, #22]
	sbus_rcValue[12] = ((uint16_t)sbus_rxBuf[17] >> 4 | ((uint16_t)sbus_rxBuf[18] << 4)) & 0x07FF;
 800a3b4:	4b28      	ldr	r3, [pc, #160]	; (800a458 <sbus_decoding+0x28c>)
 800a3b6:	7c5b      	ldrb	r3, [r3, #17]
 800a3b8:	091b      	lsrs	r3, r3, #4
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	b21a      	sxth	r2, r3
 800a3be:	4b26      	ldr	r3, [pc, #152]	; (800a458 <sbus_decoding+0x28c>)
 800a3c0:	7c9b      	ldrb	r3, [r3, #18]
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	b21b      	sxth	r3, r3
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	b21b      	sxth	r3, r3
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	4b22      	ldr	r3, [pc, #136]	; (800a45c <sbus_decoding+0x290>)
 800a3d4:	831a      	strh	r2, [r3, #24]
	sbus_rcValue[13] = ((uint16_t)sbus_rxBuf[18] >> 7 | ((uint16_t)sbus_rxBuf[19] << 1) | (uint16_t)sbus_rxBuf[21] << 9) & 0x07FF;
 800a3d6:	4b20      	ldr	r3, [pc, #128]	; (800a458 <sbus_decoding+0x28c>)
 800a3d8:	7c9b      	ldrb	r3, [r3, #18]
 800a3da:	09db      	lsrs	r3, r3, #7
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	b21a      	sxth	r2, r3
 800a3e0:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <sbus_decoding+0x28c>)
 800a3e2:	7cdb      	ldrb	r3, [r3, #19]
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	b21b      	sxth	r3, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	b21a      	sxth	r2, r3
 800a3ec:	4b1a      	ldr	r3, [pc, #104]	; (800a458 <sbus_decoding+0x28c>)
 800a3ee:	7d5b      	ldrb	r3, [r3, #21]
 800a3f0:	025b      	lsls	r3, r3, #9
 800a3f2:	b21b      	sxth	r3, r3
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	b21b      	sxth	r3, r3
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	4b16      	ldr	r3, [pc, #88]	; (800a45c <sbus_decoding+0x290>)
 800a402:	835a      	strh	r2, [r3, #26]
	sbus_rcValue[14] = ((uint16_t)sbus_rxBuf[20] >> 2 | ((uint16_t)sbus_rxBuf[21] << 6)) & 0x07FF;
 800a404:	4b14      	ldr	r3, [pc, #80]	; (800a458 <sbus_decoding+0x28c>)
 800a406:	7d1b      	ldrb	r3, [r3, #20]
 800a408:	089b      	lsrs	r3, r3, #2
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	b21a      	sxth	r2, r3
 800a40e:	4b12      	ldr	r3, [pc, #72]	; (800a458 <sbus_decoding+0x28c>)
 800a410:	7d5b      	ldrb	r3, [r3, #21]
 800a412:	019b      	lsls	r3, r3, #6
 800a414:	b21b      	sxth	r3, r3
 800a416:	4313      	orrs	r3, r2
 800a418:	b21b      	sxth	r3, r3
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a420:	b29a      	uxth	r2, r3
 800a422:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <sbus_decoding+0x290>)
 800a424:	839a      	strh	r2, [r3, #28]
	sbus_rcValue[15] = ((uint16_t)sbus_rxBuf[21] >> 5 | ((uint16_t)sbus_rxBuf[22] << 3)) & 0x07FF;
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <sbus_decoding+0x28c>)
 800a428:	7d5b      	ldrb	r3, [r3, #21]
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	b21a      	sxth	r2, r3
 800a430:	4b09      	ldr	r3, [pc, #36]	; (800a458 <sbus_decoding+0x28c>)
 800a432:	7d9b      	ldrb	r3, [r3, #22]
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	b21b      	sxth	r3, r3
 800a438:	4313      	orrs	r3, r2
 800a43a:	b21b      	sxth	r3, r3
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a442:	b29a      	uxth	r2, r3
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <sbus_decoding+0x290>)
 800a446:	83da      	strh	r2, [r3, #30]


	if (((uint16_t)sbus_rxBuf[23]) & 0x0001)       sbus_rcValue[16] = 2000; else sbus_rcValue[16] = 1000;
 800a448:	4b03      	ldr	r3, [pc, #12]	; (800a458 <sbus_decoding+0x28c>)
 800a44a:	7ddb      	ldrb	r3, [r3, #23]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <sbus_decoding+0x29e>
 800a454:	e004      	b.n	800a460 <sbus_decoding+0x294>
 800a456:	bf00      	nop
 800a458:	2000047c 	.word	0x2000047c
 800a45c:	200004b4 	.word	0x200004b4
 800a460:	4b20      	ldr	r3, [pc, #128]	; (800a4e4 <sbus_decoding+0x318>)
 800a462:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a466:	841a      	strh	r2, [r3, #32]
 800a468:	e003      	b.n	800a472 <sbus_decoding+0x2a6>
 800a46a:	4b1e      	ldr	r3, [pc, #120]	; (800a4e4 <sbus_decoding+0x318>)
 800a46c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a470:	841a      	strh	r2, [r3, #32]
	if (((uint16_t)sbus_rxBuf[23] >> 1) & 0x0001)  sbus_rcValue[17] = 2000; else sbus_rcValue[17] = 1000;
 800a472:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <sbus_decoding+0x31c>)
 800a474:	7ddb      	ldrb	r3, [r3, #23]
 800a476:	085b      	lsrs	r3, r3, #1
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d004      	beq.n	800a48c <sbus_decoding+0x2c0>
 800a482:	4b18      	ldr	r3, [pc, #96]	; (800a4e4 <sbus_decoding+0x318>)
 800a484:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a488:	845a      	strh	r2, [r3, #34]	; 0x22
 800a48a:	e003      	b.n	800a494 <sbus_decoding+0x2c8>
 800a48c:	4b15      	ldr	r3, [pc, #84]	; (800a4e4 <sbus_decoding+0x318>)
 800a48e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a492:	845a      	strh	r2, [r3, #34]	; 0x22

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a494:	2300      	movs	r3, #0
 800a496:	607b      	str	r3, [r7, #4]
 800a498:	e016      	b.n	800a4c8 <sbus_decoding+0x2fc>
		sbus_comp_rcValue[i] = (sbus_rcValue[i]) * 5 / 8 + 880;
 800a49a:	4a12      	ldr	r2, [pc, #72]	; (800a4e4 <sbus_decoding+0x318>)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	da00      	bge.n	800a4b0 <sbus_decoding+0x2e4>
 800a4ae:	3307      	adds	r3, #7
 800a4b0:	10db      	asrs	r3, r3, #3
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800a4b8:	b299      	uxth	r1, r3
 800a4ba:	4a0c      	ldr	r2, [pc, #48]	; (800a4ec <sbus_decoding+0x320>)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	607b      	str	r3, [r7, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b11      	cmp	r3, #17
 800a4cc:	dde5      	ble.n	800a49a <sbus_decoding+0x2ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe

	sbus_hzcnt++;
 800a4ce:	4b08      	ldr	r3, [pc, #32]	; (800a4f0 <sbus_decoding+0x324>)
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	4b06      	ldr	r3, [pc, #24]	; (800a4f0 <sbus_decoding+0x324>)
 800a4d8:	801a      	strh	r2, [r3, #0]
}
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	200004b4 	.word	0x200004b4
 800a4e8:	2000047c 	.word	0x2000047c
 800a4ec:	200004d8 	.word	0x200004d8
 800a4f0:	200004fc 	.word	0x200004fc

0800a4f4 <sbus_callback>:


void sbus_callback(){
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800a4f8:	4b33      	ldr	r3, [pc, #204]	; (800a5c8 <sbus_callback+0xd4>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
 800a4fe:	e05c      	b.n	800a5ba <sbus_callback+0xc6>
		_curByte = sbus_dmaBuf[i];
 800a500:	4b31      	ldr	r3, [pc, #196]	; (800a5c8 <sbus_callback+0xd4>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	4b31      	ldr	r3, [pc, #196]	; (800a5cc <sbus_callback+0xd8>)
 800a508:	5c9a      	ldrb	r2, [r3, r2]
 800a50a:	4b31      	ldr	r3, [pc, #196]	; (800a5d0 <sbus_callback+0xdc>)
 800a50c:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 800a50e:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <sbus_callback+0xe0>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d11f      	bne.n	800a556 <sbus_callback+0x62>
				if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 800a516:	4b2e      	ldr	r3, [pc, #184]	; (800a5d0 <sbus_callback+0xdc>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b0f      	cmp	r3, #15
 800a51c:	d117      	bne.n	800a54e <sbus_callback+0x5a>
 800a51e:	4b2e      	ldr	r3, [pc, #184]	; (800a5d8 <sbus_callback+0xe4>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d005      	beq.n	800a532 <sbus_callback+0x3e>
 800a526:	4b2c      	ldr	r3, [pc, #176]	; (800a5d8 <sbus_callback+0xe4>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	f003 030f 	and.w	r3, r3, #15
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10d      	bne.n	800a54e <sbus_callback+0x5a>
					sbus_rxBuf[_parserState] = _curByte;
 800a532:	4b28      	ldr	r3, [pc, #160]	; (800a5d4 <sbus_callback+0xe0>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	4b25      	ldr	r3, [pc, #148]	; (800a5d0 <sbus_callback+0xdc>)
 800a53a:	7819      	ldrb	r1, [r3, #0]
 800a53c:	4b27      	ldr	r3, [pc, #156]	; (800a5dc <sbus_callback+0xe8>)
 800a53e:	5499      	strb	r1, [r3, r2]
					_parserState++;
 800a540:	4b24      	ldr	r3, [pc, #144]	; (800a5d4 <sbus_callback+0xe0>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	b2da      	uxtb	r2, r3
 800a548:	4b22      	ldr	r3, [pc, #136]	; (800a5d4 <sbus_callback+0xe0>)
 800a54a:	701a      	strb	r2, [r3, #0]
 800a54c:	e02b      	b.n	800a5a6 <sbus_callback+0xb2>
				} else {
					_parserState = 0;
 800a54e:	4b21      	ldr	r3, [pc, #132]	; (800a5d4 <sbus_callback+0xe0>)
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	e027      	b.n	800a5a6 <sbus_callback+0xb2>
				}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 800a556:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <sbus_callback+0xe0>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b18      	cmp	r3, #24
 800a55c:	d80c      	bhi.n	800a578 <sbus_callback+0x84>
				sbus_rxBuf[_parserState] = _curByte;
 800a55e:	4b1d      	ldr	r3, [pc, #116]	; (800a5d4 <sbus_callback+0xe0>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	461a      	mov	r2, r3
 800a564:	4b1a      	ldr	r3, [pc, #104]	; (800a5d0 <sbus_callback+0xdc>)
 800a566:	7819      	ldrb	r1, [r3, #0]
 800a568:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <sbus_callback+0xe8>)
 800a56a:	5499      	strb	r1, [r3, r2]
				_parserState++;
 800a56c:	4b19      	ldr	r3, [pc, #100]	; (800a5d4 <sbus_callback+0xe0>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	3301      	adds	r3, #1
 800a572:	b2da      	uxtb	r2, r3
 800a574:	4b17      	ldr	r3, [pc, #92]	; (800a5d4 <sbus_callback+0xe0>)
 800a576:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 800a578:	4b16      	ldr	r3, [pc, #88]	; (800a5d4 <sbus_callback+0xe0>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b19      	cmp	r3, #25
 800a57e:	d112      	bne.n	800a5a6 <sbus_callback+0xb2>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 800a580:	4b13      	ldr	r3, [pc, #76]	; (800a5d0 <sbus_callback+0xdc>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d005      	beq.n	800a594 <sbus_callback+0xa0>
 800a588:	4b11      	ldr	r3, [pc, #68]	; (800a5d0 <sbus_callback+0xdc>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <sbus_callback+0xac>
					_parserState = 0;
 800a594:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <sbus_callback+0xe0>)
 800a596:	2200      	movs	r2, #0
 800a598:	701a      	strb	r2, [r3, #0]
					sbus_decoding();
 800a59a:	f7ff fe17 	bl	800a1cc <sbus_decoding>
 800a59e:	e002      	b.n	800a5a6 <sbus_callback+0xb2>
				}
				else {
					_parserState = 0;
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <sbus_callback+0xe0>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 800a5a6:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <sbus_callback+0xdc>)
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <sbus_callback+0xe4>)
 800a5ac:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800a5ae:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <sbus_callback+0xd4>)
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	4b04      	ldr	r3, [pc, #16]	; (800a5c8 <sbus_callback+0xd4>)
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	4b03      	ldr	r3, [pc, #12]	; (800a5c8 <sbus_callback+0xd4>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b18      	cmp	r3, #24
 800a5c0:	d99e      	bls.n	800a500 <sbus_callback+0xc>
	}
}
 800a5c2:	bf00      	nop
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000503 	.word	0x20000503
 800a5cc:	20000498 	.word	0x20000498
 800a5d0:	20000501 	.word	0x20000501
 800a5d4:	20000500 	.word	0x20000500
 800a5d8:	20000502 	.word	0x20000502
 800a5dc:	2000047c 	.word	0x2000047c

0800a5e0 <_write>:
//TM_GPS_t gps;
//uint8_t tempBuf;

//we can use printf
int _write(int file, unsigned char* p, int len) // for debug through uart3
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	230a      	movs	r3, #10
 800a5f2:	68b9      	ldr	r1, [r7, #8]
 800a5f4:	4803      	ldr	r0, [pc, #12]	; (800a604 <_write+0x24>)
 800a5f6:	f7fc fea0 	bl	800733a <HAL_UART_Transmit>
	return len;
 800a5fa:	687b      	ldr	r3, [r7, #4]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	200014e8 	.word	0x200014e8

0800a608 <BME280_main>:
}
#endif

float globalT, globalP, globalH;

void BME280_main(){
 800a608:	b590      	push	{r4, r7, lr}
 800a60a:	b089      	sub	sp, #36	; 0x24
 800a60c:	af02      	add	r7, sp, #8
	BME280(&hi2c2);
 800a60e:	4839      	ldr	r0, [pc, #228]	; (800a6f4 <BME280_main+0xec>)
 800a610:	f7fd ffd6 	bl	80085c0 <BME280>
	BME280_init(P_OSR_16, H_OSR_16, T_OSR_16, normal, BW0_042ODR,t_125ms);
 800a614:	2302      	movs	r3, #2
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	2303      	movs	r3, #3
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	2303      	movs	r3, #3
 800a61e:	2205      	movs	r2, #5
 800a620:	2105      	movs	r1, #5
 800a622:	2005      	movs	r0, #5
 800a624:	f7fe f826 	bl	8008674 <BME280_init>
	osDelay(100);
 800a628:	2064      	movs	r0, #100	; 0x64
 800a62a:	f000 f9d5 	bl	800a9d8 <osDelay>
	while(1){
//		uint8_t id = 0;
//		id = BME280_getChipID();
//		printf("%u\r\n", id);
		int32_t t = 0, p = 0, h = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	2300      	movs	r3, #0
 800a634:	613b      	str	r3, [r7, #16]
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
		t = BME280_readTemperature();
 800a63a:	f7fd ffda 	bl	80085f2 <BME280_readTemperature>
 800a63e:	6178      	str	r0, [r7, #20]
		p = BME280_readPressure();
 800a640:	f7fd ffed 	bl	800861e <BME280_readPressure>
 800a644:	6138      	str	r0, [r7, #16]
		h = BME280_readHumidity();
 800a646:	f7fe f800 	bl	800864a <BME280_readHumidity>
 800a64a:	4603      	mov	r3, r0
 800a64c:	60fb      	str	r3, [r7, #12]

		uint32_t comP, comH;
		int32_t comT;
		comT = BME280_compensate_T(t);
 800a64e:	6978      	ldr	r0, [r7, #20]
 800a650:	f7fe f8fa 	bl	8008848 <BME280_compensate_T>
 800a654:	60b8      	str	r0, [r7, #8]
		comP = BME280_compensate_P(p);
 800a656:	6938      	ldr	r0, [r7, #16]
 800a658:	f7fe f932 	bl	80088c0 <BME280_compensate_P>
 800a65c:	6078      	str	r0, [r7, #4]
		comH = BME280_compensate_H(h);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7fe fadc 	bl	8008c1c <BME280_compensate_H>
 800a664:	6038      	str	r0, [r7, #0]

		printf("%d %u %d\r\n", comT, comP, h);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	68b9      	ldr	r1, [r7, #8]
 800a66c:	4822      	ldr	r0, [pc, #136]	; (800a6f8 <BME280_main+0xf0>)
 800a66e:	f003 fb5f 	bl	800dd30 <iprintf>

		globalT = comT/100.0;
 800a672:	68b8      	ldr	r0, [r7, #8]
 800a674:	f7f5 ff66 	bl	8000544 <__aeabi_i2d>
 800a678:	f04f 0200 	mov.w	r2, #0
 800a67c:	4b1f      	ldr	r3, [pc, #124]	; (800a6fc <BME280_main+0xf4>)
 800a67e:	f7f6 f8f5 	bl	800086c <__aeabi_ddiv>
 800a682:	4603      	mov	r3, r0
 800a684:	460c      	mov	r4, r1
 800a686:	4618      	mov	r0, r3
 800a688:	4621      	mov	r1, r4
 800a68a:	f7f6 fabd 	bl	8000c08 <__aeabi_d2f>
 800a68e:	4602      	mov	r2, r0
 800a690:	4b1b      	ldr	r3, [pc, #108]	; (800a700 <BME280_main+0xf8>)
 800a692:	601a      	str	r2, [r3, #0]
		globalP = comP/256.0/1000.0;
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7f5 ff45 	bl	8000524 <__aeabi_ui2d>
 800a69a:	f04f 0200 	mov.w	r2, #0
 800a69e:	4b19      	ldr	r3, [pc, #100]	; (800a704 <BME280_main+0xfc>)
 800a6a0:	f7f6 f8e4 	bl	800086c <__aeabi_ddiv>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	f04f 0200 	mov.w	r2, #0
 800a6b0:	4b15      	ldr	r3, [pc, #84]	; (800a708 <BME280_main+0x100>)
 800a6b2:	f7f6 f8db 	bl	800086c <__aeabi_ddiv>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	460c      	mov	r4, r1
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	4621      	mov	r1, r4
 800a6be:	f7f6 faa3 	bl	8000c08 <__aeabi_d2f>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	4b11      	ldr	r3, [pc, #68]	; (800a70c <BME280_main+0x104>)
 800a6c6:	601a      	str	r2, [r3, #0]
		globalH = comH/1024.0;
 800a6c8:	6838      	ldr	r0, [r7, #0]
 800a6ca:	f7f5 ff2b 	bl	8000524 <__aeabi_ui2d>
 800a6ce:	f04f 0200 	mov.w	r2, #0
 800a6d2:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <BME280_main+0x108>)
 800a6d4:	f7f6 f8ca 	bl	800086c <__aeabi_ddiv>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	4618      	mov	r0, r3
 800a6de:	4621      	mov	r1, r4
 800a6e0:	f7f6 fa92 	bl	8000c08 <__aeabi_d2f>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <BME280_main+0x10c>)
 800a6e8:	601a      	str	r2, [r3, #0]
		osDelay(125);
 800a6ea:	207d      	movs	r0, #125	; 0x7d
 800a6ec:	f000 f974 	bl	800a9d8 <osDelay>
	while(1){
 800a6f0:	e79d      	b.n	800a62e <BME280_main+0x26>
 800a6f2:	bf00      	nop
 800a6f4:	20001254 	.word	0x20001254
 800a6f8:	08011578 	.word	0x08011578
 800a6fc:	40590000 	.word	0x40590000
 800a700:	20001b68 	.word	0x20001b68
 800a704:	40700000 	.word	0x40700000
 800a708:	408f4000 	.word	0x408f4000
 800a70c:	20001b6c 	.word	0x20001b6c
 800a710:	40900000 	.word	0x40900000
 800a714:	20001b64 	.word	0x20001b64

0800a718 <userMain>:
	}
}

void userMain(){
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af02      	add	r7, sp, #8
    setvbuf(stdout, NULL, _IONBF, 0);
 800a71e:	4b0c      	ldr	r3, [pc, #48]	; (800a750 <userMain+0x38>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6898      	ldr	r0, [r3, #8]
 800a724:	2300      	movs	r3, #0
 800a726:	2202      	movs	r2, #2
 800a728:	2100      	movs	r1, #0
 800a72a:	f003 fb8d 	bl	800de48 <setvbuf>

    printf("boot complete\r\n");
 800a72e:	4809      	ldr	r0, [pc, #36]	; (800a754 <userMain+0x3c>)
 800a730:	f003 fb72 	bl	800de18 <puts>

#ifdef USE_SBUS
	sbus_start(&huart7);
#endif

	xTaskCreate(BME280_main,
 800a734:	2300      	movs	r3, #0
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	2304      	movs	r3, #4
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	2300      	movs	r3, #0
 800a73e:	2280      	movs	r2, #128	; 0x80
 800a740:	4905      	ldr	r1, [pc, #20]	; (800a758 <userMain+0x40>)
 800a742:	4806      	ldr	r0, [pc, #24]	; (800a75c <userMain+0x44>)
 800a744:	f000 ff8c 	bl	800b660 <xTaskCreate>
				configMINIMAL_STACK_SIZE,
				NULL,
				4,
				NULL);
#endif
}
 800a748:	bf00      	nop
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20000010 	.word	0x20000010
 800a754:	08011584 	.word	0x08011584
 800a758:	08011594 	.word	0x08011594
 800a75c:	0800a609 	.word	0x0800a609

0800a760 <HAL_I2C_MemRxCpltCallback>:



//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
#endif

#ifdef USE_IST8310
	IST8310_rxCpltCallback(hi2c);
#endif
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7){
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a07      	ldr	r2, [pc, #28]	; (800a7a0 <HAL_UART_RxCpltCallback+0x2c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d101      	bne.n	800a78a <HAL_UART_RxCpltCallback+0x16>
		sbus_callback();
 800a786:	f7ff feb5 	bl	800a4f4 <sbus_callback>
	}
	if(huart->Instance == USART2){
		// telemetry
	}
	if(huart->Instance == UART4){
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a05      	ldr	r2, [pc, #20]	; (800a7a4 <HAL_UART_RxCpltCallback+0x30>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d101      	bne.n	800a798 <HAL_UART_RxCpltCallback+0x24>
		TM_GPS_Update();
 800a794:	f7fe fae0 	bl	8008d58 <TM_GPS_Update>
	}
}
 800a798:	bf00      	nop
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	40007800 	.word	0x40007800
 800a7a4:	40004c00 	.word	0x40004c00

0800a7a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a7ac:	bf00      	nop
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7be:	f3ef 8305 	mrs	r3, IPSR
 800a7c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10f      	bne.n	800a7ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ce:	607b      	str	r3, [r7, #4]
  return(result);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d105      	bne.n	800a7e2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7d6:	f3ef 8311 	mrs	r3, BASEPRI
 800a7da:	603b      	str	r3, [r7, #0]
  return(result);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <osKernelInitialize+0x3a>
 800a7e2:	4b0e      	ldr	r3, [pc, #56]	; (800a81c <osKernelInitialize+0x64>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d103      	bne.n	800a7f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a7ea:	f06f 0305 	mvn.w	r3, #5
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e00c      	b.n	800a80c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a7f2:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <osKernelInitialize+0x64>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d105      	bne.n	800a806 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a7fa:	4b08      	ldr	r3, [pc, #32]	; (800a81c <osKernelInitialize+0x64>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a800:	2300      	movs	r3, #0
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e002      	b.n	800a80c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a806:	f04f 33ff 	mov.w	r3, #4294967295
 800a80a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a80c:	68fb      	ldr	r3, [r7, #12]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	20000504 	.word	0x20000504

0800a820 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a826:	f3ef 8305 	mrs	r3, IPSR
 800a82a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a82c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10f      	bne.n	800a852 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a832:	f3ef 8310 	mrs	r3, PRIMASK
 800a836:	607b      	str	r3, [r7, #4]
  return(result);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d105      	bne.n	800a84a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a83e:	f3ef 8311 	mrs	r3, BASEPRI
 800a842:	603b      	str	r3, [r7, #0]
  return(result);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d007      	beq.n	800a85a <osKernelStart+0x3a>
 800a84a:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <osKernelStart+0x68>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d103      	bne.n	800a85a <osKernelStart+0x3a>
    stat = osErrorISR;
 800a852:	f06f 0305 	mvn.w	r3, #5
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e010      	b.n	800a87c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <osKernelStart+0x68>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d109      	bne.n	800a876 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a862:	f7ff ffa1 	bl	800a7a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a866:	4b08      	ldr	r3, [pc, #32]	; (800a888 <osKernelStart+0x68>)
 800a868:	2202      	movs	r2, #2
 800a86a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a86c:	f001 f870 	bl	800b950 <vTaskStartScheduler>
      stat = osOK;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	e002      	b.n	800a87c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a876:	f04f 33ff 	mov.w	r3, #4294967295
 800a87a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a87c:	68fb      	ldr	r3, [r7, #12]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000504 	.word	0x20000504

0800a88c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b090      	sub	sp, #64	; 0x40
 800a890:	af04      	add	r7, sp, #16
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a89c:	f3ef 8305 	mrs	r3, IPSR
 800a8a0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a8a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f040 808f 	bne.w	800a9c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ae:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d105      	bne.n	800a8c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a8ba:	617b      	str	r3, [r7, #20]
  return(result);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <osThreadNew+0x3e>
 800a8c2:	4b44      	ldr	r3, [pc, #272]	; (800a9d4 <osThreadNew+0x148>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d07e      	beq.n	800a9c8 <osThreadNew+0x13c>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d07b      	beq.n	800a9c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a8d0:	2380      	movs	r3, #128	; 0x80
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a8d4:	2318      	movs	r3, #24
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d045      	beq.n	800a974 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <osThreadNew+0x6a>
        name = attr->name;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	2b00      	cmp	r3, #0
 800a908:	d008      	beq.n	800a91c <osThreadNew+0x90>
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	2b38      	cmp	r3, #56	; 0x38
 800a90e:	d805      	bhi.n	800a91c <osThreadNew+0x90>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <osThreadNew+0x94>
        return (NULL);
 800a91c:	2300      	movs	r3, #0
 800a91e:	e054      	b.n	800a9ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	089b      	lsrs	r3, r3, #2
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00e      	beq.n	800a956 <osThreadNew+0xca>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	2b5b      	cmp	r3, #91	; 0x5b
 800a93e:	d90a      	bls.n	800a956 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a944:	2b00      	cmp	r3, #0
 800a946:	d006      	beq.n	800a956 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <osThreadNew+0xca>
        mem = 1;
 800a950:	2301      	movs	r3, #1
 800a952:	623b      	str	r3, [r7, #32]
 800a954:	e010      	b.n	800a978 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10c      	bne.n	800a978 <osThreadNew+0xec>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d108      	bne.n	800a978 <osThreadNew+0xec>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d104      	bne.n	800a978 <osThreadNew+0xec>
          mem = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
 800a972:	e001      	b.n	800a978 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d110      	bne.n	800a9a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a986:	9202      	str	r2, [sp, #8]
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 fe09 	bl	800b5ac <xTaskCreateStatic>
 800a99a:	4603      	mov	r3, r0
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	e013      	b.n	800a9c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d110      	bne.n	800a9c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	f107 0310 	add.w	r3, r7, #16
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 fe51 	bl	800b660 <xTaskCreate>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d001      	beq.n	800a9c8 <osThreadNew+0x13c>
          hTask = NULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a9c8:	693b      	ldr	r3, [r7, #16]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3730      	adds	r7, #48	; 0x30
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000504 	.word	0x20000504

0800a9d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9e0:	f3ef 8305 	mrs	r3, IPSR
 800a9e4:	613b      	str	r3, [r7, #16]
  return(result);
 800a9e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10f      	bne.n	800aa0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a9f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d105      	bne.n	800aa04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a9fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d007      	beq.n	800aa14 <osDelay+0x3c>
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <osDelay+0x58>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d103      	bne.n	800aa14 <osDelay+0x3c>
    stat = osErrorISR;
 800aa0c:	f06f 0305 	mvn.w	r3, #5
 800aa10:	617b      	str	r3, [r7, #20]
 800aa12:	e007      	b.n	800aa24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <osDelay+0x4c>
      vTaskDelay(ticks);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 ff62 	bl	800b8e8 <vTaskDelay>
    }
  }

  return (stat);
 800aa24:	697b      	ldr	r3, [r7, #20]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	20000504 	.word	0x20000504

0800aa34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4a07      	ldr	r2, [pc, #28]	; (800aa60 <vApplicationGetIdleTaskMemory+0x2c>)
 800aa44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	4a06      	ldr	r2, [pc, #24]	; (800aa64 <vApplicationGetIdleTaskMemory+0x30>)
 800aa4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2280      	movs	r2, #128	; 0x80
 800aa50:	601a      	str	r2, [r3, #0]
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	20000508 	.word	0x20000508
 800aa64:	20000564 	.word	0x20000564

0800aa68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4a07      	ldr	r2, [pc, #28]	; (800aa94 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	4a06      	ldr	r2, [pc, #24]	; (800aa98 <vApplicationGetTimerTaskMemory+0x30>)
 800aa7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa86:	601a      	str	r2, [r3, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	20000764 	.word	0x20000764
 800aa98:	200007c0 	.word	0x200007c0

0800aa9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f103 0208 	add.w	r2, r3, #8
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f04f 32ff 	mov.w	r2, #4294967295
 800aab4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f103 0208 	add.w	r2, r3, #8
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f103 0208 	add.w	r2, r3, #8
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	601a      	str	r2, [r3, #0]
}
 800ab32:	bf00      	nop
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b085      	sub	sp, #20
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab54:	d103      	bne.n	800ab5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	e00c      	b.n	800ab78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3308      	adds	r3, #8
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e002      	b.n	800ab6c <vListInsert+0x2e>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d2f6      	bcs.n	800ab66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	601a      	str	r2, [r3, #0]
}
 800aba4:	bf00      	nop
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	6892      	ldr	r2, [r2, #8]
 800abc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6852      	ldr	r2, [r2, #4]
 800abd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d103      	bne.n	800abe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	1e5a      	subs	r2, r3, #1
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d109      	bne.n	800ac2c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	e7fe      	b.n	800ac2a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ac2c:	f002 f80e 	bl	800cc4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac38:	68f9      	ldr	r1, [r7, #12]
 800ac3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac3c:	fb01 f303 	mul.w	r3, r1, r3
 800ac40:	441a      	add	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac62:	fb01 f303 	mul.w	r3, r1, r3
 800ac66:	441a      	add	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	22ff      	movs	r2, #255	; 0xff
 800ac70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	22ff      	movs	r2, #255	; 0xff
 800ac78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d114      	bne.n	800acac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01a      	beq.n	800acc0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3310      	adds	r3, #16
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f001 f8de 	bl	800be50 <xTaskRemoveFromEventList>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d012      	beq.n	800acc0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac9a:	4b0d      	ldr	r3, [pc, #52]	; (800acd0 <xQueueGenericReset+0xcc>)
 800ac9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	e009      	b.n	800acc0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	3310      	adds	r3, #16
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fef3 	bl	800aa9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3324      	adds	r3, #36	; 0x24
 800acba:	4618      	mov	r0, r3
 800acbc:	f7ff feee 	bl	800aa9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acc0:	f001 fff2 	bl	800cca8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acc4:	2301      	movs	r3, #1
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08e      	sub	sp, #56	; 0x38
 800acd8:	af02      	add	r7, sp, #8
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d109      	bne.n	800acfc <xQueueGenericCreateStatic+0x28>
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800acfa:	e7fe      	b.n	800acfa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d109      	bne.n	800ad16 <xQueueGenericCreateStatic+0x42>
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24
 800ad14:	e7fe      	b.n	800ad14 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <xQueueGenericCreateStatic+0x4e>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <xQueueGenericCreateStatic+0x52>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <xQueueGenericCreateStatic+0x54>
 800ad26:	2300      	movs	r3, #0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d109      	bne.n	800ad40 <xQueueGenericCreateStatic+0x6c>
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	623b      	str	r3, [r7, #32]
 800ad3e:	e7fe      	b.n	800ad3e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <xQueueGenericCreateStatic+0x78>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <xQueueGenericCreateStatic+0x7c>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e000      	b.n	800ad52 <xQueueGenericCreateStatic+0x7e>
 800ad50:	2300      	movs	r3, #0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d109      	bne.n	800ad6a <xQueueGenericCreateStatic+0x96>
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	61fb      	str	r3, [r7, #28]
 800ad68:	e7fe      	b.n	800ad68 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad6a:	2350      	movs	r3, #80	; 0x50
 800ad6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2b50      	cmp	r3, #80	; 0x50
 800ad72:	d009      	beq.n	800ad88 <xQueueGenericCreateStatic+0xb4>
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	61bb      	str	r3, [r7, #24]
 800ad86:	e7fe      	b.n	800ad86 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00d      	beq.n	800adb0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 f805 	bl	800adba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3730      	adds	r7, #48	; 0x30
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	607a      	str	r2, [r7, #4]
 800adc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	e002      	b.n	800addc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ade8:	2101      	movs	r1, #1
 800adea:	69b8      	ldr	r0, [r7, #24]
 800adec:	f7ff ff0a 	bl	800ac04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	78fa      	ldrb	r2, [r7, #3]
 800adf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08e      	sub	sp, #56	; 0x38
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d109      	bne.n	800ae30 <xQueueGenericSend+0x30>
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae2e:	e7fe      	b.n	800ae2e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d103      	bne.n	800ae3e <xQueueGenericSend+0x3e>
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <xQueueGenericSend+0x42>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e000      	b.n	800ae44 <xQueueGenericSend+0x44>
 800ae42:	2300      	movs	r3, #0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <xQueueGenericSend+0x5c>
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5a:	e7fe      	b.n	800ae5a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d103      	bne.n	800ae6a <xQueueGenericSend+0x6a>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <xQueueGenericSend+0x6e>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e000      	b.n	800ae70 <xQueueGenericSend+0x70>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d109      	bne.n	800ae88 <xQueueGenericSend+0x88>
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	623b      	str	r3, [r7, #32]
 800ae86:	e7fe      	b.n	800ae86 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae88:	f001 f998 	bl	800c1bc <xTaskGetSchedulerState>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d102      	bne.n	800ae98 <xQueueGenericSend+0x98>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <xQueueGenericSend+0x9c>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e000      	b.n	800ae9e <xQueueGenericSend+0x9e>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d109      	bne.n	800aeb6 <xQueueGenericSend+0xb6>
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	e7fe      	b.n	800aeb4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aeb6:	f001 fec9 	bl	800cc4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d302      	bcc.n	800aecc <xQueueGenericSend+0xcc>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d129      	bne.n	800af20 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed2:	f000 f9ff 	bl	800b2d4 <prvCopyDataToQueue>
 800aed6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d010      	beq.n	800af02 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	3324      	adds	r3, #36	; 0x24
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 ffb3 	bl	800be50 <xTaskRemoveFromEventList>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d013      	beq.n	800af18 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aef0:	4b3f      	ldr	r3, [pc, #252]	; (800aff0 <xQueueGenericSend+0x1f0>)
 800aef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	e00a      	b.n	800af18 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af04:	2b00      	cmp	r3, #0
 800af06:	d007      	beq.n	800af18 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af08:	4b39      	ldr	r3, [pc, #228]	; (800aff0 <xQueueGenericSend+0x1f0>)
 800af0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af18:	f001 fec6 	bl	800cca8 <vPortExitCritical>
				return pdPASS;
 800af1c:	2301      	movs	r3, #1
 800af1e:	e063      	b.n	800afe8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d103      	bne.n	800af2e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af26:	f001 febf 	bl	800cca8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	e05c      	b.n	800afe8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af30:	2b00      	cmp	r3, #0
 800af32:	d106      	bne.n	800af42 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af34:	f107 0314 	add.w	r3, r7, #20
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 ffeb 	bl	800bf14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af3e:	2301      	movs	r3, #1
 800af40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af42:	f001 feb1 	bl	800cca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af46:	f000 fd67 	bl	800ba18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af4a:	f001 fe7f 	bl	800cc4c <vPortEnterCritical>
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af54:	b25b      	sxtb	r3, r3
 800af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5a:	d103      	bne.n	800af64 <xQueueGenericSend+0x164>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af6a:	b25b      	sxtb	r3, r3
 800af6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af70:	d103      	bne.n	800af7a <xQueueGenericSend+0x17a>
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af7a:	f001 fe95 	bl	800cca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af7e:	1d3a      	adds	r2, r7, #4
 800af80:	f107 0314 	add.w	r3, r7, #20
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f000 ffda 	bl	800bf40 <xTaskCheckForTimeOut>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d124      	bne.n	800afdc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af94:	f000 fa96 	bl	800b4c4 <prvIsQueueFull>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d018      	beq.n	800afd0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	3310      	adds	r3, #16
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	4611      	mov	r1, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 ff04 	bl	800bdb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afae:	f000 fa21 	bl	800b3f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afb2:	f000 fd3f 	bl	800ba34 <xTaskResumeAll>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f47f af7c 	bne.w	800aeb6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800afbe:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <xQueueGenericSend+0x1f0>)
 800afc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	e772      	b.n	800aeb6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afd2:	f000 fa0f 	bl	800b3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afd6:	f000 fd2d 	bl	800ba34 <xTaskResumeAll>
 800afda:	e76c      	b.n	800aeb6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afde:	f000 fa09 	bl	800b3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afe2:	f000 fd27 	bl	800ba34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3738      	adds	r7, #56	; 0x38
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08e      	sub	sp, #56	; 0x38
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d109      	bne.n	800b020 <xQueueGenericSendFromISR+0x2c>
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	627b      	str	r3, [r7, #36]	; 0x24
 800b01e:	e7fe      	b.n	800b01e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d103      	bne.n	800b02e <xQueueGenericSendFromISR+0x3a>
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <xQueueGenericSendFromISR+0x3e>
 800b02e:	2301      	movs	r3, #1
 800b030:	e000      	b.n	800b034 <xQueueGenericSendFromISR+0x40>
 800b032:	2300      	movs	r3, #0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <xQueueGenericSendFromISR+0x58>
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	623b      	str	r3, [r7, #32]
 800b04a:	e7fe      	b.n	800b04a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d103      	bne.n	800b05a <xQueueGenericSendFromISR+0x66>
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b056:	2b01      	cmp	r3, #1
 800b058:	d101      	bne.n	800b05e <xQueueGenericSendFromISR+0x6a>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e000      	b.n	800b060 <xQueueGenericSendFromISR+0x6c>
 800b05e:	2300      	movs	r3, #0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d109      	bne.n	800b078 <xQueueGenericSendFromISR+0x84>
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	e7fe      	b.n	800b076 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b078:	f001 fec4 	bl	800ce04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b07c:	f3ef 8211 	mrs	r2, BASEPRI
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	61ba      	str	r2, [r7, #24]
 800b092:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b094:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b096:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d302      	bcc.n	800b0aa <xQueueGenericSendFromISR+0xb6>
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d12c      	bne.n	800b104 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ba:	f000 f90b 	bl	800b2d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d112      	bne.n	800b0ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d016      	beq.n	800b0fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	3324      	adds	r3, #36	; 0x24
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 febb 	bl	800be50 <xTaskRemoveFromEventList>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00e      	beq.n	800b0fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00b      	beq.n	800b0fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e007      	b.n	800b0fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	b25a      	sxtb	r2, r3
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0fe:	2301      	movs	r3, #1
 800b100:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b102:	e001      	b.n	800b108 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b104:	2300      	movs	r3, #0
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
 800b108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b114:	4618      	mov	r0, r3
 800b116:	3738      	adds	r7, #56	; 0x38
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08c      	sub	sp, #48	; 0x30
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b128:	2300      	movs	r3, #0
 800b12a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <xQueueReceive+0x2e>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	623b      	str	r3, [r7, #32]
 800b148:	e7fe      	b.n	800b148 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d103      	bne.n	800b158 <xQueueReceive+0x3c>
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <xQueueReceive+0x40>
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <xQueueReceive+0x42>
 800b15c:	2300      	movs	r3, #0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d109      	bne.n	800b176 <xQueueReceive+0x5a>
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	61fb      	str	r3, [r7, #28]
 800b174:	e7fe      	b.n	800b174 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b176:	f001 f821 	bl	800c1bc <xTaskGetSchedulerState>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d102      	bne.n	800b186 <xQueueReceive+0x6a>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <xQueueReceive+0x6e>
 800b186:	2301      	movs	r3, #1
 800b188:	e000      	b.n	800b18c <xQueueReceive+0x70>
 800b18a:	2300      	movs	r3, #0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d109      	bne.n	800b1a4 <xQueueReceive+0x88>
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	61bb      	str	r3, [r7, #24]
 800b1a2:	e7fe      	b.n	800b1a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1a4:	f001 fd52 	bl	800cc4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d01f      	beq.n	800b1f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1b4:	68b9      	ldr	r1, [r7, #8]
 800b1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b8:	f000 f8f6 	bl	800b3a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	1e5a      	subs	r2, r3, #1
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00f      	beq.n	800b1ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	3310      	adds	r3, #16
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fe3d 	bl	800be50 <xTaskRemoveFromEventList>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d007      	beq.n	800b1ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1dc:	4b3c      	ldr	r3, [pc, #240]	; (800b2d0 <xQueueReceive+0x1b4>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1ec:	f001 fd5c 	bl	800cca8 <vPortExitCritical>
				return pdPASS;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e069      	b.n	800b2c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1fa:	f001 fd55 	bl	800cca8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1fe:	2300      	movs	r3, #0
 800b200:	e062      	b.n	800b2c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b204:	2b00      	cmp	r3, #0
 800b206:	d106      	bne.n	800b216 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b208:	f107 0310 	add.w	r3, r7, #16
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fe81 	bl	800bf14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b212:	2301      	movs	r3, #1
 800b214:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b216:	f001 fd47 	bl	800cca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b21a:	f000 fbfd 	bl	800ba18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b21e:	f001 fd15 	bl	800cc4c <vPortEnterCritical>
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b228:	b25b      	sxtb	r3, r3
 800b22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22e:	d103      	bne.n	800b238 <xQueueReceive+0x11c>
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b23e:	b25b      	sxtb	r3, r3
 800b240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b244:	d103      	bne.n	800b24e <xQueueReceive+0x132>
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b24e:	f001 fd2b 	bl	800cca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b252:	1d3a      	adds	r2, r7, #4
 800b254:	f107 0310 	add.w	r3, r7, #16
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fe70 	bl	800bf40 <xTaskCheckForTimeOut>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d123      	bne.n	800b2ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b268:	f000 f916 	bl	800b498 <prvIsQueueEmpty>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d017      	beq.n	800b2a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	3324      	adds	r3, #36	; 0x24
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	4611      	mov	r1, r2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fd9a 	bl	800bdb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b282:	f000 f8b7 	bl	800b3f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b286:	f000 fbd5 	bl	800ba34 <xTaskResumeAll>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d189      	bne.n	800b1a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b290:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <xQueueReceive+0x1b4>)
 800b292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	e780      	b.n	800b1a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a4:	f000 f8a6 	bl	800b3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2a8:	f000 fbc4 	bl	800ba34 <xTaskResumeAll>
 800b2ac:	e77a      	b.n	800b1a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b0:	f000 f8a0 	bl	800b3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2b4:	f000 fbbe 	bl	800ba34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ba:	f000 f8ed 	bl	800b498 <prvIsQueueEmpty>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f43f af6f 	beq.w	800b1a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3730      	adds	r7, #48	; 0x30
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	e000ed04 	.word	0xe000ed04

0800b2d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10d      	bne.n	800b30e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d14d      	bne.n	800b396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 ff7a 	bl	800c1f8 <xTaskPriorityDisinherit>
 800b304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	609a      	str	r2, [r3, #8]
 800b30c:	e043      	b.n	800b396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d119      	bne.n	800b348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6858      	ldr	r0, [r3, #4]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31c:	461a      	mov	r2, r3
 800b31e:	68b9      	ldr	r1, [r7, #8]
 800b320:	f001 fe0c 	bl	800cf3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32c:	441a      	add	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d32b      	bcc.n	800b396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	605a      	str	r2, [r3, #4]
 800b346:	e026      	b.n	800b396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68d8      	ldr	r0, [r3, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b350:	461a      	mov	r2, r3
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	f001 fdf2 	bl	800cf3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	68da      	ldr	r2, [r3, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b360:	425b      	negs	r3, r3
 800b362:	441a      	add	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	429a      	cmp	r2, r3
 800b372:	d207      	bcs.n	800b384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	425b      	negs	r3, r3
 800b37e:	441a      	add	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b02      	cmp	r3, #2
 800b388:	d105      	bne.n	800b396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	3b01      	subs	r3, #1
 800b394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b39e:	697b      	ldr	r3, [r7, #20]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d018      	beq.n	800b3ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68da      	ldr	r2, [r3, #12]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c2:	441a      	add	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68da      	ldr	r2, [r3, #12]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d303      	bcc.n	800b3dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68d9      	ldr	r1, [r3, #12]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6838      	ldr	r0, [r7, #0]
 800b3e8:	f001 fda8 	bl	800cf3c <memcpy>
	}
}
 800b3ec:	bf00      	nop
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3fc:	f001 fc26 	bl	800cc4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b408:	e011      	b.n	800b42e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d012      	beq.n	800b438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3324      	adds	r3, #36	; 0x24
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fd1a 	bl	800be50 <xTaskRemoveFromEventList>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b422:	f000 fded 	bl	800c000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
 800b428:	3b01      	subs	r3, #1
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b432:	2b00      	cmp	r3, #0
 800b434:	dce9      	bgt.n	800b40a <prvUnlockQueue+0x16>
 800b436:	e000      	b.n	800b43a <prvUnlockQueue+0x46>
					break;
 800b438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	22ff      	movs	r2, #255	; 0xff
 800b43e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b442:	f001 fc31 	bl	800cca8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b446:	f001 fc01 	bl	800cc4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b452:	e011      	b.n	800b478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d012      	beq.n	800b482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3310      	adds	r3, #16
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fcf5 	bl	800be50 <xTaskRemoveFromEventList>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b46c:	f000 fdc8 	bl	800c000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	3b01      	subs	r3, #1
 800b474:	b2db      	uxtb	r3, r3
 800b476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dce9      	bgt.n	800b454 <prvUnlockQueue+0x60>
 800b480:	e000      	b.n	800b484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	22ff      	movs	r2, #255	; 0xff
 800b488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b48c:	f001 fc0c 	bl	800cca8 <vPortExitCritical>
}
 800b490:	bf00      	nop
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4a0:	f001 fbd4 	bl	800cc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d102      	bne.n	800b4b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e001      	b.n	800b4b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4b6:	f001 fbf7 	bl	800cca8 <vPortExitCritical>

	return xReturn;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4cc:	f001 fbbe 	bl	800cc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d102      	bne.n	800b4e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	e001      	b.n	800b4e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4e6:	f001 fbdf 	bl	800cca8 <vPortExitCritical>

	return xReturn;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	e014      	b.n	800b52e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b504:	4a0e      	ldr	r2, [pc, #56]	; (800b540 <vQueueAddToRegistry+0x4c>)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10b      	bne.n	800b528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b510:	490b      	ldr	r1, [pc, #44]	; (800b540 <vQueueAddToRegistry+0x4c>)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b51a:	4a09      	ldr	r2, [pc, #36]	; (800b540 <vQueueAddToRegistry+0x4c>)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	00db      	lsls	r3, r3, #3
 800b520:	4413      	add	r3, r2
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b526:	e005      	b.n	800b534 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3301      	adds	r3, #1
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b07      	cmp	r3, #7
 800b532:	d9e7      	bls.n	800b504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	20001b70 	.word	0x20001b70

0800b544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b554:	f001 fb7a 	bl	800cc4c <vPortEnterCritical>
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b55e:	b25b      	sxtb	r3, r3
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d103      	bne.n	800b56e <vQueueWaitForMessageRestricted+0x2a>
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b574:	b25b      	sxtb	r3, r3
 800b576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57a:	d103      	bne.n	800b584 <vQueueWaitForMessageRestricted+0x40>
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b584:	f001 fb90 	bl	800cca8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	3324      	adds	r3, #36	; 0x24
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	68b9      	ldr	r1, [r7, #8]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fc2f 	bl	800bdfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b59e:	6978      	ldr	r0, [r7, #20]
 800b5a0:	f7ff ff28 	bl	800b3f4 <prvUnlockQueue>
	}
 800b5a4:	bf00      	nop
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08e      	sub	sp, #56	; 0x38
 800b5b0:	af04      	add	r7, sp, #16
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d109      	bne.n	800b5d4 <xTaskCreateStatic+0x28>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	e7fe      	b.n	800b5d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d109      	bne.n	800b5ee <xTaskCreateStatic+0x42>
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e7fe      	b.n	800b5ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5ee:	235c      	movs	r3, #92	; 0x5c
 800b5f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b5c      	cmp	r3, #92	; 0x5c
 800b5f6:	d009      	beq.n	800b60c <xTaskCreateStatic+0x60>
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e7fe      	b.n	800b60a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b60c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	2b00      	cmp	r3, #0
 800b612:	d01e      	beq.n	800b652 <xTaskCreateStatic+0xa6>
 800b614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b616:	2b00      	cmp	r3, #0
 800b618:	d01b      	beq.n	800b652 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b622:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	2202      	movs	r2, #2
 800b628:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b62c:	2300      	movs	r3, #0
 800b62e:	9303      	str	r3, [sp, #12]
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	9302      	str	r3, [sp, #8]
 800b634:	f107 0314 	add.w	r3, r7, #20
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	68b9      	ldr	r1, [r7, #8]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 f850 	bl	800b6ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b64a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b64c:	f000 f8dc 	bl	800b808 <prvAddNewTaskToReadyList>
 800b650:	e001      	b.n	800b656 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b652:	2300      	movs	r3, #0
 800b654:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b656:	697b      	ldr	r3, [r7, #20]
	}
 800b658:	4618      	mov	r0, r3
 800b65a:	3728      	adds	r7, #40	; 0x28
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b660:	b580      	push	{r7, lr}
 800b662:	b08c      	sub	sp, #48	; 0x30
 800b664:	af04      	add	r7, sp, #16
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	603b      	str	r3, [r7, #0]
 800b66c:	4613      	mov	r3, r2
 800b66e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b670:	88fb      	ldrh	r3, [r7, #6]
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4618      	mov	r0, r3
 800b676:	f001 fc03 	bl	800ce80 <pvPortMalloc>
 800b67a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00e      	beq.n	800b6a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b682:	205c      	movs	r0, #92	; 0x5c
 800b684:	f001 fbfc 	bl	800ce80 <pvPortMalloc>
 800b688:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	631a      	str	r2, [r3, #48]	; 0x30
 800b696:	e005      	b.n	800b6a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b698:	6978      	ldr	r0, [r7, #20]
 800b69a:	f001 fc03 	bl	800cea4 <vPortFree>
 800b69e:	e001      	b.n	800b6a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d017      	beq.n	800b6da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6b2:	88fa      	ldrh	r2, [r7, #6]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	9302      	str	r3, [sp, #8]
 800b6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	68b9      	ldr	r1, [r7, #8]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 f80e 	bl	800b6ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6ce:	69f8      	ldr	r0, [r7, #28]
 800b6d0:	f000 f89a 	bl	800b808 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	e002      	b.n	800b6e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6da:	f04f 33ff 	mov.w	r3, #4294967295
 800b6de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6e0:	69bb      	ldr	r3, [r7, #24]
	}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b088      	sub	sp, #32
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
 800b6f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	461a      	mov	r2, r3
 800b702:	21a5      	movs	r1, #165	; 0xa5
 800b704:	f001 fc25 	bl	800cf52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b712:	3b01      	subs	r3, #1
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	f023 0307 	bic.w	r3, r3, #7
 800b720:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	f003 0307 	and.w	r3, r3, #7
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d009      	beq.n	800b740 <prvInitialiseNewTask+0x56>
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	617b      	str	r3, [r7, #20]
 800b73e:	e7fe      	b.n	800b73e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d01f      	beq.n	800b786 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b746:	2300      	movs	r3, #0
 800b748:	61fb      	str	r3, [r7, #28]
 800b74a:	e012      	b.n	800b772 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	4413      	add	r3, r2
 800b752:	7819      	ldrb	r1, [r3, #0]
 800b754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	4413      	add	r3, r2
 800b75a:	3334      	adds	r3, #52	; 0x34
 800b75c:	460a      	mov	r2, r1
 800b75e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	4413      	add	r3, r2
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d006      	beq.n	800b77a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	3301      	adds	r3, #1
 800b770:	61fb      	str	r3, [r7, #28]
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	2b0f      	cmp	r3, #15
 800b776:	d9e9      	bls.n	800b74c <prvInitialiseNewTask+0x62>
 800b778:	e000      	b.n	800b77c <prvInitialiseNewTask+0x92>
			{
				break;
 800b77a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b784:	e003      	b.n	800b78e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	2b37      	cmp	r3, #55	; 0x37
 800b792:	d901      	bls.n	800b798 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b794:	2337      	movs	r3, #55	; 0x37
 800b796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7ff f994 	bl	800aadc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	3318      	adds	r3, #24
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff f98f 	bl	800aadc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	68f9      	ldr	r1, [r7, #12]
 800b7e6:	69b8      	ldr	r0, [r7, #24]
 800b7e8:	f001 f90c 	bl	800ca04 <pxPortInitialiseStack>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d002      	beq.n	800b7fe <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7fe:	bf00      	nop
 800b800:	3720      	adds	r7, #32
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b810:	f001 fa1c 	bl	800cc4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b814:	4b2d      	ldr	r3, [pc, #180]	; (800b8cc <prvAddNewTaskToReadyList+0xc4>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3301      	adds	r3, #1
 800b81a:	4a2c      	ldr	r2, [pc, #176]	; (800b8cc <prvAddNewTaskToReadyList+0xc4>)
 800b81c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b81e:	4b2c      	ldr	r3, [pc, #176]	; (800b8d0 <prvAddNewTaskToReadyList+0xc8>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b826:	4a2a      	ldr	r2, [pc, #168]	; (800b8d0 <prvAddNewTaskToReadyList+0xc8>)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b82c:	4b27      	ldr	r3, [pc, #156]	; (800b8cc <prvAddNewTaskToReadyList+0xc4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d110      	bne.n	800b856 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b834:	f000 fc08 	bl	800c048 <prvInitialiseTaskLists>
 800b838:	e00d      	b.n	800b856 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b83a:	4b26      	ldr	r3, [pc, #152]	; (800b8d4 <prvAddNewTaskToReadyList+0xcc>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d109      	bne.n	800b856 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b842:	4b23      	ldr	r3, [pc, #140]	; (800b8d0 <prvAddNewTaskToReadyList+0xc8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d802      	bhi.n	800b856 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b850:	4a1f      	ldr	r2, [pc, #124]	; (800b8d0 <prvAddNewTaskToReadyList+0xc8>)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b856:	4b20      	ldr	r3, [pc, #128]	; (800b8d8 <prvAddNewTaskToReadyList+0xd0>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3301      	adds	r3, #1
 800b85c:	4a1e      	ldr	r2, [pc, #120]	; (800b8d8 <prvAddNewTaskToReadyList+0xd0>)
 800b85e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b860:	4b1d      	ldr	r3, [pc, #116]	; (800b8d8 <prvAddNewTaskToReadyList+0xd0>)
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	4b1b      	ldr	r3, [pc, #108]	; (800b8dc <prvAddNewTaskToReadyList+0xd4>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	d903      	bls.n	800b87c <prvAddNewTaskToReadyList+0x74>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b878:	4a18      	ldr	r2, [pc, #96]	; (800b8dc <prvAddNewTaskToReadyList+0xd4>)
 800b87a:	6013      	str	r3, [r2, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b880:	4613      	mov	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4a15      	ldr	r2, [pc, #84]	; (800b8e0 <prvAddNewTaskToReadyList+0xd8>)
 800b88a:	441a      	add	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3304      	adds	r3, #4
 800b890:	4619      	mov	r1, r3
 800b892:	4610      	mov	r0, r2
 800b894:	f7ff f92f 	bl	800aaf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b898:	f001 fa06 	bl	800cca8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b89c:	4b0d      	ldr	r3, [pc, #52]	; (800b8d4 <prvAddNewTaskToReadyList+0xcc>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00e      	beq.n	800b8c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8a4:	4b0a      	ldr	r3, [pc, #40]	; (800b8d0 <prvAddNewTaskToReadyList+0xc8>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d207      	bcs.n	800b8c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8b2:	4b0c      	ldr	r3, [pc, #48]	; (800b8e4 <prvAddNewTaskToReadyList+0xdc>)
 800b8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20001094 	.word	0x20001094
 800b8d0:	20000bc0 	.word	0x20000bc0
 800b8d4:	200010a0 	.word	0x200010a0
 800b8d8:	200010b0 	.word	0x200010b0
 800b8dc:	2000109c 	.word	0x2000109c
 800b8e0:	20000bc4 	.word	0x20000bc4
 800b8e4:	e000ed04 	.word	0xe000ed04

0800b8e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d016      	beq.n	800b928 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8fa:	4b13      	ldr	r3, [pc, #76]	; (800b948 <vTaskDelay+0x60>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <vTaskDelay+0x2e>
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60bb      	str	r3, [r7, #8]
 800b914:	e7fe      	b.n	800b914 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b916:	f000 f87f 	bl	800ba18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b91a:	2100      	movs	r1, #0
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fcd7 	bl	800c2d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b922:	f000 f887 	bl	800ba34 <xTaskResumeAll>
 800b926:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d107      	bne.n	800b93e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b92e:	4b07      	ldr	r3, [pc, #28]	; (800b94c <vTaskDelay+0x64>)
 800b930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b934:	601a      	str	r2, [r3, #0]
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	200010bc 	.word	0x200010bc
 800b94c:	e000ed04 	.word	0xe000ed04

0800b950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08a      	sub	sp, #40	; 0x28
 800b954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b956:	2300      	movs	r3, #0
 800b958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b95e:	463a      	mov	r2, r7
 800b960:	1d39      	adds	r1, r7, #4
 800b962:	f107 0308 	add.w	r3, r7, #8
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff f864 	bl	800aa34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	9202      	str	r2, [sp, #8]
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	2300      	movs	r3, #0
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	2300      	movs	r3, #0
 800b97c:	460a      	mov	r2, r1
 800b97e:	4920      	ldr	r1, [pc, #128]	; (800ba00 <vTaskStartScheduler+0xb0>)
 800b980:	4820      	ldr	r0, [pc, #128]	; (800ba04 <vTaskStartScheduler+0xb4>)
 800b982:	f7ff fe13 	bl	800b5ac <xTaskCreateStatic>
 800b986:	4602      	mov	r2, r0
 800b988:	4b1f      	ldr	r3, [pc, #124]	; (800ba08 <vTaskStartScheduler+0xb8>)
 800b98a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b98c:	4b1e      	ldr	r3, [pc, #120]	; (800ba08 <vTaskStartScheduler+0xb8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b994:	2301      	movs	r3, #1
 800b996:	617b      	str	r3, [r7, #20]
 800b998:	e001      	b.n	800b99e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d102      	bne.n	800b9aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b9a4:	f000 fce8 	bl	800c378 <xTimerCreateTimerTask>
 800b9a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d115      	bne.n	800b9dc <vTaskStartScheduler+0x8c>
 800b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <vTaskStartScheduler+0xbc>)
 800b9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9ca:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <vTaskStartScheduler+0xc0>)
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9d0:	4b10      	ldr	r3, [pc, #64]	; (800ba14 <vTaskStartScheduler+0xc4>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9d6:	f001 f89b 	bl	800cb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9da:	e00d      	b.n	800b9f8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e2:	d109      	bne.n	800b9f8 <vTaskStartScheduler+0xa8>
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e7fe      	b.n	800b9f6 <vTaskStartScheduler+0xa6>
}
 800b9f8:	bf00      	nop
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	080115a0 	.word	0x080115a0
 800ba04:	0800c019 	.word	0x0800c019
 800ba08:	200010b8 	.word	0x200010b8
 800ba0c:	200010b4 	.word	0x200010b4
 800ba10:	200010a0 	.word	0x200010a0
 800ba14:	20001098 	.word	0x20001098

0800ba18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ba1c:	4b04      	ldr	r3, [pc, #16]	; (800ba30 <vTaskSuspendAll+0x18>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	4a03      	ldr	r2, [pc, #12]	; (800ba30 <vTaskSuspendAll+0x18>)
 800ba24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ba26:	bf00      	nop
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	200010bc 	.word	0x200010bc

0800ba34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba42:	4b41      	ldr	r3, [pc, #260]	; (800bb48 <xTaskResumeAll+0x114>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d109      	bne.n	800ba5e <xTaskResumeAll+0x2a>
 800ba4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	e7fe      	b.n	800ba5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba5e:	f001 f8f5 	bl	800cc4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba62:	4b39      	ldr	r3, [pc, #228]	; (800bb48 <xTaskResumeAll+0x114>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	4a37      	ldr	r2, [pc, #220]	; (800bb48 <xTaskResumeAll+0x114>)
 800ba6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba6c:	4b36      	ldr	r3, [pc, #216]	; (800bb48 <xTaskResumeAll+0x114>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d162      	bne.n	800bb3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba74:	4b35      	ldr	r3, [pc, #212]	; (800bb4c <xTaskResumeAll+0x118>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d05e      	beq.n	800bb3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba7c:	e02f      	b.n	800bade <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7e:	4b34      	ldr	r3, [pc, #208]	; (800bb50 <xTaskResumeAll+0x11c>)
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3318      	adds	r3, #24
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff f890 	bl	800abb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7ff f88b 	bl	800abb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9e:	4b2d      	ldr	r3, [pc, #180]	; (800bb54 <xTaskResumeAll+0x120>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d903      	bls.n	800baae <xTaskResumeAll+0x7a>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baaa:	4a2a      	ldr	r2, [pc, #168]	; (800bb54 <xTaskResumeAll+0x120>)
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4a27      	ldr	r2, [pc, #156]	; (800bb58 <xTaskResumeAll+0x124>)
 800babc:	441a      	add	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3304      	adds	r3, #4
 800bac2:	4619      	mov	r1, r3
 800bac4:	4610      	mov	r0, r2
 800bac6:	f7ff f816 	bl	800aaf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bace:	4b23      	ldr	r3, [pc, #140]	; (800bb5c <xTaskResumeAll+0x128>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d302      	bcc.n	800bade <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bad8:	4b21      	ldr	r3, [pc, #132]	; (800bb60 <xTaskResumeAll+0x12c>)
 800bada:	2201      	movs	r2, #1
 800badc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bade:	4b1c      	ldr	r3, [pc, #112]	; (800bb50 <xTaskResumeAll+0x11c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1cb      	bne.n	800ba7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baec:	f000 fb46 	bl	800c17c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800baf0:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <xTaskResumeAll+0x130>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d010      	beq.n	800bb1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bafc:	f000 f846 	bl	800bb8c <xTaskIncrementTick>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bb06:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <xTaskResumeAll+0x12c>)
 800bb08:	2201      	movs	r2, #1
 800bb0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1f1      	bne.n	800bafc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bb18:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <xTaskResumeAll+0x130>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb1e:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <xTaskResumeAll+0x12c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb26:	2301      	movs	r3, #1
 800bb28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb2a:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <xTaskResumeAll+0x134>)
 800bb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb3a:	f001 f8b5 	bl	800cca8 <vPortExitCritical>

	return xAlreadyYielded;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	200010bc 	.word	0x200010bc
 800bb4c:	20001094 	.word	0x20001094
 800bb50:	20001054 	.word	0x20001054
 800bb54:	2000109c 	.word	0x2000109c
 800bb58:	20000bc4 	.word	0x20000bc4
 800bb5c:	20000bc0 	.word	0x20000bc0
 800bb60:	200010a8 	.word	0x200010a8
 800bb64:	200010a4 	.word	0x200010a4
 800bb68:	e000ed04 	.word	0xe000ed04

0800bb6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb72:	4b05      	ldr	r3, [pc, #20]	; (800bb88 <xTaskGetTickCount+0x1c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb78:	687b      	ldr	r3, [r7, #4]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20001098 	.word	0x20001098

0800bb8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb96:	4b4e      	ldr	r3, [pc, #312]	; (800bcd0 <xTaskIncrementTick+0x144>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f040 8088 	bne.w	800bcb0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bba0:	4b4c      	ldr	r3, [pc, #304]	; (800bcd4 <xTaskIncrementTick+0x148>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3301      	adds	r3, #1
 800bba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bba8:	4a4a      	ldr	r2, [pc, #296]	; (800bcd4 <xTaskIncrementTick+0x148>)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11f      	bne.n	800bbf4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbb4:	4b48      	ldr	r3, [pc, #288]	; (800bcd8 <xTaskIncrementTick+0x14c>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d009      	beq.n	800bbd2 <xTaskIncrementTick+0x46>
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	603b      	str	r3, [r7, #0]
 800bbd0:	e7fe      	b.n	800bbd0 <xTaskIncrementTick+0x44>
 800bbd2:	4b41      	ldr	r3, [pc, #260]	; (800bcd8 <xTaskIncrementTick+0x14c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	4b40      	ldr	r3, [pc, #256]	; (800bcdc <xTaskIncrementTick+0x150>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a3e      	ldr	r2, [pc, #248]	; (800bcd8 <xTaskIncrementTick+0x14c>)
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	4a3e      	ldr	r2, [pc, #248]	; (800bcdc <xTaskIncrementTick+0x150>)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	4b3e      	ldr	r3, [pc, #248]	; (800bce0 <xTaskIncrementTick+0x154>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3301      	adds	r3, #1
 800bbec:	4a3c      	ldr	r2, [pc, #240]	; (800bce0 <xTaskIncrementTick+0x154>)
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	f000 fac4 	bl	800c17c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbf4:	4b3b      	ldr	r3, [pc, #236]	; (800bce4 <xTaskIncrementTick+0x158>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d349      	bcc.n	800bc92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbfe:	4b36      	ldr	r3, [pc, #216]	; (800bcd8 <xTaskIncrementTick+0x14c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d104      	bne.n	800bc12 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc08:	4b36      	ldr	r3, [pc, #216]	; (800bce4 <xTaskIncrementTick+0x158>)
 800bc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0e:	601a      	str	r2, [r3, #0]
					break;
 800bc10:	e03f      	b.n	800bc92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc12:	4b31      	ldr	r3, [pc, #196]	; (800bcd8 <xTaskIncrementTick+0x14c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d203      	bcs.n	800bc32 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc2a:	4a2e      	ldr	r2, [pc, #184]	; (800bce4 <xTaskIncrementTick+0x158>)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc30:	e02f      	b.n	800bc92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	3304      	adds	r3, #4
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe ffba 	bl	800abb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d004      	beq.n	800bc4e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	3318      	adds	r3, #24
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fe ffb1 	bl	800abb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc52:	4b25      	ldr	r3, [pc, #148]	; (800bce8 <xTaskIncrementTick+0x15c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d903      	bls.n	800bc62 <xTaskIncrementTick+0xd6>
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5e:	4a22      	ldr	r2, [pc, #136]	; (800bce8 <xTaskIncrementTick+0x15c>)
 800bc60:	6013      	str	r3, [r2, #0]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc66:	4613      	mov	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4413      	add	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4a1f      	ldr	r2, [pc, #124]	; (800bcec <xTaskIncrementTick+0x160>)
 800bc70:	441a      	add	r2, r3
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	3304      	adds	r3, #4
 800bc76:	4619      	mov	r1, r3
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f7fe ff3c 	bl	800aaf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc82:	4b1b      	ldr	r3, [pc, #108]	; (800bcf0 <xTaskIncrementTick+0x164>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d3b8      	bcc.n	800bbfe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc90:	e7b5      	b.n	800bbfe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc92:	4b17      	ldr	r3, [pc, #92]	; (800bcf0 <xTaskIncrementTick+0x164>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc98:	4914      	ldr	r1, [pc, #80]	; (800bcec <xTaskIncrementTick+0x160>)
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	440b      	add	r3, r1
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d907      	bls.n	800bcba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	617b      	str	r3, [r7, #20]
 800bcae:	e004      	b.n	800bcba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bcb0:	4b10      	ldr	r3, [pc, #64]	; (800bcf4 <xTaskIncrementTick+0x168>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	4a0f      	ldr	r2, [pc, #60]	; (800bcf4 <xTaskIncrementTick+0x168>)
 800bcb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bcba:	4b0f      	ldr	r3, [pc, #60]	; (800bcf8 <xTaskIncrementTick+0x16c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bcc6:	697b      	ldr	r3, [r7, #20]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	200010bc 	.word	0x200010bc
 800bcd4:	20001098 	.word	0x20001098
 800bcd8:	2000104c 	.word	0x2000104c
 800bcdc:	20001050 	.word	0x20001050
 800bce0:	200010ac 	.word	0x200010ac
 800bce4:	200010b4 	.word	0x200010b4
 800bce8:	2000109c 	.word	0x2000109c
 800bcec:	20000bc4 	.word	0x20000bc4
 800bcf0:	20000bc0 	.word	0x20000bc0
 800bcf4:	200010a4 	.word	0x200010a4
 800bcf8:	200010a8 	.word	0x200010a8

0800bcfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd02:	4b27      	ldr	r3, [pc, #156]	; (800bda0 <vTaskSwitchContext+0xa4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd0a:	4b26      	ldr	r3, [pc, #152]	; (800bda4 <vTaskSwitchContext+0xa8>)
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd10:	e040      	b.n	800bd94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bd12:	4b24      	ldr	r3, [pc, #144]	; (800bda4 <vTaskSwitchContext+0xa8>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd18:	4b23      	ldr	r3, [pc, #140]	; (800bda8 <vTaskSwitchContext+0xac>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	e00f      	b.n	800bd40 <vTaskSwitchContext+0x44>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <vTaskSwitchContext+0x3e>
 800bd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	607b      	str	r3, [r7, #4]
 800bd38:	e7fe      	b.n	800bd38 <vTaskSwitchContext+0x3c>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	491a      	ldr	r1, [pc, #104]	; (800bdac <vTaskSwitchContext+0xb0>)
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d0e5      	beq.n	800bd20 <vTaskSwitchContext+0x24>
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4613      	mov	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4a13      	ldr	r2, [pc, #76]	; (800bdac <vTaskSwitchContext+0xb0>)
 800bd60:	4413      	add	r3, r2
 800bd62:	60bb      	str	r3, [r7, #8]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	605a      	str	r2, [r3, #4]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	3308      	adds	r3, #8
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d104      	bne.n	800bd84 <vTaskSwitchContext+0x88>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	605a      	str	r2, [r3, #4]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <vTaskSwitchContext+0xb4>)
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	4a06      	ldr	r2, [pc, #24]	; (800bda8 <vTaskSwitchContext+0xac>)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6013      	str	r3, [r2, #0]
}
 800bd94:	bf00      	nop
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	200010bc 	.word	0x200010bc
 800bda4:	200010a8 	.word	0x200010a8
 800bda8:	2000109c 	.word	0x2000109c
 800bdac:	20000bc4 	.word	0x20000bc4
 800bdb0:	20000bc0 	.word	0x20000bc0

0800bdb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d109      	bne.n	800bdd8 <vTaskPlaceOnEventList+0x24>
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	60fb      	str	r3, [r7, #12]
 800bdd6:	e7fe      	b.n	800bdd6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdd8:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <vTaskPlaceOnEventList+0x44>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3318      	adds	r3, #24
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7fe feac 	bl	800ab3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bde6:	2101      	movs	r1, #1
 800bde8:	6838      	ldr	r0, [r7, #0]
 800bdea:	f000 fa71 	bl	800c2d0 <prvAddCurrentTaskToDelayedList>
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000bc0 	.word	0x20000bc0

0800bdfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d109      	bne.n	800be22 <vTaskPlaceOnEventListRestricted+0x26>
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e7fe      	b.n	800be20 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be22:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <vTaskPlaceOnEventListRestricted+0x50>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3318      	adds	r3, #24
 800be28:	4619      	mov	r1, r3
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7fe fe63 	bl	800aaf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800be36:	f04f 33ff 	mov.w	r3, #4294967295
 800be3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	68b8      	ldr	r0, [r7, #8]
 800be40:	f000 fa46 	bl	800c2d0 <prvAddCurrentTaskToDelayedList>
	}
 800be44:	bf00      	nop
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	20000bc0 	.word	0x20000bc0

0800be50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d109      	bne.n	800be7a <xTaskRemoveFromEventList+0x2a>
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	60fb      	str	r3, [r7, #12]
 800be78:	e7fe      	b.n	800be78 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	3318      	adds	r3, #24
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fe fe96 	bl	800abb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be84:	4b1d      	ldr	r3, [pc, #116]	; (800befc <xTaskRemoveFromEventList+0xac>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d11d      	bne.n	800bec8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	3304      	adds	r3, #4
 800be90:	4618      	mov	r0, r3
 800be92:	f7fe fe8d 	bl	800abb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9a:	4b19      	ldr	r3, [pc, #100]	; (800bf00 <xTaskRemoveFromEventList+0xb0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d903      	bls.n	800beaa <xTaskRemoveFromEventList+0x5a>
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea6:	4a16      	ldr	r2, [pc, #88]	; (800bf00 <xTaskRemoveFromEventList+0xb0>)
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	4613      	mov	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4a13      	ldr	r2, [pc, #76]	; (800bf04 <xTaskRemoveFromEventList+0xb4>)
 800beb8:	441a      	add	r2, r3
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	3304      	adds	r3, #4
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7fe fe18 	bl	800aaf6 <vListInsertEnd>
 800bec6:	e005      	b.n	800bed4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	3318      	adds	r3, #24
 800becc:	4619      	mov	r1, r3
 800bece:	480e      	ldr	r0, [pc, #56]	; (800bf08 <xTaskRemoveFromEventList+0xb8>)
 800bed0:	f7fe fe11 	bl	800aaf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed8:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <xTaskRemoveFromEventList+0xbc>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	429a      	cmp	r2, r3
 800bee0:	d905      	bls.n	800beee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bee2:	2301      	movs	r3, #1
 800bee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bee6:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <xTaskRemoveFromEventList+0xc0>)
 800bee8:	2201      	movs	r2, #1
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	e001      	b.n	800bef2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800beee:	2300      	movs	r3, #0
 800bef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bef2:	697b      	ldr	r3, [r7, #20]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3718      	adds	r7, #24
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	200010bc 	.word	0x200010bc
 800bf00:	2000109c 	.word	0x2000109c
 800bf04:	20000bc4 	.word	0x20000bc4
 800bf08:	20001054 	.word	0x20001054
 800bf0c:	20000bc0 	.word	0x20000bc0
 800bf10:	200010a8 	.word	0x200010a8

0800bf14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <vTaskInternalSetTimeOutState+0x24>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf24:	4b05      	ldr	r3, [pc, #20]	; (800bf3c <vTaskInternalSetTimeOutState+0x28>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	605a      	str	r2, [r3, #4]
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	200010ac 	.word	0x200010ac
 800bf3c:	20001098 	.word	0x20001098

0800bf40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <xTaskCheckForTimeOut+0x24>
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	613b      	str	r3, [r7, #16]
 800bf62:	e7fe      	b.n	800bf62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <xTaskCheckForTimeOut+0x3e>
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e7fe      	b.n	800bf7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bf7e:	f000 fe65 	bl	800cc4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf82:	4b1d      	ldr	r3, [pc, #116]	; (800bff8 <xTaskCheckForTimeOut+0xb8>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9a:	d102      	bne.n	800bfa2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	61fb      	str	r3, [r7, #28]
 800bfa0:	e023      	b.n	800bfea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	4b15      	ldr	r3, [pc, #84]	; (800bffc <xTaskCheckForTimeOut+0xbc>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d007      	beq.n	800bfbe <xTaskCheckForTimeOut+0x7e>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d302      	bcc.n	800bfbe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	61fb      	str	r3, [r7, #28]
 800bfbc:	e015      	b.n	800bfea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d20b      	bcs.n	800bfe0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	1ad2      	subs	r2, r2, r3
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ff9d 	bl	800bf14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	e004      	b.n	800bfea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfea:	f000 fe5d 	bl	800cca8 <vPortExitCritical>

	return xReturn;
 800bfee:	69fb      	ldr	r3, [r7, #28]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3720      	adds	r7, #32
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20001098 	.word	0x20001098
 800bffc:	200010ac 	.word	0x200010ac

0800c000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c000:	b480      	push	{r7}
 800c002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c004:	4b03      	ldr	r3, [pc, #12]	; (800c014 <vTaskMissedYield+0x14>)
 800c006:	2201      	movs	r2, #1
 800c008:	601a      	str	r2, [r3, #0]
}
 800c00a:	bf00      	nop
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr
 800c014:	200010a8 	.word	0x200010a8

0800c018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c020:	f000 f852 	bl	800c0c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c024:	4b06      	ldr	r3, [pc, #24]	; (800c040 <prvIdleTask+0x28>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d9f9      	bls.n	800c020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c02c:	4b05      	ldr	r3, [pc, #20]	; (800c044 <prvIdleTask+0x2c>)
 800c02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c03c:	e7f0      	b.n	800c020 <prvIdleTask+0x8>
 800c03e:	bf00      	nop
 800c040:	20000bc4 	.word	0x20000bc4
 800c044:	e000ed04 	.word	0xe000ed04

0800c048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c04e:	2300      	movs	r3, #0
 800c050:	607b      	str	r3, [r7, #4]
 800c052:	e00c      	b.n	800c06e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4a12      	ldr	r2, [pc, #72]	; (800c0a8 <prvInitialiseTaskLists+0x60>)
 800c060:	4413      	add	r3, r2
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe fd1a 	bl	800aa9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3301      	adds	r3, #1
 800c06c:	607b      	str	r3, [r7, #4]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b37      	cmp	r3, #55	; 0x37
 800c072:	d9ef      	bls.n	800c054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c074:	480d      	ldr	r0, [pc, #52]	; (800c0ac <prvInitialiseTaskLists+0x64>)
 800c076:	f7fe fd11 	bl	800aa9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c07a:	480d      	ldr	r0, [pc, #52]	; (800c0b0 <prvInitialiseTaskLists+0x68>)
 800c07c:	f7fe fd0e 	bl	800aa9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c080:	480c      	ldr	r0, [pc, #48]	; (800c0b4 <prvInitialiseTaskLists+0x6c>)
 800c082:	f7fe fd0b 	bl	800aa9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c086:	480c      	ldr	r0, [pc, #48]	; (800c0b8 <prvInitialiseTaskLists+0x70>)
 800c088:	f7fe fd08 	bl	800aa9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c08c:	480b      	ldr	r0, [pc, #44]	; (800c0bc <prvInitialiseTaskLists+0x74>)
 800c08e:	f7fe fd05 	bl	800aa9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c092:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <prvInitialiseTaskLists+0x78>)
 800c094:	4a05      	ldr	r2, [pc, #20]	; (800c0ac <prvInitialiseTaskLists+0x64>)
 800c096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c098:	4b0a      	ldr	r3, [pc, #40]	; (800c0c4 <prvInitialiseTaskLists+0x7c>)
 800c09a:	4a05      	ldr	r2, [pc, #20]	; (800c0b0 <prvInitialiseTaskLists+0x68>)
 800c09c:	601a      	str	r2, [r3, #0]
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20000bc4 	.word	0x20000bc4
 800c0ac:	20001024 	.word	0x20001024
 800c0b0:	20001038 	.word	0x20001038
 800c0b4:	20001054 	.word	0x20001054
 800c0b8:	20001068 	.word	0x20001068
 800c0bc:	20001080 	.word	0x20001080
 800c0c0:	2000104c 	.word	0x2000104c
 800c0c4:	20001050 	.word	0x20001050

0800c0c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0ce:	e019      	b.n	800c104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0d0:	f000 fdbc 	bl	800cc4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <prvCheckTasksWaitingTermination+0x4c>)
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	3304      	adds	r3, #4
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fe fd65 	bl	800abb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0e6:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <prvCheckTasksWaitingTermination+0x50>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	4a0a      	ldr	r2, [pc, #40]	; (800c118 <prvCheckTasksWaitingTermination+0x50>)
 800c0ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <prvCheckTasksWaitingTermination+0x54>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	4a09      	ldr	r2, [pc, #36]	; (800c11c <prvCheckTasksWaitingTermination+0x54>)
 800c0f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0fa:	f000 fdd5 	bl	800cca8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f80e 	bl	800c120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <prvCheckTasksWaitingTermination+0x54>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e1      	bne.n	800c0d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c10c:	bf00      	nop
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	20001068 	.word	0x20001068
 800c118:	20001094 	.word	0x20001094
 800c11c:	2000107c 	.word	0x2000107c

0800c120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d108      	bne.n	800c144 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c136:	4618      	mov	r0, r3
 800c138:	f000 feb4 	bl	800cea4 <vPortFree>
				vPortFree( pxTCB );
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 feb1 	bl	800cea4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c142:	e017      	b.n	800c174 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d103      	bne.n	800c156 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fea8 	bl	800cea4 <vPortFree>
	}
 800c154:	e00e      	b.n	800c174 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	d009      	beq.n	800c174 <prvDeleteTCB+0x54>
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e7fe      	b.n	800c172 <prvDeleteTCB+0x52>
	}
 800c174:	bf00      	nop
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c182:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <prvResetNextTaskUnblockTime+0x38>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d104      	bne.n	800c196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c18c:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c18e:	f04f 32ff 	mov.w	r2, #4294967295
 800c192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c194:	e008      	b.n	800c1a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c196:	4b07      	ldr	r3, [pc, #28]	; (800c1b4 <prvResetNextTaskUnblockTime+0x38>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	4a04      	ldr	r2, [pc, #16]	; (800c1b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c1a6:	6013      	str	r3, [r2, #0]
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	2000104c 	.word	0x2000104c
 800c1b8:	200010b4 	.word	0x200010b4

0800c1bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1c2:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <xTaskGetSchedulerState+0x34>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d102      	bne.n	800c1d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	607b      	str	r3, [r7, #4]
 800c1ce:	e008      	b.n	800c1e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1d0:	4b08      	ldr	r3, [pc, #32]	; (800c1f4 <xTaskGetSchedulerState+0x38>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d102      	bne.n	800c1de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1d8:	2302      	movs	r3, #2
 800c1da:	607b      	str	r3, [r7, #4]
 800c1dc:	e001      	b.n	800c1e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1e2:	687b      	ldr	r3, [r7, #4]
	}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	200010a0 	.word	0x200010a0
 800c1f4:	200010bc 	.word	0x200010bc

0800c1f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c204:	2300      	movs	r3, #0
 800c206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d054      	beq.n	800c2b8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c20e:	4b2d      	ldr	r3, [pc, #180]	; (800c2c4 <xTaskPriorityDisinherit+0xcc>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	429a      	cmp	r2, r3
 800c216:	d009      	beq.n	800c22c <xTaskPriorityDisinherit+0x34>
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	e7fe      	b.n	800c22a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c230:	2b00      	cmp	r3, #0
 800c232:	d109      	bne.n	800c248 <xTaskPriorityDisinherit+0x50>
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	60bb      	str	r3, [r7, #8]
 800c246:	e7fe      	b.n	800c246 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c24c:	1e5a      	subs	r2, r3, #1
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d02c      	beq.n	800c2b8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c262:	2b00      	cmp	r3, #0
 800c264:	d128      	bne.n	800c2b8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	3304      	adds	r3, #4
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe fca0 	bl	800abb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c288:	4b0f      	ldr	r3, [pc, #60]	; (800c2c8 <xTaskPriorityDisinherit+0xd0>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d903      	bls.n	800c298 <xTaskPriorityDisinherit+0xa0>
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c294:	4a0c      	ldr	r2, [pc, #48]	; (800c2c8 <xTaskPriorityDisinherit+0xd0>)
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c29c:	4613      	mov	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4a09      	ldr	r2, [pc, #36]	; (800c2cc <xTaskPriorityDisinherit+0xd4>)
 800c2a6:	441a      	add	r2, r3
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	f7fe fc21 	bl	800aaf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2b8:	697b      	ldr	r3, [r7, #20]
	}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20000bc0 	.word	0x20000bc0
 800c2c8:	2000109c 	.word	0x2000109c
 800c2cc:	20000bc4 	.word	0x20000bc4

0800c2d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2da:	4b21      	ldr	r3, [pc, #132]	; (800c360 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2e0:	4b20      	ldr	r3, [pc, #128]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fe fc62 	bl	800abb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f2:	d10a      	bne.n	800c30a <prvAddCurrentTaskToDelayedList+0x3a>
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d007      	beq.n	800c30a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2fa:	4b1a      	ldr	r3, [pc, #104]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4819      	ldr	r0, [pc, #100]	; (800c368 <prvAddCurrentTaskToDelayedList+0x98>)
 800c304:	f7fe fbf7 	bl	800aaf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c308:	e026      	b.n	800c358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4413      	add	r3, r2
 800c310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c312:	4b14      	ldr	r3, [pc, #80]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d209      	bcs.n	800c336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3304      	adds	r3, #4
 800c32c:	4619      	mov	r1, r3
 800c32e:	4610      	mov	r0, r2
 800c330:	f7fe fc05 	bl	800ab3e <vListInsert>
}
 800c334:	e010      	b.n	800c358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c336:	4b0e      	ldr	r3, [pc, #56]	; (800c370 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4b0a      	ldr	r3, [pc, #40]	; (800c364 <prvAddCurrentTaskToDelayedList+0x94>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3304      	adds	r3, #4
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f7fe fbfb 	bl	800ab3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d202      	bcs.n	800c358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c352:	4a08      	ldr	r2, [pc, #32]	; (800c374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	6013      	str	r3, [r2, #0]
}
 800c358:	bf00      	nop
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20001098 	.word	0x20001098
 800c364:	20000bc0 	.word	0x20000bc0
 800c368:	20001080 	.word	0x20001080
 800c36c:	20001050 	.word	0x20001050
 800c370:	2000104c 	.word	0x2000104c
 800c374:	200010b4 	.word	0x200010b4

0800c378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08a      	sub	sp, #40	; 0x28
 800c37c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c37e:	2300      	movs	r3, #0
 800c380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c382:	f000 faff 	bl	800c984 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c386:	4b1c      	ldr	r3, [pc, #112]	; (800c3f8 <xTimerCreateTimerTask+0x80>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d021      	beq.n	800c3d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c396:	1d3a      	adds	r2, r7, #4
 800c398:	f107 0108 	add.w	r1, r7, #8
 800c39c:	f107 030c 	add.w	r3, r7, #12
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fe fb61 	bl	800aa68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3a6:	6879      	ldr	r1, [r7, #4]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	9202      	str	r2, [sp, #8]
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	460a      	mov	r2, r1
 800c3b8:	4910      	ldr	r1, [pc, #64]	; (800c3fc <xTimerCreateTimerTask+0x84>)
 800c3ba:	4811      	ldr	r0, [pc, #68]	; (800c400 <xTimerCreateTimerTask+0x88>)
 800c3bc:	f7ff f8f6 	bl	800b5ac <xTaskCreateStatic>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	4b10      	ldr	r3, [pc, #64]	; (800c404 <xTimerCreateTimerTask+0x8c>)
 800c3c4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <xTimerCreateTimerTask+0x8c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d109      	bne.n	800c3ec <xTimerCreateTimerTask+0x74>
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	613b      	str	r3, [r7, #16]
 800c3ea:	e7fe      	b.n	800c3ea <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c3ec:	697b      	ldr	r3, [r7, #20]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3718      	adds	r7, #24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	200010f0 	.word	0x200010f0
 800c3fc:	080115a8 	.word	0x080115a8
 800c400:	0800c539 	.word	0x0800c539
 800c404:	200010f4 	.word	0x200010f4

0800c408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08a      	sub	sp, #40	; 0x28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c416:	2300      	movs	r3, #0
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <xTimerGenericCommand+0x2c>
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	623b      	str	r3, [r7, #32]
 800c432:	e7fe      	b.n	800c432 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c434:	4b19      	ldr	r3, [pc, #100]	; (800c49c <xTimerGenericCommand+0x94>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d02a      	beq.n	800c492 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b05      	cmp	r3, #5
 800c44c:	dc18      	bgt.n	800c480 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c44e:	f7ff feb5 	bl	800c1bc <xTaskGetSchedulerState>
 800c452:	4603      	mov	r3, r0
 800c454:	2b02      	cmp	r3, #2
 800c456:	d109      	bne.n	800c46c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c458:	4b10      	ldr	r3, [pc, #64]	; (800c49c <xTimerGenericCommand+0x94>)
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	f107 0110 	add.w	r1, r7, #16
 800c460:	2300      	movs	r3, #0
 800c462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c464:	f7fe fccc 	bl	800ae00 <xQueueGenericSend>
 800c468:	6278      	str	r0, [r7, #36]	; 0x24
 800c46a:	e012      	b.n	800c492 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c46c:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <xTimerGenericCommand+0x94>)
 800c46e:	6818      	ldr	r0, [r3, #0]
 800c470:	f107 0110 	add.w	r1, r7, #16
 800c474:	2300      	movs	r3, #0
 800c476:	2200      	movs	r2, #0
 800c478:	f7fe fcc2 	bl	800ae00 <xQueueGenericSend>
 800c47c:	6278      	str	r0, [r7, #36]	; 0x24
 800c47e:	e008      	b.n	800c492 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c480:	4b06      	ldr	r3, [pc, #24]	; (800c49c <xTimerGenericCommand+0x94>)
 800c482:	6818      	ldr	r0, [r3, #0]
 800c484:	f107 0110 	add.w	r1, r7, #16
 800c488:	2300      	movs	r3, #0
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	f7fe fdb2 	bl	800aff4 <xQueueGenericSendFromISR>
 800c490:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c494:	4618      	mov	r0, r3
 800c496:	3728      	adds	r7, #40	; 0x28
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	200010f0 	.word	0x200010f0

0800c4a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b088      	sub	sp, #32
 800c4a4:	af02      	add	r7, sp, #8
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4aa:	4b22      	ldr	r3, [pc, #136]	; (800c534 <prvProcessExpiredTimer+0x94>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fe fb79 	bl	800abb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4c4:	f003 0304 	and.w	r3, r3, #4
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d021      	beq.n	800c510 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	699a      	ldr	r2, [r3, #24]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	18d1      	adds	r1, r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	6978      	ldr	r0, [r7, #20]
 800c4da:	f000 f8d1 	bl	800c680 <prvInsertTimerInActiveList>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01e      	beq.n	800c522 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	6978      	ldr	r0, [r7, #20]
 800c4f0:	f7ff ff8a 	bl	800c408 <xTimerGenericCommand>
 800c4f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d112      	bne.n	800c522 <prvProcessExpiredTimer+0x82>
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	e7fe      	b.n	800c50e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c516:	f023 0301 	bic.w	r3, r3, #1
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	6978      	ldr	r0, [r7, #20]
 800c528:	4798      	blx	r3
}
 800c52a:	bf00      	nop
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	200010e8 	.word	0x200010e8

0800c538 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c540:	f107 0308 	add.w	r3, r7, #8
 800c544:	4618      	mov	r0, r3
 800c546:	f000 f857 	bl	800c5f8 <prvGetNextExpireTime>
 800c54a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	4619      	mov	r1, r3
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f000 f803 	bl	800c55c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c556:	f000 f8d5 	bl	800c704 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c55a:	e7f1      	b.n	800c540 <prvTimerTask+0x8>

0800c55c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c566:	f7ff fa57 	bl	800ba18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c56a:	f107 0308 	add.w	r3, r7, #8
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 f866 	bl	800c640 <prvSampleTimeNow>
 800c574:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d130      	bne.n	800c5de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10a      	bne.n	800c598 <prvProcessTimerOrBlockTask+0x3c>
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	429a      	cmp	r2, r3
 800c588:	d806      	bhi.n	800c598 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c58a:	f7ff fa53 	bl	800ba34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c58e:	68f9      	ldr	r1, [r7, #12]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff ff85 	bl	800c4a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c596:	e024      	b.n	800c5e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d008      	beq.n	800c5b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c59e:	4b13      	ldr	r3, [pc, #76]	; (800c5ec <prvProcessTimerOrBlockTask+0x90>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d101      	bne.n	800c5ac <prvProcessTimerOrBlockTask+0x50>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e000      	b.n	800c5ae <prvProcessTimerOrBlockTask+0x52>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5b0:	4b0f      	ldr	r3, [pc, #60]	; (800c5f0 <prvProcessTimerOrBlockTask+0x94>)
 800c5b2:	6818      	ldr	r0, [r3, #0]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	1ad3      	subs	r3, r2, r3
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	f7fe ffc1 	bl	800b544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c5c2:	f7ff fa37 	bl	800ba34 <xTaskResumeAll>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10a      	bne.n	800c5e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5cc:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <prvProcessTimerOrBlockTask+0x98>)
 800c5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	f3bf 8f6f 	isb	sy
}
 800c5dc:	e001      	b.n	800c5e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5de:	f7ff fa29 	bl	800ba34 <xTaskResumeAll>
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	200010ec 	.word	0x200010ec
 800c5f0:	200010f0 	.word	0x200010f0
 800c5f4:	e000ed04 	.word	0xe000ed04

0800c5f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c600:	4b0e      	ldr	r3, [pc, #56]	; (800c63c <prvGetNextExpireTime+0x44>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <prvGetNextExpireTime+0x16>
 800c60a:	2201      	movs	r2, #1
 800c60c:	e000      	b.n	800c610 <prvGetNextExpireTime+0x18>
 800c60e:	2200      	movs	r2, #0
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d105      	bne.n	800c628 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c61c:	4b07      	ldr	r3, [pc, #28]	; (800c63c <prvGetNextExpireTime+0x44>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	e001      	b.n	800c62c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c62c:	68fb      	ldr	r3, [r7, #12]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	200010e8 	.word	0x200010e8

0800c640 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c648:	f7ff fa90 	bl	800bb6c <xTaskGetTickCount>
 800c64c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c64e:	4b0b      	ldr	r3, [pc, #44]	; (800c67c <prvSampleTimeNow+0x3c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	429a      	cmp	r2, r3
 800c656:	d205      	bcs.n	800c664 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c658:	f000 f930 	bl	800c8bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	601a      	str	r2, [r3, #0]
 800c662:	e002      	b.n	800c66a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c66a:	4a04      	ldr	r2, [pc, #16]	; (800c67c <prvSampleTimeNow+0x3c>)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c670:	68fb      	ldr	r3, [r7, #12]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	200010f8 	.word	0x200010f8

0800c680 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c68e:	2300      	movs	r3, #0
 800c690:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d812      	bhi.n	800c6cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	1ad2      	subs	r2, r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d302      	bcc.n	800c6ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	e01b      	b.n	800c6f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6ba:	4b10      	ldr	r3, [pc, #64]	; (800c6fc <prvInsertTimerInActiveList+0x7c>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	f7fe fa3a 	bl	800ab3e <vListInsert>
 800c6ca:	e012      	b.n	800c6f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d206      	bcs.n	800c6e2 <prvInsertTimerInActiveList+0x62>
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d302      	bcc.n	800c6e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	617b      	str	r3, [r7, #20]
 800c6e0:	e007      	b.n	800c6f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6e2:	4b07      	ldr	r3, [pc, #28]	; (800c700 <prvInsertTimerInActiveList+0x80>)
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	f7fe fa26 	bl	800ab3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6f2:	697b      	ldr	r3, [r7, #20]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	200010ec 	.word	0x200010ec
 800c700:	200010e8 	.word	0x200010e8

0800c704 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08e      	sub	sp, #56	; 0x38
 800c708:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c70a:	e0c6      	b.n	800c89a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	da17      	bge.n	800c742 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c712:	1d3b      	adds	r3, r7, #4
 800c714:	3304      	adds	r3, #4
 800c716:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d109      	bne.n	800c732 <prvProcessReceivedCommands+0x2e>
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	61fb      	str	r3, [r7, #28]
 800c730:	e7fe      	b.n	800c730 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c738:	6850      	ldr	r0, [r2, #4]
 800c73a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c73c:	6892      	ldr	r2, [r2, #8]
 800c73e:	4611      	mov	r1, r2
 800c740:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	f2c0 80a7 	blt.w	800c898 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	695b      	ldr	r3, [r3, #20]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d004      	beq.n	800c760 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	3304      	adds	r3, #4
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fa28 	bl	800abb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c760:	463b      	mov	r3, r7
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff ff6c 	bl	800c640 <prvSampleTimeNow>
 800c768:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b09      	cmp	r3, #9
 800c76e:	f200 8094 	bhi.w	800c89a <prvProcessReceivedCommands+0x196>
 800c772:	a201      	add	r2, pc, #4	; (adr r2, 800c778 <prvProcessReceivedCommands+0x74>)
 800c774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c778:	0800c7a1 	.word	0x0800c7a1
 800c77c:	0800c7a1 	.word	0x0800c7a1
 800c780:	0800c7a1 	.word	0x0800c7a1
 800c784:	0800c813 	.word	0x0800c813
 800c788:	0800c827 	.word	0x0800c827
 800c78c:	0800c86f 	.word	0x0800c86f
 800c790:	0800c7a1 	.word	0x0800c7a1
 800c794:	0800c7a1 	.word	0x0800c7a1
 800c798:	0800c813 	.word	0x0800c813
 800c79c:	0800c827 	.word	0x0800c827
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7a6:	f043 0301 	orr.w	r3, r3, #1
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	18d1      	adds	r1, r2, r3
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c0:	f7ff ff5e 	bl	800c680 <prvInsertTimerInActiveList>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d067      	beq.n	800c89a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7d8:	f003 0304 	and.w	r3, r3, #4
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d05c      	beq.n	800c89a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	699b      	ldr	r3, [r3, #24]
 800c7e6:	441a      	add	r2, r3
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7f2:	f7ff fe09 	bl	800c408 <xTimerGenericCommand>
 800c7f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d14d      	bne.n	800c89a <prvProcessReceivedCommands+0x196>
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	61bb      	str	r3, [r7, #24]
 800c810:	e7fe      	b.n	800c810 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c818:	f023 0301 	bic.w	r3, r3, #1
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c824:	e039      	b.n	800c89a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c82c:	f043 0301 	orr.w	r3, r3, #1
 800c830:	b2da      	uxtb	r2, r3
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d109      	bne.n	800c85a <prvProcessReceivedCommands+0x156>
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	e7fe      	b.n	800c858 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	699a      	ldr	r2, [r3, #24]
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	18d1      	adds	r1, r2, r3
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c868:	f7ff ff0a 	bl	800c680 <prvInsertTimerInActiveList>
					break;
 800c86c:	e015      	b.n	800c89a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c874:	f003 0302 	and.w	r3, r3, #2
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d103      	bne.n	800c884 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c87e:	f000 fb11 	bl	800cea4 <vPortFree>
 800c882:	e00a      	b.n	800c89a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c88a:	f023 0301 	bic.w	r3, r3, #1
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c896:	e000      	b.n	800c89a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c898:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <prvProcessReceivedCommands+0x1b4>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	1d39      	adds	r1, r7, #4
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe fc3a 	bl	800b11c <xQueueReceive>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f47f af2e 	bne.w	800c70c <prvProcessReceivedCommands+0x8>
	}
}
 800c8b0:	bf00      	nop
 800c8b2:	3730      	adds	r7, #48	; 0x30
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	200010f0 	.word	0x200010f0

0800c8bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8c2:	e047      	b.n	800c954 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8c4:	4b2d      	ldr	r3, [pc, #180]	; (800c97c <prvSwitchTimerLists+0xc0>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8ce:	4b2b      	ldr	r3, [pc, #172]	; (800c97c <prvSwitchTimerLists+0xc0>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3304      	adds	r3, #4
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fe f967 	bl	800abb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8f0:	f003 0304 	and.w	r3, r3, #4
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d02d      	beq.n	800c954 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	693a      	ldr	r2, [r7, #16]
 800c8fe:	4413      	add	r3, r2
 800c900:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	429a      	cmp	r2, r3
 800c908:	d90e      	bls.n	800c928 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c916:	4b19      	ldr	r3, [pc, #100]	; (800c97c <prvSwitchTimerLists+0xc0>)
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3304      	adds	r3, #4
 800c91e:	4619      	mov	r1, r3
 800c920:	4610      	mov	r0, r2
 800c922:	f7fe f90c 	bl	800ab3e <vListInsert>
 800c926:	e015      	b.n	800c954 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c928:	2300      	movs	r3, #0
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	2300      	movs	r3, #0
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	2100      	movs	r1, #0
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f7ff fd68 	bl	800c408 <xTimerGenericCommand>
 800c938:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d109      	bne.n	800c954 <prvSwitchTimerLists+0x98>
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	603b      	str	r3, [r7, #0]
 800c952:	e7fe      	b.n	800c952 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c954:	4b09      	ldr	r3, [pc, #36]	; (800c97c <prvSwitchTimerLists+0xc0>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1b2      	bne.n	800c8c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c95e:	4b07      	ldr	r3, [pc, #28]	; (800c97c <prvSwitchTimerLists+0xc0>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c964:	4b06      	ldr	r3, [pc, #24]	; (800c980 <prvSwitchTimerLists+0xc4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a04      	ldr	r2, [pc, #16]	; (800c97c <prvSwitchTimerLists+0xc0>)
 800c96a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c96c:	4a04      	ldr	r2, [pc, #16]	; (800c980 <prvSwitchTimerLists+0xc4>)
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	6013      	str	r3, [r2, #0]
}
 800c972:	bf00      	nop
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	200010e8 	.word	0x200010e8
 800c980:	200010ec 	.word	0x200010ec

0800c984 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c98a:	f000 f95f 	bl	800cc4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c98e:	4b15      	ldr	r3, [pc, #84]	; (800c9e4 <prvCheckForValidListAndQueue+0x60>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d120      	bne.n	800c9d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c996:	4814      	ldr	r0, [pc, #80]	; (800c9e8 <prvCheckForValidListAndQueue+0x64>)
 800c998:	f7fe f880 	bl	800aa9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c99c:	4813      	ldr	r0, [pc, #76]	; (800c9ec <prvCheckForValidListAndQueue+0x68>)
 800c99e:	f7fe f87d 	bl	800aa9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9a2:	4b13      	ldr	r3, [pc, #76]	; (800c9f0 <prvCheckForValidListAndQueue+0x6c>)
 800c9a4:	4a10      	ldr	r2, [pc, #64]	; (800c9e8 <prvCheckForValidListAndQueue+0x64>)
 800c9a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9a8:	4b12      	ldr	r3, [pc, #72]	; (800c9f4 <prvCheckForValidListAndQueue+0x70>)
 800c9aa:	4a10      	ldr	r2, [pc, #64]	; (800c9ec <prvCheckForValidListAndQueue+0x68>)
 800c9ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <prvCheckForValidListAndQueue+0x74>)
 800c9b4:	4a11      	ldr	r2, [pc, #68]	; (800c9fc <prvCheckForValidListAndQueue+0x78>)
 800c9b6:	2110      	movs	r1, #16
 800c9b8:	200a      	movs	r0, #10
 800c9ba:	f7fe f98b 	bl	800acd4 <xQueueGenericCreateStatic>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	4b08      	ldr	r3, [pc, #32]	; (800c9e4 <prvCheckForValidListAndQueue+0x60>)
 800c9c2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9c4:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <prvCheckForValidListAndQueue+0x60>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d005      	beq.n	800c9d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9cc:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <prvCheckForValidListAndQueue+0x60>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	490b      	ldr	r1, [pc, #44]	; (800ca00 <prvCheckForValidListAndQueue+0x7c>)
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe fd8e 	bl	800b4f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9d8:	f000 f966 	bl	800cca8 <vPortExitCritical>
}
 800c9dc:	bf00      	nop
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	200010f0 	.word	0x200010f0
 800c9e8:	200010c0 	.word	0x200010c0
 800c9ec:	200010d4 	.word	0x200010d4
 800c9f0:	200010e8 	.word	0x200010e8
 800c9f4:	200010ec 	.word	0x200010ec
 800c9f8:	2000119c 	.word	0x2000119c
 800c9fc:	200010fc 	.word	0x200010fc
 800ca00:	080115b0 	.word	0x080115b0

0800ca04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	3b04      	subs	r3, #4
 800ca14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3b04      	subs	r3, #4
 800ca22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	f023 0201 	bic.w	r2, r3, #1
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3b04      	subs	r3, #4
 800ca32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca34:	4a0c      	ldr	r2, [pc, #48]	; (800ca68 <pxPortInitialiseStack+0x64>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3b14      	subs	r3, #20
 800ca3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	3b04      	subs	r3, #4
 800ca4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f06f 0202 	mvn.w	r2, #2
 800ca52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3b20      	subs	r3, #32
 800ca58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	0800ca6d 	.word	0x0800ca6d

0800ca6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca76:	4b11      	ldr	r3, [pc, #68]	; (800cabc <prvTaskExitError+0x50>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7e:	d009      	beq.n	800ca94 <prvTaskExitError+0x28>
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	e7fe      	b.n	800ca92 <prvTaskExitError+0x26>
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caa6:	bf00      	nop
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d0fc      	beq.n	800caa8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caae:	bf00      	nop
 800cab0:	3714      	adds	r7, #20
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	2000000c 	.word	0x2000000c

0800cac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cac0:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <pxCurrentTCBConst2>)
 800cac2:	6819      	ldr	r1, [r3, #0]
 800cac4:	6808      	ldr	r0, [r1, #0]
 800cac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caca:	f380 8809 	msr	PSP, r0
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f04f 0000 	mov.w	r0, #0
 800cad6:	f380 8811 	msr	BASEPRI, r0
 800cada:	4770      	bx	lr
 800cadc:	f3af 8000 	nop.w

0800cae0 <pxCurrentTCBConst2>:
 800cae0:	20000bc0 	.word	0x20000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop

0800cae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cae8:	4808      	ldr	r0, [pc, #32]	; (800cb0c <prvPortStartFirstTask+0x24>)
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	6800      	ldr	r0, [r0, #0]
 800caee:	f380 8808 	msr	MSP, r0
 800caf2:	f04f 0000 	mov.w	r0, #0
 800caf6:	f380 8814 	msr	CONTROL, r0
 800cafa:	b662      	cpsie	i
 800cafc:	b661      	cpsie	f
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	df00      	svc	0
 800cb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb0a:	bf00      	nop
 800cb0c:	e000ed08 	.word	0xe000ed08

0800cb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb16:	4b44      	ldr	r3, [pc, #272]	; (800cc28 <xPortStartScheduler+0x118>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a44      	ldr	r2, [pc, #272]	; (800cc2c <xPortStartScheduler+0x11c>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d109      	bne.n	800cb34 <xPortStartScheduler+0x24>
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	613b      	str	r3, [r7, #16]
 800cb32:	e7fe      	b.n	800cb32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb34:	4b3c      	ldr	r3, [pc, #240]	; (800cc28 <xPortStartScheduler+0x118>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a3d      	ldr	r2, [pc, #244]	; (800cc30 <xPortStartScheduler+0x120>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d109      	bne.n	800cb52 <xPortStartScheduler+0x42>
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	e7fe      	b.n	800cb50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb52:	4b38      	ldr	r3, [pc, #224]	; (800cc34 <xPortStartScheduler+0x124>)
 800cb54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	22ff      	movs	r2, #255	; 0xff
 800cb62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb6c:	78fb      	ldrb	r3, [r7, #3]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	4b30      	ldr	r3, [pc, #192]	; (800cc38 <xPortStartScheduler+0x128>)
 800cb78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb7a:	4b30      	ldr	r3, [pc, #192]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cb7c:	2207      	movs	r2, #7
 800cb7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb80:	e009      	b.n	800cb96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800cb82:	4b2e      	ldr	r3, [pc, #184]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	4a2c      	ldr	r2, [pc, #176]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cb8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb8c:	78fb      	ldrb	r3, [r7, #3]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb96:	78fb      	ldrb	r3, [r7, #3]
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb9e:	2b80      	cmp	r3, #128	; 0x80
 800cba0:	d0ef      	beq.n	800cb82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cba2:	4b26      	ldr	r3, [pc, #152]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f1c3 0307 	rsb	r3, r3, #7
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	d009      	beq.n	800cbc2 <xPortStartScheduler+0xb2>
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	60bb      	str	r3, [r7, #8]
 800cbc0:	e7fe      	b.n	800cbc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbc2:	4b1e      	ldr	r3, [pc, #120]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	021b      	lsls	r3, r3, #8
 800cbc8:	4a1c      	ldr	r2, [pc, #112]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cbca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbcc:	4b1b      	ldr	r3, [pc, #108]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbd4:	4a19      	ldr	r2, [pc, #100]	; (800cc3c <xPortStartScheduler+0x12c>)
 800cbd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbe0:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <xPortStartScheduler+0x130>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a16      	ldr	r2, [pc, #88]	; (800cc40 <xPortStartScheduler+0x130>)
 800cbe6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbec:	4b14      	ldr	r3, [pc, #80]	; (800cc40 <xPortStartScheduler+0x130>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a13      	ldr	r2, [pc, #76]	; (800cc40 <xPortStartScheduler+0x130>)
 800cbf2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbf6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbf8:	f000 f8d6 	bl	800cda8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbfc:	4b11      	ldr	r3, [pc, #68]	; (800cc44 <xPortStartScheduler+0x134>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc02:	f000 f8f5 	bl	800cdf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc06:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <xPortStartScheduler+0x138>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a0f      	ldr	r2, [pc, #60]	; (800cc48 <xPortStartScheduler+0x138>)
 800cc0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc12:	f7ff ff69 	bl	800cae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc16:	f7ff f871 	bl	800bcfc <vTaskSwitchContext>
	prvTaskExitError();
 800cc1a:	f7ff ff27 	bl	800ca6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	e000ed00 	.word	0xe000ed00
 800cc2c:	410fc271 	.word	0x410fc271
 800cc30:	410fc270 	.word	0x410fc270
 800cc34:	e000e400 	.word	0xe000e400
 800cc38:	200011ec 	.word	0x200011ec
 800cc3c:	200011f0 	.word	0x200011f0
 800cc40:	e000ed20 	.word	0xe000ed20
 800cc44:	2000000c 	.word	0x2000000c
 800cc48:	e000ef34 	.word	0xe000ef34

0800cc4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc64:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <vPortEnterCritical+0x54>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	4a0d      	ldr	r2, [pc, #52]	; (800cca0 <vPortEnterCritical+0x54>)
 800cc6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc6e:	4b0c      	ldr	r3, [pc, #48]	; (800cca0 <vPortEnterCritical+0x54>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d10e      	bne.n	800cc94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc76:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <vPortEnterCritical+0x58>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d009      	beq.n	800cc94 <vPortEnterCritical+0x48>
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	e7fe      	b.n	800cc92 <vPortEnterCritical+0x46>
	}
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	2000000c 	.word	0x2000000c
 800cca4:	e000ed04 	.word	0xe000ed04

0800cca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccae:	4b11      	ldr	r3, [pc, #68]	; (800ccf4 <vPortExitCritical+0x4c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d109      	bne.n	800ccca <vPortExitCritical+0x22>
 800ccb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	607b      	str	r3, [r7, #4]
 800ccc8:	e7fe      	b.n	800ccc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <vPortExitCritical+0x4c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <vPortExitCritical+0x4c>)
 800ccd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccd4:	4b07      	ldr	r3, [pc, #28]	; (800ccf4 <vPortExitCritical+0x4c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d104      	bne.n	800cce6 <vPortExitCritical+0x3e>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cce6:	bf00      	nop
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	2000000c 	.word	0x2000000c
	...

0800cd00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd00:	f3ef 8009 	mrs	r0, PSP
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	4b15      	ldr	r3, [pc, #84]	; (800cd60 <pxCurrentTCBConst>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	f01e 0f10 	tst.w	lr, #16
 800cd10:	bf08      	it	eq
 800cd12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	6010      	str	r0, [r2, #0]
 800cd1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd24:	f380 8811 	msr	BASEPRI, r0
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f7fe ffe4 	bl	800bcfc <vTaskSwitchContext>
 800cd34:	f04f 0000 	mov.w	r0, #0
 800cd38:	f380 8811 	msr	BASEPRI, r0
 800cd3c:	bc09      	pop	{r0, r3}
 800cd3e:	6819      	ldr	r1, [r3, #0]
 800cd40:	6808      	ldr	r0, [r1, #0]
 800cd42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd46:	f01e 0f10 	tst.w	lr, #16
 800cd4a:	bf08      	it	eq
 800cd4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd50:	f380 8809 	msr	PSP, r0
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	f3af 8000 	nop.w

0800cd60 <pxCurrentTCBConst>:
 800cd60:	20000bc0 	.word	0x20000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop

0800cd68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd80:	f7fe ff04 	bl	800bb8c <xTaskIncrementTick>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd8a:	4b06      	ldr	r3, [pc, #24]	; (800cda4 <SysTick_Handler+0x3c>)
 800cd8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	2300      	movs	r3, #0
 800cd94:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	e000ed04 	.word	0xe000ed04

0800cda8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdac:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <vPortSetupTimerInterrupt+0x34>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdb2:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <vPortSetupTimerInterrupt+0x38>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdb8:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <vPortSetupTimerInterrupt+0x3c>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a0a      	ldr	r2, [pc, #40]	; (800cde8 <vPortSetupTimerInterrupt+0x40>)
 800cdbe:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc2:	099b      	lsrs	r3, r3, #6
 800cdc4:	4a09      	ldr	r2, [pc, #36]	; (800cdec <vPortSetupTimerInterrupt+0x44>)
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdca:	4b04      	ldr	r3, [pc, #16]	; (800cddc <vPortSetupTimerInterrupt+0x34>)
 800cdcc:	2207      	movs	r2, #7
 800cdce:	601a      	str	r2, [r3, #0]
}
 800cdd0:	bf00      	nop
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	e000e010 	.word	0xe000e010
 800cde0:	e000e018 	.word	0xe000e018
 800cde4:	20000000 	.word	0x20000000
 800cde8:	10624dd3 	.word	0x10624dd3
 800cdec:	e000e014 	.word	0xe000e014

0800cdf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce00 <vPortEnableVFP+0x10>
 800cdf4:	6801      	ldr	r1, [r0, #0]
 800cdf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdfa:	6001      	str	r1, [r0, #0]
 800cdfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdfe:	bf00      	nop
 800ce00:	e000ed88 	.word	0xe000ed88

0800ce04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce0a:	f3ef 8305 	mrs	r3, IPSR
 800ce0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b0f      	cmp	r3, #15
 800ce14:	d913      	bls.n	800ce3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce16:	4a16      	ldr	r2, [pc, #88]	; (800ce70 <vPortValidateInterruptPriority+0x6c>)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce20:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <vPortValidateInterruptPriority+0x70>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	7afa      	ldrb	r2, [r7, #11]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d209      	bcs.n	800ce3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	607b      	str	r3, [r7, #4]
 800ce3c:	e7fe      	b.n	800ce3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce3e:	4b0e      	ldr	r3, [pc, #56]	; (800ce78 <vPortValidateInterruptPriority+0x74>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce46:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <vPortValidateInterruptPriority+0x78>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d909      	bls.n	800ce62 <vPortValidateInterruptPriority+0x5e>
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	603b      	str	r3, [r7, #0]
 800ce60:	e7fe      	b.n	800ce60 <vPortValidateInterruptPriority+0x5c>
	}
 800ce62:	bf00      	nop
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	e000e3f0 	.word	0xe000e3f0
 800ce74:	200011ec 	.word	0x200011ec
 800ce78:	e000ed0c 	.word	0xe000ed0c
 800ce7c:	200011f0 	.word	0x200011f0

0800ce80 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800ce88:	f7fe fdc6 	bl	800ba18 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f845 	bl	800cf1c <malloc>
 800ce92:	4603      	mov	r3, r0
 800ce94:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce96:	f7fe fdcd 	bl	800ba34 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
	if( pv )
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d006      	beq.n	800cec0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800ceb2:	f7fe fdb1 	bl	800ba18 <vTaskSuspendAll>
		{
			free( pv );
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f838 	bl	800cf2c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800cebc:	f7fe fdba 	bl	800ba34 <xTaskResumeAll>
	}
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <__errno>:
 800cec8:	4b01      	ldr	r3, [pc, #4]	; (800ced0 <__errno+0x8>)
 800ceca:	6818      	ldr	r0, [r3, #0]
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	20000010 	.word	0x20000010

0800ced4 <__libc_init_array>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	4e0d      	ldr	r6, [pc, #52]	; (800cf0c <__libc_init_array+0x38>)
 800ced8:	4c0d      	ldr	r4, [pc, #52]	; (800cf10 <__libc_init_array+0x3c>)
 800ceda:	1ba4      	subs	r4, r4, r6
 800cedc:	10a4      	asrs	r4, r4, #2
 800cede:	2500      	movs	r5, #0
 800cee0:	42a5      	cmp	r5, r4
 800cee2:	d109      	bne.n	800cef8 <__libc_init_array+0x24>
 800cee4:	4e0b      	ldr	r6, [pc, #44]	; (800cf14 <__libc_init_array+0x40>)
 800cee6:	4c0c      	ldr	r4, [pc, #48]	; (800cf18 <__libc_init_array+0x44>)
 800cee8:	f004 fb1c 	bl	8011524 <_init>
 800ceec:	1ba4      	subs	r4, r4, r6
 800ceee:	10a4      	asrs	r4, r4, #2
 800cef0:	2500      	movs	r5, #0
 800cef2:	42a5      	cmp	r5, r4
 800cef4:	d105      	bne.n	800cf02 <__libc_init_array+0x2e>
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cefc:	4798      	blx	r3
 800cefe:	3501      	adds	r5, #1
 800cf00:	e7ee      	b.n	800cee0 <__libc_init_array+0xc>
 800cf02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf06:	4798      	blx	r3
 800cf08:	3501      	adds	r5, #1
 800cf0a:	e7f2      	b.n	800cef2 <__libc_init_array+0x1e>
 800cf0c:	08011928 	.word	0x08011928
 800cf10:	08011928 	.word	0x08011928
 800cf14:	08011928 	.word	0x08011928
 800cf18:	0801192c 	.word	0x0801192c

0800cf1c <malloc>:
 800cf1c:	4b02      	ldr	r3, [pc, #8]	; (800cf28 <malloc+0xc>)
 800cf1e:	4601      	mov	r1, r0
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f000 b86d 	b.w	800d000 <_malloc_r>
 800cf26:	bf00      	nop
 800cf28:	20000010 	.word	0x20000010

0800cf2c <free>:
 800cf2c:	4b02      	ldr	r3, [pc, #8]	; (800cf38 <free+0xc>)
 800cf2e:	4601      	mov	r1, r0
 800cf30:	6818      	ldr	r0, [r3, #0]
 800cf32:	f000 b817 	b.w	800cf64 <_free_r>
 800cf36:	bf00      	nop
 800cf38:	20000010 	.word	0x20000010

0800cf3c <memcpy>:
 800cf3c:	b510      	push	{r4, lr}
 800cf3e:	1e43      	subs	r3, r0, #1
 800cf40:	440a      	add	r2, r1
 800cf42:	4291      	cmp	r1, r2
 800cf44:	d100      	bne.n	800cf48 <memcpy+0xc>
 800cf46:	bd10      	pop	{r4, pc}
 800cf48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf50:	e7f7      	b.n	800cf42 <memcpy+0x6>

0800cf52 <memset>:
 800cf52:	4402      	add	r2, r0
 800cf54:	4603      	mov	r3, r0
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d100      	bne.n	800cf5c <memset+0xa>
 800cf5a:	4770      	bx	lr
 800cf5c:	f803 1b01 	strb.w	r1, [r3], #1
 800cf60:	e7f9      	b.n	800cf56 <memset+0x4>
	...

0800cf64 <_free_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4605      	mov	r5, r0
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	d045      	beq.n	800cff8 <_free_r+0x94>
 800cf6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf70:	1f0c      	subs	r4, r1, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bfb8      	it	lt
 800cf76:	18e4      	addlt	r4, r4, r3
 800cf78:	f003 fb20 	bl	80105bc <__malloc_lock>
 800cf7c:	4a1f      	ldr	r2, [pc, #124]	; (800cffc <_free_r+0x98>)
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	4610      	mov	r0, r2
 800cf82:	b933      	cbnz	r3, 800cf92 <_free_r+0x2e>
 800cf84:	6063      	str	r3, [r4, #4]
 800cf86:	6014      	str	r4, [r2, #0]
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf8e:	f003 bb16 	b.w	80105be <__malloc_unlock>
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	d90c      	bls.n	800cfb0 <_free_r+0x4c>
 800cf96:	6821      	ldr	r1, [r4, #0]
 800cf98:	1862      	adds	r2, r4, r1
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	bf04      	itt	eq
 800cf9e:	681a      	ldreq	r2, [r3, #0]
 800cfa0:	685b      	ldreq	r3, [r3, #4]
 800cfa2:	6063      	str	r3, [r4, #4]
 800cfa4:	bf04      	itt	eq
 800cfa6:	1852      	addeq	r2, r2, r1
 800cfa8:	6022      	streq	r2, [r4, #0]
 800cfaa:	6004      	str	r4, [r0, #0]
 800cfac:	e7ec      	b.n	800cf88 <_free_r+0x24>
 800cfae:	4613      	mov	r3, r2
 800cfb0:	685a      	ldr	r2, [r3, #4]
 800cfb2:	b10a      	cbz	r2, 800cfb8 <_free_r+0x54>
 800cfb4:	42a2      	cmp	r2, r4
 800cfb6:	d9fa      	bls.n	800cfae <_free_r+0x4a>
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	1858      	adds	r0, r3, r1
 800cfbc:	42a0      	cmp	r0, r4
 800cfbe:	d10b      	bne.n	800cfd8 <_free_r+0x74>
 800cfc0:	6820      	ldr	r0, [r4, #0]
 800cfc2:	4401      	add	r1, r0
 800cfc4:	1858      	adds	r0, r3, r1
 800cfc6:	4282      	cmp	r2, r0
 800cfc8:	6019      	str	r1, [r3, #0]
 800cfca:	d1dd      	bne.n	800cf88 <_free_r+0x24>
 800cfcc:	6810      	ldr	r0, [r2, #0]
 800cfce:	6852      	ldr	r2, [r2, #4]
 800cfd0:	605a      	str	r2, [r3, #4]
 800cfd2:	4401      	add	r1, r0
 800cfd4:	6019      	str	r1, [r3, #0]
 800cfd6:	e7d7      	b.n	800cf88 <_free_r+0x24>
 800cfd8:	d902      	bls.n	800cfe0 <_free_r+0x7c>
 800cfda:	230c      	movs	r3, #12
 800cfdc:	602b      	str	r3, [r5, #0]
 800cfde:	e7d3      	b.n	800cf88 <_free_r+0x24>
 800cfe0:	6820      	ldr	r0, [r4, #0]
 800cfe2:	1821      	adds	r1, r4, r0
 800cfe4:	428a      	cmp	r2, r1
 800cfe6:	bf04      	itt	eq
 800cfe8:	6811      	ldreq	r1, [r2, #0]
 800cfea:	6852      	ldreq	r2, [r2, #4]
 800cfec:	6062      	str	r2, [r4, #4]
 800cfee:	bf04      	itt	eq
 800cff0:	1809      	addeq	r1, r1, r0
 800cff2:	6021      	streq	r1, [r4, #0]
 800cff4:	605c      	str	r4, [r3, #4]
 800cff6:	e7c7      	b.n	800cf88 <_free_r+0x24>
 800cff8:	bd38      	pop	{r3, r4, r5, pc}
 800cffa:	bf00      	nop
 800cffc:	200011f4 	.word	0x200011f4

0800d000 <_malloc_r>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	1ccd      	adds	r5, r1, #3
 800d004:	f025 0503 	bic.w	r5, r5, #3
 800d008:	3508      	adds	r5, #8
 800d00a:	2d0c      	cmp	r5, #12
 800d00c:	bf38      	it	cc
 800d00e:	250c      	movcc	r5, #12
 800d010:	2d00      	cmp	r5, #0
 800d012:	4606      	mov	r6, r0
 800d014:	db01      	blt.n	800d01a <_malloc_r+0x1a>
 800d016:	42a9      	cmp	r1, r5
 800d018:	d903      	bls.n	800d022 <_malloc_r+0x22>
 800d01a:	230c      	movs	r3, #12
 800d01c:	6033      	str	r3, [r6, #0]
 800d01e:	2000      	movs	r0, #0
 800d020:	bd70      	pop	{r4, r5, r6, pc}
 800d022:	f003 facb 	bl	80105bc <__malloc_lock>
 800d026:	4a21      	ldr	r2, [pc, #132]	; (800d0ac <_malloc_r+0xac>)
 800d028:	6814      	ldr	r4, [r2, #0]
 800d02a:	4621      	mov	r1, r4
 800d02c:	b991      	cbnz	r1, 800d054 <_malloc_r+0x54>
 800d02e:	4c20      	ldr	r4, [pc, #128]	; (800d0b0 <_malloc_r+0xb0>)
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	b91b      	cbnz	r3, 800d03c <_malloc_r+0x3c>
 800d034:	4630      	mov	r0, r6
 800d036:	f000 fef7 	bl	800de28 <_sbrk_r>
 800d03a:	6020      	str	r0, [r4, #0]
 800d03c:	4629      	mov	r1, r5
 800d03e:	4630      	mov	r0, r6
 800d040:	f000 fef2 	bl	800de28 <_sbrk_r>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d124      	bne.n	800d092 <_malloc_r+0x92>
 800d048:	230c      	movs	r3, #12
 800d04a:	6033      	str	r3, [r6, #0]
 800d04c:	4630      	mov	r0, r6
 800d04e:	f003 fab6 	bl	80105be <__malloc_unlock>
 800d052:	e7e4      	b.n	800d01e <_malloc_r+0x1e>
 800d054:	680b      	ldr	r3, [r1, #0]
 800d056:	1b5b      	subs	r3, r3, r5
 800d058:	d418      	bmi.n	800d08c <_malloc_r+0x8c>
 800d05a:	2b0b      	cmp	r3, #11
 800d05c:	d90f      	bls.n	800d07e <_malloc_r+0x7e>
 800d05e:	600b      	str	r3, [r1, #0]
 800d060:	50cd      	str	r5, [r1, r3]
 800d062:	18cc      	adds	r4, r1, r3
 800d064:	4630      	mov	r0, r6
 800d066:	f003 faaa 	bl	80105be <__malloc_unlock>
 800d06a:	f104 000b 	add.w	r0, r4, #11
 800d06e:	1d23      	adds	r3, r4, #4
 800d070:	f020 0007 	bic.w	r0, r0, #7
 800d074:	1ac3      	subs	r3, r0, r3
 800d076:	d0d3      	beq.n	800d020 <_malloc_r+0x20>
 800d078:	425a      	negs	r2, r3
 800d07a:	50e2      	str	r2, [r4, r3]
 800d07c:	e7d0      	b.n	800d020 <_malloc_r+0x20>
 800d07e:	428c      	cmp	r4, r1
 800d080:	684b      	ldr	r3, [r1, #4]
 800d082:	bf16      	itet	ne
 800d084:	6063      	strne	r3, [r4, #4]
 800d086:	6013      	streq	r3, [r2, #0]
 800d088:	460c      	movne	r4, r1
 800d08a:	e7eb      	b.n	800d064 <_malloc_r+0x64>
 800d08c:	460c      	mov	r4, r1
 800d08e:	6849      	ldr	r1, [r1, #4]
 800d090:	e7cc      	b.n	800d02c <_malloc_r+0x2c>
 800d092:	1cc4      	adds	r4, r0, #3
 800d094:	f024 0403 	bic.w	r4, r4, #3
 800d098:	42a0      	cmp	r0, r4
 800d09a:	d005      	beq.n	800d0a8 <_malloc_r+0xa8>
 800d09c:	1a21      	subs	r1, r4, r0
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f000 fec2 	bl	800de28 <_sbrk_r>
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d0cf      	beq.n	800d048 <_malloc_r+0x48>
 800d0a8:	6025      	str	r5, [r4, #0]
 800d0aa:	e7db      	b.n	800d064 <_malloc_r+0x64>
 800d0ac:	200011f4 	.word	0x200011f4
 800d0b0:	200011f8 	.word	0x200011f8

0800d0b4 <__cvt>:
 800d0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b8:	ec55 4b10 	vmov	r4, r5, d0
 800d0bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d0be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d0c2:	2d00      	cmp	r5, #0
 800d0c4:	460e      	mov	r6, r1
 800d0c6:	4691      	mov	r9, r2
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	bfb8      	it	lt
 800d0cc:	4622      	movlt	r2, r4
 800d0ce:	462b      	mov	r3, r5
 800d0d0:	f027 0720 	bic.w	r7, r7, #32
 800d0d4:	bfbb      	ittet	lt
 800d0d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d0da:	461d      	movlt	r5, r3
 800d0dc:	2300      	movge	r3, #0
 800d0de:	232d      	movlt	r3, #45	; 0x2d
 800d0e0:	bfb8      	it	lt
 800d0e2:	4614      	movlt	r4, r2
 800d0e4:	2f46      	cmp	r7, #70	; 0x46
 800d0e6:	700b      	strb	r3, [r1, #0]
 800d0e8:	d004      	beq.n	800d0f4 <__cvt+0x40>
 800d0ea:	2f45      	cmp	r7, #69	; 0x45
 800d0ec:	d100      	bne.n	800d0f0 <__cvt+0x3c>
 800d0ee:	3601      	adds	r6, #1
 800d0f0:	2102      	movs	r1, #2
 800d0f2:	e000      	b.n	800d0f6 <__cvt+0x42>
 800d0f4:	2103      	movs	r1, #3
 800d0f6:	ab03      	add	r3, sp, #12
 800d0f8:	9301      	str	r3, [sp, #4]
 800d0fa:	ab02      	add	r3, sp, #8
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	4632      	mov	r2, r6
 800d100:	4653      	mov	r3, sl
 800d102:	ec45 4b10 	vmov	d0, r4, r5
 800d106:	f001 ff77 	bl	800eff8 <_dtoa_r>
 800d10a:	2f47      	cmp	r7, #71	; 0x47
 800d10c:	4680      	mov	r8, r0
 800d10e:	d102      	bne.n	800d116 <__cvt+0x62>
 800d110:	f019 0f01 	tst.w	r9, #1
 800d114:	d026      	beq.n	800d164 <__cvt+0xb0>
 800d116:	2f46      	cmp	r7, #70	; 0x46
 800d118:	eb08 0906 	add.w	r9, r8, r6
 800d11c:	d111      	bne.n	800d142 <__cvt+0x8e>
 800d11e:	f898 3000 	ldrb.w	r3, [r8]
 800d122:	2b30      	cmp	r3, #48	; 0x30
 800d124:	d10a      	bne.n	800d13c <__cvt+0x88>
 800d126:	2200      	movs	r2, #0
 800d128:	2300      	movs	r3, #0
 800d12a:	4620      	mov	r0, r4
 800d12c:	4629      	mov	r1, r5
 800d12e:	f7f3 fcdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800d132:	b918      	cbnz	r0, 800d13c <__cvt+0x88>
 800d134:	f1c6 0601 	rsb	r6, r6, #1
 800d138:	f8ca 6000 	str.w	r6, [sl]
 800d13c:	f8da 3000 	ldr.w	r3, [sl]
 800d140:	4499      	add	r9, r3
 800d142:	2200      	movs	r2, #0
 800d144:	2300      	movs	r3, #0
 800d146:	4620      	mov	r0, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	f7f3 fccd 	bl	8000ae8 <__aeabi_dcmpeq>
 800d14e:	b938      	cbnz	r0, 800d160 <__cvt+0xac>
 800d150:	2230      	movs	r2, #48	; 0x30
 800d152:	9b03      	ldr	r3, [sp, #12]
 800d154:	454b      	cmp	r3, r9
 800d156:	d205      	bcs.n	800d164 <__cvt+0xb0>
 800d158:	1c59      	adds	r1, r3, #1
 800d15a:	9103      	str	r1, [sp, #12]
 800d15c:	701a      	strb	r2, [r3, #0]
 800d15e:	e7f8      	b.n	800d152 <__cvt+0x9e>
 800d160:	f8cd 900c 	str.w	r9, [sp, #12]
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d168:	eba3 0308 	sub.w	r3, r3, r8
 800d16c:	4640      	mov	r0, r8
 800d16e:	6013      	str	r3, [r2, #0]
 800d170:	b004      	add	sp, #16
 800d172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d176 <__exponent>:
 800d176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d178:	2900      	cmp	r1, #0
 800d17a:	4604      	mov	r4, r0
 800d17c:	bfba      	itte	lt
 800d17e:	4249      	neglt	r1, r1
 800d180:	232d      	movlt	r3, #45	; 0x2d
 800d182:	232b      	movge	r3, #43	; 0x2b
 800d184:	2909      	cmp	r1, #9
 800d186:	f804 2b02 	strb.w	r2, [r4], #2
 800d18a:	7043      	strb	r3, [r0, #1]
 800d18c:	dd20      	ble.n	800d1d0 <__exponent+0x5a>
 800d18e:	f10d 0307 	add.w	r3, sp, #7
 800d192:	461f      	mov	r7, r3
 800d194:	260a      	movs	r6, #10
 800d196:	fb91 f5f6 	sdiv	r5, r1, r6
 800d19a:	fb06 1115 	mls	r1, r6, r5, r1
 800d19e:	3130      	adds	r1, #48	; 0x30
 800d1a0:	2d09      	cmp	r5, #9
 800d1a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1a6:	f103 32ff 	add.w	r2, r3, #4294967295
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	dc09      	bgt.n	800d1c2 <__exponent+0x4c>
 800d1ae:	3130      	adds	r1, #48	; 0x30
 800d1b0:	3b02      	subs	r3, #2
 800d1b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d1b6:	42bb      	cmp	r3, r7
 800d1b8:	4622      	mov	r2, r4
 800d1ba:	d304      	bcc.n	800d1c6 <__exponent+0x50>
 800d1bc:	1a10      	subs	r0, r2, r0
 800d1be:	b003      	add	sp, #12
 800d1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	e7e7      	b.n	800d196 <__exponent+0x20>
 800d1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ca:	f804 2b01 	strb.w	r2, [r4], #1
 800d1ce:	e7f2      	b.n	800d1b6 <__exponent+0x40>
 800d1d0:	2330      	movs	r3, #48	; 0x30
 800d1d2:	4419      	add	r1, r3
 800d1d4:	7083      	strb	r3, [r0, #2]
 800d1d6:	1d02      	adds	r2, r0, #4
 800d1d8:	70c1      	strb	r1, [r0, #3]
 800d1da:	e7ef      	b.n	800d1bc <__exponent+0x46>

0800d1dc <_printf_float>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	b08d      	sub	sp, #52	; 0x34
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d1e8:	4616      	mov	r6, r2
 800d1ea:	461f      	mov	r7, r3
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	f003 f961 	bl	80104b4 <_localeconv_r>
 800d1f2:	6803      	ldr	r3, [r0, #0]
 800d1f4:	9304      	str	r3, [sp, #16]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f2 fffa 	bl	80001f0 <strlen>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d200:	f8d8 3000 	ldr.w	r3, [r8]
 800d204:	9005      	str	r0, [sp, #20]
 800d206:	3307      	adds	r3, #7
 800d208:	f023 0307 	bic.w	r3, r3, #7
 800d20c:	f103 0208 	add.w	r2, r3, #8
 800d210:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d214:	f8d4 b000 	ldr.w	fp, [r4]
 800d218:	f8c8 2000 	str.w	r2, [r8]
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d224:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d228:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d22c:	9307      	str	r3, [sp, #28]
 800d22e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d232:	f04f 32ff 	mov.w	r2, #4294967295
 800d236:	4ba7      	ldr	r3, [pc, #668]	; (800d4d4 <_printf_float+0x2f8>)
 800d238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d23c:	f7f3 fc86 	bl	8000b4c <__aeabi_dcmpun>
 800d240:	bb70      	cbnz	r0, 800d2a0 <_printf_float+0xc4>
 800d242:	f04f 32ff 	mov.w	r2, #4294967295
 800d246:	4ba3      	ldr	r3, [pc, #652]	; (800d4d4 <_printf_float+0x2f8>)
 800d248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d24c:	f7f3 fc60 	bl	8000b10 <__aeabi_dcmple>
 800d250:	bb30      	cbnz	r0, 800d2a0 <_printf_float+0xc4>
 800d252:	2200      	movs	r2, #0
 800d254:	2300      	movs	r3, #0
 800d256:	4640      	mov	r0, r8
 800d258:	4649      	mov	r1, r9
 800d25a:	f7f3 fc4f 	bl	8000afc <__aeabi_dcmplt>
 800d25e:	b110      	cbz	r0, 800d266 <_printf_float+0x8a>
 800d260:	232d      	movs	r3, #45	; 0x2d
 800d262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d266:	4a9c      	ldr	r2, [pc, #624]	; (800d4d8 <_printf_float+0x2fc>)
 800d268:	4b9c      	ldr	r3, [pc, #624]	; (800d4dc <_printf_float+0x300>)
 800d26a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d26e:	bf8c      	ite	hi
 800d270:	4690      	movhi	r8, r2
 800d272:	4698      	movls	r8, r3
 800d274:	2303      	movs	r3, #3
 800d276:	f02b 0204 	bic.w	r2, fp, #4
 800d27a:	6123      	str	r3, [r4, #16]
 800d27c:	6022      	str	r2, [r4, #0]
 800d27e:	f04f 0900 	mov.w	r9, #0
 800d282:	9700      	str	r7, [sp, #0]
 800d284:	4633      	mov	r3, r6
 800d286:	aa0b      	add	r2, sp, #44	; 0x2c
 800d288:	4621      	mov	r1, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 f9e6 	bl	800d65c <_printf_common>
 800d290:	3001      	adds	r0, #1
 800d292:	f040 808d 	bne.w	800d3b0 <_printf_float+0x1d4>
 800d296:	f04f 30ff 	mov.w	r0, #4294967295
 800d29a:	b00d      	add	sp, #52	; 0x34
 800d29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a0:	4642      	mov	r2, r8
 800d2a2:	464b      	mov	r3, r9
 800d2a4:	4640      	mov	r0, r8
 800d2a6:	4649      	mov	r1, r9
 800d2a8:	f7f3 fc50 	bl	8000b4c <__aeabi_dcmpun>
 800d2ac:	b110      	cbz	r0, 800d2b4 <_printf_float+0xd8>
 800d2ae:	4a8c      	ldr	r2, [pc, #560]	; (800d4e0 <_printf_float+0x304>)
 800d2b0:	4b8c      	ldr	r3, [pc, #560]	; (800d4e4 <_printf_float+0x308>)
 800d2b2:	e7da      	b.n	800d26a <_printf_float+0x8e>
 800d2b4:	6861      	ldr	r1, [r4, #4]
 800d2b6:	1c4b      	adds	r3, r1, #1
 800d2b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d2bc:	a80a      	add	r0, sp, #40	; 0x28
 800d2be:	d13e      	bne.n	800d33e <_printf_float+0x162>
 800d2c0:	2306      	movs	r3, #6
 800d2c2:	6063      	str	r3, [r4, #4]
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d2ca:	ab09      	add	r3, sp, #36	; 0x24
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	ec49 8b10 	vmov	d0, r8, r9
 800d2d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d2d6:	6022      	str	r2, [r4, #0]
 800d2d8:	f8cd a004 	str.w	sl, [sp, #4]
 800d2dc:	6861      	ldr	r1, [r4, #4]
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f7ff fee8 	bl	800d0b4 <__cvt>
 800d2e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d2e8:	2b47      	cmp	r3, #71	; 0x47
 800d2ea:	4680      	mov	r8, r0
 800d2ec:	d109      	bne.n	800d302 <_printf_float+0x126>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f0:	1cd8      	adds	r0, r3, #3
 800d2f2:	db02      	blt.n	800d2fa <_printf_float+0x11e>
 800d2f4:	6862      	ldr	r2, [r4, #4]
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	dd47      	ble.n	800d38a <_printf_float+0x1ae>
 800d2fa:	f1aa 0a02 	sub.w	sl, sl, #2
 800d2fe:	fa5f fa8a 	uxtb.w	sl, sl
 800d302:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d306:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d308:	d824      	bhi.n	800d354 <_printf_float+0x178>
 800d30a:	3901      	subs	r1, #1
 800d30c:	4652      	mov	r2, sl
 800d30e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d312:	9109      	str	r1, [sp, #36]	; 0x24
 800d314:	f7ff ff2f 	bl	800d176 <__exponent>
 800d318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d31a:	1813      	adds	r3, r2, r0
 800d31c:	2a01      	cmp	r2, #1
 800d31e:	4681      	mov	r9, r0
 800d320:	6123      	str	r3, [r4, #16]
 800d322:	dc02      	bgt.n	800d32a <_printf_float+0x14e>
 800d324:	6822      	ldr	r2, [r4, #0]
 800d326:	07d1      	lsls	r1, r2, #31
 800d328:	d501      	bpl.n	800d32e <_printf_float+0x152>
 800d32a:	3301      	adds	r3, #1
 800d32c:	6123      	str	r3, [r4, #16]
 800d32e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d332:	2b00      	cmp	r3, #0
 800d334:	d0a5      	beq.n	800d282 <_printf_float+0xa6>
 800d336:	232d      	movs	r3, #45	; 0x2d
 800d338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d33c:	e7a1      	b.n	800d282 <_printf_float+0xa6>
 800d33e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d342:	f000 8177 	beq.w	800d634 <_printf_float+0x458>
 800d346:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d34a:	d1bb      	bne.n	800d2c4 <_printf_float+0xe8>
 800d34c:	2900      	cmp	r1, #0
 800d34e:	d1b9      	bne.n	800d2c4 <_printf_float+0xe8>
 800d350:	2301      	movs	r3, #1
 800d352:	e7b6      	b.n	800d2c2 <_printf_float+0xe6>
 800d354:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d358:	d119      	bne.n	800d38e <_printf_float+0x1b2>
 800d35a:	2900      	cmp	r1, #0
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	dd0c      	ble.n	800d37a <_printf_float+0x19e>
 800d360:	6121      	str	r1, [r4, #16]
 800d362:	b913      	cbnz	r3, 800d36a <_printf_float+0x18e>
 800d364:	6822      	ldr	r2, [r4, #0]
 800d366:	07d2      	lsls	r2, r2, #31
 800d368:	d502      	bpl.n	800d370 <_printf_float+0x194>
 800d36a:	3301      	adds	r3, #1
 800d36c:	440b      	add	r3, r1
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d372:	65a3      	str	r3, [r4, #88]	; 0x58
 800d374:	f04f 0900 	mov.w	r9, #0
 800d378:	e7d9      	b.n	800d32e <_printf_float+0x152>
 800d37a:	b913      	cbnz	r3, 800d382 <_printf_float+0x1a6>
 800d37c:	6822      	ldr	r2, [r4, #0]
 800d37e:	07d0      	lsls	r0, r2, #31
 800d380:	d501      	bpl.n	800d386 <_printf_float+0x1aa>
 800d382:	3302      	adds	r3, #2
 800d384:	e7f3      	b.n	800d36e <_printf_float+0x192>
 800d386:	2301      	movs	r3, #1
 800d388:	e7f1      	b.n	800d36e <_printf_float+0x192>
 800d38a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d38e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d392:	4293      	cmp	r3, r2
 800d394:	db05      	blt.n	800d3a2 <_printf_float+0x1c6>
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	6123      	str	r3, [r4, #16]
 800d39a:	07d1      	lsls	r1, r2, #31
 800d39c:	d5e8      	bpl.n	800d370 <_printf_float+0x194>
 800d39e:	3301      	adds	r3, #1
 800d3a0:	e7e5      	b.n	800d36e <_printf_float+0x192>
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	bfd4      	ite	le
 800d3a6:	f1c3 0302 	rsble	r3, r3, #2
 800d3aa:	2301      	movgt	r3, #1
 800d3ac:	4413      	add	r3, r2
 800d3ae:	e7de      	b.n	800d36e <_printf_float+0x192>
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	055a      	lsls	r2, r3, #21
 800d3b4:	d407      	bmi.n	800d3c6 <_printf_float+0x1ea>
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	4642      	mov	r2, r8
 800d3ba:	4631      	mov	r1, r6
 800d3bc:	4628      	mov	r0, r5
 800d3be:	47b8      	blx	r7
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d12b      	bne.n	800d41c <_printf_float+0x240>
 800d3c4:	e767      	b.n	800d296 <_printf_float+0xba>
 800d3c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d3ca:	f240 80dc 	bls.w	800d586 <_printf_float+0x3aa>
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3d6:	f7f3 fb87 	bl	8000ae8 <__aeabi_dcmpeq>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d033      	beq.n	800d446 <_printf_float+0x26a>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	4a41      	ldr	r2, [pc, #260]	; (800d4e8 <_printf_float+0x30c>)
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	47b8      	blx	r7
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f43f af54 	beq.w	800d296 <_printf_float+0xba>
 800d3ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	db02      	blt.n	800d3fc <_printf_float+0x220>
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	07d8      	lsls	r0, r3, #31
 800d3fa:	d50f      	bpl.n	800d41c <_printf_float+0x240>
 800d3fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d400:	4631      	mov	r1, r6
 800d402:	4628      	mov	r0, r5
 800d404:	47b8      	blx	r7
 800d406:	3001      	adds	r0, #1
 800d408:	f43f af45 	beq.w	800d296 <_printf_float+0xba>
 800d40c:	f04f 0800 	mov.w	r8, #0
 800d410:	f104 091a 	add.w	r9, r4, #26
 800d414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d416:	3b01      	subs	r3, #1
 800d418:	4543      	cmp	r3, r8
 800d41a:	dc09      	bgt.n	800d430 <_printf_float+0x254>
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	079b      	lsls	r3, r3, #30
 800d420:	f100 8103 	bmi.w	800d62a <_printf_float+0x44e>
 800d424:	68e0      	ldr	r0, [r4, #12]
 800d426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d428:	4298      	cmp	r0, r3
 800d42a:	bfb8      	it	lt
 800d42c:	4618      	movlt	r0, r3
 800d42e:	e734      	b.n	800d29a <_printf_float+0xbe>
 800d430:	2301      	movs	r3, #1
 800d432:	464a      	mov	r2, r9
 800d434:	4631      	mov	r1, r6
 800d436:	4628      	mov	r0, r5
 800d438:	47b8      	blx	r7
 800d43a:	3001      	adds	r0, #1
 800d43c:	f43f af2b 	beq.w	800d296 <_printf_float+0xba>
 800d440:	f108 0801 	add.w	r8, r8, #1
 800d444:	e7e6      	b.n	800d414 <_printf_float+0x238>
 800d446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d448:	2b00      	cmp	r3, #0
 800d44a:	dc2b      	bgt.n	800d4a4 <_printf_float+0x2c8>
 800d44c:	2301      	movs	r3, #1
 800d44e:	4a26      	ldr	r2, [pc, #152]	; (800d4e8 <_printf_float+0x30c>)
 800d450:	4631      	mov	r1, r6
 800d452:	4628      	mov	r0, r5
 800d454:	47b8      	blx	r7
 800d456:	3001      	adds	r0, #1
 800d458:	f43f af1d 	beq.w	800d296 <_printf_float+0xba>
 800d45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d45e:	b923      	cbnz	r3, 800d46a <_printf_float+0x28e>
 800d460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d462:	b913      	cbnz	r3, 800d46a <_printf_float+0x28e>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	07d9      	lsls	r1, r3, #31
 800d468:	d5d8      	bpl.n	800d41c <_printf_float+0x240>
 800d46a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d46e:	4631      	mov	r1, r6
 800d470:	4628      	mov	r0, r5
 800d472:	47b8      	blx	r7
 800d474:	3001      	adds	r0, #1
 800d476:	f43f af0e 	beq.w	800d296 <_printf_float+0xba>
 800d47a:	f04f 0900 	mov.w	r9, #0
 800d47e:	f104 0a1a 	add.w	sl, r4, #26
 800d482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d484:	425b      	negs	r3, r3
 800d486:	454b      	cmp	r3, r9
 800d488:	dc01      	bgt.n	800d48e <_printf_float+0x2b2>
 800d48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d48c:	e794      	b.n	800d3b8 <_printf_float+0x1dc>
 800d48e:	2301      	movs	r3, #1
 800d490:	4652      	mov	r2, sl
 800d492:	4631      	mov	r1, r6
 800d494:	4628      	mov	r0, r5
 800d496:	47b8      	blx	r7
 800d498:	3001      	adds	r0, #1
 800d49a:	f43f aefc 	beq.w	800d296 <_printf_float+0xba>
 800d49e:	f109 0901 	add.w	r9, r9, #1
 800d4a2:	e7ee      	b.n	800d482 <_printf_float+0x2a6>
 800d4a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	bfa8      	it	ge
 800d4ac:	461a      	movge	r2, r3
 800d4ae:	2a00      	cmp	r2, #0
 800d4b0:	4691      	mov	r9, r2
 800d4b2:	dd07      	ble.n	800d4c4 <_printf_float+0x2e8>
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	4631      	mov	r1, r6
 800d4b8:	4642      	mov	r2, r8
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	47b8      	blx	r7
 800d4be:	3001      	adds	r0, #1
 800d4c0:	f43f aee9 	beq.w	800d296 <_printf_float+0xba>
 800d4c4:	f104 031a 	add.w	r3, r4, #26
 800d4c8:	f04f 0b00 	mov.w	fp, #0
 800d4cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4d0:	9306      	str	r3, [sp, #24]
 800d4d2:	e015      	b.n	800d500 <_printf_float+0x324>
 800d4d4:	7fefffff 	.word	0x7fefffff
 800d4d8:	08011604 	.word	0x08011604
 800d4dc:	08011600 	.word	0x08011600
 800d4e0:	0801160c 	.word	0x0801160c
 800d4e4:	08011608 	.word	0x08011608
 800d4e8:	08011610 	.word	0x08011610
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	9a06      	ldr	r2, [sp, #24]
 800d4f0:	4631      	mov	r1, r6
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	47b8      	blx	r7
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	f43f aecd 	beq.w	800d296 <_printf_float+0xba>
 800d4fc:	f10b 0b01 	add.w	fp, fp, #1
 800d500:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d504:	ebaa 0309 	sub.w	r3, sl, r9
 800d508:	455b      	cmp	r3, fp
 800d50a:	dcef      	bgt.n	800d4ec <_printf_float+0x310>
 800d50c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d510:	429a      	cmp	r2, r3
 800d512:	44d0      	add	r8, sl
 800d514:	db15      	blt.n	800d542 <_printf_float+0x366>
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	07da      	lsls	r2, r3, #31
 800d51a:	d412      	bmi.n	800d542 <_printf_float+0x366>
 800d51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d51e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d520:	eba3 020a 	sub.w	r2, r3, sl
 800d524:	eba3 0a01 	sub.w	sl, r3, r1
 800d528:	4592      	cmp	sl, r2
 800d52a:	bfa8      	it	ge
 800d52c:	4692      	movge	sl, r2
 800d52e:	f1ba 0f00 	cmp.w	sl, #0
 800d532:	dc0e      	bgt.n	800d552 <_printf_float+0x376>
 800d534:	f04f 0800 	mov.w	r8, #0
 800d538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d53c:	f104 091a 	add.w	r9, r4, #26
 800d540:	e019      	b.n	800d576 <_printf_float+0x39a>
 800d542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d546:	4631      	mov	r1, r6
 800d548:	4628      	mov	r0, r5
 800d54a:	47b8      	blx	r7
 800d54c:	3001      	adds	r0, #1
 800d54e:	d1e5      	bne.n	800d51c <_printf_float+0x340>
 800d550:	e6a1      	b.n	800d296 <_printf_float+0xba>
 800d552:	4653      	mov	r3, sl
 800d554:	4642      	mov	r2, r8
 800d556:	4631      	mov	r1, r6
 800d558:	4628      	mov	r0, r5
 800d55a:	47b8      	blx	r7
 800d55c:	3001      	adds	r0, #1
 800d55e:	d1e9      	bne.n	800d534 <_printf_float+0x358>
 800d560:	e699      	b.n	800d296 <_printf_float+0xba>
 800d562:	2301      	movs	r3, #1
 800d564:	464a      	mov	r2, r9
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	f43f ae92 	beq.w	800d296 <_printf_float+0xba>
 800d572:	f108 0801 	add.w	r8, r8, #1
 800d576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d57a:	1a9b      	subs	r3, r3, r2
 800d57c:	eba3 030a 	sub.w	r3, r3, sl
 800d580:	4543      	cmp	r3, r8
 800d582:	dcee      	bgt.n	800d562 <_printf_float+0x386>
 800d584:	e74a      	b.n	800d41c <_printf_float+0x240>
 800d586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d588:	2a01      	cmp	r2, #1
 800d58a:	dc01      	bgt.n	800d590 <_printf_float+0x3b4>
 800d58c:	07db      	lsls	r3, r3, #31
 800d58e:	d53a      	bpl.n	800d606 <_printf_float+0x42a>
 800d590:	2301      	movs	r3, #1
 800d592:	4642      	mov	r2, r8
 800d594:	4631      	mov	r1, r6
 800d596:	4628      	mov	r0, r5
 800d598:	47b8      	blx	r7
 800d59a:	3001      	adds	r0, #1
 800d59c:	f43f ae7b 	beq.w	800d296 <_printf_float+0xba>
 800d5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5a4:	4631      	mov	r1, r6
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	47b8      	blx	r7
 800d5aa:	3001      	adds	r0, #1
 800d5ac:	f108 0801 	add.w	r8, r8, #1
 800d5b0:	f43f ae71 	beq.w	800d296 <_printf_float+0xba>
 800d5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f103 3aff 	add.w	sl, r3, #4294967295
 800d5bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f7f3 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5c6:	b9c8      	cbnz	r0, 800d5fc <_printf_float+0x420>
 800d5c8:	4653      	mov	r3, sl
 800d5ca:	4642      	mov	r2, r8
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	47b8      	blx	r7
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	d10e      	bne.n	800d5f4 <_printf_float+0x418>
 800d5d6:	e65e      	b.n	800d296 <_printf_float+0xba>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	4652      	mov	r2, sl
 800d5dc:	4631      	mov	r1, r6
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b8      	blx	r7
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	f43f ae57 	beq.w	800d296 <_printf_float+0xba>
 800d5e8:	f108 0801 	add.w	r8, r8, #1
 800d5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	4543      	cmp	r3, r8
 800d5f2:	dcf1      	bgt.n	800d5d8 <_printf_float+0x3fc>
 800d5f4:	464b      	mov	r3, r9
 800d5f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d5fa:	e6de      	b.n	800d3ba <_printf_float+0x1de>
 800d5fc:	f04f 0800 	mov.w	r8, #0
 800d600:	f104 0a1a 	add.w	sl, r4, #26
 800d604:	e7f2      	b.n	800d5ec <_printf_float+0x410>
 800d606:	2301      	movs	r3, #1
 800d608:	e7df      	b.n	800d5ca <_printf_float+0x3ee>
 800d60a:	2301      	movs	r3, #1
 800d60c:	464a      	mov	r2, r9
 800d60e:	4631      	mov	r1, r6
 800d610:	4628      	mov	r0, r5
 800d612:	47b8      	blx	r7
 800d614:	3001      	adds	r0, #1
 800d616:	f43f ae3e 	beq.w	800d296 <_printf_float+0xba>
 800d61a:	f108 0801 	add.w	r8, r8, #1
 800d61e:	68e3      	ldr	r3, [r4, #12]
 800d620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d622:	1a9b      	subs	r3, r3, r2
 800d624:	4543      	cmp	r3, r8
 800d626:	dcf0      	bgt.n	800d60a <_printf_float+0x42e>
 800d628:	e6fc      	b.n	800d424 <_printf_float+0x248>
 800d62a:	f04f 0800 	mov.w	r8, #0
 800d62e:	f104 0919 	add.w	r9, r4, #25
 800d632:	e7f4      	b.n	800d61e <_printf_float+0x442>
 800d634:	2900      	cmp	r1, #0
 800d636:	f43f ae8b 	beq.w	800d350 <_printf_float+0x174>
 800d63a:	2300      	movs	r3, #0
 800d63c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d640:	ab09      	add	r3, sp, #36	; 0x24
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	ec49 8b10 	vmov	d0, r8, r9
 800d648:	6022      	str	r2, [r4, #0]
 800d64a:	f8cd a004 	str.w	sl, [sp, #4]
 800d64e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d652:	4628      	mov	r0, r5
 800d654:	f7ff fd2e 	bl	800d0b4 <__cvt>
 800d658:	4680      	mov	r8, r0
 800d65a:	e648      	b.n	800d2ee <_printf_float+0x112>

0800d65c <_printf_common>:
 800d65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d660:	4691      	mov	r9, r2
 800d662:	461f      	mov	r7, r3
 800d664:	688a      	ldr	r2, [r1, #8]
 800d666:	690b      	ldr	r3, [r1, #16]
 800d668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d66c:	4293      	cmp	r3, r2
 800d66e:	bfb8      	it	lt
 800d670:	4613      	movlt	r3, r2
 800d672:	f8c9 3000 	str.w	r3, [r9]
 800d676:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d67a:	4606      	mov	r6, r0
 800d67c:	460c      	mov	r4, r1
 800d67e:	b112      	cbz	r2, 800d686 <_printf_common+0x2a>
 800d680:	3301      	adds	r3, #1
 800d682:	f8c9 3000 	str.w	r3, [r9]
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	0699      	lsls	r1, r3, #26
 800d68a:	bf42      	ittt	mi
 800d68c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d690:	3302      	addmi	r3, #2
 800d692:	f8c9 3000 	strmi.w	r3, [r9]
 800d696:	6825      	ldr	r5, [r4, #0]
 800d698:	f015 0506 	ands.w	r5, r5, #6
 800d69c:	d107      	bne.n	800d6ae <_printf_common+0x52>
 800d69e:	f104 0a19 	add.w	sl, r4, #25
 800d6a2:	68e3      	ldr	r3, [r4, #12]
 800d6a4:	f8d9 2000 	ldr.w	r2, [r9]
 800d6a8:	1a9b      	subs	r3, r3, r2
 800d6aa:	42ab      	cmp	r3, r5
 800d6ac:	dc28      	bgt.n	800d700 <_printf_common+0xa4>
 800d6ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d6b2:	6822      	ldr	r2, [r4, #0]
 800d6b4:	3300      	adds	r3, #0
 800d6b6:	bf18      	it	ne
 800d6b8:	2301      	movne	r3, #1
 800d6ba:	0692      	lsls	r2, r2, #26
 800d6bc:	d42d      	bmi.n	800d71a <_printf_common+0xbe>
 800d6be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6c2:	4639      	mov	r1, r7
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	47c0      	blx	r8
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d020      	beq.n	800d70e <_printf_common+0xb2>
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	68e5      	ldr	r5, [r4, #12]
 800d6d0:	f8d9 2000 	ldr.w	r2, [r9]
 800d6d4:	f003 0306 	and.w	r3, r3, #6
 800d6d8:	2b04      	cmp	r3, #4
 800d6da:	bf08      	it	eq
 800d6dc:	1aad      	subeq	r5, r5, r2
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	6922      	ldr	r2, [r4, #16]
 800d6e2:	bf0c      	ite	eq
 800d6e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6e8:	2500      	movne	r5, #0
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	bfc4      	itt	gt
 800d6ee:	1a9b      	subgt	r3, r3, r2
 800d6f0:	18ed      	addgt	r5, r5, r3
 800d6f2:	f04f 0900 	mov.w	r9, #0
 800d6f6:	341a      	adds	r4, #26
 800d6f8:	454d      	cmp	r5, r9
 800d6fa:	d11a      	bne.n	800d732 <_printf_common+0xd6>
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	e008      	b.n	800d712 <_printf_common+0xb6>
 800d700:	2301      	movs	r3, #1
 800d702:	4652      	mov	r2, sl
 800d704:	4639      	mov	r1, r7
 800d706:	4630      	mov	r0, r6
 800d708:	47c0      	blx	r8
 800d70a:	3001      	adds	r0, #1
 800d70c:	d103      	bne.n	800d716 <_printf_common+0xba>
 800d70e:	f04f 30ff 	mov.w	r0, #4294967295
 800d712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d716:	3501      	adds	r5, #1
 800d718:	e7c3      	b.n	800d6a2 <_printf_common+0x46>
 800d71a:	18e1      	adds	r1, r4, r3
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	2030      	movs	r0, #48	; 0x30
 800d720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d724:	4422      	add	r2, r4
 800d726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d72a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d72e:	3302      	adds	r3, #2
 800d730:	e7c5      	b.n	800d6be <_printf_common+0x62>
 800d732:	2301      	movs	r3, #1
 800d734:	4622      	mov	r2, r4
 800d736:	4639      	mov	r1, r7
 800d738:	4630      	mov	r0, r6
 800d73a:	47c0      	blx	r8
 800d73c:	3001      	adds	r0, #1
 800d73e:	d0e6      	beq.n	800d70e <_printf_common+0xb2>
 800d740:	f109 0901 	add.w	r9, r9, #1
 800d744:	e7d8      	b.n	800d6f8 <_printf_common+0x9c>
	...

0800d748 <_printf_i>:
 800d748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d74c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d750:	460c      	mov	r4, r1
 800d752:	7e09      	ldrb	r1, [r1, #24]
 800d754:	b085      	sub	sp, #20
 800d756:	296e      	cmp	r1, #110	; 0x6e
 800d758:	4617      	mov	r7, r2
 800d75a:	4606      	mov	r6, r0
 800d75c:	4698      	mov	r8, r3
 800d75e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d760:	f000 80b3 	beq.w	800d8ca <_printf_i+0x182>
 800d764:	d822      	bhi.n	800d7ac <_printf_i+0x64>
 800d766:	2963      	cmp	r1, #99	; 0x63
 800d768:	d036      	beq.n	800d7d8 <_printf_i+0x90>
 800d76a:	d80a      	bhi.n	800d782 <_printf_i+0x3a>
 800d76c:	2900      	cmp	r1, #0
 800d76e:	f000 80b9 	beq.w	800d8e4 <_printf_i+0x19c>
 800d772:	2958      	cmp	r1, #88	; 0x58
 800d774:	f000 8083 	beq.w	800d87e <_printf_i+0x136>
 800d778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d77c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d780:	e032      	b.n	800d7e8 <_printf_i+0xa0>
 800d782:	2964      	cmp	r1, #100	; 0x64
 800d784:	d001      	beq.n	800d78a <_printf_i+0x42>
 800d786:	2969      	cmp	r1, #105	; 0x69
 800d788:	d1f6      	bne.n	800d778 <_printf_i+0x30>
 800d78a:	6820      	ldr	r0, [r4, #0]
 800d78c:	6813      	ldr	r3, [r2, #0]
 800d78e:	0605      	lsls	r5, r0, #24
 800d790:	f103 0104 	add.w	r1, r3, #4
 800d794:	d52a      	bpl.n	800d7ec <_printf_i+0xa4>
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6011      	str	r1, [r2, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	da03      	bge.n	800d7a6 <_printf_i+0x5e>
 800d79e:	222d      	movs	r2, #45	; 0x2d
 800d7a0:	425b      	negs	r3, r3
 800d7a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d7a6:	486f      	ldr	r0, [pc, #444]	; (800d964 <_printf_i+0x21c>)
 800d7a8:	220a      	movs	r2, #10
 800d7aa:	e039      	b.n	800d820 <_printf_i+0xd8>
 800d7ac:	2973      	cmp	r1, #115	; 0x73
 800d7ae:	f000 809d 	beq.w	800d8ec <_printf_i+0x1a4>
 800d7b2:	d808      	bhi.n	800d7c6 <_printf_i+0x7e>
 800d7b4:	296f      	cmp	r1, #111	; 0x6f
 800d7b6:	d020      	beq.n	800d7fa <_printf_i+0xb2>
 800d7b8:	2970      	cmp	r1, #112	; 0x70
 800d7ba:	d1dd      	bne.n	800d778 <_printf_i+0x30>
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	f043 0320 	orr.w	r3, r3, #32
 800d7c2:	6023      	str	r3, [r4, #0]
 800d7c4:	e003      	b.n	800d7ce <_printf_i+0x86>
 800d7c6:	2975      	cmp	r1, #117	; 0x75
 800d7c8:	d017      	beq.n	800d7fa <_printf_i+0xb2>
 800d7ca:	2978      	cmp	r1, #120	; 0x78
 800d7cc:	d1d4      	bne.n	800d778 <_printf_i+0x30>
 800d7ce:	2378      	movs	r3, #120	; 0x78
 800d7d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7d4:	4864      	ldr	r0, [pc, #400]	; (800d968 <_printf_i+0x220>)
 800d7d6:	e055      	b.n	800d884 <_printf_i+0x13c>
 800d7d8:	6813      	ldr	r3, [r2, #0]
 800d7da:	1d19      	adds	r1, r3, #4
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6011      	str	r1, [r2, #0]
 800d7e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e08c      	b.n	800d906 <_printf_i+0x1be>
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6011      	str	r1, [r2, #0]
 800d7f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d7f4:	bf18      	it	ne
 800d7f6:	b21b      	sxthne	r3, r3
 800d7f8:	e7cf      	b.n	800d79a <_printf_i+0x52>
 800d7fa:	6813      	ldr	r3, [r2, #0]
 800d7fc:	6825      	ldr	r5, [r4, #0]
 800d7fe:	1d18      	adds	r0, r3, #4
 800d800:	6010      	str	r0, [r2, #0]
 800d802:	0628      	lsls	r0, r5, #24
 800d804:	d501      	bpl.n	800d80a <_printf_i+0xc2>
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	e002      	b.n	800d810 <_printf_i+0xc8>
 800d80a:	0668      	lsls	r0, r5, #25
 800d80c:	d5fb      	bpl.n	800d806 <_printf_i+0xbe>
 800d80e:	881b      	ldrh	r3, [r3, #0]
 800d810:	4854      	ldr	r0, [pc, #336]	; (800d964 <_printf_i+0x21c>)
 800d812:	296f      	cmp	r1, #111	; 0x6f
 800d814:	bf14      	ite	ne
 800d816:	220a      	movne	r2, #10
 800d818:	2208      	moveq	r2, #8
 800d81a:	2100      	movs	r1, #0
 800d81c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d820:	6865      	ldr	r5, [r4, #4]
 800d822:	60a5      	str	r5, [r4, #8]
 800d824:	2d00      	cmp	r5, #0
 800d826:	f2c0 8095 	blt.w	800d954 <_printf_i+0x20c>
 800d82a:	6821      	ldr	r1, [r4, #0]
 800d82c:	f021 0104 	bic.w	r1, r1, #4
 800d830:	6021      	str	r1, [r4, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d13d      	bne.n	800d8b2 <_printf_i+0x16a>
 800d836:	2d00      	cmp	r5, #0
 800d838:	f040 808e 	bne.w	800d958 <_printf_i+0x210>
 800d83c:	4665      	mov	r5, ip
 800d83e:	2a08      	cmp	r2, #8
 800d840:	d10b      	bne.n	800d85a <_printf_i+0x112>
 800d842:	6823      	ldr	r3, [r4, #0]
 800d844:	07db      	lsls	r3, r3, #31
 800d846:	d508      	bpl.n	800d85a <_printf_i+0x112>
 800d848:	6923      	ldr	r3, [r4, #16]
 800d84a:	6862      	ldr	r2, [r4, #4]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	bfde      	ittt	le
 800d850:	2330      	movle	r3, #48	; 0x30
 800d852:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d856:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d85a:	ebac 0305 	sub.w	r3, ip, r5
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	f8cd 8000 	str.w	r8, [sp]
 800d864:	463b      	mov	r3, r7
 800d866:	aa03      	add	r2, sp, #12
 800d868:	4621      	mov	r1, r4
 800d86a:	4630      	mov	r0, r6
 800d86c:	f7ff fef6 	bl	800d65c <_printf_common>
 800d870:	3001      	adds	r0, #1
 800d872:	d14d      	bne.n	800d910 <_printf_i+0x1c8>
 800d874:	f04f 30ff 	mov.w	r0, #4294967295
 800d878:	b005      	add	sp, #20
 800d87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d87e:	4839      	ldr	r0, [pc, #228]	; (800d964 <_printf_i+0x21c>)
 800d880:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d884:	6813      	ldr	r3, [r2, #0]
 800d886:	6821      	ldr	r1, [r4, #0]
 800d888:	1d1d      	adds	r5, r3, #4
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6015      	str	r5, [r2, #0]
 800d88e:	060a      	lsls	r2, r1, #24
 800d890:	d50b      	bpl.n	800d8aa <_printf_i+0x162>
 800d892:	07ca      	lsls	r2, r1, #31
 800d894:	bf44      	itt	mi
 800d896:	f041 0120 	orrmi.w	r1, r1, #32
 800d89a:	6021      	strmi	r1, [r4, #0]
 800d89c:	b91b      	cbnz	r3, 800d8a6 <_printf_i+0x15e>
 800d89e:	6822      	ldr	r2, [r4, #0]
 800d8a0:	f022 0220 	bic.w	r2, r2, #32
 800d8a4:	6022      	str	r2, [r4, #0]
 800d8a6:	2210      	movs	r2, #16
 800d8a8:	e7b7      	b.n	800d81a <_printf_i+0xd2>
 800d8aa:	064d      	lsls	r5, r1, #25
 800d8ac:	bf48      	it	mi
 800d8ae:	b29b      	uxthmi	r3, r3
 800d8b0:	e7ef      	b.n	800d892 <_printf_i+0x14a>
 800d8b2:	4665      	mov	r5, ip
 800d8b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8b8:	fb02 3311 	mls	r3, r2, r1, r3
 800d8bc:	5cc3      	ldrb	r3, [r0, r3]
 800d8be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	2900      	cmp	r1, #0
 800d8c6:	d1f5      	bne.n	800d8b4 <_printf_i+0x16c>
 800d8c8:	e7b9      	b.n	800d83e <_printf_i+0xf6>
 800d8ca:	6813      	ldr	r3, [r2, #0]
 800d8cc:	6825      	ldr	r5, [r4, #0]
 800d8ce:	6961      	ldr	r1, [r4, #20]
 800d8d0:	1d18      	adds	r0, r3, #4
 800d8d2:	6010      	str	r0, [r2, #0]
 800d8d4:	0628      	lsls	r0, r5, #24
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	d501      	bpl.n	800d8de <_printf_i+0x196>
 800d8da:	6019      	str	r1, [r3, #0]
 800d8dc:	e002      	b.n	800d8e4 <_printf_i+0x19c>
 800d8de:	066a      	lsls	r2, r5, #25
 800d8e0:	d5fb      	bpl.n	800d8da <_printf_i+0x192>
 800d8e2:	8019      	strh	r1, [r3, #0]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	6123      	str	r3, [r4, #16]
 800d8e8:	4665      	mov	r5, ip
 800d8ea:	e7b9      	b.n	800d860 <_printf_i+0x118>
 800d8ec:	6813      	ldr	r3, [r2, #0]
 800d8ee:	1d19      	adds	r1, r3, #4
 800d8f0:	6011      	str	r1, [r2, #0]
 800d8f2:	681d      	ldr	r5, [r3, #0]
 800d8f4:	6862      	ldr	r2, [r4, #4]
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f7f2 fc81 	bl	8000200 <memchr>
 800d8fe:	b108      	cbz	r0, 800d904 <_printf_i+0x1bc>
 800d900:	1b40      	subs	r0, r0, r5
 800d902:	6060      	str	r0, [r4, #4]
 800d904:	6863      	ldr	r3, [r4, #4]
 800d906:	6123      	str	r3, [r4, #16]
 800d908:	2300      	movs	r3, #0
 800d90a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d90e:	e7a7      	b.n	800d860 <_printf_i+0x118>
 800d910:	6923      	ldr	r3, [r4, #16]
 800d912:	462a      	mov	r2, r5
 800d914:	4639      	mov	r1, r7
 800d916:	4630      	mov	r0, r6
 800d918:	47c0      	blx	r8
 800d91a:	3001      	adds	r0, #1
 800d91c:	d0aa      	beq.n	800d874 <_printf_i+0x12c>
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	079b      	lsls	r3, r3, #30
 800d922:	d413      	bmi.n	800d94c <_printf_i+0x204>
 800d924:	68e0      	ldr	r0, [r4, #12]
 800d926:	9b03      	ldr	r3, [sp, #12]
 800d928:	4298      	cmp	r0, r3
 800d92a:	bfb8      	it	lt
 800d92c:	4618      	movlt	r0, r3
 800d92e:	e7a3      	b.n	800d878 <_printf_i+0x130>
 800d930:	2301      	movs	r3, #1
 800d932:	464a      	mov	r2, r9
 800d934:	4639      	mov	r1, r7
 800d936:	4630      	mov	r0, r6
 800d938:	47c0      	blx	r8
 800d93a:	3001      	adds	r0, #1
 800d93c:	d09a      	beq.n	800d874 <_printf_i+0x12c>
 800d93e:	3501      	adds	r5, #1
 800d940:	68e3      	ldr	r3, [r4, #12]
 800d942:	9a03      	ldr	r2, [sp, #12]
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	42ab      	cmp	r3, r5
 800d948:	dcf2      	bgt.n	800d930 <_printf_i+0x1e8>
 800d94a:	e7eb      	b.n	800d924 <_printf_i+0x1dc>
 800d94c:	2500      	movs	r5, #0
 800d94e:	f104 0919 	add.w	r9, r4, #25
 800d952:	e7f5      	b.n	800d940 <_printf_i+0x1f8>
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1ac      	bne.n	800d8b2 <_printf_i+0x16a>
 800d958:	7803      	ldrb	r3, [r0, #0]
 800d95a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d95e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d962:	e76c      	b.n	800d83e <_printf_i+0xf6>
 800d964:	08011612 	.word	0x08011612
 800d968:	08011623 	.word	0x08011623

0800d96c <_scanf_float>:
 800d96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	469a      	mov	sl, r3
 800d972:	688b      	ldr	r3, [r1, #8]
 800d974:	4616      	mov	r6, r2
 800d976:	1e5a      	subs	r2, r3, #1
 800d978:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d97c:	b087      	sub	sp, #28
 800d97e:	bf83      	ittte	hi
 800d980:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d984:	189b      	addhi	r3, r3, r2
 800d986:	9301      	strhi	r3, [sp, #4]
 800d988:	2300      	movls	r3, #0
 800d98a:	bf86      	itte	hi
 800d98c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d990:	608b      	strhi	r3, [r1, #8]
 800d992:	9301      	strls	r3, [sp, #4]
 800d994:	680b      	ldr	r3, [r1, #0]
 800d996:	4688      	mov	r8, r1
 800d998:	f04f 0b00 	mov.w	fp, #0
 800d99c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d9a0:	f848 3b1c 	str.w	r3, [r8], #28
 800d9a4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	4645      	mov	r5, r8
 800d9ae:	465a      	mov	r2, fp
 800d9b0:	46d9      	mov	r9, fp
 800d9b2:	f8cd b008 	str.w	fp, [sp, #8]
 800d9b6:	68a1      	ldr	r1, [r4, #8]
 800d9b8:	b181      	cbz	r1, 800d9dc <_scanf_float+0x70>
 800d9ba:	6833      	ldr	r3, [r6, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b49      	cmp	r3, #73	; 0x49
 800d9c0:	d071      	beq.n	800daa6 <_scanf_float+0x13a>
 800d9c2:	d84d      	bhi.n	800da60 <_scanf_float+0xf4>
 800d9c4:	2b39      	cmp	r3, #57	; 0x39
 800d9c6:	d840      	bhi.n	800da4a <_scanf_float+0xde>
 800d9c8:	2b31      	cmp	r3, #49	; 0x31
 800d9ca:	f080 8088 	bcs.w	800dade <_scanf_float+0x172>
 800d9ce:	2b2d      	cmp	r3, #45	; 0x2d
 800d9d0:	f000 8090 	beq.w	800daf4 <_scanf_float+0x188>
 800d9d4:	d815      	bhi.n	800da02 <_scanf_float+0x96>
 800d9d6:	2b2b      	cmp	r3, #43	; 0x2b
 800d9d8:	f000 808c 	beq.w	800daf4 <_scanf_float+0x188>
 800d9dc:	f1b9 0f00 	cmp.w	r9, #0
 800d9e0:	d003      	beq.n	800d9ea <_scanf_float+0x7e>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	3a01      	subs	r2, #1
 800d9ec:	2a01      	cmp	r2, #1
 800d9ee:	f200 80ea 	bhi.w	800dbc6 <_scanf_float+0x25a>
 800d9f2:	4545      	cmp	r5, r8
 800d9f4:	f200 80dc 	bhi.w	800dbb0 <_scanf_float+0x244>
 800d9f8:	2601      	movs	r6, #1
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	b007      	add	sp, #28
 800d9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da02:	2b2e      	cmp	r3, #46	; 0x2e
 800da04:	f000 809f 	beq.w	800db46 <_scanf_float+0x1da>
 800da08:	2b30      	cmp	r3, #48	; 0x30
 800da0a:	d1e7      	bne.n	800d9dc <_scanf_float+0x70>
 800da0c:	6820      	ldr	r0, [r4, #0]
 800da0e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800da12:	d064      	beq.n	800dade <_scanf_float+0x172>
 800da14:	9b01      	ldr	r3, [sp, #4]
 800da16:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800da1a:	6020      	str	r0, [r4, #0]
 800da1c:	f109 0901 	add.w	r9, r9, #1
 800da20:	b11b      	cbz	r3, 800da2a <_scanf_float+0xbe>
 800da22:	3b01      	subs	r3, #1
 800da24:	3101      	adds	r1, #1
 800da26:	9301      	str	r3, [sp, #4]
 800da28:	60a1      	str	r1, [r4, #8]
 800da2a:	68a3      	ldr	r3, [r4, #8]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	60a3      	str	r3, [r4, #8]
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	3301      	adds	r3, #1
 800da34:	6123      	str	r3, [r4, #16]
 800da36:	6873      	ldr	r3, [r6, #4]
 800da38:	3b01      	subs	r3, #1
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	6073      	str	r3, [r6, #4]
 800da3e:	f340 80ac 	ble.w	800db9a <_scanf_float+0x22e>
 800da42:	6833      	ldr	r3, [r6, #0]
 800da44:	3301      	adds	r3, #1
 800da46:	6033      	str	r3, [r6, #0]
 800da48:	e7b5      	b.n	800d9b6 <_scanf_float+0x4a>
 800da4a:	2b45      	cmp	r3, #69	; 0x45
 800da4c:	f000 8085 	beq.w	800db5a <_scanf_float+0x1ee>
 800da50:	2b46      	cmp	r3, #70	; 0x46
 800da52:	d06a      	beq.n	800db2a <_scanf_float+0x1be>
 800da54:	2b41      	cmp	r3, #65	; 0x41
 800da56:	d1c1      	bne.n	800d9dc <_scanf_float+0x70>
 800da58:	2a01      	cmp	r2, #1
 800da5a:	d1bf      	bne.n	800d9dc <_scanf_float+0x70>
 800da5c:	2202      	movs	r2, #2
 800da5e:	e046      	b.n	800daee <_scanf_float+0x182>
 800da60:	2b65      	cmp	r3, #101	; 0x65
 800da62:	d07a      	beq.n	800db5a <_scanf_float+0x1ee>
 800da64:	d818      	bhi.n	800da98 <_scanf_float+0x12c>
 800da66:	2b54      	cmp	r3, #84	; 0x54
 800da68:	d066      	beq.n	800db38 <_scanf_float+0x1cc>
 800da6a:	d811      	bhi.n	800da90 <_scanf_float+0x124>
 800da6c:	2b4e      	cmp	r3, #78	; 0x4e
 800da6e:	d1b5      	bne.n	800d9dc <_scanf_float+0x70>
 800da70:	2a00      	cmp	r2, #0
 800da72:	d146      	bne.n	800db02 <_scanf_float+0x196>
 800da74:	f1b9 0f00 	cmp.w	r9, #0
 800da78:	d145      	bne.n	800db06 <_scanf_float+0x19a>
 800da7a:	6821      	ldr	r1, [r4, #0]
 800da7c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800da80:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800da84:	d13f      	bne.n	800db06 <_scanf_float+0x19a>
 800da86:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800da8a:	6021      	str	r1, [r4, #0]
 800da8c:	2201      	movs	r2, #1
 800da8e:	e02e      	b.n	800daee <_scanf_float+0x182>
 800da90:	2b59      	cmp	r3, #89	; 0x59
 800da92:	d01e      	beq.n	800dad2 <_scanf_float+0x166>
 800da94:	2b61      	cmp	r3, #97	; 0x61
 800da96:	e7de      	b.n	800da56 <_scanf_float+0xea>
 800da98:	2b6e      	cmp	r3, #110	; 0x6e
 800da9a:	d0e9      	beq.n	800da70 <_scanf_float+0x104>
 800da9c:	d815      	bhi.n	800daca <_scanf_float+0x15e>
 800da9e:	2b66      	cmp	r3, #102	; 0x66
 800daa0:	d043      	beq.n	800db2a <_scanf_float+0x1be>
 800daa2:	2b69      	cmp	r3, #105	; 0x69
 800daa4:	d19a      	bne.n	800d9dc <_scanf_float+0x70>
 800daa6:	f1bb 0f00 	cmp.w	fp, #0
 800daaa:	d138      	bne.n	800db1e <_scanf_float+0x1b2>
 800daac:	f1b9 0f00 	cmp.w	r9, #0
 800dab0:	d197      	bne.n	800d9e2 <_scanf_float+0x76>
 800dab2:	6821      	ldr	r1, [r4, #0]
 800dab4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800dab8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800dabc:	d195      	bne.n	800d9ea <_scanf_float+0x7e>
 800dabe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800dac2:	6021      	str	r1, [r4, #0]
 800dac4:	f04f 0b01 	mov.w	fp, #1
 800dac8:	e011      	b.n	800daee <_scanf_float+0x182>
 800daca:	2b74      	cmp	r3, #116	; 0x74
 800dacc:	d034      	beq.n	800db38 <_scanf_float+0x1cc>
 800dace:	2b79      	cmp	r3, #121	; 0x79
 800dad0:	d184      	bne.n	800d9dc <_scanf_float+0x70>
 800dad2:	f1bb 0f07 	cmp.w	fp, #7
 800dad6:	d181      	bne.n	800d9dc <_scanf_float+0x70>
 800dad8:	f04f 0b08 	mov.w	fp, #8
 800dadc:	e007      	b.n	800daee <_scanf_float+0x182>
 800dade:	eb12 0f0b 	cmn.w	r2, fp
 800dae2:	f47f af7b 	bne.w	800d9dc <_scanf_float+0x70>
 800dae6:	6821      	ldr	r1, [r4, #0]
 800dae8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800daec:	6021      	str	r1, [r4, #0]
 800daee:	702b      	strb	r3, [r5, #0]
 800daf0:	3501      	adds	r5, #1
 800daf2:	e79a      	b.n	800da2a <_scanf_float+0xbe>
 800daf4:	6821      	ldr	r1, [r4, #0]
 800daf6:	0608      	lsls	r0, r1, #24
 800daf8:	f57f af70 	bpl.w	800d9dc <_scanf_float+0x70>
 800dafc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800db00:	e7f4      	b.n	800daec <_scanf_float+0x180>
 800db02:	2a02      	cmp	r2, #2
 800db04:	d047      	beq.n	800db96 <_scanf_float+0x22a>
 800db06:	f1bb 0f01 	cmp.w	fp, #1
 800db0a:	d003      	beq.n	800db14 <_scanf_float+0x1a8>
 800db0c:	f1bb 0f04 	cmp.w	fp, #4
 800db10:	f47f af64 	bne.w	800d9dc <_scanf_float+0x70>
 800db14:	f10b 0b01 	add.w	fp, fp, #1
 800db18:	fa5f fb8b 	uxtb.w	fp, fp
 800db1c:	e7e7      	b.n	800daee <_scanf_float+0x182>
 800db1e:	f1bb 0f03 	cmp.w	fp, #3
 800db22:	d0f7      	beq.n	800db14 <_scanf_float+0x1a8>
 800db24:	f1bb 0f05 	cmp.w	fp, #5
 800db28:	e7f2      	b.n	800db10 <_scanf_float+0x1a4>
 800db2a:	f1bb 0f02 	cmp.w	fp, #2
 800db2e:	f47f af55 	bne.w	800d9dc <_scanf_float+0x70>
 800db32:	f04f 0b03 	mov.w	fp, #3
 800db36:	e7da      	b.n	800daee <_scanf_float+0x182>
 800db38:	f1bb 0f06 	cmp.w	fp, #6
 800db3c:	f47f af4e 	bne.w	800d9dc <_scanf_float+0x70>
 800db40:	f04f 0b07 	mov.w	fp, #7
 800db44:	e7d3      	b.n	800daee <_scanf_float+0x182>
 800db46:	6821      	ldr	r1, [r4, #0]
 800db48:	0588      	lsls	r0, r1, #22
 800db4a:	f57f af47 	bpl.w	800d9dc <_scanf_float+0x70>
 800db4e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800db52:	6021      	str	r1, [r4, #0]
 800db54:	f8cd 9008 	str.w	r9, [sp, #8]
 800db58:	e7c9      	b.n	800daee <_scanf_float+0x182>
 800db5a:	6821      	ldr	r1, [r4, #0]
 800db5c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800db60:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800db64:	d006      	beq.n	800db74 <_scanf_float+0x208>
 800db66:	0548      	lsls	r0, r1, #21
 800db68:	f57f af38 	bpl.w	800d9dc <_scanf_float+0x70>
 800db6c:	f1b9 0f00 	cmp.w	r9, #0
 800db70:	f43f af3b 	beq.w	800d9ea <_scanf_float+0x7e>
 800db74:	0588      	lsls	r0, r1, #22
 800db76:	bf58      	it	pl
 800db78:	9802      	ldrpl	r0, [sp, #8]
 800db7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800db7e:	bf58      	it	pl
 800db80:	eba9 0000 	subpl.w	r0, r9, r0
 800db84:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800db88:	bf58      	it	pl
 800db8a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800db8e:	6021      	str	r1, [r4, #0]
 800db90:	f04f 0900 	mov.w	r9, #0
 800db94:	e7ab      	b.n	800daee <_scanf_float+0x182>
 800db96:	2203      	movs	r2, #3
 800db98:	e7a9      	b.n	800daee <_scanf_float+0x182>
 800db9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800db9e:	9205      	str	r2, [sp, #20]
 800dba0:	4631      	mov	r1, r6
 800dba2:	4638      	mov	r0, r7
 800dba4:	4798      	blx	r3
 800dba6:	9a05      	ldr	r2, [sp, #20]
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	f43f af04 	beq.w	800d9b6 <_scanf_float+0x4a>
 800dbae:	e715      	b.n	800d9dc <_scanf_float+0x70>
 800dbb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800dbb8:	4632      	mov	r2, r6
 800dbba:	4638      	mov	r0, r7
 800dbbc:	4798      	blx	r3
 800dbbe:	6923      	ldr	r3, [r4, #16]
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	6123      	str	r3, [r4, #16]
 800dbc4:	e715      	b.n	800d9f2 <_scanf_float+0x86>
 800dbc6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800dbca:	2b06      	cmp	r3, #6
 800dbcc:	d80a      	bhi.n	800dbe4 <_scanf_float+0x278>
 800dbce:	f1bb 0f02 	cmp.w	fp, #2
 800dbd2:	d968      	bls.n	800dca6 <_scanf_float+0x33a>
 800dbd4:	f1ab 0b03 	sub.w	fp, fp, #3
 800dbd8:	fa5f fb8b 	uxtb.w	fp, fp
 800dbdc:	eba5 0b0b 	sub.w	fp, r5, fp
 800dbe0:	455d      	cmp	r5, fp
 800dbe2:	d14b      	bne.n	800dc7c <_scanf_float+0x310>
 800dbe4:	6823      	ldr	r3, [r4, #0]
 800dbe6:	05da      	lsls	r2, r3, #23
 800dbe8:	d51f      	bpl.n	800dc2a <_scanf_float+0x2be>
 800dbea:	055b      	lsls	r3, r3, #21
 800dbec:	d468      	bmi.n	800dcc0 <_scanf_float+0x354>
 800dbee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dbf2:	6923      	ldr	r3, [r4, #16]
 800dbf4:	2965      	cmp	r1, #101	; 0x65
 800dbf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800dbfa:	f105 3bff 	add.w	fp, r5, #4294967295
 800dbfe:	6123      	str	r3, [r4, #16]
 800dc00:	d00d      	beq.n	800dc1e <_scanf_float+0x2b2>
 800dc02:	2945      	cmp	r1, #69	; 0x45
 800dc04:	d00b      	beq.n	800dc1e <_scanf_float+0x2b2>
 800dc06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	4798      	blx	r3
 800dc10:	6923      	ldr	r3, [r4, #16]
 800dc12:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	f1a5 0b02 	sub.w	fp, r5, #2
 800dc1c:	6123      	str	r3, [r4, #16]
 800dc1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc22:	4632      	mov	r2, r6
 800dc24:	4638      	mov	r0, r7
 800dc26:	4798      	blx	r3
 800dc28:	465d      	mov	r5, fp
 800dc2a:	6826      	ldr	r6, [r4, #0]
 800dc2c:	f016 0610 	ands.w	r6, r6, #16
 800dc30:	d17a      	bne.n	800dd28 <_scanf_float+0x3bc>
 800dc32:	702e      	strb	r6, [r5, #0]
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dc3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc3e:	d142      	bne.n	800dcc6 <_scanf_float+0x35a>
 800dc40:	9b02      	ldr	r3, [sp, #8]
 800dc42:	eba9 0303 	sub.w	r3, r9, r3
 800dc46:	425a      	negs	r2, r3
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d149      	bne.n	800dce0 <_scanf_float+0x374>
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	4641      	mov	r1, r8
 800dc50:	4638      	mov	r0, r7
 800dc52:	f000 ffe5 	bl	800ec20 <_strtod_r>
 800dc56:	6825      	ldr	r5, [r4, #0]
 800dc58:	f8da 3000 	ldr.w	r3, [sl]
 800dc5c:	f015 0f02 	tst.w	r5, #2
 800dc60:	f103 0204 	add.w	r2, r3, #4
 800dc64:	ec59 8b10 	vmov	r8, r9, d0
 800dc68:	f8ca 2000 	str.w	r2, [sl]
 800dc6c:	d043      	beq.n	800dcf6 <_scanf_float+0x38a>
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	e9c3 8900 	strd	r8, r9, [r3]
 800dc74:	68e3      	ldr	r3, [r4, #12]
 800dc76:	3301      	adds	r3, #1
 800dc78:	60e3      	str	r3, [r4, #12]
 800dc7a:	e6be      	b.n	800d9fa <_scanf_float+0x8e>
 800dc7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800dc84:	4632      	mov	r2, r6
 800dc86:	4638      	mov	r0, r7
 800dc88:	4798      	blx	r3
 800dc8a:	6923      	ldr	r3, [r4, #16]
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	6123      	str	r3, [r4, #16]
 800dc90:	e7a6      	b.n	800dbe0 <_scanf_float+0x274>
 800dc92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc96:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800dc9a:	4632      	mov	r2, r6
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	4798      	blx	r3
 800dca0:	6923      	ldr	r3, [r4, #16]
 800dca2:	3b01      	subs	r3, #1
 800dca4:	6123      	str	r3, [r4, #16]
 800dca6:	4545      	cmp	r5, r8
 800dca8:	d8f3      	bhi.n	800dc92 <_scanf_float+0x326>
 800dcaa:	e6a5      	b.n	800d9f8 <_scanf_float+0x8c>
 800dcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	4798      	blx	r3
 800dcba:	6923      	ldr	r3, [r4, #16]
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	4545      	cmp	r5, r8
 800dcc2:	d8f3      	bhi.n	800dcac <_scanf_float+0x340>
 800dcc4:	e698      	b.n	800d9f8 <_scanf_float+0x8c>
 800dcc6:	9b03      	ldr	r3, [sp, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d0bf      	beq.n	800dc4c <_scanf_float+0x2e0>
 800dccc:	9904      	ldr	r1, [sp, #16]
 800dcce:	230a      	movs	r3, #10
 800dcd0:	4632      	mov	r2, r6
 800dcd2:	3101      	adds	r1, #1
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	f001 f82f 	bl	800ed38 <_strtol_r>
 800dcda:	9b03      	ldr	r3, [sp, #12]
 800dcdc:	9d04      	ldr	r5, [sp, #16]
 800dcde:	1ac2      	subs	r2, r0, r3
 800dce0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dce4:	429d      	cmp	r5, r3
 800dce6:	bf28      	it	cs
 800dce8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800dcec:	490f      	ldr	r1, [pc, #60]	; (800dd2c <_scanf_float+0x3c0>)
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f000 f95e 	bl	800dfb0 <siprintf>
 800dcf4:	e7aa      	b.n	800dc4c <_scanf_float+0x2e0>
 800dcf6:	f015 0504 	ands.w	r5, r5, #4
 800dcfa:	d1b8      	bne.n	800dc6e <_scanf_float+0x302>
 800dcfc:	681f      	ldr	r7, [r3, #0]
 800dcfe:	ee10 2a10 	vmov	r2, s0
 800dd02:	464b      	mov	r3, r9
 800dd04:	ee10 0a10 	vmov	r0, s0
 800dd08:	4649      	mov	r1, r9
 800dd0a:	f7f2 ff1f 	bl	8000b4c <__aeabi_dcmpun>
 800dd0e:	b128      	cbz	r0, 800dd1c <_scanf_float+0x3b0>
 800dd10:	4628      	mov	r0, r5
 800dd12:	f000 f947 	bl	800dfa4 <nanf>
 800dd16:	ed87 0a00 	vstr	s0, [r7]
 800dd1a:	e7ab      	b.n	800dc74 <_scanf_float+0x308>
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	4649      	mov	r1, r9
 800dd20:	f7f2 ff72 	bl	8000c08 <__aeabi_d2f>
 800dd24:	6038      	str	r0, [r7, #0]
 800dd26:	e7a5      	b.n	800dc74 <_scanf_float+0x308>
 800dd28:	2600      	movs	r6, #0
 800dd2a:	e666      	b.n	800d9fa <_scanf_float+0x8e>
 800dd2c:	08011634 	.word	0x08011634

0800dd30 <iprintf>:
 800dd30:	b40f      	push	{r0, r1, r2, r3}
 800dd32:	4b0a      	ldr	r3, [pc, #40]	; (800dd5c <iprintf+0x2c>)
 800dd34:	b513      	push	{r0, r1, r4, lr}
 800dd36:	681c      	ldr	r4, [r3, #0]
 800dd38:	b124      	cbz	r4, 800dd44 <iprintf+0x14>
 800dd3a:	69a3      	ldr	r3, [r4, #24]
 800dd3c:	b913      	cbnz	r3, 800dd44 <iprintf+0x14>
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f002 f802 	bl	800fd48 <__sinit>
 800dd44:	ab05      	add	r3, sp, #20
 800dd46:	9a04      	ldr	r2, [sp, #16]
 800dd48:	68a1      	ldr	r1, [r4, #8]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f003 f9c1 	bl	80110d4 <_vfiprintf_r>
 800dd52:	b002      	add	sp, #8
 800dd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd58:	b004      	add	sp, #16
 800dd5a:	4770      	bx	lr
 800dd5c:	20000010 	.word	0x20000010

0800dd60 <_puts_r>:
 800dd60:	b570      	push	{r4, r5, r6, lr}
 800dd62:	460e      	mov	r6, r1
 800dd64:	4605      	mov	r5, r0
 800dd66:	b118      	cbz	r0, 800dd70 <_puts_r+0x10>
 800dd68:	6983      	ldr	r3, [r0, #24]
 800dd6a:	b90b      	cbnz	r3, 800dd70 <_puts_r+0x10>
 800dd6c:	f001 ffec 	bl	800fd48 <__sinit>
 800dd70:	69ab      	ldr	r3, [r5, #24]
 800dd72:	68ac      	ldr	r4, [r5, #8]
 800dd74:	b913      	cbnz	r3, 800dd7c <_puts_r+0x1c>
 800dd76:	4628      	mov	r0, r5
 800dd78:	f001 ffe6 	bl	800fd48 <__sinit>
 800dd7c:	4b23      	ldr	r3, [pc, #140]	; (800de0c <_puts_r+0xac>)
 800dd7e:	429c      	cmp	r4, r3
 800dd80:	d117      	bne.n	800ddb2 <_puts_r+0x52>
 800dd82:	686c      	ldr	r4, [r5, #4]
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	071b      	lsls	r3, r3, #28
 800dd88:	d51d      	bpl.n	800ddc6 <_puts_r+0x66>
 800dd8a:	6923      	ldr	r3, [r4, #16]
 800dd8c:	b1db      	cbz	r3, 800ddc6 <_puts_r+0x66>
 800dd8e:	3e01      	subs	r6, #1
 800dd90:	68a3      	ldr	r3, [r4, #8]
 800dd92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dd96:	3b01      	subs	r3, #1
 800dd98:	60a3      	str	r3, [r4, #8]
 800dd9a:	b9e9      	cbnz	r1, 800ddd8 <_puts_r+0x78>
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	da2e      	bge.n	800ddfe <_puts_r+0x9e>
 800dda0:	4622      	mov	r2, r4
 800dda2:	210a      	movs	r1, #10
 800dda4:	4628      	mov	r0, r5
 800dda6:	f000 ffd9 	bl	800ed5c <__swbuf_r>
 800ddaa:	3001      	adds	r0, #1
 800ddac:	d011      	beq.n	800ddd2 <_puts_r+0x72>
 800ddae:	200a      	movs	r0, #10
 800ddb0:	e011      	b.n	800ddd6 <_puts_r+0x76>
 800ddb2:	4b17      	ldr	r3, [pc, #92]	; (800de10 <_puts_r+0xb0>)
 800ddb4:	429c      	cmp	r4, r3
 800ddb6:	d101      	bne.n	800ddbc <_puts_r+0x5c>
 800ddb8:	68ac      	ldr	r4, [r5, #8]
 800ddba:	e7e3      	b.n	800dd84 <_puts_r+0x24>
 800ddbc:	4b15      	ldr	r3, [pc, #84]	; (800de14 <_puts_r+0xb4>)
 800ddbe:	429c      	cmp	r4, r3
 800ddc0:	bf08      	it	eq
 800ddc2:	68ec      	ldreq	r4, [r5, #12]
 800ddc4:	e7de      	b.n	800dd84 <_puts_r+0x24>
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f001 f819 	bl	800ee00 <__swsetup_r>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d0dd      	beq.n	800dd8e <_puts_r+0x2e>
 800ddd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	da04      	bge.n	800dde6 <_puts_r+0x86>
 800dddc:	69a2      	ldr	r2, [r4, #24]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	dc06      	bgt.n	800ddf0 <_puts_r+0x90>
 800dde2:	290a      	cmp	r1, #10
 800dde4:	d004      	beq.n	800ddf0 <_puts_r+0x90>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	1c5a      	adds	r2, r3, #1
 800ddea:	6022      	str	r2, [r4, #0]
 800ddec:	7019      	strb	r1, [r3, #0]
 800ddee:	e7cf      	b.n	800dd90 <_puts_r+0x30>
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f000 ffb2 	bl	800ed5c <__swbuf_r>
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	d1c9      	bne.n	800dd90 <_puts_r+0x30>
 800ddfc:	e7e9      	b.n	800ddd2 <_puts_r+0x72>
 800ddfe:	6823      	ldr	r3, [r4, #0]
 800de00:	200a      	movs	r0, #10
 800de02:	1c5a      	adds	r2, r3, #1
 800de04:	6022      	str	r2, [r4, #0]
 800de06:	7018      	strb	r0, [r3, #0]
 800de08:	e7e5      	b.n	800ddd6 <_puts_r+0x76>
 800de0a:	bf00      	nop
 800de0c:	080116c0 	.word	0x080116c0
 800de10:	080116e0 	.word	0x080116e0
 800de14:	080116a0 	.word	0x080116a0

0800de18 <puts>:
 800de18:	4b02      	ldr	r3, [pc, #8]	; (800de24 <puts+0xc>)
 800de1a:	4601      	mov	r1, r0
 800de1c:	6818      	ldr	r0, [r3, #0]
 800de1e:	f7ff bf9f 	b.w	800dd60 <_puts_r>
 800de22:	bf00      	nop
 800de24:	20000010 	.word	0x20000010

0800de28 <_sbrk_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4c06      	ldr	r4, [pc, #24]	; (800de44 <_sbrk_r+0x1c>)
 800de2c:	2300      	movs	r3, #0
 800de2e:	4605      	mov	r5, r0
 800de30:	4608      	mov	r0, r1
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	f7f3 fdd0 	bl	80019d8 <_sbrk>
 800de38:	1c43      	adds	r3, r0, #1
 800de3a:	d102      	bne.n	800de42 <_sbrk_r+0x1a>
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	b103      	cbz	r3, 800de42 <_sbrk_r+0x1a>
 800de40:	602b      	str	r3, [r5, #0]
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	20001bb0 	.word	0x20001bb0

0800de48 <setvbuf>:
 800de48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de4c:	461d      	mov	r5, r3
 800de4e:	4b51      	ldr	r3, [pc, #324]	; (800df94 <setvbuf+0x14c>)
 800de50:	681e      	ldr	r6, [r3, #0]
 800de52:	4604      	mov	r4, r0
 800de54:	460f      	mov	r7, r1
 800de56:	4690      	mov	r8, r2
 800de58:	b126      	cbz	r6, 800de64 <setvbuf+0x1c>
 800de5a:	69b3      	ldr	r3, [r6, #24]
 800de5c:	b913      	cbnz	r3, 800de64 <setvbuf+0x1c>
 800de5e:	4630      	mov	r0, r6
 800de60:	f001 ff72 	bl	800fd48 <__sinit>
 800de64:	4b4c      	ldr	r3, [pc, #304]	; (800df98 <setvbuf+0x150>)
 800de66:	429c      	cmp	r4, r3
 800de68:	d152      	bne.n	800df10 <setvbuf+0xc8>
 800de6a:	6874      	ldr	r4, [r6, #4]
 800de6c:	f1b8 0f02 	cmp.w	r8, #2
 800de70:	d006      	beq.n	800de80 <setvbuf+0x38>
 800de72:	f1b8 0f01 	cmp.w	r8, #1
 800de76:	f200 8089 	bhi.w	800df8c <setvbuf+0x144>
 800de7a:	2d00      	cmp	r5, #0
 800de7c:	f2c0 8086 	blt.w	800df8c <setvbuf+0x144>
 800de80:	4621      	mov	r1, r4
 800de82:	4630      	mov	r0, r6
 800de84:	f001 fef6 	bl	800fc74 <_fflush_r>
 800de88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de8a:	b141      	cbz	r1, 800de9e <setvbuf+0x56>
 800de8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de90:	4299      	cmp	r1, r3
 800de92:	d002      	beq.n	800de9a <setvbuf+0x52>
 800de94:	4630      	mov	r0, r6
 800de96:	f7ff f865 	bl	800cf64 <_free_r>
 800de9a:	2300      	movs	r3, #0
 800de9c:	6363      	str	r3, [r4, #52]	; 0x34
 800de9e:	2300      	movs	r3, #0
 800dea0:	61a3      	str	r3, [r4, #24]
 800dea2:	6063      	str	r3, [r4, #4]
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	061b      	lsls	r3, r3, #24
 800dea8:	d503      	bpl.n	800deb2 <setvbuf+0x6a>
 800deaa:	6921      	ldr	r1, [r4, #16]
 800deac:	4630      	mov	r0, r6
 800deae:	f7ff f859 	bl	800cf64 <_free_r>
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800deb8:	f023 0303 	bic.w	r3, r3, #3
 800debc:	f1b8 0f02 	cmp.w	r8, #2
 800dec0:	81a3      	strh	r3, [r4, #12]
 800dec2:	d05d      	beq.n	800df80 <setvbuf+0x138>
 800dec4:	ab01      	add	r3, sp, #4
 800dec6:	466a      	mov	r2, sp
 800dec8:	4621      	mov	r1, r4
 800deca:	4630      	mov	r0, r6
 800decc:	f002 fb00 	bl	80104d0 <__swhatbuf_r>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	4318      	orrs	r0, r3
 800ded4:	81a0      	strh	r0, [r4, #12]
 800ded6:	bb2d      	cbnz	r5, 800df24 <setvbuf+0xdc>
 800ded8:	9d00      	ldr	r5, [sp, #0]
 800deda:	4628      	mov	r0, r5
 800dedc:	f7ff f81e 	bl	800cf1c <malloc>
 800dee0:	4607      	mov	r7, r0
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d14e      	bne.n	800df84 <setvbuf+0x13c>
 800dee6:	f8dd 9000 	ldr.w	r9, [sp]
 800deea:	45a9      	cmp	r9, r5
 800deec:	d13c      	bne.n	800df68 <setvbuf+0x120>
 800deee:	f04f 30ff 	mov.w	r0, #4294967295
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f043 0302 	orr.w	r3, r3, #2
 800def8:	81a3      	strh	r3, [r4, #12]
 800defa:	2300      	movs	r3, #0
 800defc:	60a3      	str	r3, [r4, #8]
 800defe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df02:	6023      	str	r3, [r4, #0]
 800df04:	6123      	str	r3, [r4, #16]
 800df06:	2301      	movs	r3, #1
 800df08:	6163      	str	r3, [r4, #20]
 800df0a:	b003      	add	sp, #12
 800df0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df10:	4b22      	ldr	r3, [pc, #136]	; (800df9c <setvbuf+0x154>)
 800df12:	429c      	cmp	r4, r3
 800df14:	d101      	bne.n	800df1a <setvbuf+0xd2>
 800df16:	68b4      	ldr	r4, [r6, #8]
 800df18:	e7a8      	b.n	800de6c <setvbuf+0x24>
 800df1a:	4b21      	ldr	r3, [pc, #132]	; (800dfa0 <setvbuf+0x158>)
 800df1c:	429c      	cmp	r4, r3
 800df1e:	bf08      	it	eq
 800df20:	68f4      	ldreq	r4, [r6, #12]
 800df22:	e7a3      	b.n	800de6c <setvbuf+0x24>
 800df24:	2f00      	cmp	r7, #0
 800df26:	d0d8      	beq.n	800deda <setvbuf+0x92>
 800df28:	69b3      	ldr	r3, [r6, #24]
 800df2a:	b913      	cbnz	r3, 800df32 <setvbuf+0xea>
 800df2c:	4630      	mov	r0, r6
 800df2e:	f001 ff0b 	bl	800fd48 <__sinit>
 800df32:	f1b8 0f01 	cmp.w	r8, #1
 800df36:	bf08      	it	eq
 800df38:	89a3      	ldrheq	r3, [r4, #12]
 800df3a:	6027      	str	r7, [r4, #0]
 800df3c:	bf04      	itt	eq
 800df3e:	f043 0301 	orreq.w	r3, r3, #1
 800df42:	81a3      	strheq	r3, [r4, #12]
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	f013 0008 	ands.w	r0, r3, #8
 800df4a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800df4e:	d01b      	beq.n	800df88 <setvbuf+0x140>
 800df50:	f013 0001 	ands.w	r0, r3, #1
 800df54:	bf18      	it	ne
 800df56:	426d      	negne	r5, r5
 800df58:	f04f 0300 	mov.w	r3, #0
 800df5c:	bf1d      	ittte	ne
 800df5e:	60a3      	strne	r3, [r4, #8]
 800df60:	61a5      	strne	r5, [r4, #24]
 800df62:	4618      	movne	r0, r3
 800df64:	60a5      	streq	r5, [r4, #8]
 800df66:	e7d0      	b.n	800df0a <setvbuf+0xc2>
 800df68:	4648      	mov	r0, r9
 800df6a:	f7fe ffd7 	bl	800cf1c <malloc>
 800df6e:	4607      	mov	r7, r0
 800df70:	2800      	cmp	r0, #0
 800df72:	d0bc      	beq.n	800deee <setvbuf+0xa6>
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	464d      	mov	r5, r9
 800df7e:	e7d3      	b.n	800df28 <setvbuf+0xe0>
 800df80:	2000      	movs	r0, #0
 800df82:	e7b6      	b.n	800def2 <setvbuf+0xaa>
 800df84:	46a9      	mov	r9, r5
 800df86:	e7f5      	b.n	800df74 <setvbuf+0x12c>
 800df88:	60a0      	str	r0, [r4, #8]
 800df8a:	e7be      	b.n	800df0a <setvbuf+0xc2>
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	e7bb      	b.n	800df0a <setvbuf+0xc2>
 800df92:	bf00      	nop
 800df94:	20000010 	.word	0x20000010
 800df98:	080116c0 	.word	0x080116c0
 800df9c:	080116e0 	.word	0x080116e0
 800dfa0:	080116a0 	.word	0x080116a0

0800dfa4 <nanf>:
 800dfa4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dfac <nanf+0x8>
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	7fc00000 	.word	0x7fc00000

0800dfb0 <siprintf>:
 800dfb0:	b40e      	push	{r1, r2, r3}
 800dfb2:	b500      	push	{lr}
 800dfb4:	b09c      	sub	sp, #112	; 0x70
 800dfb6:	ab1d      	add	r3, sp, #116	; 0x74
 800dfb8:	9002      	str	r0, [sp, #8]
 800dfba:	9006      	str	r0, [sp, #24]
 800dfbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dfc0:	4809      	ldr	r0, [pc, #36]	; (800dfe8 <siprintf+0x38>)
 800dfc2:	9107      	str	r1, [sp, #28]
 800dfc4:	9104      	str	r1, [sp, #16]
 800dfc6:	4909      	ldr	r1, [pc, #36]	; (800dfec <siprintf+0x3c>)
 800dfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfcc:	9105      	str	r1, [sp, #20]
 800dfce:	6800      	ldr	r0, [r0, #0]
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	a902      	add	r1, sp, #8
 800dfd4:	f002 ff5c 	bl	8010e90 <_svfiprintf_r>
 800dfd8:	9b02      	ldr	r3, [sp, #8]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	701a      	strb	r2, [r3, #0]
 800dfde:	b01c      	add	sp, #112	; 0x70
 800dfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfe4:	b003      	add	sp, #12
 800dfe6:	4770      	bx	lr
 800dfe8:	20000010 	.word	0x20000010
 800dfec:	ffff0208 	.word	0xffff0208

0800dff0 <strcpy>:
 800dff0:	4603      	mov	r3, r0
 800dff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dff6:	f803 2b01 	strb.w	r2, [r3], #1
 800dffa:	2a00      	cmp	r2, #0
 800dffc:	d1f9      	bne.n	800dff2 <strcpy+0x2>
 800dffe:	4770      	bx	lr

0800e000 <sulp>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	4604      	mov	r4, r0
 800e004:	460d      	mov	r5, r1
 800e006:	ec45 4b10 	vmov	d0, r4, r5
 800e00a:	4616      	mov	r6, r2
 800e00c:	f002 fda4 	bl	8010b58 <__ulp>
 800e010:	ec51 0b10 	vmov	r0, r1, d0
 800e014:	b17e      	cbz	r6, 800e036 <sulp+0x36>
 800e016:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e01a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e01e:	2b00      	cmp	r3, #0
 800e020:	dd09      	ble.n	800e036 <sulp+0x36>
 800e022:	051b      	lsls	r3, r3, #20
 800e024:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e028:	2400      	movs	r4, #0
 800e02a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e02e:	4622      	mov	r2, r4
 800e030:	462b      	mov	r3, r5
 800e032:	f7f2 faf1 	bl	8000618 <__aeabi_dmul>
 800e036:	bd70      	pop	{r4, r5, r6, pc}

0800e038 <_strtod_l>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	461f      	mov	r7, r3
 800e03e:	b0a1      	sub	sp, #132	; 0x84
 800e040:	2300      	movs	r3, #0
 800e042:	4681      	mov	r9, r0
 800e044:	4638      	mov	r0, r7
 800e046:	460e      	mov	r6, r1
 800e048:	9217      	str	r2, [sp, #92]	; 0x5c
 800e04a:	931c      	str	r3, [sp, #112]	; 0x70
 800e04c:	f002 fa2f 	bl	80104ae <__localeconv_l>
 800e050:	4680      	mov	r8, r0
 800e052:	6800      	ldr	r0, [r0, #0]
 800e054:	f7f2 f8cc 	bl	80001f0 <strlen>
 800e058:	f04f 0a00 	mov.w	sl, #0
 800e05c:	4604      	mov	r4, r0
 800e05e:	f04f 0b00 	mov.w	fp, #0
 800e062:	961b      	str	r6, [sp, #108]	; 0x6c
 800e064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e066:	781a      	ldrb	r2, [r3, #0]
 800e068:	2a0d      	cmp	r2, #13
 800e06a:	d832      	bhi.n	800e0d2 <_strtod_l+0x9a>
 800e06c:	2a09      	cmp	r2, #9
 800e06e:	d236      	bcs.n	800e0de <_strtod_l+0xa6>
 800e070:	2a00      	cmp	r2, #0
 800e072:	d03e      	beq.n	800e0f2 <_strtod_l+0xba>
 800e074:	2300      	movs	r3, #0
 800e076:	930d      	str	r3, [sp, #52]	; 0x34
 800e078:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e07a:	782b      	ldrb	r3, [r5, #0]
 800e07c:	2b30      	cmp	r3, #48	; 0x30
 800e07e:	f040 80ac 	bne.w	800e1da <_strtod_l+0x1a2>
 800e082:	786b      	ldrb	r3, [r5, #1]
 800e084:	2b58      	cmp	r3, #88	; 0x58
 800e086:	d001      	beq.n	800e08c <_strtod_l+0x54>
 800e088:	2b78      	cmp	r3, #120	; 0x78
 800e08a:	d167      	bne.n	800e15c <_strtod_l+0x124>
 800e08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	ab1c      	add	r3, sp, #112	; 0x70
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	9702      	str	r7, [sp, #8]
 800e096:	ab1d      	add	r3, sp, #116	; 0x74
 800e098:	4a88      	ldr	r2, [pc, #544]	; (800e2bc <_strtod_l+0x284>)
 800e09a:	a91b      	add	r1, sp, #108	; 0x6c
 800e09c:	4648      	mov	r0, r9
 800e09e:	f001 ff2c 	bl	800fefa <__gethex>
 800e0a2:	f010 0407 	ands.w	r4, r0, #7
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	d005      	beq.n	800e0b6 <_strtod_l+0x7e>
 800e0aa:	2c06      	cmp	r4, #6
 800e0ac:	d12b      	bne.n	800e106 <_strtod_l+0xce>
 800e0ae:	3501      	adds	r5, #1
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	951b      	str	r5, [sp, #108]	; 0x6c
 800e0b4:	930d      	str	r3, [sp, #52]	; 0x34
 800e0b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f040 859a 	bne.w	800ebf2 <_strtod_l+0xbba>
 800e0be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0c0:	b1e3      	cbz	r3, 800e0fc <_strtod_l+0xc4>
 800e0c2:	4652      	mov	r2, sl
 800e0c4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e0c8:	ec43 2b10 	vmov	d0, r2, r3
 800e0cc:	b021      	add	sp, #132	; 0x84
 800e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d2:	2a2b      	cmp	r2, #43	; 0x2b
 800e0d4:	d015      	beq.n	800e102 <_strtod_l+0xca>
 800e0d6:	2a2d      	cmp	r2, #45	; 0x2d
 800e0d8:	d004      	beq.n	800e0e4 <_strtod_l+0xac>
 800e0da:	2a20      	cmp	r2, #32
 800e0dc:	d1ca      	bne.n	800e074 <_strtod_l+0x3c>
 800e0de:	3301      	adds	r3, #1
 800e0e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e0e2:	e7bf      	b.n	800e064 <_strtod_l+0x2c>
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	920d      	str	r2, [sp, #52]	; 0x34
 800e0e8:	1c5a      	adds	r2, r3, #1
 800e0ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800e0ec:	785b      	ldrb	r3, [r3, #1]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1c2      	bne.n	800e078 <_strtod_l+0x40>
 800e0f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0f4:	961b      	str	r6, [sp, #108]	; 0x6c
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f040 8579 	bne.w	800ebee <_strtod_l+0xbb6>
 800e0fc:	4652      	mov	r2, sl
 800e0fe:	465b      	mov	r3, fp
 800e100:	e7e2      	b.n	800e0c8 <_strtod_l+0x90>
 800e102:	2200      	movs	r2, #0
 800e104:	e7ef      	b.n	800e0e6 <_strtod_l+0xae>
 800e106:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e108:	b13a      	cbz	r2, 800e11a <_strtod_l+0xe2>
 800e10a:	2135      	movs	r1, #53	; 0x35
 800e10c:	a81e      	add	r0, sp, #120	; 0x78
 800e10e:	f002 fe1b 	bl	8010d48 <__copybits>
 800e112:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e114:	4648      	mov	r0, r9
 800e116:	f002 fa87 	bl	8010628 <_Bfree>
 800e11a:	3c01      	subs	r4, #1
 800e11c:	2c04      	cmp	r4, #4
 800e11e:	d806      	bhi.n	800e12e <_strtod_l+0xf6>
 800e120:	e8df f004 	tbb	[pc, r4]
 800e124:	1714030a 	.word	0x1714030a
 800e128:	0a          	.byte	0x0a
 800e129:	00          	.byte	0x00
 800e12a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e12e:	0730      	lsls	r0, r6, #28
 800e130:	d5c1      	bpl.n	800e0b6 <_strtod_l+0x7e>
 800e132:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e136:	e7be      	b.n	800e0b6 <_strtod_l+0x7e>
 800e138:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e13c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e13e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e142:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e146:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e14a:	e7f0      	b.n	800e12e <_strtod_l+0xf6>
 800e14c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e2c0 <_strtod_l+0x288>
 800e150:	e7ed      	b.n	800e12e <_strtod_l+0xf6>
 800e152:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e156:	f04f 3aff 	mov.w	sl, #4294967295
 800e15a:	e7e8      	b.n	800e12e <_strtod_l+0xf6>
 800e15c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e15e:	1c5a      	adds	r2, r3, #1
 800e160:	921b      	str	r2, [sp, #108]	; 0x6c
 800e162:	785b      	ldrb	r3, [r3, #1]
 800e164:	2b30      	cmp	r3, #48	; 0x30
 800e166:	d0f9      	beq.n	800e15c <_strtod_l+0x124>
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d0a4      	beq.n	800e0b6 <_strtod_l+0x7e>
 800e16c:	2301      	movs	r3, #1
 800e16e:	2500      	movs	r5, #0
 800e170:	9306      	str	r3, [sp, #24]
 800e172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e174:	9308      	str	r3, [sp, #32]
 800e176:	9507      	str	r5, [sp, #28]
 800e178:	9505      	str	r5, [sp, #20]
 800e17a:	220a      	movs	r2, #10
 800e17c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e17e:	7807      	ldrb	r7, [r0, #0]
 800e180:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e184:	b2d9      	uxtb	r1, r3
 800e186:	2909      	cmp	r1, #9
 800e188:	d929      	bls.n	800e1de <_strtod_l+0x1a6>
 800e18a:	4622      	mov	r2, r4
 800e18c:	f8d8 1000 	ldr.w	r1, [r8]
 800e190:	f003 f8f9 	bl	8011386 <strncmp>
 800e194:	2800      	cmp	r0, #0
 800e196:	d031      	beq.n	800e1fc <_strtod_l+0x1c4>
 800e198:	2000      	movs	r0, #0
 800e19a:	9c05      	ldr	r4, [sp, #20]
 800e19c:	9004      	str	r0, [sp, #16]
 800e19e:	463b      	mov	r3, r7
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	2b65      	cmp	r3, #101	; 0x65
 800e1a4:	d001      	beq.n	800e1aa <_strtod_l+0x172>
 800e1a6:	2b45      	cmp	r3, #69	; 0x45
 800e1a8:	d114      	bne.n	800e1d4 <_strtod_l+0x19c>
 800e1aa:	b924      	cbnz	r4, 800e1b6 <_strtod_l+0x17e>
 800e1ac:	b910      	cbnz	r0, 800e1b4 <_strtod_l+0x17c>
 800e1ae:	9b06      	ldr	r3, [sp, #24]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d09e      	beq.n	800e0f2 <_strtod_l+0xba>
 800e1b4:	2400      	movs	r4, #0
 800e1b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e1b8:	1c73      	adds	r3, r6, #1
 800e1ba:	931b      	str	r3, [sp, #108]	; 0x6c
 800e1bc:	7873      	ldrb	r3, [r6, #1]
 800e1be:	2b2b      	cmp	r3, #43	; 0x2b
 800e1c0:	d078      	beq.n	800e2b4 <_strtod_l+0x27c>
 800e1c2:	2b2d      	cmp	r3, #45	; 0x2d
 800e1c4:	d070      	beq.n	800e2a8 <_strtod_l+0x270>
 800e1c6:	f04f 0c00 	mov.w	ip, #0
 800e1ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e1ce:	2f09      	cmp	r7, #9
 800e1d0:	d97c      	bls.n	800e2cc <_strtod_l+0x294>
 800e1d2:	961b      	str	r6, [sp, #108]	; 0x6c
 800e1d4:	f04f 0e00 	mov.w	lr, #0
 800e1d8:	e09a      	b.n	800e310 <_strtod_l+0x2d8>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e7c7      	b.n	800e16e <_strtod_l+0x136>
 800e1de:	9905      	ldr	r1, [sp, #20]
 800e1e0:	2908      	cmp	r1, #8
 800e1e2:	bfdd      	ittte	le
 800e1e4:	9907      	ldrle	r1, [sp, #28]
 800e1e6:	fb02 3301 	mlale	r3, r2, r1, r3
 800e1ea:	9307      	strle	r3, [sp, #28]
 800e1ec:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e1f0:	9b05      	ldr	r3, [sp, #20]
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	9305      	str	r3, [sp, #20]
 800e1f8:	901b      	str	r0, [sp, #108]	; 0x6c
 800e1fa:	e7bf      	b.n	800e17c <_strtod_l+0x144>
 800e1fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e1fe:	191a      	adds	r2, r3, r4
 800e200:	921b      	str	r2, [sp, #108]	; 0x6c
 800e202:	9a05      	ldr	r2, [sp, #20]
 800e204:	5d1b      	ldrb	r3, [r3, r4]
 800e206:	2a00      	cmp	r2, #0
 800e208:	d037      	beq.n	800e27a <_strtod_l+0x242>
 800e20a:	9c05      	ldr	r4, [sp, #20]
 800e20c:	4602      	mov	r2, r0
 800e20e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e212:	2909      	cmp	r1, #9
 800e214:	d913      	bls.n	800e23e <_strtod_l+0x206>
 800e216:	2101      	movs	r1, #1
 800e218:	9104      	str	r1, [sp, #16]
 800e21a:	e7c2      	b.n	800e1a2 <_strtod_l+0x16a>
 800e21c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	921b      	str	r2, [sp, #108]	; 0x6c
 800e222:	785b      	ldrb	r3, [r3, #1]
 800e224:	3001      	adds	r0, #1
 800e226:	2b30      	cmp	r3, #48	; 0x30
 800e228:	d0f8      	beq.n	800e21c <_strtod_l+0x1e4>
 800e22a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e22e:	2a08      	cmp	r2, #8
 800e230:	f200 84e4 	bhi.w	800ebfc <_strtod_l+0xbc4>
 800e234:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e236:	9208      	str	r2, [sp, #32]
 800e238:	4602      	mov	r2, r0
 800e23a:	2000      	movs	r0, #0
 800e23c:	4604      	mov	r4, r0
 800e23e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e242:	f100 0101 	add.w	r1, r0, #1
 800e246:	d012      	beq.n	800e26e <_strtod_l+0x236>
 800e248:	440a      	add	r2, r1
 800e24a:	eb00 0c04 	add.w	ip, r0, r4
 800e24e:	4621      	mov	r1, r4
 800e250:	270a      	movs	r7, #10
 800e252:	458c      	cmp	ip, r1
 800e254:	d113      	bne.n	800e27e <_strtod_l+0x246>
 800e256:	1821      	adds	r1, r4, r0
 800e258:	2908      	cmp	r1, #8
 800e25a:	f104 0401 	add.w	r4, r4, #1
 800e25e:	4404      	add	r4, r0
 800e260:	dc19      	bgt.n	800e296 <_strtod_l+0x25e>
 800e262:	9b07      	ldr	r3, [sp, #28]
 800e264:	210a      	movs	r1, #10
 800e266:	fb01 e303 	mla	r3, r1, r3, lr
 800e26a:	9307      	str	r3, [sp, #28]
 800e26c:	2100      	movs	r1, #0
 800e26e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e270:	1c58      	adds	r0, r3, #1
 800e272:	901b      	str	r0, [sp, #108]	; 0x6c
 800e274:	785b      	ldrb	r3, [r3, #1]
 800e276:	4608      	mov	r0, r1
 800e278:	e7c9      	b.n	800e20e <_strtod_l+0x1d6>
 800e27a:	9805      	ldr	r0, [sp, #20]
 800e27c:	e7d3      	b.n	800e226 <_strtod_l+0x1ee>
 800e27e:	2908      	cmp	r1, #8
 800e280:	f101 0101 	add.w	r1, r1, #1
 800e284:	dc03      	bgt.n	800e28e <_strtod_l+0x256>
 800e286:	9b07      	ldr	r3, [sp, #28]
 800e288:	437b      	muls	r3, r7
 800e28a:	9307      	str	r3, [sp, #28]
 800e28c:	e7e1      	b.n	800e252 <_strtod_l+0x21a>
 800e28e:	2910      	cmp	r1, #16
 800e290:	bfd8      	it	le
 800e292:	437d      	mulle	r5, r7
 800e294:	e7dd      	b.n	800e252 <_strtod_l+0x21a>
 800e296:	2c10      	cmp	r4, #16
 800e298:	bfdc      	itt	le
 800e29a:	210a      	movle	r1, #10
 800e29c:	fb01 e505 	mlale	r5, r1, r5, lr
 800e2a0:	e7e4      	b.n	800e26c <_strtod_l+0x234>
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	e781      	b.n	800e1ac <_strtod_l+0x174>
 800e2a8:	f04f 0c01 	mov.w	ip, #1
 800e2ac:	1cb3      	adds	r3, r6, #2
 800e2ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800e2b0:	78b3      	ldrb	r3, [r6, #2]
 800e2b2:	e78a      	b.n	800e1ca <_strtod_l+0x192>
 800e2b4:	f04f 0c00 	mov.w	ip, #0
 800e2b8:	e7f8      	b.n	800e2ac <_strtod_l+0x274>
 800e2ba:	bf00      	nop
 800e2bc:	0801163c 	.word	0x0801163c
 800e2c0:	7ff00000 	.word	0x7ff00000
 800e2c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2c6:	1c5f      	adds	r7, r3, #1
 800e2c8:	971b      	str	r7, [sp, #108]	; 0x6c
 800e2ca:	785b      	ldrb	r3, [r3, #1]
 800e2cc:	2b30      	cmp	r3, #48	; 0x30
 800e2ce:	d0f9      	beq.n	800e2c4 <_strtod_l+0x28c>
 800e2d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e2d4:	2f08      	cmp	r7, #8
 800e2d6:	f63f af7d 	bhi.w	800e1d4 <_strtod_l+0x19c>
 800e2da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e2de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2e0:	930a      	str	r3, [sp, #40]	; 0x28
 800e2e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2e4:	1c5f      	adds	r7, r3, #1
 800e2e6:	971b      	str	r7, [sp, #108]	; 0x6c
 800e2e8:	785b      	ldrb	r3, [r3, #1]
 800e2ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e2ee:	f1b8 0f09 	cmp.w	r8, #9
 800e2f2:	d937      	bls.n	800e364 <_strtod_l+0x32c>
 800e2f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e2f6:	1a7f      	subs	r7, r7, r1
 800e2f8:	2f08      	cmp	r7, #8
 800e2fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e2fe:	dc37      	bgt.n	800e370 <_strtod_l+0x338>
 800e300:	45be      	cmp	lr, r7
 800e302:	bfa8      	it	ge
 800e304:	46be      	movge	lr, r7
 800e306:	f1bc 0f00 	cmp.w	ip, #0
 800e30a:	d001      	beq.n	800e310 <_strtod_l+0x2d8>
 800e30c:	f1ce 0e00 	rsb	lr, lr, #0
 800e310:	2c00      	cmp	r4, #0
 800e312:	d151      	bne.n	800e3b8 <_strtod_l+0x380>
 800e314:	2800      	cmp	r0, #0
 800e316:	f47f aece 	bne.w	800e0b6 <_strtod_l+0x7e>
 800e31a:	9a06      	ldr	r2, [sp, #24]
 800e31c:	2a00      	cmp	r2, #0
 800e31e:	f47f aeca 	bne.w	800e0b6 <_strtod_l+0x7e>
 800e322:	9a04      	ldr	r2, [sp, #16]
 800e324:	2a00      	cmp	r2, #0
 800e326:	f47f aee4 	bne.w	800e0f2 <_strtod_l+0xba>
 800e32a:	2b4e      	cmp	r3, #78	; 0x4e
 800e32c:	d027      	beq.n	800e37e <_strtod_l+0x346>
 800e32e:	dc21      	bgt.n	800e374 <_strtod_l+0x33c>
 800e330:	2b49      	cmp	r3, #73	; 0x49
 800e332:	f47f aede 	bne.w	800e0f2 <_strtod_l+0xba>
 800e336:	49a0      	ldr	r1, [pc, #640]	; (800e5b8 <_strtod_l+0x580>)
 800e338:	a81b      	add	r0, sp, #108	; 0x6c
 800e33a:	f002 f811 	bl	8010360 <__match>
 800e33e:	2800      	cmp	r0, #0
 800e340:	f43f aed7 	beq.w	800e0f2 <_strtod_l+0xba>
 800e344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e346:	499d      	ldr	r1, [pc, #628]	; (800e5bc <_strtod_l+0x584>)
 800e348:	3b01      	subs	r3, #1
 800e34a:	a81b      	add	r0, sp, #108	; 0x6c
 800e34c:	931b      	str	r3, [sp, #108]	; 0x6c
 800e34e:	f002 f807 	bl	8010360 <__match>
 800e352:	b910      	cbnz	r0, 800e35a <_strtod_l+0x322>
 800e354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e356:	3301      	adds	r3, #1
 800e358:	931b      	str	r3, [sp, #108]	; 0x6c
 800e35a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800e5d0 <_strtod_l+0x598>
 800e35e:	f04f 0a00 	mov.w	sl, #0
 800e362:	e6a8      	b.n	800e0b6 <_strtod_l+0x7e>
 800e364:	210a      	movs	r1, #10
 800e366:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e36a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e36e:	e7b8      	b.n	800e2e2 <_strtod_l+0x2aa>
 800e370:	46be      	mov	lr, r7
 800e372:	e7c8      	b.n	800e306 <_strtod_l+0x2ce>
 800e374:	2b69      	cmp	r3, #105	; 0x69
 800e376:	d0de      	beq.n	800e336 <_strtod_l+0x2fe>
 800e378:	2b6e      	cmp	r3, #110	; 0x6e
 800e37a:	f47f aeba 	bne.w	800e0f2 <_strtod_l+0xba>
 800e37e:	4990      	ldr	r1, [pc, #576]	; (800e5c0 <_strtod_l+0x588>)
 800e380:	a81b      	add	r0, sp, #108	; 0x6c
 800e382:	f001 ffed 	bl	8010360 <__match>
 800e386:	2800      	cmp	r0, #0
 800e388:	f43f aeb3 	beq.w	800e0f2 <_strtod_l+0xba>
 800e38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	2b28      	cmp	r3, #40	; 0x28
 800e392:	d10e      	bne.n	800e3b2 <_strtod_l+0x37a>
 800e394:	aa1e      	add	r2, sp, #120	; 0x78
 800e396:	498b      	ldr	r1, [pc, #556]	; (800e5c4 <_strtod_l+0x58c>)
 800e398:	a81b      	add	r0, sp, #108	; 0x6c
 800e39a:	f001 fff5 	bl	8010388 <__hexnan>
 800e39e:	2805      	cmp	r0, #5
 800e3a0:	d107      	bne.n	800e3b2 <_strtod_l+0x37a>
 800e3a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3a4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e3a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e3ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e3b0:	e681      	b.n	800e0b6 <_strtod_l+0x7e>
 800e3b2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800e5d8 <_strtod_l+0x5a0>
 800e3b6:	e7d2      	b.n	800e35e <_strtod_l+0x326>
 800e3b8:	ebae 0302 	sub.w	r3, lr, r2
 800e3bc:	9306      	str	r3, [sp, #24]
 800e3be:	9b05      	ldr	r3, [sp, #20]
 800e3c0:	9807      	ldr	r0, [sp, #28]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	bf08      	it	eq
 800e3c6:	4623      	moveq	r3, r4
 800e3c8:	2c10      	cmp	r4, #16
 800e3ca:	9305      	str	r3, [sp, #20]
 800e3cc:	46a0      	mov	r8, r4
 800e3ce:	bfa8      	it	ge
 800e3d0:	f04f 0810 	movge.w	r8, #16
 800e3d4:	f7f2 f8a6 	bl	8000524 <__aeabi_ui2d>
 800e3d8:	2c09      	cmp	r4, #9
 800e3da:	4682      	mov	sl, r0
 800e3dc:	468b      	mov	fp, r1
 800e3de:	dc13      	bgt.n	800e408 <_strtod_l+0x3d0>
 800e3e0:	9b06      	ldr	r3, [sp, #24]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f43f ae67 	beq.w	800e0b6 <_strtod_l+0x7e>
 800e3e8:	9b06      	ldr	r3, [sp, #24]
 800e3ea:	dd7a      	ble.n	800e4e2 <_strtod_l+0x4aa>
 800e3ec:	2b16      	cmp	r3, #22
 800e3ee:	dc61      	bgt.n	800e4b4 <_strtod_l+0x47c>
 800e3f0:	4a75      	ldr	r2, [pc, #468]	; (800e5c8 <_strtod_l+0x590>)
 800e3f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e3f6:	e9de 0100 	ldrd	r0, r1, [lr]
 800e3fa:	4652      	mov	r2, sl
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	f7f2 f90b 	bl	8000618 <__aeabi_dmul>
 800e402:	4682      	mov	sl, r0
 800e404:	468b      	mov	fp, r1
 800e406:	e656      	b.n	800e0b6 <_strtod_l+0x7e>
 800e408:	4b6f      	ldr	r3, [pc, #444]	; (800e5c8 <_strtod_l+0x590>)
 800e40a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e40e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e412:	f7f2 f901 	bl	8000618 <__aeabi_dmul>
 800e416:	4606      	mov	r6, r0
 800e418:	4628      	mov	r0, r5
 800e41a:	460f      	mov	r7, r1
 800e41c:	f7f2 f882 	bl	8000524 <__aeabi_ui2d>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4630      	mov	r0, r6
 800e426:	4639      	mov	r1, r7
 800e428:	f7f1 ff40 	bl	80002ac <__adddf3>
 800e42c:	2c0f      	cmp	r4, #15
 800e42e:	4682      	mov	sl, r0
 800e430:	468b      	mov	fp, r1
 800e432:	ddd5      	ble.n	800e3e0 <_strtod_l+0x3a8>
 800e434:	9b06      	ldr	r3, [sp, #24]
 800e436:	eba4 0808 	sub.w	r8, r4, r8
 800e43a:	4498      	add	r8, r3
 800e43c:	f1b8 0f00 	cmp.w	r8, #0
 800e440:	f340 8096 	ble.w	800e570 <_strtod_l+0x538>
 800e444:	f018 030f 	ands.w	r3, r8, #15
 800e448:	d00a      	beq.n	800e460 <_strtod_l+0x428>
 800e44a:	495f      	ldr	r1, [pc, #380]	; (800e5c8 <_strtod_l+0x590>)
 800e44c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e450:	4652      	mov	r2, sl
 800e452:	465b      	mov	r3, fp
 800e454:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e458:	f7f2 f8de 	bl	8000618 <__aeabi_dmul>
 800e45c:	4682      	mov	sl, r0
 800e45e:	468b      	mov	fp, r1
 800e460:	f038 080f 	bics.w	r8, r8, #15
 800e464:	d073      	beq.n	800e54e <_strtod_l+0x516>
 800e466:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e46a:	dd47      	ble.n	800e4fc <_strtod_l+0x4c4>
 800e46c:	2400      	movs	r4, #0
 800e46e:	46a0      	mov	r8, r4
 800e470:	9407      	str	r4, [sp, #28]
 800e472:	9405      	str	r4, [sp, #20]
 800e474:	2322      	movs	r3, #34	; 0x22
 800e476:	f8df b158 	ldr.w	fp, [pc, #344]	; 800e5d0 <_strtod_l+0x598>
 800e47a:	f8c9 3000 	str.w	r3, [r9]
 800e47e:	f04f 0a00 	mov.w	sl, #0
 800e482:	9b07      	ldr	r3, [sp, #28]
 800e484:	2b00      	cmp	r3, #0
 800e486:	f43f ae16 	beq.w	800e0b6 <_strtod_l+0x7e>
 800e48a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e48c:	4648      	mov	r0, r9
 800e48e:	f002 f8cb 	bl	8010628 <_Bfree>
 800e492:	9905      	ldr	r1, [sp, #20]
 800e494:	4648      	mov	r0, r9
 800e496:	f002 f8c7 	bl	8010628 <_Bfree>
 800e49a:	4641      	mov	r1, r8
 800e49c:	4648      	mov	r0, r9
 800e49e:	f002 f8c3 	bl	8010628 <_Bfree>
 800e4a2:	9907      	ldr	r1, [sp, #28]
 800e4a4:	4648      	mov	r0, r9
 800e4a6:	f002 f8bf 	bl	8010628 <_Bfree>
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4648      	mov	r0, r9
 800e4ae:	f002 f8bb 	bl	8010628 <_Bfree>
 800e4b2:	e600      	b.n	800e0b6 <_strtod_l+0x7e>
 800e4b4:	9a06      	ldr	r2, [sp, #24]
 800e4b6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	dbba      	blt.n	800e434 <_strtod_l+0x3fc>
 800e4be:	4d42      	ldr	r5, [pc, #264]	; (800e5c8 <_strtod_l+0x590>)
 800e4c0:	f1c4 040f 	rsb	r4, r4, #15
 800e4c4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e4c8:	4652      	mov	r2, sl
 800e4ca:	465b      	mov	r3, fp
 800e4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4d0:	f7f2 f8a2 	bl	8000618 <__aeabi_dmul>
 800e4d4:	9b06      	ldr	r3, [sp, #24]
 800e4d6:	1b1c      	subs	r4, r3, r4
 800e4d8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e4dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4e0:	e78d      	b.n	800e3fe <_strtod_l+0x3c6>
 800e4e2:	f113 0f16 	cmn.w	r3, #22
 800e4e6:	dba5      	blt.n	800e434 <_strtod_l+0x3fc>
 800e4e8:	4a37      	ldr	r2, [pc, #220]	; (800e5c8 <_strtod_l+0x590>)
 800e4ea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e4ee:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e4f2:	4650      	mov	r0, sl
 800e4f4:	4659      	mov	r1, fp
 800e4f6:	f7f2 f9b9 	bl	800086c <__aeabi_ddiv>
 800e4fa:	e782      	b.n	800e402 <_strtod_l+0x3ca>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4e33      	ldr	r6, [pc, #204]	; (800e5cc <_strtod_l+0x594>)
 800e500:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e504:	4650      	mov	r0, sl
 800e506:	4659      	mov	r1, fp
 800e508:	461d      	mov	r5, r3
 800e50a:	f1b8 0f01 	cmp.w	r8, #1
 800e50e:	dc21      	bgt.n	800e554 <_strtod_l+0x51c>
 800e510:	b10b      	cbz	r3, 800e516 <_strtod_l+0x4de>
 800e512:	4682      	mov	sl, r0
 800e514:	468b      	mov	fp, r1
 800e516:	4b2d      	ldr	r3, [pc, #180]	; (800e5cc <_strtod_l+0x594>)
 800e518:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e51c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e520:	4652      	mov	r2, sl
 800e522:	465b      	mov	r3, fp
 800e524:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e528:	f7f2 f876 	bl	8000618 <__aeabi_dmul>
 800e52c:	4b28      	ldr	r3, [pc, #160]	; (800e5d0 <_strtod_l+0x598>)
 800e52e:	460a      	mov	r2, r1
 800e530:	400b      	ands	r3, r1
 800e532:	4928      	ldr	r1, [pc, #160]	; (800e5d4 <_strtod_l+0x59c>)
 800e534:	428b      	cmp	r3, r1
 800e536:	4682      	mov	sl, r0
 800e538:	d898      	bhi.n	800e46c <_strtod_l+0x434>
 800e53a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e53e:	428b      	cmp	r3, r1
 800e540:	bf86      	itte	hi
 800e542:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e5dc <_strtod_l+0x5a4>
 800e546:	f04f 3aff 	movhi.w	sl, #4294967295
 800e54a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e54e:	2300      	movs	r3, #0
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	e077      	b.n	800e644 <_strtod_l+0x60c>
 800e554:	f018 0f01 	tst.w	r8, #1
 800e558:	d006      	beq.n	800e568 <_strtod_l+0x530>
 800e55a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e562:	f7f2 f859 	bl	8000618 <__aeabi_dmul>
 800e566:	2301      	movs	r3, #1
 800e568:	3501      	adds	r5, #1
 800e56a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e56e:	e7cc      	b.n	800e50a <_strtod_l+0x4d2>
 800e570:	d0ed      	beq.n	800e54e <_strtod_l+0x516>
 800e572:	f1c8 0800 	rsb	r8, r8, #0
 800e576:	f018 020f 	ands.w	r2, r8, #15
 800e57a:	d00a      	beq.n	800e592 <_strtod_l+0x55a>
 800e57c:	4b12      	ldr	r3, [pc, #72]	; (800e5c8 <_strtod_l+0x590>)
 800e57e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e582:	4650      	mov	r0, sl
 800e584:	4659      	mov	r1, fp
 800e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58a:	f7f2 f96f 	bl	800086c <__aeabi_ddiv>
 800e58e:	4682      	mov	sl, r0
 800e590:	468b      	mov	fp, r1
 800e592:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e596:	d0da      	beq.n	800e54e <_strtod_l+0x516>
 800e598:	f1b8 0f1f 	cmp.w	r8, #31
 800e59c:	dd20      	ble.n	800e5e0 <_strtod_l+0x5a8>
 800e59e:	2400      	movs	r4, #0
 800e5a0:	46a0      	mov	r8, r4
 800e5a2:	9407      	str	r4, [sp, #28]
 800e5a4:	9405      	str	r4, [sp, #20]
 800e5a6:	2322      	movs	r3, #34	; 0x22
 800e5a8:	f04f 0a00 	mov.w	sl, #0
 800e5ac:	f04f 0b00 	mov.w	fp, #0
 800e5b0:	f8c9 3000 	str.w	r3, [r9]
 800e5b4:	e765      	b.n	800e482 <_strtod_l+0x44a>
 800e5b6:	bf00      	nop
 800e5b8:	08011605 	.word	0x08011605
 800e5bc:	08011693 	.word	0x08011693
 800e5c0:	0801160d 	.word	0x0801160d
 800e5c4:	08011650 	.word	0x08011650
 800e5c8:	08011738 	.word	0x08011738
 800e5cc:	08011710 	.word	0x08011710
 800e5d0:	7ff00000 	.word	0x7ff00000
 800e5d4:	7ca00000 	.word	0x7ca00000
 800e5d8:	fff80000 	.word	0xfff80000
 800e5dc:	7fefffff 	.word	0x7fefffff
 800e5e0:	f018 0310 	ands.w	r3, r8, #16
 800e5e4:	bf18      	it	ne
 800e5e6:	236a      	movne	r3, #106	; 0x6a
 800e5e8:	4da0      	ldr	r5, [pc, #640]	; (800e86c <_strtod_l+0x834>)
 800e5ea:	9304      	str	r3, [sp, #16]
 800e5ec:	4650      	mov	r0, sl
 800e5ee:	4659      	mov	r1, fp
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f1b8 0f00 	cmp.w	r8, #0
 800e5f6:	f300 810a 	bgt.w	800e80e <_strtod_l+0x7d6>
 800e5fa:	b10b      	cbz	r3, 800e600 <_strtod_l+0x5c8>
 800e5fc:	4682      	mov	sl, r0
 800e5fe:	468b      	mov	fp, r1
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	b1bb      	cbz	r3, 800e634 <_strtod_l+0x5fc>
 800e604:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e608:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	4659      	mov	r1, fp
 800e610:	dd10      	ble.n	800e634 <_strtod_l+0x5fc>
 800e612:	2b1f      	cmp	r3, #31
 800e614:	f340 8107 	ble.w	800e826 <_strtod_l+0x7ee>
 800e618:	2b34      	cmp	r3, #52	; 0x34
 800e61a:	bfde      	ittt	le
 800e61c:	3b20      	suble	r3, #32
 800e61e:	f04f 32ff 	movle.w	r2, #4294967295
 800e622:	fa02 f303 	lslle.w	r3, r2, r3
 800e626:	f04f 0a00 	mov.w	sl, #0
 800e62a:	bfcc      	ite	gt
 800e62c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e630:	ea03 0b01 	andle.w	fp, r3, r1
 800e634:	2200      	movs	r2, #0
 800e636:	2300      	movs	r3, #0
 800e638:	4650      	mov	r0, sl
 800e63a:	4659      	mov	r1, fp
 800e63c:	f7f2 fa54 	bl	8000ae8 <__aeabi_dcmpeq>
 800e640:	2800      	cmp	r0, #0
 800e642:	d1ac      	bne.n	800e59e <_strtod_l+0x566>
 800e644:	9b07      	ldr	r3, [sp, #28]
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	9a05      	ldr	r2, [sp, #20]
 800e64a:	9908      	ldr	r1, [sp, #32]
 800e64c:	4623      	mov	r3, r4
 800e64e:	4648      	mov	r0, r9
 800e650:	f002 f83c 	bl	80106cc <__s2b>
 800e654:	9007      	str	r0, [sp, #28]
 800e656:	2800      	cmp	r0, #0
 800e658:	f43f af08 	beq.w	800e46c <_strtod_l+0x434>
 800e65c:	9a06      	ldr	r2, [sp, #24]
 800e65e:	9b06      	ldr	r3, [sp, #24]
 800e660:	2a00      	cmp	r2, #0
 800e662:	f1c3 0300 	rsb	r3, r3, #0
 800e666:	bfa8      	it	ge
 800e668:	2300      	movge	r3, #0
 800e66a:	930e      	str	r3, [sp, #56]	; 0x38
 800e66c:	2400      	movs	r4, #0
 800e66e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e672:	9316      	str	r3, [sp, #88]	; 0x58
 800e674:	46a0      	mov	r8, r4
 800e676:	9b07      	ldr	r3, [sp, #28]
 800e678:	4648      	mov	r0, r9
 800e67a:	6859      	ldr	r1, [r3, #4]
 800e67c:	f001 ffa0 	bl	80105c0 <_Balloc>
 800e680:	9005      	str	r0, [sp, #20]
 800e682:	2800      	cmp	r0, #0
 800e684:	f43f aef6 	beq.w	800e474 <_strtod_l+0x43c>
 800e688:	9b07      	ldr	r3, [sp, #28]
 800e68a:	691a      	ldr	r2, [r3, #16]
 800e68c:	3202      	adds	r2, #2
 800e68e:	f103 010c 	add.w	r1, r3, #12
 800e692:	0092      	lsls	r2, r2, #2
 800e694:	300c      	adds	r0, #12
 800e696:	f7fe fc51 	bl	800cf3c <memcpy>
 800e69a:	aa1e      	add	r2, sp, #120	; 0x78
 800e69c:	a91d      	add	r1, sp, #116	; 0x74
 800e69e:	ec4b ab10 	vmov	d0, sl, fp
 800e6a2:	4648      	mov	r0, r9
 800e6a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e6a8:	f002 facc 	bl	8010c44 <__d2b>
 800e6ac:	901c      	str	r0, [sp, #112]	; 0x70
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f43f aee0 	beq.w	800e474 <_strtod_l+0x43c>
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	4648      	mov	r0, r9
 800e6b8:	f002 f894 	bl	80107e4 <__i2b>
 800e6bc:	4680      	mov	r8, r0
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f43f aed8 	beq.w	800e474 <_strtod_l+0x43c>
 800e6c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e6c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e6c8:	2e00      	cmp	r6, #0
 800e6ca:	bfab      	itete	ge
 800e6cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e6ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800e6d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800e6d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800e6d4:	bfac      	ite	ge
 800e6d6:	18f7      	addge	r7, r6, r3
 800e6d8:	1b9d      	sublt	r5, r3, r6
 800e6da:	9b04      	ldr	r3, [sp, #16]
 800e6dc:	1af6      	subs	r6, r6, r3
 800e6de:	4416      	add	r6, r2
 800e6e0:	4b63      	ldr	r3, [pc, #396]	; (800e870 <_strtod_l+0x838>)
 800e6e2:	3e01      	subs	r6, #1
 800e6e4:	429e      	cmp	r6, r3
 800e6e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e6ea:	f280 80af 	bge.w	800e84c <_strtod_l+0x814>
 800e6ee:	1b9b      	subs	r3, r3, r6
 800e6f0:	2b1f      	cmp	r3, #31
 800e6f2:	eba2 0203 	sub.w	r2, r2, r3
 800e6f6:	f04f 0101 	mov.w	r1, #1
 800e6fa:	f300 809b 	bgt.w	800e834 <_strtod_l+0x7fc>
 800e6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800e702:	930f      	str	r3, [sp, #60]	; 0x3c
 800e704:	2300      	movs	r3, #0
 800e706:	930a      	str	r3, [sp, #40]	; 0x28
 800e708:	18be      	adds	r6, r7, r2
 800e70a:	9b04      	ldr	r3, [sp, #16]
 800e70c:	42b7      	cmp	r7, r6
 800e70e:	4415      	add	r5, r2
 800e710:	441d      	add	r5, r3
 800e712:	463b      	mov	r3, r7
 800e714:	bfa8      	it	ge
 800e716:	4633      	movge	r3, r6
 800e718:	42ab      	cmp	r3, r5
 800e71a:	bfa8      	it	ge
 800e71c:	462b      	movge	r3, r5
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bfc2      	ittt	gt
 800e722:	1af6      	subgt	r6, r6, r3
 800e724:	1aed      	subgt	r5, r5, r3
 800e726:	1aff      	subgt	r7, r7, r3
 800e728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e72a:	b1bb      	cbz	r3, 800e75c <_strtod_l+0x724>
 800e72c:	4641      	mov	r1, r8
 800e72e:	461a      	mov	r2, r3
 800e730:	4648      	mov	r0, r9
 800e732:	f002 f8f7 	bl	8010924 <__pow5mult>
 800e736:	4680      	mov	r8, r0
 800e738:	2800      	cmp	r0, #0
 800e73a:	f43f ae9b 	beq.w	800e474 <_strtod_l+0x43c>
 800e73e:	4601      	mov	r1, r0
 800e740:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e742:	4648      	mov	r0, r9
 800e744:	f002 f857 	bl	80107f6 <__multiply>
 800e748:	900c      	str	r0, [sp, #48]	; 0x30
 800e74a:	2800      	cmp	r0, #0
 800e74c:	f43f ae92 	beq.w	800e474 <_strtod_l+0x43c>
 800e750:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e752:	4648      	mov	r0, r9
 800e754:	f001 ff68 	bl	8010628 <_Bfree>
 800e758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e75a:	931c      	str	r3, [sp, #112]	; 0x70
 800e75c:	2e00      	cmp	r6, #0
 800e75e:	dc7a      	bgt.n	800e856 <_strtod_l+0x81e>
 800e760:	9b06      	ldr	r3, [sp, #24]
 800e762:	2b00      	cmp	r3, #0
 800e764:	dd08      	ble.n	800e778 <_strtod_l+0x740>
 800e766:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e768:	9905      	ldr	r1, [sp, #20]
 800e76a:	4648      	mov	r0, r9
 800e76c:	f002 f8da 	bl	8010924 <__pow5mult>
 800e770:	9005      	str	r0, [sp, #20]
 800e772:	2800      	cmp	r0, #0
 800e774:	f43f ae7e 	beq.w	800e474 <_strtod_l+0x43c>
 800e778:	2d00      	cmp	r5, #0
 800e77a:	dd08      	ble.n	800e78e <_strtod_l+0x756>
 800e77c:	462a      	mov	r2, r5
 800e77e:	9905      	ldr	r1, [sp, #20]
 800e780:	4648      	mov	r0, r9
 800e782:	f002 f91d 	bl	80109c0 <__lshift>
 800e786:	9005      	str	r0, [sp, #20]
 800e788:	2800      	cmp	r0, #0
 800e78a:	f43f ae73 	beq.w	800e474 <_strtod_l+0x43c>
 800e78e:	2f00      	cmp	r7, #0
 800e790:	dd08      	ble.n	800e7a4 <_strtod_l+0x76c>
 800e792:	4641      	mov	r1, r8
 800e794:	463a      	mov	r2, r7
 800e796:	4648      	mov	r0, r9
 800e798:	f002 f912 	bl	80109c0 <__lshift>
 800e79c:	4680      	mov	r8, r0
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	f43f ae68 	beq.w	800e474 <_strtod_l+0x43c>
 800e7a4:	9a05      	ldr	r2, [sp, #20]
 800e7a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e7a8:	4648      	mov	r0, r9
 800e7aa:	f002 f977 	bl	8010a9c <__mdiff>
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	f43f ae5f 	beq.w	800e474 <_strtod_l+0x43c>
 800e7b6:	68c3      	ldr	r3, [r0, #12]
 800e7b8:	930c      	str	r3, [sp, #48]	; 0x30
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	60c3      	str	r3, [r0, #12]
 800e7be:	4641      	mov	r1, r8
 800e7c0:	f002 f952 	bl	8010a68 <__mcmp>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	da55      	bge.n	800e874 <_strtod_l+0x83c>
 800e7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7ca:	b9e3      	cbnz	r3, 800e806 <_strtod_l+0x7ce>
 800e7cc:	f1ba 0f00 	cmp.w	sl, #0
 800e7d0:	d119      	bne.n	800e806 <_strtod_l+0x7ce>
 800e7d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7d6:	b9b3      	cbnz	r3, 800e806 <_strtod_l+0x7ce>
 800e7d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e7dc:	0d1b      	lsrs	r3, r3, #20
 800e7de:	051b      	lsls	r3, r3, #20
 800e7e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e7e4:	d90f      	bls.n	800e806 <_strtod_l+0x7ce>
 800e7e6:	6963      	ldr	r3, [r4, #20]
 800e7e8:	b913      	cbnz	r3, 800e7f0 <_strtod_l+0x7b8>
 800e7ea:	6923      	ldr	r3, [r4, #16]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	dd0a      	ble.n	800e806 <_strtod_l+0x7ce>
 800e7f0:	4621      	mov	r1, r4
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	4648      	mov	r0, r9
 800e7f6:	f002 f8e3 	bl	80109c0 <__lshift>
 800e7fa:	4641      	mov	r1, r8
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	f002 f933 	bl	8010a68 <__mcmp>
 800e802:	2800      	cmp	r0, #0
 800e804:	dc67      	bgt.n	800e8d6 <_strtod_l+0x89e>
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d171      	bne.n	800e8f0 <_strtod_l+0x8b8>
 800e80c:	e63d      	b.n	800e48a <_strtod_l+0x452>
 800e80e:	f018 0f01 	tst.w	r8, #1
 800e812:	d004      	beq.n	800e81e <_strtod_l+0x7e6>
 800e814:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e818:	f7f1 fefe 	bl	8000618 <__aeabi_dmul>
 800e81c:	2301      	movs	r3, #1
 800e81e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e822:	3508      	adds	r5, #8
 800e824:	e6e5      	b.n	800e5f2 <_strtod_l+0x5ba>
 800e826:	f04f 32ff 	mov.w	r2, #4294967295
 800e82a:	fa02 f303 	lsl.w	r3, r2, r3
 800e82e:	ea03 0a0a 	and.w	sl, r3, sl
 800e832:	e6ff      	b.n	800e634 <_strtod_l+0x5fc>
 800e834:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e838:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e83c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e840:	36e2      	adds	r6, #226	; 0xe2
 800e842:	fa01 f306 	lsl.w	r3, r1, r6
 800e846:	930a      	str	r3, [sp, #40]	; 0x28
 800e848:	910f      	str	r1, [sp, #60]	; 0x3c
 800e84a:	e75d      	b.n	800e708 <_strtod_l+0x6d0>
 800e84c:	2300      	movs	r3, #0
 800e84e:	930a      	str	r3, [sp, #40]	; 0x28
 800e850:	2301      	movs	r3, #1
 800e852:	930f      	str	r3, [sp, #60]	; 0x3c
 800e854:	e758      	b.n	800e708 <_strtod_l+0x6d0>
 800e856:	4632      	mov	r2, r6
 800e858:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e85a:	4648      	mov	r0, r9
 800e85c:	f002 f8b0 	bl	80109c0 <__lshift>
 800e860:	901c      	str	r0, [sp, #112]	; 0x70
 800e862:	2800      	cmp	r0, #0
 800e864:	f47f af7c 	bne.w	800e760 <_strtod_l+0x728>
 800e868:	e604      	b.n	800e474 <_strtod_l+0x43c>
 800e86a:	bf00      	nop
 800e86c:	08011668 	.word	0x08011668
 800e870:	fffffc02 	.word	0xfffffc02
 800e874:	465d      	mov	r5, fp
 800e876:	f040 8086 	bne.w	800e986 <_strtod_l+0x94e>
 800e87a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e87c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e880:	b32a      	cbz	r2, 800e8ce <_strtod_l+0x896>
 800e882:	4aaf      	ldr	r2, [pc, #700]	; (800eb40 <_strtod_l+0xb08>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d153      	bne.n	800e930 <_strtod_l+0x8f8>
 800e888:	9b04      	ldr	r3, [sp, #16]
 800e88a:	4650      	mov	r0, sl
 800e88c:	b1d3      	cbz	r3, 800e8c4 <_strtod_l+0x88c>
 800e88e:	4aad      	ldr	r2, [pc, #692]	; (800eb44 <_strtod_l+0xb0c>)
 800e890:	402a      	ands	r2, r5
 800e892:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e896:	f04f 31ff 	mov.w	r1, #4294967295
 800e89a:	d816      	bhi.n	800e8ca <_strtod_l+0x892>
 800e89c:	0d12      	lsrs	r2, r2, #20
 800e89e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e8a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e8a6:	4298      	cmp	r0, r3
 800e8a8:	d142      	bne.n	800e930 <_strtod_l+0x8f8>
 800e8aa:	4ba7      	ldr	r3, [pc, #668]	; (800eb48 <_strtod_l+0xb10>)
 800e8ac:	429d      	cmp	r5, r3
 800e8ae:	d102      	bne.n	800e8b6 <_strtod_l+0x87e>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f43f addf 	beq.w	800e474 <_strtod_l+0x43c>
 800e8b6:	4ba3      	ldr	r3, [pc, #652]	; (800eb44 <_strtod_l+0xb0c>)
 800e8b8:	402b      	ands	r3, r5
 800e8ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e8be:	f04f 0a00 	mov.w	sl, #0
 800e8c2:	e7a0      	b.n	800e806 <_strtod_l+0x7ce>
 800e8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c8:	e7ed      	b.n	800e8a6 <_strtod_l+0x86e>
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	e7eb      	b.n	800e8a6 <_strtod_l+0x86e>
 800e8ce:	bb7b      	cbnz	r3, 800e930 <_strtod_l+0x8f8>
 800e8d0:	f1ba 0f00 	cmp.w	sl, #0
 800e8d4:	d12c      	bne.n	800e930 <_strtod_l+0x8f8>
 800e8d6:	9904      	ldr	r1, [sp, #16]
 800e8d8:	4a9a      	ldr	r2, [pc, #616]	; (800eb44 <_strtod_l+0xb0c>)
 800e8da:	465b      	mov	r3, fp
 800e8dc:	b1f1      	cbz	r1, 800e91c <_strtod_l+0x8e4>
 800e8de:	ea02 010b 	and.w	r1, r2, fp
 800e8e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e8e6:	dc19      	bgt.n	800e91c <_strtod_l+0x8e4>
 800e8e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e8ec:	f77f ae5b 	ble.w	800e5a6 <_strtod_l+0x56e>
 800e8f0:	4a96      	ldr	r2, [pc, #600]	; (800eb4c <_strtod_l+0xb14>)
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800e8f8:	4650      	mov	r0, sl
 800e8fa:	4659      	mov	r1, fp
 800e8fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e900:	f7f1 fe8a 	bl	8000618 <__aeabi_dmul>
 800e904:	4682      	mov	sl, r0
 800e906:	468b      	mov	fp, r1
 800e908:	2900      	cmp	r1, #0
 800e90a:	f47f adbe 	bne.w	800e48a <_strtod_l+0x452>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f47f adbb 	bne.w	800e48a <_strtod_l+0x452>
 800e914:	2322      	movs	r3, #34	; 0x22
 800e916:	f8c9 3000 	str.w	r3, [r9]
 800e91a:	e5b6      	b.n	800e48a <_strtod_l+0x452>
 800e91c:	4013      	ands	r3, r2
 800e91e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e922:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e926:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e92a:	f04f 3aff 	mov.w	sl, #4294967295
 800e92e:	e76a      	b.n	800e806 <_strtod_l+0x7ce>
 800e930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e932:	b193      	cbz	r3, 800e95a <_strtod_l+0x922>
 800e934:	422b      	tst	r3, r5
 800e936:	f43f af66 	beq.w	800e806 <_strtod_l+0x7ce>
 800e93a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e93c:	9a04      	ldr	r2, [sp, #16]
 800e93e:	4650      	mov	r0, sl
 800e940:	4659      	mov	r1, fp
 800e942:	b173      	cbz	r3, 800e962 <_strtod_l+0x92a>
 800e944:	f7ff fb5c 	bl	800e000 <sulp>
 800e948:	4602      	mov	r2, r0
 800e94a:	460b      	mov	r3, r1
 800e94c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e950:	f7f1 fcac 	bl	80002ac <__adddf3>
 800e954:	4682      	mov	sl, r0
 800e956:	468b      	mov	fp, r1
 800e958:	e755      	b.n	800e806 <_strtod_l+0x7ce>
 800e95a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e95c:	ea13 0f0a 	tst.w	r3, sl
 800e960:	e7e9      	b.n	800e936 <_strtod_l+0x8fe>
 800e962:	f7ff fb4d 	bl	800e000 <sulp>
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e96e:	f7f1 fc9b 	bl	80002a8 <__aeabi_dsub>
 800e972:	2200      	movs	r2, #0
 800e974:	2300      	movs	r3, #0
 800e976:	4682      	mov	sl, r0
 800e978:	468b      	mov	fp, r1
 800e97a:	f7f2 f8b5 	bl	8000ae8 <__aeabi_dcmpeq>
 800e97e:	2800      	cmp	r0, #0
 800e980:	f47f ae11 	bne.w	800e5a6 <_strtod_l+0x56e>
 800e984:	e73f      	b.n	800e806 <_strtod_l+0x7ce>
 800e986:	4641      	mov	r1, r8
 800e988:	4620      	mov	r0, r4
 800e98a:	f002 f9aa 	bl	8010ce2 <__ratio>
 800e98e:	ec57 6b10 	vmov	r6, r7, d0
 800e992:	2200      	movs	r2, #0
 800e994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e998:	ee10 0a10 	vmov	r0, s0
 800e99c:	4639      	mov	r1, r7
 800e99e:	f7f2 f8b7 	bl	8000b10 <__aeabi_dcmple>
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d077      	beq.n	800ea96 <_strtod_l+0xa5e>
 800e9a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d04a      	beq.n	800ea42 <_strtod_l+0xa0a>
 800e9ac:	4b68      	ldr	r3, [pc, #416]	; (800eb50 <_strtod_l+0xb18>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e9b4:	4f66      	ldr	r7, [pc, #408]	; (800eb50 <_strtod_l+0xb18>)
 800e9b6:	2600      	movs	r6, #0
 800e9b8:	4b62      	ldr	r3, [pc, #392]	; (800eb44 <_strtod_l+0xb0c>)
 800e9ba:	402b      	ands	r3, r5
 800e9bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9c0:	4b64      	ldr	r3, [pc, #400]	; (800eb54 <_strtod_l+0xb1c>)
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	f040 80ce 	bne.w	800eb64 <_strtod_l+0xb2c>
 800e9c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e9cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e9d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800e9d4:	ec4b ab10 	vmov	d0, sl, fp
 800e9d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800e9dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e9e0:	f002 f8ba 	bl	8010b58 <__ulp>
 800e9e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e9e8:	ec53 2b10 	vmov	r2, r3, d0
 800e9ec:	f7f1 fe14 	bl	8000618 <__aeabi_dmul>
 800e9f0:	4652      	mov	r2, sl
 800e9f2:	465b      	mov	r3, fp
 800e9f4:	f7f1 fc5a 	bl	80002ac <__adddf3>
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4952      	ldr	r1, [pc, #328]	; (800eb44 <_strtod_l+0xb0c>)
 800e9fc:	4a56      	ldr	r2, [pc, #344]	; (800eb58 <_strtod_l+0xb20>)
 800e9fe:	4019      	ands	r1, r3
 800ea00:	4291      	cmp	r1, r2
 800ea02:	4682      	mov	sl, r0
 800ea04:	d95b      	bls.n	800eabe <_strtod_l+0xa86>
 800ea06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea08:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d103      	bne.n	800ea18 <_strtod_l+0x9e0>
 800ea10:	9b08      	ldr	r3, [sp, #32]
 800ea12:	3301      	adds	r3, #1
 800ea14:	f43f ad2e 	beq.w	800e474 <_strtod_l+0x43c>
 800ea18:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800eb48 <_strtod_l+0xb10>
 800ea1c:	f04f 3aff 	mov.w	sl, #4294967295
 800ea20:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ea22:	4648      	mov	r0, r9
 800ea24:	f001 fe00 	bl	8010628 <_Bfree>
 800ea28:	9905      	ldr	r1, [sp, #20]
 800ea2a:	4648      	mov	r0, r9
 800ea2c:	f001 fdfc 	bl	8010628 <_Bfree>
 800ea30:	4641      	mov	r1, r8
 800ea32:	4648      	mov	r0, r9
 800ea34:	f001 fdf8 	bl	8010628 <_Bfree>
 800ea38:	4621      	mov	r1, r4
 800ea3a:	4648      	mov	r0, r9
 800ea3c:	f001 fdf4 	bl	8010628 <_Bfree>
 800ea40:	e619      	b.n	800e676 <_strtod_l+0x63e>
 800ea42:	f1ba 0f00 	cmp.w	sl, #0
 800ea46:	d11a      	bne.n	800ea7e <_strtod_l+0xa46>
 800ea48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea4c:	b9eb      	cbnz	r3, 800ea8a <_strtod_l+0xa52>
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4b3f      	ldr	r3, [pc, #252]	; (800eb50 <_strtod_l+0xb18>)
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	f7f2 f851 	bl	8000afc <__aeabi_dcmplt>
 800ea5a:	b9c8      	cbnz	r0, 800ea90 <_strtod_l+0xa58>
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	4639      	mov	r1, r7
 800ea60:	2200      	movs	r2, #0
 800ea62:	4b3e      	ldr	r3, [pc, #248]	; (800eb5c <_strtod_l+0xb24>)
 800ea64:	f7f1 fdd8 	bl	8000618 <__aeabi_dmul>
 800ea68:	4606      	mov	r6, r0
 800ea6a:	460f      	mov	r7, r1
 800ea6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ea70:	9618      	str	r6, [sp, #96]	; 0x60
 800ea72:	9319      	str	r3, [sp, #100]	; 0x64
 800ea74:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ea78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ea7c:	e79c      	b.n	800e9b8 <_strtod_l+0x980>
 800ea7e:	f1ba 0f01 	cmp.w	sl, #1
 800ea82:	d102      	bne.n	800ea8a <_strtod_l+0xa52>
 800ea84:	2d00      	cmp	r5, #0
 800ea86:	f43f ad8e 	beq.w	800e5a6 <_strtod_l+0x56e>
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4b34      	ldr	r3, [pc, #208]	; (800eb60 <_strtod_l+0xb28>)
 800ea8e:	e78f      	b.n	800e9b0 <_strtod_l+0x978>
 800ea90:	2600      	movs	r6, #0
 800ea92:	4f32      	ldr	r7, [pc, #200]	; (800eb5c <_strtod_l+0xb24>)
 800ea94:	e7ea      	b.n	800ea6c <_strtod_l+0xa34>
 800ea96:	4b31      	ldr	r3, [pc, #196]	; (800eb5c <_strtod_l+0xb24>)
 800ea98:	4630      	mov	r0, r6
 800ea9a:	4639      	mov	r1, r7
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f7f1 fdbb 	bl	8000618 <__aeabi_dmul>
 800eaa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaa4:	4606      	mov	r6, r0
 800eaa6:	460f      	mov	r7, r1
 800eaa8:	b933      	cbnz	r3, 800eab8 <_strtod_l+0xa80>
 800eaaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eaae:	9010      	str	r0, [sp, #64]	; 0x40
 800eab0:	9311      	str	r3, [sp, #68]	; 0x44
 800eab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eab6:	e7df      	b.n	800ea78 <_strtod_l+0xa40>
 800eab8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800eabc:	e7f9      	b.n	800eab2 <_strtod_l+0xa7a>
 800eabe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800eac2:	9b04      	ldr	r3, [sp, #16]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1ab      	bne.n	800ea20 <_strtod_l+0x9e8>
 800eac8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eacc:	0d1b      	lsrs	r3, r3, #20
 800eace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ead0:	051b      	lsls	r3, r3, #20
 800ead2:	429a      	cmp	r2, r3
 800ead4:	465d      	mov	r5, fp
 800ead6:	d1a3      	bne.n	800ea20 <_strtod_l+0x9e8>
 800ead8:	4639      	mov	r1, r7
 800eada:	4630      	mov	r0, r6
 800eadc:	f7f2 f84c 	bl	8000b78 <__aeabi_d2iz>
 800eae0:	f7f1 fd30 	bl	8000544 <__aeabi_i2d>
 800eae4:	460b      	mov	r3, r1
 800eae6:	4602      	mov	r2, r0
 800eae8:	4639      	mov	r1, r7
 800eaea:	4630      	mov	r0, r6
 800eaec:	f7f1 fbdc 	bl	80002a8 <__aeabi_dsub>
 800eaf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	460f      	mov	r7, r1
 800eaf6:	b933      	cbnz	r3, 800eb06 <_strtod_l+0xace>
 800eaf8:	f1ba 0f00 	cmp.w	sl, #0
 800eafc:	d103      	bne.n	800eb06 <_strtod_l+0xace>
 800eafe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800eb02:	2d00      	cmp	r5, #0
 800eb04:	d06d      	beq.n	800ebe2 <_strtod_l+0xbaa>
 800eb06:	a30a      	add	r3, pc, #40	; (adr r3, 800eb30 <_strtod_l+0xaf8>)
 800eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	4639      	mov	r1, r7
 800eb10:	f7f1 fff4 	bl	8000afc <__aeabi_dcmplt>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f47f acb8 	bne.w	800e48a <_strtod_l+0x452>
 800eb1a:	a307      	add	r3, pc, #28	; (adr r3, 800eb38 <_strtod_l+0xb00>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	4630      	mov	r0, r6
 800eb22:	4639      	mov	r1, r7
 800eb24:	f7f2 f808 	bl	8000b38 <__aeabi_dcmpgt>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	f43f af79 	beq.w	800ea20 <_strtod_l+0x9e8>
 800eb2e:	e4ac      	b.n	800e48a <_strtod_l+0x452>
 800eb30:	94a03595 	.word	0x94a03595
 800eb34:	3fdfffff 	.word	0x3fdfffff
 800eb38:	35afe535 	.word	0x35afe535
 800eb3c:	3fe00000 	.word	0x3fe00000
 800eb40:	000fffff 	.word	0x000fffff
 800eb44:	7ff00000 	.word	0x7ff00000
 800eb48:	7fefffff 	.word	0x7fefffff
 800eb4c:	39500000 	.word	0x39500000
 800eb50:	3ff00000 	.word	0x3ff00000
 800eb54:	7fe00000 	.word	0x7fe00000
 800eb58:	7c9fffff 	.word	0x7c9fffff
 800eb5c:	3fe00000 	.word	0x3fe00000
 800eb60:	bff00000 	.word	0xbff00000
 800eb64:	9b04      	ldr	r3, [sp, #16]
 800eb66:	b333      	cbz	r3, 800ebb6 <_strtod_l+0xb7e>
 800eb68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb6a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb6e:	d822      	bhi.n	800ebb6 <_strtod_l+0xb7e>
 800eb70:	a327      	add	r3, pc, #156	; (adr r3, 800ec10 <_strtod_l+0xbd8>)
 800eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb76:	4630      	mov	r0, r6
 800eb78:	4639      	mov	r1, r7
 800eb7a:	f7f1 ffc9 	bl	8000b10 <__aeabi_dcmple>
 800eb7e:	b1a0      	cbz	r0, 800ebaa <_strtod_l+0xb72>
 800eb80:	4639      	mov	r1, r7
 800eb82:	4630      	mov	r0, r6
 800eb84:	f7f2 f820 	bl	8000bc8 <__aeabi_d2uiz>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	bf08      	it	eq
 800eb8c:	2001      	moveq	r0, #1
 800eb8e:	f7f1 fcc9 	bl	8000524 <__aeabi_ui2d>
 800eb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	bb03      	cbnz	r3, 800ebdc <_strtod_l+0xba4>
 800eb9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb9e:	9012      	str	r0, [sp, #72]	; 0x48
 800eba0:	9313      	str	r3, [sp, #76]	; 0x4c
 800eba2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800eba6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ebaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ebae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ebb2:	1a9b      	subs	r3, r3, r2
 800ebb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebb6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ebba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ebbe:	f001 ffcb 	bl	8010b58 <__ulp>
 800ebc2:	4650      	mov	r0, sl
 800ebc4:	ec53 2b10 	vmov	r2, r3, d0
 800ebc8:	4659      	mov	r1, fp
 800ebca:	f7f1 fd25 	bl	8000618 <__aeabi_dmul>
 800ebce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ebd2:	f7f1 fb6b 	bl	80002ac <__adddf3>
 800ebd6:	4682      	mov	sl, r0
 800ebd8:	468b      	mov	fp, r1
 800ebda:	e772      	b.n	800eac2 <_strtod_l+0xa8a>
 800ebdc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ebe0:	e7df      	b.n	800eba2 <_strtod_l+0xb6a>
 800ebe2:	a30d      	add	r3, pc, #52	; (adr r3, 800ec18 <_strtod_l+0xbe0>)
 800ebe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe8:	f7f1 ff88 	bl	8000afc <__aeabi_dcmplt>
 800ebec:	e79c      	b.n	800eb28 <_strtod_l+0xaf0>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	930d      	str	r3, [sp, #52]	; 0x34
 800ebf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ebf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ebf6:	6013      	str	r3, [r2, #0]
 800ebf8:	f7ff ba61 	b.w	800e0be <_strtod_l+0x86>
 800ebfc:	2b65      	cmp	r3, #101	; 0x65
 800ebfe:	f04f 0200 	mov.w	r2, #0
 800ec02:	f43f ab4e 	beq.w	800e2a2 <_strtod_l+0x26a>
 800ec06:	2101      	movs	r1, #1
 800ec08:	4614      	mov	r4, r2
 800ec0a:	9104      	str	r1, [sp, #16]
 800ec0c:	f7ff bacb 	b.w	800e1a6 <_strtod_l+0x16e>
 800ec10:	ffc00000 	.word	0xffc00000
 800ec14:	41dfffff 	.word	0x41dfffff
 800ec18:	94a03595 	.word	0x94a03595
 800ec1c:	3fcfffff 	.word	0x3fcfffff

0800ec20 <_strtod_r>:
 800ec20:	4b05      	ldr	r3, [pc, #20]	; (800ec38 <_strtod_r+0x18>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	b410      	push	{r4}
 800ec26:	6a1b      	ldr	r3, [r3, #32]
 800ec28:	4c04      	ldr	r4, [pc, #16]	; (800ec3c <_strtod_r+0x1c>)
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	bf08      	it	eq
 800ec2e:	4623      	moveq	r3, r4
 800ec30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec34:	f7ff ba00 	b.w	800e038 <_strtod_l>
 800ec38:	20000010 	.word	0x20000010
 800ec3c:	20000074 	.word	0x20000074

0800ec40 <_strtol_l.isra.0>:
 800ec40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	4680      	mov	r8, r0
 800ec46:	4689      	mov	r9, r1
 800ec48:	4692      	mov	sl, r2
 800ec4a:	461e      	mov	r6, r3
 800ec4c:	460f      	mov	r7, r1
 800ec4e:	463d      	mov	r5, r7
 800ec50:	9808      	ldr	r0, [sp, #32]
 800ec52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec56:	f001 fc27 	bl	80104a8 <__locale_ctype_ptr_l>
 800ec5a:	4420      	add	r0, r4
 800ec5c:	7843      	ldrb	r3, [r0, #1]
 800ec5e:	f013 0308 	ands.w	r3, r3, #8
 800ec62:	d132      	bne.n	800ecca <_strtol_l.isra.0+0x8a>
 800ec64:	2c2d      	cmp	r4, #45	; 0x2d
 800ec66:	d132      	bne.n	800ecce <_strtol_l.isra.0+0x8e>
 800ec68:	787c      	ldrb	r4, [r7, #1]
 800ec6a:	1cbd      	adds	r5, r7, #2
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	2e00      	cmp	r6, #0
 800ec70:	d05d      	beq.n	800ed2e <_strtol_l.isra.0+0xee>
 800ec72:	2e10      	cmp	r6, #16
 800ec74:	d109      	bne.n	800ec8a <_strtol_l.isra.0+0x4a>
 800ec76:	2c30      	cmp	r4, #48	; 0x30
 800ec78:	d107      	bne.n	800ec8a <_strtol_l.isra.0+0x4a>
 800ec7a:	782b      	ldrb	r3, [r5, #0]
 800ec7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec80:	2b58      	cmp	r3, #88	; 0x58
 800ec82:	d14f      	bne.n	800ed24 <_strtol_l.isra.0+0xe4>
 800ec84:	786c      	ldrb	r4, [r5, #1]
 800ec86:	2610      	movs	r6, #16
 800ec88:	3502      	adds	r5, #2
 800ec8a:	2a00      	cmp	r2, #0
 800ec8c:	bf14      	ite	ne
 800ec8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ec92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ec96:	2700      	movs	r7, #0
 800ec98:	fbb1 fcf6 	udiv	ip, r1, r6
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800eca2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800eca6:	2b09      	cmp	r3, #9
 800eca8:	d817      	bhi.n	800ecda <_strtol_l.isra.0+0x9a>
 800ecaa:	461c      	mov	r4, r3
 800ecac:	42a6      	cmp	r6, r4
 800ecae:	dd23      	ble.n	800ecf8 <_strtol_l.isra.0+0xb8>
 800ecb0:	1c7b      	adds	r3, r7, #1
 800ecb2:	d007      	beq.n	800ecc4 <_strtol_l.isra.0+0x84>
 800ecb4:	4584      	cmp	ip, r0
 800ecb6:	d31c      	bcc.n	800ecf2 <_strtol_l.isra.0+0xb2>
 800ecb8:	d101      	bne.n	800ecbe <_strtol_l.isra.0+0x7e>
 800ecba:	45a6      	cmp	lr, r4
 800ecbc:	db19      	blt.n	800ecf2 <_strtol_l.isra.0+0xb2>
 800ecbe:	fb00 4006 	mla	r0, r0, r6, r4
 800ecc2:	2701      	movs	r7, #1
 800ecc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecc8:	e7eb      	b.n	800eca2 <_strtol_l.isra.0+0x62>
 800ecca:	462f      	mov	r7, r5
 800eccc:	e7bf      	b.n	800ec4e <_strtol_l.isra.0+0xe>
 800ecce:	2c2b      	cmp	r4, #43	; 0x2b
 800ecd0:	bf04      	itt	eq
 800ecd2:	1cbd      	addeq	r5, r7, #2
 800ecd4:	787c      	ldrbeq	r4, [r7, #1]
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	e7c9      	b.n	800ec6e <_strtol_l.isra.0+0x2e>
 800ecda:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ecde:	2b19      	cmp	r3, #25
 800ece0:	d801      	bhi.n	800ece6 <_strtol_l.isra.0+0xa6>
 800ece2:	3c37      	subs	r4, #55	; 0x37
 800ece4:	e7e2      	b.n	800ecac <_strtol_l.isra.0+0x6c>
 800ece6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ecea:	2b19      	cmp	r3, #25
 800ecec:	d804      	bhi.n	800ecf8 <_strtol_l.isra.0+0xb8>
 800ecee:	3c57      	subs	r4, #87	; 0x57
 800ecf0:	e7dc      	b.n	800ecac <_strtol_l.isra.0+0x6c>
 800ecf2:	f04f 37ff 	mov.w	r7, #4294967295
 800ecf6:	e7e5      	b.n	800ecc4 <_strtol_l.isra.0+0x84>
 800ecf8:	1c7b      	adds	r3, r7, #1
 800ecfa:	d108      	bne.n	800ed0e <_strtol_l.isra.0+0xce>
 800ecfc:	2322      	movs	r3, #34	; 0x22
 800ecfe:	f8c8 3000 	str.w	r3, [r8]
 800ed02:	4608      	mov	r0, r1
 800ed04:	f1ba 0f00 	cmp.w	sl, #0
 800ed08:	d107      	bne.n	800ed1a <_strtol_l.isra.0+0xda>
 800ed0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0e:	b102      	cbz	r2, 800ed12 <_strtol_l.isra.0+0xd2>
 800ed10:	4240      	negs	r0, r0
 800ed12:	f1ba 0f00 	cmp.w	sl, #0
 800ed16:	d0f8      	beq.n	800ed0a <_strtol_l.isra.0+0xca>
 800ed18:	b10f      	cbz	r7, 800ed1e <_strtol_l.isra.0+0xde>
 800ed1a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ed1e:	f8ca 9000 	str.w	r9, [sl]
 800ed22:	e7f2      	b.n	800ed0a <_strtol_l.isra.0+0xca>
 800ed24:	2430      	movs	r4, #48	; 0x30
 800ed26:	2e00      	cmp	r6, #0
 800ed28:	d1af      	bne.n	800ec8a <_strtol_l.isra.0+0x4a>
 800ed2a:	2608      	movs	r6, #8
 800ed2c:	e7ad      	b.n	800ec8a <_strtol_l.isra.0+0x4a>
 800ed2e:	2c30      	cmp	r4, #48	; 0x30
 800ed30:	d0a3      	beq.n	800ec7a <_strtol_l.isra.0+0x3a>
 800ed32:	260a      	movs	r6, #10
 800ed34:	e7a9      	b.n	800ec8a <_strtol_l.isra.0+0x4a>
	...

0800ed38 <_strtol_r>:
 800ed38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed3a:	4c06      	ldr	r4, [pc, #24]	; (800ed54 <_strtol_r+0x1c>)
 800ed3c:	4d06      	ldr	r5, [pc, #24]	; (800ed58 <_strtol_r+0x20>)
 800ed3e:	6824      	ldr	r4, [r4, #0]
 800ed40:	6a24      	ldr	r4, [r4, #32]
 800ed42:	2c00      	cmp	r4, #0
 800ed44:	bf08      	it	eq
 800ed46:	462c      	moveq	r4, r5
 800ed48:	9400      	str	r4, [sp, #0]
 800ed4a:	f7ff ff79 	bl	800ec40 <_strtol_l.isra.0>
 800ed4e:	b003      	add	sp, #12
 800ed50:	bd30      	pop	{r4, r5, pc}
 800ed52:	bf00      	nop
 800ed54:	20000010 	.word	0x20000010
 800ed58:	20000074 	.word	0x20000074

0800ed5c <__swbuf_r>:
 800ed5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5e:	460e      	mov	r6, r1
 800ed60:	4614      	mov	r4, r2
 800ed62:	4605      	mov	r5, r0
 800ed64:	b118      	cbz	r0, 800ed6e <__swbuf_r+0x12>
 800ed66:	6983      	ldr	r3, [r0, #24]
 800ed68:	b90b      	cbnz	r3, 800ed6e <__swbuf_r+0x12>
 800ed6a:	f000 ffed 	bl	800fd48 <__sinit>
 800ed6e:	4b21      	ldr	r3, [pc, #132]	; (800edf4 <__swbuf_r+0x98>)
 800ed70:	429c      	cmp	r4, r3
 800ed72:	d12a      	bne.n	800edca <__swbuf_r+0x6e>
 800ed74:	686c      	ldr	r4, [r5, #4]
 800ed76:	69a3      	ldr	r3, [r4, #24]
 800ed78:	60a3      	str	r3, [r4, #8]
 800ed7a:	89a3      	ldrh	r3, [r4, #12]
 800ed7c:	071a      	lsls	r2, r3, #28
 800ed7e:	d52e      	bpl.n	800edde <__swbuf_r+0x82>
 800ed80:	6923      	ldr	r3, [r4, #16]
 800ed82:	b363      	cbz	r3, 800edde <__swbuf_r+0x82>
 800ed84:	6923      	ldr	r3, [r4, #16]
 800ed86:	6820      	ldr	r0, [r4, #0]
 800ed88:	1ac0      	subs	r0, r0, r3
 800ed8a:	6963      	ldr	r3, [r4, #20]
 800ed8c:	b2f6      	uxtb	r6, r6
 800ed8e:	4283      	cmp	r3, r0
 800ed90:	4637      	mov	r7, r6
 800ed92:	dc04      	bgt.n	800ed9e <__swbuf_r+0x42>
 800ed94:	4621      	mov	r1, r4
 800ed96:	4628      	mov	r0, r5
 800ed98:	f000 ff6c 	bl	800fc74 <_fflush_r>
 800ed9c:	bb28      	cbnz	r0, 800edea <__swbuf_r+0x8e>
 800ed9e:	68a3      	ldr	r3, [r4, #8]
 800eda0:	3b01      	subs	r3, #1
 800eda2:	60a3      	str	r3, [r4, #8]
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	1c5a      	adds	r2, r3, #1
 800eda8:	6022      	str	r2, [r4, #0]
 800edaa:	701e      	strb	r6, [r3, #0]
 800edac:	6963      	ldr	r3, [r4, #20]
 800edae:	3001      	adds	r0, #1
 800edb0:	4283      	cmp	r3, r0
 800edb2:	d004      	beq.n	800edbe <__swbuf_r+0x62>
 800edb4:	89a3      	ldrh	r3, [r4, #12]
 800edb6:	07db      	lsls	r3, r3, #31
 800edb8:	d519      	bpl.n	800edee <__swbuf_r+0x92>
 800edba:	2e0a      	cmp	r6, #10
 800edbc:	d117      	bne.n	800edee <__swbuf_r+0x92>
 800edbe:	4621      	mov	r1, r4
 800edc0:	4628      	mov	r0, r5
 800edc2:	f000 ff57 	bl	800fc74 <_fflush_r>
 800edc6:	b190      	cbz	r0, 800edee <__swbuf_r+0x92>
 800edc8:	e00f      	b.n	800edea <__swbuf_r+0x8e>
 800edca:	4b0b      	ldr	r3, [pc, #44]	; (800edf8 <__swbuf_r+0x9c>)
 800edcc:	429c      	cmp	r4, r3
 800edce:	d101      	bne.n	800edd4 <__swbuf_r+0x78>
 800edd0:	68ac      	ldr	r4, [r5, #8]
 800edd2:	e7d0      	b.n	800ed76 <__swbuf_r+0x1a>
 800edd4:	4b09      	ldr	r3, [pc, #36]	; (800edfc <__swbuf_r+0xa0>)
 800edd6:	429c      	cmp	r4, r3
 800edd8:	bf08      	it	eq
 800edda:	68ec      	ldreq	r4, [r5, #12]
 800eddc:	e7cb      	b.n	800ed76 <__swbuf_r+0x1a>
 800edde:	4621      	mov	r1, r4
 800ede0:	4628      	mov	r0, r5
 800ede2:	f000 f80d 	bl	800ee00 <__swsetup_r>
 800ede6:	2800      	cmp	r0, #0
 800ede8:	d0cc      	beq.n	800ed84 <__swbuf_r+0x28>
 800edea:	f04f 37ff 	mov.w	r7, #4294967295
 800edee:	4638      	mov	r0, r7
 800edf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf2:	bf00      	nop
 800edf4:	080116c0 	.word	0x080116c0
 800edf8:	080116e0 	.word	0x080116e0
 800edfc:	080116a0 	.word	0x080116a0

0800ee00 <__swsetup_r>:
 800ee00:	4b32      	ldr	r3, [pc, #200]	; (800eecc <__swsetup_r+0xcc>)
 800ee02:	b570      	push	{r4, r5, r6, lr}
 800ee04:	681d      	ldr	r5, [r3, #0]
 800ee06:	4606      	mov	r6, r0
 800ee08:	460c      	mov	r4, r1
 800ee0a:	b125      	cbz	r5, 800ee16 <__swsetup_r+0x16>
 800ee0c:	69ab      	ldr	r3, [r5, #24]
 800ee0e:	b913      	cbnz	r3, 800ee16 <__swsetup_r+0x16>
 800ee10:	4628      	mov	r0, r5
 800ee12:	f000 ff99 	bl	800fd48 <__sinit>
 800ee16:	4b2e      	ldr	r3, [pc, #184]	; (800eed0 <__swsetup_r+0xd0>)
 800ee18:	429c      	cmp	r4, r3
 800ee1a:	d10f      	bne.n	800ee3c <__swsetup_r+0x3c>
 800ee1c:	686c      	ldr	r4, [r5, #4]
 800ee1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	0715      	lsls	r5, r2, #28
 800ee26:	d42c      	bmi.n	800ee82 <__swsetup_r+0x82>
 800ee28:	06d0      	lsls	r0, r2, #27
 800ee2a:	d411      	bmi.n	800ee50 <__swsetup_r+0x50>
 800ee2c:	2209      	movs	r2, #9
 800ee2e:	6032      	str	r2, [r6, #0]
 800ee30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee34:	81a3      	strh	r3, [r4, #12]
 800ee36:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3a:	e03e      	b.n	800eeba <__swsetup_r+0xba>
 800ee3c:	4b25      	ldr	r3, [pc, #148]	; (800eed4 <__swsetup_r+0xd4>)
 800ee3e:	429c      	cmp	r4, r3
 800ee40:	d101      	bne.n	800ee46 <__swsetup_r+0x46>
 800ee42:	68ac      	ldr	r4, [r5, #8]
 800ee44:	e7eb      	b.n	800ee1e <__swsetup_r+0x1e>
 800ee46:	4b24      	ldr	r3, [pc, #144]	; (800eed8 <__swsetup_r+0xd8>)
 800ee48:	429c      	cmp	r4, r3
 800ee4a:	bf08      	it	eq
 800ee4c:	68ec      	ldreq	r4, [r5, #12]
 800ee4e:	e7e6      	b.n	800ee1e <__swsetup_r+0x1e>
 800ee50:	0751      	lsls	r1, r2, #29
 800ee52:	d512      	bpl.n	800ee7a <__swsetup_r+0x7a>
 800ee54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee56:	b141      	cbz	r1, 800ee6a <__swsetup_r+0x6a>
 800ee58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee5c:	4299      	cmp	r1, r3
 800ee5e:	d002      	beq.n	800ee66 <__swsetup_r+0x66>
 800ee60:	4630      	mov	r0, r6
 800ee62:	f7fe f87f 	bl	800cf64 <_free_r>
 800ee66:	2300      	movs	r3, #0
 800ee68:	6363      	str	r3, [r4, #52]	; 0x34
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee70:	81a3      	strh	r3, [r4, #12]
 800ee72:	2300      	movs	r3, #0
 800ee74:	6063      	str	r3, [r4, #4]
 800ee76:	6923      	ldr	r3, [r4, #16]
 800ee78:	6023      	str	r3, [r4, #0]
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	f043 0308 	orr.w	r3, r3, #8
 800ee80:	81a3      	strh	r3, [r4, #12]
 800ee82:	6923      	ldr	r3, [r4, #16]
 800ee84:	b94b      	cbnz	r3, 800ee9a <__swsetup_r+0x9a>
 800ee86:	89a3      	ldrh	r3, [r4, #12]
 800ee88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee90:	d003      	beq.n	800ee9a <__swsetup_r+0x9a>
 800ee92:	4621      	mov	r1, r4
 800ee94:	4630      	mov	r0, r6
 800ee96:	f001 fb3f 	bl	8010518 <__smakebuf_r>
 800ee9a:	89a2      	ldrh	r2, [r4, #12]
 800ee9c:	f012 0301 	ands.w	r3, r2, #1
 800eea0:	d00c      	beq.n	800eebc <__swsetup_r+0xbc>
 800eea2:	2300      	movs	r3, #0
 800eea4:	60a3      	str	r3, [r4, #8]
 800eea6:	6963      	ldr	r3, [r4, #20]
 800eea8:	425b      	negs	r3, r3
 800eeaa:	61a3      	str	r3, [r4, #24]
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	b953      	cbnz	r3, 800eec6 <__swsetup_r+0xc6>
 800eeb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800eeb8:	d1ba      	bne.n	800ee30 <__swsetup_r+0x30>
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	0792      	lsls	r2, r2, #30
 800eebe:	bf58      	it	pl
 800eec0:	6963      	ldrpl	r3, [r4, #20]
 800eec2:	60a3      	str	r3, [r4, #8]
 800eec4:	e7f2      	b.n	800eeac <__swsetup_r+0xac>
 800eec6:	2000      	movs	r0, #0
 800eec8:	e7f7      	b.n	800eeba <__swsetup_r+0xba>
 800eeca:	bf00      	nop
 800eecc:	20000010 	.word	0x20000010
 800eed0:	080116c0 	.word	0x080116c0
 800eed4:	080116e0 	.word	0x080116e0
 800eed8:	080116a0 	.word	0x080116a0

0800eedc <quorem>:
 800eedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee0:	6903      	ldr	r3, [r0, #16]
 800eee2:	690c      	ldr	r4, [r1, #16]
 800eee4:	42a3      	cmp	r3, r4
 800eee6:	4680      	mov	r8, r0
 800eee8:	f2c0 8082 	blt.w	800eff0 <quorem+0x114>
 800eeec:	3c01      	subs	r4, #1
 800eeee:	f101 0714 	add.w	r7, r1, #20
 800eef2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800eef6:	f100 0614 	add.w	r6, r0, #20
 800eefa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800eefe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ef02:	eb06 030c 	add.w	r3, r6, ip
 800ef06:	3501      	adds	r5, #1
 800ef08:	eb07 090c 	add.w	r9, r7, ip
 800ef0c:	9301      	str	r3, [sp, #4]
 800ef0e:	fbb0 f5f5 	udiv	r5, r0, r5
 800ef12:	b395      	cbz	r5, 800ef7a <quorem+0x9e>
 800ef14:	f04f 0a00 	mov.w	sl, #0
 800ef18:	4638      	mov	r0, r7
 800ef1a:	46b6      	mov	lr, r6
 800ef1c:	46d3      	mov	fp, sl
 800ef1e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef22:	b293      	uxth	r3, r2
 800ef24:	fb05 a303 	mla	r3, r5, r3, sl
 800ef28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	ebab 0303 	sub.w	r3, fp, r3
 800ef32:	0c12      	lsrs	r2, r2, #16
 800ef34:	f8de b000 	ldr.w	fp, [lr]
 800ef38:	fb05 a202 	mla	r2, r5, r2, sl
 800ef3c:	fa13 f38b 	uxtah	r3, r3, fp
 800ef40:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ef44:	fa1f fb82 	uxth.w	fp, r2
 800ef48:	f8de 2000 	ldr.w	r2, [lr]
 800ef4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ef50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef5a:	4581      	cmp	r9, r0
 800ef5c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ef60:	f84e 3b04 	str.w	r3, [lr], #4
 800ef64:	d2db      	bcs.n	800ef1e <quorem+0x42>
 800ef66:	f856 300c 	ldr.w	r3, [r6, ip]
 800ef6a:	b933      	cbnz	r3, 800ef7a <quorem+0x9e>
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	3b04      	subs	r3, #4
 800ef70:	429e      	cmp	r6, r3
 800ef72:	461a      	mov	r2, r3
 800ef74:	d330      	bcc.n	800efd8 <quorem+0xfc>
 800ef76:	f8c8 4010 	str.w	r4, [r8, #16]
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	f001 fd74 	bl	8010a68 <__mcmp>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	db25      	blt.n	800efd0 <quorem+0xf4>
 800ef84:	3501      	adds	r5, #1
 800ef86:	4630      	mov	r0, r6
 800ef88:	f04f 0c00 	mov.w	ip, #0
 800ef8c:	f857 2b04 	ldr.w	r2, [r7], #4
 800ef90:	f8d0 e000 	ldr.w	lr, [r0]
 800ef94:	b293      	uxth	r3, r2
 800ef96:	ebac 0303 	sub.w	r3, ip, r3
 800ef9a:	0c12      	lsrs	r2, r2, #16
 800ef9c:	fa13 f38e 	uxtah	r3, r3, lr
 800efa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800efa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efae:	45b9      	cmp	r9, r7
 800efb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efb4:	f840 3b04 	str.w	r3, [r0], #4
 800efb8:	d2e8      	bcs.n	800ef8c <quorem+0xb0>
 800efba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800efbe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800efc2:	b92a      	cbnz	r2, 800efd0 <quorem+0xf4>
 800efc4:	3b04      	subs	r3, #4
 800efc6:	429e      	cmp	r6, r3
 800efc8:	461a      	mov	r2, r3
 800efca:	d30b      	bcc.n	800efe4 <quorem+0x108>
 800efcc:	f8c8 4010 	str.w	r4, [r8, #16]
 800efd0:	4628      	mov	r0, r5
 800efd2:	b003      	add	sp, #12
 800efd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd8:	6812      	ldr	r2, [r2, #0]
 800efda:	3b04      	subs	r3, #4
 800efdc:	2a00      	cmp	r2, #0
 800efde:	d1ca      	bne.n	800ef76 <quorem+0x9a>
 800efe0:	3c01      	subs	r4, #1
 800efe2:	e7c5      	b.n	800ef70 <quorem+0x94>
 800efe4:	6812      	ldr	r2, [r2, #0]
 800efe6:	3b04      	subs	r3, #4
 800efe8:	2a00      	cmp	r2, #0
 800efea:	d1ef      	bne.n	800efcc <quorem+0xf0>
 800efec:	3c01      	subs	r4, #1
 800efee:	e7ea      	b.n	800efc6 <quorem+0xea>
 800eff0:	2000      	movs	r0, #0
 800eff2:	e7ee      	b.n	800efd2 <quorem+0xf6>
 800eff4:	0000      	movs	r0, r0
	...

0800eff8 <_dtoa_r>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	ec57 6b10 	vmov	r6, r7, d0
 800f000:	b097      	sub	sp, #92	; 0x5c
 800f002:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f004:	9106      	str	r1, [sp, #24]
 800f006:	4604      	mov	r4, r0
 800f008:	920b      	str	r2, [sp, #44]	; 0x2c
 800f00a:	9312      	str	r3, [sp, #72]	; 0x48
 800f00c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f010:	e9cd 6700 	strd	r6, r7, [sp]
 800f014:	b93d      	cbnz	r5, 800f026 <_dtoa_r+0x2e>
 800f016:	2010      	movs	r0, #16
 800f018:	f7fd ff80 	bl	800cf1c <malloc>
 800f01c:	6260      	str	r0, [r4, #36]	; 0x24
 800f01e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f022:	6005      	str	r5, [r0, #0]
 800f024:	60c5      	str	r5, [r0, #12]
 800f026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f028:	6819      	ldr	r1, [r3, #0]
 800f02a:	b151      	cbz	r1, 800f042 <_dtoa_r+0x4a>
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	604a      	str	r2, [r1, #4]
 800f030:	2301      	movs	r3, #1
 800f032:	4093      	lsls	r3, r2
 800f034:	608b      	str	r3, [r1, #8]
 800f036:	4620      	mov	r0, r4
 800f038:	f001 faf6 	bl	8010628 <_Bfree>
 800f03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f03e:	2200      	movs	r2, #0
 800f040:	601a      	str	r2, [r3, #0]
 800f042:	1e3b      	subs	r3, r7, #0
 800f044:	bfbb      	ittet	lt
 800f046:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f04a:	9301      	strlt	r3, [sp, #4]
 800f04c:	2300      	movge	r3, #0
 800f04e:	2201      	movlt	r2, #1
 800f050:	bfac      	ite	ge
 800f052:	f8c8 3000 	strge.w	r3, [r8]
 800f056:	f8c8 2000 	strlt.w	r2, [r8]
 800f05a:	4baf      	ldr	r3, [pc, #700]	; (800f318 <_dtoa_r+0x320>)
 800f05c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f060:	ea33 0308 	bics.w	r3, r3, r8
 800f064:	d114      	bne.n	800f090 <_dtoa_r+0x98>
 800f066:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f068:	f242 730f 	movw	r3, #9999	; 0x270f
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	9b00      	ldr	r3, [sp, #0]
 800f070:	b923      	cbnz	r3, 800f07c <_dtoa_r+0x84>
 800f072:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f076:	2800      	cmp	r0, #0
 800f078:	f000 8542 	beq.w	800fb00 <_dtoa_r+0xb08>
 800f07c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f07e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f32c <_dtoa_r+0x334>
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 8544 	beq.w	800fb10 <_dtoa_r+0xb18>
 800f088:	f10b 0303 	add.w	r3, fp, #3
 800f08c:	f000 bd3e 	b.w	800fb0c <_dtoa_r+0xb14>
 800f090:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f094:	2200      	movs	r2, #0
 800f096:	2300      	movs	r3, #0
 800f098:	4630      	mov	r0, r6
 800f09a:	4639      	mov	r1, r7
 800f09c:	f7f1 fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0a0:	4681      	mov	r9, r0
 800f0a2:	b168      	cbz	r0, 800f0c0 <_dtoa_r+0xc8>
 800f0a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	6013      	str	r3, [r2, #0]
 800f0aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f000 8524 	beq.w	800fafa <_dtoa_r+0xb02>
 800f0b2:	4b9a      	ldr	r3, [pc, #616]	; (800f31c <_dtoa_r+0x324>)
 800f0b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f0b6:	f103 3bff 	add.w	fp, r3, #4294967295
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	f000 bd28 	b.w	800fb10 <_dtoa_r+0xb18>
 800f0c0:	aa14      	add	r2, sp, #80	; 0x50
 800f0c2:	a915      	add	r1, sp, #84	; 0x54
 800f0c4:	ec47 6b10 	vmov	d0, r6, r7
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f001 fdbb 	bl	8010c44 <__d2b>
 800f0ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f0d2:	9004      	str	r0, [sp, #16]
 800f0d4:	2d00      	cmp	r5, #0
 800f0d6:	d07c      	beq.n	800f1d2 <_dtoa_r+0x1da>
 800f0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f0e0:	46b2      	mov	sl, r6
 800f0e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f0e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	4b8b      	ldr	r3, [pc, #556]	; (800f320 <_dtoa_r+0x328>)
 800f0f2:	4650      	mov	r0, sl
 800f0f4:	4659      	mov	r1, fp
 800f0f6:	f7f1 f8d7 	bl	80002a8 <__aeabi_dsub>
 800f0fa:	a381      	add	r3, pc, #516	; (adr r3, 800f300 <_dtoa_r+0x308>)
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	f7f1 fa8a 	bl	8000618 <__aeabi_dmul>
 800f104:	a380      	add	r3, pc, #512	; (adr r3, 800f308 <_dtoa_r+0x310>)
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	f7f1 f8cf 	bl	80002ac <__adddf3>
 800f10e:	4606      	mov	r6, r0
 800f110:	4628      	mov	r0, r5
 800f112:	460f      	mov	r7, r1
 800f114:	f7f1 fa16 	bl	8000544 <__aeabi_i2d>
 800f118:	a37d      	add	r3, pc, #500	; (adr r3, 800f310 <_dtoa_r+0x318>)
 800f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11e:	f7f1 fa7b 	bl	8000618 <__aeabi_dmul>
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	4630      	mov	r0, r6
 800f128:	4639      	mov	r1, r7
 800f12a:	f7f1 f8bf 	bl	80002ac <__adddf3>
 800f12e:	4606      	mov	r6, r0
 800f130:	460f      	mov	r7, r1
 800f132:	f7f1 fd21 	bl	8000b78 <__aeabi_d2iz>
 800f136:	2200      	movs	r2, #0
 800f138:	4682      	mov	sl, r0
 800f13a:	2300      	movs	r3, #0
 800f13c:	4630      	mov	r0, r6
 800f13e:	4639      	mov	r1, r7
 800f140:	f7f1 fcdc 	bl	8000afc <__aeabi_dcmplt>
 800f144:	b148      	cbz	r0, 800f15a <_dtoa_r+0x162>
 800f146:	4650      	mov	r0, sl
 800f148:	f7f1 f9fc 	bl	8000544 <__aeabi_i2d>
 800f14c:	4632      	mov	r2, r6
 800f14e:	463b      	mov	r3, r7
 800f150:	f7f1 fcca 	bl	8000ae8 <__aeabi_dcmpeq>
 800f154:	b908      	cbnz	r0, 800f15a <_dtoa_r+0x162>
 800f156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f15a:	f1ba 0f16 	cmp.w	sl, #22
 800f15e:	d859      	bhi.n	800f214 <_dtoa_r+0x21c>
 800f160:	4970      	ldr	r1, [pc, #448]	; (800f324 <_dtoa_r+0x32c>)
 800f162:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f16e:	f7f1 fce3 	bl	8000b38 <__aeabi_dcmpgt>
 800f172:	2800      	cmp	r0, #0
 800f174:	d050      	beq.n	800f218 <_dtoa_r+0x220>
 800f176:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f17a:	2300      	movs	r3, #0
 800f17c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f17e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f180:	1b5d      	subs	r5, r3, r5
 800f182:	f1b5 0801 	subs.w	r8, r5, #1
 800f186:	bf49      	itett	mi
 800f188:	f1c5 0301 	rsbmi	r3, r5, #1
 800f18c:	2300      	movpl	r3, #0
 800f18e:	9305      	strmi	r3, [sp, #20]
 800f190:	f04f 0800 	movmi.w	r8, #0
 800f194:	bf58      	it	pl
 800f196:	9305      	strpl	r3, [sp, #20]
 800f198:	f1ba 0f00 	cmp.w	sl, #0
 800f19c:	db3e      	blt.n	800f21c <_dtoa_r+0x224>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	44d0      	add	r8, sl
 800f1a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f1a6:	9307      	str	r3, [sp, #28]
 800f1a8:	9b06      	ldr	r3, [sp, #24]
 800f1aa:	2b09      	cmp	r3, #9
 800f1ac:	f200 8090 	bhi.w	800f2d0 <_dtoa_r+0x2d8>
 800f1b0:	2b05      	cmp	r3, #5
 800f1b2:	bfc4      	itt	gt
 800f1b4:	3b04      	subgt	r3, #4
 800f1b6:	9306      	strgt	r3, [sp, #24]
 800f1b8:	9b06      	ldr	r3, [sp, #24]
 800f1ba:	f1a3 0302 	sub.w	r3, r3, #2
 800f1be:	bfcc      	ite	gt
 800f1c0:	2500      	movgt	r5, #0
 800f1c2:	2501      	movle	r5, #1
 800f1c4:	2b03      	cmp	r3, #3
 800f1c6:	f200 808f 	bhi.w	800f2e8 <_dtoa_r+0x2f0>
 800f1ca:	e8df f003 	tbb	[pc, r3]
 800f1ce:	7f7d      	.short	0x7f7d
 800f1d0:	7131      	.short	0x7131
 800f1d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f1d6:	441d      	add	r5, r3
 800f1d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f1dc:	2820      	cmp	r0, #32
 800f1de:	dd13      	ble.n	800f208 <_dtoa_r+0x210>
 800f1e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f1e4:	9b00      	ldr	r3, [sp, #0]
 800f1e6:	fa08 f800 	lsl.w	r8, r8, r0
 800f1ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f1ee:	fa23 f000 	lsr.w	r0, r3, r0
 800f1f2:	ea48 0000 	orr.w	r0, r8, r0
 800f1f6:	f7f1 f995 	bl	8000524 <__aeabi_ui2d>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4682      	mov	sl, r0
 800f1fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f202:	3d01      	subs	r5, #1
 800f204:	9313      	str	r3, [sp, #76]	; 0x4c
 800f206:	e772      	b.n	800f0ee <_dtoa_r+0xf6>
 800f208:	9b00      	ldr	r3, [sp, #0]
 800f20a:	f1c0 0020 	rsb	r0, r0, #32
 800f20e:	fa03 f000 	lsl.w	r0, r3, r0
 800f212:	e7f0      	b.n	800f1f6 <_dtoa_r+0x1fe>
 800f214:	2301      	movs	r3, #1
 800f216:	e7b1      	b.n	800f17c <_dtoa_r+0x184>
 800f218:	900f      	str	r0, [sp, #60]	; 0x3c
 800f21a:	e7b0      	b.n	800f17e <_dtoa_r+0x186>
 800f21c:	9b05      	ldr	r3, [sp, #20]
 800f21e:	eba3 030a 	sub.w	r3, r3, sl
 800f222:	9305      	str	r3, [sp, #20]
 800f224:	f1ca 0300 	rsb	r3, sl, #0
 800f228:	9307      	str	r3, [sp, #28]
 800f22a:	2300      	movs	r3, #0
 800f22c:	930e      	str	r3, [sp, #56]	; 0x38
 800f22e:	e7bb      	b.n	800f1a8 <_dtoa_r+0x1b0>
 800f230:	2301      	movs	r3, #1
 800f232:	930a      	str	r3, [sp, #40]	; 0x28
 800f234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f236:	2b00      	cmp	r3, #0
 800f238:	dd59      	ble.n	800f2ee <_dtoa_r+0x2f6>
 800f23a:	9302      	str	r3, [sp, #8]
 800f23c:	4699      	mov	r9, r3
 800f23e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f240:	2200      	movs	r2, #0
 800f242:	6072      	str	r2, [r6, #4]
 800f244:	2204      	movs	r2, #4
 800f246:	f102 0014 	add.w	r0, r2, #20
 800f24a:	4298      	cmp	r0, r3
 800f24c:	6871      	ldr	r1, [r6, #4]
 800f24e:	d953      	bls.n	800f2f8 <_dtoa_r+0x300>
 800f250:	4620      	mov	r0, r4
 800f252:	f001 f9b5 	bl	80105c0 <_Balloc>
 800f256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f258:	6030      	str	r0, [r6, #0]
 800f25a:	f1b9 0f0e 	cmp.w	r9, #14
 800f25e:	f8d3 b000 	ldr.w	fp, [r3]
 800f262:	f200 80e6 	bhi.w	800f432 <_dtoa_r+0x43a>
 800f266:	2d00      	cmp	r5, #0
 800f268:	f000 80e3 	beq.w	800f432 <_dtoa_r+0x43a>
 800f26c:	ed9d 7b00 	vldr	d7, [sp]
 800f270:	f1ba 0f00 	cmp.w	sl, #0
 800f274:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f278:	dd74      	ble.n	800f364 <_dtoa_r+0x36c>
 800f27a:	4a2a      	ldr	r2, [pc, #168]	; (800f324 <_dtoa_r+0x32c>)
 800f27c:	f00a 030f 	and.w	r3, sl, #15
 800f280:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f284:	ed93 7b00 	vldr	d7, [r3]
 800f288:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f28c:	06f0      	lsls	r0, r6, #27
 800f28e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f292:	d565      	bpl.n	800f360 <_dtoa_r+0x368>
 800f294:	4b24      	ldr	r3, [pc, #144]	; (800f328 <_dtoa_r+0x330>)
 800f296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f29a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f29e:	f7f1 fae5 	bl	800086c <__aeabi_ddiv>
 800f2a2:	e9cd 0100 	strd	r0, r1, [sp]
 800f2a6:	f006 060f 	and.w	r6, r6, #15
 800f2aa:	2503      	movs	r5, #3
 800f2ac:	4f1e      	ldr	r7, [pc, #120]	; (800f328 <_dtoa_r+0x330>)
 800f2ae:	e04c      	b.n	800f34a <_dtoa_r+0x352>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2b6:	4453      	add	r3, sl
 800f2b8:	f103 0901 	add.w	r9, r3, #1
 800f2bc:	9302      	str	r3, [sp, #8]
 800f2be:	464b      	mov	r3, r9
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	bfb8      	it	lt
 800f2c4:	2301      	movlt	r3, #1
 800f2c6:	e7ba      	b.n	800f23e <_dtoa_r+0x246>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	e7b2      	b.n	800f232 <_dtoa_r+0x23a>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e7f0      	b.n	800f2b2 <_dtoa_r+0x2ba>
 800f2d0:	2501      	movs	r5, #1
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	9306      	str	r3, [sp, #24]
 800f2d6:	950a      	str	r5, [sp, #40]	; 0x28
 800f2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2dc:	9302      	str	r3, [sp, #8]
 800f2de:	4699      	mov	r9, r3
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	2312      	movs	r3, #18
 800f2e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f2e6:	e7aa      	b.n	800f23e <_dtoa_r+0x246>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800f2ec:	e7f4      	b.n	800f2d8 <_dtoa_r+0x2e0>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	9302      	str	r3, [sp, #8]
 800f2f2:	4699      	mov	r9, r3
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	e7f5      	b.n	800f2e4 <_dtoa_r+0x2ec>
 800f2f8:	3101      	adds	r1, #1
 800f2fa:	6071      	str	r1, [r6, #4]
 800f2fc:	0052      	lsls	r2, r2, #1
 800f2fe:	e7a2      	b.n	800f246 <_dtoa_r+0x24e>
 800f300:	636f4361 	.word	0x636f4361
 800f304:	3fd287a7 	.word	0x3fd287a7
 800f308:	8b60c8b3 	.word	0x8b60c8b3
 800f30c:	3fc68a28 	.word	0x3fc68a28
 800f310:	509f79fb 	.word	0x509f79fb
 800f314:	3fd34413 	.word	0x3fd34413
 800f318:	7ff00000 	.word	0x7ff00000
 800f31c:	08011611 	.word	0x08011611
 800f320:	3ff80000 	.word	0x3ff80000
 800f324:	08011738 	.word	0x08011738
 800f328:	08011710 	.word	0x08011710
 800f32c:	08011699 	.word	0x08011699
 800f330:	07f1      	lsls	r1, r6, #31
 800f332:	d508      	bpl.n	800f346 <_dtoa_r+0x34e>
 800f334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f33c:	f7f1 f96c 	bl	8000618 <__aeabi_dmul>
 800f340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f344:	3501      	adds	r5, #1
 800f346:	1076      	asrs	r6, r6, #1
 800f348:	3708      	adds	r7, #8
 800f34a:	2e00      	cmp	r6, #0
 800f34c:	d1f0      	bne.n	800f330 <_dtoa_r+0x338>
 800f34e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f352:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f356:	f7f1 fa89 	bl	800086c <__aeabi_ddiv>
 800f35a:	e9cd 0100 	strd	r0, r1, [sp]
 800f35e:	e01a      	b.n	800f396 <_dtoa_r+0x39e>
 800f360:	2502      	movs	r5, #2
 800f362:	e7a3      	b.n	800f2ac <_dtoa_r+0x2b4>
 800f364:	f000 80a0 	beq.w	800f4a8 <_dtoa_r+0x4b0>
 800f368:	f1ca 0600 	rsb	r6, sl, #0
 800f36c:	4b9f      	ldr	r3, [pc, #636]	; (800f5ec <_dtoa_r+0x5f4>)
 800f36e:	4fa0      	ldr	r7, [pc, #640]	; (800f5f0 <_dtoa_r+0x5f8>)
 800f370:	f006 020f 	and.w	r2, r6, #15
 800f374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f380:	f7f1 f94a 	bl	8000618 <__aeabi_dmul>
 800f384:	e9cd 0100 	strd	r0, r1, [sp]
 800f388:	1136      	asrs	r6, r6, #4
 800f38a:	2300      	movs	r3, #0
 800f38c:	2502      	movs	r5, #2
 800f38e:	2e00      	cmp	r6, #0
 800f390:	d17f      	bne.n	800f492 <_dtoa_r+0x49a>
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1e1      	bne.n	800f35a <_dtoa_r+0x362>
 800f396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 8087 	beq.w	800f4ac <_dtoa_r+0x4b4>
 800f39e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	4b93      	ldr	r3, [pc, #588]	; (800f5f4 <_dtoa_r+0x5fc>)
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	f7f1 fba7 	bl	8000afc <__aeabi_dcmplt>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d07c      	beq.n	800f4ac <_dtoa_r+0x4b4>
 800f3b2:	f1b9 0f00 	cmp.w	r9, #0
 800f3b6:	d079      	beq.n	800f4ac <_dtoa_r+0x4b4>
 800f3b8:	9b02      	ldr	r3, [sp, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	dd35      	ble.n	800f42a <_dtoa_r+0x432>
 800f3be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f3c2:	9308      	str	r3, [sp, #32]
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4b8b      	ldr	r3, [pc, #556]	; (800f5f8 <_dtoa_r+0x600>)
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7f1 f924 	bl	8000618 <__aeabi_dmul>
 800f3d0:	e9cd 0100 	strd	r0, r1, [sp]
 800f3d4:	9f02      	ldr	r7, [sp, #8]
 800f3d6:	3501      	adds	r5, #1
 800f3d8:	4628      	mov	r0, r5
 800f3da:	f7f1 f8b3 	bl	8000544 <__aeabi_i2d>
 800f3de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3e2:	f7f1 f919 	bl	8000618 <__aeabi_dmul>
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	4b84      	ldr	r3, [pc, #528]	; (800f5fc <_dtoa_r+0x604>)
 800f3ea:	f7f0 ff5f 	bl	80002ac <__adddf3>
 800f3ee:	4605      	mov	r5, r0
 800f3f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f3f4:	2f00      	cmp	r7, #0
 800f3f6:	d15d      	bne.n	800f4b4 <_dtoa_r+0x4bc>
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	4b81      	ldr	r3, [pc, #516]	; (800f600 <_dtoa_r+0x608>)
 800f3fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f400:	f7f0 ff52 	bl	80002a8 <__aeabi_dsub>
 800f404:	462a      	mov	r2, r5
 800f406:	4633      	mov	r3, r6
 800f408:	e9cd 0100 	strd	r0, r1, [sp]
 800f40c:	f7f1 fb94 	bl	8000b38 <__aeabi_dcmpgt>
 800f410:	2800      	cmp	r0, #0
 800f412:	f040 8288 	bne.w	800f926 <_dtoa_r+0x92e>
 800f416:	462a      	mov	r2, r5
 800f418:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f41c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f420:	f7f1 fb6c 	bl	8000afc <__aeabi_dcmplt>
 800f424:	2800      	cmp	r0, #0
 800f426:	f040 827c 	bne.w	800f922 <_dtoa_r+0x92a>
 800f42a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f42e:	e9cd 2300 	strd	r2, r3, [sp]
 800f432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f434:	2b00      	cmp	r3, #0
 800f436:	f2c0 8150 	blt.w	800f6da <_dtoa_r+0x6e2>
 800f43a:	f1ba 0f0e 	cmp.w	sl, #14
 800f43e:	f300 814c 	bgt.w	800f6da <_dtoa_r+0x6e2>
 800f442:	4b6a      	ldr	r3, [pc, #424]	; (800f5ec <_dtoa_r+0x5f4>)
 800f444:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f448:	ed93 7b00 	vldr	d7, [r3]
 800f44c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f44e:	2b00      	cmp	r3, #0
 800f450:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f454:	f280 80d8 	bge.w	800f608 <_dtoa_r+0x610>
 800f458:	f1b9 0f00 	cmp.w	r9, #0
 800f45c:	f300 80d4 	bgt.w	800f608 <_dtoa_r+0x610>
 800f460:	f040 825e 	bne.w	800f920 <_dtoa_r+0x928>
 800f464:	2200      	movs	r2, #0
 800f466:	4b66      	ldr	r3, [pc, #408]	; (800f600 <_dtoa_r+0x608>)
 800f468:	ec51 0b17 	vmov	r0, r1, d7
 800f46c:	f7f1 f8d4 	bl	8000618 <__aeabi_dmul>
 800f470:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f474:	f7f1 fb56 	bl	8000b24 <__aeabi_dcmpge>
 800f478:	464f      	mov	r7, r9
 800f47a:	464e      	mov	r6, r9
 800f47c:	2800      	cmp	r0, #0
 800f47e:	f040 8234 	bne.w	800f8ea <_dtoa_r+0x8f2>
 800f482:	2331      	movs	r3, #49	; 0x31
 800f484:	f10b 0501 	add.w	r5, fp, #1
 800f488:	f88b 3000 	strb.w	r3, [fp]
 800f48c:	f10a 0a01 	add.w	sl, sl, #1
 800f490:	e22f      	b.n	800f8f2 <_dtoa_r+0x8fa>
 800f492:	07f2      	lsls	r2, r6, #31
 800f494:	d505      	bpl.n	800f4a2 <_dtoa_r+0x4aa>
 800f496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f49a:	f7f1 f8bd 	bl	8000618 <__aeabi_dmul>
 800f49e:	3501      	adds	r5, #1
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	1076      	asrs	r6, r6, #1
 800f4a4:	3708      	adds	r7, #8
 800f4a6:	e772      	b.n	800f38e <_dtoa_r+0x396>
 800f4a8:	2502      	movs	r5, #2
 800f4aa:	e774      	b.n	800f396 <_dtoa_r+0x39e>
 800f4ac:	f8cd a020 	str.w	sl, [sp, #32]
 800f4b0:	464f      	mov	r7, r9
 800f4b2:	e791      	b.n	800f3d8 <_dtoa_r+0x3e0>
 800f4b4:	4b4d      	ldr	r3, [pc, #308]	; (800f5ec <_dtoa_r+0x5f4>)
 800f4b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d047      	beq.n	800f554 <_dtoa_r+0x55c>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	494e      	ldr	r1, [pc, #312]	; (800f604 <_dtoa_r+0x60c>)
 800f4cc:	f7f1 f9ce 	bl	800086c <__aeabi_ddiv>
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4633      	mov	r3, r6
 800f4d4:	f7f0 fee8 	bl	80002a8 <__aeabi_dsub>
 800f4d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f4dc:	465d      	mov	r5, fp
 800f4de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4e2:	f7f1 fb49 	bl	8000b78 <__aeabi_d2iz>
 800f4e6:	4606      	mov	r6, r0
 800f4e8:	f7f1 f82c 	bl	8000544 <__aeabi_i2d>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4f4:	f7f0 fed8 	bl	80002a8 <__aeabi_dsub>
 800f4f8:	3630      	adds	r6, #48	; 0x30
 800f4fa:	f805 6b01 	strb.w	r6, [r5], #1
 800f4fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f502:	e9cd 0100 	strd	r0, r1, [sp]
 800f506:	f7f1 faf9 	bl	8000afc <__aeabi_dcmplt>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d163      	bne.n	800f5d6 <_dtoa_r+0x5de>
 800f50e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f512:	2000      	movs	r0, #0
 800f514:	4937      	ldr	r1, [pc, #220]	; (800f5f4 <_dtoa_r+0x5fc>)
 800f516:	f7f0 fec7 	bl	80002a8 <__aeabi_dsub>
 800f51a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f51e:	f7f1 faed 	bl	8000afc <__aeabi_dcmplt>
 800f522:	2800      	cmp	r0, #0
 800f524:	f040 80b7 	bne.w	800f696 <_dtoa_r+0x69e>
 800f528:	eba5 030b 	sub.w	r3, r5, fp
 800f52c:	429f      	cmp	r7, r3
 800f52e:	f77f af7c 	ble.w	800f42a <_dtoa_r+0x432>
 800f532:	2200      	movs	r2, #0
 800f534:	4b30      	ldr	r3, [pc, #192]	; (800f5f8 <_dtoa_r+0x600>)
 800f536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f53a:	f7f1 f86d 	bl	8000618 <__aeabi_dmul>
 800f53e:	2200      	movs	r2, #0
 800f540:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f544:	4b2c      	ldr	r3, [pc, #176]	; (800f5f8 <_dtoa_r+0x600>)
 800f546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f54a:	f7f1 f865 	bl	8000618 <__aeabi_dmul>
 800f54e:	e9cd 0100 	strd	r0, r1, [sp]
 800f552:	e7c4      	b.n	800f4de <_dtoa_r+0x4e6>
 800f554:	462a      	mov	r2, r5
 800f556:	4633      	mov	r3, r6
 800f558:	f7f1 f85e 	bl	8000618 <__aeabi_dmul>
 800f55c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f560:	eb0b 0507 	add.w	r5, fp, r7
 800f564:	465e      	mov	r6, fp
 800f566:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f56a:	f7f1 fb05 	bl	8000b78 <__aeabi_d2iz>
 800f56e:	4607      	mov	r7, r0
 800f570:	f7f0 ffe8 	bl	8000544 <__aeabi_i2d>
 800f574:	3730      	adds	r7, #48	; 0x30
 800f576:	4602      	mov	r2, r0
 800f578:	460b      	mov	r3, r1
 800f57a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f57e:	f7f0 fe93 	bl	80002a8 <__aeabi_dsub>
 800f582:	f806 7b01 	strb.w	r7, [r6], #1
 800f586:	42ae      	cmp	r6, r5
 800f588:	e9cd 0100 	strd	r0, r1, [sp]
 800f58c:	f04f 0200 	mov.w	r2, #0
 800f590:	d126      	bne.n	800f5e0 <_dtoa_r+0x5e8>
 800f592:	4b1c      	ldr	r3, [pc, #112]	; (800f604 <_dtoa_r+0x60c>)
 800f594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f598:	f7f0 fe88 	bl	80002ac <__adddf3>
 800f59c:	4602      	mov	r2, r0
 800f59e:	460b      	mov	r3, r1
 800f5a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5a4:	f7f1 fac8 	bl	8000b38 <__aeabi_dcmpgt>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d174      	bne.n	800f696 <_dtoa_r+0x69e>
 800f5ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	4914      	ldr	r1, [pc, #80]	; (800f604 <_dtoa_r+0x60c>)
 800f5b4:	f7f0 fe78 	bl	80002a8 <__aeabi_dsub>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5c0:	f7f1 fa9c 	bl	8000afc <__aeabi_dcmplt>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	f43f af30 	beq.w	800f42a <_dtoa_r+0x432>
 800f5ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5ce:	2b30      	cmp	r3, #48	; 0x30
 800f5d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800f5d4:	d002      	beq.n	800f5dc <_dtoa_r+0x5e4>
 800f5d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f5da:	e04a      	b.n	800f672 <_dtoa_r+0x67a>
 800f5dc:	4615      	mov	r5, r2
 800f5de:	e7f4      	b.n	800f5ca <_dtoa_r+0x5d2>
 800f5e0:	4b05      	ldr	r3, [pc, #20]	; (800f5f8 <_dtoa_r+0x600>)
 800f5e2:	f7f1 f819 	bl	8000618 <__aeabi_dmul>
 800f5e6:	e9cd 0100 	strd	r0, r1, [sp]
 800f5ea:	e7bc      	b.n	800f566 <_dtoa_r+0x56e>
 800f5ec:	08011738 	.word	0x08011738
 800f5f0:	08011710 	.word	0x08011710
 800f5f4:	3ff00000 	.word	0x3ff00000
 800f5f8:	40240000 	.word	0x40240000
 800f5fc:	401c0000 	.word	0x401c0000
 800f600:	40140000 	.word	0x40140000
 800f604:	3fe00000 	.word	0x3fe00000
 800f608:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f60c:	465d      	mov	r5, fp
 800f60e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f612:	4630      	mov	r0, r6
 800f614:	4639      	mov	r1, r7
 800f616:	f7f1 f929 	bl	800086c <__aeabi_ddiv>
 800f61a:	f7f1 faad 	bl	8000b78 <__aeabi_d2iz>
 800f61e:	4680      	mov	r8, r0
 800f620:	f7f0 ff90 	bl	8000544 <__aeabi_i2d>
 800f624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f628:	f7f0 fff6 	bl	8000618 <__aeabi_dmul>
 800f62c:	4602      	mov	r2, r0
 800f62e:	460b      	mov	r3, r1
 800f630:	4630      	mov	r0, r6
 800f632:	4639      	mov	r1, r7
 800f634:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f638:	f7f0 fe36 	bl	80002a8 <__aeabi_dsub>
 800f63c:	f805 6b01 	strb.w	r6, [r5], #1
 800f640:	eba5 060b 	sub.w	r6, r5, fp
 800f644:	45b1      	cmp	r9, r6
 800f646:	4602      	mov	r2, r0
 800f648:	460b      	mov	r3, r1
 800f64a:	d139      	bne.n	800f6c0 <_dtoa_r+0x6c8>
 800f64c:	f7f0 fe2e 	bl	80002ac <__adddf3>
 800f650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f654:	4606      	mov	r6, r0
 800f656:	460f      	mov	r7, r1
 800f658:	f7f1 fa6e 	bl	8000b38 <__aeabi_dcmpgt>
 800f65c:	b9c8      	cbnz	r0, 800f692 <_dtoa_r+0x69a>
 800f65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f662:	4630      	mov	r0, r6
 800f664:	4639      	mov	r1, r7
 800f666:	f7f1 fa3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f66a:	b110      	cbz	r0, 800f672 <_dtoa_r+0x67a>
 800f66c:	f018 0f01 	tst.w	r8, #1
 800f670:	d10f      	bne.n	800f692 <_dtoa_r+0x69a>
 800f672:	9904      	ldr	r1, [sp, #16]
 800f674:	4620      	mov	r0, r4
 800f676:	f000 ffd7 	bl	8010628 <_Bfree>
 800f67a:	2300      	movs	r3, #0
 800f67c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f67e:	702b      	strb	r3, [r5, #0]
 800f680:	f10a 0301 	add.w	r3, sl, #1
 800f684:	6013      	str	r3, [r2, #0]
 800f686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 8241 	beq.w	800fb10 <_dtoa_r+0xb18>
 800f68e:	601d      	str	r5, [r3, #0]
 800f690:	e23e      	b.n	800fb10 <_dtoa_r+0xb18>
 800f692:	f8cd a020 	str.w	sl, [sp, #32]
 800f696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f69a:	2a39      	cmp	r2, #57	; 0x39
 800f69c:	f105 33ff 	add.w	r3, r5, #4294967295
 800f6a0:	d108      	bne.n	800f6b4 <_dtoa_r+0x6bc>
 800f6a2:	459b      	cmp	fp, r3
 800f6a4:	d10a      	bne.n	800f6bc <_dtoa_r+0x6c4>
 800f6a6:	9b08      	ldr	r3, [sp, #32]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	9308      	str	r3, [sp, #32]
 800f6ac:	2330      	movs	r3, #48	; 0x30
 800f6ae:	f88b 3000 	strb.w	r3, [fp]
 800f6b2:	465b      	mov	r3, fp
 800f6b4:	781a      	ldrb	r2, [r3, #0]
 800f6b6:	3201      	adds	r2, #1
 800f6b8:	701a      	strb	r2, [r3, #0]
 800f6ba:	e78c      	b.n	800f5d6 <_dtoa_r+0x5de>
 800f6bc:	461d      	mov	r5, r3
 800f6be:	e7ea      	b.n	800f696 <_dtoa_r+0x69e>
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	4b9b      	ldr	r3, [pc, #620]	; (800f930 <_dtoa_r+0x938>)
 800f6c4:	f7f0 ffa8 	bl	8000618 <__aeabi_dmul>
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	460f      	mov	r7, r1
 800f6d0:	f7f1 fa0a 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d09a      	beq.n	800f60e <_dtoa_r+0x616>
 800f6d8:	e7cb      	b.n	800f672 <_dtoa_r+0x67a>
 800f6da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6dc:	2a00      	cmp	r2, #0
 800f6de:	f000 808b 	beq.w	800f7f8 <_dtoa_r+0x800>
 800f6e2:	9a06      	ldr	r2, [sp, #24]
 800f6e4:	2a01      	cmp	r2, #1
 800f6e6:	dc6e      	bgt.n	800f7c6 <_dtoa_r+0x7ce>
 800f6e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f6ea:	2a00      	cmp	r2, #0
 800f6ec:	d067      	beq.n	800f7be <_dtoa_r+0x7c6>
 800f6ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f6f2:	9f07      	ldr	r7, [sp, #28]
 800f6f4:	9d05      	ldr	r5, [sp, #20]
 800f6f6:	9a05      	ldr	r2, [sp, #20]
 800f6f8:	2101      	movs	r1, #1
 800f6fa:	441a      	add	r2, r3
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	9205      	str	r2, [sp, #20]
 800f700:	4498      	add	r8, r3
 800f702:	f001 f86f 	bl	80107e4 <__i2b>
 800f706:	4606      	mov	r6, r0
 800f708:	2d00      	cmp	r5, #0
 800f70a:	dd0c      	ble.n	800f726 <_dtoa_r+0x72e>
 800f70c:	f1b8 0f00 	cmp.w	r8, #0
 800f710:	dd09      	ble.n	800f726 <_dtoa_r+0x72e>
 800f712:	4545      	cmp	r5, r8
 800f714:	9a05      	ldr	r2, [sp, #20]
 800f716:	462b      	mov	r3, r5
 800f718:	bfa8      	it	ge
 800f71a:	4643      	movge	r3, r8
 800f71c:	1ad2      	subs	r2, r2, r3
 800f71e:	9205      	str	r2, [sp, #20]
 800f720:	1aed      	subs	r5, r5, r3
 800f722:	eba8 0803 	sub.w	r8, r8, r3
 800f726:	9b07      	ldr	r3, [sp, #28]
 800f728:	b1eb      	cbz	r3, 800f766 <_dtoa_r+0x76e>
 800f72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d067      	beq.n	800f800 <_dtoa_r+0x808>
 800f730:	b18f      	cbz	r7, 800f756 <_dtoa_r+0x75e>
 800f732:	4631      	mov	r1, r6
 800f734:	463a      	mov	r2, r7
 800f736:	4620      	mov	r0, r4
 800f738:	f001 f8f4 	bl	8010924 <__pow5mult>
 800f73c:	9a04      	ldr	r2, [sp, #16]
 800f73e:	4601      	mov	r1, r0
 800f740:	4606      	mov	r6, r0
 800f742:	4620      	mov	r0, r4
 800f744:	f001 f857 	bl	80107f6 <__multiply>
 800f748:	9904      	ldr	r1, [sp, #16]
 800f74a:	9008      	str	r0, [sp, #32]
 800f74c:	4620      	mov	r0, r4
 800f74e:	f000 ff6b 	bl	8010628 <_Bfree>
 800f752:	9b08      	ldr	r3, [sp, #32]
 800f754:	9304      	str	r3, [sp, #16]
 800f756:	9b07      	ldr	r3, [sp, #28]
 800f758:	1bda      	subs	r2, r3, r7
 800f75a:	d004      	beq.n	800f766 <_dtoa_r+0x76e>
 800f75c:	9904      	ldr	r1, [sp, #16]
 800f75e:	4620      	mov	r0, r4
 800f760:	f001 f8e0 	bl	8010924 <__pow5mult>
 800f764:	9004      	str	r0, [sp, #16]
 800f766:	2101      	movs	r1, #1
 800f768:	4620      	mov	r0, r4
 800f76a:	f001 f83b 	bl	80107e4 <__i2b>
 800f76e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f770:	4607      	mov	r7, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	f000 81d0 	beq.w	800fb18 <_dtoa_r+0xb20>
 800f778:	461a      	mov	r2, r3
 800f77a:	4601      	mov	r1, r0
 800f77c:	4620      	mov	r0, r4
 800f77e:	f001 f8d1 	bl	8010924 <__pow5mult>
 800f782:	9b06      	ldr	r3, [sp, #24]
 800f784:	2b01      	cmp	r3, #1
 800f786:	4607      	mov	r7, r0
 800f788:	dc40      	bgt.n	800f80c <_dtoa_r+0x814>
 800f78a:	9b00      	ldr	r3, [sp, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d139      	bne.n	800f804 <_dtoa_r+0x80c>
 800f790:	9b01      	ldr	r3, [sp, #4]
 800f792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f796:	2b00      	cmp	r3, #0
 800f798:	d136      	bne.n	800f808 <_dtoa_r+0x810>
 800f79a:	9b01      	ldr	r3, [sp, #4]
 800f79c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7a0:	0d1b      	lsrs	r3, r3, #20
 800f7a2:	051b      	lsls	r3, r3, #20
 800f7a4:	b12b      	cbz	r3, 800f7b2 <_dtoa_r+0x7ba>
 800f7a6:	9b05      	ldr	r3, [sp, #20]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	9305      	str	r3, [sp, #20]
 800f7ac:	f108 0801 	add.w	r8, r8, #1
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	9307      	str	r3, [sp, #28]
 800f7b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d12a      	bne.n	800f810 <_dtoa_r+0x818>
 800f7ba:	2001      	movs	r0, #1
 800f7bc:	e030      	b.n	800f820 <_dtoa_r+0x828>
 800f7be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f7c4:	e795      	b.n	800f6f2 <_dtoa_r+0x6fa>
 800f7c6:	9b07      	ldr	r3, [sp, #28]
 800f7c8:	f109 37ff 	add.w	r7, r9, #4294967295
 800f7cc:	42bb      	cmp	r3, r7
 800f7ce:	bfbf      	itttt	lt
 800f7d0:	9b07      	ldrlt	r3, [sp, #28]
 800f7d2:	9707      	strlt	r7, [sp, #28]
 800f7d4:	1afa      	sublt	r2, r7, r3
 800f7d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f7d8:	bfbb      	ittet	lt
 800f7da:	189b      	addlt	r3, r3, r2
 800f7dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f7de:	1bdf      	subge	r7, r3, r7
 800f7e0:	2700      	movlt	r7, #0
 800f7e2:	f1b9 0f00 	cmp.w	r9, #0
 800f7e6:	bfb5      	itete	lt
 800f7e8:	9b05      	ldrlt	r3, [sp, #20]
 800f7ea:	9d05      	ldrge	r5, [sp, #20]
 800f7ec:	eba3 0509 	sublt.w	r5, r3, r9
 800f7f0:	464b      	movge	r3, r9
 800f7f2:	bfb8      	it	lt
 800f7f4:	2300      	movlt	r3, #0
 800f7f6:	e77e      	b.n	800f6f6 <_dtoa_r+0x6fe>
 800f7f8:	9f07      	ldr	r7, [sp, #28]
 800f7fa:	9d05      	ldr	r5, [sp, #20]
 800f7fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f7fe:	e783      	b.n	800f708 <_dtoa_r+0x710>
 800f800:	9a07      	ldr	r2, [sp, #28]
 800f802:	e7ab      	b.n	800f75c <_dtoa_r+0x764>
 800f804:	2300      	movs	r3, #0
 800f806:	e7d4      	b.n	800f7b2 <_dtoa_r+0x7ba>
 800f808:	9b00      	ldr	r3, [sp, #0]
 800f80a:	e7d2      	b.n	800f7b2 <_dtoa_r+0x7ba>
 800f80c:	2300      	movs	r3, #0
 800f80e:	9307      	str	r3, [sp, #28]
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f816:	6918      	ldr	r0, [r3, #16]
 800f818:	f000 ff96 	bl	8010748 <__hi0bits>
 800f81c:	f1c0 0020 	rsb	r0, r0, #32
 800f820:	4440      	add	r0, r8
 800f822:	f010 001f 	ands.w	r0, r0, #31
 800f826:	d047      	beq.n	800f8b8 <_dtoa_r+0x8c0>
 800f828:	f1c0 0320 	rsb	r3, r0, #32
 800f82c:	2b04      	cmp	r3, #4
 800f82e:	dd3b      	ble.n	800f8a8 <_dtoa_r+0x8b0>
 800f830:	9b05      	ldr	r3, [sp, #20]
 800f832:	f1c0 001c 	rsb	r0, r0, #28
 800f836:	4403      	add	r3, r0
 800f838:	9305      	str	r3, [sp, #20]
 800f83a:	4405      	add	r5, r0
 800f83c:	4480      	add	r8, r0
 800f83e:	9b05      	ldr	r3, [sp, #20]
 800f840:	2b00      	cmp	r3, #0
 800f842:	dd05      	ble.n	800f850 <_dtoa_r+0x858>
 800f844:	461a      	mov	r2, r3
 800f846:	9904      	ldr	r1, [sp, #16]
 800f848:	4620      	mov	r0, r4
 800f84a:	f001 f8b9 	bl	80109c0 <__lshift>
 800f84e:	9004      	str	r0, [sp, #16]
 800f850:	f1b8 0f00 	cmp.w	r8, #0
 800f854:	dd05      	ble.n	800f862 <_dtoa_r+0x86a>
 800f856:	4639      	mov	r1, r7
 800f858:	4642      	mov	r2, r8
 800f85a:	4620      	mov	r0, r4
 800f85c:	f001 f8b0 	bl	80109c0 <__lshift>
 800f860:	4607      	mov	r7, r0
 800f862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f864:	b353      	cbz	r3, 800f8bc <_dtoa_r+0x8c4>
 800f866:	4639      	mov	r1, r7
 800f868:	9804      	ldr	r0, [sp, #16]
 800f86a:	f001 f8fd 	bl	8010a68 <__mcmp>
 800f86e:	2800      	cmp	r0, #0
 800f870:	da24      	bge.n	800f8bc <_dtoa_r+0x8c4>
 800f872:	2300      	movs	r3, #0
 800f874:	220a      	movs	r2, #10
 800f876:	9904      	ldr	r1, [sp, #16]
 800f878:	4620      	mov	r0, r4
 800f87a:	f000 feec 	bl	8010656 <__multadd>
 800f87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f880:	9004      	str	r0, [sp, #16]
 800f882:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f886:	2b00      	cmp	r3, #0
 800f888:	f000 814d 	beq.w	800fb26 <_dtoa_r+0xb2e>
 800f88c:	2300      	movs	r3, #0
 800f88e:	4631      	mov	r1, r6
 800f890:	220a      	movs	r2, #10
 800f892:	4620      	mov	r0, r4
 800f894:	f000 fedf 	bl	8010656 <__multadd>
 800f898:	9b02      	ldr	r3, [sp, #8]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	4606      	mov	r6, r0
 800f89e:	dc4f      	bgt.n	800f940 <_dtoa_r+0x948>
 800f8a0:	9b06      	ldr	r3, [sp, #24]
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	dd4c      	ble.n	800f940 <_dtoa_r+0x948>
 800f8a6:	e011      	b.n	800f8cc <_dtoa_r+0x8d4>
 800f8a8:	d0c9      	beq.n	800f83e <_dtoa_r+0x846>
 800f8aa:	9a05      	ldr	r2, [sp, #20]
 800f8ac:	331c      	adds	r3, #28
 800f8ae:	441a      	add	r2, r3
 800f8b0:	9205      	str	r2, [sp, #20]
 800f8b2:	441d      	add	r5, r3
 800f8b4:	4498      	add	r8, r3
 800f8b6:	e7c2      	b.n	800f83e <_dtoa_r+0x846>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	e7f6      	b.n	800f8aa <_dtoa_r+0x8b2>
 800f8bc:	f1b9 0f00 	cmp.w	r9, #0
 800f8c0:	dc38      	bgt.n	800f934 <_dtoa_r+0x93c>
 800f8c2:	9b06      	ldr	r3, [sp, #24]
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	dd35      	ble.n	800f934 <_dtoa_r+0x93c>
 800f8c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f8cc:	9b02      	ldr	r3, [sp, #8]
 800f8ce:	b963      	cbnz	r3, 800f8ea <_dtoa_r+0x8f2>
 800f8d0:	4639      	mov	r1, r7
 800f8d2:	2205      	movs	r2, #5
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f000 febe 	bl	8010656 <__multadd>
 800f8da:	4601      	mov	r1, r0
 800f8dc:	4607      	mov	r7, r0
 800f8de:	9804      	ldr	r0, [sp, #16]
 800f8e0:	f001 f8c2 	bl	8010a68 <__mcmp>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	f73f adcc 	bgt.w	800f482 <_dtoa_r+0x48a>
 800f8ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8ec:	465d      	mov	r5, fp
 800f8ee:	ea6f 0a03 	mvn.w	sl, r3
 800f8f2:	f04f 0900 	mov.w	r9, #0
 800f8f6:	4639      	mov	r1, r7
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f000 fe95 	bl	8010628 <_Bfree>
 800f8fe:	2e00      	cmp	r6, #0
 800f900:	f43f aeb7 	beq.w	800f672 <_dtoa_r+0x67a>
 800f904:	f1b9 0f00 	cmp.w	r9, #0
 800f908:	d005      	beq.n	800f916 <_dtoa_r+0x91e>
 800f90a:	45b1      	cmp	r9, r6
 800f90c:	d003      	beq.n	800f916 <_dtoa_r+0x91e>
 800f90e:	4649      	mov	r1, r9
 800f910:	4620      	mov	r0, r4
 800f912:	f000 fe89 	bl	8010628 <_Bfree>
 800f916:	4631      	mov	r1, r6
 800f918:	4620      	mov	r0, r4
 800f91a:	f000 fe85 	bl	8010628 <_Bfree>
 800f91e:	e6a8      	b.n	800f672 <_dtoa_r+0x67a>
 800f920:	2700      	movs	r7, #0
 800f922:	463e      	mov	r6, r7
 800f924:	e7e1      	b.n	800f8ea <_dtoa_r+0x8f2>
 800f926:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f92a:	463e      	mov	r6, r7
 800f92c:	e5a9      	b.n	800f482 <_dtoa_r+0x48a>
 800f92e:	bf00      	nop
 800f930:	40240000 	.word	0x40240000
 800f934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f936:	f8cd 9008 	str.w	r9, [sp, #8]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 80fa 	beq.w	800fb34 <_dtoa_r+0xb3c>
 800f940:	2d00      	cmp	r5, #0
 800f942:	dd05      	ble.n	800f950 <_dtoa_r+0x958>
 800f944:	4631      	mov	r1, r6
 800f946:	462a      	mov	r2, r5
 800f948:	4620      	mov	r0, r4
 800f94a:	f001 f839 	bl	80109c0 <__lshift>
 800f94e:	4606      	mov	r6, r0
 800f950:	9b07      	ldr	r3, [sp, #28]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d04c      	beq.n	800f9f0 <_dtoa_r+0x9f8>
 800f956:	6871      	ldr	r1, [r6, #4]
 800f958:	4620      	mov	r0, r4
 800f95a:	f000 fe31 	bl	80105c0 <_Balloc>
 800f95e:	6932      	ldr	r2, [r6, #16]
 800f960:	3202      	adds	r2, #2
 800f962:	4605      	mov	r5, r0
 800f964:	0092      	lsls	r2, r2, #2
 800f966:	f106 010c 	add.w	r1, r6, #12
 800f96a:	300c      	adds	r0, #12
 800f96c:	f7fd fae6 	bl	800cf3c <memcpy>
 800f970:	2201      	movs	r2, #1
 800f972:	4629      	mov	r1, r5
 800f974:	4620      	mov	r0, r4
 800f976:	f001 f823 	bl	80109c0 <__lshift>
 800f97a:	9b00      	ldr	r3, [sp, #0]
 800f97c:	f8cd b014 	str.w	fp, [sp, #20]
 800f980:	f003 0301 	and.w	r3, r3, #1
 800f984:	46b1      	mov	r9, r6
 800f986:	9307      	str	r3, [sp, #28]
 800f988:	4606      	mov	r6, r0
 800f98a:	4639      	mov	r1, r7
 800f98c:	9804      	ldr	r0, [sp, #16]
 800f98e:	f7ff faa5 	bl	800eedc <quorem>
 800f992:	4649      	mov	r1, r9
 800f994:	4605      	mov	r5, r0
 800f996:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f99a:	9804      	ldr	r0, [sp, #16]
 800f99c:	f001 f864 	bl	8010a68 <__mcmp>
 800f9a0:	4632      	mov	r2, r6
 800f9a2:	9000      	str	r0, [sp, #0]
 800f9a4:	4639      	mov	r1, r7
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f001 f878 	bl	8010a9c <__mdiff>
 800f9ac:	68c3      	ldr	r3, [r0, #12]
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	bb03      	cbnz	r3, 800f9f4 <_dtoa_r+0x9fc>
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	9008      	str	r0, [sp, #32]
 800f9b6:	9804      	ldr	r0, [sp, #16]
 800f9b8:	f001 f856 	bl	8010a68 <__mcmp>
 800f9bc:	9a08      	ldr	r2, [sp, #32]
 800f9be:	4603      	mov	r3, r0
 800f9c0:	4611      	mov	r1, r2
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	9308      	str	r3, [sp, #32]
 800f9c6:	f000 fe2f 	bl	8010628 <_Bfree>
 800f9ca:	9b08      	ldr	r3, [sp, #32]
 800f9cc:	b9a3      	cbnz	r3, 800f9f8 <_dtoa_r+0xa00>
 800f9ce:	9a06      	ldr	r2, [sp, #24]
 800f9d0:	b992      	cbnz	r2, 800f9f8 <_dtoa_r+0xa00>
 800f9d2:	9a07      	ldr	r2, [sp, #28]
 800f9d4:	b982      	cbnz	r2, 800f9f8 <_dtoa_r+0xa00>
 800f9d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f9da:	d029      	beq.n	800fa30 <_dtoa_r+0xa38>
 800f9dc:	9b00      	ldr	r3, [sp, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	dd01      	ble.n	800f9e6 <_dtoa_r+0x9ee>
 800f9e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f9e6:	9b05      	ldr	r3, [sp, #20]
 800f9e8:	1c5d      	adds	r5, r3, #1
 800f9ea:	f883 8000 	strb.w	r8, [r3]
 800f9ee:	e782      	b.n	800f8f6 <_dtoa_r+0x8fe>
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	e7c2      	b.n	800f97a <_dtoa_r+0x982>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e7e3      	b.n	800f9c0 <_dtoa_r+0x9c8>
 800f9f8:	9a00      	ldr	r2, [sp, #0]
 800f9fa:	2a00      	cmp	r2, #0
 800f9fc:	db04      	blt.n	800fa08 <_dtoa_r+0xa10>
 800f9fe:	d125      	bne.n	800fa4c <_dtoa_r+0xa54>
 800fa00:	9a06      	ldr	r2, [sp, #24]
 800fa02:	bb1a      	cbnz	r2, 800fa4c <_dtoa_r+0xa54>
 800fa04:	9a07      	ldr	r2, [sp, #28]
 800fa06:	bb0a      	cbnz	r2, 800fa4c <_dtoa_r+0xa54>
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	ddec      	ble.n	800f9e6 <_dtoa_r+0x9ee>
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	9904      	ldr	r1, [sp, #16]
 800fa10:	4620      	mov	r0, r4
 800fa12:	f000 ffd5 	bl	80109c0 <__lshift>
 800fa16:	4639      	mov	r1, r7
 800fa18:	9004      	str	r0, [sp, #16]
 800fa1a:	f001 f825 	bl	8010a68 <__mcmp>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	dc03      	bgt.n	800fa2a <_dtoa_r+0xa32>
 800fa22:	d1e0      	bne.n	800f9e6 <_dtoa_r+0x9ee>
 800fa24:	f018 0f01 	tst.w	r8, #1
 800fa28:	d0dd      	beq.n	800f9e6 <_dtoa_r+0x9ee>
 800fa2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fa2e:	d1d8      	bne.n	800f9e2 <_dtoa_r+0x9ea>
 800fa30:	9b05      	ldr	r3, [sp, #20]
 800fa32:	9a05      	ldr	r2, [sp, #20]
 800fa34:	1c5d      	adds	r5, r3, #1
 800fa36:	2339      	movs	r3, #57	; 0x39
 800fa38:	7013      	strb	r3, [r2, #0]
 800fa3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa3e:	2b39      	cmp	r3, #57	; 0x39
 800fa40:	f105 32ff 	add.w	r2, r5, #4294967295
 800fa44:	d04f      	beq.n	800fae6 <_dtoa_r+0xaee>
 800fa46:	3301      	adds	r3, #1
 800fa48:	7013      	strb	r3, [r2, #0]
 800fa4a:	e754      	b.n	800f8f6 <_dtoa_r+0x8fe>
 800fa4c:	9a05      	ldr	r2, [sp, #20]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f102 0501 	add.w	r5, r2, #1
 800fa54:	dd06      	ble.n	800fa64 <_dtoa_r+0xa6c>
 800fa56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fa5a:	d0e9      	beq.n	800fa30 <_dtoa_r+0xa38>
 800fa5c:	f108 0801 	add.w	r8, r8, #1
 800fa60:	9b05      	ldr	r3, [sp, #20]
 800fa62:	e7c2      	b.n	800f9ea <_dtoa_r+0x9f2>
 800fa64:	9a02      	ldr	r2, [sp, #8]
 800fa66:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fa6a:	eba5 030b 	sub.w	r3, r5, fp
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d021      	beq.n	800fab6 <_dtoa_r+0xabe>
 800fa72:	2300      	movs	r3, #0
 800fa74:	220a      	movs	r2, #10
 800fa76:	9904      	ldr	r1, [sp, #16]
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f000 fdec 	bl	8010656 <__multadd>
 800fa7e:	45b1      	cmp	r9, r6
 800fa80:	9004      	str	r0, [sp, #16]
 800fa82:	f04f 0300 	mov.w	r3, #0
 800fa86:	f04f 020a 	mov.w	r2, #10
 800fa8a:	4649      	mov	r1, r9
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	d105      	bne.n	800fa9c <_dtoa_r+0xaa4>
 800fa90:	f000 fde1 	bl	8010656 <__multadd>
 800fa94:	4681      	mov	r9, r0
 800fa96:	4606      	mov	r6, r0
 800fa98:	9505      	str	r5, [sp, #20]
 800fa9a:	e776      	b.n	800f98a <_dtoa_r+0x992>
 800fa9c:	f000 fddb 	bl	8010656 <__multadd>
 800faa0:	4631      	mov	r1, r6
 800faa2:	4681      	mov	r9, r0
 800faa4:	2300      	movs	r3, #0
 800faa6:	220a      	movs	r2, #10
 800faa8:	4620      	mov	r0, r4
 800faaa:	f000 fdd4 	bl	8010656 <__multadd>
 800faae:	4606      	mov	r6, r0
 800fab0:	e7f2      	b.n	800fa98 <_dtoa_r+0xaa0>
 800fab2:	f04f 0900 	mov.w	r9, #0
 800fab6:	2201      	movs	r2, #1
 800fab8:	9904      	ldr	r1, [sp, #16]
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 ff80 	bl	80109c0 <__lshift>
 800fac0:	4639      	mov	r1, r7
 800fac2:	9004      	str	r0, [sp, #16]
 800fac4:	f000 ffd0 	bl	8010a68 <__mcmp>
 800fac8:	2800      	cmp	r0, #0
 800faca:	dcb6      	bgt.n	800fa3a <_dtoa_r+0xa42>
 800facc:	d102      	bne.n	800fad4 <_dtoa_r+0xadc>
 800face:	f018 0f01 	tst.w	r8, #1
 800fad2:	d1b2      	bne.n	800fa3a <_dtoa_r+0xa42>
 800fad4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fad8:	2b30      	cmp	r3, #48	; 0x30
 800fada:	f105 32ff 	add.w	r2, r5, #4294967295
 800fade:	f47f af0a 	bne.w	800f8f6 <_dtoa_r+0x8fe>
 800fae2:	4615      	mov	r5, r2
 800fae4:	e7f6      	b.n	800fad4 <_dtoa_r+0xadc>
 800fae6:	4593      	cmp	fp, r2
 800fae8:	d105      	bne.n	800faf6 <_dtoa_r+0xafe>
 800faea:	2331      	movs	r3, #49	; 0x31
 800faec:	f10a 0a01 	add.w	sl, sl, #1
 800faf0:	f88b 3000 	strb.w	r3, [fp]
 800faf4:	e6ff      	b.n	800f8f6 <_dtoa_r+0x8fe>
 800faf6:	4615      	mov	r5, r2
 800faf8:	e79f      	b.n	800fa3a <_dtoa_r+0xa42>
 800fafa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fb60 <_dtoa_r+0xb68>
 800fafe:	e007      	b.n	800fb10 <_dtoa_r+0xb18>
 800fb00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb02:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fb64 <_dtoa_r+0xb6c>
 800fb06:	b11b      	cbz	r3, 800fb10 <_dtoa_r+0xb18>
 800fb08:	f10b 0308 	add.w	r3, fp, #8
 800fb0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb0e:	6013      	str	r3, [r2, #0]
 800fb10:	4658      	mov	r0, fp
 800fb12:	b017      	add	sp, #92	; 0x5c
 800fb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb18:	9b06      	ldr	r3, [sp, #24]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	f77f ae35 	ble.w	800f78a <_dtoa_r+0x792>
 800fb20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb22:	9307      	str	r3, [sp, #28]
 800fb24:	e649      	b.n	800f7ba <_dtoa_r+0x7c2>
 800fb26:	9b02      	ldr	r3, [sp, #8]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	dc03      	bgt.n	800fb34 <_dtoa_r+0xb3c>
 800fb2c:	9b06      	ldr	r3, [sp, #24]
 800fb2e:	2b02      	cmp	r3, #2
 800fb30:	f73f aecc 	bgt.w	800f8cc <_dtoa_r+0x8d4>
 800fb34:	465d      	mov	r5, fp
 800fb36:	4639      	mov	r1, r7
 800fb38:	9804      	ldr	r0, [sp, #16]
 800fb3a:	f7ff f9cf 	bl	800eedc <quorem>
 800fb3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fb42:	f805 8b01 	strb.w	r8, [r5], #1
 800fb46:	9a02      	ldr	r2, [sp, #8]
 800fb48:	eba5 030b 	sub.w	r3, r5, fp
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	ddb0      	ble.n	800fab2 <_dtoa_r+0xaba>
 800fb50:	2300      	movs	r3, #0
 800fb52:	220a      	movs	r2, #10
 800fb54:	9904      	ldr	r1, [sp, #16]
 800fb56:	4620      	mov	r0, r4
 800fb58:	f000 fd7d 	bl	8010656 <__multadd>
 800fb5c:	9004      	str	r0, [sp, #16]
 800fb5e:	e7ea      	b.n	800fb36 <_dtoa_r+0xb3e>
 800fb60:	08011610 	.word	0x08011610
 800fb64:	08011690 	.word	0x08011690

0800fb68 <__sflush_r>:
 800fb68:	898a      	ldrh	r2, [r1, #12]
 800fb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb6e:	4605      	mov	r5, r0
 800fb70:	0710      	lsls	r0, r2, #28
 800fb72:	460c      	mov	r4, r1
 800fb74:	d458      	bmi.n	800fc28 <__sflush_r+0xc0>
 800fb76:	684b      	ldr	r3, [r1, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	dc05      	bgt.n	800fb88 <__sflush_r+0x20>
 800fb7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	dc02      	bgt.n	800fb88 <__sflush_r+0x20>
 800fb82:	2000      	movs	r0, #0
 800fb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb8a:	2e00      	cmp	r6, #0
 800fb8c:	d0f9      	beq.n	800fb82 <__sflush_r+0x1a>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb94:	682f      	ldr	r7, [r5, #0]
 800fb96:	6a21      	ldr	r1, [r4, #32]
 800fb98:	602b      	str	r3, [r5, #0]
 800fb9a:	d032      	beq.n	800fc02 <__sflush_r+0x9a>
 800fb9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb9e:	89a3      	ldrh	r3, [r4, #12]
 800fba0:	075a      	lsls	r2, r3, #29
 800fba2:	d505      	bpl.n	800fbb0 <__sflush_r+0x48>
 800fba4:	6863      	ldr	r3, [r4, #4]
 800fba6:	1ac0      	subs	r0, r0, r3
 800fba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbaa:	b10b      	cbz	r3, 800fbb0 <__sflush_r+0x48>
 800fbac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbae:	1ac0      	subs	r0, r0, r3
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbb6:	6a21      	ldr	r1, [r4, #32]
 800fbb8:	4628      	mov	r0, r5
 800fbba:	47b0      	blx	r6
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	89a3      	ldrh	r3, [r4, #12]
 800fbc0:	d106      	bne.n	800fbd0 <__sflush_r+0x68>
 800fbc2:	6829      	ldr	r1, [r5, #0]
 800fbc4:	291d      	cmp	r1, #29
 800fbc6:	d848      	bhi.n	800fc5a <__sflush_r+0xf2>
 800fbc8:	4a29      	ldr	r2, [pc, #164]	; (800fc70 <__sflush_r+0x108>)
 800fbca:	40ca      	lsrs	r2, r1
 800fbcc:	07d6      	lsls	r6, r2, #31
 800fbce:	d544      	bpl.n	800fc5a <__sflush_r+0xf2>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	6062      	str	r2, [r4, #4]
 800fbd4:	04d9      	lsls	r1, r3, #19
 800fbd6:	6922      	ldr	r2, [r4, #16]
 800fbd8:	6022      	str	r2, [r4, #0]
 800fbda:	d504      	bpl.n	800fbe6 <__sflush_r+0x7e>
 800fbdc:	1c42      	adds	r2, r0, #1
 800fbde:	d101      	bne.n	800fbe4 <__sflush_r+0x7c>
 800fbe0:	682b      	ldr	r3, [r5, #0]
 800fbe2:	b903      	cbnz	r3, 800fbe6 <__sflush_r+0x7e>
 800fbe4:	6560      	str	r0, [r4, #84]	; 0x54
 800fbe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbe8:	602f      	str	r7, [r5, #0]
 800fbea:	2900      	cmp	r1, #0
 800fbec:	d0c9      	beq.n	800fb82 <__sflush_r+0x1a>
 800fbee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbf2:	4299      	cmp	r1, r3
 800fbf4:	d002      	beq.n	800fbfc <__sflush_r+0x94>
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f7fd f9b4 	bl	800cf64 <_free_r>
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	6360      	str	r0, [r4, #52]	; 0x34
 800fc00:	e7c0      	b.n	800fb84 <__sflush_r+0x1c>
 800fc02:	2301      	movs	r3, #1
 800fc04:	4628      	mov	r0, r5
 800fc06:	47b0      	blx	r6
 800fc08:	1c41      	adds	r1, r0, #1
 800fc0a:	d1c8      	bne.n	800fb9e <__sflush_r+0x36>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d0c5      	beq.n	800fb9e <__sflush_r+0x36>
 800fc12:	2b1d      	cmp	r3, #29
 800fc14:	d001      	beq.n	800fc1a <__sflush_r+0xb2>
 800fc16:	2b16      	cmp	r3, #22
 800fc18:	d101      	bne.n	800fc1e <__sflush_r+0xb6>
 800fc1a:	602f      	str	r7, [r5, #0]
 800fc1c:	e7b1      	b.n	800fb82 <__sflush_r+0x1a>
 800fc1e:	89a3      	ldrh	r3, [r4, #12]
 800fc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc24:	81a3      	strh	r3, [r4, #12]
 800fc26:	e7ad      	b.n	800fb84 <__sflush_r+0x1c>
 800fc28:	690f      	ldr	r7, [r1, #16]
 800fc2a:	2f00      	cmp	r7, #0
 800fc2c:	d0a9      	beq.n	800fb82 <__sflush_r+0x1a>
 800fc2e:	0793      	lsls	r3, r2, #30
 800fc30:	680e      	ldr	r6, [r1, #0]
 800fc32:	bf08      	it	eq
 800fc34:	694b      	ldreq	r3, [r1, #20]
 800fc36:	600f      	str	r7, [r1, #0]
 800fc38:	bf18      	it	ne
 800fc3a:	2300      	movne	r3, #0
 800fc3c:	eba6 0807 	sub.w	r8, r6, r7
 800fc40:	608b      	str	r3, [r1, #8]
 800fc42:	f1b8 0f00 	cmp.w	r8, #0
 800fc46:	dd9c      	ble.n	800fb82 <__sflush_r+0x1a>
 800fc48:	4643      	mov	r3, r8
 800fc4a:	463a      	mov	r2, r7
 800fc4c:	6a21      	ldr	r1, [r4, #32]
 800fc4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc50:	4628      	mov	r0, r5
 800fc52:	47b0      	blx	r6
 800fc54:	2800      	cmp	r0, #0
 800fc56:	dc06      	bgt.n	800fc66 <__sflush_r+0xfe>
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	f04f 30ff 	mov.w	r0, #4294967295
 800fc64:	e78e      	b.n	800fb84 <__sflush_r+0x1c>
 800fc66:	4407      	add	r7, r0
 800fc68:	eba8 0800 	sub.w	r8, r8, r0
 800fc6c:	e7e9      	b.n	800fc42 <__sflush_r+0xda>
 800fc6e:	bf00      	nop
 800fc70:	20400001 	.word	0x20400001

0800fc74 <_fflush_r>:
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	690b      	ldr	r3, [r1, #16]
 800fc78:	4605      	mov	r5, r0
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	b1db      	cbz	r3, 800fcb6 <_fflush_r+0x42>
 800fc7e:	b118      	cbz	r0, 800fc88 <_fflush_r+0x14>
 800fc80:	6983      	ldr	r3, [r0, #24]
 800fc82:	b90b      	cbnz	r3, 800fc88 <_fflush_r+0x14>
 800fc84:	f000 f860 	bl	800fd48 <__sinit>
 800fc88:	4b0c      	ldr	r3, [pc, #48]	; (800fcbc <_fflush_r+0x48>)
 800fc8a:	429c      	cmp	r4, r3
 800fc8c:	d109      	bne.n	800fca2 <_fflush_r+0x2e>
 800fc8e:	686c      	ldr	r4, [r5, #4]
 800fc90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc94:	b17b      	cbz	r3, 800fcb6 <_fflush_r+0x42>
 800fc96:	4621      	mov	r1, r4
 800fc98:	4628      	mov	r0, r5
 800fc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc9e:	f7ff bf63 	b.w	800fb68 <__sflush_r>
 800fca2:	4b07      	ldr	r3, [pc, #28]	; (800fcc0 <_fflush_r+0x4c>)
 800fca4:	429c      	cmp	r4, r3
 800fca6:	d101      	bne.n	800fcac <_fflush_r+0x38>
 800fca8:	68ac      	ldr	r4, [r5, #8]
 800fcaa:	e7f1      	b.n	800fc90 <_fflush_r+0x1c>
 800fcac:	4b05      	ldr	r3, [pc, #20]	; (800fcc4 <_fflush_r+0x50>)
 800fcae:	429c      	cmp	r4, r3
 800fcb0:	bf08      	it	eq
 800fcb2:	68ec      	ldreq	r4, [r5, #12]
 800fcb4:	e7ec      	b.n	800fc90 <_fflush_r+0x1c>
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	bd38      	pop	{r3, r4, r5, pc}
 800fcba:	bf00      	nop
 800fcbc:	080116c0 	.word	0x080116c0
 800fcc0:	080116e0 	.word	0x080116e0
 800fcc4:	080116a0 	.word	0x080116a0

0800fcc8 <std>:
 800fcc8:	2300      	movs	r3, #0
 800fcca:	b510      	push	{r4, lr}
 800fccc:	4604      	mov	r4, r0
 800fcce:	e9c0 3300 	strd	r3, r3, [r0]
 800fcd2:	6083      	str	r3, [r0, #8]
 800fcd4:	8181      	strh	r1, [r0, #12]
 800fcd6:	6643      	str	r3, [r0, #100]	; 0x64
 800fcd8:	81c2      	strh	r2, [r0, #14]
 800fcda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcde:	6183      	str	r3, [r0, #24]
 800fce0:	4619      	mov	r1, r3
 800fce2:	2208      	movs	r2, #8
 800fce4:	305c      	adds	r0, #92	; 0x5c
 800fce6:	f7fd f934 	bl	800cf52 <memset>
 800fcea:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <std+0x38>)
 800fcec:	6263      	str	r3, [r4, #36]	; 0x24
 800fcee:	4b05      	ldr	r3, [pc, #20]	; (800fd04 <std+0x3c>)
 800fcf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcf2:	4b05      	ldr	r3, [pc, #20]	; (800fd08 <std+0x40>)
 800fcf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fcf6:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <std+0x44>)
 800fcf8:	6224      	str	r4, [r4, #32]
 800fcfa:	6323      	str	r3, [r4, #48]	; 0x30
 800fcfc:	bd10      	pop	{r4, pc}
 800fcfe:	bf00      	nop
 800fd00:	08011301 	.word	0x08011301
 800fd04:	08011323 	.word	0x08011323
 800fd08:	0801135b 	.word	0x0801135b
 800fd0c:	0801137f 	.word	0x0801137f

0800fd10 <_cleanup_r>:
 800fd10:	4901      	ldr	r1, [pc, #4]	; (800fd18 <_cleanup_r+0x8>)
 800fd12:	f000 b885 	b.w	800fe20 <_fwalk_reent>
 800fd16:	bf00      	nop
 800fd18:	0800fc75 	.word	0x0800fc75

0800fd1c <__sfmoreglue>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	1e4a      	subs	r2, r1, #1
 800fd20:	2568      	movs	r5, #104	; 0x68
 800fd22:	4355      	muls	r5, r2
 800fd24:	460e      	mov	r6, r1
 800fd26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd2a:	f7fd f969 	bl	800d000 <_malloc_r>
 800fd2e:	4604      	mov	r4, r0
 800fd30:	b140      	cbz	r0, 800fd44 <__sfmoreglue+0x28>
 800fd32:	2100      	movs	r1, #0
 800fd34:	e9c0 1600 	strd	r1, r6, [r0]
 800fd38:	300c      	adds	r0, #12
 800fd3a:	60a0      	str	r0, [r4, #8]
 800fd3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd40:	f7fd f907 	bl	800cf52 <memset>
 800fd44:	4620      	mov	r0, r4
 800fd46:	bd70      	pop	{r4, r5, r6, pc}

0800fd48 <__sinit>:
 800fd48:	6983      	ldr	r3, [r0, #24]
 800fd4a:	b510      	push	{r4, lr}
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	bb33      	cbnz	r3, 800fd9e <__sinit+0x56>
 800fd50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fd54:	6503      	str	r3, [r0, #80]	; 0x50
 800fd56:	4b12      	ldr	r3, [pc, #72]	; (800fda0 <__sinit+0x58>)
 800fd58:	4a12      	ldr	r2, [pc, #72]	; (800fda4 <__sinit+0x5c>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6282      	str	r2, [r0, #40]	; 0x28
 800fd5e:	4298      	cmp	r0, r3
 800fd60:	bf04      	itt	eq
 800fd62:	2301      	moveq	r3, #1
 800fd64:	6183      	streq	r3, [r0, #24]
 800fd66:	f000 f81f 	bl	800fda8 <__sfp>
 800fd6a:	6060      	str	r0, [r4, #4]
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f000 f81b 	bl	800fda8 <__sfp>
 800fd72:	60a0      	str	r0, [r4, #8]
 800fd74:	4620      	mov	r0, r4
 800fd76:	f000 f817 	bl	800fda8 <__sfp>
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	60e0      	str	r0, [r4, #12]
 800fd7e:	2104      	movs	r1, #4
 800fd80:	6860      	ldr	r0, [r4, #4]
 800fd82:	f7ff ffa1 	bl	800fcc8 <std>
 800fd86:	2201      	movs	r2, #1
 800fd88:	2109      	movs	r1, #9
 800fd8a:	68a0      	ldr	r0, [r4, #8]
 800fd8c:	f7ff ff9c 	bl	800fcc8 <std>
 800fd90:	2202      	movs	r2, #2
 800fd92:	2112      	movs	r1, #18
 800fd94:	68e0      	ldr	r0, [r4, #12]
 800fd96:	f7ff ff97 	bl	800fcc8 <std>
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	61a3      	str	r3, [r4, #24]
 800fd9e:	bd10      	pop	{r4, pc}
 800fda0:	080115fc 	.word	0x080115fc
 800fda4:	0800fd11 	.word	0x0800fd11

0800fda8 <__sfp>:
 800fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdaa:	4b1b      	ldr	r3, [pc, #108]	; (800fe18 <__sfp+0x70>)
 800fdac:	681e      	ldr	r6, [r3, #0]
 800fdae:	69b3      	ldr	r3, [r6, #24]
 800fdb0:	4607      	mov	r7, r0
 800fdb2:	b913      	cbnz	r3, 800fdba <__sfp+0x12>
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f7ff ffc7 	bl	800fd48 <__sinit>
 800fdba:	3648      	adds	r6, #72	; 0x48
 800fdbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	d503      	bpl.n	800fdcc <__sfp+0x24>
 800fdc4:	6833      	ldr	r3, [r6, #0]
 800fdc6:	b133      	cbz	r3, 800fdd6 <__sfp+0x2e>
 800fdc8:	6836      	ldr	r6, [r6, #0]
 800fdca:	e7f7      	b.n	800fdbc <__sfp+0x14>
 800fdcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fdd0:	b16d      	cbz	r5, 800fdee <__sfp+0x46>
 800fdd2:	3468      	adds	r4, #104	; 0x68
 800fdd4:	e7f4      	b.n	800fdc0 <__sfp+0x18>
 800fdd6:	2104      	movs	r1, #4
 800fdd8:	4638      	mov	r0, r7
 800fdda:	f7ff ff9f 	bl	800fd1c <__sfmoreglue>
 800fdde:	6030      	str	r0, [r6, #0]
 800fde0:	2800      	cmp	r0, #0
 800fde2:	d1f1      	bne.n	800fdc8 <__sfp+0x20>
 800fde4:	230c      	movs	r3, #12
 800fde6:	603b      	str	r3, [r7, #0]
 800fde8:	4604      	mov	r4, r0
 800fdea:	4620      	mov	r0, r4
 800fdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdee:	4b0b      	ldr	r3, [pc, #44]	; (800fe1c <__sfp+0x74>)
 800fdf0:	6665      	str	r5, [r4, #100]	; 0x64
 800fdf2:	e9c4 5500 	strd	r5, r5, [r4]
 800fdf6:	60a5      	str	r5, [r4, #8]
 800fdf8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fdfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fe00:	2208      	movs	r2, #8
 800fe02:	4629      	mov	r1, r5
 800fe04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe08:	f7fd f8a3 	bl	800cf52 <memset>
 800fe0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe14:	e7e9      	b.n	800fdea <__sfp+0x42>
 800fe16:	bf00      	nop
 800fe18:	080115fc 	.word	0x080115fc
 800fe1c:	ffff0001 	.word	0xffff0001

0800fe20 <_fwalk_reent>:
 800fe20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe24:	4680      	mov	r8, r0
 800fe26:	4689      	mov	r9, r1
 800fe28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe2c:	2600      	movs	r6, #0
 800fe2e:	b914      	cbnz	r4, 800fe36 <_fwalk_reent+0x16>
 800fe30:	4630      	mov	r0, r6
 800fe32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fe3a:	3f01      	subs	r7, #1
 800fe3c:	d501      	bpl.n	800fe42 <_fwalk_reent+0x22>
 800fe3e:	6824      	ldr	r4, [r4, #0]
 800fe40:	e7f5      	b.n	800fe2e <_fwalk_reent+0xe>
 800fe42:	89ab      	ldrh	r3, [r5, #12]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d907      	bls.n	800fe58 <_fwalk_reent+0x38>
 800fe48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	d003      	beq.n	800fe58 <_fwalk_reent+0x38>
 800fe50:	4629      	mov	r1, r5
 800fe52:	4640      	mov	r0, r8
 800fe54:	47c8      	blx	r9
 800fe56:	4306      	orrs	r6, r0
 800fe58:	3568      	adds	r5, #104	; 0x68
 800fe5a:	e7ee      	b.n	800fe3a <_fwalk_reent+0x1a>

0800fe5c <rshift>:
 800fe5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe5e:	6906      	ldr	r6, [r0, #16]
 800fe60:	114b      	asrs	r3, r1, #5
 800fe62:	429e      	cmp	r6, r3
 800fe64:	f100 0414 	add.w	r4, r0, #20
 800fe68:	dd30      	ble.n	800fecc <rshift+0x70>
 800fe6a:	f011 011f 	ands.w	r1, r1, #31
 800fe6e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800fe72:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800fe76:	d108      	bne.n	800fe8a <rshift+0x2e>
 800fe78:	4621      	mov	r1, r4
 800fe7a:	42b2      	cmp	r2, r6
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	d211      	bcs.n	800fea4 <rshift+0x48>
 800fe80:	f852 3b04 	ldr.w	r3, [r2], #4
 800fe84:	f841 3b04 	str.w	r3, [r1], #4
 800fe88:	e7f7      	b.n	800fe7a <rshift+0x1e>
 800fe8a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800fe8e:	f1c1 0c20 	rsb	ip, r1, #32
 800fe92:	40cd      	lsrs	r5, r1
 800fe94:	3204      	adds	r2, #4
 800fe96:	4623      	mov	r3, r4
 800fe98:	42b2      	cmp	r2, r6
 800fe9a:	4617      	mov	r7, r2
 800fe9c:	d30c      	bcc.n	800feb8 <rshift+0x5c>
 800fe9e:	601d      	str	r5, [r3, #0]
 800fea0:	b105      	cbz	r5, 800fea4 <rshift+0x48>
 800fea2:	3304      	adds	r3, #4
 800fea4:	1b1a      	subs	r2, r3, r4
 800fea6:	42a3      	cmp	r3, r4
 800fea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800feac:	bf08      	it	eq
 800feae:	2300      	moveq	r3, #0
 800feb0:	6102      	str	r2, [r0, #16]
 800feb2:	bf08      	it	eq
 800feb4:	6143      	streq	r3, [r0, #20]
 800feb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feb8:	683f      	ldr	r7, [r7, #0]
 800feba:	fa07 f70c 	lsl.w	r7, r7, ip
 800febe:	433d      	orrs	r5, r7
 800fec0:	f843 5b04 	str.w	r5, [r3], #4
 800fec4:	f852 5b04 	ldr.w	r5, [r2], #4
 800fec8:	40cd      	lsrs	r5, r1
 800feca:	e7e5      	b.n	800fe98 <rshift+0x3c>
 800fecc:	4623      	mov	r3, r4
 800fece:	e7e9      	b.n	800fea4 <rshift+0x48>

0800fed0 <__hexdig_fun>:
 800fed0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fed4:	2b09      	cmp	r3, #9
 800fed6:	d802      	bhi.n	800fede <__hexdig_fun+0xe>
 800fed8:	3820      	subs	r0, #32
 800feda:	b2c0      	uxtb	r0, r0
 800fedc:	4770      	bx	lr
 800fede:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fee2:	2b05      	cmp	r3, #5
 800fee4:	d801      	bhi.n	800feea <__hexdig_fun+0x1a>
 800fee6:	3847      	subs	r0, #71	; 0x47
 800fee8:	e7f7      	b.n	800feda <__hexdig_fun+0xa>
 800feea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800feee:	2b05      	cmp	r3, #5
 800fef0:	d801      	bhi.n	800fef6 <__hexdig_fun+0x26>
 800fef2:	3827      	subs	r0, #39	; 0x27
 800fef4:	e7f1      	b.n	800feda <__hexdig_fun+0xa>
 800fef6:	2000      	movs	r0, #0
 800fef8:	4770      	bx	lr

0800fefa <__gethex>:
 800fefa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefe:	b08b      	sub	sp, #44	; 0x2c
 800ff00:	468a      	mov	sl, r1
 800ff02:	9002      	str	r0, [sp, #8]
 800ff04:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ff06:	9306      	str	r3, [sp, #24]
 800ff08:	4690      	mov	r8, r2
 800ff0a:	f000 fad0 	bl	80104ae <__localeconv_l>
 800ff0e:	6803      	ldr	r3, [r0, #0]
 800ff10:	9303      	str	r3, [sp, #12]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7f0 f96c 	bl	80001f0 <strlen>
 800ff18:	9b03      	ldr	r3, [sp, #12]
 800ff1a:	9001      	str	r0, [sp, #4]
 800ff1c:	4403      	add	r3, r0
 800ff1e:	f04f 0b00 	mov.w	fp, #0
 800ff22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ff26:	9307      	str	r3, [sp, #28]
 800ff28:	f8da 3000 	ldr.w	r3, [sl]
 800ff2c:	3302      	adds	r3, #2
 800ff2e:	461f      	mov	r7, r3
 800ff30:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ff34:	2830      	cmp	r0, #48	; 0x30
 800ff36:	d06c      	beq.n	8010012 <__gethex+0x118>
 800ff38:	f7ff ffca 	bl	800fed0 <__hexdig_fun>
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d16a      	bne.n	8010018 <__gethex+0x11e>
 800ff42:	9a01      	ldr	r2, [sp, #4]
 800ff44:	9903      	ldr	r1, [sp, #12]
 800ff46:	4638      	mov	r0, r7
 800ff48:	f001 fa1d 	bl	8011386 <strncmp>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d166      	bne.n	801001e <__gethex+0x124>
 800ff50:	9b01      	ldr	r3, [sp, #4]
 800ff52:	5cf8      	ldrb	r0, [r7, r3]
 800ff54:	18fe      	adds	r6, r7, r3
 800ff56:	f7ff ffbb 	bl	800fed0 <__hexdig_fun>
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	d062      	beq.n	8010024 <__gethex+0x12a>
 800ff5e:	4633      	mov	r3, r6
 800ff60:	7818      	ldrb	r0, [r3, #0]
 800ff62:	2830      	cmp	r0, #48	; 0x30
 800ff64:	461f      	mov	r7, r3
 800ff66:	f103 0301 	add.w	r3, r3, #1
 800ff6a:	d0f9      	beq.n	800ff60 <__gethex+0x66>
 800ff6c:	f7ff ffb0 	bl	800fed0 <__hexdig_fun>
 800ff70:	fab0 f580 	clz	r5, r0
 800ff74:	096d      	lsrs	r5, r5, #5
 800ff76:	4634      	mov	r4, r6
 800ff78:	f04f 0b01 	mov.w	fp, #1
 800ff7c:	463a      	mov	r2, r7
 800ff7e:	4616      	mov	r6, r2
 800ff80:	3201      	adds	r2, #1
 800ff82:	7830      	ldrb	r0, [r6, #0]
 800ff84:	f7ff ffa4 	bl	800fed0 <__hexdig_fun>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d1f8      	bne.n	800ff7e <__gethex+0x84>
 800ff8c:	9a01      	ldr	r2, [sp, #4]
 800ff8e:	9903      	ldr	r1, [sp, #12]
 800ff90:	4630      	mov	r0, r6
 800ff92:	f001 f9f8 	bl	8011386 <strncmp>
 800ff96:	b950      	cbnz	r0, 800ffae <__gethex+0xb4>
 800ff98:	b954      	cbnz	r4, 800ffb0 <__gethex+0xb6>
 800ff9a:	9b01      	ldr	r3, [sp, #4]
 800ff9c:	18f4      	adds	r4, r6, r3
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	4616      	mov	r6, r2
 800ffa2:	3201      	adds	r2, #1
 800ffa4:	7830      	ldrb	r0, [r6, #0]
 800ffa6:	f7ff ff93 	bl	800fed0 <__hexdig_fun>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d1f8      	bne.n	800ffa0 <__gethex+0xa6>
 800ffae:	b10c      	cbz	r4, 800ffb4 <__gethex+0xba>
 800ffb0:	1ba4      	subs	r4, r4, r6
 800ffb2:	00a4      	lsls	r4, r4, #2
 800ffb4:	7833      	ldrb	r3, [r6, #0]
 800ffb6:	2b50      	cmp	r3, #80	; 0x50
 800ffb8:	d001      	beq.n	800ffbe <__gethex+0xc4>
 800ffba:	2b70      	cmp	r3, #112	; 0x70
 800ffbc:	d140      	bne.n	8010040 <__gethex+0x146>
 800ffbe:	7873      	ldrb	r3, [r6, #1]
 800ffc0:	2b2b      	cmp	r3, #43	; 0x2b
 800ffc2:	d031      	beq.n	8010028 <__gethex+0x12e>
 800ffc4:	2b2d      	cmp	r3, #45	; 0x2d
 800ffc6:	d033      	beq.n	8010030 <__gethex+0x136>
 800ffc8:	1c71      	adds	r1, r6, #1
 800ffca:	f04f 0900 	mov.w	r9, #0
 800ffce:	7808      	ldrb	r0, [r1, #0]
 800ffd0:	f7ff ff7e 	bl	800fed0 <__hexdig_fun>
 800ffd4:	1e43      	subs	r3, r0, #1
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b18      	cmp	r3, #24
 800ffda:	d831      	bhi.n	8010040 <__gethex+0x146>
 800ffdc:	f1a0 0210 	sub.w	r2, r0, #16
 800ffe0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ffe4:	f7ff ff74 	bl	800fed0 <__hexdig_fun>
 800ffe8:	1e43      	subs	r3, r0, #1
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	2b18      	cmp	r3, #24
 800ffee:	d922      	bls.n	8010036 <__gethex+0x13c>
 800fff0:	f1b9 0f00 	cmp.w	r9, #0
 800fff4:	d000      	beq.n	800fff8 <__gethex+0xfe>
 800fff6:	4252      	negs	r2, r2
 800fff8:	4414      	add	r4, r2
 800fffa:	f8ca 1000 	str.w	r1, [sl]
 800fffe:	b30d      	cbz	r5, 8010044 <__gethex+0x14a>
 8010000:	f1bb 0f00 	cmp.w	fp, #0
 8010004:	bf0c      	ite	eq
 8010006:	2706      	moveq	r7, #6
 8010008:	2700      	movne	r7, #0
 801000a:	4638      	mov	r0, r7
 801000c:	b00b      	add	sp, #44	; 0x2c
 801000e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010012:	f10b 0b01 	add.w	fp, fp, #1
 8010016:	e78a      	b.n	800ff2e <__gethex+0x34>
 8010018:	2500      	movs	r5, #0
 801001a:	462c      	mov	r4, r5
 801001c:	e7ae      	b.n	800ff7c <__gethex+0x82>
 801001e:	463e      	mov	r6, r7
 8010020:	2501      	movs	r5, #1
 8010022:	e7c7      	b.n	800ffb4 <__gethex+0xba>
 8010024:	4604      	mov	r4, r0
 8010026:	e7fb      	b.n	8010020 <__gethex+0x126>
 8010028:	f04f 0900 	mov.w	r9, #0
 801002c:	1cb1      	adds	r1, r6, #2
 801002e:	e7ce      	b.n	800ffce <__gethex+0xd4>
 8010030:	f04f 0901 	mov.w	r9, #1
 8010034:	e7fa      	b.n	801002c <__gethex+0x132>
 8010036:	230a      	movs	r3, #10
 8010038:	fb03 0202 	mla	r2, r3, r2, r0
 801003c:	3a10      	subs	r2, #16
 801003e:	e7cf      	b.n	800ffe0 <__gethex+0xe6>
 8010040:	4631      	mov	r1, r6
 8010042:	e7da      	b.n	800fffa <__gethex+0x100>
 8010044:	1bf3      	subs	r3, r6, r7
 8010046:	3b01      	subs	r3, #1
 8010048:	4629      	mov	r1, r5
 801004a:	2b07      	cmp	r3, #7
 801004c:	dc49      	bgt.n	80100e2 <__gethex+0x1e8>
 801004e:	9802      	ldr	r0, [sp, #8]
 8010050:	f000 fab6 	bl	80105c0 <_Balloc>
 8010054:	9b01      	ldr	r3, [sp, #4]
 8010056:	f100 0914 	add.w	r9, r0, #20
 801005a:	f04f 0b00 	mov.w	fp, #0
 801005e:	f1c3 0301 	rsb	r3, r3, #1
 8010062:	4605      	mov	r5, r0
 8010064:	f8cd 9010 	str.w	r9, [sp, #16]
 8010068:	46da      	mov	sl, fp
 801006a:	9308      	str	r3, [sp, #32]
 801006c:	42b7      	cmp	r7, r6
 801006e:	d33b      	bcc.n	80100e8 <__gethex+0x1ee>
 8010070:	9804      	ldr	r0, [sp, #16]
 8010072:	f840 ab04 	str.w	sl, [r0], #4
 8010076:	eba0 0009 	sub.w	r0, r0, r9
 801007a:	1080      	asrs	r0, r0, #2
 801007c:	6128      	str	r0, [r5, #16]
 801007e:	0147      	lsls	r7, r0, #5
 8010080:	4650      	mov	r0, sl
 8010082:	f000 fb61 	bl	8010748 <__hi0bits>
 8010086:	f8d8 6000 	ldr.w	r6, [r8]
 801008a:	1a3f      	subs	r7, r7, r0
 801008c:	42b7      	cmp	r7, r6
 801008e:	dd64      	ble.n	801015a <__gethex+0x260>
 8010090:	1bbf      	subs	r7, r7, r6
 8010092:	4639      	mov	r1, r7
 8010094:	4628      	mov	r0, r5
 8010096:	f000 fe71 	bl	8010d7c <__any_on>
 801009a:	4682      	mov	sl, r0
 801009c:	b178      	cbz	r0, 80100be <__gethex+0x1c4>
 801009e:	1e7b      	subs	r3, r7, #1
 80100a0:	1159      	asrs	r1, r3, #5
 80100a2:	f003 021f 	and.w	r2, r3, #31
 80100a6:	f04f 0a01 	mov.w	sl, #1
 80100aa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80100ae:	fa0a f202 	lsl.w	r2, sl, r2
 80100b2:	420a      	tst	r2, r1
 80100b4:	d003      	beq.n	80100be <__gethex+0x1c4>
 80100b6:	4553      	cmp	r3, sl
 80100b8:	dc46      	bgt.n	8010148 <__gethex+0x24e>
 80100ba:	f04f 0a02 	mov.w	sl, #2
 80100be:	4639      	mov	r1, r7
 80100c0:	4628      	mov	r0, r5
 80100c2:	f7ff fecb 	bl	800fe5c <rshift>
 80100c6:	443c      	add	r4, r7
 80100c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100cc:	42a3      	cmp	r3, r4
 80100ce:	da52      	bge.n	8010176 <__gethex+0x27c>
 80100d0:	4629      	mov	r1, r5
 80100d2:	9802      	ldr	r0, [sp, #8]
 80100d4:	f000 faa8 	bl	8010628 <_Bfree>
 80100d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100da:	2300      	movs	r3, #0
 80100dc:	6013      	str	r3, [r2, #0]
 80100de:	27a3      	movs	r7, #163	; 0xa3
 80100e0:	e793      	b.n	801000a <__gethex+0x110>
 80100e2:	3101      	adds	r1, #1
 80100e4:	105b      	asrs	r3, r3, #1
 80100e6:	e7b0      	b.n	801004a <__gethex+0x150>
 80100e8:	1e73      	subs	r3, r6, #1
 80100ea:	9305      	str	r3, [sp, #20]
 80100ec:	9a07      	ldr	r2, [sp, #28]
 80100ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d018      	beq.n	8010128 <__gethex+0x22e>
 80100f6:	f1bb 0f20 	cmp.w	fp, #32
 80100fa:	d107      	bne.n	801010c <__gethex+0x212>
 80100fc:	9b04      	ldr	r3, [sp, #16]
 80100fe:	f8c3 a000 	str.w	sl, [r3]
 8010102:	3304      	adds	r3, #4
 8010104:	f04f 0a00 	mov.w	sl, #0
 8010108:	9304      	str	r3, [sp, #16]
 801010a:	46d3      	mov	fp, sl
 801010c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010110:	f7ff fede 	bl	800fed0 <__hexdig_fun>
 8010114:	f000 000f 	and.w	r0, r0, #15
 8010118:	fa00 f00b 	lsl.w	r0, r0, fp
 801011c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010120:	f10b 0b04 	add.w	fp, fp, #4
 8010124:	9b05      	ldr	r3, [sp, #20]
 8010126:	e00d      	b.n	8010144 <__gethex+0x24a>
 8010128:	9b05      	ldr	r3, [sp, #20]
 801012a:	9a08      	ldr	r2, [sp, #32]
 801012c:	4413      	add	r3, r2
 801012e:	42bb      	cmp	r3, r7
 8010130:	d3e1      	bcc.n	80100f6 <__gethex+0x1fc>
 8010132:	4618      	mov	r0, r3
 8010134:	9a01      	ldr	r2, [sp, #4]
 8010136:	9903      	ldr	r1, [sp, #12]
 8010138:	9309      	str	r3, [sp, #36]	; 0x24
 801013a:	f001 f924 	bl	8011386 <strncmp>
 801013e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010140:	2800      	cmp	r0, #0
 8010142:	d1d8      	bne.n	80100f6 <__gethex+0x1fc>
 8010144:	461e      	mov	r6, r3
 8010146:	e791      	b.n	801006c <__gethex+0x172>
 8010148:	1eb9      	subs	r1, r7, #2
 801014a:	4628      	mov	r0, r5
 801014c:	f000 fe16 	bl	8010d7c <__any_on>
 8010150:	2800      	cmp	r0, #0
 8010152:	d0b2      	beq.n	80100ba <__gethex+0x1c0>
 8010154:	f04f 0a03 	mov.w	sl, #3
 8010158:	e7b1      	b.n	80100be <__gethex+0x1c4>
 801015a:	da09      	bge.n	8010170 <__gethex+0x276>
 801015c:	1bf7      	subs	r7, r6, r7
 801015e:	4629      	mov	r1, r5
 8010160:	463a      	mov	r2, r7
 8010162:	9802      	ldr	r0, [sp, #8]
 8010164:	f000 fc2c 	bl	80109c0 <__lshift>
 8010168:	1be4      	subs	r4, r4, r7
 801016a:	4605      	mov	r5, r0
 801016c:	f100 0914 	add.w	r9, r0, #20
 8010170:	f04f 0a00 	mov.w	sl, #0
 8010174:	e7a8      	b.n	80100c8 <__gethex+0x1ce>
 8010176:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801017a:	42a0      	cmp	r0, r4
 801017c:	dd6a      	ble.n	8010254 <__gethex+0x35a>
 801017e:	1b04      	subs	r4, r0, r4
 8010180:	42a6      	cmp	r6, r4
 8010182:	dc2e      	bgt.n	80101e2 <__gethex+0x2e8>
 8010184:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010188:	2b02      	cmp	r3, #2
 801018a:	d022      	beq.n	80101d2 <__gethex+0x2d8>
 801018c:	2b03      	cmp	r3, #3
 801018e:	d024      	beq.n	80101da <__gethex+0x2e0>
 8010190:	2b01      	cmp	r3, #1
 8010192:	d115      	bne.n	80101c0 <__gethex+0x2c6>
 8010194:	42a6      	cmp	r6, r4
 8010196:	d113      	bne.n	80101c0 <__gethex+0x2c6>
 8010198:	2e01      	cmp	r6, #1
 801019a:	dc0b      	bgt.n	80101b4 <__gethex+0x2ba>
 801019c:	9a06      	ldr	r2, [sp, #24]
 801019e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101a2:	6013      	str	r3, [r2, #0]
 80101a4:	2301      	movs	r3, #1
 80101a6:	612b      	str	r3, [r5, #16]
 80101a8:	f8c9 3000 	str.w	r3, [r9]
 80101ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101ae:	2762      	movs	r7, #98	; 0x62
 80101b0:	601d      	str	r5, [r3, #0]
 80101b2:	e72a      	b.n	801000a <__gethex+0x110>
 80101b4:	1e71      	subs	r1, r6, #1
 80101b6:	4628      	mov	r0, r5
 80101b8:	f000 fde0 	bl	8010d7c <__any_on>
 80101bc:	2800      	cmp	r0, #0
 80101be:	d1ed      	bne.n	801019c <__gethex+0x2a2>
 80101c0:	4629      	mov	r1, r5
 80101c2:	9802      	ldr	r0, [sp, #8]
 80101c4:	f000 fa30 	bl	8010628 <_Bfree>
 80101c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101ca:	2300      	movs	r3, #0
 80101cc:	6013      	str	r3, [r2, #0]
 80101ce:	2750      	movs	r7, #80	; 0x50
 80101d0:	e71b      	b.n	801000a <__gethex+0x110>
 80101d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d0e1      	beq.n	801019c <__gethex+0x2a2>
 80101d8:	e7f2      	b.n	80101c0 <__gethex+0x2c6>
 80101da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1dd      	bne.n	801019c <__gethex+0x2a2>
 80101e0:	e7ee      	b.n	80101c0 <__gethex+0x2c6>
 80101e2:	1e67      	subs	r7, r4, #1
 80101e4:	f1ba 0f00 	cmp.w	sl, #0
 80101e8:	d131      	bne.n	801024e <__gethex+0x354>
 80101ea:	b127      	cbz	r7, 80101f6 <__gethex+0x2fc>
 80101ec:	4639      	mov	r1, r7
 80101ee:	4628      	mov	r0, r5
 80101f0:	f000 fdc4 	bl	8010d7c <__any_on>
 80101f4:	4682      	mov	sl, r0
 80101f6:	117a      	asrs	r2, r7, #5
 80101f8:	2301      	movs	r3, #1
 80101fa:	f007 071f 	and.w	r7, r7, #31
 80101fe:	fa03 f707 	lsl.w	r7, r3, r7
 8010202:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010206:	4621      	mov	r1, r4
 8010208:	421f      	tst	r7, r3
 801020a:	4628      	mov	r0, r5
 801020c:	bf18      	it	ne
 801020e:	f04a 0a02 	orrne.w	sl, sl, #2
 8010212:	1b36      	subs	r6, r6, r4
 8010214:	f7ff fe22 	bl	800fe5c <rshift>
 8010218:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801021c:	2702      	movs	r7, #2
 801021e:	f1ba 0f00 	cmp.w	sl, #0
 8010222:	d048      	beq.n	80102b6 <__gethex+0x3bc>
 8010224:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010228:	2b02      	cmp	r3, #2
 801022a:	d015      	beq.n	8010258 <__gethex+0x35e>
 801022c:	2b03      	cmp	r3, #3
 801022e:	d017      	beq.n	8010260 <__gethex+0x366>
 8010230:	2b01      	cmp	r3, #1
 8010232:	d109      	bne.n	8010248 <__gethex+0x34e>
 8010234:	f01a 0f02 	tst.w	sl, #2
 8010238:	d006      	beq.n	8010248 <__gethex+0x34e>
 801023a:	f8d9 3000 	ldr.w	r3, [r9]
 801023e:	ea4a 0a03 	orr.w	sl, sl, r3
 8010242:	f01a 0f01 	tst.w	sl, #1
 8010246:	d10e      	bne.n	8010266 <__gethex+0x36c>
 8010248:	f047 0710 	orr.w	r7, r7, #16
 801024c:	e033      	b.n	80102b6 <__gethex+0x3bc>
 801024e:	f04f 0a01 	mov.w	sl, #1
 8010252:	e7d0      	b.n	80101f6 <__gethex+0x2fc>
 8010254:	2701      	movs	r7, #1
 8010256:	e7e2      	b.n	801021e <__gethex+0x324>
 8010258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801025a:	f1c3 0301 	rsb	r3, r3, #1
 801025e:	9315      	str	r3, [sp, #84]	; 0x54
 8010260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010262:	2b00      	cmp	r3, #0
 8010264:	d0f0      	beq.n	8010248 <__gethex+0x34e>
 8010266:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801026a:	f105 0314 	add.w	r3, r5, #20
 801026e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010272:	eb03 010a 	add.w	r1, r3, sl
 8010276:	f04f 0c00 	mov.w	ip, #0
 801027a:	4618      	mov	r0, r3
 801027c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010280:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010284:	d01c      	beq.n	80102c0 <__gethex+0x3c6>
 8010286:	3201      	adds	r2, #1
 8010288:	6002      	str	r2, [r0, #0]
 801028a:	2f02      	cmp	r7, #2
 801028c:	f105 0314 	add.w	r3, r5, #20
 8010290:	d138      	bne.n	8010304 <__gethex+0x40a>
 8010292:	f8d8 2000 	ldr.w	r2, [r8]
 8010296:	3a01      	subs	r2, #1
 8010298:	42b2      	cmp	r2, r6
 801029a:	d10a      	bne.n	80102b2 <__gethex+0x3b8>
 801029c:	1171      	asrs	r1, r6, #5
 801029e:	2201      	movs	r2, #1
 80102a0:	f006 061f 	and.w	r6, r6, #31
 80102a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102a8:	fa02 f606 	lsl.w	r6, r2, r6
 80102ac:	421e      	tst	r6, r3
 80102ae:	bf18      	it	ne
 80102b0:	4617      	movne	r7, r2
 80102b2:	f047 0720 	orr.w	r7, r7, #32
 80102b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102b8:	601d      	str	r5, [r3, #0]
 80102ba:	9b06      	ldr	r3, [sp, #24]
 80102bc:	601c      	str	r4, [r3, #0]
 80102be:	e6a4      	b.n	801000a <__gethex+0x110>
 80102c0:	4299      	cmp	r1, r3
 80102c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80102c6:	d8d8      	bhi.n	801027a <__gethex+0x380>
 80102c8:	68ab      	ldr	r3, [r5, #8]
 80102ca:	4599      	cmp	r9, r3
 80102cc:	db12      	blt.n	80102f4 <__gethex+0x3fa>
 80102ce:	6869      	ldr	r1, [r5, #4]
 80102d0:	9802      	ldr	r0, [sp, #8]
 80102d2:	3101      	adds	r1, #1
 80102d4:	f000 f974 	bl	80105c0 <_Balloc>
 80102d8:	692a      	ldr	r2, [r5, #16]
 80102da:	3202      	adds	r2, #2
 80102dc:	f105 010c 	add.w	r1, r5, #12
 80102e0:	4683      	mov	fp, r0
 80102e2:	0092      	lsls	r2, r2, #2
 80102e4:	300c      	adds	r0, #12
 80102e6:	f7fc fe29 	bl	800cf3c <memcpy>
 80102ea:	4629      	mov	r1, r5
 80102ec:	9802      	ldr	r0, [sp, #8]
 80102ee:	f000 f99b 	bl	8010628 <_Bfree>
 80102f2:	465d      	mov	r5, fp
 80102f4:	692b      	ldr	r3, [r5, #16]
 80102f6:	1c5a      	adds	r2, r3, #1
 80102f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80102fc:	612a      	str	r2, [r5, #16]
 80102fe:	2201      	movs	r2, #1
 8010300:	615a      	str	r2, [r3, #20]
 8010302:	e7c2      	b.n	801028a <__gethex+0x390>
 8010304:	692a      	ldr	r2, [r5, #16]
 8010306:	454a      	cmp	r2, r9
 8010308:	dd0b      	ble.n	8010322 <__gethex+0x428>
 801030a:	2101      	movs	r1, #1
 801030c:	4628      	mov	r0, r5
 801030e:	f7ff fda5 	bl	800fe5c <rshift>
 8010312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010316:	3401      	adds	r4, #1
 8010318:	42a3      	cmp	r3, r4
 801031a:	f6ff aed9 	blt.w	80100d0 <__gethex+0x1d6>
 801031e:	2701      	movs	r7, #1
 8010320:	e7c7      	b.n	80102b2 <__gethex+0x3b8>
 8010322:	f016 061f 	ands.w	r6, r6, #31
 8010326:	d0fa      	beq.n	801031e <__gethex+0x424>
 8010328:	449a      	add	sl, r3
 801032a:	f1c6 0620 	rsb	r6, r6, #32
 801032e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010332:	f000 fa09 	bl	8010748 <__hi0bits>
 8010336:	42b0      	cmp	r0, r6
 8010338:	dbe7      	blt.n	801030a <__gethex+0x410>
 801033a:	e7f0      	b.n	801031e <__gethex+0x424>

0801033c <L_shift>:
 801033c:	f1c2 0208 	rsb	r2, r2, #8
 8010340:	0092      	lsls	r2, r2, #2
 8010342:	b570      	push	{r4, r5, r6, lr}
 8010344:	f1c2 0620 	rsb	r6, r2, #32
 8010348:	6843      	ldr	r3, [r0, #4]
 801034a:	6804      	ldr	r4, [r0, #0]
 801034c:	fa03 f506 	lsl.w	r5, r3, r6
 8010350:	432c      	orrs	r4, r5
 8010352:	40d3      	lsrs	r3, r2
 8010354:	6004      	str	r4, [r0, #0]
 8010356:	f840 3f04 	str.w	r3, [r0, #4]!
 801035a:	4288      	cmp	r0, r1
 801035c:	d3f4      	bcc.n	8010348 <L_shift+0xc>
 801035e:	bd70      	pop	{r4, r5, r6, pc}

08010360 <__match>:
 8010360:	b530      	push	{r4, r5, lr}
 8010362:	6803      	ldr	r3, [r0, #0]
 8010364:	3301      	adds	r3, #1
 8010366:	f811 4b01 	ldrb.w	r4, [r1], #1
 801036a:	b914      	cbnz	r4, 8010372 <__match+0x12>
 801036c:	6003      	str	r3, [r0, #0]
 801036e:	2001      	movs	r0, #1
 8010370:	bd30      	pop	{r4, r5, pc}
 8010372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010376:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801037a:	2d19      	cmp	r5, #25
 801037c:	bf98      	it	ls
 801037e:	3220      	addls	r2, #32
 8010380:	42a2      	cmp	r2, r4
 8010382:	d0f0      	beq.n	8010366 <__match+0x6>
 8010384:	2000      	movs	r0, #0
 8010386:	e7f3      	b.n	8010370 <__match+0x10>

08010388 <__hexnan>:
 8010388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801038c:	680b      	ldr	r3, [r1, #0]
 801038e:	6801      	ldr	r1, [r0, #0]
 8010390:	115f      	asrs	r7, r3, #5
 8010392:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010396:	f013 031f 	ands.w	r3, r3, #31
 801039a:	b087      	sub	sp, #28
 801039c:	bf18      	it	ne
 801039e:	3704      	addne	r7, #4
 80103a0:	2500      	movs	r5, #0
 80103a2:	1f3e      	subs	r6, r7, #4
 80103a4:	4682      	mov	sl, r0
 80103a6:	4690      	mov	r8, r2
 80103a8:	9301      	str	r3, [sp, #4]
 80103aa:	f847 5c04 	str.w	r5, [r7, #-4]
 80103ae:	46b1      	mov	r9, r6
 80103b0:	4634      	mov	r4, r6
 80103b2:	9502      	str	r5, [sp, #8]
 80103b4:	46ab      	mov	fp, r5
 80103b6:	784a      	ldrb	r2, [r1, #1]
 80103b8:	1c4b      	adds	r3, r1, #1
 80103ba:	9303      	str	r3, [sp, #12]
 80103bc:	b342      	cbz	r2, 8010410 <__hexnan+0x88>
 80103be:	4610      	mov	r0, r2
 80103c0:	9105      	str	r1, [sp, #20]
 80103c2:	9204      	str	r2, [sp, #16]
 80103c4:	f7ff fd84 	bl	800fed0 <__hexdig_fun>
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d143      	bne.n	8010454 <__hexnan+0xcc>
 80103cc:	9a04      	ldr	r2, [sp, #16]
 80103ce:	9905      	ldr	r1, [sp, #20]
 80103d0:	2a20      	cmp	r2, #32
 80103d2:	d818      	bhi.n	8010406 <__hexnan+0x7e>
 80103d4:	9b02      	ldr	r3, [sp, #8]
 80103d6:	459b      	cmp	fp, r3
 80103d8:	dd13      	ble.n	8010402 <__hexnan+0x7a>
 80103da:	454c      	cmp	r4, r9
 80103dc:	d206      	bcs.n	80103ec <__hexnan+0x64>
 80103de:	2d07      	cmp	r5, #7
 80103e0:	dc04      	bgt.n	80103ec <__hexnan+0x64>
 80103e2:	462a      	mov	r2, r5
 80103e4:	4649      	mov	r1, r9
 80103e6:	4620      	mov	r0, r4
 80103e8:	f7ff ffa8 	bl	801033c <L_shift>
 80103ec:	4544      	cmp	r4, r8
 80103ee:	d944      	bls.n	801047a <__hexnan+0xf2>
 80103f0:	2300      	movs	r3, #0
 80103f2:	f1a4 0904 	sub.w	r9, r4, #4
 80103f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80103fa:	f8cd b008 	str.w	fp, [sp, #8]
 80103fe:	464c      	mov	r4, r9
 8010400:	461d      	mov	r5, r3
 8010402:	9903      	ldr	r1, [sp, #12]
 8010404:	e7d7      	b.n	80103b6 <__hexnan+0x2e>
 8010406:	2a29      	cmp	r2, #41	; 0x29
 8010408:	d14a      	bne.n	80104a0 <__hexnan+0x118>
 801040a:	3102      	adds	r1, #2
 801040c:	f8ca 1000 	str.w	r1, [sl]
 8010410:	f1bb 0f00 	cmp.w	fp, #0
 8010414:	d044      	beq.n	80104a0 <__hexnan+0x118>
 8010416:	454c      	cmp	r4, r9
 8010418:	d206      	bcs.n	8010428 <__hexnan+0xa0>
 801041a:	2d07      	cmp	r5, #7
 801041c:	dc04      	bgt.n	8010428 <__hexnan+0xa0>
 801041e:	462a      	mov	r2, r5
 8010420:	4649      	mov	r1, r9
 8010422:	4620      	mov	r0, r4
 8010424:	f7ff ff8a 	bl	801033c <L_shift>
 8010428:	4544      	cmp	r4, r8
 801042a:	d928      	bls.n	801047e <__hexnan+0xf6>
 801042c:	4643      	mov	r3, r8
 801042e:	f854 2b04 	ldr.w	r2, [r4], #4
 8010432:	f843 2b04 	str.w	r2, [r3], #4
 8010436:	42a6      	cmp	r6, r4
 8010438:	d2f9      	bcs.n	801042e <__hexnan+0xa6>
 801043a:	2200      	movs	r2, #0
 801043c:	f843 2b04 	str.w	r2, [r3], #4
 8010440:	429e      	cmp	r6, r3
 8010442:	d2fb      	bcs.n	801043c <__hexnan+0xb4>
 8010444:	6833      	ldr	r3, [r6, #0]
 8010446:	b91b      	cbnz	r3, 8010450 <__hexnan+0xc8>
 8010448:	4546      	cmp	r6, r8
 801044a:	d127      	bne.n	801049c <__hexnan+0x114>
 801044c:	2301      	movs	r3, #1
 801044e:	6033      	str	r3, [r6, #0]
 8010450:	2005      	movs	r0, #5
 8010452:	e026      	b.n	80104a2 <__hexnan+0x11a>
 8010454:	3501      	adds	r5, #1
 8010456:	2d08      	cmp	r5, #8
 8010458:	f10b 0b01 	add.w	fp, fp, #1
 801045c:	dd06      	ble.n	801046c <__hexnan+0xe4>
 801045e:	4544      	cmp	r4, r8
 8010460:	d9cf      	bls.n	8010402 <__hexnan+0x7a>
 8010462:	2300      	movs	r3, #0
 8010464:	f844 3c04 	str.w	r3, [r4, #-4]
 8010468:	2501      	movs	r5, #1
 801046a:	3c04      	subs	r4, #4
 801046c:	6822      	ldr	r2, [r4, #0]
 801046e:	f000 000f 	and.w	r0, r0, #15
 8010472:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010476:	6020      	str	r0, [r4, #0]
 8010478:	e7c3      	b.n	8010402 <__hexnan+0x7a>
 801047a:	2508      	movs	r5, #8
 801047c:	e7c1      	b.n	8010402 <__hexnan+0x7a>
 801047e:	9b01      	ldr	r3, [sp, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d0df      	beq.n	8010444 <__hexnan+0xbc>
 8010484:	f04f 32ff 	mov.w	r2, #4294967295
 8010488:	f1c3 0320 	rsb	r3, r3, #32
 801048c:	fa22 f303 	lsr.w	r3, r2, r3
 8010490:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010494:	401a      	ands	r2, r3
 8010496:	f847 2c04 	str.w	r2, [r7, #-4]
 801049a:	e7d3      	b.n	8010444 <__hexnan+0xbc>
 801049c:	3e04      	subs	r6, #4
 801049e:	e7d1      	b.n	8010444 <__hexnan+0xbc>
 80104a0:	2004      	movs	r0, #4
 80104a2:	b007      	add	sp, #28
 80104a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104a8 <__locale_ctype_ptr_l>:
 80104a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80104ac:	4770      	bx	lr

080104ae <__localeconv_l>:
 80104ae:	30f0      	adds	r0, #240	; 0xf0
 80104b0:	4770      	bx	lr
	...

080104b4 <_localeconv_r>:
 80104b4:	4b04      	ldr	r3, [pc, #16]	; (80104c8 <_localeconv_r+0x14>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	6a18      	ldr	r0, [r3, #32]
 80104ba:	4b04      	ldr	r3, [pc, #16]	; (80104cc <_localeconv_r+0x18>)
 80104bc:	2800      	cmp	r0, #0
 80104be:	bf08      	it	eq
 80104c0:	4618      	moveq	r0, r3
 80104c2:	30f0      	adds	r0, #240	; 0xf0
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	20000010 	.word	0x20000010
 80104cc:	20000074 	.word	0x20000074

080104d0 <__swhatbuf_r>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	460e      	mov	r6, r1
 80104d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104d8:	2900      	cmp	r1, #0
 80104da:	b096      	sub	sp, #88	; 0x58
 80104dc:	4614      	mov	r4, r2
 80104de:	461d      	mov	r5, r3
 80104e0:	da07      	bge.n	80104f2 <__swhatbuf_r+0x22>
 80104e2:	2300      	movs	r3, #0
 80104e4:	602b      	str	r3, [r5, #0]
 80104e6:	89b3      	ldrh	r3, [r6, #12]
 80104e8:	061a      	lsls	r2, r3, #24
 80104ea:	d410      	bmi.n	801050e <__swhatbuf_r+0x3e>
 80104ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104f0:	e00e      	b.n	8010510 <__swhatbuf_r+0x40>
 80104f2:	466a      	mov	r2, sp
 80104f4:	f000 ff88 	bl	8011408 <_fstat_r>
 80104f8:	2800      	cmp	r0, #0
 80104fa:	dbf2      	blt.n	80104e2 <__swhatbuf_r+0x12>
 80104fc:	9a01      	ldr	r2, [sp, #4]
 80104fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010502:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010506:	425a      	negs	r2, r3
 8010508:	415a      	adcs	r2, r3
 801050a:	602a      	str	r2, [r5, #0]
 801050c:	e7ee      	b.n	80104ec <__swhatbuf_r+0x1c>
 801050e:	2340      	movs	r3, #64	; 0x40
 8010510:	2000      	movs	r0, #0
 8010512:	6023      	str	r3, [r4, #0]
 8010514:	b016      	add	sp, #88	; 0x58
 8010516:	bd70      	pop	{r4, r5, r6, pc}

08010518 <__smakebuf_r>:
 8010518:	898b      	ldrh	r3, [r1, #12]
 801051a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801051c:	079d      	lsls	r5, r3, #30
 801051e:	4606      	mov	r6, r0
 8010520:	460c      	mov	r4, r1
 8010522:	d507      	bpl.n	8010534 <__smakebuf_r+0x1c>
 8010524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010528:	6023      	str	r3, [r4, #0]
 801052a:	6123      	str	r3, [r4, #16]
 801052c:	2301      	movs	r3, #1
 801052e:	6163      	str	r3, [r4, #20]
 8010530:	b002      	add	sp, #8
 8010532:	bd70      	pop	{r4, r5, r6, pc}
 8010534:	ab01      	add	r3, sp, #4
 8010536:	466a      	mov	r2, sp
 8010538:	f7ff ffca 	bl	80104d0 <__swhatbuf_r>
 801053c:	9900      	ldr	r1, [sp, #0]
 801053e:	4605      	mov	r5, r0
 8010540:	4630      	mov	r0, r6
 8010542:	f7fc fd5d 	bl	800d000 <_malloc_r>
 8010546:	b948      	cbnz	r0, 801055c <__smakebuf_r+0x44>
 8010548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801054c:	059a      	lsls	r2, r3, #22
 801054e:	d4ef      	bmi.n	8010530 <__smakebuf_r+0x18>
 8010550:	f023 0303 	bic.w	r3, r3, #3
 8010554:	f043 0302 	orr.w	r3, r3, #2
 8010558:	81a3      	strh	r3, [r4, #12]
 801055a:	e7e3      	b.n	8010524 <__smakebuf_r+0xc>
 801055c:	4b0d      	ldr	r3, [pc, #52]	; (8010594 <__smakebuf_r+0x7c>)
 801055e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	6020      	str	r0, [r4, #0]
 8010564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010568:	81a3      	strh	r3, [r4, #12]
 801056a:	9b00      	ldr	r3, [sp, #0]
 801056c:	6163      	str	r3, [r4, #20]
 801056e:	9b01      	ldr	r3, [sp, #4]
 8010570:	6120      	str	r0, [r4, #16]
 8010572:	b15b      	cbz	r3, 801058c <__smakebuf_r+0x74>
 8010574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010578:	4630      	mov	r0, r6
 801057a:	f000 ff57 	bl	801142c <_isatty_r>
 801057e:	b128      	cbz	r0, 801058c <__smakebuf_r+0x74>
 8010580:	89a3      	ldrh	r3, [r4, #12]
 8010582:	f023 0303 	bic.w	r3, r3, #3
 8010586:	f043 0301 	orr.w	r3, r3, #1
 801058a:	81a3      	strh	r3, [r4, #12]
 801058c:	89a3      	ldrh	r3, [r4, #12]
 801058e:	431d      	orrs	r5, r3
 8010590:	81a5      	strh	r5, [r4, #12]
 8010592:	e7cd      	b.n	8010530 <__smakebuf_r+0x18>
 8010594:	0800fd11 	.word	0x0800fd11

08010598 <__ascii_mbtowc>:
 8010598:	b082      	sub	sp, #8
 801059a:	b901      	cbnz	r1, 801059e <__ascii_mbtowc+0x6>
 801059c:	a901      	add	r1, sp, #4
 801059e:	b142      	cbz	r2, 80105b2 <__ascii_mbtowc+0x1a>
 80105a0:	b14b      	cbz	r3, 80105b6 <__ascii_mbtowc+0x1e>
 80105a2:	7813      	ldrb	r3, [r2, #0]
 80105a4:	600b      	str	r3, [r1, #0]
 80105a6:	7812      	ldrb	r2, [r2, #0]
 80105a8:	1c10      	adds	r0, r2, #0
 80105aa:	bf18      	it	ne
 80105ac:	2001      	movne	r0, #1
 80105ae:	b002      	add	sp, #8
 80105b0:	4770      	bx	lr
 80105b2:	4610      	mov	r0, r2
 80105b4:	e7fb      	b.n	80105ae <__ascii_mbtowc+0x16>
 80105b6:	f06f 0001 	mvn.w	r0, #1
 80105ba:	e7f8      	b.n	80105ae <__ascii_mbtowc+0x16>

080105bc <__malloc_lock>:
 80105bc:	4770      	bx	lr

080105be <__malloc_unlock>:
 80105be:	4770      	bx	lr

080105c0 <_Balloc>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80105c4:	4604      	mov	r4, r0
 80105c6:	460e      	mov	r6, r1
 80105c8:	b93d      	cbnz	r5, 80105da <_Balloc+0x1a>
 80105ca:	2010      	movs	r0, #16
 80105cc:	f7fc fca6 	bl	800cf1c <malloc>
 80105d0:	6260      	str	r0, [r4, #36]	; 0x24
 80105d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80105d6:	6005      	str	r5, [r0, #0]
 80105d8:	60c5      	str	r5, [r0, #12]
 80105da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80105dc:	68eb      	ldr	r3, [r5, #12]
 80105de:	b183      	cbz	r3, 8010602 <_Balloc+0x42>
 80105e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80105e8:	b9b8      	cbnz	r0, 801061a <_Balloc+0x5a>
 80105ea:	2101      	movs	r1, #1
 80105ec:	fa01 f506 	lsl.w	r5, r1, r6
 80105f0:	1d6a      	adds	r2, r5, #5
 80105f2:	0092      	lsls	r2, r2, #2
 80105f4:	4620      	mov	r0, r4
 80105f6:	f000 fbe2 	bl	8010dbe <_calloc_r>
 80105fa:	b160      	cbz	r0, 8010616 <_Balloc+0x56>
 80105fc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010600:	e00e      	b.n	8010620 <_Balloc+0x60>
 8010602:	2221      	movs	r2, #33	; 0x21
 8010604:	2104      	movs	r1, #4
 8010606:	4620      	mov	r0, r4
 8010608:	f000 fbd9 	bl	8010dbe <_calloc_r>
 801060c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801060e:	60e8      	str	r0, [r5, #12]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d1e4      	bne.n	80105e0 <_Balloc+0x20>
 8010616:	2000      	movs	r0, #0
 8010618:	bd70      	pop	{r4, r5, r6, pc}
 801061a:	6802      	ldr	r2, [r0, #0]
 801061c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010620:	2300      	movs	r3, #0
 8010622:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010626:	e7f7      	b.n	8010618 <_Balloc+0x58>

08010628 <_Bfree>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801062c:	4606      	mov	r6, r0
 801062e:	460d      	mov	r5, r1
 8010630:	b93c      	cbnz	r4, 8010642 <_Bfree+0x1a>
 8010632:	2010      	movs	r0, #16
 8010634:	f7fc fc72 	bl	800cf1c <malloc>
 8010638:	6270      	str	r0, [r6, #36]	; 0x24
 801063a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801063e:	6004      	str	r4, [r0, #0]
 8010640:	60c4      	str	r4, [r0, #12]
 8010642:	b13d      	cbz	r5, 8010654 <_Bfree+0x2c>
 8010644:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010646:	686a      	ldr	r2, [r5, #4]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801064e:	6029      	str	r1, [r5, #0]
 8010650:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010654:	bd70      	pop	{r4, r5, r6, pc}

08010656 <__multadd>:
 8010656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065a:	690d      	ldr	r5, [r1, #16]
 801065c:	461f      	mov	r7, r3
 801065e:	4606      	mov	r6, r0
 8010660:	460c      	mov	r4, r1
 8010662:	f101 0c14 	add.w	ip, r1, #20
 8010666:	2300      	movs	r3, #0
 8010668:	f8dc 0000 	ldr.w	r0, [ip]
 801066c:	b281      	uxth	r1, r0
 801066e:	fb02 7101 	mla	r1, r2, r1, r7
 8010672:	0c0f      	lsrs	r7, r1, #16
 8010674:	0c00      	lsrs	r0, r0, #16
 8010676:	fb02 7000 	mla	r0, r2, r0, r7
 801067a:	b289      	uxth	r1, r1
 801067c:	3301      	adds	r3, #1
 801067e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010682:	429d      	cmp	r5, r3
 8010684:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010688:	f84c 1b04 	str.w	r1, [ip], #4
 801068c:	dcec      	bgt.n	8010668 <__multadd+0x12>
 801068e:	b1d7      	cbz	r7, 80106c6 <__multadd+0x70>
 8010690:	68a3      	ldr	r3, [r4, #8]
 8010692:	42ab      	cmp	r3, r5
 8010694:	dc12      	bgt.n	80106bc <__multadd+0x66>
 8010696:	6861      	ldr	r1, [r4, #4]
 8010698:	4630      	mov	r0, r6
 801069a:	3101      	adds	r1, #1
 801069c:	f7ff ff90 	bl	80105c0 <_Balloc>
 80106a0:	6922      	ldr	r2, [r4, #16]
 80106a2:	3202      	adds	r2, #2
 80106a4:	f104 010c 	add.w	r1, r4, #12
 80106a8:	4680      	mov	r8, r0
 80106aa:	0092      	lsls	r2, r2, #2
 80106ac:	300c      	adds	r0, #12
 80106ae:	f7fc fc45 	bl	800cf3c <memcpy>
 80106b2:	4621      	mov	r1, r4
 80106b4:	4630      	mov	r0, r6
 80106b6:	f7ff ffb7 	bl	8010628 <_Bfree>
 80106ba:	4644      	mov	r4, r8
 80106bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80106c0:	3501      	adds	r5, #1
 80106c2:	615f      	str	r7, [r3, #20]
 80106c4:	6125      	str	r5, [r4, #16]
 80106c6:	4620      	mov	r0, r4
 80106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106cc <__s2b>:
 80106cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106d0:	460c      	mov	r4, r1
 80106d2:	4615      	mov	r5, r2
 80106d4:	461f      	mov	r7, r3
 80106d6:	2209      	movs	r2, #9
 80106d8:	3308      	adds	r3, #8
 80106da:	4606      	mov	r6, r0
 80106dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80106e0:	2100      	movs	r1, #0
 80106e2:	2201      	movs	r2, #1
 80106e4:	429a      	cmp	r2, r3
 80106e6:	db20      	blt.n	801072a <__s2b+0x5e>
 80106e8:	4630      	mov	r0, r6
 80106ea:	f7ff ff69 	bl	80105c0 <_Balloc>
 80106ee:	9b08      	ldr	r3, [sp, #32]
 80106f0:	6143      	str	r3, [r0, #20]
 80106f2:	2d09      	cmp	r5, #9
 80106f4:	f04f 0301 	mov.w	r3, #1
 80106f8:	6103      	str	r3, [r0, #16]
 80106fa:	dd19      	ble.n	8010730 <__s2b+0x64>
 80106fc:	f104 0809 	add.w	r8, r4, #9
 8010700:	46c1      	mov	r9, r8
 8010702:	442c      	add	r4, r5
 8010704:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010708:	4601      	mov	r1, r0
 801070a:	3b30      	subs	r3, #48	; 0x30
 801070c:	220a      	movs	r2, #10
 801070e:	4630      	mov	r0, r6
 8010710:	f7ff ffa1 	bl	8010656 <__multadd>
 8010714:	45a1      	cmp	r9, r4
 8010716:	d1f5      	bne.n	8010704 <__s2b+0x38>
 8010718:	eb08 0405 	add.w	r4, r8, r5
 801071c:	3c08      	subs	r4, #8
 801071e:	1b2d      	subs	r5, r5, r4
 8010720:	1963      	adds	r3, r4, r5
 8010722:	42bb      	cmp	r3, r7
 8010724:	db07      	blt.n	8010736 <__s2b+0x6a>
 8010726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801072a:	0052      	lsls	r2, r2, #1
 801072c:	3101      	adds	r1, #1
 801072e:	e7d9      	b.n	80106e4 <__s2b+0x18>
 8010730:	340a      	adds	r4, #10
 8010732:	2509      	movs	r5, #9
 8010734:	e7f3      	b.n	801071e <__s2b+0x52>
 8010736:	f814 3b01 	ldrb.w	r3, [r4], #1
 801073a:	4601      	mov	r1, r0
 801073c:	3b30      	subs	r3, #48	; 0x30
 801073e:	220a      	movs	r2, #10
 8010740:	4630      	mov	r0, r6
 8010742:	f7ff ff88 	bl	8010656 <__multadd>
 8010746:	e7eb      	b.n	8010720 <__s2b+0x54>

08010748 <__hi0bits>:
 8010748:	0c02      	lsrs	r2, r0, #16
 801074a:	0412      	lsls	r2, r2, #16
 801074c:	4603      	mov	r3, r0
 801074e:	b9b2      	cbnz	r2, 801077e <__hi0bits+0x36>
 8010750:	0403      	lsls	r3, r0, #16
 8010752:	2010      	movs	r0, #16
 8010754:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010758:	bf04      	itt	eq
 801075a:	021b      	lsleq	r3, r3, #8
 801075c:	3008      	addeq	r0, #8
 801075e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010762:	bf04      	itt	eq
 8010764:	011b      	lsleq	r3, r3, #4
 8010766:	3004      	addeq	r0, #4
 8010768:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801076c:	bf04      	itt	eq
 801076e:	009b      	lsleq	r3, r3, #2
 8010770:	3002      	addeq	r0, #2
 8010772:	2b00      	cmp	r3, #0
 8010774:	db06      	blt.n	8010784 <__hi0bits+0x3c>
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	d503      	bpl.n	8010782 <__hi0bits+0x3a>
 801077a:	3001      	adds	r0, #1
 801077c:	4770      	bx	lr
 801077e:	2000      	movs	r0, #0
 8010780:	e7e8      	b.n	8010754 <__hi0bits+0xc>
 8010782:	2020      	movs	r0, #32
 8010784:	4770      	bx	lr

08010786 <__lo0bits>:
 8010786:	6803      	ldr	r3, [r0, #0]
 8010788:	f013 0207 	ands.w	r2, r3, #7
 801078c:	4601      	mov	r1, r0
 801078e:	d00b      	beq.n	80107a8 <__lo0bits+0x22>
 8010790:	07da      	lsls	r2, r3, #31
 8010792:	d423      	bmi.n	80107dc <__lo0bits+0x56>
 8010794:	0798      	lsls	r0, r3, #30
 8010796:	bf49      	itett	mi
 8010798:	085b      	lsrmi	r3, r3, #1
 801079a:	089b      	lsrpl	r3, r3, #2
 801079c:	2001      	movmi	r0, #1
 801079e:	600b      	strmi	r3, [r1, #0]
 80107a0:	bf5c      	itt	pl
 80107a2:	600b      	strpl	r3, [r1, #0]
 80107a4:	2002      	movpl	r0, #2
 80107a6:	4770      	bx	lr
 80107a8:	b298      	uxth	r0, r3
 80107aa:	b9a8      	cbnz	r0, 80107d8 <__lo0bits+0x52>
 80107ac:	0c1b      	lsrs	r3, r3, #16
 80107ae:	2010      	movs	r0, #16
 80107b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80107b4:	bf04      	itt	eq
 80107b6:	0a1b      	lsreq	r3, r3, #8
 80107b8:	3008      	addeq	r0, #8
 80107ba:	071a      	lsls	r2, r3, #28
 80107bc:	bf04      	itt	eq
 80107be:	091b      	lsreq	r3, r3, #4
 80107c0:	3004      	addeq	r0, #4
 80107c2:	079a      	lsls	r2, r3, #30
 80107c4:	bf04      	itt	eq
 80107c6:	089b      	lsreq	r3, r3, #2
 80107c8:	3002      	addeq	r0, #2
 80107ca:	07da      	lsls	r2, r3, #31
 80107cc:	d402      	bmi.n	80107d4 <__lo0bits+0x4e>
 80107ce:	085b      	lsrs	r3, r3, #1
 80107d0:	d006      	beq.n	80107e0 <__lo0bits+0x5a>
 80107d2:	3001      	adds	r0, #1
 80107d4:	600b      	str	r3, [r1, #0]
 80107d6:	4770      	bx	lr
 80107d8:	4610      	mov	r0, r2
 80107da:	e7e9      	b.n	80107b0 <__lo0bits+0x2a>
 80107dc:	2000      	movs	r0, #0
 80107de:	4770      	bx	lr
 80107e0:	2020      	movs	r0, #32
 80107e2:	4770      	bx	lr

080107e4 <__i2b>:
 80107e4:	b510      	push	{r4, lr}
 80107e6:	460c      	mov	r4, r1
 80107e8:	2101      	movs	r1, #1
 80107ea:	f7ff fee9 	bl	80105c0 <_Balloc>
 80107ee:	2201      	movs	r2, #1
 80107f0:	6144      	str	r4, [r0, #20]
 80107f2:	6102      	str	r2, [r0, #16]
 80107f4:	bd10      	pop	{r4, pc}

080107f6 <__multiply>:
 80107f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fa:	4614      	mov	r4, r2
 80107fc:	690a      	ldr	r2, [r1, #16]
 80107fe:	6923      	ldr	r3, [r4, #16]
 8010800:	429a      	cmp	r2, r3
 8010802:	bfb8      	it	lt
 8010804:	460b      	movlt	r3, r1
 8010806:	4688      	mov	r8, r1
 8010808:	bfbc      	itt	lt
 801080a:	46a0      	movlt	r8, r4
 801080c:	461c      	movlt	r4, r3
 801080e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010812:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801081a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801081e:	eb07 0609 	add.w	r6, r7, r9
 8010822:	42b3      	cmp	r3, r6
 8010824:	bfb8      	it	lt
 8010826:	3101      	addlt	r1, #1
 8010828:	f7ff feca 	bl	80105c0 <_Balloc>
 801082c:	f100 0514 	add.w	r5, r0, #20
 8010830:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010834:	462b      	mov	r3, r5
 8010836:	2200      	movs	r2, #0
 8010838:	4573      	cmp	r3, lr
 801083a:	d316      	bcc.n	801086a <__multiply+0x74>
 801083c:	f104 0214 	add.w	r2, r4, #20
 8010840:	f108 0114 	add.w	r1, r8, #20
 8010844:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010848:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	9b00      	ldr	r3, [sp, #0]
 8010850:	9201      	str	r2, [sp, #4]
 8010852:	4293      	cmp	r3, r2
 8010854:	d80c      	bhi.n	8010870 <__multiply+0x7a>
 8010856:	2e00      	cmp	r6, #0
 8010858:	dd03      	ble.n	8010862 <__multiply+0x6c>
 801085a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801085e:	2b00      	cmp	r3, #0
 8010860:	d05d      	beq.n	801091e <__multiply+0x128>
 8010862:	6106      	str	r6, [r0, #16]
 8010864:	b003      	add	sp, #12
 8010866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801086a:	f843 2b04 	str.w	r2, [r3], #4
 801086e:	e7e3      	b.n	8010838 <__multiply+0x42>
 8010870:	f8b2 b000 	ldrh.w	fp, [r2]
 8010874:	f1bb 0f00 	cmp.w	fp, #0
 8010878:	d023      	beq.n	80108c2 <__multiply+0xcc>
 801087a:	4689      	mov	r9, r1
 801087c:	46ac      	mov	ip, r5
 801087e:	f04f 0800 	mov.w	r8, #0
 8010882:	f859 4b04 	ldr.w	r4, [r9], #4
 8010886:	f8dc a000 	ldr.w	sl, [ip]
 801088a:	b2a3      	uxth	r3, r4
 801088c:	fa1f fa8a 	uxth.w	sl, sl
 8010890:	fb0b a303 	mla	r3, fp, r3, sl
 8010894:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010898:	f8dc 4000 	ldr.w	r4, [ip]
 801089c:	4443      	add	r3, r8
 801089e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80108a2:	fb0b 840a 	mla	r4, fp, sl, r8
 80108a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80108aa:	46e2      	mov	sl, ip
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80108b2:	454f      	cmp	r7, r9
 80108b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80108b8:	f84a 3b04 	str.w	r3, [sl], #4
 80108bc:	d82b      	bhi.n	8010916 <__multiply+0x120>
 80108be:	f8cc 8004 	str.w	r8, [ip, #4]
 80108c2:	9b01      	ldr	r3, [sp, #4]
 80108c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80108c8:	3204      	adds	r2, #4
 80108ca:	f1ba 0f00 	cmp.w	sl, #0
 80108ce:	d020      	beq.n	8010912 <__multiply+0x11c>
 80108d0:	682b      	ldr	r3, [r5, #0]
 80108d2:	4689      	mov	r9, r1
 80108d4:	46a8      	mov	r8, r5
 80108d6:	f04f 0b00 	mov.w	fp, #0
 80108da:	f8b9 c000 	ldrh.w	ip, [r9]
 80108de:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80108e2:	fb0a 440c 	mla	r4, sl, ip, r4
 80108e6:	445c      	add	r4, fp
 80108e8:	46c4      	mov	ip, r8
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80108f0:	f84c 3b04 	str.w	r3, [ip], #4
 80108f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80108f8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80108fc:	0c1b      	lsrs	r3, r3, #16
 80108fe:	fb0a b303 	mla	r3, sl, r3, fp
 8010902:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010906:	454f      	cmp	r7, r9
 8010908:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801090c:	d805      	bhi.n	801091a <__multiply+0x124>
 801090e:	f8c8 3004 	str.w	r3, [r8, #4]
 8010912:	3504      	adds	r5, #4
 8010914:	e79b      	b.n	801084e <__multiply+0x58>
 8010916:	46d4      	mov	ip, sl
 8010918:	e7b3      	b.n	8010882 <__multiply+0x8c>
 801091a:	46e0      	mov	r8, ip
 801091c:	e7dd      	b.n	80108da <__multiply+0xe4>
 801091e:	3e01      	subs	r6, #1
 8010920:	e799      	b.n	8010856 <__multiply+0x60>
	...

08010924 <__pow5mult>:
 8010924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010928:	4615      	mov	r5, r2
 801092a:	f012 0203 	ands.w	r2, r2, #3
 801092e:	4606      	mov	r6, r0
 8010930:	460f      	mov	r7, r1
 8010932:	d007      	beq.n	8010944 <__pow5mult+0x20>
 8010934:	3a01      	subs	r2, #1
 8010936:	4c21      	ldr	r4, [pc, #132]	; (80109bc <__pow5mult+0x98>)
 8010938:	2300      	movs	r3, #0
 801093a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801093e:	f7ff fe8a 	bl	8010656 <__multadd>
 8010942:	4607      	mov	r7, r0
 8010944:	10ad      	asrs	r5, r5, #2
 8010946:	d035      	beq.n	80109b4 <__pow5mult+0x90>
 8010948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801094a:	b93c      	cbnz	r4, 801095c <__pow5mult+0x38>
 801094c:	2010      	movs	r0, #16
 801094e:	f7fc fae5 	bl	800cf1c <malloc>
 8010952:	6270      	str	r0, [r6, #36]	; 0x24
 8010954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010958:	6004      	str	r4, [r0, #0]
 801095a:	60c4      	str	r4, [r0, #12]
 801095c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010960:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010964:	b94c      	cbnz	r4, 801097a <__pow5mult+0x56>
 8010966:	f240 2171 	movw	r1, #625	; 0x271
 801096a:	4630      	mov	r0, r6
 801096c:	f7ff ff3a 	bl	80107e4 <__i2b>
 8010970:	2300      	movs	r3, #0
 8010972:	f8c8 0008 	str.w	r0, [r8, #8]
 8010976:	4604      	mov	r4, r0
 8010978:	6003      	str	r3, [r0, #0]
 801097a:	f04f 0800 	mov.w	r8, #0
 801097e:	07eb      	lsls	r3, r5, #31
 8010980:	d50a      	bpl.n	8010998 <__pow5mult+0x74>
 8010982:	4639      	mov	r1, r7
 8010984:	4622      	mov	r2, r4
 8010986:	4630      	mov	r0, r6
 8010988:	f7ff ff35 	bl	80107f6 <__multiply>
 801098c:	4639      	mov	r1, r7
 801098e:	4681      	mov	r9, r0
 8010990:	4630      	mov	r0, r6
 8010992:	f7ff fe49 	bl	8010628 <_Bfree>
 8010996:	464f      	mov	r7, r9
 8010998:	106d      	asrs	r5, r5, #1
 801099a:	d00b      	beq.n	80109b4 <__pow5mult+0x90>
 801099c:	6820      	ldr	r0, [r4, #0]
 801099e:	b938      	cbnz	r0, 80109b0 <__pow5mult+0x8c>
 80109a0:	4622      	mov	r2, r4
 80109a2:	4621      	mov	r1, r4
 80109a4:	4630      	mov	r0, r6
 80109a6:	f7ff ff26 	bl	80107f6 <__multiply>
 80109aa:	6020      	str	r0, [r4, #0]
 80109ac:	f8c0 8000 	str.w	r8, [r0]
 80109b0:	4604      	mov	r4, r0
 80109b2:	e7e4      	b.n	801097e <__pow5mult+0x5a>
 80109b4:	4638      	mov	r0, r7
 80109b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109ba:	bf00      	nop
 80109bc:	08011800 	.word	0x08011800

080109c0 <__lshift>:
 80109c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c4:	460c      	mov	r4, r1
 80109c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80109ca:	6923      	ldr	r3, [r4, #16]
 80109cc:	6849      	ldr	r1, [r1, #4]
 80109ce:	eb0a 0903 	add.w	r9, sl, r3
 80109d2:	68a3      	ldr	r3, [r4, #8]
 80109d4:	4607      	mov	r7, r0
 80109d6:	4616      	mov	r6, r2
 80109d8:	f109 0501 	add.w	r5, r9, #1
 80109dc:	42ab      	cmp	r3, r5
 80109de:	db32      	blt.n	8010a46 <__lshift+0x86>
 80109e0:	4638      	mov	r0, r7
 80109e2:	f7ff fded 	bl	80105c0 <_Balloc>
 80109e6:	2300      	movs	r3, #0
 80109e8:	4680      	mov	r8, r0
 80109ea:	f100 0114 	add.w	r1, r0, #20
 80109ee:	461a      	mov	r2, r3
 80109f0:	4553      	cmp	r3, sl
 80109f2:	db2b      	blt.n	8010a4c <__lshift+0x8c>
 80109f4:	6920      	ldr	r0, [r4, #16]
 80109f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109fa:	f104 0314 	add.w	r3, r4, #20
 80109fe:	f016 021f 	ands.w	r2, r6, #31
 8010a02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a0a:	d025      	beq.n	8010a58 <__lshift+0x98>
 8010a0c:	f1c2 0e20 	rsb	lr, r2, #32
 8010a10:	2000      	movs	r0, #0
 8010a12:	681e      	ldr	r6, [r3, #0]
 8010a14:	468a      	mov	sl, r1
 8010a16:	4096      	lsls	r6, r2
 8010a18:	4330      	orrs	r0, r6
 8010a1a:	f84a 0b04 	str.w	r0, [sl], #4
 8010a1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010a22:	459c      	cmp	ip, r3
 8010a24:	fa20 f00e 	lsr.w	r0, r0, lr
 8010a28:	d814      	bhi.n	8010a54 <__lshift+0x94>
 8010a2a:	6048      	str	r0, [r1, #4]
 8010a2c:	b108      	cbz	r0, 8010a32 <__lshift+0x72>
 8010a2e:	f109 0502 	add.w	r5, r9, #2
 8010a32:	3d01      	subs	r5, #1
 8010a34:	4638      	mov	r0, r7
 8010a36:	f8c8 5010 	str.w	r5, [r8, #16]
 8010a3a:	4621      	mov	r1, r4
 8010a3c:	f7ff fdf4 	bl	8010628 <_Bfree>
 8010a40:	4640      	mov	r0, r8
 8010a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a46:	3101      	adds	r1, #1
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	e7c7      	b.n	80109dc <__lshift+0x1c>
 8010a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010a50:	3301      	adds	r3, #1
 8010a52:	e7cd      	b.n	80109f0 <__lshift+0x30>
 8010a54:	4651      	mov	r1, sl
 8010a56:	e7dc      	b.n	8010a12 <__lshift+0x52>
 8010a58:	3904      	subs	r1, #4
 8010a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a62:	459c      	cmp	ip, r3
 8010a64:	d8f9      	bhi.n	8010a5a <__lshift+0x9a>
 8010a66:	e7e4      	b.n	8010a32 <__lshift+0x72>

08010a68 <__mcmp>:
 8010a68:	6903      	ldr	r3, [r0, #16]
 8010a6a:	690a      	ldr	r2, [r1, #16]
 8010a6c:	1a9b      	subs	r3, r3, r2
 8010a6e:	b530      	push	{r4, r5, lr}
 8010a70:	d10c      	bne.n	8010a8c <__mcmp+0x24>
 8010a72:	0092      	lsls	r2, r2, #2
 8010a74:	3014      	adds	r0, #20
 8010a76:	3114      	adds	r1, #20
 8010a78:	1884      	adds	r4, r0, r2
 8010a7a:	4411      	add	r1, r2
 8010a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a84:	4295      	cmp	r5, r2
 8010a86:	d003      	beq.n	8010a90 <__mcmp+0x28>
 8010a88:	d305      	bcc.n	8010a96 <__mcmp+0x2e>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	bd30      	pop	{r4, r5, pc}
 8010a90:	42a0      	cmp	r0, r4
 8010a92:	d3f3      	bcc.n	8010a7c <__mcmp+0x14>
 8010a94:	e7fa      	b.n	8010a8c <__mcmp+0x24>
 8010a96:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9a:	e7f7      	b.n	8010a8c <__mcmp+0x24>

08010a9c <__mdiff>:
 8010a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa0:	460d      	mov	r5, r1
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	4611      	mov	r1, r2
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	4614      	mov	r4, r2
 8010aaa:	f7ff ffdd 	bl	8010a68 <__mcmp>
 8010aae:	1e06      	subs	r6, r0, #0
 8010ab0:	d108      	bne.n	8010ac4 <__mdiff+0x28>
 8010ab2:	4631      	mov	r1, r6
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7ff fd83 	bl	80105c0 <_Balloc>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac4:	bfa4      	itt	ge
 8010ac6:	4623      	movge	r3, r4
 8010ac8:	462c      	movge	r4, r5
 8010aca:	4638      	mov	r0, r7
 8010acc:	6861      	ldr	r1, [r4, #4]
 8010ace:	bfa6      	itte	ge
 8010ad0:	461d      	movge	r5, r3
 8010ad2:	2600      	movge	r6, #0
 8010ad4:	2601      	movlt	r6, #1
 8010ad6:	f7ff fd73 	bl	80105c0 <_Balloc>
 8010ada:	692b      	ldr	r3, [r5, #16]
 8010adc:	60c6      	str	r6, [r0, #12]
 8010ade:	6926      	ldr	r6, [r4, #16]
 8010ae0:	f105 0914 	add.w	r9, r5, #20
 8010ae4:	f104 0214 	add.w	r2, r4, #20
 8010ae8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010aec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010af0:	f100 0514 	add.w	r5, r0, #20
 8010af4:	f04f 0e00 	mov.w	lr, #0
 8010af8:	f852 ab04 	ldr.w	sl, [r2], #4
 8010afc:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b00:	fa1e f18a 	uxtah	r1, lr, sl
 8010b04:	b2a3      	uxth	r3, r4
 8010b06:	1ac9      	subs	r1, r1, r3
 8010b08:	0c23      	lsrs	r3, r4, #16
 8010b0a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010b0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010b12:	b289      	uxth	r1, r1
 8010b14:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010b18:	45c8      	cmp	r8, r9
 8010b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010b1e:	4694      	mov	ip, r2
 8010b20:	f845 3b04 	str.w	r3, [r5], #4
 8010b24:	d8e8      	bhi.n	8010af8 <__mdiff+0x5c>
 8010b26:	45bc      	cmp	ip, r7
 8010b28:	d304      	bcc.n	8010b34 <__mdiff+0x98>
 8010b2a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010b2e:	b183      	cbz	r3, 8010b52 <__mdiff+0xb6>
 8010b30:	6106      	str	r6, [r0, #16]
 8010b32:	e7c5      	b.n	8010ac0 <__mdiff+0x24>
 8010b34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010b38:	fa1e f381 	uxtah	r3, lr, r1
 8010b3c:	141a      	asrs	r2, r3, #16
 8010b3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b48:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010b4c:	f845 3b04 	str.w	r3, [r5], #4
 8010b50:	e7e9      	b.n	8010b26 <__mdiff+0x8a>
 8010b52:	3e01      	subs	r6, #1
 8010b54:	e7e9      	b.n	8010b2a <__mdiff+0x8e>
	...

08010b58 <__ulp>:
 8010b58:	4b12      	ldr	r3, [pc, #72]	; (8010ba4 <__ulp+0x4c>)
 8010b5a:	ee10 2a90 	vmov	r2, s1
 8010b5e:	401a      	ands	r2, r3
 8010b60:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	dd04      	ble.n	8010b72 <__ulp+0x1a>
 8010b68:	2000      	movs	r0, #0
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	ec41 0b10 	vmov	d0, r0, r1
 8010b70:	4770      	bx	lr
 8010b72:	425b      	negs	r3, r3
 8010b74:	151b      	asrs	r3, r3, #20
 8010b76:	2b13      	cmp	r3, #19
 8010b78:	f04f 0000 	mov.w	r0, #0
 8010b7c:	f04f 0100 	mov.w	r1, #0
 8010b80:	dc04      	bgt.n	8010b8c <__ulp+0x34>
 8010b82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010b86:	fa42 f103 	asr.w	r1, r2, r3
 8010b8a:	e7ef      	b.n	8010b6c <__ulp+0x14>
 8010b8c:	3b14      	subs	r3, #20
 8010b8e:	2b1e      	cmp	r3, #30
 8010b90:	f04f 0201 	mov.w	r2, #1
 8010b94:	bfda      	itte	le
 8010b96:	f1c3 031f 	rsble	r3, r3, #31
 8010b9a:	fa02 f303 	lslle.w	r3, r2, r3
 8010b9e:	4613      	movgt	r3, r2
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	e7e3      	b.n	8010b6c <__ulp+0x14>
 8010ba4:	7ff00000 	.word	0x7ff00000

08010ba8 <__b2d>:
 8010ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010baa:	6905      	ldr	r5, [r0, #16]
 8010bac:	f100 0714 	add.w	r7, r0, #20
 8010bb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010bb4:	1f2e      	subs	r6, r5, #4
 8010bb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f7ff fdc4 	bl	8010748 <__hi0bits>
 8010bc0:	f1c0 0320 	rsb	r3, r0, #32
 8010bc4:	280a      	cmp	r0, #10
 8010bc6:	600b      	str	r3, [r1, #0]
 8010bc8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010c40 <__b2d+0x98>
 8010bcc:	dc14      	bgt.n	8010bf8 <__b2d+0x50>
 8010bce:	f1c0 0e0b 	rsb	lr, r0, #11
 8010bd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8010bd6:	42b7      	cmp	r7, r6
 8010bd8:	ea41 030c 	orr.w	r3, r1, ip
 8010bdc:	bf34      	ite	cc
 8010bde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010be2:	2100      	movcs	r1, #0
 8010be4:	3015      	adds	r0, #21
 8010be6:	fa04 f000 	lsl.w	r0, r4, r0
 8010bea:	fa21 f10e 	lsr.w	r1, r1, lr
 8010bee:	ea40 0201 	orr.w	r2, r0, r1
 8010bf2:	ec43 2b10 	vmov	d0, r2, r3
 8010bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bf8:	42b7      	cmp	r7, r6
 8010bfa:	bf3a      	itte	cc
 8010bfc:	f1a5 0608 	subcc.w	r6, r5, #8
 8010c00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c04:	2100      	movcs	r1, #0
 8010c06:	380b      	subs	r0, #11
 8010c08:	d015      	beq.n	8010c36 <__b2d+0x8e>
 8010c0a:	4084      	lsls	r4, r0
 8010c0c:	f1c0 0520 	rsb	r5, r0, #32
 8010c10:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010c14:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010c18:	42be      	cmp	r6, r7
 8010c1a:	fa21 fc05 	lsr.w	ip, r1, r5
 8010c1e:	ea44 030c 	orr.w	r3, r4, ip
 8010c22:	bf8c      	ite	hi
 8010c24:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010c28:	2400      	movls	r4, #0
 8010c2a:	fa01 f000 	lsl.w	r0, r1, r0
 8010c2e:	40ec      	lsrs	r4, r5
 8010c30:	ea40 0204 	orr.w	r2, r0, r4
 8010c34:	e7dd      	b.n	8010bf2 <__b2d+0x4a>
 8010c36:	ea44 030c 	orr.w	r3, r4, ip
 8010c3a:	460a      	mov	r2, r1
 8010c3c:	e7d9      	b.n	8010bf2 <__b2d+0x4a>
 8010c3e:	bf00      	nop
 8010c40:	3ff00000 	.word	0x3ff00000

08010c44 <__d2b>:
 8010c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c48:	460e      	mov	r6, r1
 8010c4a:	2101      	movs	r1, #1
 8010c4c:	ec59 8b10 	vmov	r8, r9, d0
 8010c50:	4615      	mov	r5, r2
 8010c52:	f7ff fcb5 	bl	80105c0 <_Balloc>
 8010c56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010c5a:	4607      	mov	r7, r0
 8010c5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c60:	bb34      	cbnz	r4, 8010cb0 <__d2b+0x6c>
 8010c62:	9301      	str	r3, [sp, #4]
 8010c64:	f1b8 0300 	subs.w	r3, r8, #0
 8010c68:	d027      	beq.n	8010cba <__d2b+0x76>
 8010c6a:	a802      	add	r0, sp, #8
 8010c6c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010c70:	f7ff fd89 	bl	8010786 <__lo0bits>
 8010c74:	9900      	ldr	r1, [sp, #0]
 8010c76:	b1f0      	cbz	r0, 8010cb6 <__d2b+0x72>
 8010c78:	9a01      	ldr	r2, [sp, #4]
 8010c7a:	f1c0 0320 	rsb	r3, r0, #32
 8010c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c82:	430b      	orrs	r3, r1
 8010c84:	40c2      	lsrs	r2, r0
 8010c86:	617b      	str	r3, [r7, #20]
 8010c88:	9201      	str	r2, [sp, #4]
 8010c8a:	9b01      	ldr	r3, [sp, #4]
 8010c8c:	61bb      	str	r3, [r7, #24]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	bf14      	ite	ne
 8010c92:	2102      	movne	r1, #2
 8010c94:	2101      	moveq	r1, #1
 8010c96:	6139      	str	r1, [r7, #16]
 8010c98:	b1c4      	cbz	r4, 8010ccc <__d2b+0x88>
 8010c9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010c9e:	4404      	add	r4, r0
 8010ca0:	6034      	str	r4, [r6, #0]
 8010ca2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ca6:	6028      	str	r0, [r5, #0]
 8010ca8:	4638      	mov	r0, r7
 8010caa:	b003      	add	sp, #12
 8010cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cb4:	e7d5      	b.n	8010c62 <__d2b+0x1e>
 8010cb6:	6179      	str	r1, [r7, #20]
 8010cb8:	e7e7      	b.n	8010c8a <__d2b+0x46>
 8010cba:	a801      	add	r0, sp, #4
 8010cbc:	f7ff fd63 	bl	8010786 <__lo0bits>
 8010cc0:	9b01      	ldr	r3, [sp, #4]
 8010cc2:	617b      	str	r3, [r7, #20]
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	6139      	str	r1, [r7, #16]
 8010cc8:	3020      	adds	r0, #32
 8010cca:	e7e5      	b.n	8010c98 <__d2b+0x54>
 8010ccc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010cd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010cd4:	6030      	str	r0, [r6, #0]
 8010cd6:	6918      	ldr	r0, [r3, #16]
 8010cd8:	f7ff fd36 	bl	8010748 <__hi0bits>
 8010cdc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010ce0:	e7e1      	b.n	8010ca6 <__d2b+0x62>

08010ce2 <__ratio>:
 8010ce2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce6:	4688      	mov	r8, r1
 8010ce8:	4669      	mov	r1, sp
 8010cea:	4681      	mov	r9, r0
 8010cec:	f7ff ff5c 	bl	8010ba8 <__b2d>
 8010cf0:	a901      	add	r1, sp, #4
 8010cf2:	4640      	mov	r0, r8
 8010cf4:	ec57 6b10 	vmov	r6, r7, d0
 8010cf8:	f7ff ff56 	bl	8010ba8 <__b2d>
 8010cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010d04:	eba3 0c02 	sub.w	ip, r3, r2
 8010d08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d0c:	1a9b      	subs	r3, r3, r2
 8010d0e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010d12:	ec5b ab10 	vmov	sl, fp, d0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	bfce      	itee	gt
 8010d1a:	463a      	movgt	r2, r7
 8010d1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d20:	465a      	movle	r2, fp
 8010d22:	4659      	mov	r1, fp
 8010d24:	463d      	mov	r5, r7
 8010d26:	bfd4      	ite	le
 8010d28:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010d2c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010d30:	4630      	mov	r0, r6
 8010d32:	ee10 2a10 	vmov	r2, s0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4629      	mov	r1, r5
 8010d3a:	f7ef fd97 	bl	800086c <__aeabi_ddiv>
 8010d3e:	ec41 0b10 	vmov	d0, r0, r1
 8010d42:	b003      	add	sp, #12
 8010d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d48 <__copybits>:
 8010d48:	3901      	subs	r1, #1
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	1149      	asrs	r1, r1, #5
 8010d4e:	6914      	ldr	r4, [r2, #16]
 8010d50:	3101      	adds	r1, #1
 8010d52:	f102 0314 	add.w	r3, r2, #20
 8010d56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d5e:	42a3      	cmp	r3, r4
 8010d60:	4602      	mov	r2, r0
 8010d62:	d303      	bcc.n	8010d6c <__copybits+0x24>
 8010d64:	2300      	movs	r3, #0
 8010d66:	428a      	cmp	r2, r1
 8010d68:	d305      	bcc.n	8010d76 <__copybits+0x2e>
 8010d6a:	bd10      	pop	{r4, pc}
 8010d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d70:	f840 2b04 	str.w	r2, [r0], #4
 8010d74:	e7f3      	b.n	8010d5e <__copybits+0x16>
 8010d76:	f842 3b04 	str.w	r3, [r2], #4
 8010d7a:	e7f4      	b.n	8010d66 <__copybits+0x1e>

08010d7c <__any_on>:
 8010d7c:	f100 0214 	add.w	r2, r0, #20
 8010d80:	6900      	ldr	r0, [r0, #16]
 8010d82:	114b      	asrs	r3, r1, #5
 8010d84:	4298      	cmp	r0, r3
 8010d86:	b510      	push	{r4, lr}
 8010d88:	db11      	blt.n	8010dae <__any_on+0x32>
 8010d8a:	dd0a      	ble.n	8010da2 <__any_on+0x26>
 8010d8c:	f011 011f 	ands.w	r1, r1, #31
 8010d90:	d007      	beq.n	8010da2 <__any_on+0x26>
 8010d92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d96:	fa24 f001 	lsr.w	r0, r4, r1
 8010d9a:	fa00 f101 	lsl.w	r1, r0, r1
 8010d9e:	428c      	cmp	r4, r1
 8010da0:	d10b      	bne.n	8010dba <__any_on+0x3e>
 8010da2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d803      	bhi.n	8010db2 <__any_on+0x36>
 8010daa:	2000      	movs	r0, #0
 8010dac:	bd10      	pop	{r4, pc}
 8010dae:	4603      	mov	r3, r0
 8010db0:	e7f7      	b.n	8010da2 <__any_on+0x26>
 8010db2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010db6:	2900      	cmp	r1, #0
 8010db8:	d0f5      	beq.n	8010da6 <__any_on+0x2a>
 8010dba:	2001      	movs	r0, #1
 8010dbc:	e7f6      	b.n	8010dac <__any_on+0x30>

08010dbe <_calloc_r>:
 8010dbe:	b538      	push	{r3, r4, r5, lr}
 8010dc0:	fb02 f401 	mul.w	r4, r2, r1
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	f7fc f91b 	bl	800d000 <_malloc_r>
 8010dca:	4605      	mov	r5, r0
 8010dcc:	b118      	cbz	r0, 8010dd6 <_calloc_r+0x18>
 8010dce:	4622      	mov	r2, r4
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	f7fc f8be 	bl	800cf52 <memset>
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	bd38      	pop	{r3, r4, r5, pc}

08010dda <__ssputs_r>:
 8010dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dde:	688e      	ldr	r6, [r1, #8]
 8010de0:	429e      	cmp	r6, r3
 8010de2:	4682      	mov	sl, r0
 8010de4:	460c      	mov	r4, r1
 8010de6:	4690      	mov	r8, r2
 8010de8:	4699      	mov	r9, r3
 8010dea:	d837      	bhi.n	8010e5c <__ssputs_r+0x82>
 8010dec:	898a      	ldrh	r2, [r1, #12]
 8010dee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010df2:	d031      	beq.n	8010e58 <__ssputs_r+0x7e>
 8010df4:	6825      	ldr	r5, [r4, #0]
 8010df6:	6909      	ldr	r1, [r1, #16]
 8010df8:	1a6f      	subs	r7, r5, r1
 8010dfa:	6965      	ldr	r5, [r4, #20]
 8010dfc:	2302      	movs	r3, #2
 8010dfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e02:	fb95 f5f3 	sdiv	r5, r5, r3
 8010e06:	f109 0301 	add.w	r3, r9, #1
 8010e0a:	443b      	add	r3, r7
 8010e0c:	429d      	cmp	r5, r3
 8010e0e:	bf38      	it	cc
 8010e10:	461d      	movcc	r5, r3
 8010e12:	0553      	lsls	r3, r2, #21
 8010e14:	d530      	bpl.n	8010e78 <__ssputs_r+0x9e>
 8010e16:	4629      	mov	r1, r5
 8010e18:	f7fc f8f2 	bl	800d000 <_malloc_r>
 8010e1c:	4606      	mov	r6, r0
 8010e1e:	b950      	cbnz	r0, 8010e36 <__ssputs_r+0x5c>
 8010e20:	230c      	movs	r3, #12
 8010e22:	f8ca 3000 	str.w	r3, [sl]
 8010e26:	89a3      	ldrh	r3, [r4, #12]
 8010e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e2c:	81a3      	strh	r3, [r4, #12]
 8010e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e36:	463a      	mov	r2, r7
 8010e38:	6921      	ldr	r1, [r4, #16]
 8010e3a:	f7fc f87f 	bl	800cf3c <memcpy>
 8010e3e:	89a3      	ldrh	r3, [r4, #12]
 8010e40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e48:	81a3      	strh	r3, [r4, #12]
 8010e4a:	6126      	str	r6, [r4, #16]
 8010e4c:	6165      	str	r5, [r4, #20]
 8010e4e:	443e      	add	r6, r7
 8010e50:	1bed      	subs	r5, r5, r7
 8010e52:	6026      	str	r6, [r4, #0]
 8010e54:	60a5      	str	r5, [r4, #8]
 8010e56:	464e      	mov	r6, r9
 8010e58:	454e      	cmp	r6, r9
 8010e5a:	d900      	bls.n	8010e5e <__ssputs_r+0x84>
 8010e5c:	464e      	mov	r6, r9
 8010e5e:	4632      	mov	r2, r6
 8010e60:	4641      	mov	r1, r8
 8010e62:	6820      	ldr	r0, [r4, #0]
 8010e64:	f000 fb04 	bl	8011470 <memmove>
 8010e68:	68a3      	ldr	r3, [r4, #8]
 8010e6a:	1b9b      	subs	r3, r3, r6
 8010e6c:	60a3      	str	r3, [r4, #8]
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	441e      	add	r6, r3
 8010e72:	6026      	str	r6, [r4, #0]
 8010e74:	2000      	movs	r0, #0
 8010e76:	e7dc      	b.n	8010e32 <__ssputs_r+0x58>
 8010e78:	462a      	mov	r2, r5
 8010e7a:	f000 fb12 	bl	80114a2 <_realloc_r>
 8010e7e:	4606      	mov	r6, r0
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d1e2      	bne.n	8010e4a <__ssputs_r+0x70>
 8010e84:	6921      	ldr	r1, [r4, #16]
 8010e86:	4650      	mov	r0, sl
 8010e88:	f7fc f86c 	bl	800cf64 <_free_r>
 8010e8c:	e7c8      	b.n	8010e20 <__ssputs_r+0x46>
	...

08010e90 <_svfiprintf_r>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	461d      	mov	r5, r3
 8010e96:	898b      	ldrh	r3, [r1, #12]
 8010e98:	061f      	lsls	r7, r3, #24
 8010e9a:	b09d      	sub	sp, #116	; 0x74
 8010e9c:	4680      	mov	r8, r0
 8010e9e:	460c      	mov	r4, r1
 8010ea0:	4616      	mov	r6, r2
 8010ea2:	d50f      	bpl.n	8010ec4 <_svfiprintf_r+0x34>
 8010ea4:	690b      	ldr	r3, [r1, #16]
 8010ea6:	b96b      	cbnz	r3, 8010ec4 <_svfiprintf_r+0x34>
 8010ea8:	2140      	movs	r1, #64	; 0x40
 8010eaa:	f7fc f8a9 	bl	800d000 <_malloc_r>
 8010eae:	6020      	str	r0, [r4, #0]
 8010eb0:	6120      	str	r0, [r4, #16]
 8010eb2:	b928      	cbnz	r0, 8010ec0 <_svfiprintf_r+0x30>
 8010eb4:	230c      	movs	r3, #12
 8010eb6:	f8c8 3000 	str.w	r3, [r8]
 8010eba:	f04f 30ff 	mov.w	r0, #4294967295
 8010ebe:	e0c8      	b.n	8011052 <_svfiprintf_r+0x1c2>
 8010ec0:	2340      	movs	r3, #64	; 0x40
 8010ec2:	6163      	str	r3, [r4, #20]
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ec8:	2320      	movs	r3, #32
 8010eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ece:	2330      	movs	r3, #48	; 0x30
 8010ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ed4:	9503      	str	r5, [sp, #12]
 8010ed6:	f04f 0b01 	mov.w	fp, #1
 8010eda:	4637      	mov	r7, r6
 8010edc:	463d      	mov	r5, r7
 8010ede:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010ee2:	b10b      	cbz	r3, 8010ee8 <_svfiprintf_r+0x58>
 8010ee4:	2b25      	cmp	r3, #37	; 0x25
 8010ee6:	d13e      	bne.n	8010f66 <_svfiprintf_r+0xd6>
 8010ee8:	ebb7 0a06 	subs.w	sl, r7, r6
 8010eec:	d00b      	beq.n	8010f06 <_svfiprintf_r+0x76>
 8010eee:	4653      	mov	r3, sl
 8010ef0:	4632      	mov	r2, r6
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4640      	mov	r0, r8
 8010ef6:	f7ff ff70 	bl	8010dda <__ssputs_r>
 8010efa:	3001      	adds	r0, #1
 8010efc:	f000 80a4 	beq.w	8011048 <_svfiprintf_r+0x1b8>
 8010f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f02:	4453      	add	r3, sl
 8010f04:	9309      	str	r3, [sp, #36]	; 0x24
 8010f06:	783b      	ldrb	r3, [r7, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 809d 	beq.w	8011048 <_svfiprintf_r+0x1b8>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f04f 32ff 	mov.w	r2, #4294967295
 8010f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f18:	9304      	str	r3, [sp, #16]
 8010f1a:	9307      	str	r3, [sp, #28]
 8010f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f20:	931a      	str	r3, [sp, #104]	; 0x68
 8010f22:	462f      	mov	r7, r5
 8010f24:	2205      	movs	r2, #5
 8010f26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010f2a:	4850      	ldr	r0, [pc, #320]	; (801106c <_svfiprintf_r+0x1dc>)
 8010f2c:	f7ef f968 	bl	8000200 <memchr>
 8010f30:	9b04      	ldr	r3, [sp, #16]
 8010f32:	b9d0      	cbnz	r0, 8010f6a <_svfiprintf_r+0xda>
 8010f34:	06d9      	lsls	r1, r3, #27
 8010f36:	bf44      	itt	mi
 8010f38:	2220      	movmi	r2, #32
 8010f3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010f3e:	071a      	lsls	r2, r3, #28
 8010f40:	bf44      	itt	mi
 8010f42:	222b      	movmi	r2, #43	; 0x2b
 8010f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010f48:	782a      	ldrb	r2, [r5, #0]
 8010f4a:	2a2a      	cmp	r2, #42	; 0x2a
 8010f4c:	d015      	beq.n	8010f7a <_svfiprintf_r+0xea>
 8010f4e:	9a07      	ldr	r2, [sp, #28]
 8010f50:	462f      	mov	r7, r5
 8010f52:	2000      	movs	r0, #0
 8010f54:	250a      	movs	r5, #10
 8010f56:	4639      	mov	r1, r7
 8010f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f5c:	3b30      	subs	r3, #48	; 0x30
 8010f5e:	2b09      	cmp	r3, #9
 8010f60:	d94d      	bls.n	8010ffe <_svfiprintf_r+0x16e>
 8010f62:	b1b8      	cbz	r0, 8010f94 <_svfiprintf_r+0x104>
 8010f64:	e00f      	b.n	8010f86 <_svfiprintf_r+0xf6>
 8010f66:	462f      	mov	r7, r5
 8010f68:	e7b8      	b.n	8010edc <_svfiprintf_r+0x4c>
 8010f6a:	4a40      	ldr	r2, [pc, #256]	; (801106c <_svfiprintf_r+0x1dc>)
 8010f6c:	1a80      	subs	r0, r0, r2
 8010f6e:	fa0b f000 	lsl.w	r0, fp, r0
 8010f72:	4318      	orrs	r0, r3
 8010f74:	9004      	str	r0, [sp, #16]
 8010f76:	463d      	mov	r5, r7
 8010f78:	e7d3      	b.n	8010f22 <_svfiprintf_r+0x92>
 8010f7a:	9a03      	ldr	r2, [sp, #12]
 8010f7c:	1d11      	adds	r1, r2, #4
 8010f7e:	6812      	ldr	r2, [r2, #0]
 8010f80:	9103      	str	r1, [sp, #12]
 8010f82:	2a00      	cmp	r2, #0
 8010f84:	db01      	blt.n	8010f8a <_svfiprintf_r+0xfa>
 8010f86:	9207      	str	r2, [sp, #28]
 8010f88:	e004      	b.n	8010f94 <_svfiprintf_r+0x104>
 8010f8a:	4252      	negs	r2, r2
 8010f8c:	f043 0302 	orr.w	r3, r3, #2
 8010f90:	9207      	str	r2, [sp, #28]
 8010f92:	9304      	str	r3, [sp, #16]
 8010f94:	783b      	ldrb	r3, [r7, #0]
 8010f96:	2b2e      	cmp	r3, #46	; 0x2e
 8010f98:	d10c      	bne.n	8010fb4 <_svfiprintf_r+0x124>
 8010f9a:	787b      	ldrb	r3, [r7, #1]
 8010f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8010f9e:	d133      	bne.n	8011008 <_svfiprintf_r+0x178>
 8010fa0:	9b03      	ldr	r3, [sp, #12]
 8010fa2:	1d1a      	adds	r2, r3, #4
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	9203      	str	r2, [sp, #12]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	bfb8      	it	lt
 8010fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fb0:	3702      	adds	r7, #2
 8010fb2:	9305      	str	r3, [sp, #20]
 8010fb4:	4d2e      	ldr	r5, [pc, #184]	; (8011070 <_svfiprintf_r+0x1e0>)
 8010fb6:	7839      	ldrb	r1, [r7, #0]
 8010fb8:	2203      	movs	r2, #3
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f7ef f920 	bl	8000200 <memchr>
 8010fc0:	b138      	cbz	r0, 8010fd2 <_svfiprintf_r+0x142>
 8010fc2:	2340      	movs	r3, #64	; 0x40
 8010fc4:	1b40      	subs	r0, r0, r5
 8010fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8010fca:	9b04      	ldr	r3, [sp, #16]
 8010fcc:	4303      	orrs	r3, r0
 8010fce:	3701      	adds	r7, #1
 8010fd0:	9304      	str	r3, [sp, #16]
 8010fd2:	7839      	ldrb	r1, [r7, #0]
 8010fd4:	4827      	ldr	r0, [pc, #156]	; (8011074 <_svfiprintf_r+0x1e4>)
 8010fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fda:	2206      	movs	r2, #6
 8010fdc:	1c7e      	adds	r6, r7, #1
 8010fde:	f7ef f90f 	bl	8000200 <memchr>
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	d038      	beq.n	8011058 <_svfiprintf_r+0x1c8>
 8010fe6:	4b24      	ldr	r3, [pc, #144]	; (8011078 <_svfiprintf_r+0x1e8>)
 8010fe8:	bb13      	cbnz	r3, 8011030 <_svfiprintf_r+0x1a0>
 8010fea:	9b03      	ldr	r3, [sp, #12]
 8010fec:	3307      	adds	r3, #7
 8010fee:	f023 0307 	bic.w	r3, r3, #7
 8010ff2:	3308      	adds	r3, #8
 8010ff4:	9303      	str	r3, [sp, #12]
 8010ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff8:	444b      	add	r3, r9
 8010ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8010ffc:	e76d      	b.n	8010eda <_svfiprintf_r+0x4a>
 8010ffe:	fb05 3202 	mla	r2, r5, r2, r3
 8011002:	2001      	movs	r0, #1
 8011004:	460f      	mov	r7, r1
 8011006:	e7a6      	b.n	8010f56 <_svfiprintf_r+0xc6>
 8011008:	2300      	movs	r3, #0
 801100a:	3701      	adds	r7, #1
 801100c:	9305      	str	r3, [sp, #20]
 801100e:	4619      	mov	r1, r3
 8011010:	250a      	movs	r5, #10
 8011012:	4638      	mov	r0, r7
 8011014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011018:	3a30      	subs	r2, #48	; 0x30
 801101a:	2a09      	cmp	r2, #9
 801101c:	d903      	bls.n	8011026 <_svfiprintf_r+0x196>
 801101e:	2b00      	cmp	r3, #0
 8011020:	d0c8      	beq.n	8010fb4 <_svfiprintf_r+0x124>
 8011022:	9105      	str	r1, [sp, #20]
 8011024:	e7c6      	b.n	8010fb4 <_svfiprintf_r+0x124>
 8011026:	fb05 2101 	mla	r1, r5, r1, r2
 801102a:	2301      	movs	r3, #1
 801102c:	4607      	mov	r7, r0
 801102e:	e7f0      	b.n	8011012 <_svfiprintf_r+0x182>
 8011030:	ab03      	add	r3, sp, #12
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	4622      	mov	r2, r4
 8011036:	4b11      	ldr	r3, [pc, #68]	; (801107c <_svfiprintf_r+0x1ec>)
 8011038:	a904      	add	r1, sp, #16
 801103a:	4640      	mov	r0, r8
 801103c:	f7fc f8ce 	bl	800d1dc <_printf_float>
 8011040:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011044:	4681      	mov	r9, r0
 8011046:	d1d6      	bne.n	8010ff6 <_svfiprintf_r+0x166>
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	065b      	lsls	r3, r3, #25
 801104c:	f53f af35 	bmi.w	8010eba <_svfiprintf_r+0x2a>
 8011050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011052:	b01d      	add	sp, #116	; 0x74
 8011054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011058:	ab03      	add	r3, sp, #12
 801105a:	9300      	str	r3, [sp, #0]
 801105c:	4622      	mov	r2, r4
 801105e:	4b07      	ldr	r3, [pc, #28]	; (801107c <_svfiprintf_r+0x1ec>)
 8011060:	a904      	add	r1, sp, #16
 8011062:	4640      	mov	r0, r8
 8011064:	f7fc fb70 	bl	800d748 <_printf_i>
 8011068:	e7ea      	b.n	8011040 <_svfiprintf_r+0x1b0>
 801106a:	bf00      	nop
 801106c:	0801180c 	.word	0x0801180c
 8011070:	08011812 	.word	0x08011812
 8011074:	08011816 	.word	0x08011816
 8011078:	0800d1dd 	.word	0x0800d1dd
 801107c:	08010ddb 	.word	0x08010ddb

08011080 <__sfputc_r>:
 8011080:	6893      	ldr	r3, [r2, #8]
 8011082:	3b01      	subs	r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	b410      	push	{r4}
 8011088:	6093      	str	r3, [r2, #8]
 801108a:	da08      	bge.n	801109e <__sfputc_r+0x1e>
 801108c:	6994      	ldr	r4, [r2, #24]
 801108e:	42a3      	cmp	r3, r4
 8011090:	db01      	blt.n	8011096 <__sfputc_r+0x16>
 8011092:	290a      	cmp	r1, #10
 8011094:	d103      	bne.n	801109e <__sfputc_r+0x1e>
 8011096:	f85d 4b04 	ldr.w	r4, [sp], #4
 801109a:	f7fd be5f 	b.w	800ed5c <__swbuf_r>
 801109e:	6813      	ldr	r3, [r2, #0]
 80110a0:	1c58      	adds	r0, r3, #1
 80110a2:	6010      	str	r0, [r2, #0]
 80110a4:	7019      	strb	r1, [r3, #0]
 80110a6:	4608      	mov	r0, r1
 80110a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <__sfputs_r>:
 80110ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b0:	4606      	mov	r6, r0
 80110b2:	460f      	mov	r7, r1
 80110b4:	4614      	mov	r4, r2
 80110b6:	18d5      	adds	r5, r2, r3
 80110b8:	42ac      	cmp	r4, r5
 80110ba:	d101      	bne.n	80110c0 <__sfputs_r+0x12>
 80110bc:	2000      	movs	r0, #0
 80110be:	e007      	b.n	80110d0 <__sfputs_r+0x22>
 80110c0:	463a      	mov	r2, r7
 80110c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c6:	4630      	mov	r0, r6
 80110c8:	f7ff ffda 	bl	8011080 <__sfputc_r>
 80110cc:	1c43      	adds	r3, r0, #1
 80110ce:	d1f3      	bne.n	80110b8 <__sfputs_r+0xa>
 80110d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110d4 <_vfiprintf_r>:
 80110d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d8:	460c      	mov	r4, r1
 80110da:	b09d      	sub	sp, #116	; 0x74
 80110dc:	4617      	mov	r7, r2
 80110de:	461d      	mov	r5, r3
 80110e0:	4606      	mov	r6, r0
 80110e2:	b118      	cbz	r0, 80110ec <_vfiprintf_r+0x18>
 80110e4:	6983      	ldr	r3, [r0, #24]
 80110e6:	b90b      	cbnz	r3, 80110ec <_vfiprintf_r+0x18>
 80110e8:	f7fe fe2e 	bl	800fd48 <__sinit>
 80110ec:	4b7c      	ldr	r3, [pc, #496]	; (80112e0 <_vfiprintf_r+0x20c>)
 80110ee:	429c      	cmp	r4, r3
 80110f0:	d158      	bne.n	80111a4 <_vfiprintf_r+0xd0>
 80110f2:	6874      	ldr	r4, [r6, #4]
 80110f4:	89a3      	ldrh	r3, [r4, #12]
 80110f6:	0718      	lsls	r0, r3, #28
 80110f8:	d55e      	bpl.n	80111b8 <_vfiprintf_r+0xe4>
 80110fa:	6923      	ldr	r3, [r4, #16]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d05b      	beq.n	80111b8 <_vfiprintf_r+0xe4>
 8011100:	2300      	movs	r3, #0
 8011102:	9309      	str	r3, [sp, #36]	; 0x24
 8011104:	2320      	movs	r3, #32
 8011106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801110a:	2330      	movs	r3, #48	; 0x30
 801110c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011110:	9503      	str	r5, [sp, #12]
 8011112:	f04f 0b01 	mov.w	fp, #1
 8011116:	46b8      	mov	r8, r7
 8011118:	4645      	mov	r5, r8
 801111a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801111e:	b10b      	cbz	r3, 8011124 <_vfiprintf_r+0x50>
 8011120:	2b25      	cmp	r3, #37	; 0x25
 8011122:	d154      	bne.n	80111ce <_vfiprintf_r+0xfa>
 8011124:	ebb8 0a07 	subs.w	sl, r8, r7
 8011128:	d00b      	beq.n	8011142 <_vfiprintf_r+0x6e>
 801112a:	4653      	mov	r3, sl
 801112c:	463a      	mov	r2, r7
 801112e:	4621      	mov	r1, r4
 8011130:	4630      	mov	r0, r6
 8011132:	f7ff ffbc 	bl	80110ae <__sfputs_r>
 8011136:	3001      	adds	r0, #1
 8011138:	f000 80c2 	beq.w	80112c0 <_vfiprintf_r+0x1ec>
 801113c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801113e:	4453      	add	r3, sl
 8011140:	9309      	str	r3, [sp, #36]	; 0x24
 8011142:	f898 3000 	ldrb.w	r3, [r8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	f000 80ba 	beq.w	80112c0 <_vfiprintf_r+0x1ec>
 801114c:	2300      	movs	r3, #0
 801114e:	f04f 32ff 	mov.w	r2, #4294967295
 8011152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011156:	9304      	str	r3, [sp, #16]
 8011158:	9307      	str	r3, [sp, #28]
 801115a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801115e:	931a      	str	r3, [sp, #104]	; 0x68
 8011160:	46a8      	mov	r8, r5
 8011162:	2205      	movs	r2, #5
 8011164:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011168:	485e      	ldr	r0, [pc, #376]	; (80112e4 <_vfiprintf_r+0x210>)
 801116a:	f7ef f849 	bl	8000200 <memchr>
 801116e:	9b04      	ldr	r3, [sp, #16]
 8011170:	bb78      	cbnz	r0, 80111d2 <_vfiprintf_r+0xfe>
 8011172:	06d9      	lsls	r1, r3, #27
 8011174:	bf44      	itt	mi
 8011176:	2220      	movmi	r2, #32
 8011178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801117c:	071a      	lsls	r2, r3, #28
 801117e:	bf44      	itt	mi
 8011180:	222b      	movmi	r2, #43	; 0x2b
 8011182:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011186:	782a      	ldrb	r2, [r5, #0]
 8011188:	2a2a      	cmp	r2, #42	; 0x2a
 801118a:	d02a      	beq.n	80111e2 <_vfiprintf_r+0x10e>
 801118c:	9a07      	ldr	r2, [sp, #28]
 801118e:	46a8      	mov	r8, r5
 8011190:	2000      	movs	r0, #0
 8011192:	250a      	movs	r5, #10
 8011194:	4641      	mov	r1, r8
 8011196:	f811 3b01 	ldrb.w	r3, [r1], #1
 801119a:	3b30      	subs	r3, #48	; 0x30
 801119c:	2b09      	cmp	r3, #9
 801119e:	d969      	bls.n	8011274 <_vfiprintf_r+0x1a0>
 80111a0:	b360      	cbz	r0, 80111fc <_vfiprintf_r+0x128>
 80111a2:	e024      	b.n	80111ee <_vfiprintf_r+0x11a>
 80111a4:	4b50      	ldr	r3, [pc, #320]	; (80112e8 <_vfiprintf_r+0x214>)
 80111a6:	429c      	cmp	r4, r3
 80111a8:	d101      	bne.n	80111ae <_vfiprintf_r+0xda>
 80111aa:	68b4      	ldr	r4, [r6, #8]
 80111ac:	e7a2      	b.n	80110f4 <_vfiprintf_r+0x20>
 80111ae:	4b4f      	ldr	r3, [pc, #316]	; (80112ec <_vfiprintf_r+0x218>)
 80111b0:	429c      	cmp	r4, r3
 80111b2:	bf08      	it	eq
 80111b4:	68f4      	ldreq	r4, [r6, #12]
 80111b6:	e79d      	b.n	80110f4 <_vfiprintf_r+0x20>
 80111b8:	4621      	mov	r1, r4
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7fd fe20 	bl	800ee00 <__swsetup_r>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d09d      	beq.n	8011100 <_vfiprintf_r+0x2c>
 80111c4:	f04f 30ff 	mov.w	r0, #4294967295
 80111c8:	b01d      	add	sp, #116	; 0x74
 80111ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ce:	46a8      	mov	r8, r5
 80111d0:	e7a2      	b.n	8011118 <_vfiprintf_r+0x44>
 80111d2:	4a44      	ldr	r2, [pc, #272]	; (80112e4 <_vfiprintf_r+0x210>)
 80111d4:	1a80      	subs	r0, r0, r2
 80111d6:	fa0b f000 	lsl.w	r0, fp, r0
 80111da:	4318      	orrs	r0, r3
 80111dc:	9004      	str	r0, [sp, #16]
 80111de:	4645      	mov	r5, r8
 80111e0:	e7be      	b.n	8011160 <_vfiprintf_r+0x8c>
 80111e2:	9a03      	ldr	r2, [sp, #12]
 80111e4:	1d11      	adds	r1, r2, #4
 80111e6:	6812      	ldr	r2, [r2, #0]
 80111e8:	9103      	str	r1, [sp, #12]
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	db01      	blt.n	80111f2 <_vfiprintf_r+0x11e>
 80111ee:	9207      	str	r2, [sp, #28]
 80111f0:	e004      	b.n	80111fc <_vfiprintf_r+0x128>
 80111f2:	4252      	negs	r2, r2
 80111f4:	f043 0302 	orr.w	r3, r3, #2
 80111f8:	9207      	str	r2, [sp, #28]
 80111fa:	9304      	str	r3, [sp, #16]
 80111fc:	f898 3000 	ldrb.w	r3, [r8]
 8011200:	2b2e      	cmp	r3, #46	; 0x2e
 8011202:	d10e      	bne.n	8011222 <_vfiprintf_r+0x14e>
 8011204:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011208:	2b2a      	cmp	r3, #42	; 0x2a
 801120a:	d138      	bne.n	801127e <_vfiprintf_r+0x1aa>
 801120c:	9b03      	ldr	r3, [sp, #12]
 801120e:	1d1a      	adds	r2, r3, #4
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	9203      	str	r2, [sp, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	bfb8      	it	lt
 8011218:	f04f 33ff 	movlt.w	r3, #4294967295
 801121c:	f108 0802 	add.w	r8, r8, #2
 8011220:	9305      	str	r3, [sp, #20]
 8011222:	4d33      	ldr	r5, [pc, #204]	; (80112f0 <_vfiprintf_r+0x21c>)
 8011224:	f898 1000 	ldrb.w	r1, [r8]
 8011228:	2203      	movs	r2, #3
 801122a:	4628      	mov	r0, r5
 801122c:	f7ee ffe8 	bl	8000200 <memchr>
 8011230:	b140      	cbz	r0, 8011244 <_vfiprintf_r+0x170>
 8011232:	2340      	movs	r3, #64	; 0x40
 8011234:	1b40      	subs	r0, r0, r5
 8011236:	fa03 f000 	lsl.w	r0, r3, r0
 801123a:	9b04      	ldr	r3, [sp, #16]
 801123c:	4303      	orrs	r3, r0
 801123e:	f108 0801 	add.w	r8, r8, #1
 8011242:	9304      	str	r3, [sp, #16]
 8011244:	f898 1000 	ldrb.w	r1, [r8]
 8011248:	482a      	ldr	r0, [pc, #168]	; (80112f4 <_vfiprintf_r+0x220>)
 801124a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801124e:	2206      	movs	r2, #6
 8011250:	f108 0701 	add.w	r7, r8, #1
 8011254:	f7ee ffd4 	bl	8000200 <memchr>
 8011258:	2800      	cmp	r0, #0
 801125a:	d037      	beq.n	80112cc <_vfiprintf_r+0x1f8>
 801125c:	4b26      	ldr	r3, [pc, #152]	; (80112f8 <_vfiprintf_r+0x224>)
 801125e:	bb1b      	cbnz	r3, 80112a8 <_vfiprintf_r+0x1d4>
 8011260:	9b03      	ldr	r3, [sp, #12]
 8011262:	3307      	adds	r3, #7
 8011264:	f023 0307 	bic.w	r3, r3, #7
 8011268:	3308      	adds	r3, #8
 801126a:	9303      	str	r3, [sp, #12]
 801126c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801126e:	444b      	add	r3, r9
 8011270:	9309      	str	r3, [sp, #36]	; 0x24
 8011272:	e750      	b.n	8011116 <_vfiprintf_r+0x42>
 8011274:	fb05 3202 	mla	r2, r5, r2, r3
 8011278:	2001      	movs	r0, #1
 801127a:	4688      	mov	r8, r1
 801127c:	e78a      	b.n	8011194 <_vfiprintf_r+0xc0>
 801127e:	2300      	movs	r3, #0
 8011280:	f108 0801 	add.w	r8, r8, #1
 8011284:	9305      	str	r3, [sp, #20]
 8011286:	4619      	mov	r1, r3
 8011288:	250a      	movs	r5, #10
 801128a:	4640      	mov	r0, r8
 801128c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011290:	3a30      	subs	r2, #48	; 0x30
 8011292:	2a09      	cmp	r2, #9
 8011294:	d903      	bls.n	801129e <_vfiprintf_r+0x1ca>
 8011296:	2b00      	cmp	r3, #0
 8011298:	d0c3      	beq.n	8011222 <_vfiprintf_r+0x14e>
 801129a:	9105      	str	r1, [sp, #20]
 801129c:	e7c1      	b.n	8011222 <_vfiprintf_r+0x14e>
 801129e:	fb05 2101 	mla	r1, r5, r1, r2
 80112a2:	2301      	movs	r3, #1
 80112a4:	4680      	mov	r8, r0
 80112a6:	e7f0      	b.n	801128a <_vfiprintf_r+0x1b6>
 80112a8:	ab03      	add	r3, sp, #12
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	4622      	mov	r2, r4
 80112ae:	4b13      	ldr	r3, [pc, #76]	; (80112fc <_vfiprintf_r+0x228>)
 80112b0:	a904      	add	r1, sp, #16
 80112b2:	4630      	mov	r0, r6
 80112b4:	f7fb ff92 	bl	800d1dc <_printf_float>
 80112b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80112bc:	4681      	mov	r9, r0
 80112be:	d1d5      	bne.n	801126c <_vfiprintf_r+0x198>
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	065b      	lsls	r3, r3, #25
 80112c4:	f53f af7e 	bmi.w	80111c4 <_vfiprintf_r+0xf0>
 80112c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112ca:	e77d      	b.n	80111c8 <_vfiprintf_r+0xf4>
 80112cc:	ab03      	add	r3, sp, #12
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	4622      	mov	r2, r4
 80112d2:	4b0a      	ldr	r3, [pc, #40]	; (80112fc <_vfiprintf_r+0x228>)
 80112d4:	a904      	add	r1, sp, #16
 80112d6:	4630      	mov	r0, r6
 80112d8:	f7fc fa36 	bl	800d748 <_printf_i>
 80112dc:	e7ec      	b.n	80112b8 <_vfiprintf_r+0x1e4>
 80112de:	bf00      	nop
 80112e0:	080116c0 	.word	0x080116c0
 80112e4:	0801180c 	.word	0x0801180c
 80112e8:	080116e0 	.word	0x080116e0
 80112ec:	080116a0 	.word	0x080116a0
 80112f0:	08011812 	.word	0x08011812
 80112f4:	08011816 	.word	0x08011816
 80112f8:	0800d1dd 	.word	0x0800d1dd
 80112fc:	080110af 	.word	0x080110af

08011300 <__sread>:
 8011300:	b510      	push	{r4, lr}
 8011302:	460c      	mov	r4, r1
 8011304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011308:	f000 f8f2 	bl	80114f0 <_read_r>
 801130c:	2800      	cmp	r0, #0
 801130e:	bfab      	itete	ge
 8011310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011312:	89a3      	ldrhlt	r3, [r4, #12]
 8011314:	181b      	addge	r3, r3, r0
 8011316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801131a:	bfac      	ite	ge
 801131c:	6563      	strge	r3, [r4, #84]	; 0x54
 801131e:	81a3      	strhlt	r3, [r4, #12]
 8011320:	bd10      	pop	{r4, pc}

08011322 <__swrite>:
 8011322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011326:	461f      	mov	r7, r3
 8011328:	898b      	ldrh	r3, [r1, #12]
 801132a:	05db      	lsls	r3, r3, #23
 801132c:	4605      	mov	r5, r0
 801132e:	460c      	mov	r4, r1
 8011330:	4616      	mov	r6, r2
 8011332:	d505      	bpl.n	8011340 <__swrite+0x1e>
 8011334:	2302      	movs	r3, #2
 8011336:	2200      	movs	r2, #0
 8011338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801133c:	f000 f886 	bl	801144c <_lseek_r>
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801134a:	81a3      	strh	r3, [r4, #12]
 801134c:	4632      	mov	r2, r6
 801134e:	463b      	mov	r3, r7
 8011350:	4628      	mov	r0, r5
 8011352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011356:	f000 b835 	b.w	80113c4 <_write_r>

0801135a <__sseek>:
 801135a:	b510      	push	{r4, lr}
 801135c:	460c      	mov	r4, r1
 801135e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011362:	f000 f873 	bl	801144c <_lseek_r>
 8011366:	1c43      	adds	r3, r0, #1
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	bf15      	itete	ne
 801136c:	6560      	strne	r0, [r4, #84]	; 0x54
 801136e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011376:	81a3      	strheq	r3, [r4, #12]
 8011378:	bf18      	it	ne
 801137a:	81a3      	strhne	r3, [r4, #12]
 801137c:	bd10      	pop	{r4, pc}

0801137e <__sclose>:
 801137e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011382:	f000 b831 	b.w	80113e8 <_close_r>

08011386 <strncmp>:
 8011386:	b510      	push	{r4, lr}
 8011388:	b16a      	cbz	r2, 80113a6 <strncmp+0x20>
 801138a:	3901      	subs	r1, #1
 801138c:	1884      	adds	r4, r0, r2
 801138e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011392:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011396:	4293      	cmp	r3, r2
 8011398:	d103      	bne.n	80113a2 <strncmp+0x1c>
 801139a:	42a0      	cmp	r0, r4
 801139c:	d001      	beq.n	80113a2 <strncmp+0x1c>
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d1f5      	bne.n	801138e <strncmp+0x8>
 80113a2:	1a98      	subs	r0, r3, r2
 80113a4:	bd10      	pop	{r4, pc}
 80113a6:	4610      	mov	r0, r2
 80113a8:	e7fc      	b.n	80113a4 <strncmp+0x1e>

080113aa <__ascii_wctomb>:
 80113aa:	b149      	cbz	r1, 80113c0 <__ascii_wctomb+0x16>
 80113ac:	2aff      	cmp	r2, #255	; 0xff
 80113ae:	bf85      	ittet	hi
 80113b0:	238a      	movhi	r3, #138	; 0x8a
 80113b2:	6003      	strhi	r3, [r0, #0]
 80113b4:	700a      	strbls	r2, [r1, #0]
 80113b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80113ba:	bf98      	it	ls
 80113bc:	2001      	movls	r0, #1
 80113be:	4770      	bx	lr
 80113c0:	4608      	mov	r0, r1
 80113c2:	4770      	bx	lr

080113c4 <_write_r>:
 80113c4:	b538      	push	{r3, r4, r5, lr}
 80113c6:	4c07      	ldr	r4, [pc, #28]	; (80113e4 <_write_r+0x20>)
 80113c8:	4605      	mov	r5, r0
 80113ca:	4608      	mov	r0, r1
 80113cc:	4611      	mov	r1, r2
 80113ce:	2200      	movs	r2, #0
 80113d0:	6022      	str	r2, [r4, #0]
 80113d2:	461a      	mov	r2, r3
 80113d4:	f7f9 f904 	bl	800a5e0 <_write>
 80113d8:	1c43      	adds	r3, r0, #1
 80113da:	d102      	bne.n	80113e2 <_write_r+0x1e>
 80113dc:	6823      	ldr	r3, [r4, #0]
 80113de:	b103      	cbz	r3, 80113e2 <_write_r+0x1e>
 80113e0:	602b      	str	r3, [r5, #0]
 80113e2:	bd38      	pop	{r3, r4, r5, pc}
 80113e4:	20001bb0 	.word	0x20001bb0

080113e8 <_close_r>:
 80113e8:	b538      	push	{r3, r4, r5, lr}
 80113ea:	4c06      	ldr	r4, [pc, #24]	; (8011404 <_close_r+0x1c>)
 80113ec:	2300      	movs	r3, #0
 80113ee:	4605      	mov	r5, r0
 80113f0:	4608      	mov	r0, r1
 80113f2:	6023      	str	r3, [r4, #0]
 80113f4:	f7f0 fabb 	bl	800196e <_close>
 80113f8:	1c43      	adds	r3, r0, #1
 80113fa:	d102      	bne.n	8011402 <_close_r+0x1a>
 80113fc:	6823      	ldr	r3, [r4, #0]
 80113fe:	b103      	cbz	r3, 8011402 <_close_r+0x1a>
 8011400:	602b      	str	r3, [r5, #0]
 8011402:	bd38      	pop	{r3, r4, r5, pc}
 8011404:	20001bb0 	.word	0x20001bb0

08011408 <_fstat_r>:
 8011408:	b538      	push	{r3, r4, r5, lr}
 801140a:	4c07      	ldr	r4, [pc, #28]	; (8011428 <_fstat_r+0x20>)
 801140c:	2300      	movs	r3, #0
 801140e:	4605      	mov	r5, r0
 8011410:	4608      	mov	r0, r1
 8011412:	4611      	mov	r1, r2
 8011414:	6023      	str	r3, [r4, #0]
 8011416:	f7f0 fab6 	bl	8001986 <_fstat>
 801141a:	1c43      	adds	r3, r0, #1
 801141c:	d102      	bne.n	8011424 <_fstat_r+0x1c>
 801141e:	6823      	ldr	r3, [r4, #0]
 8011420:	b103      	cbz	r3, 8011424 <_fstat_r+0x1c>
 8011422:	602b      	str	r3, [r5, #0]
 8011424:	bd38      	pop	{r3, r4, r5, pc}
 8011426:	bf00      	nop
 8011428:	20001bb0 	.word	0x20001bb0

0801142c <_isatty_r>:
 801142c:	b538      	push	{r3, r4, r5, lr}
 801142e:	4c06      	ldr	r4, [pc, #24]	; (8011448 <_isatty_r+0x1c>)
 8011430:	2300      	movs	r3, #0
 8011432:	4605      	mov	r5, r0
 8011434:	4608      	mov	r0, r1
 8011436:	6023      	str	r3, [r4, #0]
 8011438:	f7f0 fab5 	bl	80019a6 <_isatty>
 801143c:	1c43      	adds	r3, r0, #1
 801143e:	d102      	bne.n	8011446 <_isatty_r+0x1a>
 8011440:	6823      	ldr	r3, [r4, #0]
 8011442:	b103      	cbz	r3, 8011446 <_isatty_r+0x1a>
 8011444:	602b      	str	r3, [r5, #0]
 8011446:	bd38      	pop	{r3, r4, r5, pc}
 8011448:	20001bb0 	.word	0x20001bb0

0801144c <_lseek_r>:
 801144c:	b538      	push	{r3, r4, r5, lr}
 801144e:	4c07      	ldr	r4, [pc, #28]	; (801146c <_lseek_r+0x20>)
 8011450:	4605      	mov	r5, r0
 8011452:	4608      	mov	r0, r1
 8011454:	4611      	mov	r1, r2
 8011456:	2200      	movs	r2, #0
 8011458:	6022      	str	r2, [r4, #0]
 801145a:	461a      	mov	r2, r3
 801145c:	f7f0 faae 	bl	80019bc <_lseek>
 8011460:	1c43      	adds	r3, r0, #1
 8011462:	d102      	bne.n	801146a <_lseek_r+0x1e>
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	b103      	cbz	r3, 801146a <_lseek_r+0x1e>
 8011468:	602b      	str	r3, [r5, #0]
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	20001bb0 	.word	0x20001bb0

08011470 <memmove>:
 8011470:	4288      	cmp	r0, r1
 8011472:	b510      	push	{r4, lr}
 8011474:	eb01 0302 	add.w	r3, r1, r2
 8011478:	d807      	bhi.n	801148a <memmove+0x1a>
 801147a:	1e42      	subs	r2, r0, #1
 801147c:	4299      	cmp	r1, r3
 801147e:	d00a      	beq.n	8011496 <memmove+0x26>
 8011480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011484:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011488:	e7f8      	b.n	801147c <memmove+0xc>
 801148a:	4283      	cmp	r3, r0
 801148c:	d9f5      	bls.n	801147a <memmove+0xa>
 801148e:	1881      	adds	r1, r0, r2
 8011490:	1ad2      	subs	r2, r2, r3
 8011492:	42d3      	cmn	r3, r2
 8011494:	d100      	bne.n	8011498 <memmove+0x28>
 8011496:	bd10      	pop	{r4, pc}
 8011498:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801149c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80114a0:	e7f7      	b.n	8011492 <memmove+0x22>

080114a2 <_realloc_r>:
 80114a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a4:	4607      	mov	r7, r0
 80114a6:	4614      	mov	r4, r2
 80114a8:	460e      	mov	r6, r1
 80114aa:	b921      	cbnz	r1, 80114b6 <_realloc_r+0x14>
 80114ac:	4611      	mov	r1, r2
 80114ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80114b2:	f7fb bda5 	b.w	800d000 <_malloc_r>
 80114b6:	b922      	cbnz	r2, 80114c2 <_realloc_r+0x20>
 80114b8:	f7fb fd54 	bl	800cf64 <_free_r>
 80114bc:	4625      	mov	r5, r4
 80114be:	4628      	mov	r0, r5
 80114c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c2:	f000 f827 	bl	8011514 <_malloc_usable_size_r>
 80114c6:	42a0      	cmp	r0, r4
 80114c8:	d20f      	bcs.n	80114ea <_realloc_r+0x48>
 80114ca:	4621      	mov	r1, r4
 80114cc:	4638      	mov	r0, r7
 80114ce:	f7fb fd97 	bl	800d000 <_malloc_r>
 80114d2:	4605      	mov	r5, r0
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d0f2      	beq.n	80114be <_realloc_r+0x1c>
 80114d8:	4631      	mov	r1, r6
 80114da:	4622      	mov	r2, r4
 80114dc:	f7fb fd2e 	bl	800cf3c <memcpy>
 80114e0:	4631      	mov	r1, r6
 80114e2:	4638      	mov	r0, r7
 80114e4:	f7fb fd3e 	bl	800cf64 <_free_r>
 80114e8:	e7e9      	b.n	80114be <_realloc_r+0x1c>
 80114ea:	4635      	mov	r5, r6
 80114ec:	e7e7      	b.n	80114be <_realloc_r+0x1c>
	...

080114f0 <_read_r>:
 80114f0:	b538      	push	{r3, r4, r5, lr}
 80114f2:	4c07      	ldr	r4, [pc, #28]	; (8011510 <_read_r+0x20>)
 80114f4:	4605      	mov	r5, r0
 80114f6:	4608      	mov	r0, r1
 80114f8:	4611      	mov	r1, r2
 80114fa:	2200      	movs	r2, #0
 80114fc:	6022      	str	r2, [r4, #0]
 80114fe:	461a      	mov	r2, r3
 8011500:	f7f0 fa18 	bl	8001934 <_read>
 8011504:	1c43      	adds	r3, r0, #1
 8011506:	d102      	bne.n	801150e <_read_r+0x1e>
 8011508:	6823      	ldr	r3, [r4, #0]
 801150a:	b103      	cbz	r3, 801150e <_read_r+0x1e>
 801150c:	602b      	str	r3, [r5, #0]
 801150e:	bd38      	pop	{r3, r4, r5, pc}
 8011510:	20001bb0 	.word	0x20001bb0

08011514 <_malloc_usable_size_r>:
 8011514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011518:	1f18      	subs	r0, r3, #4
 801151a:	2b00      	cmp	r3, #0
 801151c:	bfbc      	itt	lt
 801151e:	580b      	ldrlt	r3, [r1, r0]
 8011520:	18c0      	addlt	r0, r0, r3
 8011522:	4770      	bx	lr

08011524 <_init>:
 8011524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011526:	bf00      	nop
 8011528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801152a:	bc08      	pop	{r3}
 801152c:	469e      	mov	lr, r3
 801152e:	4770      	bx	lr

08011530 <_fini>:
 8011530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011532:	bf00      	nop
 8011534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011536:	bc08      	pop	{r3}
 8011538:	469e      	mov	lr, r3
 801153a:	4770      	bx	lr
