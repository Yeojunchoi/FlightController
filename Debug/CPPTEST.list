
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800d110  0800d110  0001d110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d400  0800d400  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800d400  0800d400  0001d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d408  0800d408  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d408  0800d408  0001d408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d40c  0800d40c  0001d40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  20000208  0800d618  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  0800d618  00020a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4ed  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a65  00000000  00000000  0003b725  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0003f190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  00040738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d6e  00000000  00000000  00041b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013f00  00000000  00000000  00069886  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e848a  00000000  00000000  0007d786  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  00165c8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000208 	.word	0x20000208
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d0f8 	.word	0x0800d0f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	0800d0f8 	.word	0x0800d0f8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <invSqrt>:
#include "algorithmCollection.h"
#include <math.h>

#define DEG2PI 0.01745329251F

float invSqrt(float x) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	105a      	asrs	r2, r3, #1
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <invSqrt+0x74>)
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000fa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	ee07 3a90 	vmov	s15, r3
}
 8000fce:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	5f3759df 	.word	0x5f3759df

08000fe0 <junTimer_tic>:

void junTimer_tic(struct junTimer* t){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
   t->last_time = HAL_GetTick();
 8000fe8:	f001 f99c 	bl	8002324 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
   t->start = 1;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	711a      	strb	r2, [r3, #4]
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <junTimer_toc>:

uint32_t junTimer_toc(struct junTimer* t){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
   return HAL_GetTick() - t->last_time;
 8001008:	f001 f98c 	bl	8002324 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_DMA_Init+0x3c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <MX_DMA_Init+0x3c>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_DMA_Init+0x3c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	200e      	movs	r0, #14
 8001044:	f001 fa77 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001048:	200e      	movs	r0, #14
 800104a:	f001 fa90 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ETH_Init+0x78>)
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <MX_ETH_Init+0x7c>)
 8001064:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_ETH_Init+0x78>)
 8001068:	2201      	movs	r2, #1
 800106a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_ETH_Init+0x78>)
 800106e:	2200      	movs	r2, #0
 8001070:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ETH_Init+0x78>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ETH_Init+0x78>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ETH_Init+0x78>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	3302      	adds	r3, #2
 800108a:	22e1      	movs	r2, #225	; 0xe1
 800108c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_ETH_Init+0x78>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	3303      	adds	r3, #3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_ETH_Init+0x78>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	3304      	adds	r3, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_ETH_Init+0x78>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	3305      	adds	r3, #5
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_ETH_Init+0x78>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_ETH_Init+0x78>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_ETH_Init+0x78>)
 80010ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010be:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_ETH_Init+0x78>)
 80010c2:	f001 fe0d 	bl	8002ce0 <HAL_ETH_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80010cc:	f000 fac8 	bl	8001660 <Error_Handler>
  }

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200002d0 	.word	0x200002d0
 80010d8:	40028000 	.word	0x40028000

080010dc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a55      	ldr	r2, [pc, #340]	; (8001250 <HAL_ETH_MspInit+0x174>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f040 80a4 	bne.w	8001248 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800110a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	623b      	str	r3, [r7, #32]
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b49      	ldr	r3, [pc, #292]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	4b45      	ldr	r3, [pc, #276]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001142:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001146:	6313      	str	r3, [r2, #48]	; 0x30
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a36      	ldr	r2, [pc, #216]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <HAL_ETH_MspInit+0x178>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_ETH_MspInit+0x178>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_ETH_MspInit+0x178>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_ETH_MspInit+0x178>)
 80011b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_ETH_MspInit+0x178>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011c4:	2332      	movs	r3, #50	; 0x32
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d4:	230b      	movs	r3, #11
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	481e      	ldr	r0, [pc, #120]	; (8001258 <HAL_ETH_MspInit+0x17c>)
 80011e0:	f002 f9ec 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011e4:	2386      	movs	r3, #134	; 0x86
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f4:	230b      	movs	r3, #11
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	4619      	mov	r1, r3
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <HAL_ETH_MspInit+0x180>)
 8001200:	f002 f9dc 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001216:	230b      	movs	r3, #11
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <HAL_ETH_MspInit+0x184>)
 8001222:	f002 f9cb 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001226:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001238:	230b      	movs	r3, #11
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <HAL_ETH_MspInit+0x188>)
 8001244:	f002 f9ba 	bl	80035bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40028000 	.word	0x40028000
 8001254:	40023800 	.word	0x40023800
 8001258:	40020800 	.word	0x40020800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40021800 	.word	0x40021800

08001268 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a51      	ldr	r2, [pc, #324]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012a4:	f043 0320 	orr.w	r3, r3, #32
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0320 	and.w	r3, r3, #32
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a3c      	ldr	r2, [pc, #240]	; (80013e8 <MX_GPIO_Init+0x180>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a35      	ldr	r2, [pc, #212]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x180>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <MX_GPIO_Init+0x180>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a2e      	ldr	r2, [pc, #184]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <MX_GPIO_Init+0x180>)
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <MX_GPIO_Init+0x180>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f244 0181 	movw	r1, #16513	; 0x4081
 8001364:	4821      	ldr	r0, [pc, #132]	; (80013ec <MX_GPIO_Init+0x184>)
 8001366:	f002 fad3 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	4820      	ldr	r0, [pc, #128]	; (80013f0 <MX_GPIO_Init+0x188>)
 8001370:	f002 face 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_GPIO_Init+0x18c>)
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	481b      	ldr	r0, [pc, #108]	; (80013f8 <MX_GPIO_Init+0x190>)
 800138a:	f002 f917 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800138e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_GPIO_Init+0x184>)
 80013a8:	f002 f908 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0x188>)
 80013c4:	f002 f8fa 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_GPIO_Init+0x188>)
 80013dc:	f002 f8ee 	bl	80035bc <HAL_GPIO_Init>

}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	10110000 	.word	0x10110000
 80013f8:	40020800 	.word	0x40020800

080013fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_I2C1_Init+0x74>)
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <MX_I2C1_Init+0x78>)
 8001404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_I2C1_Init+0x74>)
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <MX_I2C1_Init+0x7c>)
 800140a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_I2C1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_I2C1_Init+0x74>)
 800141a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_I2C1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_I2C1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_I2C1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_I2C1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_I2C1_Init+0x74>)
 800143a:	f002 fa83 	bl	8003944 <HAL_I2C_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001444:	f000 f90c 	bl	8001660 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <MX_I2C1_Init+0x74>)
 800144c:	f004 fec5 	bl	80061da <HAL_I2CEx_ConfigAnalogFilter>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001456:	f000 f903 	bl	8001660 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_I2C1_Init+0x74>)
 800145e:	f004 fef8 	bl	8006252 <HAL_I2CEx_ConfigDigitalFilter>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001468:	f000 f8fa 	bl	8001660 <Error_Handler>
  }

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000318 	.word	0x20000318
 8001474:	40005400 	.word	0x40005400
 8001478:	00061a80 	.word	0x00061a80

0800147c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_I2C_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12c      	bne.n	80014f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80014ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c0:	2312      	movs	r3, #18
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014cc:	2304      	movs	r3, #4
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014d8:	f002 f870 	bl	80035bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f000 fea2 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f81e 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f7ff fea6 	bl	8001268 <MX_GPIO_Init>
  MX_DMA_Init();
 800151c:	f7ff fd7e 	bl	800101c <MX_DMA_Init>
  MX_ETH_Init();
 8001520:	f7ff fd9c 	bl	800105c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001524:	f000 fcb6 	bl	8001e94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001528:	f000 fde4 	bl	80020f4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800152c:	f7ff ff66 	bl	80013fc <MX_I2C1_Init>
  MX_TIM10_Init();
 8001530:	f000 fad4 	bl	8001adc <MX_TIM10_Init>
  MX_TIM11_Init();
 8001534:	f000 fb1e 	bl	8001b74 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001538:	f000 f9b6 	bl	80018a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800153c:	f000 fa36 	bl	80019ac <MX_TIM4_Init>
  MX_UART7_Init();
 8001540:	f000 fc50 	bl	8001de4 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8001544:	f000 fc7c 	bl	8001e40 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001548:	f000 f86e 	bl	8001628 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    userMain();
 800154c:	f009 f874 	bl	800a638 <userMain>
 8001550:	e7fc      	b.n	800154c <main+0x40>
	...

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2230      	movs	r2, #48	; 0x30
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f009 f999 	bl	800a89a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <SystemClock_Config+0xcc>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <SystemClock_Config+0xcc>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <SystemClock_Config+0xcc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <SystemClock_Config+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <SystemClock_Config+0xd0>)
 800159e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <SystemClock_Config+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015d2:	2307      	movs	r3, #7
 80015d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 ff96 	bl	800650c <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015e6:	f000 f83b 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	230f      	movs	r3, #15
 80015ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2302      	movs	r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2105      	movs	r1, #5
 8001608:	4618      	mov	r0, r3
 800160a:	f005 f9ef 	bl	80069ec <HAL_RCC_ClockConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001614:	f000 f824 	bl	8001660 <Error_Handler>
  }
}
 8001618:	bf00      	nop
 800161a:	3750      	adds	r7, #80	; 0x50
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	201f      	movs	r0, #31
 8001632:	f000 ff80 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001636:	201f      	movs	r0, #31
 8001638:	f000 ff99 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2020      	movs	r0, #32
 8001642:	f000 ff78 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001646:	2020      	movs	r0, #32
 8001648:	f000 ff91 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2052      	movs	r0, #82	; 0x52
 8001652:	f000 ff70 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001656:	2052      	movs	r0, #82	; 0x52
 8001658:	f000 ff89 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_MspInit+0x4c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_MspInit+0x4c>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_MspInit+0x4c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_MspInit+0x4c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_MspInit+0x4c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001714:	f000 fdf2 	bl	80022fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Stream3_IRQHandler+0x10>)
 8001722:	f001 f867 	bl	80027f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200004ec 	.word	0x200004ec

08001730 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001736:	f005 fbcf 	bl	8006ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000042c 	.word	0x2000042c

08001744 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <I2C1_EV_IRQHandler+0x10>)
 800174a:	f002 fe15 	bl	8004378 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000318 	.word	0x20000318

08001758 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <I2C1_ER_IRQHandler+0x10>)
 800175e:	f002 ff71 	bl	8004644 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000318 	.word	0x20000318

0800176c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <UART7_IRQHandler+0x10>)
 8001772:	f006 fb3f 	bl	8007df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000046c 	.word	0x2000046c

08001780 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e00a      	b.n	80017a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001792:	f3af 8000 	nop.w
 8001796:	4601      	mov	r1, r0
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	b2ca      	uxtb	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf0      	blt.n	8001792 <_read+0x12>
	}

return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e2:	605a      	str	r2, [r3, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_isatty>:

int _isatty(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x50>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x16>
		heap_end = &end;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <_sbrk+0x50>)
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <_sbrk+0x54>)
 8001838:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <_sbrk+0x50>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <_sbrk+0x50>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	466a      	mov	r2, sp
 800184a:	4293      	cmp	r3, r2
 800184c:	d907      	bls.n	800185e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800184e:	f008 ffdf 	bl	800a810 <__errno>
 8001852:	4602      	mov	r2, r0
 8001854:	230c      	movs	r3, #12
 8001856:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	e006      	b.n	800186c <_sbrk+0x48>
	}

	heap_end += incr;
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <_sbrk+0x50>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a03      	ldr	r2, [pc, #12]	; (8001874 <_sbrk+0x50>)
 8001868:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000224 	.word	0x20000224
 8001878:	20000a00 	.word	0x20000a00

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <SystemInit+0x28>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <SystemInit+0x28>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SystemInit+0x28>)
 8001892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001896:	609a      	str	r2, [r3, #8]
#endif
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <MX_TIM3_Init+0xfc>)
 80018da:	4a33      	ldr	r2, [pc, #204]	; (80019a8 <MX_TIM3_Init+0x100>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <MX_TIM3_Init+0xfc>)
 80018e0:	2229      	movs	r2, #41	; 0x29
 80018e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <MX_TIM3_Init+0xfc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_TIM3_Init+0xfc>)
 80018ec:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80018f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <MX_TIM3_Init+0xfc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <MX_TIM3_Init+0xfc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fe:	4829      	ldr	r0, [pc, #164]	; (80019a4 <MX_TIM3_Init+0xfc>)
 8001900:	f005 fa66 	bl	8006dd0 <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800190a:	f7ff fea9 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001918:	4619      	mov	r1, r3
 800191a:	4822      	ldr	r0, [pc, #136]	; (80019a4 <MX_TIM3_Init+0xfc>)
 800191c:	f005 fcaa 	bl	8007274 <HAL_TIM_ConfigClockSource>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001926:	f7ff fe9b 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <MX_TIM3_Init+0xfc>)
 800192c:	f005 fa9f 	bl	8006e6e <HAL_TIM_PWM_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001936:	f7ff fe93 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	4619      	mov	r1, r3
 8001948:	4816      	ldr	r0, [pc, #88]	; (80019a4 <MX_TIM3_Init+0xfc>)
 800194a:	f006 f85d 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001954:	f7ff fe84 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001958:	2360      	movs	r3, #96	; 0x60
 800195a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_TIM3_Init+0xfc>)
 8001970:	f005 fbba 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800197a:	f7ff fe71 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2204      	movs	r2, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_TIM3_Init+0xfc>)
 8001986:	f005 fbaf 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001990:	f7ff fe66 	bl	8001660 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_TIM3_Init+0xfc>)
 8001996:	f000 f97b 	bl	8001c90 <HAL_TIM_MspPostInit>

}
 800199a:	bf00      	nop
 800199c:	3738      	adds	r7, #56	; 0x38
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200003ec 	.word	0x200003ec
 80019a8:	40000400 	.word	0x40000400

080019ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80019dc:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <MX_TIM4_Init+0x128>)
 80019de:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <MX_TIM4_Init+0x12c>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 80019e2:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <MX_TIM4_Init+0x128>)
 80019e4:	2229      	movs	r2, #41	; 0x29
 80019e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <MX_TIM4_Init+0x128>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <MX_TIM4_Init+0x128>)
 80019f0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80019f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <MX_TIM4_Init+0x128>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <MX_TIM4_Init+0x128>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a02:	4834      	ldr	r0, [pc, #208]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001a04:	f005 f9e4 	bl	8006dd0 <HAL_TIM_Base_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a0e:	f7ff fe27 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	482d      	ldr	r0, [pc, #180]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001a20:	f005 fc28 	bl	8007274 <HAL_TIM_ConfigClockSource>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a2a:	f7ff fe19 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a2e:	4829      	ldr	r0, [pc, #164]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001a30:	f005 fa1d 	bl	8006e6e <HAL_TIM_PWM_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a3a:	f7ff fe11 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a46:	f107 0320 	add.w	r3, r7, #32
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001a4e:	f005 ffdb 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a58:	f7ff fe02 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5c:	2360      	movs	r3, #96	; 0x60
 8001a5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4818      	ldr	r0, [pc, #96]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001a74:	f005 fb38 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a7e:	f7ff fdef 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	2204      	movs	r2, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001a8a:	f005 fb2d 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001a94:	f7ff fde4 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001aa0:	f005 fb22 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001aaa:	f7ff fdd9 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001ab6:	f005 fb17 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001ac0:	f7ff fdce 	bl	8001660 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MX_TIM4_Init+0x128>)
 8001ac6:	f000 f8e3 	bl	8001c90 <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3738      	adds	r7, #56	; 0x38
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000036c 	.word	0x2000036c
 8001ad8:	40000800 	.word	0x40000800

08001adc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001af6:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <MX_TIM10_Init+0x94>)
 8001af8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b18:	4814      	ldr	r0, [pc, #80]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b1a:	f005 f959 	bl	8006dd0 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001b24:	f7ff fd9c 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001b28:	4810      	ldr	r0, [pc, #64]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b2a:	f005 f9a0 	bl	8006e6e <HAL_TIM_PWM_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001b34:	f7ff fd94 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b38:	2360      	movs	r3, #96	; 0x60
 8001b3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b50:	f005 faca 	bl	80070e8 <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001b5a:	f7ff fd81 	bl	8001660 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <MX_TIM10_Init+0x90>)
 8001b60:	f000 f896 	bl	8001c90 <HAL_TIM_MspPostInit>

}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200003ac 	.word	0x200003ac
 8001b70:	40014400 	.word	0x40014400

08001b74 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_TIM11_Init+0x40>)
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <MX_TIM11_Init+0x44>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1680-1;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <MX_TIM11_Init+0x40>)
 8001b80:	f240 628f 	movw	r2, #1679	; 0x68f
 8001b84:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_TIM11_Init+0x40>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_TIM11_Init+0x40>)
 8001b8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b92:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_TIM11_Init+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_TIM11_Init+0x40>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_TIM11_Init+0x40>)
 8001ba2:	f005 f915 	bl	8006dd0 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001bac:	f7ff fd58 	bl	8001660 <Error_Handler>
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000042c 	.word	0x2000042c
 8001bb8:	40014800 	.word	0x40014800

08001bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_TIM_Base_MspInit+0xc0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001bea:	e042      	b.n	8001c72 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <HAL_TIM_Base_MspInit+0xc8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d10e      	bne.n	8001c14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
}
 8001c12:	e02e      	b.n	8001c72 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <HAL_TIM_Base_MspInit+0xcc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10e      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	e01a      	b.n	8001c72 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_TIM_Base_MspInit+0xd0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d115      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_TIM_Base_MspInit+0xc4>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201a      	movs	r0, #26
 8001c68:	f000 fc65 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c6c:	201a      	movs	r0, #26
 8001c6e:	f000 fc7e 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40000800 	.word	0x40000800
 8001c88:	40014400 	.word	0x40014400
 8001c8c:	40014800 	.word	0x40014800

08001c90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a45      	ldr	r2, [pc, #276]	; (8001dc4 <HAL_TIM_MspPostInit+0x134>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d13c      	bne.n	8001d2c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a43      	ldr	r2, [pc, #268]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cea:	2340      	movs	r3, #64	; 0x40
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	4831      	ldr	r0, [pc, #196]	; (8001dcc <HAL_TIM_MspPostInit+0x13c>)
 8001d06:	f001 fc59 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	482a      	ldr	r0, [pc, #168]	; (8001dd0 <HAL_TIM_MspPostInit+0x140>)
 8001d26:	f001 fc49 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001d2a:	e047      	b.n	8001dbc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_TIM_MspPostInit+0x144>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d11f      	bne.n	8001d76 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d52:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	481a      	ldr	r0, [pc, #104]	; (8001dd8 <HAL_TIM_MspPostInit+0x148>)
 8001d70:	f001 fc24 	bl	80035bc <HAL_GPIO_Init>
}
 8001d74:	e022      	b.n	8001dbc <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_TIM_MspPostInit+0x14c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d11d      	bne.n	8001dbc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_TIM_MspPostInit+0x138>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d9c:	2340      	movs	r3, #64	; 0x40
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001dac:	2303      	movs	r3, #3
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	480a      	ldr	r0, [pc, #40]	; (8001de0 <HAL_TIM_MspPostInit+0x150>)
 8001db8:	f001 fc00 	bl	80035bc <HAL_GPIO_Init>
}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40020c00 	.word	0x40020c00
 8001ddc:	40014400 	.word	0x40014400
 8001de0:	40021400 	.word	0x40021400

08001de4 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_UART7_Init+0x50>)
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <MX_UART7_Init+0x54>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_UART7_Init+0x50>)
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <MX_UART7_Init+0x58>)
 8001df2:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_UART7_Init+0x50>)
 8001df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dfa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <MX_UART7_Init+0x50>)
 8001dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e02:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_UART7_Init+0x50>)
 8001e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_UART7_Init+0x50>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_UART7_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_UART7_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_UART7_Init+0x50>)
 8001e20:	f005 fe82 	bl	8007b28 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8001e2a:	f7ff fc19 	bl	8001660 <Error_Handler>
  }

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000046c 	.word	0x2000046c
 8001e38:	40007800 	.word	0x40007800
 8001e3c:	000186a0 	.word	0x000186a0

08001e40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <MX_USART2_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e70:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <MX_USART2_UART_Init+0x4c>)
 8001e7a:	f005 fe55 	bl	8007b28 <HAL_UART_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001e84:	f7ff fbec 	bl	8001660 <Error_Handler>
  }

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000054c 	.word	0x2000054c
 8001e90:	40004400 	.word	0x40004400

08001e94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <MX_USART3_UART_Init+0x50>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ecc:	f005 fe2c 	bl	8007b28 <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ed6:	f7ff fbc3 	bl	8001660 <Error_Handler>
  }

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200004ac 	.word	0x200004ac
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a72      	ldr	r2, [pc, #456]	; (80020d0 <HAL_UART_MspInit+0x1e8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d15c      	bne.n	8001fc4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a70      	ldr	r2, [pc, #448]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a69      	ldr	r2, [pc, #420]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001f30:	f043 0310 	orr.w	r3, r3, #16
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001f54:	2308      	movs	r3, #8
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	485e      	ldr	r0, [pc, #376]	; (80020d8 <HAL_UART_MspInit+0x1f0>)
 8001f60:	f001 fb2c 	bl	80035bc <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001f64:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f66:	4a5e      	ldr	r2, [pc, #376]	; (80020e0 <HAL_UART_MspInit+0x1f8>)
 8001f68:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f6c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001f70:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f72:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f78:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7e:	4b57      	ldr	r3, [pc, #348]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f84:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f98:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa0:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001fa6:	484d      	ldr	r0, [pc, #308]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001fa8:	f000 fafc 	bl	80025a4 <HAL_DMA_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001fb2:	f7ff fb55 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34
 8001fbc:	4a47      	ldr	r2, [pc, #284]	; (80020dc <HAL_UART_MspInit+0x1f4>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fc2:	e081      	b.n	80020c8 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <HAL_UART_MspInit+0x1fc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d14a      	bne.n	8002064 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002022:	2301      	movs	r3, #1
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002032:	2307      	movs	r3, #7
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	482a      	ldr	r0, [pc, #168]	; (80020e8 <HAL_UART_MspInit+0x200>)
 800203e:	f001 fabd 	bl	80035bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002042:	2370      	movs	r3, #112	; 0x70
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002052:	2307      	movs	r3, #7
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205a:	4619      	mov	r1, r3
 800205c:	4823      	ldr	r0, [pc, #140]	; (80020ec <HAL_UART_MspInit+0x204>)
 800205e:	f001 faad 	bl	80035bc <HAL_GPIO_Init>
}
 8002062:	e031      	b.n	80020c8 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <HAL_UART_MspInit+0x208>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d12c      	bne.n	80020c8 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_UART_MspInit+0x1ec>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b8:	2307      	movs	r3, #7
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	480a      	ldr	r0, [pc, #40]	; (80020ec <HAL_UART_MspInit+0x204>)
 80020c4:	f001 fa7a 	bl	80035bc <HAL_GPIO_Init>
}
 80020c8:	bf00      	nop
 80020ca:	3738      	adds	r7, #56	; 0x38
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40007800 	.word	0x40007800
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	200004ec 	.word	0x200004ec
 80020e0:	40026058 	.word	0x40026058
 80020e4:	40004400 	.word	0x40004400
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40004800 	.word	0x40004800

080020f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002102:	2204      	movs	r2, #4
 8002104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002108:	2202      	movs	r2, #2
 800210a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002114:	2202      	movs	r2, #2
 8002116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800211a:	2201      	movs	r2, #1
 800211c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800212c:	2201      	movs	r2, #1
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002138:	f004 f8ca 	bl	80062d0 <HAL_PCD_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002142:	f7ff fa8d 	bl	8001660 <Error_Handler>
  }

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000058c 	.word	0x2000058c

08002150 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002170:	d13f      	bne.n	80021f2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_PCD_MspInit+0xac>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_PCD_MspInit+0xac>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_PCD_MspInit+0xac>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800218e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021a0:	230a      	movs	r3, #10
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4815      	ldr	r0, [pc, #84]	; (8002200 <HAL_PCD_MspInit+0xb0>)
 80021ac:	f001 fa06 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	480e      	ldr	r0, [pc, #56]	; (8002200 <HAL_PCD_MspInit+0xb0>)
 80021c6:	f001 f9f9 	bl	80035bc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_PCD_MspInit+0xac>)
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_PCD_MspInit+0xac>)
 80021d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d4:	6353      	str	r3, [r2, #52]	; 0x34
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_PCD_MspInit+0xac>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_PCD_MspInit+0xac>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e4:	6453      	str	r3, [r2, #68]	; 0x44
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_PCD_MspInit+0xac>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020000 	.word	0x40020000

08002204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800223c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800220a:	e003      	b.n	8002214 <LoopCopyDataInit>

0800220c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800220e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002212:	3104      	adds	r1, #4

08002214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800221a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800221c:	d3f6      	bcc.n	800220c <CopyDataInit>
  ldr  r2, =_sbss
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002220:	e002      	b.n	8002228 <LoopFillZerobss>

08002222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002224:	f842 3b04 	str.w	r3, [r2], #4

08002228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800222a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800222c:	d3f9      	bcc.n	8002222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800222e:	f7ff fb25 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002232:	f008 faf3 	bl	800a81c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002236:	f7ff f969 	bl	800150c <main>
  bx  lr    
 800223a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800223c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002240:	0800d410 	.word	0x0800d410
  ldr  r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002248:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 800224c:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8002250:	20000a00 	.word	0x20000a00

08002254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_Init+0x40>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_Init+0x40>)
 8002262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_Init+0x40>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_Init+0x40>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f94d 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002286:	2000      	movs	r0, #0
 8002288:	f000 f808 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228c:	f7ff f9f0 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_InitTick+0x54>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_InitTick+0x58>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f965 	bl	800258a <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f92d 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_InitTick+0x5c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x20>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x24>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_IncTick+0x24>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000008 	.word	0x20000008
 8002320:	20000994 	.word	0x20000994

08002324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_GetTick+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000994 	.word	0x20000994

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff ffee 	bl	8002324 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_Delay+0x40>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002362:	bf00      	nop
 8002364:	f7ff ffde 	bl	8002324 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000008 	.word	0x20000008

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff29 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff3e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff8e 	bl	8002474 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff31 	bl	80023e4 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa2 	bl	80024dc <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff feb8 	bl	8002324 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e099      	b.n	80026f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e0:	e00f      	b.n	8002602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e2:	f7ff fe9f 	bl	8002324 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d908      	bls.n	8002602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e078      	b.n	80026f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e8      	bne.n	80025e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_DMA_Init+0x158>)
 800261c:	4013      	ands	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4313      	orrs	r3, r2
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0307 	bic.w	r3, r3, #7
 8002682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b04      	cmp	r3, #4
 8002694:	d117      	bne.n	80026c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fa9f 	bl	8002bec <DMA_CheckFifoParam>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026c2:	2301      	movs	r3, #1
 80026c4:	e016      	b.n	80026f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa56 	bl	8002b80 <DMA_CalcBaseAndBitshift>
 80026d4:	4603      	mov	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	223f      	movs	r2, #63	; 0x3f
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	f010803f 	.word	0xf010803f

08002700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_DMA_Start_IT+0x26>
 8002722:	2302      	movs	r3, #2
 8002724:	e040      	b.n	80027a8 <HAL_DMA_Start_IT+0xa8>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d12f      	bne.n	800279a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f9e8 	bl	8002b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	223f      	movs	r2, #63	; 0x3f
 800275a:	409a      	lsls	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0216 	orr.w	r2, r2, #22
 800276e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0208 	orr.w	r2, r2, #8
 8002786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e005      	b.n	80027a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00c      	b.n	80027e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002800:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <HAL_DMA_IRQHandler+0x258>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a92      	ldr	r2, [pc, #584]	; (8002a50 <HAL_DMA_IRQHandler+0x25c>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2208      	movs	r2, #8
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01a      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2208      	movs	r2, #8
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2204      	movs	r2, #4
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	2204      	movs	r2, #4
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0204 	orr.w	r2, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2210      	movs	r2, #16
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d043      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03c      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2210      	movs	r2, #16
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d018      	beq.n	8002936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d024      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
 8002922:	e01f      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e016      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0208 	bic.w	r2, r2, #8
 8002952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2220      	movs	r2, #32
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 808e 	beq.w	8002a92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8086 	beq.w	8002a92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	2220      	movs	r2, #32
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b05      	cmp	r3, #5
 800299c:	d136      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0216 	bic.w	r2, r2, #22
 80029ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_DMA_IRQHandler+0x1da>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	223f      	movs	r2, #63	; 0x3f
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07d      	beq.n	8002afe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
        }
        return;
 8002a0a:	e078      	b.n	8002afe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01c      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d108      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d030      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e02b      	b.n	8002a92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d027      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
 8002a4a:	e022      	b.n	8002a92 <HAL_DMA_IRQHandler+0x29e>
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0210 	bic.w	r2, r2, #16
 8002a70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d032      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d022      	beq.n	8002aec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d307      	bcc.n	8002ada <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f2      	bne.n	8002abe <HAL_DMA_IRQHandler+0x2ca>
 8002ad8:	e000      	b.n	8002adc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ada:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
 8002afc:	e000      	b.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002afe:	bf00      	nop
    }
  }
}
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop

08002b08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b16:	b2db      	uxtb	r3, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d108      	bne.n	8002b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b62:	e007      	b.n	8002b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3b10      	subs	r3, #16
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d909      	bls.n	8002bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc0:	e007      	b.n	8002bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	aaaaaaab 	.word	0xaaaaaaab
 8002be8:	0800d134 	.word	0x0800d134

08002bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d855      	bhi.n	8002cb8 <DMA_CheckFifoParam+0xcc>
 8002c0c:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <DMA_CheckFifoParam+0x28>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c37 	.word	0x08002c37
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002cb9 	.word	0x08002cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d045      	beq.n	8002cbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e042      	b.n	8002cbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c3e:	d13f      	bne.n	8002cc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e03c      	b.n	8002cc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	d121      	bne.n	8002c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d836      	bhi.n	8002cc4 <DMA_CheckFifoParam+0xd8>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <DMA_CheckFifoParam+0x70>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c73 	.word	0x08002c73
 8002c64:	08002c6d 	.word	0x08002c6d
 8002c68:	08002c85 	.word	0x08002c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e02f      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d024      	beq.n	8002cc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c82:	e021      	b.n	8002cc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c8c:	d11e      	bne.n	8002ccc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c92:	e01b      	b.n	8002ccc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <DMA_CheckFifoParam+0xb4>
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d003      	beq.n	8002ca6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c9e:	e018      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca4:	e015      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00e      	beq.n	8002cd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb6:	e00b      	b.n	8002cd0 <DMA_CheckFifoParam+0xe4>
      break;
 8002cb8:	bf00      	nop
 8002cba:	e00a      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cbc:	bf00      	nop
 8002cbe:	e008      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e006      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc4:	bf00      	nop
 8002cc6:	e004      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc8:	bf00      	nop
 8002cca:	e002      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cd0:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002cf0:	4baa      	ldr	r3, [pc, #680]	; (8002f9c <HAL_ETH_Init+0x2bc>)
 8002cf2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e185      	b.n	8003012 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe f9de 	bl	80010dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	4b9e      	ldr	r3, [pc, #632]	; (8002fa0 <HAL_ETH_Init+0x2c0>)
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	4a9d      	ldr	r2, [pc, #628]	; (8002fa0 <HAL_ETH_Init+0x2c0>)
 8002d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d30:	4b9b      	ldr	r3, [pc, #620]	; (8002fa0 <HAL_ETH_Init+0x2c0>)
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d3c:	4b99      	ldr	r3, [pc, #612]	; (8002fa4 <HAL_ETH_Init+0x2c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a98      	ldr	r2, [pc, #608]	; (8002fa4 <HAL_ETH_Init+0x2c4>)
 8002d42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d46:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d48:	4b96      	ldr	r3, [pc, #600]	; (8002fa4 <HAL_ETH_Init+0x2c4>)
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4994      	ldr	r1, [pc, #592]	; (8002fa4 <HAL_ETH_Init+0x2c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d6c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d6e:	f7ff fad9 	bl	8002324 <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d74:	e011      	b.n	8002d9a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002d76:	f7ff fad5 	bl	8002324 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d84:	d909      	bls.n	8002d9a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e13b      	b.n	8003012 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e4      	bne.n	8002d76 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f023 031c 	bic.w	r3, r3, #28
 8002dba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002dbc:	f003 ffd4 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8002dc0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4a78      	ldr	r2, [pc, #480]	; (8002fa8 <HAL_ETH_Init+0x2c8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d908      	bls.n	8002ddc <HAL_ETH_Init+0xfc>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4a77      	ldr	r2, [pc, #476]	; (8002fac <HAL_ETH_Init+0x2cc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d804      	bhi.n	8002ddc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f043 0308 	orr.w	r3, r3, #8
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e027      	b.n	8002e2c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4a73      	ldr	r2, [pc, #460]	; (8002fac <HAL_ETH_Init+0x2cc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d908      	bls.n	8002df6 <HAL_ETH_Init+0x116>
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4a72      	ldr	r2, [pc, #456]	; (8002fb0 <HAL_ETH_Init+0x2d0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d804      	bhi.n	8002df6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f043 030c 	orr.w	r3, r3, #12
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	e01a      	b.n	8002e2c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <HAL_ETH_Init+0x2d0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d903      	bls.n	8002e06 <HAL_ETH_Init+0x126>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4a6c      	ldr	r2, [pc, #432]	; (8002fb4 <HAL_ETH_Init+0x2d4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d911      	bls.n	8002e2a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_ETH_Init+0x2d4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d908      	bls.n	8002e20 <HAL_ETH_Init+0x140>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_ETH_Init+0x2d8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d804      	bhi.n	8002e20 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e005      	b.n	8002e2c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f043 0310 	orr.w	r3, r3, #16
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e000      	b.n	8002e2c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e2a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002e34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e38:	2100      	movs	r1, #0
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f956 	bl	80030ec <HAL_ETH_WritePHYRegister>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002e4a:	6939      	ldr	r1, [r7, #16]
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9b3 	bl	80031b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0d9      	b.n	8003012 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002e5e:	20ff      	movs	r0, #255	; 0xff
 8002e60:	f7ff fa6c 	bl	800233c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a7 	beq.w	8002fbc <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e6e:	f7ff fa59 	bl	8002324 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8cd 	bl	800301c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002e82:	f7ff fa4f 	bl	8002324 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d90f      	bls.n	8002eb4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002e98:	6939      	ldr	r1, [r7, #16]
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f98c 	bl	80031b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e0ae      	b.n	8003012 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0da      	beq.n	8002e74 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f911 	bl	80030ec <HAL_ETH_WritePHYRegister>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ed4:	6939      	ldr	r1, [r7, #16]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f96e 	bl	80031b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e094      	b.n	8003012 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7ff fa1c 	bl	8002324 <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f890 	bl	800301c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002efc:	f7ff fa12 	bl	8002324 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d90f      	bls.n	8002f2e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f94f 	bl	80031b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e071      	b.n	8003012 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0da      	beq.n	8002eee <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	211f      	movs	r1, #31
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f86b 	bl	800301c <HAL_ETH_ReadPHYRegister>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f50:	6939      	ldr	r1, [r7, #16]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f930 	bl	80031b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002f60:	2301      	movs	r3, #1
 8002f62:	e056      	b.n	8003012 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	e002      	b.n	8002f7e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	e037      	b.n	8003000 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	e032      	b.n	8003000 <HAL_ETH_Init+0x320>
 8002f9a:	bf00      	nop
 8002f9c:	03938700 	.word	0x03938700
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	01312cff 	.word	0x01312cff
 8002fac:	02160ebf 	.word	0x02160ebf
 8002fb0:	039386ff 	.word	0x039386ff
 8002fb4:	05f5e0ff 	.word	0x05f5e0ff
 8002fb8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f889 	bl	80030ec <HAL_ETH_WritePHYRegister>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002fe4:	6939      	ldr	r1, [r7, #16]
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8e6 	bl	80031b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e00c      	b.n	8003012 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002ff8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002ffc:	f7ff f99e 	bl	800233c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003000:	6939      	ldr	r1, [r7, #16]
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8d8 	bl	80031b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop

0800301c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	460b      	mov	r3, r1
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b82      	cmp	r3, #130	; 0x82
 800303c:	d101      	bne.n	8003042 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
 8003040:	e050      	b.n	80030e4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2282      	movs	r2, #130	; 0x82
 8003046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 031c 	and.w	r3, r3, #28
 8003058:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8a1b      	ldrh	r3, [r3, #16]
 800305e:	02db      	lsls	r3, r3, #11
 8003060:	b29b      	uxth	r3, r3
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800308e:	f7ff f949 	bl	8002324 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003094:	e015      	b.n	80030c2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003096:	f7ff f945 	bl	8002324 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d309      	bcc.n	80030ba <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e014      	b.n	80030e4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e4      	bne.n	8003096 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	460b      	mov	r3, r1
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b42      	cmp	r3, #66	; 0x42
 800310c:	d101      	bne.n	8003112 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	e04e      	b.n	80031b0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2242      	movs	r2, #66	; 0x42
 8003116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 031c 	and.w	r3, r3, #28
 8003128:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8a1b      	ldrh	r3, [r3, #16]
 800312e:	02db      	lsls	r3, r3, #11
 8003130:	b29b      	uxth	r3, r3
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	019b      	lsls	r3, r3, #6
 800313c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003168:	f7ff f8dc 	bl	8002324 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800316e:	e015      	b.n	800319c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003170:	f7ff f8d8 	bl	8002324 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d309      	bcc.n	8003194 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e00d      	b.n	80031b0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e4      	bne.n	8003170 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b0b0      	sub	sp, #192	; 0xc0
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80031e6:	2300      	movs	r3, #0
 80031e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d103      	bne.n	8003206 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003202:	663b      	str	r3, [r7, #96]	; 0x60
 8003204:	e001      	b.n	800320a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800320a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003214:	2300      	movs	r3, #0
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003224:	2340      	movs	r3, #64	; 0x40
 8003226:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800328c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003290:	4bac      	ldr	r3, [pc, #688]	; (8003544 <ETH_MACDMAConfig+0x38c>)
 8003292:	4013      	ands	r3, r2
 8003294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003298:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800329c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800329e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80032a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80032a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80032a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80032aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80032ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80032ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80032b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80032b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80032b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80032ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80032bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80032be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80032c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80032c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80032c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80032c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80032c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80032ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80032cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80032ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f7ff f825 	bl	800233c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80032fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003300:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003304:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800330a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800330c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003310:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003316:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800331c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003320:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003328:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800332a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003336:	2001      	movs	r0, #1
 8003338:	f7ff f800 	bl	800233c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003344:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800334e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003358:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003364:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003368:	f64f 7341 	movw	r3, #65345	; 0xff41
 800336c:	4013      	ands	r3, r2
 800336e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003376:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800337c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800337e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003382:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003388:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800338a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800338e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003394:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003396:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7fe ffc1 	bl	800233c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80033c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033de:	2001      	movs	r0, #1
 80033e0:	f7fe ffac 	bl	800233c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80033f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80033fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003400:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003412:	2304      	movs	r3, #4
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800341c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003432:	2300      	movs	r3, #0
 8003434:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003436:	2300      	movs	r3, #0
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003442:	3318      	adds	r3, #24
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800344a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800344e:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <ETH_MACDMAConfig+0x390>)
 8003450:	4013      	ands	r3, r2
 8003452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003456:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003458:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800345a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800345c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800345e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003460:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003462:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003464:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003466:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003468:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800346a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800346c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800346e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003472:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003476:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003478:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348a:	3318      	adds	r3, #24
 800348c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003490:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349a:	3318      	adds	r3, #24
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7fe ff4a 	bl	800233c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b0:	3318      	adds	r3, #24
 80034b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80034c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80034c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80034c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80034ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80034d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80034d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f7fe ff23 	bl	800233c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003502:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10f      	bne.n	800352c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003514:	331c      	adds	r3, #28
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003528:	331c      	adds	r3, #28
 800352a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	461a      	mov	r2, r3
 8003532:	2100      	movs	r1, #0
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f809 	bl	800354c <ETH_MACAddressConfig>
}
 800353a:	bf00      	nop
 800353c:	37c0      	adds	r7, #192	; 0xc0
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	ff20810f 	.word	0xff20810f
 8003548:	f8de3f23 	.word	0xf8de3f23

0800354c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3305      	adds	r3, #5
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	3204      	adds	r2, #4
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <ETH_MACAddressConfig+0x68>)
 800356e:	4413      	add	r3, r2
 8003570:	461a      	mov	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3303      	adds	r3, #3
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	061a      	lsls	r2, r3, #24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3302      	adds	r3, #2
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	4313      	orrs	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <ETH_MACAddressConfig+0x6c>)
 800359e:	4413      	add	r3, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6013      	str	r3, [r2, #0]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40028040 	.word	0x40028040
 80035b8:	40028044 	.word	0x40028044

080035bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e177      	b.n	80038c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d8:	2201      	movs	r2, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	f040 8166 	bne.w	80038c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d00b      	beq.n	8003616 <HAL_GPIO_Init+0x5a>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800360a:	2b11      	cmp	r3, #17
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b12      	cmp	r3, #18
 8003614:	d130      	bne.n	8003678 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0xfc>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b12      	cmp	r3, #18
 80036b6:	d123      	bne.n	8003700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	08da      	lsrs	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3208      	adds	r2, #8
 80036fa:	69b9      	ldr	r1, [r7, #24]
 80036fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80c0 	beq.w	80038c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_GPIO_Init+0x320>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	4a64      	ldr	r2, [pc, #400]	; (80038dc <HAL_GPIO_Init+0x320>)
 800374c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003750:	6453      	str	r3, [r2, #68]	; 0x44
 8003752:	4b62      	ldr	r3, [pc, #392]	; (80038dc <HAL_GPIO_Init+0x320>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800375e:	4a60      	ldr	r2, [pc, #384]	; (80038e0 <HAL_GPIO_Init+0x324>)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	3302      	adds	r3, #2
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	220f      	movs	r2, #15
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a57      	ldr	r2, [pc, #348]	; (80038e4 <HAL_GPIO_Init+0x328>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d037      	beq.n	80037fa <HAL_GPIO_Init+0x23e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <HAL_GPIO_Init+0x32c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d031      	beq.n	80037f6 <HAL_GPIO_Init+0x23a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a55      	ldr	r2, [pc, #340]	; (80038ec <HAL_GPIO_Init+0x330>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d02b      	beq.n	80037f2 <HAL_GPIO_Init+0x236>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a54      	ldr	r2, [pc, #336]	; (80038f0 <HAL_GPIO_Init+0x334>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d025      	beq.n	80037ee <HAL_GPIO_Init+0x232>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a53      	ldr	r2, [pc, #332]	; (80038f4 <HAL_GPIO_Init+0x338>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01f      	beq.n	80037ea <HAL_GPIO_Init+0x22e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a52      	ldr	r2, [pc, #328]	; (80038f8 <HAL_GPIO_Init+0x33c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d019      	beq.n	80037e6 <HAL_GPIO_Init+0x22a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a51      	ldr	r2, [pc, #324]	; (80038fc <HAL_GPIO_Init+0x340>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_GPIO_Init+0x226>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a50      	ldr	r2, [pc, #320]	; (8003900 <HAL_GPIO_Init+0x344>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00d      	beq.n	80037de <HAL_GPIO_Init+0x222>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a4f      	ldr	r2, [pc, #316]	; (8003904 <HAL_GPIO_Init+0x348>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <HAL_GPIO_Init+0x21e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a4e      	ldr	r2, [pc, #312]	; (8003908 <HAL_GPIO_Init+0x34c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_GPIO_Init+0x21a>
 80037d2:	2309      	movs	r3, #9
 80037d4:	e012      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037d6:	230a      	movs	r3, #10
 80037d8:	e010      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037da:	2308      	movs	r3, #8
 80037dc:	e00e      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037de:	2307      	movs	r3, #7
 80037e0:	e00c      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037e2:	2306      	movs	r3, #6
 80037e4:	e00a      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037e6:	2305      	movs	r3, #5
 80037e8:	e008      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037ee:	2303      	movs	r3, #3
 80037f0:	e004      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e002      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_GPIO_Init+0x240>
 80037fa:	2300      	movs	r3, #0
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f002 0203 	and.w	r2, r2, #3
 8003802:	0092      	lsls	r2, r2, #2
 8003804:	4093      	lsls	r3, r2
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800380c:	4934      	ldr	r1, [pc, #208]	; (80038e0 <HAL_GPIO_Init+0x324>)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3302      	adds	r3, #2
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800381a:	4b3c      	ldr	r3, [pc, #240]	; (800390c <HAL_GPIO_Init+0x350>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800383e:	4a33      	ldr	r2, [pc, #204]	; (800390c <HAL_GPIO_Init+0x350>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003844:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_GPIO_Init+0x350>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <HAL_GPIO_Init+0x350>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800386e:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_GPIO_Init+0x350>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003892:	4a1e      	ldr	r2, [pc, #120]	; (800390c <HAL_GPIO_Init+0x350>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003898:	4b1c      	ldr	r3, [pc, #112]	; (800390c <HAL_GPIO_Init+0x350>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038bc:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_GPIO_Init+0x350>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	f67f ae84 	bls.w	80035d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	3724      	adds	r7, #36	; 0x24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40013800 	.word	0x40013800
 80038e4:	40020000 	.word	0x40020000
 80038e8:	40020400 	.word	0x40020400
 80038ec:	40020800 	.word	0x40020800
 80038f0:	40020c00 	.word	0x40020c00
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40021400 	.word	0x40021400
 80038fc:	40021800 	.word	0x40021800
 8003900:	40021c00 	.word	0x40021c00
 8003904:	40022000 	.word	0x40022000
 8003908:	40022400 	.word	0x40022400
 800390c:	40013c00 	.word	0x40013c00

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800392c:	e003      	b.n	8003936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e11f      	b.n	8003b96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fd86 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	; 0x24
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039a8:	f003 f9ea 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 80039ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a7b      	ldr	r2, [pc, #492]	; (8003ba0 <HAL_I2C_Init+0x25c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d807      	bhi.n	80039c8 <HAL_I2C_Init+0x84>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a7a      	ldr	r2, [pc, #488]	; (8003ba4 <HAL_I2C_Init+0x260>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	bf94      	ite	ls
 80039c0:	2301      	movls	r3, #1
 80039c2:	2300      	movhi	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e006      	b.n	80039d6 <HAL_I2C_Init+0x92>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a77      	ldr	r2, [pc, #476]	; (8003ba8 <HAL_I2C_Init+0x264>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bf94      	ite	ls
 80039d0:	2301      	movls	r3, #1
 80039d2:	2300      	movhi	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0db      	b.n	8003b96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a72      	ldr	r2, [pc, #456]	; (8003bac <HAL_I2C_Init+0x268>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9b      	lsrs	r3, r3, #18
 80039e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a64      	ldr	r2, [pc, #400]	; (8003ba0 <HAL_I2C_Init+0x25c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d802      	bhi.n	8003a18 <HAL_I2C_Init+0xd4>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	e009      	b.n	8003a2c <HAL_I2C_Init+0xe8>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	4a63      	ldr	r2, [pc, #396]	; (8003bb0 <HAL_I2C_Init+0x26c>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4956      	ldr	r1, [pc, #344]	; (8003ba0 <HAL_I2C_Init+0x25c>)
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	d80d      	bhi.n	8003a68 <HAL_I2C_Init+0x124>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e59      	subs	r1, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	bf38      	it	cc
 8003a64:	2304      	movcc	r3, #4
 8003a66:	e04f      	b.n	8003b08 <HAL_I2C_Init+0x1c4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d111      	bne.n	8003a94 <HAL_I2C_Init+0x150>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e012      	b.n	8003aba <HAL_I2C_Init+0x176>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e58      	subs	r0, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	0099      	lsls	r1, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Init+0x17e>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e022      	b.n	8003b08 <HAL_I2C_Init+0x1c4>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_I2C_Init+0x1a4>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1e58      	subs	r0, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	440b      	add	r3, r1
 8003ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae6:	e00f      	b.n	8003b08 <HAL_I2C_Init+0x1c4>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	0099      	lsls	r1, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	6809      	ldr	r1, [r1, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6911      	ldr	r1, [r2, #16]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	000186a0 	.word	0x000186a0
 8003ba4:	001e847f 	.word	0x001e847f
 8003ba8:	003d08ff 	.word	0x003d08ff
 8003bac:	431bde83 	.word	0x431bde83
 8003bb0:	10624dd3 	.word	0x10624dd3

08003bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	817b      	strh	r3, [r7, #10]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7fe fbac 	bl	8002324 <HAL_GetTick>
 8003bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	f040 80e0 	bne.w	8003d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2319      	movs	r3, #25
 8003be2:	2201      	movs	r2, #1
 8003be4:	4970      	ldr	r1, [pc, #448]	; (8003da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f002 f8ff 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0d3      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2C_Master_Transmit+0x50>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0cc      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d007      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	; 0x21
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2210      	movs	r2, #16
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	893a      	ldrh	r2, [r7, #8]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a50      	ldr	r2, [pc, #320]	; (8003dac <HAL_I2C_Master_Transmit+0x1f8>)
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c6c:	8979      	ldrh	r1, [r7, #10]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f001 feec 	bl	8005a50 <I2C_MasterRequestWrite>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e08d      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c98:	e066      	b.n	8003d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	6a39      	ldr	r1, [r7, #32]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f002 f979 	bl	8005f96 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e06b      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d11b      	bne.n	8003d3c <HAL_I2C_Master_Transmit+0x188>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	6a39      	ldr	r1, [r7, #32]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f002 f969 	bl	8006018 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d107      	bne.n	8003d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01a      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d194      	bne.n	8003c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	00100002 	.word	0x00100002
 8003dac:	ffff0000 	.word	0xffff0000

08003db0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08c      	sub	sp, #48	; 0x30
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7fe faae 	bl	8002324 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 820b 	bne.w	80041ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2319      	movs	r3, #25
 8003dde:	2201      	movs	r2, #1
 8003de0:	497c      	ldr	r1, [pc, #496]	; (8003fd4 <HAL_I2C_Master_Receive+0x224>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f002 f801 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	e1fe      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2C_Master_Receive+0x50>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e1f7      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d007      	beq.n	8003e26 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2222      	movs	r2, #34	; 0x22
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2210      	movs	r2, #16
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a5c      	ldr	r2, [pc, #368]	; (8003fd8 <HAL_I2C_Master_Receive+0x228>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e68:	8979      	ldrh	r1, [r7, #10]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f001 fe70 	bl	8005b54 <I2C_MasterRequestRead>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e1b8      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d113      	bne.n	8003eae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e86:	2300      	movs	r3, #0
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	623b      	str	r3, [r7, #32]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e18c      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d11b      	bne.n	8003eee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e16c      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d11b      	bne.n	8003f2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	e14c      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f54:	e138      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	f200 80f1 	bhi.w	8004142 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d123      	bne.n	8003fb0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f002 f894 	bl	800609a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e139      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fae:	e10b      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d14e      	bne.n	8004056 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4906      	ldr	r1, [pc, #24]	; (8003fdc <HAL_I2C_Master_Receive+0x22c>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f001 ff11 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e10e      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
 8003fd2:	bf00      	nop
 8003fd4:	00100002 	.word	0x00100002
 8003fd8:	ffff0000 	.word	0xffff0000
 8003fdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004054:	e0b8      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	2200      	movs	r2, #0
 800405e:	4966      	ldr	r1, [pc, #408]	; (80041f8 <HAL_I2C_Master_Receive+0x448>)
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f001 fec2 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0bf      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	2200      	movs	r2, #0
 80040ba:	494f      	ldr	r1, [pc, #316]	; (80041f8 <HAL_I2C_Master_Receive+0x448>)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f001 fe94 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e091      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004140:	e042      	b.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f001 ffa7 	bl	800609a <I2C_WaitOnRXNEFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e04c      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d118      	bne.n	80041c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f47f aec2 	bne.w	8003f56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00010004 	.word	0x00010004

080041fc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4603      	mov	r3, r0
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	460b      	mov	r3, r1
 8004210:	813b      	strh	r3, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	f040 809a 	bne.w	800435c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004228:	4b50      	ldr	r3, [pc, #320]	; (800436c <HAL_I2C_Mem_Read_IT+0x170>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	08db      	lsrs	r3, r3, #3
 800422e:	4a50      	ldr	r2, [pc, #320]	; (8004370 <HAL_I2C_Mem_Read_IT+0x174>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	0a1a      	lsrs	r2, r3, #8
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009a      	lsls	r2, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3b01      	subs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e070      	b.n	800435e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d0db      	beq.n	8004242 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_I2C_Mem_Read_IT+0x9c>
 8004294:	2302      	movs	r3, #2
 8004296:	e062      	b.n	800435e <HAL_I2C_Mem_Read_IT+0x162>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d007      	beq.n	80042be <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2222      	movs	r2, #34	; 0x22
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2240      	movs	r2, #64	; 0x40
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_I2C_Mem_Read_IT+0x178>)
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004300:	897a      	ldrh	r2, [r7, #10]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004306:	893a      	ldrh	r2, [r7, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004326:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004336:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004356:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000000 	.word	0x20000000
 8004370:	14f8b589 	.word	0x14f8b589
 8004374:	ffff0000 	.word	0xffff0000

08004378 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004398:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d003      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0x38>
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	f040 80b6 	bne.w	800451c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043d0:	d003      	beq.n	80043da <HAL_I2C_EV_IRQHandler+0x62>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80043d8:	d101      	bne.n	80043de <HAL_I2C_EV_IRQHandler+0x66>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_I2C_EV_IRQHandler+0x68>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	f000 8127 	beq.w	8004634 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00c      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0x92>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	0a5b      	lsrs	r3, r3, #9
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d006      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f001 fed1 	bl	80061a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fd12 	bl	8004e2c <I2C_Master_SB>
 8004408:	e087      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_I2C_EV_IRQHandler+0xb2>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fd88 	bl	8004f38 <I2C_Master_ADD10>
 8004428:	e077      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_I2C_EV_IRQHandler+0xd2>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	0a5b      	lsrs	r3, r3, #9
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fda2 	bl	8004f8c <I2C_Master_ADDR>
 8004448:	e067      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d030      	beq.n	80044b8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	f000 80e8 	beq.w	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	09db      	lsrs	r3, r3, #7
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00f      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x11c>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	0a9b      	lsrs	r3, r3, #10
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x11c>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f9de 	bl	800484e <I2C_MasterTransmit_TXE>
 8004492:	e042      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80cb 	beq.w	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	0a5b      	lsrs	r3, r3, #9
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80c4 	beq.w	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa68 	bl	8004986 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b6:	e0bf      	b.n	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c6:	f000 80b7 	beq.w	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	099b      	lsrs	r3, r3, #6
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00f      	beq.n	80044f6 <HAL_I2C_EV_IRQHandler+0x17e>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	0a9b      	lsrs	r3, r3, #10
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_I2C_EV_IRQHandler+0x17e>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fb30 	bl	8004b54 <I2C_MasterReceive_RXNE>
 80044f4:	e011      	b.n	800451a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 809a 	beq.w	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	0a5b      	lsrs	r3, r3, #9
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8093 	beq.w	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fba0 	bl	8004c58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004518:	e08e      	b.n	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
 800451a:	e08d      	b.n	8004638 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	e007      	b.n	800453e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d012      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x1f8>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	0a5b      	lsrs	r3, r3, #9
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 ff5e 	bl	800542a <I2C_Slave_ADDR>
 800456e:	e066      	b.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x218>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	0a5b      	lsrs	r3, r3, #9
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 ff93 	bl	80054b4 <I2C_Slave_STOPF>
 800458e:	e056      	b.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004590:	7bbb      	ldrb	r3, [r7, #14]
 8004592:	2b21      	cmp	r3, #33	; 0x21
 8004594:	d002      	beq.n	800459c <HAL_I2C_EV_IRQHandler+0x224>
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	2b29      	cmp	r3, #41	; 0x29
 800459a:	d125      	bne.n	80045e8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	09db      	lsrs	r3, r3, #7
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00f      	beq.n	80045c8 <HAL_I2C_EV_IRQHandler+0x250>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	0a9b      	lsrs	r3, r3, #10
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d009      	beq.n	80045c8 <HAL_I2C_EV_IRQHandler+0x250>
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fe74 	bl	80052ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045c6:	e039      	b.n	800463c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d033      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x2c4>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	0a5b      	lsrs	r3, r3, #9
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02d      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fea1 	bl	8005328 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045e6:	e029      	b.n	800463c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00f      	beq.n	8004614 <HAL_I2C_EV_IRQHandler+0x29c>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_I2C_EV_IRQHandler+0x29c>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 feac 	bl	800536a <I2C_SlaveReceive_RXNE>
 8004612:	e014      	b.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00e      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	0a5b      	lsrs	r3, r3, #9
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 feda 	bl	80053e6 <I2C_SlaveReceive_BTF>
 8004632:	e004      	b.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800463c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004666:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <HAL_I2C_ER_IRQHandler+0x4e>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004690:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	0a5b      	lsrs	r3, r3, #9
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <HAL_I2C_ER_IRQHandler+0x78>
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80046ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03f      	beq.n	8004748 <HAL_I2C_ER_IRQHandler+0x104>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d039      	beq.n	8004748 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80046d4:	7efb      	ldrb	r3, [r7, #27]
 80046d6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e6:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80046ee:	7ebb      	ldrb	r3, [r7, #26]
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d112      	bne.n	800471a <HAL_I2C_ER_IRQHandler+0xd6>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <HAL_I2C_ER_IRQHandler+0xd6>
 80046fa:	7cfb      	ldrb	r3, [r7, #19]
 80046fc:	2b21      	cmp	r3, #33	; 0x21
 80046fe:	d008      	beq.n	8004712 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	2b29      	cmp	r3, #41	; 0x29
 8004704:	d005      	beq.n	8004712 <HAL_I2C_ER_IRQHandler+0xce>
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b28      	cmp	r3, #40	; 0x28
 800470a:	d106      	bne.n	800471a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b21      	cmp	r3, #33	; 0x21
 8004710:	d103      	bne.n	800471a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fffe 	bl	8005714 <I2C_Slave_AF>
 8004718:	e016      	b.n	8004748 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004722:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800472c:	7efb      	ldrb	r3, [r7, #27]
 800472e:	2b10      	cmp	r3, #16
 8004730:	d002      	beq.n	8004738 <HAL_I2C_ER_IRQHandler+0xf4>
 8004732:	7efb      	ldrb	r3, [r7, #27]
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d107      	bne.n	8004748 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004746:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	0adb      	lsrs	r3, r3, #11
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00e      	beq.n	8004772 <HAL_I2C_ER_IRQHandler+0x12e>
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f043 0308 	orr.w	r3, r3, #8
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004770:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f001 f835 	bl	80057f4 <I2C_ITError>
  }
}
 800478a:	bf00      	nop
 800478c:	3728      	adds	r7, #40	; 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
 80047ee:	4613      	mov	r3, r2
 80047f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004864:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d150      	bne.n	8004916 <I2C_MasterTransmit_TXE+0xc8>
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b21      	cmp	r3, #33	; 0x21
 8004878:	d14d      	bne.n	8004916 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d01d      	beq.n	80048bc <I2C_MasterTransmit_TXE+0x6e>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b20      	cmp	r3, #32
 8004884:	d01a      	beq.n	80048bc <I2C_MasterTransmit_TXE+0x6e>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800488c:	d016      	beq.n	80048bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800489c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2211      	movs	r2, #17
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff6c 	bl	8004792 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ba:	e060      	b.n	800497e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d107      	bne.n	8004906 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff ff87 	bl	8004812 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004904:	e03b      	b.n	800497e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ff3f 	bl	8004792 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004914:	e033      	b.n	800497e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b21      	cmp	r3, #33	; 0x21
 800491a:	d005      	beq.n	8004928 <I2C_MasterTransmit_TXE+0xda>
 800491c:	7bbb      	ldrb	r3, [r7, #14]
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d12d      	bne.n	800497e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b22      	cmp	r3, #34	; 0x22
 8004926:	d12a      	bne.n	800497e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004942:	e01c      	b.n	800497e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d103      	bne.n	8004958 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f898 	bl	8004a86 <I2C_MemoryTransmit_TXE_BTF>
}
 8004956:	e012      	b.n	800497e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800497c:	e7ff      	b.n	800497e <I2C_MasterTransmit_TXE+0x130>
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b21      	cmp	r3, #33	; 0x21
 800499e:	d165      	bne.n	8004a6c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d012      	beq.n	80049d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049ce:	e056      	b.n	8004a7e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d01d      	beq.n	8004a12 <I2C_MasterTransmit_BTF+0x8c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d01a      	beq.n	8004a12 <I2C_MasterTransmit_BTF+0x8c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049e2:	d016      	beq.n	8004a12 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2211      	movs	r2, #17
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fec1 	bl	8004792 <HAL_I2C_MasterTxCpltCallback>
}
 8004a10:	e035      	b.n	8004a7e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a20:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a30:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d107      	bne.n	8004a5c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fedc 	bl	8004812 <HAL_I2C_MemTxCpltCallback>
}
 8004a5a:	e010      	b.n	8004a7e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fe94 	bl	8004792 <HAL_I2C_MasterTxCpltCallback>
}
 8004a6a:	e008      	b.n	8004a7e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d102      	bne.n	8004a7e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f804 	bl	8004a86 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d11d      	bne.n	8004ad2 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d10b      	bne.n	8004ab6 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	1c9a      	adds	r2, r3, #2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ab4:	e048      	b.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	121b      	asrs	r3, r3, #8
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ad0:	e03a      	b.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d10b      	bne.n	8004af2 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004af0:	e02a      	b.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d126      	bne.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b22      	cmp	r3, #34	; 0x22
 8004b04:	d108      	bne.n	8004b18 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b14:	601a      	str	r2, [r3, #0]
}
 8004b16:	e017      	b.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b21      	cmp	r3, #33	; 0x21
 8004b22:	d111      	bne.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b22      	cmp	r3, #34	; 0x22
 8004b66:	d173      	bne.n	8004c50 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d920      	bls.n	8004bb8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d154      	bne.n	8004c50 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004bb6:	e04b      	b.n	8004c50 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d047      	beq.n	8004c50 <I2C_MasterReceive_RXNE+0xfc>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d002      	beq.n	8004bcc <I2C_MasterReceive_RXNE+0x78>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d141      	bne.n	8004c50 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bea:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d10a      	bne.n	8004c3c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f005 fd9f 	bl	800a778 <HAL_I2C_MemRxCpltCallback>
}
 8004c3a:	e009      	b.n	8004c50 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2212      	movs	r2, #18
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fdab 	bl	80047a6 <HAL_I2C_MasterRxCpltCallback>
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d11b      	bne.n	8004ca8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ca6:	e0bd      	b.n	8004e24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d129      	bne.n	8004d06 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d00a      	beq.n	8004cde <I2C_MasterReceive_BTF+0x86>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d007      	beq.n	8004cde <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cdc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d04:	e08e      	b.n	8004e24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d176      	bne.n	8004dfe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d002      	beq.n	8004d1c <I2C_MasterReceive_BTF+0xc4>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d108      	bne.n	8004d2e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e019      	b.n	8004d62 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d002      	beq.n	8004d3a <I2C_MasterReceive_BTF+0xe2>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d108      	bne.n	8004d4c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e00a      	b.n	8004d62 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d007      	beq.n	8004d62 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004dbc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d10a      	bne.n	8004de8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f005 fcc9 	bl	800a778 <HAL_I2C_MemRxCpltCallback>
}
 8004de6:	e01d      	b.n	8004e24 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2212      	movs	r2, #18
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fcd5 	bl	80047a6 <HAL_I2C_MasterRxCpltCallback>
}
 8004dfc:	e012      	b.n	8004e24 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d117      	bne.n	8004e70 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e58:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e5a:	e067      	b.n	8004f2c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	611a      	str	r2, [r3, #16]
}
 8004e6e:	e05d      	b.n	8004f2c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e78:	d133      	bne.n	8004ee2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b21      	cmp	r3, #33	; 0x21
 8004e84:	d109      	bne.n	8004e9a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e96:	611a      	str	r2, [r3, #16]
 8004e98:	e008      	b.n	8004eac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <I2C_Master_SB+0x92>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d108      	bne.n	8004ed0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d032      	beq.n	8004f2c <I2C_Master_SB+0x100>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d02d      	beq.n	8004f2c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ede:	605a      	str	r2, [r3, #4]
}
 8004ee0:	e024      	b.n	8004f2c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10e      	bne.n	8004f08 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	11db      	asrs	r3, r3, #7
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 0306 	and.w	r3, r3, #6
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f063 030f 	orn	r3, r3, #15
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]
}
 8004f06:	e011      	b.n	8004f2c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10d      	bne.n	8004f2c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	11db      	asrs	r3, r3, #7
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0306 	and.w	r3, r3, #6
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f063 030e 	orn	r3, r3, #14
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d103      	bne.n	8004f5c <I2C_Master_ADD10+0x24>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d011      	beq.n	8004f80 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <I2C_Master_ADD10+0x38>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b091      	sub	sp, #68	; 0x44
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b22      	cmp	r3, #34	; 0x22
 8004fb4:	f040 8169 	bne.w	800528a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <I2C_Master_ADDR+0x54>
 8004fc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d10b      	bne.n	8004fe0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	633b      	str	r3, [r7, #48]	; 0x30
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	e160      	b.n	80052a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11d      	bne.n	8005024 <I2C_Master_ADDR+0x98>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ff0:	d118      	bne.n	8005024 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	651a      	str	r2, [r3, #80]	; 0x50
 8005022:	e13e      	b.n	80052a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d113      	bne.n	8005056 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502e:	2300      	movs	r3, #0
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e115      	b.n	8005282 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	f040 808a 	bne.w	8005176 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005068:	d137      	bne.n	80050da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005078:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005088:	d113      	bne.n	80050b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005098:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	e0e7      	b.n	8005282 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e0d3      	b.n	8005282 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d02e      	beq.n	800513e <I2C_Master_ADDR+0x1b2>
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d02b      	beq.n	800513e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	2b12      	cmp	r3, #18
 80050ea:	d102      	bne.n	80050f2 <I2C_Master_ADDR+0x166>
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d125      	bne.n	800513e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d00e      	beq.n	8005116 <I2C_Master_ADDR+0x18a>
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d00b      	beq.n	8005116 <I2C_Master_ADDR+0x18a>
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b10      	cmp	r3, #16
 8005102:	d008      	beq.n	8005116 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e007      	b.n	8005126 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005124:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	e0a1      	b.n	8005282 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e085      	b.n	8005282 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d14d      	bne.n	800521c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	2b04      	cmp	r3, #4
 8005184:	d016      	beq.n	80051b4 <I2C_Master_ADDR+0x228>
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2b02      	cmp	r3, #2
 800518a:	d013      	beq.n	80051b4 <I2C_Master_ADDR+0x228>
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	2b10      	cmp	r3, #16
 8005190:	d010      	beq.n	80051b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e007      	b.n	80051c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d117      	bne.n	8005204 <I2C_Master_ADDR+0x278>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051da:	d00b      	beq.n	80051f4 <I2C_Master_ADDR+0x268>
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d008      	beq.n	80051f4 <I2C_Master_ADDR+0x268>
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d005      	beq.n	80051f4 <I2C_Master_ADDR+0x268>
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d002      	beq.n	80051f4 <I2C_Master_ADDR+0x268>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d107      	bne.n	8005204 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005202:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	e032      	b.n	8005282 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800522a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523a:	d117      	bne.n	800526c <I2C_Master_ADDR+0x2e0>
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005242:	d00b      	beq.n	800525c <I2C_Master_ADDR+0x2d0>
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	2b01      	cmp	r3, #1
 8005248:	d008      	beq.n	800525c <I2C_Master_ADDR+0x2d0>
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	2b08      	cmp	r3, #8
 800524e:	d005      	beq.n	800525c <I2C_Master_ADDR+0x2d0>
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	2b10      	cmp	r3, #16
 8005254:	d002      	beq.n	800525c <I2C_Master_ADDR+0x2d0>
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	2b20      	cmp	r3, #32
 800525a:	d107      	bne.n	800526c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800526a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005288:	e00b      	b.n	80052a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	e7ff      	b.n	80052a2 <I2C_Master_ADDR+0x316>
 80052a2:	bf00      	nop
 80052a4:	3744      	adds	r7, #68	; 0x44
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d02b      	beq.n	8005320 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d114      	bne.n	8005320 <I2C_SlaveTransmit_TXE+0x72>
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b29      	cmp	r3, #41	; 0x29
 80052fa:	d111      	bne.n	8005320 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2221      	movs	r2, #33	; 0x21
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2228      	movs	r2, #40	; 0x28
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fa4d 	bl	80047ba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02c      	beq.n	80053de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d114      	bne.n	80053de <I2C_SlaveReceive_RXNE+0x74>
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b2a      	cmp	r3, #42	; 0x2a
 80053b8:	d111      	bne.n	80053de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2222      	movs	r2, #34	; 0x22
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2228      	movs	r2, #40	; 0x28
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff f9f8 	bl	80047ce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005434:	2300      	movs	r3, #0
 8005436:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005444:	2b28      	cmp	r3, #40	; 0x28
 8005446:	d127      	bne.n	8005498 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	09db      	lsrs	r3, r3, #7
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	81bb      	strh	r3, [r7, #12]
 800547a:	e002      	b.n	8005482 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800548a:	89ba      	ldrh	r2, [r7, #12]
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff f9a6 	bl	80047e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005496:	e008      	b.n	80054aa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0202 	mvn.w	r2, #2
 80054a0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80054d4:	2300      	movs	r3, #0
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005500:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005510:	d172      	bne.n	80055f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b22      	cmp	r3, #34	; 0x22
 8005516:	d002      	beq.n	800551e <I2C_Slave_STOPF+0x6a>
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b2a      	cmp	r3, #42	; 0x2a
 800551c:	d135      	bne.n	800558a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005550:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	4618      	mov	r0, r3
 8005558:	f7fd fad6 	bl	8002b08 <HAL_DMA_GetState>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d049      	beq.n	80055f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	4a69      	ldr	r2, [pc, #420]	; (800570c <I2C_Slave_STOPF+0x258>)
 8005568:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	4618      	mov	r0, r3
 8005570:	f7fd f91e 	bl	80027b0 <HAL_DMA_Abort_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d03d      	beq.n	80055f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005584:	4610      	mov	r0, r2
 8005586:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005588:	e035      	b.n	80055f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	b29a      	uxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0204 	orr.w	r2, r3, #4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fd faa0 	bl	8002b08 <HAL_DMA_GetState>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d014      	beq.n	80055f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	4a4e      	ldr	r2, [pc, #312]	; (800570c <I2C_Slave_STOPF+0x258>)
 80055d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fd f8e8 	bl	80027b0 <HAL_DMA_Abort_IT>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055f0:	4610      	mov	r0, r2
 80055f2:	4798      	blx	r3
 80055f4:	e000      	b.n	80055f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d03e      	beq.n	8005680 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b04      	cmp	r3, #4
 800560e:	d112      	bne.n	8005636 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d112      	bne.n	800566a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f043 0204 	orr.w	r2, r3, #4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8b3 	bl	80057f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800568e:	e039      	b.n	8005704 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b2a      	cmp	r3, #42	; 0x2a
 8005694:	d109      	bne.n	80056aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2228      	movs	r2, #40	; 0x28
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff f892 	bl	80047ce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b28      	cmp	r3, #40	; 0x28
 80056b4:	d111      	bne.n	80056da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <I2C_Slave_STOPF+0x25c>)
 80056ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff f893 	bl	80047fe <HAL_I2C_ListenCpltCallback>
}
 80056d8:	e014      	b.n	8005704 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	2b22      	cmp	r3, #34	; 0x22
 80056e0:	d002      	beq.n	80056e8 <I2C_Slave_STOPF+0x234>
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b22      	cmp	r3, #34	; 0x22
 80056e6:	d10d      	bne.n	8005704 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff f865 	bl	80047ce <HAL_I2C_SlaveRxCpltCallback>
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	08005ced 	.word	0x08005ced
 8005710:	ffff0000 	.word	0xffff0000

08005714 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005722:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d002      	beq.n	8005736 <I2C_Slave_AF+0x22>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b20      	cmp	r3, #32
 8005734:	d129      	bne.n	800578a <I2C_Slave_AF+0x76>
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2b28      	cmp	r3, #40	; 0x28
 800573a:	d126      	bne.n	800578a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <I2C_Slave_AF+0xdc>)
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005750:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800575a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff f83b 	bl	80047fe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005788:	e02e      	b.n	80057e8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	2b21      	cmp	r3, #33	; 0x21
 800578e:	d126      	bne.n	80057de <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <I2C_Slave_AF+0xdc>)
 8005794:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2221      	movs	r2, #33	; 0x21
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fe ffef 	bl	80047ba <HAL_I2C_SlaveTxCpltCallback>
}
 80057dc:	e004      	b.n	80057e8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e6:	615a      	str	r2, [r3, #20]
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	ffff0000 	.word	0xffff0000

080057f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005802:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b10      	cmp	r3, #16
 800580e:	d10a      	bne.n	8005826 <I2C_ITError+0x32>
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b22      	cmp	r3, #34	; 0x22
 8005814:	d107      	bne.n	8005826 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005824:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800582c:	2b28      	cmp	r3, #40	; 0x28
 800582e:	d107      	bne.n	8005840 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2228      	movs	r2, #40	; 0x28
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800583e:	e015      	b.n	800586c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584e:	d006      	beq.n	800585e <I2C_ITError+0x6a>
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b60      	cmp	r3, #96	; 0x60
 8005854:	d003      	beq.n	800585e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587a:	d162      	bne.n	8005942 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800588a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d020      	beq.n	80058dc <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	4a6a      	ldr	r2, [pc, #424]	; (8005a48 <I2C_ITError+0x254>)
 80058a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fc ff82 	bl	80027b0 <HAL_DMA_Abort_IT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8089 	beq.w	80059c6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058d6:	4610      	mov	r0, r2
 80058d8:	4798      	blx	r3
 80058da:	e074      	b.n	80059c6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	4a59      	ldr	r2, [pc, #356]	; (8005a48 <I2C_ITError+0x254>)
 80058e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fc ff61 	bl	80027b0 <HAL_DMA_Abort_IT>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d068      	beq.n	80059c6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d10b      	bne.n	800591a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800593c:	4610      	mov	r0, r2
 800593e:	4798      	blx	r3
 8005940:	e041      	b.n	80059c6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b60      	cmp	r3, #96	; 0x60
 800594c:	d125      	bne.n	800599a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d10b      	bne.n	8005982 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fe ff51 	bl	800483a <HAL_I2C_AbortCpltCallback>
 8005998:	e015      	b.n	80059c6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d10b      	bne.n	80059c0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fe ff30 	bl	8004826 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10e      	bne.n	80059f4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d113      	bne.n	8005a40 <I2C_ITError+0x24c>
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b28      	cmp	r3, #40	; 0x28
 8005a1c:	d110      	bne.n	8005a40 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <I2C_ITError+0x258>)
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fe fedf 	bl	80047fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	08005ced 	.word	0x08005ced
 8005a4c:	ffff0000 	.word	0xffff0000

08005a50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d006      	beq.n	8005a7a <I2C_MasterRequestWrite+0x2a>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d003      	beq.n	8005a7a <I2C_MasterRequestWrite+0x2a>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a78:	d108      	bne.n	8005a8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e00b      	b.n	8005aa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	2b12      	cmp	r3, #18
 8005a92:	d107      	bne.n	8005aa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f99a 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00c      	beq.n	8005ad6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e035      	b.n	8005b42 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ade:	d108      	bne.n	8005af2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ae0:	897b      	ldrh	r3, [r7, #10]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aee:	611a      	str	r2, [r3, #16]
 8005af0:	e01b      	b.n	8005b2a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005af2:	897b      	ldrh	r3, [r7, #10]
 8005af4:	11db      	asrs	r3, r3, #7
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f003 0306 	and.w	r3, r3, #6
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f063 030f 	orn	r3, r3, #15
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	490f      	ldr	r1, [pc, #60]	; (8005b4c <I2C_MasterRequestWrite+0xfc>)
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f9c1 	bl	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e010      	b.n	8005b42 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b20:	897b      	ldrh	r3, [r7, #10]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4908      	ldr	r1, [pc, #32]	; (8005b50 <I2C_MasterRequestWrite+0x100>)
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f9b1 	bl	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	00010008 	.word	0x00010008
 8005b50:	00010002 	.word	0x00010002

08005b54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	460b      	mov	r3, r1
 8005b62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d006      	beq.n	8005b8e <I2C_MasterRequestRead+0x3a>
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d003      	beq.n	8005b8e <I2C_MasterRequestRead+0x3a>
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b8c:	d108      	bne.n	8005ba0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e00b      	b.n	8005bb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	2b11      	cmp	r3, #17
 8005ba6:	d107      	bne.n	8005bb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f910 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00c      	beq.n	8005bea <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e078      	b.n	8005cdc <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf2:	d108      	bne.n	8005c06 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bf4:	897b      	ldrh	r3, [r7, #10]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	611a      	str	r2, [r3, #16]
 8005c04:	e05e      	b.n	8005cc4 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c06:	897b      	ldrh	r3, [r7, #10]
 8005c08:	11db      	asrs	r3, r3, #7
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 0306 	and.w	r3, r3, #6
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f063 030f 	orn	r3, r3, #15
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4930      	ldr	r1, [pc, #192]	; (8005ce4 <I2C_MasterRequestRead+0x190>)
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f937 	bl	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e053      	b.n	8005cdc <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c34:	897b      	ldrh	r3, [r7, #10]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4929      	ldr	r1, [pc, #164]	; (8005ce8 <I2C_MasterRequestRead+0x194>)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f927 	bl	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e043      	b.n	8005cdc <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f8af 	bl	8005dea <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e017      	b.n	8005cdc <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005cac:	897b      	ldrh	r3, [r7, #10]
 8005cae:	11db      	asrs	r3, r3, #7
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f063 030e 	orn	r3, r3, #14
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4907      	ldr	r1, [pc, #28]	; (8005ce8 <I2C_MasterRequestRead+0x194>)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f8e4 	bl	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	00010008 	.word	0x00010008
 8005ce8:	00010002 	.word	0x00010002

08005cec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d00:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0e:	2200      	movs	r2, #0
 8005d10:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	2200      	movs	r2, #0
 8005d20:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	2200      	movs	r2, #0
 8005d46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	2200      	movs	r2, #0
 8005d56:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0201 	bic.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b60      	cmp	r3, #96	; 0x60
 8005d72:	d10e      	bne.n	8005d92 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7fe fd55 	bl	800483a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d90:	e027      	b.n	8005de2 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d98:	2b28      	cmp	r3, #40	; 0x28
 8005d9a:	d117      	bne.n	8005dcc <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2228      	movs	r2, #40	; 0x28
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dca:	e007      	b.n	8005ddc <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7fe fd22 	bl	8004826 <HAL_I2C_ErrorCallback>
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dfa:	e025      	b.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d021      	beq.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e04:	f7fc fa8e 	bl	8002324 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d302      	bcc.n	8005e1a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d116      	bne.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f043 0220 	orr.w	r2, r3, #32
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e023      	b.n	8005e90 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	0c1b      	lsrs	r3, r3, #16
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d10d      	bne.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	43da      	mvns	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf0c      	ite	eq
 8005e64:	2301      	moveq	r3, #1
 8005e66:	2300      	movne	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	e00c      	b.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	43da      	mvns	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d0b6      	beq.n	8005dfc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ea6:	e051      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb6:	d123      	bne.n	8005f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	f043 0204 	orr.w	r2, r3, #4
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e046      	b.n	8005f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d021      	beq.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f08:	f7fc fa0c 	bl	8002324 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d302      	bcc.n	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d116      	bne.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	f043 0220 	orr.w	r2, r3, #32
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e020      	b.n	8005f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10c      	bne.n	8005f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	43da      	mvns	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e00b      	b.n	8005f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	43da      	mvns	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d18d      	bne.n	8005ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa2:	e02d      	b.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f8ce 	bl	8006146 <I2C_IsAcknowledgeFailed>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e02d      	b.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d021      	beq.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbc:	f7fc f9b2 	bl	8002324 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d302      	bcc.n	8005fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d116      	bne.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e007      	b.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d1ca      	bne.n	8005fa4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006024:	e02d      	b.n	8006082 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f88d 	bl	8006146 <I2C_IsAcknowledgeFailed>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e02d      	b.n	8006092 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d021      	beq.n	8006082 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fc f971 	bl	8002324 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d116      	bne.n	8006082 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f043 0220 	orr.w	r2, r3, #32
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e007      	b.n	8006092 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b04      	cmp	r3, #4
 800608e:	d1ca      	bne.n	8006026 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060a6:	e042      	b.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d119      	bne.n	80060ea <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0210 	mvn.w	r2, #16
 80060be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e029      	b.n	800613e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fc f91b 	bl	8002324 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d116      	bne.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f043 0220 	orr.w	r2, r3, #32
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e007      	b.n	800613e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d1b5      	bne.n	80060a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d11b      	bne.n	8006196 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006166:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0204 	orr.w	r2, r3, #4
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80061b4:	d103      	bne.n	80061be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80061bc:	e007      	b.n	80061ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80061c6:	d102      	bne.n	80061ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2208      	movs	r2, #8
 80061cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d129      	bne.n	8006244 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2224      	movs	r2, #36	; 0x24
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0210 	bic.w	r2, r2, #16
 8006216:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	e000      	b.n	8006246 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006244:	2302      	movs	r3, #2
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b20      	cmp	r3, #32
 800626a:	d12a      	bne.n	80062c2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0201 	bic.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800628c:	89fb      	ldrh	r3, [r7, #14]
 800628e:	f023 030f 	bic.w	r3, r3, #15
 8006292:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	b29a      	uxth	r2, r3
 8006298:	89fb      	ldrh	r3, [r7, #14]
 800629a:	4313      	orrs	r3, r2
 800629c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	89fa      	ldrh	r2, [r7, #14]
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
  }
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	b08f      	sub	sp, #60	; 0x3c
 80062d4:	af0a      	add	r7, sp, #40	; 0x28
 80062d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e10f      	b.n	8006502 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fb ff27 	bl	8002150 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2203      	movs	r2, #3
 8006306:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f002 fc70 	bl	8008c06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	687e      	ldr	r6, [r7, #4]
 800632e:	466d      	mov	r5, sp
 8006330:	f106 0410 	add.w	r4, r6, #16
 8006334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800633a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800633c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006340:	e885 0003 	stmia.w	r5, {r0, r1}
 8006344:	1d33      	adds	r3, r6, #4
 8006346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006348:	6838      	ldr	r0, [r7, #0]
 800634a:	f002 fbfb 	bl	8008b44 <USB_CoreInit>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0d0      	b.n	8006502 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f002 fc5e 	bl	8008c28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	e04a      	b.n	8006408 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006372:	7bfa      	ldrb	r2, [r7, #15]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	333d      	adds	r3, #61	; 0x3d
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006386:	7bfa      	ldrb	r2, [r7, #15]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	333c      	adds	r3, #60	; 0x3c
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	b298      	uxth	r0, r3
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3342      	adds	r3, #66	; 0x42
 80063ae:	4602      	mov	r2, r0
 80063b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	333f      	adds	r3, #63	; 0x3f
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063c6:	7bfa      	ldrb	r2, [r7, #15]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	3344      	adds	r3, #68	; 0x44
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063da:	7bfa      	ldrb	r2, [r7, #15]
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	3348      	adds	r3, #72	; 0x48
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063ee:	7bfa      	ldrb	r2, [r7, #15]
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	3350      	adds	r3, #80	; 0x50
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	3301      	adds	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	7bfa      	ldrb	r2, [r7, #15]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d3af      	bcc.n	8006372 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	e044      	b.n	80064a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006418:	7bfa      	ldrb	r2, [r7, #15]
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800642e:	7bfa      	ldrb	r2, [r7, #15]
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006440:	7bfa      	ldrb	r2, [r7, #15]
 8006442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006444:	7bfa      	ldrb	r2, [r7, #15]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800645a:	7bfa      	ldrb	r2, [r7, #15]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006470:	7bfa      	ldrb	r2, [r7, #15]
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006486:	7bfa      	ldrb	r2, [r7, #15]
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	3301      	adds	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	7bfa      	ldrb	r2, [r7, #15]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d3b5      	bcc.n	8006418 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	687e      	ldr	r6, [r7, #4]
 80064b4:	466d      	mov	r5, sp
 80064b6:	f106 0410 	add.w	r4, r6, #16
 80064ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80064ca:	1d33      	adds	r3, r6, #4
 80064cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064ce:	6838      	ldr	r0, [r7, #0]
 80064d0:	f002 fbd4 	bl	8008c7c <USB_DevInit>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e00d      	b.n	8006502 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f002 fd83 	bl	8009006 <USB_DevDisconnect>

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800650c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e25b      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d075      	beq.n	8006616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800652a:	4ba3      	ldr	r3, [pc, #652]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b04      	cmp	r3, #4
 8006534:	d00c      	beq.n	8006550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006536:	4ba0      	ldr	r3, [pc, #640]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800653e:	2b08      	cmp	r3, #8
 8006540:	d112      	bne.n	8006568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006542:	4b9d      	ldr	r3, [pc, #628]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800654e:	d10b      	bne.n	8006568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006550:	4b99      	ldr	r3, [pc, #612]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d05b      	beq.n	8006614 <HAL_RCC_OscConfig+0x108>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d157      	bne.n	8006614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e236      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d106      	bne.n	8006580 <HAL_RCC_OscConfig+0x74>
 8006572:	4b91      	ldr	r3, [pc, #580]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a90      	ldr	r2, [pc, #576]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e01d      	b.n	80065bc <HAL_RCC_OscConfig+0xb0>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x98>
 800658a:	4b8b      	ldr	r3, [pc, #556]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a8a      	ldr	r2, [pc, #552]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4b88      	ldr	r3, [pc, #544]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a87      	ldr	r2, [pc, #540]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800659c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	e00b      	b.n	80065bc <HAL_RCC_OscConfig+0xb0>
 80065a4:	4b84      	ldr	r3, [pc, #528]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a83      	ldr	r2, [pc, #524]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80065aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b81      	ldr	r3, [pc, #516]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a80      	ldr	r2, [pc, #512]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c4:	f7fb feae 	bl	8002324 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065cc:	f7fb feaa 	bl	8002324 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	; 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e1fb      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065de:	4b76      	ldr	r3, [pc, #472]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0xc0>
 80065ea:	e014      	b.n	8006616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ec:	f7fb fe9a 	bl	8002324 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065f4:	f7fb fe96 	bl	8002324 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b64      	cmp	r3, #100	; 0x64
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e1e7      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006606:	4b6c      	ldr	r3, [pc, #432]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0xe8>
 8006612:	e000      	b.n	8006616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d063      	beq.n	80066ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006622:	4b65      	ldr	r3, [pc, #404]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 030c 	and.w	r3, r3, #12
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800662e:	4b62      	ldr	r3, [pc, #392]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006636:	2b08      	cmp	r3, #8
 8006638:	d11c      	bne.n	8006674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663a:	4b5f      	ldr	r3, [pc, #380]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d116      	bne.n	8006674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006646:	4b5c      	ldr	r3, [pc, #368]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_RCC_OscConfig+0x152>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e1bb      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665e:	4b56      	ldr	r3, [pc, #344]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4952      	ldr	r1, [pc, #328]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006672:	e03a      	b.n	80066ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d020      	beq.n	80066be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800667c:	4b4f      	ldr	r3, [pc, #316]	; (80067bc <HAL_RCC_OscConfig+0x2b0>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006682:	f7fb fe4f 	bl	8002324 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800668a:	f7fb fe4b 	bl	8002324 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e19c      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669c:	4b46      	ldr	r3, [pc, #280]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a8:	4b43      	ldr	r3, [pc, #268]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4940      	ldr	r1, [pc, #256]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
 80066bc:	e015      	b.n	80066ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066be:	4b3f      	ldr	r3, [pc, #252]	; (80067bc <HAL_RCC_OscConfig+0x2b0>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fb fe2e 	bl	8002324 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066cc:	f7fb fe2a 	bl	8002324 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e17b      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066de:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d030      	beq.n	8006758 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066fe:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <HAL_RCC_OscConfig+0x2b4>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fb fe0e 	bl	8002324 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800670c:	f7fb fe0a 	bl	8002324 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e15b      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800671e:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x200>
 800672a:	e015      	b.n	8006758 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800672c:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <HAL_RCC_OscConfig+0x2b4>)
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006732:	f7fb fdf7 	bl	8002324 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800673a:	f7fb fdf3 	bl	8002324 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e144      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800674c:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800674e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1f0      	bne.n	800673a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 80a0 	beq.w	80068a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	4a0e      	ldr	r2, [pc, #56]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6413      	str	r3, [r2, #64]	; 0x40
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_RCC_OscConfig+0x2ac>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <HAL_RCC_OscConfig+0x2b8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d121      	bne.n	80067e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a2:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <HAL_RCC_OscConfig+0x2b8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a07      	ldr	r2, [pc, #28]	; (80067c4 <HAL_RCC_OscConfig+0x2b8>)
 80067a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ae:	f7fb fdb9 	bl	8002324 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b4:	e011      	b.n	80067da <HAL_RCC_OscConfig+0x2ce>
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800
 80067bc:	42470000 	.word	0x42470000
 80067c0:	42470e80 	.word	0x42470e80
 80067c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c8:	f7fb fdac 	bl	8002324 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e0fd      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067da:	4b81      	ldr	r3, [pc, #516]	; (80069e0 <HAL_RCC_OscConfig+0x4d4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d106      	bne.n	80067fc <HAL_RCC_OscConfig+0x2f0>
 80067ee:	4b7d      	ldr	r3, [pc, #500]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	4a7c      	ldr	r2, [pc, #496]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	6713      	str	r3, [r2, #112]	; 0x70
 80067fa:	e01c      	b.n	8006836 <HAL_RCC_OscConfig+0x32a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b05      	cmp	r3, #5
 8006802:	d10c      	bne.n	800681e <HAL_RCC_OscConfig+0x312>
 8006804:	4b77      	ldr	r3, [pc, #476]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	4a76      	ldr	r2, [pc, #472]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 800680a:	f043 0304 	orr.w	r3, r3, #4
 800680e:	6713      	str	r3, [r2, #112]	; 0x70
 8006810:	4b74      	ldr	r3, [pc, #464]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a73      	ldr	r2, [pc, #460]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006816:	f043 0301 	orr.w	r3, r3, #1
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
 800681c:	e00b      	b.n	8006836 <HAL_RCC_OscConfig+0x32a>
 800681e:	4b71      	ldr	r3, [pc, #452]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006822:	4a70      	ldr	r2, [pc, #448]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006824:	f023 0301 	bic.w	r3, r3, #1
 8006828:	6713      	str	r3, [r2, #112]	; 0x70
 800682a:	4b6e      	ldr	r3, [pc, #440]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	4a6d      	ldr	r2, [pc, #436]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006830:	f023 0304 	bic.w	r3, r3, #4
 8006834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d015      	beq.n	800686a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683e:	f7fb fd71 	bl	8002324 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006844:	e00a      	b.n	800685c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fb fd6d 	bl	8002324 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f241 3288 	movw	r2, #5000	; 0x1388
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e0bc      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685c:	4b61      	ldr	r3, [pc, #388]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ee      	beq.n	8006846 <HAL_RCC_OscConfig+0x33a>
 8006868:	e014      	b.n	8006894 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800686a:	f7fb fd5b 	bl	8002324 <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006870:	e00a      	b.n	8006888 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006872:	f7fb fd57 	bl	8002324 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e0a6      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006888:	4b56      	ldr	r3, [pc, #344]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1ee      	bne.n	8006872 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d105      	bne.n	80068a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800689a:	4b52      	ldr	r3, [pc, #328]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	4a51      	ldr	r2, [pc, #324]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 80068a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8092 	beq.w	80069d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068b0:	4b4c      	ldr	r3, [pc, #304]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d05c      	beq.n	8006976 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d141      	bne.n	8006948 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c4:	4b48      	ldr	r3, [pc, #288]	; (80069e8 <HAL_RCC_OscConfig+0x4dc>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ca:	f7fb fd2b 	bl	8002324 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d2:	f7fb fd27 	bl	8002324 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e078      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e4:	4b3f      	ldr	r3, [pc, #252]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f0      	bne.n	80068d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	019b      	lsls	r3, r3, #6
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	061b      	lsls	r3, r3, #24
 8006914:	4933      	ldr	r1, [pc, #204]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006916:	4313      	orrs	r3, r2
 8006918:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800691a:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <HAL_RCC_OscConfig+0x4dc>)
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006920:	f7fb fd00 	bl	8002324 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006928:	f7fb fcfc 	bl	8002324 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e04d      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693a:	4b2a      	ldr	r3, [pc, #168]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x41c>
 8006946:	e045      	b.n	80069d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006948:	4b27      	ldr	r3, [pc, #156]	; (80069e8 <HAL_RCC_OscConfig+0x4dc>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694e:	f7fb fce9 	bl	8002324 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006956:	f7fb fce5 	bl	8002324 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e036      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006968:	4b1e      	ldr	r3, [pc, #120]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1f0      	bne.n	8006956 <HAL_RCC_OscConfig+0x44a>
 8006974:	e02e      	b.n	80069d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e029      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006982:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <HAL_RCC_OscConfig+0x4d8>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	429a      	cmp	r2, r3
 8006994:	d11c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d115      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069aa:	4013      	ands	r3, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d10d      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80069be:	429a      	cmp	r2, r3
 80069c0:	d106      	bne.n	80069d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40007000 	.word	0x40007000
 80069e4:	40023800 	.word	0x40023800
 80069e8:	42470060 	.word	0x42470060

080069ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0cc      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a00:	4b68      	ldr	r3, [pc, #416]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d90c      	bls.n	8006a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0e:	4b65      	ldr	r3, [pc, #404]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a16:	4b63      	ldr	r3, [pc, #396]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e0b8      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d020      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a40:	4b59      	ldr	r3, [pc, #356]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	4a58      	ldr	r2, [pc, #352]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a58:	4b53      	ldr	r3, [pc, #332]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4a52      	ldr	r2, [pc, #328]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a64:	4b50      	ldr	r3, [pc, #320]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	494d      	ldr	r1, [pc, #308]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d044      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8a:	4b47      	ldr	r3, [pc, #284]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d119      	bne.n	8006aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e07f      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d003      	beq.n	8006aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d107      	bne.n	8006aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aaa:	4b3f      	ldr	r3, [pc, #252]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e06f      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aba:	4b3b      	ldr	r3, [pc, #236]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e067      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aca:	4b37      	ldr	r3, [pc, #220]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f023 0203 	bic.w	r2, r3, #3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4934      	ldr	r1, [pc, #208]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006adc:	f7fb fc22 	bl	8002324 <HAL_GetTick>
 8006ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae2:	e00a      	b.n	8006afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae4:	f7fb fc1e 	bl	8002324 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e04f      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006afa:	4b2b      	ldr	r3, [pc, #172]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 020c 	and.w	r2, r3, #12
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d1eb      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b25      	ldr	r3, [pc, #148]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d20c      	bcs.n	8006b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b22      	ldr	r3, [pc, #136]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e032      	b.n	8006b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b40:	4b19      	ldr	r3, [pc, #100]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4916      	ldr	r1, [pc, #88]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b5e:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	490e      	ldr	r1, [pc, #56]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b72:	f000 f821 	bl	8006bb8 <HAL_RCC_GetSysClockFreq>
 8006b76:	4601      	mov	r1, r0
 8006b78:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <HAL_RCC_ClockConfig+0x1c0>)
 8006b84:	5cd3      	ldrb	r3, [r2, r3]
 8006b86:	fa21 f303 	lsr.w	r3, r1, r3
 8006b8a:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fb fb82 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40023c00 	.word	0x40023c00
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	0800d11c 	.word	0x0800d11c
 8006bb0:	20000000 	.word	0x20000000
 8006bb4:	20000004 	.word	0x20000004

08006bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bce:	4b63      	ldr	r3, [pc, #396]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d007      	beq.n	8006bea <HAL_RCC_GetSysClockFreq+0x32>
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d008      	beq.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x38>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f040 80b4 	bne.w	8006d4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006be4:	4b5e      	ldr	r3, [pc, #376]	; (8006d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006be6:	60bb      	str	r3, [r7, #8]
       break;
 8006be8:	e0b3      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bea:	4b5e      	ldr	r3, [pc, #376]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006bec:	60bb      	str	r3, [r7, #8]
      break;
 8006bee:	e0b0      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bf0:	4b5a      	ldr	r3, [pc, #360]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bfa:	4b58      	ldr	r3, [pc, #352]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d04a      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c06:	4b55      	ldr	r3, [pc, #340]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	099b      	lsrs	r3, r3, #6
 8006c0c:	f04f 0400 	mov.w	r4, #0
 8006c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	ea03 0501 	and.w	r5, r3, r1
 8006c1c:	ea04 0602 	and.w	r6, r4, r2
 8006c20:	4629      	mov	r1, r5
 8006c22:	4632      	mov	r2, r6
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	f04f 0400 	mov.w	r4, #0
 8006c2c:	0154      	lsls	r4, r2, #5
 8006c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c32:	014b      	lsls	r3, r1, #5
 8006c34:	4619      	mov	r1, r3
 8006c36:	4622      	mov	r2, r4
 8006c38:	1b49      	subs	r1, r1, r5
 8006c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 0400 	mov.w	r4, #0
 8006c46:	0194      	lsls	r4, r2, #6
 8006c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c4c:	018b      	lsls	r3, r1, #6
 8006c4e:	1a5b      	subs	r3, r3, r1
 8006c50:	eb64 0402 	sbc.w	r4, r4, r2
 8006c54:	f04f 0100 	mov.w	r1, #0
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	00e2      	lsls	r2, r4, #3
 8006c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c62:	00d9      	lsls	r1, r3, #3
 8006c64:	460b      	mov	r3, r1
 8006c66:	4614      	mov	r4, r2
 8006c68:	195b      	adds	r3, r3, r5
 8006c6a:	eb44 0406 	adc.w	r4, r4, r6
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	0262      	lsls	r2, r4, #9
 8006c78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006c7c:	0259      	lsls	r1, r3, #9
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4614      	mov	r4, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	4621      	mov	r1, r4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f04f 0400 	mov.w	r4, #0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	f7f9 ffea 	bl	8000c68 <__aeabi_uldivmod>
 8006c94:	4603      	mov	r3, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	e049      	b.n	8006d30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c9c:	4b2f      	ldr	r3, [pc, #188]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	099b      	lsrs	r3, r3, #6
 8006ca2:	f04f 0400 	mov.w	r4, #0
 8006ca6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	ea03 0501 	and.w	r5, r3, r1
 8006cb2:	ea04 0602 	and.w	r6, r4, r2
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4632      	mov	r2, r6
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	f04f 0400 	mov.w	r4, #0
 8006cc2:	0154      	lsls	r4, r2, #5
 8006cc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006cc8:	014b      	lsls	r3, r1, #5
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4622      	mov	r2, r4
 8006cce:	1b49      	subs	r1, r1, r5
 8006cd0:	eb62 0206 	sbc.w	r2, r2, r6
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	f04f 0400 	mov.w	r4, #0
 8006cdc:	0194      	lsls	r4, r2, #6
 8006cde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ce2:	018b      	lsls	r3, r1, #6
 8006ce4:	1a5b      	subs	r3, r3, r1
 8006ce6:	eb64 0402 	sbc.w	r4, r4, r2
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	00e2      	lsls	r2, r4, #3
 8006cf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006cf8:	00d9      	lsls	r1, r3, #3
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	195b      	adds	r3, r3, r5
 8006d00:	eb44 0406 	adc.w	r4, r4, r6
 8006d04:	f04f 0100 	mov.w	r1, #0
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	02a2      	lsls	r2, r4, #10
 8006d0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006d12:	0299      	lsls	r1, r3, #10
 8006d14:	460b      	mov	r3, r1
 8006d16:	4614      	mov	r4, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f04f 0400 	mov.w	r4, #0
 8006d22:	461a      	mov	r2, r3
 8006d24:	4623      	mov	r3, r4
 8006d26:	f7f9 ff9f 	bl	8000c68 <__aeabi_uldivmod>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	0c1b      	lsrs	r3, r3, #16
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	60bb      	str	r3, [r7, #8]
      break;
 8006d4a:	e002      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006d4e:	60bb      	str	r3, [r7, #8]
      break;
 8006d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d52:	68bb      	ldr	r3, [r7, #8]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	00f42400 	.word	0x00f42400
 8006d64:	007a1200 	.word	0x007a1200

08006d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d6c:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000000 	.word	0x20000000

08006d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d84:	f7ff fff0 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	0a9b      	lsrs	r3, r3, #10
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	4a03      	ldr	r2, [pc, #12]	; (8006da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d96:	5cd3      	ldrb	r3, [r2, r3]
 8006d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40023800 	.word	0x40023800
 8006da4:	0800d12c 	.word	0x0800d12c

08006da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006dac:	f7ff ffdc 	bl	8006d68 <HAL_RCC_GetHCLKFreq>
 8006db0:	4601      	mov	r1, r0
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	0b5b      	lsrs	r3, r3, #13
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	4a03      	ldr	r2, [pc, #12]	; (8006dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dbe:	5cd3      	ldrb	r3, [r2, r3]
 8006dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	0800d12c 	.word	0x0800d12c

08006dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e01d      	b.n	8006e1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fa fee0 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f000 fb10 	bl	8007434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b06      	cmp	r3, #6
 8006e4e:	d007      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e01d      	b.n	8006ebc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f815 	bl	8006ec4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f000 fac1 	bl	8007434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d122      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d11b      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0202 	mvn.w	r2, #2
 8006f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa6b 	bl	80073f6 <HAL_TIM_IC_CaptureCallback>
 8006f20:	e005      	b.n	8006f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa5d 	bl	80073e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa6e 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d122      	bne.n	8006f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d11b      	bne.n	8006f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0204 	mvn.w	r2, #4
 8006f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa41 	bl	80073f6 <HAL_TIM_IC_CaptureCallback>
 8006f74:	e005      	b.n	8006f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa33 	bl	80073e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fa44 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b08      	cmp	r3, #8
 8006f94:	d122      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d11b      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0208 	mvn.w	r2, #8
 8006fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa17 	bl	80073f6 <HAL_TIM_IC_CaptureCallback>
 8006fc8:	e005      	b.n	8006fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa09 	bl	80073e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa1a 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d122      	bne.n	8007030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b10      	cmp	r3, #16
 8006ff6:	d11b      	bne.n	8007030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0210 	mvn.w	r2, #16
 8007000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2208      	movs	r2, #8
 8007006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f9ed 	bl	80073f6 <HAL_TIM_IC_CaptureCallback>
 800701c:	e005      	b.n	800702a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f9df 	bl	80073e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f9f0 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b01      	cmp	r3, #1
 800703c:	d10e      	bne.n	800705c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d107      	bne.n	800705c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0201 	mvn.w	r2, #1
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f003 fbb4 	bl	800a7c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d10e      	bne.n	8007088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b80      	cmp	r3, #128	; 0x80
 8007076:	d107      	bne.n	8007088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fd46 	bl	8007b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d10e      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d107      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9b5 	bl	800741e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d10e      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d107      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0220 	mvn.w	r2, #32
 80070d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fd10 	bl	8007b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070fe:	2302      	movs	r3, #2
 8007100:	e0b4      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	f200 809f 	bhi.w	8007258 <HAL_TIM_PWM_ConfigChannel+0x170>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007155 	.word	0x08007155
 8007124:	08007259 	.word	0x08007259
 8007128:	08007259 	.word	0x08007259
 800712c:	08007259 	.word	0x08007259
 8007130:	08007195 	.word	0x08007195
 8007134:	08007259 	.word	0x08007259
 8007138:	08007259 	.word	0x08007259
 800713c:	08007259 	.word	0x08007259
 8007140:	080071d7 	.word	0x080071d7
 8007144:	08007259 	.word	0x08007259
 8007148:	08007259 	.word	0x08007259
 800714c:	08007259 	.word	0x08007259
 8007150:	08007217 	.word	0x08007217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fa0a 	bl	8007574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0208 	orr.w	r2, r2, #8
 800716e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0204 	bic.w	r2, r2, #4
 800717e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6999      	ldr	r1, [r3, #24]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	691a      	ldr	r2, [r3, #16]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	619a      	str	r2, [r3, #24]
      break;
 8007192:	e062      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fa5a 	bl	8007654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6999      	ldr	r1, [r3, #24]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	021a      	lsls	r2, r3, #8
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	619a      	str	r2, [r3, #24]
      break;
 80071d4:	e041      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 faaf 	bl	8007740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0208 	orr.w	r2, r2, #8
 80071f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0204 	bic.w	r2, r2, #4
 8007200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69d9      	ldr	r1, [r3, #28]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	61da      	str	r2, [r3, #28]
      break;
 8007214:	e021      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fb03 	bl	8007828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69da      	ldr	r2, [r3, #28]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69d9      	ldr	r1, [r3, #28]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	021a      	lsls	r2, r3, #8
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	61da      	str	r2, [r3, #28]
      break;
 8007256:	e000      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007258:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_TIM_ConfigClockSource+0x18>
 8007288:	2302      	movs	r3, #2
 800728a:	e0a6      	b.n	80073da <HAL_TIM_ConfigClockSource+0x166>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d067      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0x120>
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	d80b      	bhi.n	80072e0 <HAL_TIM_ConfigClockSource+0x6c>
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d073      	beq.n	80073b4 <HAL_TIM_ConfigClockSource+0x140>
 80072cc:	2b10      	cmp	r3, #16
 80072ce:	d802      	bhi.n	80072d6 <HAL_TIM_ConfigClockSource+0x62>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d06f      	beq.n	80073b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80072d4:	e078      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d06c      	beq.n	80073b4 <HAL_TIM_ConfigClockSource+0x140>
 80072da:	2b30      	cmp	r3, #48	; 0x30
 80072dc:	d06a      	beq.n	80073b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80072de:	e073      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072e0:	2b70      	cmp	r3, #112	; 0x70
 80072e2:	d00d      	beq.n	8007300 <HAL_TIM_ConfigClockSource+0x8c>
 80072e4:	2b70      	cmp	r3, #112	; 0x70
 80072e6:	d804      	bhi.n	80072f2 <HAL_TIM_ConfigClockSource+0x7e>
 80072e8:	2b50      	cmp	r3, #80	; 0x50
 80072ea:	d033      	beq.n	8007354 <HAL_TIM_ConfigClockSource+0xe0>
 80072ec:	2b60      	cmp	r3, #96	; 0x60
 80072ee:	d041      	beq.n	8007374 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80072f0:	e06a      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	d066      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x152>
 80072f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fc:	d017      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80072fe:	e063      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6899      	ldr	r1, [r3, #8]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f000 fb5a 	bl	80079c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007322:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	609a      	str	r2, [r3, #8]
      break;
 800732c:	e04c      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6899      	ldr	r1, [r3, #8]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f000 fb43 	bl	80079c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007350:	609a      	str	r2, [r3, #8]
      break;
 8007352:	e039      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6859      	ldr	r1, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	461a      	mov	r2, r3
 8007362:	f000 fab7 	bl	80078d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2150      	movs	r1, #80	; 0x50
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fb10 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 8007372:	e029      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6859      	ldr	r1, [r3, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	461a      	mov	r2, r3
 8007382:	f000 fad6 	bl	8007932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2160      	movs	r1, #96	; 0x60
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fb00 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 8007392:	e019      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6859      	ldr	r1, [r3, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f000 fa97 	bl	80078d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2140      	movs	r1, #64	; 0x40
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 faf0 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80073b2:	e009      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f000 fae7 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80073c4:	e000      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80073c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a40      	ldr	r2, [pc, #256]	; (8007548 <TIM_Base_SetConfig+0x114>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007452:	d00f      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a3d      	ldr	r2, [pc, #244]	; (800754c <TIM_Base_SetConfig+0x118>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00b      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a3c      	ldr	r2, [pc, #240]	; (8007550 <TIM_Base_SetConfig+0x11c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d007      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a3b      	ldr	r2, [pc, #236]	; (8007554 <TIM_Base_SetConfig+0x120>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a3a      	ldr	r2, [pc, #232]	; (8007558 <TIM_Base_SetConfig+0x124>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2f      	ldr	r2, [pc, #188]	; (8007548 <TIM_Base_SetConfig+0x114>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02b      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007494:	d027      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2c      	ldr	r2, [pc, #176]	; (800754c <TIM_Base_SetConfig+0x118>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d023      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2b      	ldr	r2, [pc, #172]	; (8007550 <TIM_Base_SetConfig+0x11c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01f      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2a      	ldr	r2, [pc, #168]	; (8007554 <TIM_Base_SetConfig+0x120>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01b      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a29      	ldr	r2, [pc, #164]	; (8007558 <TIM_Base_SetConfig+0x124>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d017      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a28      	ldr	r2, [pc, #160]	; (800755c <TIM_Base_SetConfig+0x128>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d013      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a27      	ldr	r2, [pc, #156]	; (8007560 <TIM_Base_SetConfig+0x12c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00f      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a26      	ldr	r2, [pc, #152]	; (8007564 <TIM_Base_SetConfig+0x130>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00b      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a25      	ldr	r2, [pc, #148]	; (8007568 <TIM_Base_SetConfig+0x134>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d007      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a24      	ldr	r2, [pc, #144]	; (800756c <TIM_Base_SetConfig+0x138>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a23      	ldr	r2, [pc, #140]	; (8007570 <TIM_Base_SetConfig+0x13c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d108      	bne.n	80074f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a0a      	ldr	r2, [pc, #40]	; (8007548 <TIM_Base_SetConfig+0x114>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_Base_SetConfig+0xf8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a0c      	ldr	r2, [pc, #48]	; (8007558 <TIM_Base_SetConfig+0x124>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d103      	bne.n	8007534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	615a      	str	r2, [r3, #20]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40010400 	.word	0x40010400
 800755c:	40014000 	.word	0x40014000
 8007560:	40014400 	.word	0x40014400
 8007564:	40014800 	.word	0x40014800
 8007568:	40001800 	.word	0x40001800
 800756c:	40001c00 	.word	0x40001c00
 8007570:	40002000 	.word	0x40002000

08007574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f023 0201 	bic.w	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 0302 	bic.w	r3, r3, #2
 80075bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a20      	ldr	r2, [pc, #128]	; (800764c <TIM_OC1_SetConfig+0xd8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_OC1_SetConfig+0x64>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10c      	bne.n	80075f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0308 	bic.w	r3, r3, #8
 80075de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0304 	bic.w	r3, r3, #4
 80075f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a15      	ldr	r2, [pc, #84]	; (800764c <TIM_OC1_SetConfig+0xd8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_OC1_SetConfig+0x8e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a14      	ldr	r2, [pc, #80]	; (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d111      	bne.n	8007626 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	621a      	str	r2, [r3, #32]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f023 0210 	bic.w	r2, r3, #16
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0320 	bic.w	r3, r3, #32
 800769e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a22      	ldr	r2, [pc, #136]	; (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC2_SetConfig+0x68>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a21      	ldr	r2, [pc, #132]	; (800773c <TIM_OC2_SetConfig+0xe8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10d      	bne.n	80076d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a17      	ldr	r2, [pc, #92]	; (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC2_SetConfig+0x94>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	; (800773c <TIM_OC2_SetConfig+0xe8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d113      	bne.n	8007710 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400

08007740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a21      	ldr	r2, [pc, #132]	; (8007820 <TIM_OC3_SetConfig+0xe0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d003      	beq.n	80077a6 <TIM_OC3_SetConfig+0x66>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a20      	ldr	r2, [pc, #128]	; (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d10d      	bne.n	80077c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a16      	ldr	r2, [pc, #88]	; (8007820 <TIM_OC3_SetConfig+0xe0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_OC3_SetConfig+0x92>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a15      	ldr	r2, [pc, #84]	; (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d113      	bne.n	80077fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	621a      	str	r2, [r3, #32]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	40010000 	.word	0x40010000
 8007824:	40010400 	.word	0x40010400

08007828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	031b      	lsls	r3, r3, #12
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a12      	ldr	r2, [pc, #72]	; (80078cc <TIM_OC4_SetConfig+0xa4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_OC4_SetConfig+0x68>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a11      	ldr	r2, [pc, #68]	; (80078d0 <TIM_OC4_SetConfig+0xa8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d109      	bne.n	80078a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f023 030a 	bic.w	r3, r3, #10
 8007910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f023 0210 	bic.w	r2, r3, #16
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800795c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	031b      	lsls	r3, r3, #12
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800796e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f043 0307 	orr.w	r3, r3, #7
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	609a      	str	r2, [r3, #8]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	609a      	str	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e05a      	b.n	8007ad6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a21      	ldr	r2, [pc, #132]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d022      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6c:	d01d      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d018      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a1b      	ldr	r2, [pc, #108]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d013      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1a      	ldr	r2, [pc, #104]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00e      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a18      	ldr	r2, [pc, #96]	; (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d009      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a17      	ldr	r2, [pc, #92]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d004      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a15      	ldr	r2, [pc, #84]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d10c      	bne.n	8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40000400 	.word	0x40000400
 8007aec:	40000800 	.word	0x40000800
 8007af0:	40000c00 	.word	0x40000c00
 8007af4:	40010400 	.word	0x40010400
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40001800 	.word	0x40001800

08007b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e03f      	b.n	8007bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fa f9ca 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2224      	movs	r2, #36	; 0x24
 8007b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fc6d 	bl	800844c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b088      	sub	sp, #32
 8007bc6:	af02      	add	r7, sp, #8
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	f040 8083 	bne.w	8007cea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_UART_Transmit+0x2e>
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e07b      	b.n	8007cec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Transmit+0x40>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e074      	b.n	8007cec <HAL_UART_Transmit+0x12a>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2221      	movs	r2, #33	; 0x21
 8007c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007c18:	f7fa fb84 	bl	8002324 <HAL_GetTick>
 8007c1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	88fa      	ldrh	r2, [r7, #6]
 8007c22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007c32:	e042      	b.n	8007cba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4a:	d122      	bne.n	8007c92 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2200      	movs	r2, #0
 8007c54:	2180      	movs	r1, #128	; 0x80
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 fa76 	bl	8008148 <UART_WaitOnFlagUntilTimeout>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e042      	b.n	8007cec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	3302      	adds	r3, #2
 8007c86:	60bb      	str	r3, [r7, #8]
 8007c88:	e017      	b.n	8007cba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	60bb      	str	r3, [r7, #8]
 8007c90:	e013      	b.n	8007cba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2180      	movs	r1, #128	; 0x80
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fa53 	bl	8008148 <UART_WaitOnFlagUntilTimeout>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e01f      	b.n	8007cec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	60ba      	str	r2, [r7, #8]
 8007cb2:	781a      	ldrb	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1b7      	bne.n	8007c34 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2140      	movs	r1, #64	; 0x40
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fa3a 	bl	8008148 <UART_WaitOnFlagUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e006      	b.n	8007cec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e000      	b.n	8007cec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007cea:	2302      	movs	r3, #2
  }
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d166      	bne.n	8007ddc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_UART_Receive_DMA+0x26>
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e05f      	b.n	8007dde <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_UART_Receive_DMA+0x38>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e058      	b.n	8007dde <HAL_UART_Receive_DMA+0xea>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2222      	movs	r2, #34	; 0x22
 8007d4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	4a25      	ldr	r2, [pc, #148]	; (8007de8 <HAL_UART_Receive_DMA+0xf4>)
 8007d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	4a24      	ldr	r2, [pc, #144]	; (8007dec <HAL_UART_Receive_DMA+0xf8>)
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	4a23      	ldr	r2, [pc, #140]	; (8007df0 <HAL_UART_Receive_DMA+0xfc>)
 8007d64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007d6e:	f107 0308 	add.w	r3, r7, #8
 8007d72:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	f7fa fcbb 	bl	8002700 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007db6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695a      	ldr	r2, [r3, #20]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0201 	orr.w	r2, r2, #1
 8007dc6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dd6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e000      	b.n	8007dde <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007ddc:	2302      	movs	r3, #2
  }
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	08008031 	.word	0x08008031
 8007dec:	08008099 	.word	0x08008099
 8007df0:	080080b5 	.word	0x080080b5

08007df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <HAL_UART_IRQHandler+0x52>
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa82 	bl	8008348 <UART_Receive_IT>
      return;
 8007e44:	e0d1      	b.n	8007fea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80b0 	beq.w	8007fae <HAL_UART_IRQHandler+0x1ba>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d105      	bne.n	8007e64 <HAL_UART_IRQHandler+0x70>
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 80a5 	beq.w	8007fae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <HAL_UART_IRQHandler+0x90>
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	f043 0201 	orr.w	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <HAL_UART_IRQHandler+0xb0>
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	f043 0202 	orr.w	r2, r3, #2
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <HAL_UART_IRQHandler+0xd0>
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ebc:	f043 0204 	orr.w	r2, r3, #4
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f003 0308 	and.w	r3, r3, #8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00f      	beq.n	8007eee <HAL_UART_IRQHandler+0xfa>
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <HAL_UART_IRQHandler+0xee>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee6:	f043 0208 	orr.w	r2, r3, #8
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d078      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d007      	beq.n	8007f10 <HAL_UART_IRQHandler+0x11c>
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa1c 	bl	8008348 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1a:	2b40      	cmp	r3, #64	; 0x40
 8007f1c:	bf0c      	ite	eq
 8007f1e:	2301      	moveq	r3, #1
 8007f20:	2300      	movne	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	f003 0308 	and.w	r3, r3, #8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d102      	bne.n	8007f38 <HAL_UART_IRQHandler+0x144>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d031      	beq.n	8007f9c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f965 	bl	8008208 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d123      	bne.n	8007f94 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d013      	beq.n	8007f8c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	4a21      	ldr	r2, [pc, #132]	; (8007ff0 <HAL_UART_IRQHandler+0x1fc>)
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fa fc1d 	bl	80027b0 <HAL_DMA_Abort_IT>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d016      	beq.n	8007faa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f86:	4610      	mov	r0, r2
 8007f88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8a:	e00e      	b.n	8007faa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f845 	bl	800801c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f92:	e00a      	b.n	8007faa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f841 	bl	800801c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9a:	e006      	b.n	8007faa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f83d 	bl	800801c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007fa8:	e01e      	b.n	8007fe8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007faa:	bf00      	nop
    return;
 8007fac:	e01c      	b.n	8007fe8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_UART_IRQHandler+0x1d6>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f952 	bl	800826c <UART_Transmit_IT>
    return;
 8007fc8:	e00f      	b.n	8007fea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <HAL_UART_IRQHandler+0x1f6>
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f99a 	bl	8008318 <UART_EndTransmit_IT>
    return;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <HAL_UART_IRQHandler+0x1f6>
    return;
 8007fe8:	bf00      	nop
  }
}
 8007fea:	3720      	adds	r7, #32
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	08008245 	.word	0x08008245

08007ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11e      	bne.n	800808a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008060:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0201 	bic.w	r2, r2, #1
 8008070:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695a      	ldr	r2, [r3, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008080:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f002 fbae 	bl	800a7ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff ffae 	bl	8008008 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ac:	bf00      	nop
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d0:	2b80      	cmp	r3, #128	; 0x80
 80080d2:	bf0c      	ite	eq
 80080d4:	2301      	moveq	r3, #1
 80080d6:	2300      	movne	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b21      	cmp	r3, #33	; 0x21
 80080e6:	d108      	bne.n	80080fa <UART_DMAError+0x46>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2200      	movs	r2, #0
 80080f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80080f4:	68b8      	ldr	r0, [r7, #8]
 80080f6:	f000 f871 	bl	80081dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008104:	2b40      	cmp	r3, #64	; 0x40
 8008106:	bf0c      	ite	eq
 8008108:	2301      	moveq	r3, #1
 800810a:	2300      	movne	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b22      	cmp	r3, #34	; 0x22
 800811a:	d108      	bne.n	800812e <UART_DMAError+0x7a>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2200      	movs	r2, #0
 8008126:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008128:	68b8      	ldr	r0, [r7, #8]
 800812a:	f000 f86d 	bl	8008208 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008132:	f043 0210 	orr.w	r2, r3, #16
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800813a:	68b8      	ldr	r0, [r7, #8]
 800813c:	f7ff ff6e 	bl	800801c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	4613      	mov	r3, r2
 8008156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008158:	e02c      	b.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d028      	beq.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d007      	beq.n	8008178 <UART_WaitOnFlagUntilTimeout+0x30>
 8008168:	f7fa f8dc 	bl	8002324 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d21d      	bcs.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008186:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695a      	ldr	r2, [r3, #20]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 0201 	bic.w	r2, r2, #1
 8008196:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e00f      	b.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4013      	ands	r3, r2
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	bf0c      	ite	eq
 80081c4:	2301      	moveq	r3, #1
 80081c6:	2300      	movne	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d0c3      	beq.n	800815a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80081f2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800821e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695a      	ldr	r2, [r3, #20]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff fedc 	bl	800801c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b21      	cmp	r3, #33	; 0x21
 800827e:	d144      	bne.n	800830a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008288:	d11a      	bne.n	80082c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800829e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	1c9a      	adds	r2, r3, #2
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]
 80082b2:	e00e      	b.n	80082d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	621a      	str	r2, [r3, #32]
 80082be:	e008      	b.n	80082d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	1c59      	adds	r1, r3, #1
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6211      	str	r1, [r2, #32]
 80082ca:	781a      	ldrb	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29b      	uxth	r3, r3
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	4619      	mov	r1, r3
 80082e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10f      	bne.n	8008306 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008304:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	e000      	b.n	800830c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800830a:	2302      	movs	r3, #2
  }
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800832e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff fe5b 	bl	8007ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b22      	cmp	r3, #34	; 0x22
 800835a:	d171      	bne.n	8008440 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008364:	d123      	bne.n	80083ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10e      	bne.n	8008392 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	b29b      	uxth	r3, r3
 800837c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008380:	b29a      	uxth	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	1c9a      	adds	r2, r3, #2
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	629a      	str	r2, [r3, #40]	; 0x28
 8008390:	e029      	b.n	80083e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	b29b      	uxth	r3, r3
 800839a:	b2db      	uxtb	r3, r3
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	629a      	str	r2, [r3, #40]	; 0x28
 80083ac:	e01b      	b.n	80083e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6858      	ldr	r0, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	1c59      	adds	r1, r3, #1
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6291      	str	r1, [r2, #40]	; 0x28
 80083c6:	b2c2      	uxtb	r2, r0
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e00c      	b.n	80083e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	1c58      	adds	r0, r3, #1
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	6288      	str	r0, [r1, #40]	; 0x28
 80083de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083e2:	b2d2      	uxtb	r2, r2
 80083e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4619      	mov	r1, r3
 80083f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d120      	bne.n	800843c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0220 	bic.w	r2, r2, #32
 8008408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695a      	ldr	r2, [r3, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f002 f9da 	bl	800a7ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	e002      	b.n	8008442 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800848e:	f023 030c 	bic.w	r3, r3, #12
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	68f9      	ldr	r1, [r7, #12]
 8008498:	430b      	orrs	r3, r1
 800849a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ba:	f040 818b 	bne.w	80087d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4ac1      	ldr	r2, [pc, #772]	; (80087c8 <UART_SetConfig+0x37c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d005      	beq.n	80084d4 <UART_SetConfig+0x88>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4abf      	ldr	r2, [pc, #764]	; (80087cc <UART_SetConfig+0x380>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f040 80bd 	bne.w	800864e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084d4:	f7fe fc68 	bl	8006da8 <HAL_RCC_GetPCLK2Freq>
 80084d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	461d      	mov	r5, r3
 80084de:	f04f 0600 	mov.w	r6, #0
 80084e2:	46a8      	mov	r8, r5
 80084e4:	46b1      	mov	r9, r6
 80084e6:	eb18 0308 	adds.w	r3, r8, r8
 80084ea:	eb49 0409 	adc.w	r4, r9, r9
 80084ee:	4698      	mov	r8, r3
 80084f0:	46a1      	mov	r9, r4
 80084f2:	eb18 0805 	adds.w	r8, r8, r5
 80084f6:	eb49 0906 	adc.w	r9, r9, r6
 80084fa:	f04f 0100 	mov.w	r1, #0
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008506:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800850a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800850e:	4688      	mov	r8, r1
 8008510:	4691      	mov	r9, r2
 8008512:	eb18 0005 	adds.w	r0, r8, r5
 8008516:	eb49 0106 	adc.w	r1, r9, r6
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	461d      	mov	r5, r3
 8008520:	f04f 0600 	mov.w	r6, #0
 8008524:	196b      	adds	r3, r5, r5
 8008526:	eb46 0406 	adc.w	r4, r6, r6
 800852a:	461a      	mov	r2, r3
 800852c:	4623      	mov	r3, r4
 800852e:	f7f8 fb9b 	bl	8000c68 <__aeabi_uldivmod>
 8008532:	4603      	mov	r3, r0
 8008534:	460c      	mov	r4, r1
 8008536:	461a      	mov	r2, r3
 8008538:	4ba5      	ldr	r3, [pc, #660]	; (80087d0 <UART_SetConfig+0x384>)
 800853a:	fba3 2302 	umull	r2, r3, r3, r2
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	461d      	mov	r5, r3
 8008548:	f04f 0600 	mov.w	r6, #0
 800854c:	46a9      	mov	r9, r5
 800854e:	46b2      	mov	sl, r6
 8008550:	eb19 0309 	adds.w	r3, r9, r9
 8008554:	eb4a 040a 	adc.w	r4, sl, sl
 8008558:	4699      	mov	r9, r3
 800855a:	46a2      	mov	sl, r4
 800855c:	eb19 0905 	adds.w	r9, r9, r5
 8008560:	eb4a 0a06 	adc.w	sl, sl, r6
 8008564:	f04f 0100 	mov.w	r1, #0
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008578:	4689      	mov	r9, r1
 800857a:	4692      	mov	sl, r2
 800857c:	eb19 0005 	adds.w	r0, r9, r5
 8008580:	eb4a 0106 	adc.w	r1, sl, r6
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	461d      	mov	r5, r3
 800858a:	f04f 0600 	mov.w	r6, #0
 800858e:	196b      	adds	r3, r5, r5
 8008590:	eb46 0406 	adc.w	r4, r6, r6
 8008594:	461a      	mov	r2, r3
 8008596:	4623      	mov	r3, r4
 8008598:	f7f8 fb66 	bl	8000c68 <__aeabi_uldivmod>
 800859c:	4603      	mov	r3, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	461a      	mov	r2, r3
 80085a2:	4b8b      	ldr	r3, [pc, #556]	; (80087d0 <UART_SetConfig+0x384>)
 80085a4:	fba3 1302 	umull	r1, r3, r3, r2
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	2164      	movs	r1, #100	; 0x64
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	3332      	adds	r3, #50	; 0x32
 80085b6:	4a86      	ldr	r2, [pc, #536]	; (80087d0 <UART_SetConfig+0x384>)
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085c4:	4498      	add	r8, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	461d      	mov	r5, r3
 80085ca:	f04f 0600 	mov.w	r6, #0
 80085ce:	46a9      	mov	r9, r5
 80085d0:	46b2      	mov	sl, r6
 80085d2:	eb19 0309 	adds.w	r3, r9, r9
 80085d6:	eb4a 040a 	adc.w	r4, sl, sl
 80085da:	4699      	mov	r9, r3
 80085dc:	46a2      	mov	sl, r4
 80085de:	eb19 0905 	adds.w	r9, r9, r5
 80085e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80085e6:	f04f 0100 	mov.w	r1, #0
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085fa:	4689      	mov	r9, r1
 80085fc:	4692      	mov	sl, r2
 80085fe:	eb19 0005 	adds.w	r0, r9, r5
 8008602:	eb4a 0106 	adc.w	r1, sl, r6
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	461d      	mov	r5, r3
 800860c:	f04f 0600 	mov.w	r6, #0
 8008610:	196b      	adds	r3, r5, r5
 8008612:	eb46 0406 	adc.w	r4, r6, r6
 8008616:	461a      	mov	r2, r3
 8008618:	4623      	mov	r3, r4
 800861a:	f7f8 fb25 	bl	8000c68 <__aeabi_uldivmod>
 800861e:	4603      	mov	r3, r0
 8008620:	460c      	mov	r4, r1
 8008622:	461a      	mov	r2, r3
 8008624:	4b6a      	ldr	r3, [pc, #424]	; (80087d0 <UART_SetConfig+0x384>)
 8008626:	fba3 1302 	umull	r1, r3, r3, r2
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	2164      	movs	r1, #100	; 0x64
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	3332      	adds	r3, #50	; 0x32
 8008638:	4a65      	ldr	r2, [pc, #404]	; (80087d0 <UART_SetConfig+0x384>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	f003 0207 	and.w	r2, r3, #7
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4442      	add	r2, r8
 800864a:	609a      	str	r2, [r3, #8]
 800864c:	e26f      	b.n	8008b2e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800864e:	f7fe fb97 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8008652:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	461d      	mov	r5, r3
 8008658:	f04f 0600 	mov.w	r6, #0
 800865c:	46a8      	mov	r8, r5
 800865e:	46b1      	mov	r9, r6
 8008660:	eb18 0308 	adds.w	r3, r8, r8
 8008664:	eb49 0409 	adc.w	r4, r9, r9
 8008668:	4698      	mov	r8, r3
 800866a:	46a1      	mov	r9, r4
 800866c:	eb18 0805 	adds.w	r8, r8, r5
 8008670:	eb49 0906 	adc.w	r9, r9, r6
 8008674:	f04f 0100 	mov.w	r1, #0
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008680:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008684:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008688:	4688      	mov	r8, r1
 800868a:	4691      	mov	r9, r2
 800868c:	eb18 0005 	adds.w	r0, r8, r5
 8008690:	eb49 0106 	adc.w	r1, r9, r6
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	461d      	mov	r5, r3
 800869a:	f04f 0600 	mov.w	r6, #0
 800869e:	196b      	adds	r3, r5, r5
 80086a0:	eb46 0406 	adc.w	r4, r6, r6
 80086a4:	461a      	mov	r2, r3
 80086a6:	4623      	mov	r3, r4
 80086a8:	f7f8 fade 	bl	8000c68 <__aeabi_uldivmod>
 80086ac:	4603      	mov	r3, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	461a      	mov	r2, r3
 80086b2:	4b47      	ldr	r3, [pc, #284]	; (80087d0 <UART_SetConfig+0x384>)
 80086b4:	fba3 2302 	umull	r2, r3, r3, r2
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	461d      	mov	r5, r3
 80086c2:	f04f 0600 	mov.w	r6, #0
 80086c6:	46a9      	mov	r9, r5
 80086c8:	46b2      	mov	sl, r6
 80086ca:	eb19 0309 	adds.w	r3, r9, r9
 80086ce:	eb4a 040a 	adc.w	r4, sl, sl
 80086d2:	4699      	mov	r9, r3
 80086d4:	46a2      	mov	sl, r4
 80086d6:	eb19 0905 	adds.w	r9, r9, r5
 80086da:	eb4a 0a06 	adc.w	sl, sl, r6
 80086de:	f04f 0100 	mov.w	r1, #0
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f2:	4689      	mov	r9, r1
 80086f4:	4692      	mov	sl, r2
 80086f6:	eb19 0005 	adds.w	r0, r9, r5
 80086fa:	eb4a 0106 	adc.w	r1, sl, r6
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	461d      	mov	r5, r3
 8008704:	f04f 0600 	mov.w	r6, #0
 8008708:	196b      	adds	r3, r5, r5
 800870a:	eb46 0406 	adc.w	r4, r6, r6
 800870e:	461a      	mov	r2, r3
 8008710:	4623      	mov	r3, r4
 8008712:	f7f8 faa9 	bl	8000c68 <__aeabi_uldivmod>
 8008716:	4603      	mov	r3, r0
 8008718:	460c      	mov	r4, r1
 800871a:	461a      	mov	r2, r3
 800871c:	4b2c      	ldr	r3, [pc, #176]	; (80087d0 <UART_SetConfig+0x384>)
 800871e:	fba3 1302 	umull	r1, r3, r3, r2
 8008722:	095b      	lsrs	r3, r3, #5
 8008724:	2164      	movs	r1, #100	; 0x64
 8008726:	fb01 f303 	mul.w	r3, r1, r3
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	3332      	adds	r3, #50	; 0x32
 8008730:	4a27      	ldr	r2, [pc, #156]	; (80087d0 <UART_SetConfig+0x384>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800873e:	4498      	add	r8, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	461d      	mov	r5, r3
 8008744:	f04f 0600 	mov.w	r6, #0
 8008748:	46a9      	mov	r9, r5
 800874a:	46b2      	mov	sl, r6
 800874c:	eb19 0309 	adds.w	r3, r9, r9
 8008750:	eb4a 040a 	adc.w	r4, sl, sl
 8008754:	4699      	mov	r9, r3
 8008756:	46a2      	mov	sl, r4
 8008758:	eb19 0905 	adds.w	r9, r9, r5
 800875c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008760:	f04f 0100 	mov.w	r1, #0
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800876c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008774:	4689      	mov	r9, r1
 8008776:	4692      	mov	sl, r2
 8008778:	eb19 0005 	adds.w	r0, r9, r5
 800877c:	eb4a 0106 	adc.w	r1, sl, r6
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	461d      	mov	r5, r3
 8008786:	f04f 0600 	mov.w	r6, #0
 800878a:	196b      	adds	r3, r5, r5
 800878c:	eb46 0406 	adc.w	r4, r6, r6
 8008790:	461a      	mov	r2, r3
 8008792:	4623      	mov	r3, r4
 8008794:	f7f8 fa68 	bl	8000c68 <__aeabi_uldivmod>
 8008798:	4603      	mov	r3, r0
 800879a:	460c      	mov	r4, r1
 800879c:	461a      	mov	r2, r3
 800879e:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <UART_SetConfig+0x384>)
 80087a0:	fba3 1302 	umull	r1, r3, r3, r2
 80087a4:	095b      	lsrs	r3, r3, #5
 80087a6:	2164      	movs	r1, #100	; 0x64
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	3332      	adds	r3, #50	; 0x32
 80087b2:	4a07      	ldr	r2, [pc, #28]	; (80087d0 <UART_SetConfig+0x384>)
 80087b4:	fba2 2303 	umull	r2, r3, r2, r3
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	f003 0207 	and.w	r2, r3, #7
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4442      	add	r2, r8
 80087c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80087c6:	e1b2      	b.n	8008b2e <UART_SetConfig+0x6e2>
 80087c8:	40011000 	.word	0x40011000
 80087cc:	40011400 	.word	0x40011400
 80087d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4ad7      	ldr	r2, [pc, #860]	; (8008b38 <UART_SetConfig+0x6ec>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d005      	beq.n	80087ea <UART_SetConfig+0x39e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4ad6      	ldr	r2, [pc, #856]	; (8008b3c <UART_SetConfig+0x6f0>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	f040 80d1 	bne.w	800898c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80087ea:	f7fe fadd 	bl	8006da8 <HAL_RCC_GetPCLK2Freq>
 80087ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	469a      	mov	sl, r3
 80087f4:	f04f 0b00 	mov.w	fp, #0
 80087f8:	46d0      	mov	r8, sl
 80087fa:	46d9      	mov	r9, fp
 80087fc:	eb18 0308 	adds.w	r3, r8, r8
 8008800:	eb49 0409 	adc.w	r4, r9, r9
 8008804:	4698      	mov	r8, r3
 8008806:	46a1      	mov	r9, r4
 8008808:	eb18 080a 	adds.w	r8, r8, sl
 800880c:	eb49 090b 	adc.w	r9, r9, fp
 8008810:	f04f 0100 	mov.w	r1, #0
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800881c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008820:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008824:	4688      	mov	r8, r1
 8008826:	4691      	mov	r9, r2
 8008828:	eb1a 0508 	adds.w	r5, sl, r8
 800882c:	eb4b 0609 	adc.w	r6, fp, r9
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	4619      	mov	r1, r3
 8008836:	f04f 0200 	mov.w	r2, #0
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	f04f 0400 	mov.w	r4, #0
 8008842:	0094      	lsls	r4, r2, #2
 8008844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008848:	008b      	lsls	r3, r1, #2
 800884a:	461a      	mov	r2, r3
 800884c:	4623      	mov	r3, r4
 800884e:	4628      	mov	r0, r5
 8008850:	4631      	mov	r1, r6
 8008852:	f7f8 fa09 	bl	8000c68 <__aeabi_uldivmod>
 8008856:	4603      	mov	r3, r0
 8008858:	460c      	mov	r4, r1
 800885a:	461a      	mov	r2, r3
 800885c:	4bb8      	ldr	r3, [pc, #736]	; (8008b40 <UART_SetConfig+0x6f4>)
 800885e:	fba3 2302 	umull	r2, r3, r3, r2
 8008862:	095b      	lsrs	r3, r3, #5
 8008864:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	469b      	mov	fp, r3
 800886c:	f04f 0c00 	mov.w	ip, #0
 8008870:	46d9      	mov	r9, fp
 8008872:	46e2      	mov	sl, ip
 8008874:	eb19 0309 	adds.w	r3, r9, r9
 8008878:	eb4a 040a 	adc.w	r4, sl, sl
 800887c:	4699      	mov	r9, r3
 800887e:	46a2      	mov	sl, r4
 8008880:	eb19 090b 	adds.w	r9, r9, fp
 8008884:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008888:	f04f 0100 	mov.w	r1, #0
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008894:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008898:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800889c:	4689      	mov	r9, r1
 800889e:	4692      	mov	sl, r2
 80088a0:	eb1b 0509 	adds.w	r5, fp, r9
 80088a4:	eb4c 060a 	adc.w	r6, ip, sl
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	4619      	mov	r1, r3
 80088ae:	f04f 0200 	mov.w	r2, #0
 80088b2:	f04f 0300 	mov.w	r3, #0
 80088b6:	f04f 0400 	mov.w	r4, #0
 80088ba:	0094      	lsls	r4, r2, #2
 80088bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088c0:	008b      	lsls	r3, r1, #2
 80088c2:	461a      	mov	r2, r3
 80088c4:	4623      	mov	r3, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	4631      	mov	r1, r6
 80088ca:	f7f8 f9cd 	bl	8000c68 <__aeabi_uldivmod>
 80088ce:	4603      	mov	r3, r0
 80088d0:	460c      	mov	r4, r1
 80088d2:	461a      	mov	r2, r3
 80088d4:	4b9a      	ldr	r3, [pc, #616]	; (8008b40 <UART_SetConfig+0x6f4>)
 80088d6:	fba3 1302 	umull	r1, r3, r3, r2
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	2164      	movs	r1, #100	; 0x64
 80088de:	fb01 f303 	mul.w	r3, r1, r3
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	3332      	adds	r3, #50	; 0x32
 80088e8:	4a95      	ldr	r2, [pc, #596]	; (8008b40 <UART_SetConfig+0x6f4>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088f4:	4498      	add	r8, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	469b      	mov	fp, r3
 80088fa:	f04f 0c00 	mov.w	ip, #0
 80088fe:	46d9      	mov	r9, fp
 8008900:	46e2      	mov	sl, ip
 8008902:	eb19 0309 	adds.w	r3, r9, r9
 8008906:	eb4a 040a 	adc.w	r4, sl, sl
 800890a:	4699      	mov	r9, r3
 800890c:	46a2      	mov	sl, r4
 800890e:	eb19 090b 	adds.w	r9, r9, fp
 8008912:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008916:	f04f 0100 	mov.w	r1, #0
 800891a:	f04f 0200 	mov.w	r2, #0
 800891e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800892a:	4689      	mov	r9, r1
 800892c:	4692      	mov	sl, r2
 800892e:	eb1b 0509 	adds.w	r5, fp, r9
 8008932:	eb4c 060a 	adc.w	r6, ip, sl
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4619      	mov	r1, r3
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	f04f 0300 	mov.w	r3, #0
 8008944:	f04f 0400 	mov.w	r4, #0
 8008948:	0094      	lsls	r4, r2, #2
 800894a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800894e:	008b      	lsls	r3, r1, #2
 8008950:	461a      	mov	r2, r3
 8008952:	4623      	mov	r3, r4
 8008954:	4628      	mov	r0, r5
 8008956:	4631      	mov	r1, r6
 8008958:	f7f8 f986 	bl	8000c68 <__aeabi_uldivmod>
 800895c:	4603      	mov	r3, r0
 800895e:	460c      	mov	r4, r1
 8008960:	461a      	mov	r2, r3
 8008962:	4b77      	ldr	r3, [pc, #476]	; (8008b40 <UART_SetConfig+0x6f4>)
 8008964:	fba3 1302 	umull	r1, r3, r3, r2
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	2164      	movs	r1, #100	; 0x64
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	3332      	adds	r3, #50	; 0x32
 8008976:	4a72      	ldr	r2, [pc, #456]	; (8008b40 <UART_SetConfig+0x6f4>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	f003 020f 	and.w	r2, r3, #15
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4442      	add	r2, r8
 8008988:	609a      	str	r2, [r3, #8]
 800898a:	e0d0      	b.n	8008b2e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800898c:	f7fe f9f8 	bl	8006d80 <HAL_RCC_GetPCLK1Freq>
 8008990:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	469a      	mov	sl, r3
 8008996:	f04f 0b00 	mov.w	fp, #0
 800899a:	46d0      	mov	r8, sl
 800899c:	46d9      	mov	r9, fp
 800899e:	eb18 0308 	adds.w	r3, r8, r8
 80089a2:	eb49 0409 	adc.w	r4, r9, r9
 80089a6:	4698      	mov	r8, r3
 80089a8:	46a1      	mov	r9, r4
 80089aa:	eb18 080a 	adds.w	r8, r8, sl
 80089ae:	eb49 090b 	adc.w	r9, r9, fp
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80089be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80089c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80089c6:	4688      	mov	r8, r1
 80089c8:	4691      	mov	r9, r2
 80089ca:	eb1a 0508 	adds.w	r5, sl, r8
 80089ce:	eb4b 0609 	adc.w	r6, fp, r9
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	4619      	mov	r1, r3
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	f04f 0400 	mov.w	r4, #0
 80089e4:	0094      	lsls	r4, r2, #2
 80089e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089ea:	008b      	lsls	r3, r1, #2
 80089ec:	461a      	mov	r2, r3
 80089ee:	4623      	mov	r3, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	4631      	mov	r1, r6
 80089f4:	f7f8 f938 	bl	8000c68 <__aeabi_uldivmod>
 80089f8:	4603      	mov	r3, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	461a      	mov	r2, r3
 80089fe:	4b50      	ldr	r3, [pc, #320]	; (8008b40 <UART_SetConfig+0x6f4>)
 8008a00:	fba3 2302 	umull	r2, r3, r3, r2
 8008a04:	095b      	lsrs	r3, r3, #5
 8008a06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	469b      	mov	fp, r3
 8008a0e:	f04f 0c00 	mov.w	ip, #0
 8008a12:	46d9      	mov	r9, fp
 8008a14:	46e2      	mov	sl, ip
 8008a16:	eb19 0309 	adds.w	r3, r9, r9
 8008a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8008a1e:	4699      	mov	r9, r3
 8008a20:	46a2      	mov	sl, r4
 8008a22:	eb19 090b 	adds.w	r9, r9, fp
 8008a26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a2a:	f04f 0100 	mov.w	r1, #0
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a3e:	4689      	mov	r9, r1
 8008a40:	4692      	mov	sl, r2
 8008a42:	eb1b 0509 	adds.w	r5, fp, r9
 8008a46:	eb4c 060a 	adc.w	r6, ip, sl
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	f04f 0300 	mov.w	r3, #0
 8008a58:	f04f 0400 	mov.w	r4, #0
 8008a5c:	0094      	lsls	r4, r2, #2
 8008a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a62:	008b      	lsls	r3, r1, #2
 8008a64:	461a      	mov	r2, r3
 8008a66:	4623      	mov	r3, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	f7f8 f8fc 	bl	8000c68 <__aeabi_uldivmod>
 8008a70:	4603      	mov	r3, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	461a      	mov	r2, r3
 8008a76:	4b32      	ldr	r3, [pc, #200]	; (8008b40 <UART_SetConfig+0x6f4>)
 8008a78:	fba3 1302 	umull	r1, r3, r3, r2
 8008a7c:	095b      	lsrs	r3, r3, #5
 8008a7e:	2164      	movs	r1, #100	; 0x64
 8008a80:	fb01 f303 	mul.w	r3, r1, r3
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	3332      	adds	r3, #50	; 0x32
 8008a8a:	4a2d      	ldr	r2, [pc, #180]	; (8008b40 <UART_SetConfig+0x6f4>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	095b      	lsrs	r3, r3, #5
 8008a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a96:	4498      	add	r8, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	469b      	mov	fp, r3
 8008a9c:	f04f 0c00 	mov.w	ip, #0
 8008aa0:	46d9      	mov	r9, fp
 8008aa2:	46e2      	mov	sl, ip
 8008aa4:	eb19 0309 	adds.w	r3, r9, r9
 8008aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8008aac:	4699      	mov	r9, r3
 8008aae:	46a2      	mov	sl, r4
 8008ab0:	eb19 090b 	adds.w	r9, r9, fp
 8008ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008ab8:	f04f 0100 	mov.w	r1, #0
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008acc:	4689      	mov	r9, r1
 8008ace:	4692      	mov	sl, r2
 8008ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8008ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	4619      	mov	r1, r3
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	f04f 0400 	mov.w	r4, #0
 8008aea:	0094      	lsls	r4, r2, #2
 8008aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008af0:	008b      	lsls	r3, r1, #2
 8008af2:	461a      	mov	r2, r3
 8008af4:	4623      	mov	r3, r4
 8008af6:	4628      	mov	r0, r5
 8008af8:	4631      	mov	r1, r6
 8008afa:	f7f8 f8b5 	bl	8000c68 <__aeabi_uldivmod>
 8008afe:	4603      	mov	r3, r0
 8008b00:	460c      	mov	r4, r1
 8008b02:	461a      	mov	r2, r3
 8008b04:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <UART_SetConfig+0x6f4>)
 8008b06:	fba3 1302 	umull	r1, r3, r3, r2
 8008b0a:	095b      	lsrs	r3, r3, #5
 8008b0c:	2164      	movs	r1, #100	; 0x64
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	3332      	adds	r3, #50	; 0x32
 8008b18:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <UART_SetConfig+0x6f4>)
 8008b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	f003 020f 	and.w	r2, r3, #15
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4442      	add	r2, r8
 8008b2a:	609a      	str	r2, [r3, #8]
}
 8008b2c:	e7ff      	b.n	8008b2e <UART_SetConfig+0x6e2>
 8008b2e:	bf00      	nop
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	40011000 	.word	0x40011000
 8008b3c:	40011400 	.word	0x40011400
 8008b40:	51eb851f 	.word	0x51eb851f

08008b44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b44:	b084      	sub	sp, #16
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	f107 001c 	add.w	r0, r7, #28
 8008b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d122      	bne.n	8008ba2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d105      	bne.n	8008b96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa4e 	bl	8009038 <USB_CoreReset>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]
 8008ba0:	e01a      	b.n	8008bd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa42 	bl	8009038 <USB_CoreReset>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d106      	bne.n	8008bcc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	639a      	str	r2, [r3, #56]	; 0x38
 8008bca:	e005      	b.n	8008bd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d10b      	bne.n	8008bf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f043 0206 	orr.w	r2, r3, #6
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f043 0220 	orr.w	r2, r3, #32
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c02:	b004      	add	sp, #16
 8008c04:	4770      	bx	lr

08008c06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f023 0201 	bic.w	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d106      	bne.n	8008c54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60da      	str	r2, [r3, #12]
 8008c52:	e00b      	b.n	8008c6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d106      	bne.n	8008c68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	e001      	b.n	8008c6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e003      	b.n	8008c74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c6c:	2032      	movs	r0, #50	; 0x32
 8008c6e:	f7f9 fb65 	bl	800233c <HAL_Delay>

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c96:	2300      	movs	r3, #0
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	e009      	b.n	8008cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3340      	adds	r3, #64	; 0x40
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	3301      	adds	r3, #1
 8008cae:	613b      	str	r3, [r7, #16]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b0e      	cmp	r3, #14
 8008cb4:	d9f2      	bls.n	8008c9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d11c      	bne.n	8008cf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cca:	f043 0302 	orr.w	r3, r3, #2
 8008cce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8008cf4:	e00b      	b.n	8008d0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d14:	461a      	mov	r2, r3
 8008d16:	2300      	movs	r3, #0
 8008d18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d20:	4619      	mov	r1, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d28:	461a      	mov	r2, r3
 8008d2a:	680b      	ldr	r3, [r1, #0]
 8008d2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d10c      	bne.n	8008d4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f949 	bl	8008fd4 <USB_SetDevSpeed>
 8008d42:	e008      	b.n	8008d56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d44:	2101      	movs	r1, #1
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f944 	bl	8008fd4 <USB_SetDevSpeed>
 8008d4c:	e003      	b.n	8008d56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d4e:	2103      	movs	r1, #3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f93f 	bl	8008fd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d56:	2110      	movs	r1, #16
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f8f3 	bl	8008f44 <USB_FlushTxFifo>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f911 	bl	8008f90 <USB_FlushRxFifo>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7e:	461a      	mov	r2, r3
 8008d80:	2300      	movs	r3, #0
 8008d82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d96:	461a      	mov	r2, r3
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	613b      	str	r3, [r7, #16]
 8008da0:	e043      	b.n	8008e2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008db8:	d118      	bne.n	8008dec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dcc:	461a      	mov	r2, r3
 8008dce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	e013      	b.n	8008dfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	461a      	mov	r2, r3
 8008de4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	e008      	b.n	8008dfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df8:	461a      	mov	r2, r3
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	3301      	adds	r3, #1
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d3b7      	bcc.n	8008da2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e32:	2300      	movs	r3, #0
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	e043      	b.n	8008ec0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e4e:	d118      	bne.n	8008e82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e62:	461a      	mov	r2, r3
 8008e64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	e013      	b.n	8008e94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	e008      	b.n	8008e94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2300      	movs	r3, #0
 8008e92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d3b7      	bcc.n	8008e38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ee8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d105      	bne.n	8008efc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	f043 0210 	orr.w	r2, r3, #16
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	699a      	ldr	r2, [r3, #24]
 8008f00:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <USB_DevInit+0x2c4>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f043 0208 	orr.w	r2, r3, #8
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d107      	bne.n	8008f30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f28:	f043 0304 	orr.w	r3, r3, #4
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f3c:	b004      	add	sp, #16
 8008f3e:	4770      	bx	lr
 8008f40:	803c3800 	.word	0x803c3800

08008f44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	019b      	lsls	r3, r3, #6
 8008f56:	f043 0220 	orr.w	r2, r3, #32
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4a09      	ldr	r2, [pc, #36]	; (8008f8c <USB_FlushTxFifo+0x48>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d901      	bls.n	8008f70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e006      	b.n	8008f7e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d0f0      	beq.n	8008f5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	00030d40 	.word	0x00030d40

08008f90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2210      	movs	r2, #16
 8008fa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <USB_FlushRxFifo+0x40>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d901      	bls.n	8008fb4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e006      	b.n	8008fc2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d0f0      	beq.n	8008fa2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	00030d40 	.word	0x00030d40

08008fd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	68f9      	ldr	r1, [r7, #12]
 8008ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009020:	f043 0302 	orr.w	r3, r3, #2
 8009024:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009026:	2003      	movs	r0, #3
 8009028:	f7f9 f988 	bl	800233c <HAL_Delay>

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3301      	adds	r3, #1
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4a13      	ldr	r2, [pc, #76]	; (800909c <USB_CoreReset+0x64>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d901      	bls.n	8009056 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e01b      	b.n	800908e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	daf2      	bge.n	8009044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f043 0201 	orr.w	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3301      	adds	r3, #1
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4a09      	ldr	r2, [pc, #36]	; (800909c <USB_CoreReset+0x64>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d901      	bls.n	8009080 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e006      	b.n	800908e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b01      	cmp	r3, #1
 800908a:	d0f0      	beq.n	800906e <USB_CoreReset+0x36>

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	00030d40 	.word	0x00030d40

080090a0 <MPU9250_init>:
const uint16_t MPU9250_accelsensitivity = 16384;  // = 16384 LSB/g

// mpu global instance
struct MPU9250 iMPU9250 = {0, };

void MPU9250_init(struct MPU9250* obj, I2C_HandleTypeDef *phi2c){
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
//	obj->gyroBias[3] = {0, 0, 0}
//	obj->accelBias[3] = {0, 0, 0}; // Bias corrections for gyro and accelerometer

	obj->phi2c = phi2c;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	601a      	str	r2, [r3, #0]

	obj->Ascale = AFS_2G;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	711a      	strb	r2, [r3, #4]
	obj->Gscale = GFS_250DPS;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	715a      	strb	r2, [r3, #5]
	obj->Mscale = MFS_14BITS;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	719a      	strb	r2, [r3, #6]
	obj->Mmode = 0x06;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2206      	movs	r2, #6
 80090c6:	71da      	strb	r2, [r3, #7]

	obj->initQ[0] = 1;//initial value
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80090ce:	675a      	str	r2, [r3, #116]	; 0x74
	obj->initQ[1] = 0;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f04f 0200 	mov.w	r2, #0
 80090d6:	679a      	str	r2, [r3, #120]	; 0x78
	obj->initQ[2] = 0;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	67da      	str	r2, [r3, #124]	; 0x7c
	obj->initQ[3] = 0;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	obj->status = MPU9250_disable;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	MPU9250_resetMPU9250(obj);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa50 	bl	8009598 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250(obj);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fb4f 	bl	800979c <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250(obj); // calculate ay, ac bias
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fad0 	bl	80096a4 <MPU9250_initMPU9250>
	MPU9250_initAK8963(obj);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa59 	bl	80095bc <MPU9250_initAK8963>

	MPU9250_getMres(obj);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f9c6 	bl	800949c <MPU9250_getMres>
	MPU9250_getGres(obj);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f9e1 	bl	80094d8 <MPU9250_getGres>
	MPU9250_getAres(obj);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa10 	bl	800953c <MPU9250_getAres>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <MPU9250_writeByte>:

uint16_t MPU9250_writeByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t data)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af02      	add	r7, sp, #8
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	4608      	mov	r0, r1
 800912e:	4611      	mov	r1, r2
 8009130:	461a      	mov	r2, r3
 8009132:	4603      	mov	r3, r0
 8009134:	70fb      	strb	r3, [r7, #3]
 8009136:	460b      	mov	r3, r1
 8009138:	70bb      	strb	r3, [r7, #2]
 800913a:	4613      	mov	r3, r2
 800913c:	707b      	strb	r3, [r7, #1]
	// Creating dynamic array to store regAddr + data in one buffer
	#define SIZE 1
	uint8_t * dynBuffer;
	dynBuffer = (uint8_t *) malloc(sizeof(uint8_t) * (SIZE+1));
 800913e:	2002      	movs	r0, #2
 8009140:	f001 fb90 	bl	800a864 <malloc>
 8009144:	4603      	mov	r3, r0
 8009146:	60fb      	str	r3, [r7, #12]
	dynBuffer[0] = subAddress;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	78ba      	ldrb	r2, [r7, #2]
 800914c:	701a      	strb	r2, [r3, #0]

	// copy array
	memcpy(dynBuffer+1, &data, sizeof(uint8_t) * SIZE);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	787a      	ldrb	r2, [r7, #1]
 8009154:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(obj->phi2c, address, dynBuffer, SIZE+1, 1000);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	b299      	uxth	r1, r3
 800915e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	2302      	movs	r3, #2
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	f7fa fd24 	bl	8003bb4 <HAL_I2C_Master_Transmit>
 800916c:	4603      	mov	r3, r0
 800916e:	72fb      	strb	r3, [r7, #11]
	free(dynBuffer);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f001 fb7f 	bl	800a874 <free>
	return status == HAL_OK;
 8009176:	7afb      	ldrb	r3, [r7, #11]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bf0c      	ite	eq
 800917c:	2301      	moveq	r3, #1
 800917e:	2300      	movne	r3, #0
 8009180:	b2db      	uxtb	r3, r3
 8009182:	b29b      	uxth	r3, r3
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <MPU9250_readBytes>:



void MPU9250_readBytes(struct MPU9250* obj, uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 800918c:	b590      	push	{r4, r7, lr}
 800918e:	b08b      	sub	sp, #44	; 0x2c
 8009190:	af02      	add	r7, sp, #8
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	4608      	mov	r0, r1
 8009196:	4611      	mov	r1, r2
 8009198:	461a      	mov	r2, r3
 800919a:	4603      	mov	r3, r0
 800919c:	70fb      	strb	r3, [r7, #3]
 800919e:	460b      	mov	r3, r1
 80091a0:	70bb      	strb	r3, [r7, #2]
 80091a2:	4613      	mov	r3, r2
 80091a4:	707b      	strb	r3, [r7, #1]
	char data[14];
	char data_write[1];
	data_write[0] = subAddress;
 80091a6:	78bb      	ldrb	r3, [r7, #2]
 80091a8:	723b      	strb	r3, [r7, #8]

	//    uint16_t tout = timeout > 0 ? timeout : DEFAULT_TIMEOUT;
	HAL_I2C_Master_Transmit(obj->phi2c, address, (uint8_t*)data_write, 1, DEFAULT_TIMEOUT);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	b299      	uxth	r1, r3
 80091b2:	f107 0208 	add.w	r2, r7, #8
 80091b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	2301      	movs	r3, #1
 80091be:	f7fa fcf9 	bl	8003bb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(obj->phi2c, address, (uint8_t*)data, count, DEFAULT_TIMEOUT);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	b299      	uxth	r1, r3
 80091ca:	787b      	ldrb	r3, [r7, #1]
 80091cc:	b29c      	uxth	r4, r3
 80091ce:	f107 020c 	add.w	r2, r7, #12
 80091d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4623      	mov	r3, r4
 80091da:	f7fa fde9 	bl	8003db0 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	e00b      	b.n	80091fc <MPU9250_readBytes+0x70>
	 dest[ii] = data[ii];
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e8:	4413      	add	r3, r2
 80091ea:	f107 010c 	add.w	r1, r7, #12
 80091ee:	69fa      	ldr	r2, [r7, #28]
 80091f0:	440a      	add	r2, r1
 80091f2:	7812      	ldrb	r2, [r2, #0]
 80091f4:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	3301      	adds	r3, #1
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	787b      	ldrb	r3, [r7, #1]
 80091fe:	69fa      	ldr	r2, [r7, #28]
 8009200:	429a      	cmp	r2, r3
 8009202:	dbef      	blt.n	80091e4 <MPU9250_readBytes+0x58>
	}
}
 8009204:	bf00      	nop
 8009206:	3724      	adds	r7, #36	; 0x24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd90      	pop	{r4, r7, pc}

0800920c <MPU9250_readByte>:

char MPU9250_readByte(struct MPU9250* obj, uint8_t address, uint8_t subAddress)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af02      	add	r7, sp, #8
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
 8009218:	4613      	mov	r3, r2
 800921a:	70bb      	strb	r3, [r7, #2]
	char data[1]; // `data` will store the register data
	MPU9250_readBytes(obj, address, subAddress, 1, (uint8_t*)data);
 800921c:	78ba      	ldrb	r2, [r7, #2]
 800921e:	78f9      	ldrb	r1, [r7, #3]
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	2301      	movs	r3, #1
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff ffaf 	bl	800918c <MPU9250_readBytes>
	return data[1];
 800922e:	7b7b      	ldrb	r3, [r7, #13]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <MPU9250_readMPU9250IT>:

void MPU9250_readMPU9250IT(struct MPU9250* obj){
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af02      	add	r7, sp, #8
 800923e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(obj->phi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, obj->agtBuffer, 14);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3388      	adds	r3, #136	; 0x88
 8009248:	220e      	movs	r2, #14
 800924a:	9201      	str	r2, [sp, #4]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	2301      	movs	r3, #1
 8009250:	223b      	movs	r2, #59	; 0x3b
 8009252:	21d0      	movs	r1, #208	; 0xd0
 8009254:	f7fa ffd2 	bl	80041fc <HAL_I2C_Mem_Read_IT>
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <MPU9250_callbackMPU9250IT>:

uint8_t MPU9250_callbackMPU9250IT(struct MPU9250* obj){
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	obj->accelCount[0] = (((int16_t)obj->agtBuffer[0]) << 8) | obj->agtBuffer[1];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	b21a      	sxth	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8009278:	b21b      	sxth	r3, r3
 800927a:	4313      	orrs	r3, r2
 800927c:	b21a      	sxth	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	829a      	strh	r2, [r3, #20]
	obj->accelCount[1] = (((int16_t)obj->agtBuffer[2]) << 8) | obj->agtBuffer[3];
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	b21a      	sxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8009292:	b21b      	sxth	r3, r3
 8009294:	4313      	orrs	r3, r2
 8009296:	b21a      	sxth	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	82da      	strh	r2, [r3, #22]
	obj->accelCount[2] = (((int16_t)obj->agtBuffer[4]) << 8) | obj->agtBuffer[5];
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	b21a      	sxth	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80092ac:	b21b      	sxth	r3, r3
 80092ae:	4313      	orrs	r3, r2
 80092b0:	b21a      	sxth	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	831a      	strh	r2, [r3, #24]
	obj->tmpCount = (int16_t) (obj->agtBuffer[6] << 8 | obj->agtBuffer[7]);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	b21a      	sxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80092c6:	b21b      	sxth	r3, r3
 80092c8:	4313      	orrs	r3, r2
 80092ca:	b21a      	sxth	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	84da      	strh	r2, [r3, #38]	; 0x26
	obj->gyroCount[0] = (((int16_t)obj->agtBuffer[8]) << 8) | obj->agtBuffer[9];
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	b21a      	sxth	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80092e0:	b21b      	sxth	r3, r3
 80092e2:	4313      	orrs	r3, r2
 80092e4:	b21a      	sxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	835a      	strh	r2, [r3, #26]
	obj->gyroCount[1] = (((int16_t)obj->agtBuffer[10]) << 8) | obj->agtBuffer[11];
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80092f0:	021b      	lsls	r3, r3, #8
 80092f2:	b21a      	sxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80092fa:	b21b      	sxth	r3, r3
 80092fc:	4313      	orrs	r3, r2
 80092fe:	b21a      	sxth	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	839a      	strh	r2, [r3, #28]
	obj->gyroCount[2] = (((int16_t)obj->agtBuffer[12]) << 8) | obj->agtBuffer[13];
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800930a:	021b      	lsls	r3, r3, #8
 800930c:	b21a      	sxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009314:	b21b      	sxth	r3, r3
 8009316:	4313      	orrs	r3, r2
 8009318:	b21a      	sxth	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	83da      	strh	r2, [r3, #30]

	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800932a:	4313      	orrs	r3, r2
 800932c:	b21a      	sxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009334:	4313      	orrs	r3, r2
 8009336:	b21b      	sxth	r3, r3
	   |(!(obj->gyroCount[0])&!(obj->gyroCount[1])&!(obj->gyroCount[2]))){
 8009338:	2b00      	cmp	r3, #0
 800933a:	bf0c      	ite	eq
 800933c:	2301      	moveq	r3, #1
 800933e:	2300      	movne	r3, #0
 8009340:	b2da      	uxtb	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800934e:	430b      	orrs	r3, r1
 8009350:	b219      	sxth	r1, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009358:	430b      	orrs	r3, r1
 800935a:	b21b      	sxth	r3, r3
 800935c:	2b00      	cmp	r3, #0
 800935e:	bf0c      	ite	eq
 8009360:	2301      	moveq	r3, #1
 8009362:	2300      	movne	r3, #0
 8009364:	b2db      	uxtb	r3, r3
 8009366:	4313      	orrs	r3, r2
 8009368:	b2db      	uxtb	r3, r3
	if((!(obj->accelCount[0])&!(obj->accelCount[1])&!(obj->accelCount[2]))
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <MPU9250_callbackMPU9250IT+0x112>
		return 0;
 800936e:	2300      	movs	r3, #0
 8009370:	e08a      	b.n	8009488 <MPU9250_callbackMPU9250IT+0x228>
//	Gx = (rawGx-baseGyX) / 131.0;
//	Gy = (rawGy-baseGyY) / 131.0;
//	Gz = (rawGz-baseGyZ) / 131.0;

	// Now we'll calculate the accleration value into actual g's
	obj->ax = (float)obj->accelCount[0]*obj->aRes - obj->accelBias[0];  // get actual g value, this depends on scale being set
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	edd3 7a02 	vldr	s15, [r3, #8]
 8009386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	obj->ay = (float)obj->accelCount[1]*obj->aRes - obj->accelBias[1];
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80093ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80093b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	obj->az = (float)obj->accelCount[2]*obj->aRes - obj->accelBias[2];
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80093c8:	ee07 3a90 	vmov	s15, r3
 80093cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80093d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80093e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	obj->tmp = (float) ((int16_t) obj->tmpCount / (float) 340.0 + (float) 36.53);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80093f0:	ee07 3a90 	vmov	s15, r3
 80093f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093f8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009494 <MPU9250_callbackMPU9250IT+0x234>
 80093fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009400:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009498 <MPU9250_callbackMPU9250IT+0x238>
 8009404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	// Calculate the gyro value into actual degrees per second
	obj->gx = (float)obj->gyroCount[0]*obj->gRes - obj->gyroBias[0];  // get actual gyro value, this depends on scale being set
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009414:	ee07 3a90 	vmov	s15, r3
 8009418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800942c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	obj->gy = (float)obj->gyroCount[1]*obj->gRes - obj->gyroBias[1];
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	edd3 7a03 	vldr	s15, [r3, #12]
 800944a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	obj->gz = (float)obj->gyroCount[2]*obj->gRes - obj->gyroBias[2];
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800947c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	return 1;
 8009486:	2301      	movs	r3, #1
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	43aa0000 	.word	0x43aa0000
 8009498:	42121eb8 	.word	0x42121eb8

0800949c <MPU9250_getMres>:

void MPU9250_getMres(struct MPU9250* obj) {
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	switch (obj->Mscale)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	799b      	ldrb	r3, [r3, #6]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <MPU9250_getMres+0x16>
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d004      	beq.n	80094ba <MPU9250_getMres+0x1e>
		  break;
	case MFS_16BITS:
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 80094b0:	e007      	b.n	80094c2 <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a06      	ldr	r2, [pc, #24]	; (80094d0 <MPU9250_getMres+0x34>)
 80094b6:	611a      	str	r2, [r3, #16]
		  break;
 80094b8:	e003      	b.n	80094c2 <MPU9250_getMres+0x26>
		  obj->mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a05      	ldr	r2, [pc, #20]	; (80094d4 <MPU9250_getMres+0x38>)
 80094be:	611a      	str	r2, [r3, #16]
		  break;
 80094c0:	bf00      	nop
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	40bfebff 	.word	0x40bfebff
 80094d4:	3fbfebff 	.word	0x3fbfebff

080094d8 <MPU9250_getGres>:

void MPU9250_getGres(struct MPU9250* obj) {
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  switch (obj->Gscale)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	795b      	ldrb	r3, [r3, #5]
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	d81b      	bhi.n	8009520 <MPU9250_getGres+0x48>
 80094e8:	a201      	add	r2, pc, #4	; (adr r2, 80094f0 <MPU9250_getGres+0x18>)
 80094ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ee:	bf00      	nop
 80094f0:	08009501 	.word	0x08009501
 80094f4:	08009509 	.word	0x08009509
 80094f8:	08009511 	.word	0x08009511
 80094fc:	08009519 	.word	0x08009519
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
    	  obj->gRes = 250.0/32768.0;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a0a      	ldr	r2, [pc, #40]	; (800952c <MPU9250_getGres+0x54>)
 8009504:	60da      	str	r2, [r3, #12]
          break;
 8009506:	e00b      	b.n	8009520 <MPU9250_getGres+0x48>
    case GFS_500DPS:
    	  obj->gRes = 500.0/32768.0;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a09      	ldr	r2, [pc, #36]	; (8009530 <MPU9250_getGres+0x58>)
 800950c:	60da      	str	r2, [r3, #12]
          break;
 800950e:	e007      	b.n	8009520 <MPU9250_getGres+0x48>
    case GFS_1000DPS:
    	  obj->gRes = 1000.0/32768.0;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a08      	ldr	r2, [pc, #32]	; (8009534 <MPU9250_getGres+0x5c>)
 8009514:	60da      	str	r2, [r3, #12]
          break;
 8009516:	e003      	b.n	8009520 <MPU9250_getGres+0x48>
    case GFS_2000DPS:
    	  obj->gRes = 2000.0/32768.0;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a07      	ldr	r2, [pc, #28]	; (8009538 <MPU9250_getGres+0x60>)
 800951c:	60da      	str	r2, [r3, #12]
          break;
 800951e:	bf00      	nop
  }
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	3bfa0000 	.word	0x3bfa0000
 8009530:	3c7a0000 	.word	0x3c7a0000
 8009534:	3cfa0000 	.word	0x3cfa0000
 8009538:	3d7a0000 	.word	0x3d7a0000

0800953c <MPU9250_getAres>:


void MPU9250_getAres(struct MPU9250* obj) {
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  switch (obj->Ascale)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	791b      	ldrb	r3, [r3, #4]
 8009548:	2b03      	cmp	r3, #3
 800954a:	d81f      	bhi.n	800958c <MPU9250_getAres+0x50>
 800954c:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <MPU9250_getAres+0x18>)
 800954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009552:	bf00      	nop
 8009554:	08009565 	.word	0x08009565
 8009558:	0800956f 	.word	0x0800956f
 800955c:	08009579 	.word	0x08009579
 8009560:	08009583 	.word	0x08009583
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	  obj->aRes = 2.0/32768.0;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800956a:	609a      	str	r2, [r3, #8]
          break;
 800956c:	e00e      	b.n	800958c <MPU9250_getAres+0x50>
    case AFS_4G:
    	  obj->aRes = 4.0/32768.0;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8009574:	609a      	str	r2, [r3, #8]
          break;
 8009576:	e009      	b.n	800958c <MPU9250_getAres+0x50>
    case AFS_8G:
    	  obj->aRes = 8.0/32768.0;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800957e:	609a      	str	r2, [r3, #8]
          break;
 8009580:	e004      	b.n	800958c <MPU9250_getAres+0x50>
    case AFS_16G:
    	  obj->aRes = 16.0/32768.0;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8009588:	609a      	str	r2, [r3, #8]
          break;
 800958a:	bf00      	nop
  }
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <MPU9250_resetMPU9250>:
  obj->tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return obj->tmpCount;
}


void MPU9250_resetMPU9250(struct MPU9250* obj) {
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
    // reset device
    MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80095a0:	2380      	movs	r3, #128	; 0x80
 80095a2:	226b      	movs	r2, #107	; 0x6b
 80095a4:	21d0      	movs	r1, #208	; 0xd0
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fdbc 	bl	8009124 <MPU9250_writeByte>
    HAL_Delay(10);
 80095ac:	200a      	movs	r0, #10
 80095ae:	f7f8 fec5 	bl	800233c <HAL_Delay>
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <MPU9250_initAK8963>:

void MPU9250_initAK8963(struct MPU9250* obj)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80095c4:	2300      	movs	r3, #0
 80095c6:	220a      	movs	r2, #10
 80095c8:	2118      	movs	r1, #24
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fdaa 	bl	8009124 <MPU9250_writeByte>
	HAL_Delay(10);
 80095d0:	200a      	movs	r0, #10
 80095d2:	f7f8 feb3 	bl	800233c <HAL_Delay>
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80095d6:	230f      	movs	r3, #15
 80095d8:	220a      	movs	r2, #10
 80095da:	2118      	movs	r1, #24
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fda1 	bl	8009124 <MPU9250_writeByte>
	HAL_Delay(10);
 80095e2:	200a      	movs	r0, #10
 80095e4:	f7f8 feaa 	bl	800233c <HAL_Delay>
	MPU9250_readBytes(obj, AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 80095e8:	f107 030c 	add.w	r3, r7, #12
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	2303      	movs	r3, #3
 80095f0:	2210      	movs	r2, #16
 80095f2:	2118      	movs	r1, #24
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff fdc9 	bl	800918c <MPU9250_readBytes>
	obj->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80095fa:	7b3b      	ldrb	r3, [r7, #12]
 80095fc:	3b80      	subs	r3, #128	; 0x80
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009606:	eddf 6a26 	vldr	s13, [pc, #152]	; 80096a0 <MPU9250_initAK8963+0xe4>
 800960a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800960e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	obj->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 800961c:	7b7b      	ldrb	r3, [r7, #13]
 800961e:	3b80      	subs	r3, #128	; 0x80
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009628:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80096a0 <MPU9250_initAK8963+0xe4>
 800962c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	obj->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	3b80      	subs	r3, #128	; 0x80
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800964a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80096a0 <MPU9250_initAK8963+0xe4>
 800964e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8009660:	2300      	movs	r3, #0
 8009662:	220a      	movs	r2, #10
 8009664:	2118      	movs	r1, #24
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff fd5c 	bl	8009124 <MPU9250_writeByte>
	HAL_Delay(10);
 800966c:	200a      	movs	r0, #10
 800966e:	f7f8 fe65 	bl	800233c <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(obj, AK8963_ADDRESS, AK8963_CNTL, obj->Mscale << 4 | obj->Mmode); // Set magnetometer data resolution and sample ODR
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	799b      	ldrb	r3, [r3, #6]
 8009676:	011b      	lsls	r3, r3, #4
 8009678:	b25a      	sxtb	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	79db      	ldrb	r3, [r3, #7]
 800967e:	b25b      	sxtb	r3, r3
 8009680:	4313      	orrs	r3, r2
 8009682:	b25b      	sxtb	r3, r3
 8009684:	b2db      	uxtb	r3, r3
 8009686:	220a      	movs	r2, #10
 8009688:	2118      	movs	r1, #24
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff fd4a 	bl	8009124 <MPU9250_writeByte>
	HAL_Delay(10);
 8009690:	200a      	movs	r0, #10
 8009692:	f7f8 fe53 	bl	800233c <HAL_Delay>
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	43800000 	.word	0x43800000

080096a4 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250(struct MPU9250* obj)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80096ac:	2300      	movs	r3, #0
 80096ae:	226b      	movs	r2, #107	; 0x6b
 80096b0:	21d0      	movs	r1, #208	; 0xd0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fd36 	bl	8009124 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80096b8:	2064      	movs	r0, #100	; 0x64
 80096ba:	f7f8 fe3f 	bl	800233c <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80096be:	2301      	movs	r3, #1
 80096c0:	226b      	movs	r2, #107	; 0x6b
 80096c2:	21d0      	movs	r1, #208	; 0xd0
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff fd2d 	bl	8009124 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(obj, MPU9250_ADDRESS, CONFIG, 0x03);
 80096ca:	2303      	movs	r3, #3
 80096cc:	221a      	movs	r2, #26
 80096ce:	21d0      	movs	r1, #208	; 0xd0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff fd27 	bl	8009124 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(obj, MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80096d6:	2304      	movs	r3, #4
 80096d8:	2219      	movs	r2, #25
 80096da:	21d0      	movs	r1, #208	; 0xd0
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff fd21 	bl	8009124 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(obj, MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80096e2:	221b      	movs	r2, #27
 80096e4:	21d0      	movs	r1, #208	; 0xd0
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff fd90 	bl	800920c <MPU9250_readByte>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	f023 0302 	bic.w	r3, r3, #2
 80096f6:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x18; // Clear AFS bits [4:3]
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	f023 0318 	bic.w	r3, r3, #24
 80096fe:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Gscale << 3; // Set full scale range for the gyro
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	795b      	ldrb	r3, [r3, #5]
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	b25a      	sxtb	r2, r3
 8009708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800970c:	4313      	orrs	r3, r2
 800970e:	b25b      	sxtb	r3, r3
 8009710:	73fb      	strb	r3, [r7, #15]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
  MPU9250_writeByte(obj, MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	221b      	movs	r2, #27
 8009716:	21d0      	movs	r1, #208	; 0xd0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fd03 	bl	8009124 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 800971e:	221c      	movs	r2, #28
 8009720:	21d0      	movs	r1, #208	; 0xd0
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fd72 	bl	800920c <MPU9250_readByte>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	f023 0318 	bic.w	r3, r3, #24
 8009732:	73fb      	strb	r3, [r7, #15]
  c = c | obj->Ascale << 3; // Set full scale range for the accelerometer
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	791b      	ldrb	r3, [r3, #4]
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	b25a      	sxtb	r2, r3
 800973c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009740:	4313      	orrs	r3, r2
 8009742:	b25b      	sxtb	r3, r3
 8009744:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	221c      	movs	r2, #28
 800974a:	21d0      	movs	r1, #208	; 0xd0
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff fce9 	bl	8009124 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8009752:	221d      	movs	r2, #29
 8009754:	21d0      	movs	r1, #208	; 0xd0
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff fd58 	bl	800920c <MPU9250_readByte>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	f023 030f 	bic.w	r3, r3, #15
 8009766:	73fb      	strb	r3, [r7, #15]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	f043 0303 	orr.w	r3, r3, #3
 800976e:	73fb      	strb	r3, [r7, #15]
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	221d      	movs	r2, #29
 8009774:	21d0      	movs	r1, #208	; 0xd0
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7ff fcd4 	bl	8009124 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 800977c:	2322      	movs	r3, #34	; 0x22
 800977e:	2237      	movs	r2, #55	; 0x37
 8009780:	21d0      	movs	r1, #208	; 0xd0
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff fcce 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8009788:	2301      	movs	r3, #1
 800978a:	2238      	movs	r2, #56	; 0x38
 800978c:	21d0      	movs	r1, #208	; 0xd0
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff fcc8 	bl	8009124 <MPU9250_writeByte>
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250(struct MPU9250* obj)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b098      	sub	sp, #96	; 0x60
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	6078      	str	r0, [r7, #4]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80097a4:	2300      	movs	r3, #0
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
 80097a8:	2300      	movs	r3, #0
 80097aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80097ac:	2300      	movs	r3, #0
 80097ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b0:	2300      	movs	r3, #0
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80097b4:	2300      	movs	r3, #0
 80097b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097b8:	2300      	movs	r3, #0
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80097bc:	2380      	movs	r3, #128	; 0x80
 80097be:	226b      	movs	r2, #107	; 0x6b
 80097c0:	21d0      	movs	r1, #208	; 0xd0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fcae 	bl	8009124 <MPU9250_writeByte>
  HAL_Delay(100);
 80097c8:	2064      	movs	r0, #100	; 0x64
 80097ca:	f7f8 fdb7 	bl	800233c <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 80097ce:	2301      	movs	r3, #1
 80097d0:	226b      	movs	r2, #107	; 0x6b
 80097d2:	21d0      	movs	r1, #208	; 0xd0
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff fca5 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80097da:	2300      	movs	r3, #0
 80097dc:	226c      	movs	r2, #108	; 0x6c
 80097de:	21d0      	movs	r1, #208	; 0xd0
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff fc9f 	bl	8009124 <MPU9250_writeByte>
  HAL_Delay(200);
 80097e6:	20c8      	movs	r0, #200	; 0xc8
 80097e8:	f7f8 fda8 	bl	800233c <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(obj, MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80097ec:	2300      	movs	r3, #0
 80097ee:	2238      	movs	r2, #56	; 0x38
 80097f0:	21d0      	movs	r1, #208	; 0xd0
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff fc96 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 80097f8:	2300      	movs	r3, #0
 80097fa:	2223      	movs	r2, #35	; 0x23
 80097fc:	21d0      	movs	r1, #208	; 0xd0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff fc90 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8009804:	2300      	movs	r3, #0
 8009806:	226b      	movs	r2, #107	; 0x6b
 8009808:	21d0      	movs	r1, #208	; 0xd0
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff fc8a 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8009810:	2300      	movs	r3, #0
 8009812:	2224      	movs	r2, #36	; 0x24
 8009814:	21d0      	movs	r1, #208	; 0xd0
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff fc84 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 800981c:	2300      	movs	r3, #0
 800981e:	226a      	movs	r2, #106	; 0x6a
 8009820:	21d0      	movs	r1, #208	; 0xd0
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff fc7e 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8009828:	230c      	movs	r3, #12
 800982a:	226a      	movs	r2, #106	; 0x6a
 800982c:	21d0      	movs	r1, #208	; 0xd0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff fc78 	bl	8009124 <MPU9250_writeByte>
  HAL_Delay(15);
 8009834:	200f      	movs	r0, #15
 8009836:	f7f8 fd81 	bl	800233c <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(obj, MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800983a:	2301      	movs	r3, #1
 800983c:	221a      	movs	r2, #26
 800983e:	21d0      	movs	r1, #208	; 0xd0
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff fc6f 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8009846:	2300      	movs	r3, #0
 8009848:	2219      	movs	r2, #25
 800984a:	21d0      	movs	r1, #208	; 0xd0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fc69 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8009852:	2300      	movs	r3, #0
 8009854:	221b      	movs	r2, #27
 8009856:	21d0      	movs	r1, #208	; 0xd0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff fc63 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 800985e:	2300      	movs	r3, #0
 8009860:	221c      	movs	r2, #28
 8009862:	21d0      	movs	r1, #208	; 0xd0
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fc5d 	bl	8009124 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(obj, MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	226a      	movs	r2, #106	; 0x6a
 800986e:	21d0      	movs	r1, #208	; 0xd0
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fc57 	bl	8009124 <MPU9250_writeByte>
  MPU9250_writeByte(obj, MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8009876:	2378      	movs	r3, #120	; 0x78
 8009878:	2223      	movs	r2, #35	; 0x23
 800987a:	21d0      	movs	r1, #208	; 0xd0
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff fc51 	bl	8009124 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8009882:	2028      	movs	r0, #40	; 0x28
 8009884:	f7f8 fd5a 	bl	800233c <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(obj, MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8009888:	2300      	movs	r3, #0
 800988a:	2223      	movs	r2, #35	; 0x23
 800988c:	21d0      	movs	r1, #208	; 0xd0
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7ff fc48 	bl	8009124 <MPU9250_writeByte>
  MPU9250_readBytes(obj, MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8009894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	2302      	movs	r3, #2
 800989c:	2272      	movs	r2, #114	; 0x72
 800989e:	21d0      	movs	r1, #208	; 0xd0
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff fc73 	bl	800918c <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80098a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	b21a      	sxth	r2, r3
 80098ae:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80098b2:	b21b      	sxth	r3, r3
 80098b4:	4313      	orrs	r3, r2
 80098b6:	b21b      	sxth	r3, r3
 80098b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80098bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80098c0:	4ab0      	ldr	r2, [pc, #704]	; (8009b84 <MPU9250_calibrateMPU9250+0x3e8>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	08db      	lsrs	r3, r3, #3
 80098c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

  for (ii = 0; ii < packet_count; ii++) {
 80098cc:	2300      	movs	r3, #0
 80098ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80098d2:	e073      	b.n	80099bc <MPU9250_calibrateMPU9250+0x220>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80098d4:	2300      	movs	r3, #0
 80098d6:	823b      	strh	r3, [r7, #16]
 80098d8:	2300      	movs	r3, #0
 80098da:	827b      	strh	r3, [r7, #18]
 80098dc:	2300      	movs	r3, #0
 80098de:	82bb      	strh	r3, [r7, #20]
 80098e0:	2300      	movs	r3, #0
 80098e2:	813b      	strh	r3, [r7, #8]
 80098e4:	2300      	movs	r3, #0
 80098e6:	817b      	strh	r3, [r7, #10]
 80098e8:	2300      	movs	r3, #0
 80098ea:	81bb      	strh	r3, [r7, #12]
    MPU9250_readBytes(obj, MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80098ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	230c      	movs	r3, #12
 80098f4:	2274      	movs	r2, #116	; 0x74
 80098f6:	21d0      	movs	r1, #208	; 0xd0
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fc47 	bl	800918c <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80098fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009902:	021b      	lsls	r3, r3, #8
 8009904:	b21a      	sxth	r2, r3
 8009906:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800990a:	b21b      	sxth	r3, r3
 800990c:	4313      	orrs	r3, r2
 800990e:	b21b      	sxth	r3, r3
 8009910:	823b      	strh	r3, [r7, #16]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8009912:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009916:	021b      	lsls	r3, r3, #8
 8009918:	b21a      	sxth	r2, r3
 800991a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800991e:	b21b      	sxth	r3, r3
 8009920:	4313      	orrs	r3, r2
 8009922:	b21b      	sxth	r3, r3
 8009924:	827b      	strh	r3, [r7, #18]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8009926:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800992a:	021b      	lsls	r3, r3, #8
 800992c:	b21a      	sxth	r2, r3
 800992e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009932:	b21b      	sxth	r3, r3
 8009934:	4313      	orrs	r3, r2
 8009936:	b21b      	sxth	r3, r3
 8009938:	82bb      	strh	r3, [r7, #20]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800993a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	b21a      	sxth	r2, r3
 8009942:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009946:	b21b      	sxth	r3, r3
 8009948:	4313      	orrs	r3, r2
 800994a:	b21b      	sxth	r3, r3
 800994c:	813b      	strh	r3, [r7, #8]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800994e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	b21a      	sxth	r2, r3
 8009956:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800995a:	b21b      	sxth	r3, r3
 800995c:	4313      	orrs	r3, r2
 800995e:	b21b      	sxth	r3, r3
 8009960:	817b      	strh	r3, [r7, #10]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8009962:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8009966:	021b      	lsls	r3, r3, #8
 8009968:	b21a      	sxth	r2, r3
 800996a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800996e:	b21b      	sxth	r3, r3
 8009970:	4313      	orrs	r3, r2
 8009972:	b21b      	sxth	r3, r3
 8009974:	81bb      	strh	r3, [r7, #12]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
    accel_bias[1] += (int32_t) accel_temp[1];
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009986:	4413      	add	r3, r2
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[2] += (int32_t) accel_temp[2];
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009990:	4413      	add	r3, r2
 8009992:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8009994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009996:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800999a:	4413      	add	r3, r2
 800999c:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80099a4:	4413      	add	r3, r2
 80099a6:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 80099a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (ii = 0; ii < packet_count; ii++) {
 80099b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80099b6:	3301      	adds	r3, #1
 80099b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80099bc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80099c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d385      	bcc.n	80098d4 <MPU9250_calibrateMPU9250+0x138>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80099c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28
    accel_bias[1] /= (int32_t) packet_count;
 80099d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099da:	fb92 f3f3 	sdiv	r3, r2, r3
 80099de:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[2] /= (int32_t) packet_count;
 80099e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80099ea:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[0]  /= (int32_t) packet_count;
 80099ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[1]  /= (int32_t) packet_count;
 80099f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a02:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[2]  /= (int32_t) packet_count;
 8009a04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009a0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) MPU9250_accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dd05      	ble.n	8009a22 <MPU9250_calibrateMPU9250+0x286>
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a1c:	1a9b      	subs	r3, r3, r2
 8009a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8009a20:	e004      	b.n	8009a2c <MPU9250_calibrateMPU9250+0x290>
  else {accel_bias[2] += (int32_t) MPU9250_accelsensitivity;}
 8009a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a28:	4413      	add	r3, r2
 8009a2a:	633b      	str	r3, [r7, #48]	; 0x30

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8009a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2e:	425b      	negs	r3, r3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	da00      	bge.n	8009a36 <MPU9250_calibrateMPU9250+0x29a>
 8009a34:	3303      	adds	r3, #3
 8009a36:	109b      	asrs	r3, r3, #2
 8009a38:	121b      	asrs	r3, r3, #8
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8009a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a42:	425b      	negs	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da00      	bge.n	8009a4a <MPU9250_calibrateMPU9250+0x2ae>
 8009a48:	3303      	adds	r3, #3
 8009a4a:	109b      	asrs	r3, r3, #2
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	425b      	negs	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da00      	bge.n	8009a5c <MPU9250_calibrateMPU9250+0x2c0>
 8009a5a:	3303      	adds	r3, #3
 8009a5c:	109b      	asrs	r3, r3, #2
 8009a5e:	121b      	asrs	r3, r3, #8
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	425b      	negs	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	da00      	bge.n	8009a70 <MPU9250_calibrateMPU9250+0x2d4>
 8009a6e:	3303      	adds	r3, #3
 8009a70:	109b      	asrs	r3, r3, #2
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8009a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a7a:	425b      	negs	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da00      	bge.n	8009a82 <MPU9250_calibrateMPU9250+0x2e6>
 8009a80:	3303      	adds	r3, #3
 8009a82:	109b      	asrs	r3, r3, #2
 8009a84:	121b      	asrs	r3, r3, #8
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8e:	425b      	negs	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da00      	bge.n	8009a96 <MPU9250_calibrateMPU9250+0x2fa>
 8009a94:	3303      	adds	r3, #3
 8009a96:	109b      	asrs	r3, r3, #2
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
  writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
*/
  obj->gyroBias[0] = (float) gyro_bias[0]/(float) MPU9250_gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	ee07 3a90 	vmov	s15, r3
 8009aa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009aa8:	eddf 7a37 	vldr	s15, [pc, #220]	; 8009b88 <MPU9250_calibrateMPU9250+0x3ec>
 8009aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  obj->gyroBias[1] = (float) gyro_bias[1]/(float) MPU9250_gyrosensitivity;
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	ee07 3a90 	vmov	s15, r3
 8009ac0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ac4:	eddf 7a30 	vldr	s15, [pc, #192]	; 8009b88 <MPU9250_calibrateMPU9250+0x3ec>
 8009ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  obj->gyroBias[2] = (float) gyro_bias[2]/(float) MPU9250_gyrosensitivity;
 8009ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad8:	ee07 3a90 	vmov	s15, r3
 8009adc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ae0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009b88 <MPU9250_calibrateMPU9250+0x3ec>
 8009ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	2300      	movs	r3, #0
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	2300      	movs	r3, #0
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
  MPU9250_readBytes(obj, MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8009afe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	2302      	movs	r3, #2
 8009b06:	2277      	movs	r2, #119	; 0x77
 8009b08:	21d0      	movs	r1, #208	; 0xd0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fb3e 	bl	800918c <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8009b10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	b21b      	sxth	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(obj, MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8009b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	2302      	movs	r3, #2
 8009b2a:	227a      	movs	r2, #122	; 0x7a
 8009b2c:	21d0      	movs	r1, #208	; 0xd0
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff fb2c 	bl	800918c <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8009b34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	b21b      	sxth	r3, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009b42:	4313      	orrs	r3, r2
 8009b44:	623b      	str	r3, [r7, #32]
  MPU9250_readBytes(obj, MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8009b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	227d      	movs	r2, #125	; 0x7d
 8009b50:	21d0      	movs	r1, #208	; 0xd0
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fb1a 	bl	800918c <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8009b58:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	b21b      	sxth	r3, r3
 8009b60:	461a      	mov	r2, r3
 8009b62:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009b66:	4313      	orrs	r3, r2
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8009b6e:	2300      	movs	r3, #0
 8009b70:	763b      	strb	r3, [r7, #24]
 8009b72:	2300      	movs	r3, #0
 8009b74:	767b      	strb	r3, [r7, #25]
 8009b76:	2300      	movs	r3, #0
 8009b78:	76bb      	strb	r3, [r7, #26]

  for(ii = 0; ii < 3; ii++) {
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009b80:	e020      	b.n	8009bc4 <MPU9250_calibrateMPU9250+0x428>
 8009b82:	bf00      	nop
 8009b84:	aaaaaaab 	.word	0xaaaaaaab
 8009b88:	00000083 	.word	0x00000083
 8009b8c:	00004000 	.word	0x00004000
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8009b90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <MPU9250_calibrateMPU9250+0x41e>
 8009baa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009bae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009bb2:	4413      	add	r3, r2
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8009bba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009bc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d9e1      	bls.n	8009b90 <MPU9250_calibrateMPU9250+0x3f4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8009bcc:	69fa      	ldr	r2, [r7, #28]
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da00      	bge.n	8009bd6 <MPU9250_calibrateMPU9250+0x43a>
 8009bd4:	3307      	adds	r3, #7
 8009bd6:	10db      	asrs	r3, r3, #3
 8009bd8:	425b      	negs	r3, r3
 8009bda:	4413      	add	r3, r2
 8009bdc:	61fb      	str	r3, [r7, #28]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8009bde:	6a3a      	ldr	r2, [r7, #32]
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	da00      	bge.n	8009be8 <MPU9250_calibrateMPU9250+0x44c>
 8009be6:	3307      	adds	r3, #7
 8009be8:	10db      	asrs	r3, r3, #3
 8009bea:	425b      	negs	r3, r3
 8009bec:	4413      	add	r3, r2
 8009bee:	623b      	str	r3, [r7, #32]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	da00      	bge.n	8009bfa <MPU9250_calibrateMPU9250+0x45e>
 8009bf8:	3307      	adds	r3, #7
 8009bfa:	10db      	asrs	r3, r3, #3
 8009bfc:	425b      	negs	r3, r3
 8009bfe:	4413      	add	r3, r2
 8009c00:	627b      	str	r3, [r7, #36]	; 0x24

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	121b      	asrs	r3, r3, #8
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8009c14:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8009c18:	7e3b      	ldrb	r3, [r7, #24]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	121b      	asrs	r3, r3, #8
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8009c34:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8009c38:	7e7b      	ldrb	r3, [r7, #25]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	121b      	asrs	r3, r3, #8
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8009c54:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8009c58:	7ebb      	ldrb	r3, [r7, #26]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
  writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
*/
// Output scaled accelerometer biases for manual subtraction in the main program
    obj->accelBias[0] = (float)accel_bias[0]/(float)MPU9250_accelsensitivity;
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c6c:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 8009b8c <MPU9250_calibrateMPU9250+0x3f0>
 8009c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    obj->accelBias[1] = (float)accel_bias[1]/(float)MPU9250_accelsensitivity;
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	ee07 3a90 	vmov	s15, r3
 8009c84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c88:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8009b8c <MPU9250_calibrateMPU9250+0x3f0>
 8009c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    obj->accelBias[2] = (float)accel_bias[2]/(float)MPU9250_accelsensitivity;
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ca4:	ed5f 7a47 	vldr	s15, [pc, #-284]	; 8009b8c <MPU9250_calibrateMPU9250+0x3f0>
 8009ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8009cb6:	bf00      	nop
 8009cb8:	3758      	adds	r7, #88	; 0x58
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop

08009cc0 <MadgwickAHRSupdateIMU>:
//---------------------------------------------------------------------------------------------------
// Variable definitions

volatile float beta = betaDef;

void MadgwickAHRSupdateIMU(struct estimate* e, float gx, float gy, float gz, float ax, float ay, float az , float dt) { // dt : second
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b0a2      	sub	sp, #136	; 0x88
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	61f8      	str	r0, [r7, #28]
 8009cc8:	ed87 0a06 	vstr	s0, [r7, #24]
 8009ccc:	edc7 0a05 	vstr	s1, [r7, #20]
 8009cd0:	ed87 1a04 	vstr	s2, [r7, #16]
 8009cd4:	edc7 1a03 	vstr	s3, [r7, #12]
 8009cd8:	ed87 2a02 	vstr	s4, [r7, #8]
 8009cdc:	edc7 2a01 	vstr	s5, [r7, #4]
 8009ce0:	ed87 3a00 	vstr	s6, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float q0 = e->bodyQ[0];
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	677b      	str	r3, [r7, #116]	; 0x74
	float q1 = e->bodyQ[1];
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	673b      	str	r3, [r7, #112]	; 0x70
	float q2 = e->bodyQ[2];
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
	float q3 = e->bodyQ[3];
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	66bb      	str	r3, [r7, #104]	; 0x68

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8009cfc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009d00:	eeb1 7a67 	vneg.f32	s14, s15
 8009d04:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d0c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009d10:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d1c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d34:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8009d38:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009d3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d44:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d54:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009d58:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d6c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8009d70:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009d74:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d7c:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8009d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d8c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8009d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009da4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8009da8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8009db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009db4:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8009db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dc4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009dc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ddc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8009de0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009de4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dec:	d10e      	bne.n	8009e0c <MadgwickAHRSupdateIMU+0x14c>
 8009dee:	edd7 7a02 	vldr	s15, [r7, #8]
 8009df2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	d107      	bne.n	8009e0c <MadgwickAHRSupdateIMU+0x14c>
 8009dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e08:	f000 81d4 	beq.w	800a1b4 <MadgwickAHRSupdateIMU+0x4f4>
		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8009e0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e18:	edd7 6a02 	vldr	s13, [r7, #8]
 8009e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e28:	edd7 6a01 	vldr	s13, [r7, #4]
 8009e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e38:	eeb0 0a67 	vmov.f32	s0, s15
 8009e3c:	f7f7 f894 	bl	8000f68 <invSqrt>
 8009e40:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 8009e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e48:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e50:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8009e54:	ed97 7a02 	vldr	s14, [r7, #8]
 8009e58:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e60:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8009e64:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e68:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e70:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8009e74:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009e78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e7c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8009e80:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009e84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e88:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8009e8c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009e90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e94:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8009e98:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009e9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ea0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8009ea4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009ea8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009eb0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8009eb4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009eb8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ec0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8009ec4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009ec8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ed0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 8009ed4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009ed8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ee0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 8009ee4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009ee8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ef0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 8009ef4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009ef8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f00:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8009f04:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009f08:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f10:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8009f14:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8009f18:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f20:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8009f24:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8009f28:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f30:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8009f34:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f40:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8009f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f50:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8009f54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f60:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8009f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8009f74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f80:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8009f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f90:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f94:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009f98:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009f9c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fa8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8009fac:	edd7 7a02 	vldr	s15, [r7, #8]
 8009fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fb8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fc0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8009fc4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fd0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8009fd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fe0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8009fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ff0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8009ff4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ff8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ffc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a000:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a004:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a008:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800a00c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a014:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a018:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a01c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a024:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a028:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a02c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a034:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a038:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a03c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a040:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a044:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a04c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a050:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a054:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a05c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a060:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a064:	edd7 7a01 	vldr	s15, [r7, #4]
 800a068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a06c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a070:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800a074:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a078:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a07c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a080:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a084:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a088:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a08c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a094:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a098:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a09c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a0a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a0a4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a0a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0b0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a0b4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0c0:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800a0c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a0c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a0cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a0d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a0e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0f0:	edd7 6a08 	vldr	s13, [r7, #32]
 800a0f4:	edd7 7a08 	vldr	s15, [r7, #32]
 800a0f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a100:	eeb0 0a67 	vmov.f32	s0, s15
 800a104:	f7f6 ff30 	bl	8000f68 <invSqrt>
 800a108:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 800a10c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a110:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a114:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a118:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 800a11c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a120:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a128:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 800a12c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a130:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a138:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 800a13c:	ed97 7a08 	vldr	s14, [r7, #32]
 800a140:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a144:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a148:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 800a14c:	4b5b      	ldr	r3, [pc, #364]	; (800a2bc <MadgwickAHRSupdateIMU+0x5fc>)
 800a14e:	ed93 7a00 	vldr	s14, [r3]
 800a152:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a15a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a162:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 800a166:	4b55      	ldr	r3, [pc, #340]	; (800a2bc <MadgwickAHRSupdateIMU+0x5fc>)
 800a168:	ed93 7a00 	vldr	s14, [r3]
 800a16c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a174:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a17c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 800a180:	4b4e      	ldr	r3, [pc, #312]	; (800a2bc <MadgwickAHRSupdateIMU+0x5fc>)
 800a182:	ed93 7a00 	vldr	s14, [r3]
 800a186:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a192:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a196:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 800a19a:	4b48      	ldr	r3, [pc, #288]	; (800a2bc <MadgwickAHRSupdateIMU+0x5fc>)
 800a19c:	ed93 7a00 	vldr	s14, [r3]
 800a1a0:	edd7 7a08 	vldr	s15, [r7, #32]
 800a1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a1ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
//	q0 += qDot1 * (1.0f / sampleFreq);
//	q1 += qDot2 * (1.0f / sampleFreq);
//	q2 += qDot3 * (1.0f / sampleFreq);
//	q3 += qDot4 * (1.0f / sampleFreq);

	q0 += qDot1 * (dt);
 800a1b4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a1b8:	edd7 7a00 	vldr	s15, [r7]
 800a1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a1c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1c8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 += qDot2 * (dt);
 800a1cc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a1d0:	edd7 7a00 	vldr	s15, [r7]
 800a1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a1dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1e0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 += qDot3 * (dt);
 800a1e4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a1e8:	edd7 7a00 	vldr	s15, [r7]
 800a1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a1f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1f8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 += qDot4 * (dt);
 800a1fc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a200:	edd7 7a00 	vldr	s15, [r7]
 800a204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a208:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a20c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a210:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800a214:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a218:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a21c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a220:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a224:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a22c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a230:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800a234:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a23c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a240:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a244:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a24c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a250:	eeb0 0a67 	vmov.f32	s0, s15
 800a254:	f7f6 fe88 	bl	8000f68 <invSqrt>
 800a258:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 800a25c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a260:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a268:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q1 *= recipNorm;
 800a26c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a270:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a274:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a278:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q2 *= recipNorm;
 800a27c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a280:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a288:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q3 *= recipNorm;
 800a28c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a290:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a294:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a298:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


	e->bodyQ[0] = q0;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a2a0:	601a      	str	r2, [r3, #0]
	e->bodyQ[1] = q1;
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a2a6:	605a      	str	r2, [r3, #4]
	e->bodyQ[2] = q2;
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2ac:	609a      	str	r2, [r3, #8]
	e->bodyQ[3] = q3;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2b2:	60da      	str	r2, [r3, #12]
}
 800a2b4:	bf00      	nop
 800a2b6:	3788      	adds	r7, #136	; 0x88
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000034 	.word	0x20000034

0800a2c0 <sbus_start>:

uint8_t sbus_rxBuf[SBUS_BUF_SIZE];
uint16_t sbus_rcValue[SBUS_CHANNEL_NUMBER];
uint16_t sbus_comp_rcValue[SBUS_CHANNEL_NUMBER];

void sbus_start(UART_HandleTypeDef *huart) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart, sbus_rxBuf, SBUS_BUF_SIZE);
 800a2c8:	2219      	movs	r2, #25
 800a2ca:	4904      	ldr	r1, [pc, #16]	; (800a2dc <sbus_start+0x1c>)
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7fd fd11 	bl	8007cf4 <HAL_UART_Receive_DMA>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200009e0 	.word	0x200009e0

0800a2e0 <sbus_callback>:

void sbus_callback() { // input to HAL_UART_RxCpltCallback
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
	sbus_rcValue[0] = ((uint16_t)sbus_rxBuf[1] >> 0 | ((uint16_t)sbus_rxBuf[2] << 8)) & 0x07FF;
 800a2e6:	4b95      	ldr	r3, [pc, #596]	; (800a53c <sbus_callback+0x25c>)
 800a2e8:	785b      	ldrb	r3, [r3, #1]
 800a2ea:	b21a      	sxth	r2, r3
 800a2ec:	4b93      	ldr	r3, [pc, #588]	; (800a53c <sbus_callback+0x25c>)
 800a2ee:	789b      	ldrb	r3, [r3, #2]
 800a2f0:	021b      	lsls	r3, r3, #8
 800a2f2:	b21b      	sxth	r3, r3
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	b21b      	sxth	r3, r3
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	4b8f      	ldr	r3, [pc, #572]	; (800a540 <sbus_callback+0x260>)
 800a302:	801a      	strh	r2, [r3, #0]
	sbus_rcValue[1] = ((uint16_t)sbus_rxBuf[2] >> 3 | ((uint16_t)sbus_rxBuf[3] << 5)) & 0x07FF;
 800a304:	4b8d      	ldr	r3, [pc, #564]	; (800a53c <sbus_callback+0x25c>)
 800a306:	789b      	ldrb	r3, [r3, #2]
 800a308:	08db      	lsrs	r3, r3, #3
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	b21a      	sxth	r2, r3
 800a30e:	4b8b      	ldr	r3, [pc, #556]	; (800a53c <sbus_callback+0x25c>)
 800a310:	78db      	ldrb	r3, [r3, #3]
 800a312:	015b      	lsls	r3, r3, #5
 800a314:	b21b      	sxth	r3, r3
 800a316:	4313      	orrs	r3, r2
 800a318:	b21b      	sxth	r3, r3
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a320:	b29a      	uxth	r2, r3
 800a322:	4b87      	ldr	r3, [pc, #540]	; (800a540 <sbus_callback+0x260>)
 800a324:	805a      	strh	r2, [r3, #2]
	sbus_rcValue[2] = ((uint16_t)sbus_rxBuf[3] >> 6 | ((uint16_t)sbus_rxBuf[4] << 2) | (uint16_t)sbus_rxBuf[5] << 10) & 0x07FF;
 800a326:	4b85      	ldr	r3, [pc, #532]	; (800a53c <sbus_callback+0x25c>)
 800a328:	78db      	ldrb	r3, [r3, #3]
 800a32a:	099b      	lsrs	r3, r3, #6
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	b21a      	sxth	r2, r3
 800a330:	4b82      	ldr	r3, [pc, #520]	; (800a53c <sbus_callback+0x25c>)
 800a332:	791b      	ldrb	r3, [r3, #4]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	b21b      	sxth	r3, r3
 800a338:	4313      	orrs	r3, r2
 800a33a:	b21a      	sxth	r2, r3
 800a33c:	4b7f      	ldr	r3, [pc, #508]	; (800a53c <sbus_callback+0x25c>)
 800a33e:	795b      	ldrb	r3, [r3, #5]
 800a340:	029b      	lsls	r3, r3, #10
 800a342:	b21b      	sxth	r3, r3
 800a344:	4313      	orrs	r3, r2
 800a346:	b21b      	sxth	r3, r3
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a34e:	b29a      	uxth	r2, r3
 800a350:	4b7b      	ldr	r3, [pc, #492]	; (800a540 <sbus_callback+0x260>)
 800a352:	809a      	strh	r2, [r3, #4]
	sbus_rcValue[3] = ((uint16_t)sbus_rxBuf[5] >> 1 | ((uint16_t)sbus_rxBuf[6] << 7)) & 0x07FF;
 800a354:	4b79      	ldr	r3, [pc, #484]	; (800a53c <sbus_callback+0x25c>)
 800a356:	795b      	ldrb	r3, [r3, #5]
 800a358:	085b      	lsrs	r3, r3, #1
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	b21a      	sxth	r2, r3
 800a35e:	4b77      	ldr	r3, [pc, #476]	; (800a53c <sbus_callback+0x25c>)
 800a360:	799b      	ldrb	r3, [r3, #6]
 800a362:	01db      	lsls	r3, r3, #7
 800a364:	b21b      	sxth	r3, r3
 800a366:	4313      	orrs	r3, r2
 800a368:	b21b      	sxth	r3, r3
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a370:	b29a      	uxth	r2, r3
 800a372:	4b73      	ldr	r3, [pc, #460]	; (800a540 <sbus_callback+0x260>)
 800a374:	80da      	strh	r2, [r3, #6]
	sbus_rcValue[4] = ((uint16_t)sbus_rxBuf[6] >> 4 | ((uint16_t)sbus_rxBuf[7] << 4)) & 0x07FF;
 800a376:	4b71      	ldr	r3, [pc, #452]	; (800a53c <sbus_callback+0x25c>)
 800a378:	799b      	ldrb	r3, [r3, #6]
 800a37a:	091b      	lsrs	r3, r3, #4
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	b21a      	sxth	r2, r3
 800a380:	4b6e      	ldr	r3, [pc, #440]	; (800a53c <sbus_callback+0x25c>)
 800a382:	79db      	ldrb	r3, [r3, #7]
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	b21b      	sxth	r3, r3
 800a388:	4313      	orrs	r3, r2
 800a38a:	b21b      	sxth	r3, r3
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a392:	b29a      	uxth	r2, r3
 800a394:	4b6a      	ldr	r3, [pc, #424]	; (800a540 <sbus_callback+0x260>)
 800a396:	811a      	strh	r2, [r3, #8]
	sbus_rcValue[5] = ((uint16_t)sbus_rxBuf[7] >> 7 | ((uint16_t)sbus_rxBuf[8] << 1) | (uint16_t)sbus_rxBuf[9] << 9) & 0x07FF;
 800a398:	4b68      	ldr	r3, [pc, #416]	; (800a53c <sbus_callback+0x25c>)
 800a39a:	79db      	ldrb	r3, [r3, #7]
 800a39c:	09db      	lsrs	r3, r3, #7
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	b21a      	sxth	r2, r3
 800a3a2:	4b66      	ldr	r3, [pc, #408]	; (800a53c <sbus_callback+0x25c>)
 800a3a4:	7a1b      	ldrb	r3, [r3, #8]
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	b21b      	sxth	r3, r3
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	b21a      	sxth	r2, r3
 800a3ae:	4b63      	ldr	r3, [pc, #396]	; (800a53c <sbus_callback+0x25c>)
 800a3b0:	7a5b      	ldrb	r3, [r3, #9]
 800a3b2:	025b      	lsls	r3, r3, #9
 800a3b4:	b21b      	sxth	r3, r3
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	b21b      	sxth	r3, r3
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	4b5f      	ldr	r3, [pc, #380]	; (800a540 <sbus_callback+0x260>)
 800a3c4:	815a      	strh	r2, [r3, #10]
	sbus_rcValue[6] = ((uint16_t)sbus_rxBuf[9] >> 2 | ((uint16_t)sbus_rxBuf[10] << 6)) & 0x07FF;
 800a3c6:	4b5d      	ldr	r3, [pc, #372]	; (800a53c <sbus_callback+0x25c>)
 800a3c8:	7a5b      	ldrb	r3, [r3, #9]
 800a3ca:	089b      	lsrs	r3, r3, #2
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	b21a      	sxth	r2, r3
 800a3d0:	4b5a      	ldr	r3, [pc, #360]	; (800a53c <sbus_callback+0x25c>)
 800a3d2:	7a9b      	ldrb	r3, [r3, #10]
 800a3d4:	019b      	lsls	r3, r3, #6
 800a3d6:	b21b      	sxth	r3, r3
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	b21b      	sxth	r3, r3
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	4b56      	ldr	r3, [pc, #344]	; (800a540 <sbus_callback+0x260>)
 800a3e6:	819a      	strh	r2, [r3, #12]
	sbus_rcValue[7] = ((uint16_t)sbus_rxBuf[10] >> 5 | ((uint16_t)sbus_rxBuf[11] << 3)) & 0x07FF;
 800a3e8:	4b54      	ldr	r3, [pc, #336]	; (800a53c <sbus_callback+0x25c>)
 800a3ea:	7a9b      	ldrb	r3, [r3, #10]
 800a3ec:	095b      	lsrs	r3, r3, #5
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	b21a      	sxth	r2, r3
 800a3f2:	4b52      	ldr	r3, [pc, #328]	; (800a53c <sbus_callback+0x25c>)
 800a3f4:	7adb      	ldrb	r3, [r3, #11]
 800a3f6:	00db      	lsls	r3, r3, #3
 800a3f8:	b21b      	sxth	r3, r3
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	b21b      	sxth	r3, r3
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a404:	b29a      	uxth	r2, r3
 800a406:	4b4e      	ldr	r3, [pc, #312]	; (800a540 <sbus_callback+0x260>)
 800a408:	81da      	strh	r2, [r3, #14]

	sbus_rcValue[8] = ((uint16_t)sbus_rxBuf[12] << 0 | ((uint16_t)sbus_rxBuf[13] << 8)) & 0x07FF;
 800a40a:	4b4c      	ldr	r3, [pc, #304]	; (800a53c <sbus_callback+0x25c>)
 800a40c:	7b1b      	ldrb	r3, [r3, #12]
 800a40e:	b21a      	sxth	r2, r3
 800a410:	4b4a      	ldr	r3, [pc, #296]	; (800a53c <sbus_callback+0x25c>)
 800a412:	7b5b      	ldrb	r3, [r3, #13]
 800a414:	021b      	lsls	r3, r3, #8
 800a416:	b21b      	sxth	r3, r3
 800a418:	4313      	orrs	r3, r2
 800a41a:	b21b      	sxth	r3, r3
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a422:	b29a      	uxth	r2, r3
 800a424:	4b46      	ldr	r3, [pc, #280]	; (800a540 <sbus_callback+0x260>)
 800a426:	821a      	strh	r2, [r3, #16]
	sbus_rcValue[9] = ((uint16_t)sbus_rxBuf[13] >> 3 | ((uint16_t)sbus_rxBuf[14] << 5)) & 0x07FF;
 800a428:	4b44      	ldr	r3, [pc, #272]	; (800a53c <sbus_callback+0x25c>)
 800a42a:	7b5b      	ldrb	r3, [r3, #13]
 800a42c:	08db      	lsrs	r3, r3, #3
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	b21a      	sxth	r2, r3
 800a432:	4b42      	ldr	r3, [pc, #264]	; (800a53c <sbus_callback+0x25c>)
 800a434:	7b9b      	ldrb	r3, [r3, #14]
 800a436:	015b      	lsls	r3, r3, #5
 800a438:	b21b      	sxth	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b21b      	sxth	r3, r3
 800a43e:	b29b      	uxth	r3, r3
 800a440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a444:	b29a      	uxth	r2, r3
 800a446:	4b3e      	ldr	r3, [pc, #248]	; (800a540 <sbus_callback+0x260>)
 800a448:	825a      	strh	r2, [r3, #18]
	sbus_rcValue[10] = ((uint16_t)sbus_rxBuf[14] >> 6 | ((uint16_t)sbus_rxBuf[15] << 2) | (uint16_t)sbus_rxBuf[16] << 10) & 0x07FF;
 800a44a:	4b3c      	ldr	r3, [pc, #240]	; (800a53c <sbus_callback+0x25c>)
 800a44c:	7b9b      	ldrb	r3, [r3, #14]
 800a44e:	099b      	lsrs	r3, r3, #6
 800a450:	b2db      	uxtb	r3, r3
 800a452:	b21a      	sxth	r2, r3
 800a454:	4b39      	ldr	r3, [pc, #228]	; (800a53c <sbus_callback+0x25c>)
 800a456:	7bdb      	ldrb	r3, [r3, #15]
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	b21b      	sxth	r3, r3
 800a45c:	4313      	orrs	r3, r2
 800a45e:	b21a      	sxth	r2, r3
 800a460:	4b36      	ldr	r3, [pc, #216]	; (800a53c <sbus_callback+0x25c>)
 800a462:	7c1b      	ldrb	r3, [r3, #16]
 800a464:	029b      	lsls	r3, r3, #10
 800a466:	b21b      	sxth	r3, r3
 800a468:	4313      	orrs	r3, r2
 800a46a:	b21b      	sxth	r3, r3
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a472:	b29a      	uxth	r2, r3
 800a474:	4b32      	ldr	r3, [pc, #200]	; (800a540 <sbus_callback+0x260>)
 800a476:	829a      	strh	r2, [r3, #20]
	sbus_rcValue[11] = ((uint16_t)sbus_rxBuf[16] >> 1 | ((uint16_t)sbus_rxBuf[17] << 7)) & 0x07FF;
 800a478:	4b30      	ldr	r3, [pc, #192]	; (800a53c <sbus_callback+0x25c>)
 800a47a:	7c1b      	ldrb	r3, [r3, #16]
 800a47c:	085b      	lsrs	r3, r3, #1
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	b21a      	sxth	r2, r3
 800a482:	4b2e      	ldr	r3, [pc, #184]	; (800a53c <sbus_callback+0x25c>)
 800a484:	7c5b      	ldrb	r3, [r3, #17]
 800a486:	01db      	lsls	r3, r3, #7
 800a488:	b21b      	sxth	r3, r3
 800a48a:	4313      	orrs	r3, r2
 800a48c:	b21b      	sxth	r3, r3
 800a48e:	b29b      	uxth	r3, r3
 800a490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a494:	b29a      	uxth	r2, r3
 800a496:	4b2a      	ldr	r3, [pc, #168]	; (800a540 <sbus_callback+0x260>)
 800a498:	82da      	strh	r2, [r3, #22]
	sbus_rcValue[12] = ((uint16_t)sbus_rxBuf[17] >> 4 | ((uint16_t)sbus_rxBuf[18] << 4)) & 0x07FF;
 800a49a:	4b28      	ldr	r3, [pc, #160]	; (800a53c <sbus_callback+0x25c>)
 800a49c:	7c5b      	ldrb	r3, [r3, #17]
 800a49e:	091b      	lsrs	r3, r3, #4
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	b21a      	sxth	r2, r3
 800a4a4:	4b25      	ldr	r3, [pc, #148]	; (800a53c <sbus_callback+0x25c>)
 800a4a6:	7c9b      	ldrb	r3, [r3, #18]
 800a4a8:	011b      	lsls	r3, r3, #4
 800a4aa:	b21b      	sxth	r3, r3
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b21b      	sxth	r3, r3
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	4b21      	ldr	r3, [pc, #132]	; (800a540 <sbus_callback+0x260>)
 800a4ba:	831a      	strh	r2, [r3, #24]
	sbus_rcValue[13] = ((uint16_t)sbus_rxBuf[18] >> 7 | ((uint16_t)sbus_rxBuf[19] << 1) | (uint16_t)sbus_rxBuf[21] << 9) & 0x07FF;
 800a4bc:	4b1f      	ldr	r3, [pc, #124]	; (800a53c <sbus_callback+0x25c>)
 800a4be:	7c9b      	ldrb	r3, [r3, #18]
 800a4c0:	09db      	lsrs	r3, r3, #7
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	b21a      	sxth	r2, r3
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	; (800a53c <sbus_callback+0x25c>)
 800a4c8:	7cdb      	ldrb	r3, [r3, #19]
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	b21b      	sxth	r3, r3
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	b21a      	sxth	r2, r3
 800a4d2:	4b1a      	ldr	r3, [pc, #104]	; (800a53c <sbus_callback+0x25c>)
 800a4d4:	7d5b      	ldrb	r3, [r3, #21]
 800a4d6:	025b      	lsls	r3, r3, #9
 800a4d8:	b21b      	sxth	r3, r3
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	b21b      	sxth	r3, r3
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	4b16      	ldr	r3, [pc, #88]	; (800a540 <sbus_callback+0x260>)
 800a4e8:	835a      	strh	r2, [r3, #26]
	sbus_rcValue[14] = ((uint16_t)sbus_rxBuf[20] >> 2 | ((uint16_t)sbus_rxBuf[21] << 6)) & 0x07FF;
 800a4ea:	4b14      	ldr	r3, [pc, #80]	; (800a53c <sbus_callback+0x25c>)
 800a4ec:	7d1b      	ldrb	r3, [r3, #20]
 800a4ee:	089b      	lsrs	r3, r3, #2
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	b21a      	sxth	r2, r3
 800a4f4:	4b11      	ldr	r3, [pc, #68]	; (800a53c <sbus_callback+0x25c>)
 800a4f6:	7d5b      	ldrb	r3, [r3, #21]
 800a4f8:	019b      	lsls	r3, r3, #6
 800a4fa:	b21b      	sxth	r3, r3
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	b21b      	sxth	r3, r3
 800a500:	b29b      	uxth	r3, r3
 800a502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a506:	b29a      	uxth	r2, r3
 800a508:	4b0d      	ldr	r3, [pc, #52]	; (800a540 <sbus_callback+0x260>)
 800a50a:	839a      	strh	r2, [r3, #28]
	sbus_rcValue[15] = ((uint16_t)sbus_rxBuf[21] >> 5 | ((uint16_t)sbus_rxBuf[22] << 3)) & 0x07FF;
 800a50c:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <sbus_callback+0x25c>)
 800a50e:	7d5b      	ldrb	r3, [r3, #21]
 800a510:	095b      	lsrs	r3, r3, #5
 800a512:	b2db      	uxtb	r3, r3
 800a514:	b21a      	sxth	r2, r3
 800a516:	4b09      	ldr	r3, [pc, #36]	; (800a53c <sbus_callback+0x25c>)
 800a518:	7d9b      	ldrb	r3, [r3, #22]
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	b21b      	sxth	r3, r3
 800a51e:	4313      	orrs	r3, r2
 800a520:	b21b      	sxth	r3, r3
 800a522:	b29b      	uxth	r3, r3
 800a524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a528:	b29a      	uxth	r2, r3
 800a52a:	4b05      	ldr	r3, [pc, #20]	; (800a540 <sbus_callback+0x260>)
 800a52c:	83da      	strh	r2, [r3, #30]

	if (((uint16_t)sbus_rxBuf[23]) & 0x0001)       sbus_rcValue[16] = 2000; else sbus_rcValue[16] = 1000;
 800a52e:	4b03      	ldr	r3, [pc, #12]	; (800a53c <sbus_callback+0x25c>)
 800a530:	7ddb      	ldrb	r3, [r3, #23]
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d009      	beq.n	800a54e <sbus_callback+0x26e>
 800a53a:	e003      	b.n	800a544 <sbus_callback+0x264>
 800a53c:	200009e0 	.word	0x200009e0
 800a540:	20000998 	.word	0x20000998
 800a544:	4b1e      	ldr	r3, [pc, #120]	; (800a5c0 <sbus_callback+0x2e0>)
 800a546:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a54a:	841a      	strh	r2, [r3, #32]
 800a54c:	e003      	b.n	800a556 <sbus_callback+0x276>
 800a54e:	4b1c      	ldr	r3, [pc, #112]	; (800a5c0 <sbus_callback+0x2e0>)
 800a550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a554:	841a      	strh	r2, [r3, #32]
	if (((uint16_t)sbus_rxBuf[23] >> 1) & 0x0001)  sbus_rcValue[17] = 2000; else sbus_rcValue[17] = 1000;
 800a556:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <sbus_callback+0x2e4>)
 800a558:	7ddb      	ldrb	r3, [r3, #23]
 800a55a:	085b      	lsrs	r3, r3, #1
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d004      	beq.n	800a570 <sbus_callback+0x290>
 800a566:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <sbus_callback+0x2e0>)
 800a568:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a56c:	845a      	strh	r2, [r3, #34]	; 0x22
 800a56e:	e003      	b.n	800a578 <sbus_callback+0x298>
 800a570:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <sbus_callback+0x2e0>)
 800a572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a576:	845a      	strh	r2, [r3, #34]	; 0x22

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a578:	2300      	movs	r3, #0
 800a57a:	607b      	str	r3, [r7, #4]
 800a57c:	e016      	b.n	800a5ac <sbus_callback+0x2cc>
		sbus_comp_rcValue[i] = (sbus_rcValue[i]) * 5 / 8 + 880;
 800a57e:	4a10      	ldr	r2, [pc, #64]	; (800a5c0 <sbus_callback+0x2e0>)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a586:	461a      	mov	r2, r3
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	da00      	bge.n	800a594 <sbus_callback+0x2b4>
 800a592:	3307      	adds	r3, #7
 800a594:	10db      	asrs	r3, r3, #3
 800a596:	b29b      	uxth	r3, r3
 800a598:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800a59c:	b299      	uxth	r1, r3
 800a59e:	4a0a      	ldr	r2, [pc, #40]	; (800a5c8 <sbus_callback+0x2e8>)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	607b      	str	r3, [r7, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b11      	cmp	r3, #17
 800a5b0:	dde5      	ble.n	800a57e <sbus_callback+0x29e>
	}
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	20000998 	.word	0x20000998
 800a5c4:	200009e0 	.word	0x200009e0
 800a5c8:	200009bc 	.word	0x200009bc

0800a5cc <sbus_print>:

void sbus_print() {
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	607b      	str	r3, [r7, #4]
 800a5d6:	e00a      	b.n	800a5ee <sbus_print+0x22>
		printf("%d \t", sbus_comp_rcValue[i]);
 800a5d8:	4a0a      	ldr	r2, [pc, #40]	; (800a604 <sbus_print+0x38>)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4809      	ldr	r0, [pc, #36]	; (800a608 <sbus_print+0x3c>)
 800a5e4:	f000 fe66 	bl	800b2b4 <iprintf>
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	607b      	str	r3, [r7, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b11      	cmp	r3, #17
 800a5f2:	ddf1      	ble.n	800a5d8 <sbus_print+0xc>
	}
	printf("\r\n");
 800a5f4:	4805      	ldr	r0, [pc, #20]	; (800a60c <sbus_print+0x40>)
 800a5f6:	f000 fed1 	bl	800b39c <puts>
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200009bc 	.word	0x200009bc
 800a608:	0800d110 	.word	0x0800d110
 800a60c:	0800d118 	.word	0x0800d118

0800a610 <_write>:
__IO ITStatus flagMpu = RESET;
__IO ITStatus flagControl = RESET;

//we can use printf
int _write(int file, unsigned char* p, int len) // for debug through uart3
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	b29a      	uxth	r2, r3
 800a620:	230a      	movs	r3, #10
 800a622:	68b9      	ldr	r1, [r7, #8]
 800a624:	4803      	ldr	r0, [pc, #12]	; (800a634 <_write+0x24>)
 800a626:	f7fd facc 	bl	8007bc2 <HAL_UART_Transmit>
	return len;
 800a62a:	687b      	ldr	r3, [r7, #4]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	200004ac 	.word	0x200004ac

0800a638 <userMain>:

void userMain(){
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	ed2d 8b04 	vpush	{d8-d9}
 800a640:	af00      	add	r7, sp, #0
    setvbuf(stdout, NULL, _IONBF, 0);
 800a642:	4b45      	ldr	r3, [pc, #276]	; (800a758 <userMain+0x120>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6898      	ldr	r0, [r3, #8]
 800a648:	2300      	movs	r3, #0
 800a64a:	2202      	movs	r2, #2
 800a64c:	2100      	movs	r1, #0
 800a64e:	f000 febd 	bl	800b3cc <setvbuf>

    MPU9250_init(&iMPU9250, &hi2c1);
 800a652:	4942      	ldr	r1, [pc, #264]	; (800a75c <userMain+0x124>)
 800a654:	4842      	ldr	r0, [pc, #264]	; (800a760 <userMain+0x128>)
 800a656:	f7fe fd23 	bl	80090a0 <MPU9250_init>

    sbus_start(&huart7);
 800a65a:	4842      	ldr	r0, [pc, #264]	; (800a764 <userMain+0x12c>)
 800a65c:	f7ff fe30 	bl	800a2c0 <sbus_start>

    HAL_TIM_Base_Start_IT(&htim11); // start mpu9250 it
 800a660:	4841      	ldr	r0, [pc, #260]	; (800a768 <userMain+0x130>)
 800a662:	f7fc fbe0 	bl	8006e26 <HAL_TIM_Base_Start_IT>

	while(1){
		if(iMPU9250.itSet == SET){
 800a666:	4b3e      	ldr	r3, [pc, #248]	; (800a760 <userMain+0x128>)
 800a668:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d1f9      	bne.n	800a666 <userMain+0x2e>
			static struct junTimer timer = {0,};
			if(timer.start){
 800a672:	4b3e      	ldr	r3, [pc, #248]	; (800a76c <userMain+0x134>)
 800a674:	791b      	ldrb	r3, [r3, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d05f      	beq.n	800a73a <userMain+0x102>
				MadgwickAHRSupdateIMU(&iEstimate, iMPU9250.gx*DEG2PI, iMPU9250.gy*DEG2PI, iMPU9250.gz*DEG2PI
 800a67a:	4b39      	ldr	r3, [pc, #228]	; (800a760 <userMain+0x128>)
 800a67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67e:	4618      	mov	r0, r3
 800a680:	f7f5 ff72 	bl	8000568 <__aeabi_f2d>
 800a684:	a332      	add	r3, pc, #200	; (adr r3, 800a750 <userMain+0x118>)
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	f7f5 ffc5 	bl	8000618 <__aeabi_dmul>
 800a68e:	4603      	mov	r3, r0
 800a690:	460c      	mov	r4, r1
 800a692:	4618      	mov	r0, r3
 800a694:	4621      	mov	r1, r4
 800a696:	f7f6 fa97 	bl	8000bc8 <__aeabi_d2f>
 800a69a:	4605      	mov	r5, r0
 800a69c:	4b30      	ldr	r3, [pc, #192]	; (800a760 <userMain+0x128>)
 800a69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7f5 ff61 	bl	8000568 <__aeabi_f2d>
 800a6a6:	a32a      	add	r3, pc, #168	; (adr r3, 800a750 <userMain+0x118>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f7f5 ffb4 	bl	8000618 <__aeabi_dmul>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	f7f6 fa86 	bl	8000bc8 <__aeabi_d2f>
 800a6bc:	4606      	mov	r6, r0
 800a6be:	4b28      	ldr	r3, [pc, #160]	; (800a760 <userMain+0x128>)
 800a6c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f5 ff50 	bl	8000568 <__aeabi_f2d>
 800a6c8:	a321      	add	r3, pc, #132	; (adr r3, 800a750 <userMain+0x118>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 ffa3 	bl	8000618 <__aeabi_dmul>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	4621      	mov	r1, r4
 800a6da:	f7f6 fa75 	bl	8000bc8 <__aeabi_d2f>
 800a6de:	4680      	mov	r8, r0
 800a6e0:	4b1f      	ldr	r3, [pc, #124]	; (800a760 <userMain+0x128>)
 800a6e2:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 800a6e6:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <userMain+0x128>)
 800a6e8:	edd3 8a14 	vldr	s17, [r3, #80]	; 0x50
 800a6ec:	4b1c      	ldr	r3, [pc, #112]	; (800a760 <userMain+0x128>)
 800a6ee:	ed93 9a15 	vldr	s18, [r3, #84]	; 0x54
									, iMPU9250.ax, iMPU9250.ay, iMPU9250.az, junTimer_toc(&timer)/1000.0);
 800a6f2:	481e      	ldr	r0, [pc, #120]	; (800a76c <userMain+0x134>)
 800a6f4:	f7f6 fc84 	bl	8001000 <junTimer_toc>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7f5 ff12 	bl	8000524 <__aeabi_ui2d>
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	4b1a      	ldr	r3, [pc, #104]	; (800a770 <userMain+0x138>)
 800a706:	f7f6 f8b1 	bl	800086c <__aeabi_ddiv>
 800a70a:	4603      	mov	r3, r0
 800a70c:	460c      	mov	r4, r1
				MadgwickAHRSupdateIMU(&iEstimate, iMPU9250.gx*DEG2PI, iMPU9250.gy*DEG2PI, iMPU9250.gz*DEG2PI
 800a70e:	4618      	mov	r0, r3
 800a710:	4621      	mov	r1, r4
 800a712:	f7f6 fa59 	bl	8000bc8 <__aeabi_d2f>
 800a716:	4603      	mov	r3, r0
 800a718:	ee03 3a10 	vmov	s6, r3
 800a71c:	eef0 2a49 	vmov.f32	s5, s18
 800a720:	eeb0 2a68 	vmov.f32	s4, s17
 800a724:	eef0 1a48 	vmov.f32	s3, s16
 800a728:	ee01 8a10 	vmov	s2, r8
 800a72c:	ee00 6a90 	vmov	s1, r6
 800a730:	ee00 5a10 	vmov	s0, r5
 800a734:	480f      	ldr	r0, [pc, #60]	; (800a774 <userMain+0x13c>)
 800a736:	f7ff fac3 	bl	8009cc0 <MadgwickAHRSupdateIMU>
			}

			junTimer_tic(&timer);
 800a73a:	480c      	ldr	r0, [pc, #48]	; (800a76c <userMain+0x134>)
 800a73c:	f7f6 fc50 	bl	8000fe0 <junTimer_tic>
			iMPU9250.itSet = RESET;
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <userMain+0x128>)
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

//			printf("%f %f %f %f\r\n", iEstimate.bodyQ[0], iEstimate.bodyQ[1], iEstimate.bodyQ[2], iEstimate.bodyQ[3]);
			sbus_print();
 800a748:	f7ff ff40 	bl	800a5cc <sbus_print>
		if(iMPU9250.itSet == SET){
 800a74c:	e78b      	b.n	800a666 <userMain+0x2e>
 800a74e:	bf00      	nop
 800a750:	a226e211 	.word	0xa226e211
 800a754:	3f91df46 	.word	0x3f91df46
 800a758:	20000038 	.word	0x20000038
 800a75c:	20000318 	.word	0x20000318
 800a760:	20000228 	.word	0x20000228
 800a764:	2000046c 	.word	0x2000046c
 800a768:	2000042c 	.word	0x2000042c
 800a76c:	200002c0 	.word	0x200002c0
 800a770:	408f4000 	.word	0x408f4000
 800a774:	2000000c 	.word	0x2000000c

0800a778 <HAL_I2C_MemRxCpltCallback>:
}



//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
	//mpu9250
	if(hi2c->Instance == I2C1){
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a0d      	ldr	r2, [pc, #52]	; (800a7bc <HAL_I2C_MemRxCpltCallback+0x44>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d113      	bne.n	800a7b2 <HAL_I2C_MemRxCpltCallback+0x3a>
		uint8_t result = MPU9250_callbackMPU9250IT(&iMPU9250);
 800a78a:	480d      	ldr	r0, [pc, #52]	; (800a7c0 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a78c:	f7fe fd68 	bl	8009260 <MPU9250_callbackMPU9250IT>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
		if(result){
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00b      	beq.n	800a7b2 <HAL_I2C_MemRxCpltCallback+0x3a>
			iMPU9250.hzCnt++;
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a79c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a7a6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			iMPU9250.itSet = SET;
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_I2C_MemRxCpltCallback+0x48>)
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		}
	}
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	40005400 	.word	0x40005400
 800a7c0:	20000228 	.word	0x20000228

0800a7c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
	if(iMPU9250.itSet == RESET){// imu hz timer
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800a7ce:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d102      	bne.n	800a7de <HAL_TIM_PeriodElapsedCallback+0x1a>
		MPU9250_readMPU9250IT(&iMPU9250);
 800a7d8:	4803      	ldr	r0, [pc, #12]	; (800a7e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800a7da:	f7fe fd2d 	bl	8009238 <MPU9250_readMPU9250IT>
	}
}
 800a7de:	bf00      	nop
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000228 	.word	0x20000228

0800a7ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7){
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a04      	ldr	r2, [pc, #16]	; (800a80c <HAL_UART_RxCpltCallback+0x20>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d101      	bne.n	800a802 <HAL_UART_RxCpltCallback+0x16>
		sbus_callback();
 800a7fe:	f7ff fd6f 	bl	800a2e0 <sbus_callback>
	}
	if(huart->Instance == USART2){
		// telemetry
	}
}
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	40007800 	.word	0x40007800

0800a810 <__errno>:
 800a810:	4b01      	ldr	r3, [pc, #4]	; (800a818 <__errno+0x8>)
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	20000038 	.word	0x20000038

0800a81c <__libc_init_array>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	4e0d      	ldr	r6, [pc, #52]	; (800a854 <__libc_init_array+0x38>)
 800a820:	4c0d      	ldr	r4, [pc, #52]	; (800a858 <__libc_init_array+0x3c>)
 800a822:	1ba4      	subs	r4, r4, r6
 800a824:	10a4      	asrs	r4, r4, #2
 800a826:	2500      	movs	r5, #0
 800a828:	42a5      	cmp	r5, r4
 800a82a:	d109      	bne.n	800a840 <__libc_init_array+0x24>
 800a82c:	4e0b      	ldr	r6, [pc, #44]	; (800a85c <__libc_init_array+0x40>)
 800a82e:	4c0c      	ldr	r4, [pc, #48]	; (800a860 <__libc_init_array+0x44>)
 800a830:	f002 fc62 	bl	800d0f8 <_init>
 800a834:	1ba4      	subs	r4, r4, r6
 800a836:	10a4      	asrs	r4, r4, #2
 800a838:	2500      	movs	r5, #0
 800a83a:	42a5      	cmp	r5, r4
 800a83c:	d105      	bne.n	800a84a <__libc_init_array+0x2e>
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a844:	4798      	blx	r3
 800a846:	3501      	adds	r5, #1
 800a848:	e7ee      	b.n	800a828 <__libc_init_array+0xc>
 800a84a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a84e:	4798      	blx	r3
 800a850:	3501      	adds	r5, #1
 800a852:	e7f2      	b.n	800a83a <__libc_init_array+0x1e>
 800a854:	0800d408 	.word	0x0800d408
 800a858:	0800d408 	.word	0x0800d408
 800a85c:	0800d408 	.word	0x0800d408
 800a860:	0800d40c 	.word	0x0800d40c

0800a864 <malloc>:
 800a864:	4b02      	ldr	r3, [pc, #8]	; (800a870 <malloc+0xc>)
 800a866:	4601      	mov	r1, r0
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	f000 b86d 	b.w	800a948 <_malloc_r>
 800a86e:	bf00      	nop
 800a870:	20000038 	.word	0x20000038

0800a874 <free>:
 800a874:	4b02      	ldr	r3, [pc, #8]	; (800a880 <free+0xc>)
 800a876:	4601      	mov	r1, r0
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	f000 b817 	b.w	800a8ac <_free_r>
 800a87e:	bf00      	nop
 800a880:	20000038 	.word	0x20000038

0800a884 <memcpy>:
 800a884:	b510      	push	{r4, lr}
 800a886:	1e43      	subs	r3, r0, #1
 800a888:	440a      	add	r2, r1
 800a88a:	4291      	cmp	r1, r2
 800a88c:	d100      	bne.n	800a890 <memcpy+0xc>
 800a88e:	bd10      	pop	{r4, pc}
 800a890:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a894:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a898:	e7f7      	b.n	800a88a <memcpy+0x6>

0800a89a <memset>:
 800a89a:	4402      	add	r2, r0
 800a89c:	4603      	mov	r3, r0
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d100      	bne.n	800a8a4 <memset+0xa>
 800a8a2:	4770      	bx	lr
 800a8a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a8a8:	e7f9      	b.n	800a89e <memset+0x4>
	...

0800a8ac <_free_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	d045      	beq.n	800a940 <_free_r+0x94>
 800a8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b8:	1f0c      	subs	r4, r1, #4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfb8      	it	lt
 800a8be:	18e4      	addlt	r4, r4, r3
 800a8c0:	f001 ff22 	bl	800c708 <__malloc_lock>
 800a8c4:	4a1f      	ldr	r2, [pc, #124]	; (800a944 <_free_r+0x98>)
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	b933      	cbnz	r3, 800a8da <_free_r+0x2e>
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	6014      	str	r4, [r2, #0]
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d6:	f001 bf18 	b.w	800c70a <__malloc_unlock>
 800a8da:	42a3      	cmp	r3, r4
 800a8dc:	d90c      	bls.n	800a8f8 <_free_r+0x4c>
 800a8de:	6821      	ldr	r1, [r4, #0]
 800a8e0:	1862      	adds	r2, r4, r1
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	bf04      	itt	eq
 800a8e6:	681a      	ldreq	r2, [r3, #0]
 800a8e8:	685b      	ldreq	r3, [r3, #4]
 800a8ea:	6063      	str	r3, [r4, #4]
 800a8ec:	bf04      	itt	eq
 800a8ee:	1852      	addeq	r2, r2, r1
 800a8f0:	6022      	streq	r2, [r4, #0]
 800a8f2:	6004      	str	r4, [r0, #0]
 800a8f4:	e7ec      	b.n	800a8d0 <_free_r+0x24>
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	b10a      	cbz	r2, 800a900 <_free_r+0x54>
 800a8fc:	42a2      	cmp	r2, r4
 800a8fe:	d9fa      	bls.n	800a8f6 <_free_r+0x4a>
 800a900:	6819      	ldr	r1, [r3, #0]
 800a902:	1858      	adds	r0, r3, r1
 800a904:	42a0      	cmp	r0, r4
 800a906:	d10b      	bne.n	800a920 <_free_r+0x74>
 800a908:	6820      	ldr	r0, [r4, #0]
 800a90a:	4401      	add	r1, r0
 800a90c:	1858      	adds	r0, r3, r1
 800a90e:	4282      	cmp	r2, r0
 800a910:	6019      	str	r1, [r3, #0]
 800a912:	d1dd      	bne.n	800a8d0 <_free_r+0x24>
 800a914:	6810      	ldr	r0, [r2, #0]
 800a916:	6852      	ldr	r2, [r2, #4]
 800a918:	605a      	str	r2, [r3, #4]
 800a91a:	4401      	add	r1, r0
 800a91c:	6019      	str	r1, [r3, #0]
 800a91e:	e7d7      	b.n	800a8d0 <_free_r+0x24>
 800a920:	d902      	bls.n	800a928 <_free_r+0x7c>
 800a922:	230c      	movs	r3, #12
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	e7d3      	b.n	800a8d0 <_free_r+0x24>
 800a928:	6820      	ldr	r0, [r4, #0]
 800a92a:	1821      	adds	r1, r4, r0
 800a92c:	428a      	cmp	r2, r1
 800a92e:	bf04      	itt	eq
 800a930:	6811      	ldreq	r1, [r2, #0]
 800a932:	6852      	ldreq	r2, [r2, #4]
 800a934:	6062      	str	r2, [r4, #4]
 800a936:	bf04      	itt	eq
 800a938:	1809      	addeq	r1, r1, r0
 800a93a:	6021      	streq	r1, [r4, #0]
 800a93c:	605c      	str	r4, [r3, #4]
 800a93e:	e7c7      	b.n	800a8d0 <_free_r+0x24>
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	bf00      	nop
 800a944:	200002c8 	.word	0x200002c8

0800a948 <_malloc_r>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	1ccd      	adds	r5, r1, #3
 800a94c:	f025 0503 	bic.w	r5, r5, #3
 800a950:	3508      	adds	r5, #8
 800a952:	2d0c      	cmp	r5, #12
 800a954:	bf38      	it	cc
 800a956:	250c      	movcc	r5, #12
 800a958:	2d00      	cmp	r5, #0
 800a95a:	4606      	mov	r6, r0
 800a95c:	db01      	blt.n	800a962 <_malloc_r+0x1a>
 800a95e:	42a9      	cmp	r1, r5
 800a960:	d903      	bls.n	800a96a <_malloc_r+0x22>
 800a962:	230c      	movs	r3, #12
 800a964:	6033      	str	r3, [r6, #0]
 800a966:	2000      	movs	r0, #0
 800a968:	bd70      	pop	{r4, r5, r6, pc}
 800a96a:	f001 fecd 	bl	800c708 <__malloc_lock>
 800a96e:	4a21      	ldr	r2, [pc, #132]	; (800a9f4 <_malloc_r+0xac>)
 800a970:	6814      	ldr	r4, [r2, #0]
 800a972:	4621      	mov	r1, r4
 800a974:	b991      	cbnz	r1, 800a99c <_malloc_r+0x54>
 800a976:	4c20      	ldr	r4, [pc, #128]	; (800a9f8 <_malloc_r+0xb0>)
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	b91b      	cbnz	r3, 800a984 <_malloc_r+0x3c>
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 fd15 	bl	800b3ac <_sbrk_r>
 800a982:	6020      	str	r0, [r4, #0]
 800a984:	4629      	mov	r1, r5
 800a986:	4630      	mov	r0, r6
 800a988:	f000 fd10 	bl	800b3ac <_sbrk_r>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d124      	bne.n	800a9da <_malloc_r+0x92>
 800a990:	230c      	movs	r3, #12
 800a992:	6033      	str	r3, [r6, #0]
 800a994:	4630      	mov	r0, r6
 800a996:	f001 feb8 	bl	800c70a <__malloc_unlock>
 800a99a:	e7e4      	b.n	800a966 <_malloc_r+0x1e>
 800a99c:	680b      	ldr	r3, [r1, #0]
 800a99e:	1b5b      	subs	r3, r3, r5
 800a9a0:	d418      	bmi.n	800a9d4 <_malloc_r+0x8c>
 800a9a2:	2b0b      	cmp	r3, #11
 800a9a4:	d90f      	bls.n	800a9c6 <_malloc_r+0x7e>
 800a9a6:	600b      	str	r3, [r1, #0]
 800a9a8:	50cd      	str	r5, [r1, r3]
 800a9aa:	18cc      	adds	r4, r1, r3
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f001 feac 	bl	800c70a <__malloc_unlock>
 800a9b2:	f104 000b 	add.w	r0, r4, #11
 800a9b6:	1d23      	adds	r3, r4, #4
 800a9b8:	f020 0007 	bic.w	r0, r0, #7
 800a9bc:	1ac3      	subs	r3, r0, r3
 800a9be:	d0d3      	beq.n	800a968 <_malloc_r+0x20>
 800a9c0:	425a      	negs	r2, r3
 800a9c2:	50e2      	str	r2, [r4, r3]
 800a9c4:	e7d0      	b.n	800a968 <_malloc_r+0x20>
 800a9c6:	428c      	cmp	r4, r1
 800a9c8:	684b      	ldr	r3, [r1, #4]
 800a9ca:	bf16      	itet	ne
 800a9cc:	6063      	strne	r3, [r4, #4]
 800a9ce:	6013      	streq	r3, [r2, #0]
 800a9d0:	460c      	movne	r4, r1
 800a9d2:	e7eb      	b.n	800a9ac <_malloc_r+0x64>
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	6849      	ldr	r1, [r1, #4]
 800a9d8:	e7cc      	b.n	800a974 <_malloc_r+0x2c>
 800a9da:	1cc4      	adds	r4, r0, #3
 800a9dc:	f024 0403 	bic.w	r4, r4, #3
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d005      	beq.n	800a9f0 <_malloc_r+0xa8>
 800a9e4:	1a21      	subs	r1, r4, r0
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f000 fce0 	bl	800b3ac <_sbrk_r>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d0cf      	beq.n	800a990 <_malloc_r+0x48>
 800a9f0:	6025      	str	r5, [r4, #0]
 800a9f2:	e7db      	b.n	800a9ac <_malloc_r+0x64>
 800a9f4:	200002c8 	.word	0x200002c8
 800a9f8:	200002cc 	.word	0x200002cc

0800a9fc <__cvt>:
 800a9fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa00:	ec55 4b10 	vmov	r4, r5, d0
 800aa04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800aa06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	4691      	mov	r9, r2
 800aa10:	4619      	mov	r1, r3
 800aa12:	bfb8      	it	lt
 800aa14:	4622      	movlt	r2, r4
 800aa16:	462b      	mov	r3, r5
 800aa18:	f027 0720 	bic.w	r7, r7, #32
 800aa1c:	bfbb      	ittet	lt
 800aa1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa22:	461d      	movlt	r5, r3
 800aa24:	2300      	movge	r3, #0
 800aa26:	232d      	movlt	r3, #45	; 0x2d
 800aa28:	bfb8      	it	lt
 800aa2a:	4614      	movlt	r4, r2
 800aa2c:	2f46      	cmp	r7, #70	; 0x46
 800aa2e:	700b      	strb	r3, [r1, #0]
 800aa30:	d004      	beq.n	800aa3c <__cvt+0x40>
 800aa32:	2f45      	cmp	r7, #69	; 0x45
 800aa34:	d100      	bne.n	800aa38 <__cvt+0x3c>
 800aa36:	3601      	adds	r6, #1
 800aa38:	2102      	movs	r1, #2
 800aa3a:	e000      	b.n	800aa3e <__cvt+0x42>
 800aa3c:	2103      	movs	r1, #3
 800aa3e:	ab03      	add	r3, sp, #12
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	ab02      	add	r3, sp, #8
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	4632      	mov	r2, r6
 800aa48:	4653      	mov	r3, sl
 800aa4a:	ec45 4b10 	vmov	d0, r4, r5
 800aa4e:	f000 feb7 	bl	800b7c0 <_dtoa_r>
 800aa52:	2f47      	cmp	r7, #71	; 0x47
 800aa54:	4680      	mov	r8, r0
 800aa56:	d102      	bne.n	800aa5e <__cvt+0x62>
 800aa58:	f019 0f01 	tst.w	r9, #1
 800aa5c:	d026      	beq.n	800aaac <__cvt+0xb0>
 800aa5e:	2f46      	cmp	r7, #70	; 0x46
 800aa60:	eb08 0906 	add.w	r9, r8, r6
 800aa64:	d111      	bne.n	800aa8a <__cvt+0x8e>
 800aa66:	f898 3000 	ldrb.w	r3, [r8]
 800aa6a:	2b30      	cmp	r3, #48	; 0x30
 800aa6c:	d10a      	bne.n	800aa84 <__cvt+0x88>
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2300      	movs	r3, #0
 800aa72:	4620      	mov	r0, r4
 800aa74:	4629      	mov	r1, r5
 800aa76:	f7f6 f837 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa7a:	b918      	cbnz	r0, 800aa84 <__cvt+0x88>
 800aa7c:	f1c6 0601 	rsb	r6, r6, #1
 800aa80:	f8ca 6000 	str.w	r6, [sl]
 800aa84:	f8da 3000 	ldr.w	r3, [sl]
 800aa88:	4499      	add	r9, r3
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4620      	mov	r0, r4
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7f6 f829 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa96:	b938      	cbnz	r0, 800aaa8 <__cvt+0xac>
 800aa98:	2230      	movs	r2, #48	; 0x30
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	454b      	cmp	r3, r9
 800aa9e:	d205      	bcs.n	800aaac <__cvt+0xb0>
 800aaa0:	1c59      	adds	r1, r3, #1
 800aaa2:	9103      	str	r1, [sp, #12]
 800aaa4:	701a      	strb	r2, [r3, #0]
 800aaa6:	e7f8      	b.n	800aa9a <__cvt+0x9e>
 800aaa8:	f8cd 900c 	str.w	r9, [sp, #12]
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aab0:	eba3 0308 	sub.w	r3, r3, r8
 800aab4:	4640      	mov	r0, r8
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	b004      	add	sp, #16
 800aaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aabe <__exponent>:
 800aabe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac0:	2900      	cmp	r1, #0
 800aac2:	4604      	mov	r4, r0
 800aac4:	bfba      	itte	lt
 800aac6:	4249      	neglt	r1, r1
 800aac8:	232d      	movlt	r3, #45	; 0x2d
 800aaca:	232b      	movge	r3, #43	; 0x2b
 800aacc:	2909      	cmp	r1, #9
 800aace:	f804 2b02 	strb.w	r2, [r4], #2
 800aad2:	7043      	strb	r3, [r0, #1]
 800aad4:	dd20      	ble.n	800ab18 <__exponent+0x5a>
 800aad6:	f10d 0307 	add.w	r3, sp, #7
 800aada:	461f      	mov	r7, r3
 800aadc:	260a      	movs	r6, #10
 800aade:	fb91 f5f6 	sdiv	r5, r1, r6
 800aae2:	fb06 1115 	mls	r1, r6, r5, r1
 800aae6:	3130      	adds	r1, #48	; 0x30
 800aae8:	2d09      	cmp	r5, #9
 800aaea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aaee:	f103 32ff 	add.w	r2, r3, #4294967295
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	dc09      	bgt.n	800ab0a <__exponent+0x4c>
 800aaf6:	3130      	adds	r1, #48	; 0x30
 800aaf8:	3b02      	subs	r3, #2
 800aafa:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aafe:	42bb      	cmp	r3, r7
 800ab00:	4622      	mov	r2, r4
 800ab02:	d304      	bcc.n	800ab0e <__exponent+0x50>
 800ab04:	1a10      	subs	r0, r2, r0
 800ab06:	b003      	add	sp, #12
 800ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	e7e7      	b.n	800aade <__exponent+0x20>
 800ab0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab12:	f804 2b01 	strb.w	r2, [r4], #1
 800ab16:	e7f2      	b.n	800aafe <__exponent+0x40>
 800ab18:	2330      	movs	r3, #48	; 0x30
 800ab1a:	4419      	add	r1, r3
 800ab1c:	7083      	strb	r3, [r0, #2]
 800ab1e:	1d02      	adds	r2, r0, #4
 800ab20:	70c1      	strb	r1, [r0, #3]
 800ab22:	e7ef      	b.n	800ab04 <__exponent+0x46>

0800ab24 <_printf_float>:
 800ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab28:	b08d      	sub	sp, #52	; 0x34
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ab30:	4616      	mov	r6, r2
 800ab32:	461f      	mov	r7, r3
 800ab34:	4605      	mov	r5, r0
 800ab36:	f001 fd75 	bl	800c624 <_localeconv_r>
 800ab3a:	6803      	ldr	r3, [r0, #0]
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f5 fb56 	bl	80001f0 <strlen>
 800ab44:	2300      	movs	r3, #0
 800ab46:	930a      	str	r3, [sp, #40]	; 0x28
 800ab48:	f8d8 3000 	ldr.w	r3, [r8]
 800ab4c:	9005      	str	r0, [sp, #20]
 800ab4e:	3307      	adds	r3, #7
 800ab50:	f023 0307 	bic.w	r3, r3, #7
 800ab54:	f103 0208 	add.w	r2, r3, #8
 800ab58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab5c:	f8d4 b000 	ldr.w	fp, [r4]
 800ab60:	f8c8 2000 	str.w	r2, [r8]
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab74:	9307      	str	r3, [sp, #28]
 800ab76:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7e:	4ba7      	ldr	r3, [pc, #668]	; (800ae1c <_printf_float+0x2f8>)
 800ab80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab84:	f7f5 ffe2 	bl	8000b4c <__aeabi_dcmpun>
 800ab88:	bb70      	cbnz	r0, 800abe8 <_printf_float+0xc4>
 800ab8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8e:	4ba3      	ldr	r3, [pc, #652]	; (800ae1c <_printf_float+0x2f8>)
 800ab90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab94:	f7f5 ffbc 	bl	8000b10 <__aeabi_dcmple>
 800ab98:	bb30      	cbnz	r0, 800abe8 <_printf_float+0xc4>
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4640      	mov	r0, r8
 800aba0:	4649      	mov	r1, r9
 800aba2:	f7f5 ffab 	bl	8000afc <__aeabi_dcmplt>
 800aba6:	b110      	cbz	r0, 800abae <_printf_float+0x8a>
 800aba8:	232d      	movs	r3, #45	; 0x2d
 800abaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abae:	4a9c      	ldr	r2, [pc, #624]	; (800ae20 <_printf_float+0x2fc>)
 800abb0:	4b9c      	ldr	r3, [pc, #624]	; (800ae24 <_printf_float+0x300>)
 800abb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800abb6:	bf8c      	ite	hi
 800abb8:	4690      	movhi	r8, r2
 800abba:	4698      	movls	r8, r3
 800abbc:	2303      	movs	r3, #3
 800abbe:	f02b 0204 	bic.w	r2, fp, #4
 800abc2:	6123      	str	r3, [r4, #16]
 800abc4:	6022      	str	r2, [r4, #0]
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	9700      	str	r7, [sp, #0]
 800abcc:	4633      	mov	r3, r6
 800abce:	aa0b      	add	r2, sp, #44	; 0x2c
 800abd0:	4621      	mov	r1, r4
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 f9e6 	bl	800afa4 <_printf_common>
 800abd8:	3001      	adds	r0, #1
 800abda:	f040 808d 	bne.w	800acf8 <_printf_float+0x1d4>
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	b00d      	add	sp, #52	; 0x34
 800abe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe8:	4642      	mov	r2, r8
 800abea:	464b      	mov	r3, r9
 800abec:	4640      	mov	r0, r8
 800abee:	4649      	mov	r1, r9
 800abf0:	f7f5 ffac 	bl	8000b4c <__aeabi_dcmpun>
 800abf4:	b110      	cbz	r0, 800abfc <_printf_float+0xd8>
 800abf6:	4a8c      	ldr	r2, [pc, #560]	; (800ae28 <_printf_float+0x304>)
 800abf8:	4b8c      	ldr	r3, [pc, #560]	; (800ae2c <_printf_float+0x308>)
 800abfa:	e7da      	b.n	800abb2 <_printf_float+0x8e>
 800abfc:	6861      	ldr	r1, [r4, #4]
 800abfe:	1c4b      	adds	r3, r1, #1
 800ac00:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ac04:	a80a      	add	r0, sp, #40	; 0x28
 800ac06:	d13e      	bne.n	800ac86 <_printf_float+0x162>
 800ac08:	2306      	movs	r3, #6
 800ac0a:	6063      	str	r3, [r4, #4]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ac12:	ab09      	add	r3, sp, #36	; 0x24
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	ec49 8b10 	vmov	d0, r8, r9
 800ac1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac1e:	6022      	str	r2, [r4, #0]
 800ac20:	f8cd a004 	str.w	sl, [sp, #4]
 800ac24:	6861      	ldr	r1, [r4, #4]
 800ac26:	4628      	mov	r0, r5
 800ac28:	f7ff fee8 	bl	800a9fc <__cvt>
 800ac2c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ac30:	2b47      	cmp	r3, #71	; 0x47
 800ac32:	4680      	mov	r8, r0
 800ac34:	d109      	bne.n	800ac4a <_printf_float+0x126>
 800ac36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac38:	1cd8      	adds	r0, r3, #3
 800ac3a:	db02      	blt.n	800ac42 <_printf_float+0x11e>
 800ac3c:	6862      	ldr	r2, [r4, #4]
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	dd47      	ble.n	800acd2 <_printf_float+0x1ae>
 800ac42:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac46:	fa5f fa8a 	uxtb.w	sl, sl
 800ac4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ac4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac50:	d824      	bhi.n	800ac9c <_printf_float+0x178>
 800ac52:	3901      	subs	r1, #1
 800ac54:	4652      	mov	r2, sl
 800ac56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac5a:	9109      	str	r1, [sp, #36]	; 0x24
 800ac5c:	f7ff ff2f 	bl	800aabe <__exponent>
 800ac60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac62:	1813      	adds	r3, r2, r0
 800ac64:	2a01      	cmp	r2, #1
 800ac66:	4681      	mov	r9, r0
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	dc02      	bgt.n	800ac72 <_printf_float+0x14e>
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	07d1      	lsls	r1, r2, #31
 800ac70:	d501      	bpl.n	800ac76 <_printf_float+0x152>
 800ac72:	3301      	adds	r3, #1
 800ac74:	6123      	str	r3, [r4, #16]
 800ac76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0a5      	beq.n	800abca <_printf_float+0xa6>
 800ac7e:	232d      	movs	r3, #45	; 0x2d
 800ac80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac84:	e7a1      	b.n	800abca <_printf_float+0xa6>
 800ac86:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ac8a:	f000 8177 	beq.w	800af7c <_printf_float+0x458>
 800ac8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ac92:	d1bb      	bne.n	800ac0c <_printf_float+0xe8>
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d1b9      	bne.n	800ac0c <_printf_float+0xe8>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e7b6      	b.n	800ac0a <_printf_float+0xe6>
 800ac9c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800aca0:	d119      	bne.n	800acd6 <_printf_float+0x1b2>
 800aca2:	2900      	cmp	r1, #0
 800aca4:	6863      	ldr	r3, [r4, #4]
 800aca6:	dd0c      	ble.n	800acc2 <_printf_float+0x19e>
 800aca8:	6121      	str	r1, [r4, #16]
 800acaa:	b913      	cbnz	r3, 800acb2 <_printf_float+0x18e>
 800acac:	6822      	ldr	r2, [r4, #0]
 800acae:	07d2      	lsls	r2, r2, #31
 800acb0:	d502      	bpl.n	800acb8 <_printf_float+0x194>
 800acb2:	3301      	adds	r3, #1
 800acb4:	440b      	add	r3, r1
 800acb6:	6123      	str	r3, [r4, #16]
 800acb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acba:	65a3      	str	r3, [r4, #88]	; 0x58
 800acbc:	f04f 0900 	mov.w	r9, #0
 800acc0:	e7d9      	b.n	800ac76 <_printf_float+0x152>
 800acc2:	b913      	cbnz	r3, 800acca <_printf_float+0x1a6>
 800acc4:	6822      	ldr	r2, [r4, #0]
 800acc6:	07d0      	lsls	r0, r2, #31
 800acc8:	d501      	bpl.n	800acce <_printf_float+0x1aa>
 800acca:	3302      	adds	r3, #2
 800accc:	e7f3      	b.n	800acb6 <_printf_float+0x192>
 800acce:	2301      	movs	r3, #1
 800acd0:	e7f1      	b.n	800acb6 <_printf_float+0x192>
 800acd2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800acd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acda:	4293      	cmp	r3, r2
 800acdc:	db05      	blt.n	800acea <_printf_float+0x1c6>
 800acde:	6822      	ldr	r2, [r4, #0]
 800ace0:	6123      	str	r3, [r4, #16]
 800ace2:	07d1      	lsls	r1, r2, #31
 800ace4:	d5e8      	bpl.n	800acb8 <_printf_float+0x194>
 800ace6:	3301      	adds	r3, #1
 800ace8:	e7e5      	b.n	800acb6 <_printf_float+0x192>
 800acea:	2b00      	cmp	r3, #0
 800acec:	bfd4      	ite	le
 800acee:	f1c3 0302 	rsble	r3, r3, #2
 800acf2:	2301      	movgt	r3, #1
 800acf4:	4413      	add	r3, r2
 800acf6:	e7de      	b.n	800acb6 <_printf_float+0x192>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	055a      	lsls	r2, r3, #21
 800acfc:	d407      	bmi.n	800ad0e <_printf_float+0x1ea>
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	4642      	mov	r2, r8
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b8      	blx	r7
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d12b      	bne.n	800ad64 <_printf_float+0x240>
 800ad0c:	e767      	b.n	800abde <_printf_float+0xba>
 800ad0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ad12:	f240 80dc 	bls.w	800aece <_printf_float+0x3aa>
 800ad16:	2200      	movs	r2, #0
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad1e:	f7f5 fee3 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d033      	beq.n	800ad8e <_printf_float+0x26a>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4a41      	ldr	r2, [pc, #260]	; (800ae30 <_printf_float+0x30c>)
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b8      	blx	r7
 800ad30:	3001      	adds	r0, #1
 800ad32:	f43f af54 	beq.w	800abde <_printf_float+0xba>
 800ad36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	db02      	blt.n	800ad44 <_printf_float+0x220>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	07d8      	lsls	r0, r3, #31
 800ad42:	d50f      	bpl.n	800ad64 <_printf_float+0x240>
 800ad44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b8      	blx	r7
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f43f af45 	beq.w	800abde <_printf_float+0xba>
 800ad54:	f04f 0800 	mov.w	r8, #0
 800ad58:	f104 091a 	add.w	r9, r4, #26
 800ad5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	4543      	cmp	r3, r8
 800ad62:	dc09      	bgt.n	800ad78 <_printf_float+0x254>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	079b      	lsls	r3, r3, #30
 800ad68:	f100 8103 	bmi.w	800af72 <_printf_float+0x44e>
 800ad6c:	68e0      	ldr	r0, [r4, #12]
 800ad6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad70:	4298      	cmp	r0, r3
 800ad72:	bfb8      	it	lt
 800ad74:	4618      	movlt	r0, r3
 800ad76:	e734      	b.n	800abe2 <_printf_float+0xbe>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	464a      	mov	r2, r9
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b8      	blx	r7
 800ad82:	3001      	adds	r0, #1
 800ad84:	f43f af2b 	beq.w	800abde <_printf_float+0xba>
 800ad88:	f108 0801 	add.w	r8, r8, #1
 800ad8c:	e7e6      	b.n	800ad5c <_printf_float+0x238>
 800ad8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dc2b      	bgt.n	800adec <_printf_float+0x2c8>
 800ad94:	2301      	movs	r3, #1
 800ad96:	4a26      	ldr	r2, [pc, #152]	; (800ae30 <_printf_float+0x30c>)
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	47b8      	blx	r7
 800ad9e:	3001      	adds	r0, #1
 800ada0:	f43f af1d 	beq.w	800abde <_printf_float+0xba>
 800ada4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada6:	b923      	cbnz	r3, 800adb2 <_printf_float+0x28e>
 800ada8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adaa:	b913      	cbnz	r3, 800adb2 <_printf_float+0x28e>
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	07d9      	lsls	r1, r3, #31
 800adb0:	d5d8      	bpl.n	800ad64 <_printf_float+0x240>
 800adb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adb6:	4631      	mov	r1, r6
 800adb8:	4628      	mov	r0, r5
 800adba:	47b8      	blx	r7
 800adbc:	3001      	adds	r0, #1
 800adbe:	f43f af0e 	beq.w	800abde <_printf_float+0xba>
 800adc2:	f04f 0900 	mov.w	r9, #0
 800adc6:	f104 0a1a 	add.w	sl, r4, #26
 800adca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adcc:	425b      	negs	r3, r3
 800adce:	454b      	cmp	r3, r9
 800add0:	dc01      	bgt.n	800add6 <_printf_float+0x2b2>
 800add2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add4:	e794      	b.n	800ad00 <_printf_float+0x1dc>
 800add6:	2301      	movs	r3, #1
 800add8:	4652      	mov	r2, sl
 800adda:	4631      	mov	r1, r6
 800addc:	4628      	mov	r0, r5
 800adde:	47b8      	blx	r7
 800ade0:	3001      	adds	r0, #1
 800ade2:	f43f aefc 	beq.w	800abde <_printf_float+0xba>
 800ade6:	f109 0901 	add.w	r9, r9, #1
 800adea:	e7ee      	b.n	800adca <_printf_float+0x2a6>
 800adec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adf0:	429a      	cmp	r2, r3
 800adf2:	bfa8      	it	ge
 800adf4:	461a      	movge	r2, r3
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	4691      	mov	r9, r2
 800adfa:	dd07      	ble.n	800ae0c <_printf_float+0x2e8>
 800adfc:	4613      	mov	r3, r2
 800adfe:	4631      	mov	r1, r6
 800ae00:	4642      	mov	r2, r8
 800ae02:	4628      	mov	r0, r5
 800ae04:	47b8      	blx	r7
 800ae06:	3001      	adds	r0, #1
 800ae08:	f43f aee9 	beq.w	800abde <_printf_float+0xba>
 800ae0c:	f104 031a 	add.w	r3, r4, #26
 800ae10:	f04f 0b00 	mov.w	fp, #0
 800ae14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae18:	9306      	str	r3, [sp, #24]
 800ae1a:	e015      	b.n	800ae48 <_printf_float+0x324>
 800ae1c:	7fefffff 	.word	0x7fefffff
 800ae20:	0800d144 	.word	0x0800d144
 800ae24:	0800d140 	.word	0x0800d140
 800ae28:	0800d14c 	.word	0x0800d14c
 800ae2c:	0800d148 	.word	0x0800d148
 800ae30:	0800d150 	.word	0x0800d150
 800ae34:	2301      	movs	r3, #1
 800ae36:	9a06      	ldr	r2, [sp, #24]
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	47b8      	blx	r7
 800ae3e:	3001      	adds	r0, #1
 800ae40:	f43f aecd 	beq.w	800abde <_printf_float+0xba>
 800ae44:	f10b 0b01 	add.w	fp, fp, #1
 800ae48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ae4c:	ebaa 0309 	sub.w	r3, sl, r9
 800ae50:	455b      	cmp	r3, fp
 800ae52:	dcef      	bgt.n	800ae34 <_printf_float+0x310>
 800ae54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	44d0      	add	r8, sl
 800ae5c:	db15      	blt.n	800ae8a <_printf_float+0x366>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	07da      	lsls	r2, r3, #31
 800ae62:	d412      	bmi.n	800ae8a <_printf_float+0x366>
 800ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae68:	eba3 020a 	sub.w	r2, r3, sl
 800ae6c:	eba3 0a01 	sub.w	sl, r3, r1
 800ae70:	4592      	cmp	sl, r2
 800ae72:	bfa8      	it	ge
 800ae74:	4692      	movge	sl, r2
 800ae76:	f1ba 0f00 	cmp.w	sl, #0
 800ae7a:	dc0e      	bgt.n	800ae9a <_printf_float+0x376>
 800ae7c:	f04f 0800 	mov.w	r8, #0
 800ae80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae84:	f104 091a 	add.w	r9, r4, #26
 800ae88:	e019      	b.n	800aebe <_printf_float+0x39a>
 800ae8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	d1e5      	bne.n	800ae64 <_printf_float+0x340>
 800ae98:	e6a1      	b.n	800abde <_printf_float+0xba>
 800ae9a:	4653      	mov	r3, sl
 800ae9c:	4642      	mov	r2, r8
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	d1e9      	bne.n	800ae7c <_printf_float+0x358>
 800aea8:	e699      	b.n	800abde <_printf_float+0xba>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	464a      	mov	r2, r9
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	47b8      	blx	r7
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f43f ae92 	beq.w	800abde <_printf_float+0xba>
 800aeba:	f108 0801 	add.w	r8, r8, #1
 800aebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aec2:	1a9b      	subs	r3, r3, r2
 800aec4:	eba3 030a 	sub.w	r3, r3, sl
 800aec8:	4543      	cmp	r3, r8
 800aeca:	dcee      	bgt.n	800aeaa <_printf_float+0x386>
 800aecc:	e74a      	b.n	800ad64 <_printf_float+0x240>
 800aece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aed0:	2a01      	cmp	r2, #1
 800aed2:	dc01      	bgt.n	800aed8 <_printf_float+0x3b4>
 800aed4:	07db      	lsls	r3, r3, #31
 800aed6:	d53a      	bpl.n	800af4e <_printf_float+0x42a>
 800aed8:	2301      	movs	r3, #1
 800aeda:	4642      	mov	r2, r8
 800aedc:	4631      	mov	r1, r6
 800aede:	4628      	mov	r0, r5
 800aee0:	47b8      	blx	r7
 800aee2:	3001      	adds	r0, #1
 800aee4:	f43f ae7b 	beq.w	800abde <_printf_float+0xba>
 800aee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	f108 0801 	add.w	r8, r8, #1
 800aef8:	f43f ae71 	beq.w	800abde <_printf_float+0xba>
 800aefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefe:	2200      	movs	r2, #0
 800af00:	f103 3aff 	add.w	sl, r3, #4294967295
 800af04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af08:	2300      	movs	r3, #0
 800af0a:	f7f5 fded 	bl	8000ae8 <__aeabi_dcmpeq>
 800af0e:	b9c8      	cbnz	r0, 800af44 <_printf_float+0x420>
 800af10:	4653      	mov	r3, sl
 800af12:	4642      	mov	r2, r8
 800af14:	4631      	mov	r1, r6
 800af16:	4628      	mov	r0, r5
 800af18:	47b8      	blx	r7
 800af1a:	3001      	adds	r0, #1
 800af1c:	d10e      	bne.n	800af3c <_printf_float+0x418>
 800af1e:	e65e      	b.n	800abde <_printf_float+0xba>
 800af20:	2301      	movs	r3, #1
 800af22:	4652      	mov	r2, sl
 800af24:	4631      	mov	r1, r6
 800af26:	4628      	mov	r0, r5
 800af28:	47b8      	blx	r7
 800af2a:	3001      	adds	r0, #1
 800af2c:	f43f ae57 	beq.w	800abde <_printf_float+0xba>
 800af30:	f108 0801 	add.w	r8, r8, #1
 800af34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af36:	3b01      	subs	r3, #1
 800af38:	4543      	cmp	r3, r8
 800af3a:	dcf1      	bgt.n	800af20 <_printf_float+0x3fc>
 800af3c:	464b      	mov	r3, r9
 800af3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af42:	e6de      	b.n	800ad02 <_printf_float+0x1de>
 800af44:	f04f 0800 	mov.w	r8, #0
 800af48:	f104 0a1a 	add.w	sl, r4, #26
 800af4c:	e7f2      	b.n	800af34 <_printf_float+0x410>
 800af4e:	2301      	movs	r3, #1
 800af50:	e7df      	b.n	800af12 <_printf_float+0x3ee>
 800af52:	2301      	movs	r3, #1
 800af54:	464a      	mov	r2, r9
 800af56:	4631      	mov	r1, r6
 800af58:	4628      	mov	r0, r5
 800af5a:	47b8      	blx	r7
 800af5c:	3001      	adds	r0, #1
 800af5e:	f43f ae3e 	beq.w	800abde <_printf_float+0xba>
 800af62:	f108 0801 	add.w	r8, r8, #1
 800af66:	68e3      	ldr	r3, [r4, #12]
 800af68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af6a:	1a9b      	subs	r3, r3, r2
 800af6c:	4543      	cmp	r3, r8
 800af6e:	dcf0      	bgt.n	800af52 <_printf_float+0x42e>
 800af70:	e6fc      	b.n	800ad6c <_printf_float+0x248>
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	f104 0919 	add.w	r9, r4, #25
 800af7a:	e7f4      	b.n	800af66 <_printf_float+0x442>
 800af7c:	2900      	cmp	r1, #0
 800af7e:	f43f ae8b 	beq.w	800ac98 <_printf_float+0x174>
 800af82:	2300      	movs	r3, #0
 800af84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800af88:	ab09      	add	r3, sp, #36	; 0x24
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	ec49 8b10 	vmov	d0, r8, r9
 800af90:	6022      	str	r2, [r4, #0]
 800af92:	f8cd a004 	str.w	sl, [sp, #4]
 800af96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7ff fd2e 	bl	800a9fc <__cvt>
 800afa0:	4680      	mov	r8, r0
 800afa2:	e648      	b.n	800ac36 <_printf_float+0x112>

0800afa4 <_printf_common>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	4691      	mov	r9, r2
 800afaa:	461f      	mov	r7, r3
 800afac:	688a      	ldr	r2, [r1, #8]
 800afae:	690b      	ldr	r3, [r1, #16]
 800afb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	bfb8      	it	lt
 800afb8:	4613      	movlt	r3, r2
 800afba:	f8c9 3000 	str.w	r3, [r9]
 800afbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afc2:	4606      	mov	r6, r0
 800afc4:	460c      	mov	r4, r1
 800afc6:	b112      	cbz	r2, 800afce <_printf_common+0x2a>
 800afc8:	3301      	adds	r3, #1
 800afca:	f8c9 3000 	str.w	r3, [r9]
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	0699      	lsls	r1, r3, #26
 800afd2:	bf42      	ittt	mi
 800afd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afd8:	3302      	addmi	r3, #2
 800afda:	f8c9 3000 	strmi.w	r3, [r9]
 800afde:	6825      	ldr	r5, [r4, #0]
 800afe0:	f015 0506 	ands.w	r5, r5, #6
 800afe4:	d107      	bne.n	800aff6 <_printf_common+0x52>
 800afe6:	f104 0a19 	add.w	sl, r4, #25
 800afea:	68e3      	ldr	r3, [r4, #12]
 800afec:	f8d9 2000 	ldr.w	r2, [r9]
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	42ab      	cmp	r3, r5
 800aff4:	dc28      	bgt.n	800b048 <_printf_common+0xa4>
 800aff6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800affa:	6822      	ldr	r2, [r4, #0]
 800affc:	3300      	adds	r3, #0
 800affe:	bf18      	it	ne
 800b000:	2301      	movne	r3, #1
 800b002:	0692      	lsls	r2, r2, #26
 800b004:	d42d      	bmi.n	800b062 <_printf_common+0xbe>
 800b006:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b00a:	4639      	mov	r1, r7
 800b00c:	4630      	mov	r0, r6
 800b00e:	47c0      	blx	r8
 800b010:	3001      	adds	r0, #1
 800b012:	d020      	beq.n	800b056 <_printf_common+0xb2>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	68e5      	ldr	r5, [r4, #12]
 800b018:	f8d9 2000 	ldr.w	r2, [r9]
 800b01c:	f003 0306 	and.w	r3, r3, #6
 800b020:	2b04      	cmp	r3, #4
 800b022:	bf08      	it	eq
 800b024:	1aad      	subeq	r5, r5, r2
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	6922      	ldr	r2, [r4, #16]
 800b02a:	bf0c      	ite	eq
 800b02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b030:	2500      	movne	r5, #0
 800b032:	4293      	cmp	r3, r2
 800b034:	bfc4      	itt	gt
 800b036:	1a9b      	subgt	r3, r3, r2
 800b038:	18ed      	addgt	r5, r5, r3
 800b03a:	f04f 0900 	mov.w	r9, #0
 800b03e:	341a      	adds	r4, #26
 800b040:	454d      	cmp	r5, r9
 800b042:	d11a      	bne.n	800b07a <_printf_common+0xd6>
 800b044:	2000      	movs	r0, #0
 800b046:	e008      	b.n	800b05a <_printf_common+0xb6>
 800b048:	2301      	movs	r3, #1
 800b04a:	4652      	mov	r2, sl
 800b04c:	4639      	mov	r1, r7
 800b04e:	4630      	mov	r0, r6
 800b050:	47c0      	blx	r8
 800b052:	3001      	adds	r0, #1
 800b054:	d103      	bne.n	800b05e <_printf_common+0xba>
 800b056:	f04f 30ff 	mov.w	r0, #4294967295
 800b05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05e:	3501      	adds	r5, #1
 800b060:	e7c3      	b.n	800afea <_printf_common+0x46>
 800b062:	18e1      	adds	r1, r4, r3
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	2030      	movs	r0, #48	; 0x30
 800b068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b06c:	4422      	add	r2, r4
 800b06e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b076:	3302      	adds	r3, #2
 800b078:	e7c5      	b.n	800b006 <_printf_common+0x62>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4622      	mov	r2, r4
 800b07e:	4639      	mov	r1, r7
 800b080:	4630      	mov	r0, r6
 800b082:	47c0      	blx	r8
 800b084:	3001      	adds	r0, #1
 800b086:	d0e6      	beq.n	800b056 <_printf_common+0xb2>
 800b088:	f109 0901 	add.w	r9, r9, #1
 800b08c:	e7d8      	b.n	800b040 <_printf_common+0x9c>
	...

0800b090 <_printf_i>:
 800b090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b094:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b098:	460c      	mov	r4, r1
 800b09a:	7e09      	ldrb	r1, [r1, #24]
 800b09c:	b085      	sub	sp, #20
 800b09e:	296e      	cmp	r1, #110	; 0x6e
 800b0a0:	4617      	mov	r7, r2
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	4698      	mov	r8, r3
 800b0a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0a8:	f000 80b3 	beq.w	800b212 <_printf_i+0x182>
 800b0ac:	d822      	bhi.n	800b0f4 <_printf_i+0x64>
 800b0ae:	2963      	cmp	r1, #99	; 0x63
 800b0b0:	d036      	beq.n	800b120 <_printf_i+0x90>
 800b0b2:	d80a      	bhi.n	800b0ca <_printf_i+0x3a>
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	f000 80b9 	beq.w	800b22c <_printf_i+0x19c>
 800b0ba:	2958      	cmp	r1, #88	; 0x58
 800b0bc:	f000 8083 	beq.w	800b1c6 <_printf_i+0x136>
 800b0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b0c8:	e032      	b.n	800b130 <_printf_i+0xa0>
 800b0ca:	2964      	cmp	r1, #100	; 0x64
 800b0cc:	d001      	beq.n	800b0d2 <_printf_i+0x42>
 800b0ce:	2969      	cmp	r1, #105	; 0x69
 800b0d0:	d1f6      	bne.n	800b0c0 <_printf_i+0x30>
 800b0d2:	6820      	ldr	r0, [r4, #0]
 800b0d4:	6813      	ldr	r3, [r2, #0]
 800b0d6:	0605      	lsls	r5, r0, #24
 800b0d8:	f103 0104 	add.w	r1, r3, #4
 800b0dc:	d52a      	bpl.n	800b134 <_printf_i+0xa4>
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6011      	str	r1, [r2, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da03      	bge.n	800b0ee <_printf_i+0x5e>
 800b0e6:	222d      	movs	r2, #45	; 0x2d
 800b0e8:	425b      	negs	r3, r3
 800b0ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0ee:	486f      	ldr	r0, [pc, #444]	; (800b2ac <_printf_i+0x21c>)
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	e039      	b.n	800b168 <_printf_i+0xd8>
 800b0f4:	2973      	cmp	r1, #115	; 0x73
 800b0f6:	f000 809d 	beq.w	800b234 <_printf_i+0x1a4>
 800b0fa:	d808      	bhi.n	800b10e <_printf_i+0x7e>
 800b0fc:	296f      	cmp	r1, #111	; 0x6f
 800b0fe:	d020      	beq.n	800b142 <_printf_i+0xb2>
 800b100:	2970      	cmp	r1, #112	; 0x70
 800b102:	d1dd      	bne.n	800b0c0 <_printf_i+0x30>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	f043 0320 	orr.w	r3, r3, #32
 800b10a:	6023      	str	r3, [r4, #0]
 800b10c:	e003      	b.n	800b116 <_printf_i+0x86>
 800b10e:	2975      	cmp	r1, #117	; 0x75
 800b110:	d017      	beq.n	800b142 <_printf_i+0xb2>
 800b112:	2978      	cmp	r1, #120	; 0x78
 800b114:	d1d4      	bne.n	800b0c0 <_printf_i+0x30>
 800b116:	2378      	movs	r3, #120	; 0x78
 800b118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b11c:	4864      	ldr	r0, [pc, #400]	; (800b2b0 <_printf_i+0x220>)
 800b11e:	e055      	b.n	800b1cc <_printf_i+0x13c>
 800b120:	6813      	ldr	r3, [r2, #0]
 800b122:	1d19      	adds	r1, r3, #4
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6011      	str	r1, [r2, #0]
 800b128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b130:	2301      	movs	r3, #1
 800b132:	e08c      	b.n	800b24e <_printf_i+0x1be>
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6011      	str	r1, [r2, #0]
 800b138:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b13c:	bf18      	it	ne
 800b13e:	b21b      	sxthne	r3, r3
 800b140:	e7cf      	b.n	800b0e2 <_printf_i+0x52>
 800b142:	6813      	ldr	r3, [r2, #0]
 800b144:	6825      	ldr	r5, [r4, #0]
 800b146:	1d18      	adds	r0, r3, #4
 800b148:	6010      	str	r0, [r2, #0]
 800b14a:	0628      	lsls	r0, r5, #24
 800b14c:	d501      	bpl.n	800b152 <_printf_i+0xc2>
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	e002      	b.n	800b158 <_printf_i+0xc8>
 800b152:	0668      	lsls	r0, r5, #25
 800b154:	d5fb      	bpl.n	800b14e <_printf_i+0xbe>
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	4854      	ldr	r0, [pc, #336]	; (800b2ac <_printf_i+0x21c>)
 800b15a:	296f      	cmp	r1, #111	; 0x6f
 800b15c:	bf14      	ite	ne
 800b15e:	220a      	movne	r2, #10
 800b160:	2208      	moveq	r2, #8
 800b162:	2100      	movs	r1, #0
 800b164:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b168:	6865      	ldr	r5, [r4, #4]
 800b16a:	60a5      	str	r5, [r4, #8]
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	f2c0 8095 	blt.w	800b29c <_printf_i+0x20c>
 800b172:	6821      	ldr	r1, [r4, #0]
 800b174:	f021 0104 	bic.w	r1, r1, #4
 800b178:	6021      	str	r1, [r4, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d13d      	bne.n	800b1fa <_printf_i+0x16a>
 800b17e:	2d00      	cmp	r5, #0
 800b180:	f040 808e 	bne.w	800b2a0 <_printf_i+0x210>
 800b184:	4665      	mov	r5, ip
 800b186:	2a08      	cmp	r2, #8
 800b188:	d10b      	bne.n	800b1a2 <_printf_i+0x112>
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	07db      	lsls	r3, r3, #31
 800b18e:	d508      	bpl.n	800b1a2 <_printf_i+0x112>
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	6862      	ldr	r2, [r4, #4]
 800b194:	429a      	cmp	r2, r3
 800b196:	bfde      	ittt	le
 800b198:	2330      	movle	r3, #48	; 0x30
 800b19a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b19e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1a2:	ebac 0305 	sub.w	r3, ip, r5
 800b1a6:	6123      	str	r3, [r4, #16]
 800b1a8:	f8cd 8000 	str.w	r8, [sp]
 800b1ac:	463b      	mov	r3, r7
 800b1ae:	aa03      	add	r2, sp, #12
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f7ff fef6 	bl	800afa4 <_printf_common>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d14d      	bne.n	800b258 <_printf_i+0x1c8>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	b005      	add	sp, #20
 800b1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c6:	4839      	ldr	r0, [pc, #228]	; (800b2ac <_printf_i+0x21c>)
 800b1c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b1cc:	6813      	ldr	r3, [r2, #0]
 800b1ce:	6821      	ldr	r1, [r4, #0]
 800b1d0:	1d1d      	adds	r5, r3, #4
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6015      	str	r5, [r2, #0]
 800b1d6:	060a      	lsls	r2, r1, #24
 800b1d8:	d50b      	bpl.n	800b1f2 <_printf_i+0x162>
 800b1da:	07ca      	lsls	r2, r1, #31
 800b1dc:	bf44      	itt	mi
 800b1de:	f041 0120 	orrmi.w	r1, r1, #32
 800b1e2:	6021      	strmi	r1, [r4, #0]
 800b1e4:	b91b      	cbnz	r3, 800b1ee <_printf_i+0x15e>
 800b1e6:	6822      	ldr	r2, [r4, #0]
 800b1e8:	f022 0220 	bic.w	r2, r2, #32
 800b1ec:	6022      	str	r2, [r4, #0]
 800b1ee:	2210      	movs	r2, #16
 800b1f0:	e7b7      	b.n	800b162 <_printf_i+0xd2>
 800b1f2:	064d      	lsls	r5, r1, #25
 800b1f4:	bf48      	it	mi
 800b1f6:	b29b      	uxthmi	r3, r3
 800b1f8:	e7ef      	b.n	800b1da <_printf_i+0x14a>
 800b1fa:	4665      	mov	r5, ip
 800b1fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b200:	fb02 3311 	mls	r3, r2, r1, r3
 800b204:	5cc3      	ldrb	r3, [r0, r3]
 800b206:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b20a:	460b      	mov	r3, r1
 800b20c:	2900      	cmp	r1, #0
 800b20e:	d1f5      	bne.n	800b1fc <_printf_i+0x16c>
 800b210:	e7b9      	b.n	800b186 <_printf_i+0xf6>
 800b212:	6813      	ldr	r3, [r2, #0]
 800b214:	6825      	ldr	r5, [r4, #0]
 800b216:	6961      	ldr	r1, [r4, #20]
 800b218:	1d18      	adds	r0, r3, #4
 800b21a:	6010      	str	r0, [r2, #0]
 800b21c:	0628      	lsls	r0, r5, #24
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	d501      	bpl.n	800b226 <_printf_i+0x196>
 800b222:	6019      	str	r1, [r3, #0]
 800b224:	e002      	b.n	800b22c <_printf_i+0x19c>
 800b226:	066a      	lsls	r2, r5, #25
 800b228:	d5fb      	bpl.n	800b222 <_printf_i+0x192>
 800b22a:	8019      	strh	r1, [r3, #0]
 800b22c:	2300      	movs	r3, #0
 800b22e:	6123      	str	r3, [r4, #16]
 800b230:	4665      	mov	r5, ip
 800b232:	e7b9      	b.n	800b1a8 <_printf_i+0x118>
 800b234:	6813      	ldr	r3, [r2, #0]
 800b236:	1d19      	adds	r1, r3, #4
 800b238:	6011      	str	r1, [r2, #0]
 800b23a:	681d      	ldr	r5, [r3, #0]
 800b23c:	6862      	ldr	r2, [r4, #4]
 800b23e:	2100      	movs	r1, #0
 800b240:	4628      	mov	r0, r5
 800b242:	f7f4 ffdd 	bl	8000200 <memchr>
 800b246:	b108      	cbz	r0, 800b24c <_printf_i+0x1bc>
 800b248:	1b40      	subs	r0, r0, r5
 800b24a:	6060      	str	r0, [r4, #4]
 800b24c:	6863      	ldr	r3, [r4, #4]
 800b24e:	6123      	str	r3, [r4, #16]
 800b250:	2300      	movs	r3, #0
 800b252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b256:	e7a7      	b.n	800b1a8 <_printf_i+0x118>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	462a      	mov	r2, r5
 800b25c:	4639      	mov	r1, r7
 800b25e:	4630      	mov	r0, r6
 800b260:	47c0      	blx	r8
 800b262:	3001      	adds	r0, #1
 800b264:	d0aa      	beq.n	800b1bc <_printf_i+0x12c>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	079b      	lsls	r3, r3, #30
 800b26a:	d413      	bmi.n	800b294 <_printf_i+0x204>
 800b26c:	68e0      	ldr	r0, [r4, #12]
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	4298      	cmp	r0, r3
 800b272:	bfb8      	it	lt
 800b274:	4618      	movlt	r0, r3
 800b276:	e7a3      	b.n	800b1c0 <_printf_i+0x130>
 800b278:	2301      	movs	r3, #1
 800b27a:	464a      	mov	r2, r9
 800b27c:	4639      	mov	r1, r7
 800b27e:	4630      	mov	r0, r6
 800b280:	47c0      	blx	r8
 800b282:	3001      	adds	r0, #1
 800b284:	d09a      	beq.n	800b1bc <_printf_i+0x12c>
 800b286:	3501      	adds	r5, #1
 800b288:	68e3      	ldr	r3, [r4, #12]
 800b28a:	9a03      	ldr	r2, [sp, #12]
 800b28c:	1a9b      	subs	r3, r3, r2
 800b28e:	42ab      	cmp	r3, r5
 800b290:	dcf2      	bgt.n	800b278 <_printf_i+0x1e8>
 800b292:	e7eb      	b.n	800b26c <_printf_i+0x1dc>
 800b294:	2500      	movs	r5, #0
 800b296:	f104 0919 	add.w	r9, r4, #25
 800b29a:	e7f5      	b.n	800b288 <_printf_i+0x1f8>
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1ac      	bne.n	800b1fa <_printf_i+0x16a>
 800b2a0:	7803      	ldrb	r3, [r0, #0]
 800b2a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2aa:	e76c      	b.n	800b186 <_printf_i+0xf6>
 800b2ac:	0800d152 	.word	0x0800d152
 800b2b0:	0800d163 	.word	0x0800d163

0800b2b4 <iprintf>:
 800b2b4:	b40f      	push	{r0, r1, r2, r3}
 800b2b6:	4b0a      	ldr	r3, [pc, #40]	; (800b2e0 <iprintf+0x2c>)
 800b2b8:	b513      	push	{r0, r1, r4, lr}
 800b2ba:	681c      	ldr	r4, [r3, #0]
 800b2bc:	b124      	cbz	r4, 800b2c8 <iprintf+0x14>
 800b2be:	69a3      	ldr	r3, [r4, #24]
 800b2c0:	b913      	cbnz	r3, 800b2c8 <iprintf+0x14>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f001 f924 	bl	800c510 <__sinit>
 800b2c8:	ab05      	add	r3, sp, #20
 800b2ca:	9a04      	ldr	r2, [sp, #16]
 800b2cc:	68a1      	ldr	r1, [r4, #8]
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f001 fd2f 	bl	800cd34 <_vfiprintf_r>
 800b2d6:	b002      	add	sp, #8
 800b2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2dc:	b004      	add	sp, #16
 800b2de:	4770      	bx	lr
 800b2e0:	20000038 	.word	0x20000038

0800b2e4 <_puts_r>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	460e      	mov	r6, r1
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	b118      	cbz	r0, 800b2f4 <_puts_r+0x10>
 800b2ec:	6983      	ldr	r3, [r0, #24]
 800b2ee:	b90b      	cbnz	r3, 800b2f4 <_puts_r+0x10>
 800b2f0:	f001 f90e 	bl	800c510 <__sinit>
 800b2f4:	69ab      	ldr	r3, [r5, #24]
 800b2f6:	68ac      	ldr	r4, [r5, #8]
 800b2f8:	b913      	cbnz	r3, 800b300 <_puts_r+0x1c>
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f001 f908 	bl	800c510 <__sinit>
 800b300:	4b23      	ldr	r3, [pc, #140]	; (800b390 <_puts_r+0xac>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d117      	bne.n	800b336 <_puts_r+0x52>
 800b306:	686c      	ldr	r4, [r5, #4]
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	071b      	lsls	r3, r3, #28
 800b30c:	d51d      	bpl.n	800b34a <_puts_r+0x66>
 800b30e:	6923      	ldr	r3, [r4, #16]
 800b310:	b1db      	cbz	r3, 800b34a <_puts_r+0x66>
 800b312:	3e01      	subs	r6, #1
 800b314:	68a3      	ldr	r3, [r4, #8]
 800b316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b31a:	3b01      	subs	r3, #1
 800b31c:	60a3      	str	r3, [r4, #8]
 800b31e:	b9e9      	cbnz	r1, 800b35c <_puts_r+0x78>
 800b320:	2b00      	cmp	r3, #0
 800b322:	da2e      	bge.n	800b382 <_puts_r+0x9e>
 800b324:	4622      	mov	r2, r4
 800b326:	210a      	movs	r1, #10
 800b328:	4628      	mov	r0, r5
 800b32a:	f000 f8fd 	bl	800b528 <__swbuf_r>
 800b32e:	3001      	adds	r0, #1
 800b330:	d011      	beq.n	800b356 <_puts_r+0x72>
 800b332:	200a      	movs	r0, #10
 800b334:	e011      	b.n	800b35a <_puts_r+0x76>
 800b336:	4b17      	ldr	r3, [pc, #92]	; (800b394 <_puts_r+0xb0>)
 800b338:	429c      	cmp	r4, r3
 800b33a:	d101      	bne.n	800b340 <_puts_r+0x5c>
 800b33c:	68ac      	ldr	r4, [r5, #8]
 800b33e:	e7e3      	b.n	800b308 <_puts_r+0x24>
 800b340:	4b15      	ldr	r3, [pc, #84]	; (800b398 <_puts_r+0xb4>)
 800b342:	429c      	cmp	r4, r3
 800b344:	bf08      	it	eq
 800b346:	68ec      	ldreq	r4, [r5, #12]
 800b348:	e7de      	b.n	800b308 <_puts_r+0x24>
 800b34a:	4621      	mov	r1, r4
 800b34c:	4628      	mov	r0, r5
 800b34e:	f000 f93d 	bl	800b5cc <__swsetup_r>
 800b352:	2800      	cmp	r0, #0
 800b354:	d0dd      	beq.n	800b312 <_puts_r+0x2e>
 800b356:	f04f 30ff 	mov.w	r0, #4294967295
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	da04      	bge.n	800b36a <_puts_r+0x86>
 800b360:	69a2      	ldr	r2, [r4, #24]
 800b362:	429a      	cmp	r2, r3
 800b364:	dc06      	bgt.n	800b374 <_puts_r+0x90>
 800b366:	290a      	cmp	r1, #10
 800b368:	d004      	beq.n	800b374 <_puts_r+0x90>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	6022      	str	r2, [r4, #0]
 800b370:	7019      	strb	r1, [r3, #0]
 800b372:	e7cf      	b.n	800b314 <_puts_r+0x30>
 800b374:	4622      	mov	r2, r4
 800b376:	4628      	mov	r0, r5
 800b378:	f000 f8d6 	bl	800b528 <__swbuf_r>
 800b37c:	3001      	adds	r0, #1
 800b37e:	d1c9      	bne.n	800b314 <_puts_r+0x30>
 800b380:	e7e9      	b.n	800b356 <_puts_r+0x72>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	200a      	movs	r0, #10
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	6022      	str	r2, [r4, #0]
 800b38a:	7018      	strb	r0, [r3, #0]
 800b38c:	e7e5      	b.n	800b35a <_puts_r+0x76>
 800b38e:	bf00      	nop
 800b390:	0800d1a4 	.word	0x0800d1a4
 800b394:	0800d1c4 	.word	0x0800d1c4
 800b398:	0800d184 	.word	0x0800d184

0800b39c <puts>:
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <puts+0xc>)
 800b39e:	4601      	mov	r1, r0
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	f7ff bf9f 	b.w	800b2e4 <_puts_r>
 800b3a6:	bf00      	nop
 800b3a8:	20000038 	.word	0x20000038

0800b3ac <_sbrk_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4c06      	ldr	r4, [pc, #24]	; (800b3c8 <_sbrk_r+0x1c>)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	f7f6 fa34 	bl	8001824 <_sbrk>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d102      	bne.n	800b3c6 <_sbrk_r+0x1a>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	b103      	cbz	r3, 800b3c6 <_sbrk_r+0x1a>
 800b3c4:	602b      	str	r3, [r5, #0]
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	200009fc 	.word	0x200009fc

0800b3cc <setvbuf>:
 800b3cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3d0:	461d      	mov	r5, r3
 800b3d2:	4b51      	ldr	r3, [pc, #324]	; (800b518 <setvbuf+0x14c>)
 800b3d4:	681e      	ldr	r6, [r3, #0]
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	460f      	mov	r7, r1
 800b3da:	4690      	mov	r8, r2
 800b3dc:	b126      	cbz	r6, 800b3e8 <setvbuf+0x1c>
 800b3de:	69b3      	ldr	r3, [r6, #24]
 800b3e0:	b913      	cbnz	r3, 800b3e8 <setvbuf+0x1c>
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f001 f894 	bl	800c510 <__sinit>
 800b3e8:	4b4c      	ldr	r3, [pc, #304]	; (800b51c <setvbuf+0x150>)
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d152      	bne.n	800b494 <setvbuf+0xc8>
 800b3ee:	6874      	ldr	r4, [r6, #4]
 800b3f0:	f1b8 0f02 	cmp.w	r8, #2
 800b3f4:	d006      	beq.n	800b404 <setvbuf+0x38>
 800b3f6:	f1b8 0f01 	cmp.w	r8, #1
 800b3fa:	f200 8089 	bhi.w	800b510 <setvbuf+0x144>
 800b3fe:	2d00      	cmp	r5, #0
 800b400:	f2c0 8086 	blt.w	800b510 <setvbuf+0x144>
 800b404:	4621      	mov	r1, r4
 800b406:	4630      	mov	r0, r6
 800b408:	f001 f818 	bl	800c43c <_fflush_r>
 800b40c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b40e:	b141      	cbz	r1, 800b422 <setvbuf+0x56>
 800b410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b414:	4299      	cmp	r1, r3
 800b416:	d002      	beq.n	800b41e <setvbuf+0x52>
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff fa47 	bl	800a8ac <_free_r>
 800b41e:	2300      	movs	r3, #0
 800b420:	6363      	str	r3, [r4, #52]	; 0x34
 800b422:	2300      	movs	r3, #0
 800b424:	61a3      	str	r3, [r4, #24]
 800b426:	6063      	str	r3, [r4, #4]
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	061b      	lsls	r3, r3, #24
 800b42c:	d503      	bpl.n	800b436 <setvbuf+0x6a>
 800b42e:	6921      	ldr	r1, [r4, #16]
 800b430:	4630      	mov	r0, r6
 800b432:	f7ff fa3b 	bl	800a8ac <_free_r>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b43c:	f023 0303 	bic.w	r3, r3, #3
 800b440:	f1b8 0f02 	cmp.w	r8, #2
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	d05d      	beq.n	800b504 <setvbuf+0x138>
 800b448:	ab01      	add	r3, sp, #4
 800b44a:	466a      	mov	r2, sp
 800b44c:	4621      	mov	r1, r4
 800b44e:	4630      	mov	r0, r6
 800b450:	f001 f8f6 	bl	800c640 <__swhatbuf_r>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	4318      	orrs	r0, r3
 800b458:	81a0      	strh	r0, [r4, #12]
 800b45a:	bb2d      	cbnz	r5, 800b4a8 <setvbuf+0xdc>
 800b45c:	9d00      	ldr	r5, [sp, #0]
 800b45e:	4628      	mov	r0, r5
 800b460:	f7ff fa00 	bl	800a864 <malloc>
 800b464:	4607      	mov	r7, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d14e      	bne.n	800b508 <setvbuf+0x13c>
 800b46a:	f8dd 9000 	ldr.w	r9, [sp]
 800b46e:	45a9      	cmp	r9, r5
 800b470:	d13c      	bne.n	800b4ec <setvbuf+0x120>
 800b472:	f04f 30ff 	mov.w	r0, #4294967295
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f043 0302 	orr.w	r3, r3, #2
 800b47c:	81a3      	strh	r3, [r4, #12]
 800b47e:	2300      	movs	r3, #0
 800b480:	60a3      	str	r3, [r4, #8]
 800b482:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	6123      	str	r3, [r4, #16]
 800b48a:	2301      	movs	r3, #1
 800b48c:	6163      	str	r3, [r4, #20]
 800b48e:	b003      	add	sp, #12
 800b490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b494:	4b22      	ldr	r3, [pc, #136]	; (800b520 <setvbuf+0x154>)
 800b496:	429c      	cmp	r4, r3
 800b498:	d101      	bne.n	800b49e <setvbuf+0xd2>
 800b49a:	68b4      	ldr	r4, [r6, #8]
 800b49c:	e7a8      	b.n	800b3f0 <setvbuf+0x24>
 800b49e:	4b21      	ldr	r3, [pc, #132]	; (800b524 <setvbuf+0x158>)
 800b4a0:	429c      	cmp	r4, r3
 800b4a2:	bf08      	it	eq
 800b4a4:	68f4      	ldreq	r4, [r6, #12]
 800b4a6:	e7a3      	b.n	800b3f0 <setvbuf+0x24>
 800b4a8:	2f00      	cmp	r7, #0
 800b4aa:	d0d8      	beq.n	800b45e <setvbuf+0x92>
 800b4ac:	69b3      	ldr	r3, [r6, #24]
 800b4ae:	b913      	cbnz	r3, 800b4b6 <setvbuf+0xea>
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f001 f82d 	bl	800c510 <__sinit>
 800b4b6:	f1b8 0f01 	cmp.w	r8, #1
 800b4ba:	bf08      	it	eq
 800b4bc:	89a3      	ldrheq	r3, [r4, #12]
 800b4be:	6027      	str	r7, [r4, #0]
 800b4c0:	bf04      	itt	eq
 800b4c2:	f043 0301 	orreq.w	r3, r3, #1
 800b4c6:	81a3      	strheq	r3, [r4, #12]
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	f013 0008 	ands.w	r0, r3, #8
 800b4ce:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800b4d2:	d01b      	beq.n	800b50c <setvbuf+0x140>
 800b4d4:	f013 0001 	ands.w	r0, r3, #1
 800b4d8:	bf18      	it	ne
 800b4da:	426d      	negne	r5, r5
 800b4dc:	f04f 0300 	mov.w	r3, #0
 800b4e0:	bf1d      	ittte	ne
 800b4e2:	60a3      	strne	r3, [r4, #8]
 800b4e4:	61a5      	strne	r5, [r4, #24]
 800b4e6:	4618      	movne	r0, r3
 800b4e8:	60a5      	streq	r5, [r4, #8]
 800b4ea:	e7d0      	b.n	800b48e <setvbuf+0xc2>
 800b4ec:	4648      	mov	r0, r9
 800b4ee:	f7ff f9b9 	bl	800a864 <malloc>
 800b4f2:	4607      	mov	r7, r0
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d0bc      	beq.n	800b472 <setvbuf+0xa6>
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	464d      	mov	r5, r9
 800b502:	e7d3      	b.n	800b4ac <setvbuf+0xe0>
 800b504:	2000      	movs	r0, #0
 800b506:	e7b6      	b.n	800b476 <setvbuf+0xaa>
 800b508:	46a9      	mov	r9, r5
 800b50a:	e7f5      	b.n	800b4f8 <setvbuf+0x12c>
 800b50c:	60a0      	str	r0, [r4, #8]
 800b50e:	e7be      	b.n	800b48e <setvbuf+0xc2>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	e7bb      	b.n	800b48e <setvbuf+0xc2>
 800b516:	bf00      	nop
 800b518:	20000038 	.word	0x20000038
 800b51c:	0800d1a4 	.word	0x0800d1a4
 800b520:	0800d1c4 	.word	0x0800d1c4
 800b524:	0800d184 	.word	0x0800d184

0800b528 <__swbuf_r>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	460e      	mov	r6, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	4605      	mov	r5, r0
 800b530:	b118      	cbz	r0, 800b53a <__swbuf_r+0x12>
 800b532:	6983      	ldr	r3, [r0, #24]
 800b534:	b90b      	cbnz	r3, 800b53a <__swbuf_r+0x12>
 800b536:	f000 ffeb 	bl	800c510 <__sinit>
 800b53a:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <__swbuf_r+0x98>)
 800b53c:	429c      	cmp	r4, r3
 800b53e:	d12a      	bne.n	800b596 <__swbuf_r+0x6e>
 800b540:	686c      	ldr	r4, [r5, #4]
 800b542:	69a3      	ldr	r3, [r4, #24]
 800b544:	60a3      	str	r3, [r4, #8]
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	071a      	lsls	r2, r3, #28
 800b54a:	d52e      	bpl.n	800b5aa <__swbuf_r+0x82>
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	b363      	cbz	r3, 800b5aa <__swbuf_r+0x82>
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	6820      	ldr	r0, [r4, #0]
 800b554:	1ac0      	subs	r0, r0, r3
 800b556:	6963      	ldr	r3, [r4, #20]
 800b558:	b2f6      	uxtb	r6, r6
 800b55a:	4283      	cmp	r3, r0
 800b55c:	4637      	mov	r7, r6
 800b55e:	dc04      	bgt.n	800b56a <__swbuf_r+0x42>
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	f000 ff6a 	bl	800c43c <_fflush_r>
 800b568:	bb28      	cbnz	r0, 800b5b6 <__swbuf_r+0x8e>
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	60a3      	str	r3, [r4, #8]
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	6022      	str	r2, [r4, #0]
 800b576:	701e      	strb	r6, [r3, #0]
 800b578:	6963      	ldr	r3, [r4, #20]
 800b57a:	3001      	adds	r0, #1
 800b57c:	4283      	cmp	r3, r0
 800b57e:	d004      	beq.n	800b58a <__swbuf_r+0x62>
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	07db      	lsls	r3, r3, #31
 800b584:	d519      	bpl.n	800b5ba <__swbuf_r+0x92>
 800b586:	2e0a      	cmp	r6, #10
 800b588:	d117      	bne.n	800b5ba <__swbuf_r+0x92>
 800b58a:	4621      	mov	r1, r4
 800b58c:	4628      	mov	r0, r5
 800b58e:	f000 ff55 	bl	800c43c <_fflush_r>
 800b592:	b190      	cbz	r0, 800b5ba <__swbuf_r+0x92>
 800b594:	e00f      	b.n	800b5b6 <__swbuf_r+0x8e>
 800b596:	4b0b      	ldr	r3, [pc, #44]	; (800b5c4 <__swbuf_r+0x9c>)
 800b598:	429c      	cmp	r4, r3
 800b59a:	d101      	bne.n	800b5a0 <__swbuf_r+0x78>
 800b59c:	68ac      	ldr	r4, [r5, #8]
 800b59e:	e7d0      	b.n	800b542 <__swbuf_r+0x1a>
 800b5a0:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <__swbuf_r+0xa0>)
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	bf08      	it	eq
 800b5a6:	68ec      	ldreq	r4, [r5, #12]
 800b5a8:	e7cb      	b.n	800b542 <__swbuf_r+0x1a>
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f000 f80d 	bl	800b5cc <__swsetup_r>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d0cc      	beq.n	800b550 <__swbuf_r+0x28>
 800b5b6:	f04f 37ff 	mov.w	r7, #4294967295
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800d1a4 	.word	0x0800d1a4
 800b5c4:	0800d1c4 	.word	0x0800d1c4
 800b5c8:	0800d184 	.word	0x0800d184

0800b5cc <__swsetup_r>:
 800b5cc:	4b32      	ldr	r3, [pc, #200]	; (800b698 <__swsetup_r+0xcc>)
 800b5ce:	b570      	push	{r4, r5, r6, lr}
 800b5d0:	681d      	ldr	r5, [r3, #0]
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	b125      	cbz	r5, 800b5e2 <__swsetup_r+0x16>
 800b5d8:	69ab      	ldr	r3, [r5, #24]
 800b5da:	b913      	cbnz	r3, 800b5e2 <__swsetup_r+0x16>
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 ff97 	bl	800c510 <__sinit>
 800b5e2:	4b2e      	ldr	r3, [pc, #184]	; (800b69c <__swsetup_r+0xd0>)
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	d10f      	bne.n	800b608 <__swsetup_r+0x3c>
 800b5e8:	686c      	ldr	r4, [r5, #4]
 800b5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	0715      	lsls	r5, r2, #28
 800b5f2:	d42c      	bmi.n	800b64e <__swsetup_r+0x82>
 800b5f4:	06d0      	lsls	r0, r2, #27
 800b5f6:	d411      	bmi.n	800b61c <__swsetup_r+0x50>
 800b5f8:	2209      	movs	r2, #9
 800b5fa:	6032      	str	r2, [r6, #0]
 800b5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b600:	81a3      	strh	r3, [r4, #12]
 800b602:	f04f 30ff 	mov.w	r0, #4294967295
 800b606:	e03e      	b.n	800b686 <__swsetup_r+0xba>
 800b608:	4b25      	ldr	r3, [pc, #148]	; (800b6a0 <__swsetup_r+0xd4>)
 800b60a:	429c      	cmp	r4, r3
 800b60c:	d101      	bne.n	800b612 <__swsetup_r+0x46>
 800b60e:	68ac      	ldr	r4, [r5, #8]
 800b610:	e7eb      	b.n	800b5ea <__swsetup_r+0x1e>
 800b612:	4b24      	ldr	r3, [pc, #144]	; (800b6a4 <__swsetup_r+0xd8>)
 800b614:	429c      	cmp	r4, r3
 800b616:	bf08      	it	eq
 800b618:	68ec      	ldreq	r4, [r5, #12]
 800b61a:	e7e6      	b.n	800b5ea <__swsetup_r+0x1e>
 800b61c:	0751      	lsls	r1, r2, #29
 800b61e:	d512      	bpl.n	800b646 <__swsetup_r+0x7a>
 800b620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b622:	b141      	cbz	r1, 800b636 <__swsetup_r+0x6a>
 800b624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b628:	4299      	cmp	r1, r3
 800b62a:	d002      	beq.n	800b632 <__swsetup_r+0x66>
 800b62c:	4630      	mov	r0, r6
 800b62e:	f7ff f93d 	bl	800a8ac <_free_r>
 800b632:	2300      	movs	r3, #0
 800b634:	6363      	str	r3, [r4, #52]	; 0x34
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	2300      	movs	r3, #0
 800b640:	6063      	str	r3, [r4, #4]
 800b642:	6923      	ldr	r3, [r4, #16]
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	f043 0308 	orr.w	r3, r3, #8
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	b94b      	cbnz	r3, 800b666 <__swsetup_r+0x9a>
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b65c:	d003      	beq.n	800b666 <__swsetup_r+0x9a>
 800b65e:	4621      	mov	r1, r4
 800b660:	4630      	mov	r0, r6
 800b662:	f001 f811 	bl	800c688 <__smakebuf_r>
 800b666:	89a2      	ldrh	r2, [r4, #12]
 800b668:	f012 0301 	ands.w	r3, r2, #1
 800b66c:	d00c      	beq.n	800b688 <__swsetup_r+0xbc>
 800b66e:	2300      	movs	r3, #0
 800b670:	60a3      	str	r3, [r4, #8]
 800b672:	6963      	ldr	r3, [r4, #20]
 800b674:	425b      	negs	r3, r3
 800b676:	61a3      	str	r3, [r4, #24]
 800b678:	6923      	ldr	r3, [r4, #16]
 800b67a:	b953      	cbnz	r3, 800b692 <__swsetup_r+0xc6>
 800b67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b680:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b684:	d1ba      	bne.n	800b5fc <__swsetup_r+0x30>
 800b686:	bd70      	pop	{r4, r5, r6, pc}
 800b688:	0792      	lsls	r2, r2, #30
 800b68a:	bf58      	it	pl
 800b68c:	6963      	ldrpl	r3, [r4, #20]
 800b68e:	60a3      	str	r3, [r4, #8]
 800b690:	e7f2      	b.n	800b678 <__swsetup_r+0xac>
 800b692:	2000      	movs	r0, #0
 800b694:	e7f7      	b.n	800b686 <__swsetup_r+0xba>
 800b696:	bf00      	nop
 800b698:	20000038 	.word	0x20000038
 800b69c:	0800d1a4 	.word	0x0800d1a4
 800b6a0:	0800d1c4 	.word	0x0800d1c4
 800b6a4:	0800d184 	.word	0x0800d184

0800b6a8 <quorem>:
 800b6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	6903      	ldr	r3, [r0, #16]
 800b6ae:	690c      	ldr	r4, [r1, #16]
 800b6b0:	42a3      	cmp	r3, r4
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	f2c0 8082 	blt.w	800b7bc <quorem+0x114>
 800b6b8:	3c01      	subs	r4, #1
 800b6ba:	f101 0714 	add.w	r7, r1, #20
 800b6be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b6c2:	f100 0614 	add.w	r6, r0, #20
 800b6c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b6ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b6ce:	eb06 030c 	add.w	r3, r6, ip
 800b6d2:	3501      	adds	r5, #1
 800b6d4:	eb07 090c 	add.w	r9, r7, ip
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	fbb0 f5f5 	udiv	r5, r0, r5
 800b6de:	b395      	cbz	r5, 800b746 <quorem+0x9e>
 800b6e0:	f04f 0a00 	mov.w	sl, #0
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	46b6      	mov	lr, r6
 800b6e8:	46d3      	mov	fp, sl
 800b6ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6ee:	b293      	uxth	r3, r2
 800b6f0:	fb05 a303 	mla	r3, r5, r3, sl
 800b6f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	ebab 0303 	sub.w	r3, fp, r3
 800b6fe:	0c12      	lsrs	r2, r2, #16
 800b700:	f8de b000 	ldr.w	fp, [lr]
 800b704:	fb05 a202 	mla	r2, r5, r2, sl
 800b708:	fa13 f38b 	uxtah	r3, r3, fp
 800b70c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b710:	fa1f fb82 	uxth.w	fp, r2
 800b714:	f8de 2000 	ldr.w	r2, [lr]
 800b718:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b71c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b720:	b29b      	uxth	r3, r3
 800b722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b726:	4581      	cmp	r9, r0
 800b728:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b72c:	f84e 3b04 	str.w	r3, [lr], #4
 800b730:	d2db      	bcs.n	800b6ea <quorem+0x42>
 800b732:	f856 300c 	ldr.w	r3, [r6, ip]
 800b736:	b933      	cbnz	r3, 800b746 <quorem+0x9e>
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	3b04      	subs	r3, #4
 800b73c:	429e      	cmp	r6, r3
 800b73e:	461a      	mov	r2, r3
 800b740:	d330      	bcc.n	800b7a4 <quorem+0xfc>
 800b742:	f8c8 4010 	str.w	r4, [r8, #16]
 800b746:	4640      	mov	r0, r8
 800b748:	f001 f9f6 	bl	800cb38 <__mcmp>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	db25      	blt.n	800b79c <quorem+0xf4>
 800b750:	3501      	adds	r5, #1
 800b752:	4630      	mov	r0, r6
 800b754:	f04f 0c00 	mov.w	ip, #0
 800b758:	f857 2b04 	ldr.w	r2, [r7], #4
 800b75c:	f8d0 e000 	ldr.w	lr, [r0]
 800b760:	b293      	uxth	r3, r2
 800b762:	ebac 0303 	sub.w	r3, ip, r3
 800b766:	0c12      	lsrs	r2, r2, #16
 800b768:	fa13 f38e 	uxtah	r3, r3, lr
 800b76c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b770:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b774:	b29b      	uxth	r3, r3
 800b776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b77a:	45b9      	cmp	r9, r7
 800b77c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b780:	f840 3b04 	str.w	r3, [r0], #4
 800b784:	d2e8      	bcs.n	800b758 <quorem+0xb0>
 800b786:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b78a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b78e:	b92a      	cbnz	r2, 800b79c <quorem+0xf4>
 800b790:	3b04      	subs	r3, #4
 800b792:	429e      	cmp	r6, r3
 800b794:	461a      	mov	r2, r3
 800b796:	d30b      	bcc.n	800b7b0 <quorem+0x108>
 800b798:	f8c8 4010 	str.w	r4, [r8, #16]
 800b79c:	4628      	mov	r0, r5
 800b79e:	b003      	add	sp, #12
 800b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	3b04      	subs	r3, #4
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	d1ca      	bne.n	800b742 <quorem+0x9a>
 800b7ac:	3c01      	subs	r4, #1
 800b7ae:	e7c5      	b.n	800b73c <quorem+0x94>
 800b7b0:	6812      	ldr	r2, [r2, #0]
 800b7b2:	3b04      	subs	r3, #4
 800b7b4:	2a00      	cmp	r2, #0
 800b7b6:	d1ef      	bne.n	800b798 <quorem+0xf0>
 800b7b8:	3c01      	subs	r4, #1
 800b7ba:	e7ea      	b.n	800b792 <quorem+0xea>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e7ee      	b.n	800b79e <quorem+0xf6>

0800b7c0 <_dtoa_r>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	ec57 6b10 	vmov	r6, r7, d0
 800b7c8:	b097      	sub	sp, #92	; 0x5c
 800b7ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7cc:	9106      	str	r1, [sp, #24]
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7d2:	9312      	str	r3, [sp, #72]	; 0x48
 800b7d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7d8:	e9cd 6700 	strd	r6, r7, [sp]
 800b7dc:	b93d      	cbnz	r5, 800b7ee <_dtoa_r+0x2e>
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f7ff f840 	bl	800a864 <malloc>
 800b7e4:	6260      	str	r0, [r4, #36]	; 0x24
 800b7e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7ea:	6005      	str	r5, [r0, #0]
 800b7ec:	60c5      	str	r5, [r0, #12]
 800b7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7f0:	6819      	ldr	r1, [r3, #0]
 800b7f2:	b151      	cbz	r1, 800b80a <_dtoa_r+0x4a>
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	604a      	str	r2, [r1, #4]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	4093      	lsls	r3, r2
 800b7fc:	608b      	str	r3, [r1, #8]
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 ffb8 	bl	800c774 <_Bfree>
 800b804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	1e3b      	subs	r3, r7, #0
 800b80c:	bfbb      	ittet	lt
 800b80e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b812:	9301      	strlt	r3, [sp, #4]
 800b814:	2300      	movge	r3, #0
 800b816:	2201      	movlt	r2, #1
 800b818:	bfac      	ite	ge
 800b81a:	f8c8 3000 	strge.w	r3, [r8]
 800b81e:	f8c8 2000 	strlt.w	r2, [r8]
 800b822:	4baf      	ldr	r3, [pc, #700]	; (800bae0 <_dtoa_r+0x320>)
 800b824:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b828:	ea33 0308 	bics.w	r3, r3, r8
 800b82c:	d114      	bne.n	800b858 <_dtoa_r+0x98>
 800b82e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b830:	f242 730f 	movw	r3, #9999	; 0x270f
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	b923      	cbnz	r3, 800b844 <_dtoa_r+0x84>
 800b83a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b83e:	2800      	cmp	r0, #0
 800b840:	f000 8542 	beq.w	800c2c8 <_dtoa_r+0xb08>
 800b844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b846:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800baf4 <_dtoa_r+0x334>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 8544 	beq.w	800c2d8 <_dtoa_r+0xb18>
 800b850:	f10b 0303 	add.w	r3, fp, #3
 800b854:	f000 bd3e 	b.w	800c2d4 <_dtoa_r+0xb14>
 800b858:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b85c:	2200      	movs	r2, #0
 800b85e:	2300      	movs	r3, #0
 800b860:	4630      	mov	r0, r6
 800b862:	4639      	mov	r1, r7
 800b864:	f7f5 f940 	bl	8000ae8 <__aeabi_dcmpeq>
 800b868:	4681      	mov	r9, r0
 800b86a:	b168      	cbz	r0, 800b888 <_dtoa_r+0xc8>
 800b86c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b86e:	2301      	movs	r3, #1
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 8524 	beq.w	800c2c2 <_dtoa_r+0xb02>
 800b87a:	4b9a      	ldr	r3, [pc, #616]	; (800bae4 <_dtoa_r+0x324>)
 800b87c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b87e:	f103 3bff 	add.w	fp, r3, #4294967295
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	f000 bd28 	b.w	800c2d8 <_dtoa_r+0xb18>
 800b888:	aa14      	add	r2, sp, #80	; 0x50
 800b88a:	a915      	add	r1, sp, #84	; 0x54
 800b88c:	ec47 6b10 	vmov	d0, r6, r7
 800b890:	4620      	mov	r0, r4
 800b892:	f001 f9c8 	bl	800cc26 <__d2b>
 800b896:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b89a:	9004      	str	r0, [sp, #16]
 800b89c:	2d00      	cmp	r5, #0
 800b89e:	d07c      	beq.n	800b99a <_dtoa_r+0x1da>
 800b8a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b8a8:	46b2      	mov	sl, r6
 800b8aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b8ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4b8b      	ldr	r3, [pc, #556]	; (800bae8 <_dtoa_r+0x328>)
 800b8ba:	4650      	mov	r0, sl
 800b8bc:	4659      	mov	r1, fp
 800b8be:	f7f4 fcf3 	bl	80002a8 <__aeabi_dsub>
 800b8c2:	a381      	add	r3, pc, #516	; (adr r3, 800bac8 <_dtoa_r+0x308>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f7f4 fea6 	bl	8000618 <__aeabi_dmul>
 800b8cc:	a380      	add	r3, pc, #512	; (adr r3, 800bad0 <_dtoa_r+0x310>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f7f4 fceb 	bl	80002ac <__adddf3>
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	4628      	mov	r0, r5
 800b8da:	460f      	mov	r7, r1
 800b8dc:	f7f4 fe32 	bl	8000544 <__aeabi_i2d>
 800b8e0:	a37d      	add	r3, pc, #500	; (adr r3, 800bad8 <_dtoa_r+0x318>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f7f4 fe97 	bl	8000618 <__aeabi_dmul>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	4639      	mov	r1, r7
 800b8f2:	f7f4 fcdb 	bl	80002ac <__adddf3>
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460f      	mov	r7, r1
 800b8fa:	f7f5 f93d 	bl	8000b78 <__aeabi_d2iz>
 800b8fe:	2200      	movs	r2, #0
 800b900:	4682      	mov	sl, r0
 800b902:	2300      	movs	r3, #0
 800b904:	4630      	mov	r0, r6
 800b906:	4639      	mov	r1, r7
 800b908:	f7f5 f8f8 	bl	8000afc <__aeabi_dcmplt>
 800b90c:	b148      	cbz	r0, 800b922 <_dtoa_r+0x162>
 800b90e:	4650      	mov	r0, sl
 800b910:	f7f4 fe18 	bl	8000544 <__aeabi_i2d>
 800b914:	4632      	mov	r2, r6
 800b916:	463b      	mov	r3, r7
 800b918:	f7f5 f8e6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b91c:	b908      	cbnz	r0, 800b922 <_dtoa_r+0x162>
 800b91e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b922:	f1ba 0f16 	cmp.w	sl, #22
 800b926:	d859      	bhi.n	800b9dc <_dtoa_r+0x21c>
 800b928:	4970      	ldr	r1, [pc, #448]	; (800baec <_dtoa_r+0x32c>)
 800b92a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b92e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b932:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b936:	f7f5 f8ff 	bl	8000b38 <__aeabi_dcmpgt>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d050      	beq.n	800b9e0 <_dtoa_r+0x220>
 800b93e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b942:	2300      	movs	r3, #0
 800b944:	930f      	str	r3, [sp, #60]	; 0x3c
 800b946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b948:	1b5d      	subs	r5, r3, r5
 800b94a:	f1b5 0801 	subs.w	r8, r5, #1
 800b94e:	bf49      	itett	mi
 800b950:	f1c5 0301 	rsbmi	r3, r5, #1
 800b954:	2300      	movpl	r3, #0
 800b956:	9305      	strmi	r3, [sp, #20]
 800b958:	f04f 0800 	movmi.w	r8, #0
 800b95c:	bf58      	it	pl
 800b95e:	9305      	strpl	r3, [sp, #20]
 800b960:	f1ba 0f00 	cmp.w	sl, #0
 800b964:	db3e      	blt.n	800b9e4 <_dtoa_r+0x224>
 800b966:	2300      	movs	r3, #0
 800b968:	44d0      	add	r8, sl
 800b96a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b96e:	9307      	str	r3, [sp, #28]
 800b970:	9b06      	ldr	r3, [sp, #24]
 800b972:	2b09      	cmp	r3, #9
 800b974:	f200 8090 	bhi.w	800ba98 <_dtoa_r+0x2d8>
 800b978:	2b05      	cmp	r3, #5
 800b97a:	bfc4      	itt	gt
 800b97c:	3b04      	subgt	r3, #4
 800b97e:	9306      	strgt	r3, [sp, #24]
 800b980:	9b06      	ldr	r3, [sp, #24]
 800b982:	f1a3 0302 	sub.w	r3, r3, #2
 800b986:	bfcc      	ite	gt
 800b988:	2500      	movgt	r5, #0
 800b98a:	2501      	movle	r5, #1
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	f200 808f 	bhi.w	800bab0 <_dtoa_r+0x2f0>
 800b992:	e8df f003 	tbb	[pc, r3]
 800b996:	7f7d      	.short	0x7f7d
 800b998:	7131      	.short	0x7131
 800b99a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b99e:	441d      	add	r5, r3
 800b9a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b9a4:	2820      	cmp	r0, #32
 800b9a6:	dd13      	ble.n	800b9d0 <_dtoa_r+0x210>
 800b9a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b9ac:	9b00      	ldr	r3, [sp, #0]
 800b9ae:	fa08 f800 	lsl.w	r8, r8, r0
 800b9b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b9b6:	fa23 f000 	lsr.w	r0, r3, r0
 800b9ba:	ea48 0000 	orr.w	r0, r8, r0
 800b9be:	f7f4 fdb1 	bl	8000524 <__aeabi_ui2d>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	4682      	mov	sl, r0
 800b9c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b9ca:	3d01      	subs	r5, #1
 800b9cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9ce:	e772      	b.n	800b8b6 <_dtoa_r+0xf6>
 800b9d0:	9b00      	ldr	r3, [sp, #0]
 800b9d2:	f1c0 0020 	rsb	r0, r0, #32
 800b9d6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9da:	e7f0      	b.n	800b9be <_dtoa_r+0x1fe>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e7b1      	b.n	800b944 <_dtoa_r+0x184>
 800b9e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b9e2:	e7b0      	b.n	800b946 <_dtoa_r+0x186>
 800b9e4:	9b05      	ldr	r3, [sp, #20]
 800b9e6:	eba3 030a 	sub.w	r3, r3, sl
 800b9ea:	9305      	str	r3, [sp, #20]
 800b9ec:	f1ca 0300 	rsb	r3, sl, #0
 800b9f0:	9307      	str	r3, [sp, #28]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	930e      	str	r3, [sp, #56]	; 0x38
 800b9f6:	e7bb      	b.n	800b970 <_dtoa_r+0x1b0>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dd59      	ble.n	800bab6 <_dtoa_r+0x2f6>
 800ba02:	9302      	str	r3, [sp, #8]
 800ba04:	4699      	mov	r9, r3
 800ba06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba08:	2200      	movs	r2, #0
 800ba0a:	6072      	str	r2, [r6, #4]
 800ba0c:	2204      	movs	r2, #4
 800ba0e:	f102 0014 	add.w	r0, r2, #20
 800ba12:	4298      	cmp	r0, r3
 800ba14:	6871      	ldr	r1, [r6, #4]
 800ba16:	d953      	bls.n	800bac0 <_dtoa_r+0x300>
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 fe77 	bl	800c70c <_Balloc>
 800ba1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba20:	6030      	str	r0, [r6, #0]
 800ba22:	f1b9 0f0e 	cmp.w	r9, #14
 800ba26:	f8d3 b000 	ldr.w	fp, [r3]
 800ba2a:	f200 80e6 	bhi.w	800bbfa <_dtoa_r+0x43a>
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	f000 80e3 	beq.w	800bbfa <_dtoa_r+0x43a>
 800ba34:	ed9d 7b00 	vldr	d7, [sp]
 800ba38:	f1ba 0f00 	cmp.w	sl, #0
 800ba3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ba40:	dd74      	ble.n	800bb2c <_dtoa_r+0x36c>
 800ba42:	4a2a      	ldr	r2, [pc, #168]	; (800baec <_dtoa_r+0x32c>)
 800ba44:	f00a 030f 	and.w	r3, sl, #15
 800ba48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba4c:	ed93 7b00 	vldr	d7, [r3]
 800ba50:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ba54:	06f0      	lsls	r0, r6, #27
 800ba56:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ba5a:	d565      	bpl.n	800bb28 <_dtoa_r+0x368>
 800ba5c:	4b24      	ldr	r3, [pc, #144]	; (800baf0 <_dtoa_r+0x330>)
 800ba5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba66:	f7f4 ff01 	bl	800086c <__aeabi_ddiv>
 800ba6a:	e9cd 0100 	strd	r0, r1, [sp]
 800ba6e:	f006 060f 	and.w	r6, r6, #15
 800ba72:	2503      	movs	r5, #3
 800ba74:	4f1e      	ldr	r7, [pc, #120]	; (800baf0 <_dtoa_r+0x330>)
 800ba76:	e04c      	b.n	800bb12 <_dtoa_r+0x352>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba7e:	4453      	add	r3, sl
 800ba80:	f103 0901 	add.w	r9, r3, #1
 800ba84:	9302      	str	r3, [sp, #8]
 800ba86:	464b      	mov	r3, r9
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	bfb8      	it	lt
 800ba8c:	2301      	movlt	r3, #1
 800ba8e:	e7ba      	b.n	800ba06 <_dtoa_r+0x246>
 800ba90:	2300      	movs	r3, #0
 800ba92:	e7b2      	b.n	800b9fa <_dtoa_r+0x23a>
 800ba94:	2300      	movs	r3, #0
 800ba96:	e7f0      	b.n	800ba7a <_dtoa_r+0x2ba>
 800ba98:	2501      	movs	r5, #1
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	9306      	str	r3, [sp, #24]
 800ba9e:	950a      	str	r5, [sp, #40]	; 0x28
 800baa0:	f04f 33ff 	mov.w	r3, #4294967295
 800baa4:	9302      	str	r3, [sp, #8]
 800baa6:	4699      	mov	r9, r3
 800baa8:	2200      	movs	r2, #0
 800baaa:	2312      	movs	r3, #18
 800baac:	920b      	str	r2, [sp, #44]	; 0x2c
 800baae:	e7aa      	b.n	800ba06 <_dtoa_r+0x246>
 800bab0:	2301      	movs	r3, #1
 800bab2:	930a      	str	r3, [sp, #40]	; 0x28
 800bab4:	e7f4      	b.n	800baa0 <_dtoa_r+0x2e0>
 800bab6:	2301      	movs	r3, #1
 800bab8:	9302      	str	r3, [sp, #8]
 800baba:	4699      	mov	r9, r3
 800babc:	461a      	mov	r2, r3
 800babe:	e7f5      	b.n	800baac <_dtoa_r+0x2ec>
 800bac0:	3101      	adds	r1, #1
 800bac2:	6071      	str	r1, [r6, #4]
 800bac4:	0052      	lsls	r2, r2, #1
 800bac6:	e7a2      	b.n	800ba0e <_dtoa_r+0x24e>
 800bac8:	636f4361 	.word	0x636f4361
 800bacc:	3fd287a7 	.word	0x3fd287a7
 800bad0:	8b60c8b3 	.word	0x8b60c8b3
 800bad4:	3fc68a28 	.word	0x3fc68a28
 800bad8:	509f79fb 	.word	0x509f79fb
 800badc:	3fd34413 	.word	0x3fd34413
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	0800d151 	.word	0x0800d151
 800bae8:	3ff80000 	.word	0x3ff80000
 800baec:	0800d210 	.word	0x0800d210
 800baf0:	0800d1e8 	.word	0x0800d1e8
 800baf4:	0800d17d 	.word	0x0800d17d
 800baf8:	07f1      	lsls	r1, r6, #31
 800bafa:	d508      	bpl.n	800bb0e <_dtoa_r+0x34e>
 800bafc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb04:	f7f4 fd88 	bl	8000618 <__aeabi_dmul>
 800bb08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb0c:	3501      	adds	r5, #1
 800bb0e:	1076      	asrs	r6, r6, #1
 800bb10:	3708      	adds	r7, #8
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d1f0      	bne.n	800baf8 <_dtoa_r+0x338>
 800bb16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb1e:	f7f4 fea5 	bl	800086c <__aeabi_ddiv>
 800bb22:	e9cd 0100 	strd	r0, r1, [sp]
 800bb26:	e01a      	b.n	800bb5e <_dtoa_r+0x39e>
 800bb28:	2502      	movs	r5, #2
 800bb2a:	e7a3      	b.n	800ba74 <_dtoa_r+0x2b4>
 800bb2c:	f000 80a0 	beq.w	800bc70 <_dtoa_r+0x4b0>
 800bb30:	f1ca 0600 	rsb	r6, sl, #0
 800bb34:	4b9f      	ldr	r3, [pc, #636]	; (800bdb4 <_dtoa_r+0x5f4>)
 800bb36:	4fa0      	ldr	r7, [pc, #640]	; (800bdb8 <_dtoa_r+0x5f8>)
 800bb38:	f006 020f 	and.w	r2, r6, #15
 800bb3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb48:	f7f4 fd66 	bl	8000618 <__aeabi_dmul>
 800bb4c:	e9cd 0100 	strd	r0, r1, [sp]
 800bb50:	1136      	asrs	r6, r6, #4
 800bb52:	2300      	movs	r3, #0
 800bb54:	2502      	movs	r5, #2
 800bb56:	2e00      	cmp	r6, #0
 800bb58:	d17f      	bne.n	800bc5a <_dtoa_r+0x49a>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1e1      	bne.n	800bb22 <_dtoa_r+0x362>
 800bb5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 8087 	beq.w	800bc74 <_dtoa_r+0x4b4>
 800bb66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4b93      	ldr	r3, [pc, #588]	; (800bdbc <_dtoa_r+0x5fc>)
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 ffc3 	bl	8000afc <__aeabi_dcmplt>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d07c      	beq.n	800bc74 <_dtoa_r+0x4b4>
 800bb7a:	f1b9 0f00 	cmp.w	r9, #0
 800bb7e:	d079      	beq.n	800bc74 <_dtoa_r+0x4b4>
 800bb80:	9b02      	ldr	r3, [sp, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dd35      	ble.n	800bbf2 <_dtoa_r+0x432>
 800bb86:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bb8a:	9308      	str	r3, [sp, #32]
 800bb8c:	4639      	mov	r1, r7
 800bb8e:	2200      	movs	r2, #0
 800bb90:	4b8b      	ldr	r3, [pc, #556]	; (800bdc0 <_dtoa_r+0x600>)
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7f4 fd40 	bl	8000618 <__aeabi_dmul>
 800bb98:	e9cd 0100 	strd	r0, r1, [sp]
 800bb9c:	9f02      	ldr	r7, [sp, #8]
 800bb9e:	3501      	adds	r5, #1
 800bba0:	4628      	mov	r0, r5
 800bba2:	f7f4 fccf 	bl	8000544 <__aeabi_i2d>
 800bba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbaa:	f7f4 fd35 	bl	8000618 <__aeabi_dmul>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	4b84      	ldr	r3, [pc, #528]	; (800bdc4 <_dtoa_r+0x604>)
 800bbb2:	f7f4 fb7b 	bl	80002ac <__adddf3>
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	d15d      	bne.n	800bc7c <_dtoa_r+0x4bc>
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4b81      	ldr	r3, [pc, #516]	; (800bdc8 <_dtoa_r+0x608>)
 800bbc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbc8:	f7f4 fb6e 	bl	80002a8 <__aeabi_dsub>
 800bbcc:	462a      	mov	r2, r5
 800bbce:	4633      	mov	r3, r6
 800bbd0:	e9cd 0100 	strd	r0, r1, [sp]
 800bbd4:	f7f4 ffb0 	bl	8000b38 <__aeabi_dcmpgt>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	f040 8288 	bne.w	800c0ee <_dtoa_r+0x92e>
 800bbde:	462a      	mov	r2, r5
 800bbe0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bbe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbe8:	f7f4 ff88 	bl	8000afc <__aeabi_dcmplt>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	f040 827c 	bne.w	800c0ea <_dtoa_r+0x92a>
 800bbf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbf6:	e9cd 2300 	strd	r2, r3, [sp]
 800bbfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f2c0 8150 	blt.w	800bea2 <_dtoa_r+0x6e2>
 800bc02:	f1ba 0f0e 	cmp.w	sl, #14
 800bc06:	f300 814c 	bgt.w	800bea2 <_dtoa_r+0x6e2>
 800bc0a:	4b6a      	ldr	r3, [pc, #424]	; (800bdb4 <_dtoa_r+0x5f4>)
 800bc0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc10:	ed93 7b00 	vldr	d7, [r3]
 800bc14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc1c:	f280 80d8 	bge.w	800bdd0 <_dtoa_r+0x610>
 800bc20:	f1b9 0f00 	cmp.w	r9, #0
 800bc24:	f300 80d4 	bgt.w	800bdd0 <_dtoa_r+0x610>
 800bc28:	f040 825e 	bne.w	800c0e8 <_dtoa_r+0x928>
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4b66      	ldr	r3, [pc, #408]	; (800bdc8 <_dtoa_r+0x608>)
 800bc30:	ec51 0b17 	vmov	r0, r1, d7
 800bc34:	f7f4 fcf0 	bl	8000618 <__aeabi_dmul>
 800bc38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc3c:	f7f4 ff72 	bl	8000b24 <__aeabi_dcmpge>
 800bc40:	464f      	mov	r7, r9
 800bc42:	464e      	mov	r6, r9
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f040 8234 	bne.w	800c0b2 <_dtoa_r+0x8f2>
 800bc4a:	2331      	movs	r3, #49	; 0x31
 800bc4c:	f10b 0501 	add.w	r5, fp, #1
 800bc50:	f88b 3000 	strb.w	r3, [fp]
 800bc54:	f10a 0a01 	add.w	sl, sl, #1
 800bc58:	e22f      	b.n	800c0ba <_dtoa_r+0x8fa>
 800bc5a:	07f2      	lsls	r2, r6, #31
 800bc5c:	d505      	bpl.n	800bc6a <_dtoa_r+0x4aa>
 800bc5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc62:	f7f4 fcd9 	bl	8000618 <__aeabi_dmul>
 800bc66:	3501      	adds	r5, #1
 800bc68:	2301      	movs	r3, #1
 800bc6a:	1076      	asrs	r6, r6, #1
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	e772      	b.n	800bb56 <_dtoa_r+0x396>
 800bc70:	2502      	movs	r5, #2
 800bc72:	e774      	b.n	800bb5e <_dtoa_r+0x39e>
 800bc74:	f8cd a020 	str.w	sl, [sp, #32]
 800bc78:	464f      	mov	r7, r9
 800bc7a:	e791      	b.n	800bba0 <_dtoa_r+0x3e0>
 800bc7c:	4b4d      	ldr	r3, [pc, #308]	; (800bdb4 <_dtoa_r+0x5f4>)
 800bc7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d047      	beq.n	800bd1c <_dtoa_r+0x55c>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	2000      	movs	r0, #0
 800bc92:	494e      	ldr	r1, [pc, #312]	; (800bdcc <_dtoa_r+0x60c>)
 800bc94:	f7f4 fdea 	bl	800086c <__aeabi_ddiv>
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4633      	mov	r3, r6
 800bc9c:	f7f4 fb04 	bl	80002a8 <__aeabi_dsub>
 800bca0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bca4:	465d      	mov	r5, fp
 800bca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcaa:	f7f4 ff65 	bl	8000b78 <__aeabi_d2iz>
 800bcae:	4606      	mov	r6, r0
 800bcb0:	f7f4 fc48 	bl	8000544 <__aeabi_i2d>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcbc:	f7f4 faf4 	bl	80002a8 <__aeabi_dsub>
 800bcc0:	3630      	adds	r6, #48	; 0x30
 800bcc2:	f805 6b01 	strb.w	r6, [r5], #1
 800bcc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bcca:	e9cd 0100 	strd	r0, r1, [sp]
 800bcce:	f7f4 ff15 	bl	8000afc <__aeabi_dcmplt>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d163      	bne.n	800bd9e <_dtoa_r+0x5de>
 800bcd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcda:	2000      	movs	r0, #0
 800bcdc:	4937      	ldr	r1, [pc, #220]	; (800bdbc <_dtoa_r+0x5fc>)
 800bcde:	f7f4 fae3 	bl	80002a8 <__aeabi_dsub>
 800bce2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bce6:	f7f4 ff09 	bl	8000afc <__aeabi_dcmplt>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f040 80b7 	bne.w	800be5e <_dtoa_r+0x69e>
 800bcf0:	eba5 030b 	sub.w	r3, r5, fp
 800bcf4:	429f      	cmp	r7, r3
 800bcf6:	f77f af7c 	ble.w	800bbf2 <_dtoa_r+0x432>
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4b30      	ldr	r3, [pc, #192]	; (800bdc0 <_dtoa_r+0x600>)
 800bcfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd02:	f7f4 fc89 	bl	8000618 <__aeabi_dmul>
 800bd06:	2200      	movs	r2, #0
 800bd08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd0c:	4b2c      	ldr	r3, [pc, #176]	; (800bdc0 <_dtoa_r+0x600>)
 800bd0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd12:	f7f4 fc81 	bl	8000618 <__aeabi_dmul>
 800bd16:	e9cd 0100 	strd	r0, r1, [sp]
 800bd1a:	e7c4      	b.n	800bca6 <_dtoa_r+0x4e6>
 800bd1c:	462a      	mov	r2, r5
 800bd1e:	4633      	mov	r3, r6
 800bd20:	f7f4 fc7a 	bl	8000618 <__aeabi_dmul>
 800bd24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd28:	eb0b 0507 	add.w	r5, fp, r7
 800bd2c:	465e      	mov	r6, fp
 800bd2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd32:	f7f4 ff21 	bl	8000b78 <__aeabi_d2iz>
 800bd36:	4607      	mov	r7, r0
 800bd38:	f7f4 fc04 	bl	8000544 <__aeabi_i2d>
 800bd3c:	3730      	adds	r7, #48	; 0x30
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd46:	f7f4 faaf 	bl	80002a8 <__aeabi_dsub>
 800bd4a:	f806 7b01 	strb.w	r7, [r6], #1
 800bd4e:	42ae      	cmp	r6, r5
 800bd50:	e9cd 0100 	strd	r0, r1, [sp]
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	d126      	bne.n	800bda8 <_dtoa_r+0x5e8>
 800bd5a:	4b1c      	ldr	r3, [pc, #112]	; (800bdcc <_dtoa_r+0x60c>)
 800bd5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd60:	f7f4 faa4 	bl	80002ac <__adddf3>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd6c:	f7f4 fee4 	bl	8000b38 <__aeabi_dcmpgt>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d174      	bne.n	800be5e <_dtoa_r+0x69e>
 800bd74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd78:	2000      	movs	r0, #0
 800bd7a:	4914      	ldr	r1, [pc, #80]	; (800bdcc <_dtoa_r+0x60c>)
 800bd7c:	f7f4 fa94 	bl	80002a8 <__aeabi_dsub>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd88:	f7f4 feb8 	bl	8000afc <__aeabi_dcmplt>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f43f af30 	beq.w	800bbf2 <_dtoa_r+0x432>
 800bd92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd96:	2b30      	cmp	r3, #48	; 0x30
 800bd98:	f105 32ff 	add.w	r2, r5, #4294967295
 800bd9c:	d002      	beq.n	800bda4 <_dtoa_r+0x5e4>
 800bd9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bda2:	e04a      	b.n	800be3a <_dtoa_r+0x67a>
 800bda4:	4615      	mov	r5, r2
 800bda6:	e7f4      	b.n	800bd92 <_dtoa_r+0x5d2>
 800bda8:	4b05      	ldr	r3, [pc, #20]	; (800bdc0 <_dtoa_r+0x600>)
 800bdaa:	f7f4 fc35 	bl	8000618 <__aeabi_dmul>
 800bdae:	e9cd 0100 	strd	r0, r1, [sp]
 800bdb2:	e7bc      	b.n	800bd2e <_dtoa_r+0x56e>
 800bdb4:	0800d210 	.word	0x0800d210
 800bdb8:	0800d1e8 	.word	0x0800d1e8
 800bdbc:	3ff00000 	.word	0x3ff00000
 800bdc0:	40240000 	.word	0x40240000
 800bdc4:	401c0000 	.word	0x401c0000
 800bdc8:	40140000 	.word	0x40140000
 800bdcc:	3fe00000 	.word	0x3fe00000
 800bdd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bdd4:	465d      	mov	r5, fp
 800bdd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdda:	4630      	mov	r0, r6
 800bddc:	4639      	mov	r1, r7
 800bdde:	f7f4 fd45 	bl	800086c <__aeabi_ddiv>
 800bde2:	f7f4 fec9 	bl	8000b78 <__aeabi_d2iz>
 800bde6:	4680      	mov	r8, r0
 800bde8:	f7f4 fbac 	bl	8000544 <__aeabi_i2d>
 800bdec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdf0:	f7f4 fc12 	bl	8000618 <__aeabi_dmul>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800be00:	f7f4 fa52 	bl	80002a8 <__aeabi_dsub>
 800be04:	f805 6b01 	strb.w	r6, [r5], #1
 800be08:	eba5 060b 	sub.w	r6, r5, fp
 800be0c:	45b1      	cmp	r9, r6
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	d139      	bne.n	800be88 <_dtoa_r+0x6c8>
 800be14:	f7f4 fa4a 	bl	80002ac <__adddf3>
 800be18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be1c:	4606      	mov	r6, r0
 800be1e:	460f      	mov	r7, r1
 800be20:	f7f4 fe8a 	bl	8000b38 <__aeabi_dcmpgt>
 800be24:	b9c8      	cbnz	r0, 800be5a <_dtoa_r+0x69a>
 800be26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be2a:	4630      	mov	r0, r6
 800be2c:	4639      	mov	r1, r7
 800be2e:	f7f4 fe5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800be32:	b110      	cbz	r0, 800be3a <_dtoa_r+0x67a>
 800be34:	f018 0f01 	tst.w	r8, #1
 800be38:	d10f      	bne.n	800be5a <_dtoa_r+0x69a>
 800be3a:	9904      	ldr	r1, [sp, #16]
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 fc99 	bl	800c774 <_Bfree>
 800be42:	2300      	movs	r3, #0
 800be44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be46:	702b      	strb	r3, [r5, #0]
 800be48:	f10a 0301 	add.w	r3, sl, #1
 800be4c:	6013      	str	r3, [r2, #0]
 800be4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 8241 	beq.w	800c2d8 <_dtoa_r+0xb18>
 800be56:	601d      	str	r5, [r3, #0]
 800be58:	e23e      	b.n	800c2d8 <_dtoa_r+0xb18>
 800be5a:	f8cd a020 	str.w	sl, [sp, #32]
 800be5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be62:	2a39      	cmp	r2, #57	; 0x39
 800be64:	f105 33ff 	add.w	r3, r5, #4294967295
 800be68:	d108      	bne.n	800be7c <_dtoa_r+0x6bc>
 800be6a:	459b      	cmp	fp, r3
 800be6c:	d10a      	bne.n	800be84 <_dtoa_r+0x6c4>
 800be6e:	9b08      	ldr	r3, [sp, #32]
 800be70:	3301      	adds	r3, #1
 800be72:	9308      	str	r3, [sp, #32]
 800be74:	2330      	movs	r3, #48	; 0x30
 800be76:	f88b 3000 	strb.w	r3, [fp]
 800be7a:	465b      	mov	r3, fp
 800be7c:	781a      	ldrb	r2, [r3, #0]
 800be7e:	3201      	adds	r2, #1
 800be80:	701a      	strb	r2, [r3, #0]
 800be82:	e78c      	b.n	800bd9e <_dtoa_r+0x5de>
 800be84:	461d      	mov	r5, r3
 800be86:	e7ea      	b.n	800be5e <_dtoa_r+0x69e>
 800be88:	2200      	movs	r2, #0
 800be8a:	4b9b      	ldr	r3, [pc, #620]	; (800c0f8 <_dtoa_r+0x938>)
 800be8c:	f7f4 fbc4 	bl	8000618 <__aeabi_dmul>
 800be90:	2200      	movs	r2, #0
 800be92:	2300      	movs	r3, #0
 800be94:	4606      	mov	r6, r0
 800be96:	460f      	mov	r7, r1
 800be98:	f7f4 fe26 	bl	8000ae8 <__aeabi_dcmpeq>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d09a      	beq.n	800bdd6 <_dtoa_r+0x616>
 800bea0:	e7cb      	b.n	800be3a <_dtoa_r+0x67a>
 800bea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bea4:	2a00      	cmp	r2, #0
 800bea6:	f000 808b 	beq.w	800bfc0 <_dtoa_r+0x800>
 800beaa:	9a06      	ldr	r2, [sp, #24]
 800beac:	2a01      	cmp	r2, #1
 800beae:	dc6e      	bgt.n	800bf8e <_dtoa_r+0x7ce>
 800beb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800beb2:	2a00      	cmp	r2, #0
 800beb4:	d067      	beq.n	800bf86 <_dtoa_r+0x7c6>
 800beb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800beba:	9f07      	ldr	r7, [sp, #28]
 800bebc:	9d05      	ldr	r5, [sp, #20]
 800bebe:	9a05      	ldr	r2, [sp, #20]
 800bec0:	2101      	movs	r1, #1
 800bec2:	441a      	add	r2, r3
 800bec4:	4620      	mov	r0, r4
 800bec6:	9205      	str	r2, [sp, #20]
 800bec8:	4498      	add	r8, r3
 800beca:	f000 fcf3 	bl	800c8b4 <__i2b>
 800bece:	4606      	mov	r6, r0
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	dd0c      	ble.n	800beee <_dtoa_r+0x72e>
 800bed4:	f1b8 0f00 	cmp.w	r8, #0
 800bed8:	dd09      	ble.n	800beee <_dtoa_r+0x72e>
 800beda:	4545      	cmp	r5, r8
 800bedc:	9a05      	ldr	r2, [sp, #20]
 800bede:	462b      	mov	r3, r5
 800bee0:	bfa8      	it	ge
 800bee2:	4643      	movge	r3, r8
 800bee4:	1ad2      	subs	r2, r2, r3
 800bee6:	9205      	str	r2, [sp, #20]
 800bee8:	1aed      	subs	r5, r5, r3
 800beea:	eba8 0803 	sub.w	r8, r8, r3
 800beee:	9b07      	ldr	r3, [sp, #28]
 800bef0:	b1eb      	cbz	r3, 800bf2e <_dtoa_r+0x76e>
 800bef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d067      	beq.n	800bfc8 <_dtoa_r+0x808>
 800bef8:	b18f      	cbz	r7, 800bf1e <_dtoa_r+0x75e>
 800befa:	4631      	mov	r1, r6
 800befc:	463a      	mov	r2, r7
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 fd78 	bl	800c9f4 <__pow5mult>
 800bf04:	9a04      	ldr	r2, [sp, #16]
 800bf06:	4601      	mov	r1, r0
 800bf08:	4606      	mov	r6, r0
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f000 fcdb 	bl	800c8c6 <__multiply>
 800bf10:	9904      	ldr	r1, [sp, #16]
 800bf12:	9008      	str	r0, [sp, #32]
 800bf14:	4620      	mov	r0, r4
 800bf16:	f000 fc2d 	bl	800c774 <_Bfree>
 800bf1a:	9b08      	ldr	r3, [sp, #32]
 800bf1c:	9304      	str	r3, [sp, #16]
 800bf1e:	9b07      	ldr	r3, [sp, #28]
 800bf20:	1bda      	subs	r2, r3, r7
 800bf22:	d004      	beq.n	800bf2e <_dtoa_r+0x76e>
 800bf24:	9904      	ldr	r1, [sp, #16]
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 fd64 	bl	800c9f4 <__pow5mult>
 800bf2c:	9004      	str	r0, [sp, #16]
 800bf2e:	2101      	movs	r1, #1
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 fcbf 	bl	800c8b4 <__i2b>
 800bf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf38:	4607      	mov	r7, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 81d0 	beq.w	800c2e0 <_dtoa_r+0xb20>
 800bf40:	461a      	mov	r2, r3
 800bf42:	4601      	mov	r1, r0
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fd55 	bl	800c9f4 <__pow5mult>
 800bf4a:	9b06      	ldr	r3, [sp, #24]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	4607      	mov	r7, r0
 800bf50:	dc40      	bgt.n	800bfd4 <_dtoa_r+0x814>
 800bf52:	9b00      	ldr	r3, [sp, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d139      	bne.n	800bfcc <_dtoa_r+0x80c>
 800bf58:	9b01      	ldr	r3, [sp, #4]
 800bf5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d136      	bne.n	800bfd0 <_dtoa_r+0x810>
 800bf62:	9b01      	ldr	r3, [sp, #4]
 800bf64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf68:	0d1b      	lsrs	r3, r3, #20
 800bf6a:	051b      	lsls	r3, r3, #20
 800bf6c:	b12b      	cbz	r3, 800bf7a <_dtoa_r+0x7ba>
 800bf6e:	9b05      	ldr	r3, [sp, #20]
 800bf70:	3301      	adds	r3, #1
 800bf72:	9305      	str	r3, [sp, #20]
 800bf74:	f108 0801 	add.w	r8, r8, #1
 800bf78:	2301      	movs	r3, #1
 800bf7a:	9307      	str	r3, [sp, #28]
 800bf7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d12a      	bne.n	800bfd8 <_dtoa_r+0x818>
 800bf82:	2001      	movs	r0, #1
 800bf84:	e030      	b.n	800bfe8 <_dtoa_r+0x828>
 800bf86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf8c:	e795      	b.n	800beba <_dtoa_r+0x6fa>
 800bf8e:	9b07      	ldr	r3, [sp, #28]
 800bf90:	f109 37ff 	add.w	r7, r9, #4294967295
 800bf94:	42bb      	cmp	r3, r7
 800bf96:	bfbf      	itttt	lt
 800bf98:	9b07      	ldrlt	r3, [sp, #28]
 800bf9a:	9707      	strlt	r7, [sp, #28]
 800bf9c:	1afa      	sublt	r2, r7, r3
 800bf9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bfa0:	bfbb      	ittet	lt
 800bfa2:	189b      	addlt	r3, r3, r2
 800bfa4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bfa6:	1bdf      	subge	r7, r3, r7
 800bfa8:	2700      	movlt	r7, #0
 800bfaa:	f1b9 0f00 	cmp.w	r9, #0
 800bfae:	bfb5      	itete	lt
 800bfb0:	9b05      	ldrlt	r3, [sp, #20]
 800bfb2:	9d05      	ldrge	r5, [sp, #20]
 800bfb4:	eba3 0509 	sublt.w	r5, r3, r9
 800bfb8:	464b      	movge	r3, r9
 800bfba:	bfb8      	it	lt
 800bfbc:	2300      	movlt	r3, #0
 800bfbe:	e77e      	b.n	800bebe <_dtoa_r+0x6fe>
 800bfc0:	9f07      	ldr	r7, [sp, #28]
 800bfc2:	9d05      	ldr	r5, [sp, #20]
 800bfc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bfc6:	e783      	b.n	800bed0 <_dtoa_r+0x710>
 800bfc8:	9a07      	ldr	r2, [sp, #28]
 800bfca:	e7ab      	b.n	800bf24 <_dtoa_r+0x764>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e7d4      	b.n	800bf7a <_dtoa_r+0x7ba>
 800bfd0:	9b00      	ldr	r3, [sp, #0]
 800bfd2:	e7d2      	b.n	800bf7a <_dtoa_r+0x7ba>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9307      	str	r3, [sp, #28]
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bfde:	6918      	ldr	r0, [r3, #16]
 800bfe0:	f000 fc1a 	bl	800c818 <__hi0bits>
 800bfe4:	f1c0 0020 	rsb	r0, r0, #32
 800bfe8:	4440      	add	r0, r8
 800bfea:	f010 001f 	ands.w	r0, r0, #31
 800bfee:	d047      	beq.n	800c080 <_dtoa_r+0x8c0>
 800bff0:	f1c0 0320 	rsb	r3, r0, #32
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	dd3b      	ble.n	800c070 <_dtoa_r+0x8b0>
 800bff8:	9b05      	ldr	r3, [sp, #20]
 800bffa:	f1c0 001c 	rsb	r0, r0, #28
 800bffe:	4403      	add	r3, r0
 800c000:	9305      	str	r3, [sp, #20]
 800c002:	4405      	add	r5, r0
 800c004:	4480      	add	r8, r0
 800c006:	9b05      	ldr	r3, [sp, #20]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	dd05      	ble.n	800c018 <_dtoa_r+0x858>
 800c00c:	461a      	mov	r2, r3
 800c00e:	9904      	ldr	r1, [sp, #16]
 800c010:	4620      	mov	r0, r4
 800c012:	f000 fd3d 	bl	800ca90 <__lshift>
 800c016:	9004      	str	r0, [sp, #16]
 800c018:	f1b8 0f00 	cmp.w	r8, #0
 800c01c:	dd05      	ble.n	800c02a <_dtoa_r+0x86a>
 800c01e:	4639      	mov	r1, r7
 800c020:	4642      	mov	r2, r8
 800c022:	4620      	mov	r0, r4
 800c024:	f000 fd34 	bl	800ca90 <__lshift>
 800c028:	4607      	mov	r7, r0
 800c02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c02c:	b353      	cbz	r3, 800c084 <_dtoa_r+0x8c4>
 800c02e:	4639      	mov	r1, r7
 800c030:	9804      	ldr	r0, [sp, #16]
 800c032:	f000 fd81 	bl	800cb38 <__mcmp>
 800c036:	2800      	cmp	r0, #0
 800c038:	da24      	bge.n	800c084 <_dtoa_r+0x8c4>
 800c03a:	2300      	movs	r3, #0
 800c03c:	220a      	movs	r2, #10
 800c03e:	9904      	ldr	r1, [sp, #16]
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fbae 	bl	800c7a2 <__multadd>
 800c046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c048:	9004      	str	r0, [sp, #16]
 800c04a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 814d 	beq.w	800c2ee <_dtoa_r+0xb2e>
 800c054:	2300      	movs	r3, #0
 800c056:	4631      	mov	r1, r6
 800c058:	220a      	movs	r2, #10
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 fba1 	bl	800c7a2 <__multadd>
 800c060:	9b02      	ldr	r3, [sp, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	4606      	mov	r6, r0
 800c066:	dc4f      	bgt.n	800c108 <_dtoa_r+0x948>
 800c068:	9b06      	ldr	r3, [sp, #24]
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	dd4c      	ble.n	800c108 <_dtoa_r+0x948>
 800c06e:	e011      	b.n	800c094 <_dtoa_r+0x8d4>
 800c070:	d0c9      	beq.n	800c006 <_dtoa_r+0x846>
 800c072:	9a05      	ldr	r2, [sp, #20]
 800c074:	331c      	adds	r3, #28
 800c076:	441a      	add	r2, r3
 800c078:	9205      	str	r2, [sp, #20]
 800c07a:	441d      	add	r5, r3
 800c07c:	4498      	add	r8, r3
 800c07e:	e7c2      	b.n	800c006 <_dtoa_r+0x846>
 800c080:	4603      	mov	r3, r0
 800c082:	e7f6      	b.n	800c072 <_dtoa_r+0x8b2>
 800c084:	f1b9 0f00 	cmp.w	r9, #0
 800c088:	dc38      	bgt.n	800c0fc <_dtoa_r+0x93c>
 800c08a:	9b06      	ldr	r3, [sp, #24]
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	dd35      	ble.n	800c0fc <_dtoa_r+0x93c>
 800c090:	f8cd 9008 	str.w	r9, [sp, #8]
 800c094:	9b02      	ldr	r3, [sp, #8]
 800c096:	b963      	cbnz	r3, 800c0b2 <_dtoa_r+0x8f2>
 800c098:	4639      	mov	r1, r7
 800c09a:	2205      	movs	r2, #5
 800c09c:	4620      	mov	r0, r4
 800c09e:	f000 fb80 	bl	800c7a2 <__multadd>
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	9804      	ldr	r0, [sp, #16]
 800c0a8:	f000 fd46 	bl	800cb38 <__mcmp>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	f73f adcc 	bgt.w	800bc4a <_dtoa_r+0x48a>
 800c0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b4:	465d      	mov	r5, fp
 800c0b6:	ea6f 0a03 	mvn.w	sl, r3
 800c0ba:	f04f 0900 	mov.w	r9, #0
 800c0be:	4639      	mov	r1, r7
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 fb57 	bl	800c774 <_Bfree>
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	f43f aeb7 	beq.w	800be3a <_dtoa_r+0x67a>
 800c0cc:	f1b9 0f00 	cmp.w	r9, #0
 800c0d0:	d005      	beq.n	800c0de <_dtoa_r+0x91e>
 800c0d2:	45b1      	cmp	r9, r6
 800c0d4:	d003      	beq.n	800c0de <_dtoa_r+0x91e>
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f000 fb4b 	bl	800c774 <_Bfree>
 800c0de:	4631      	mov	r1, r6
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fb47 	bl	800c774 <_Bfree>
 800c0e6:	e6a8      	b.n	800be3a <_dtoa_r+0x67a>
 800c0e8:	2700      	movs	r7, #0
 800c0ea:	463e      	mov	r6, r7
 800c0ec:	e7e1      	b.n	800c0b2 <_dtoa_r+0x8f2>
 800c0ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c0f2:	463e      	mov	r6, r7
 800c0f4:	e5a9      	b.n	800bc4a <_dtoa_r+0x48a>
 800c0f6:	bf00      	nop
 800c0f8:	40240000 	.word	0x40240000
 800c0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 80fa 	beq.w	800c2fc <_dtoa_r+0xb3c>
 800c108:	2d00      	cmp	r5, #0
 800c10a:	dd05      	ble.n	800c118 <_dtoa_r+0x958>
 800c10c:	4631      	mov	r1, r6
 800c10e:	462a      	mov	r2, r5
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fcbd 	bl	800ca90 <__lshift>
 800c116:	4606      	mov	r6, r0
 800c118:	9b07      	ldr	r3, [sp, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d04c      	beq.n	800c1b8 <_dtoa_r+0x9f8>
 800c11e:	6871      	ldr	r1, [r6, #4]
 800c120:	4620      	mov	r0, r4
 800c122:	f000 faf3 	bl	800c70c <_Balloc>
 800c126:	6932      	ldr	r2, [r6, #16]
 800c128:	3202      	adds	r2, #2
 800c12a:	4605      	mov	r5, r0
 800c12c:	0092      	lsls	r2, r2, #2
 800c12e:	f106 010c 	add.w	r1, r6, #12
 800c132:	300c      	adds	r0, #12
 800c134:	f7fe fba6 	bl	800a884 <memcpy>
 800c138:	2201      	movs	r2, #1
 800c13a:	4629      	mov	r1, r5
 800c13c:	4620      	mov	r0, r4
 800c13e:	f000 fca7 	bl	800ca90 <__lshift>
 800c142:	9b00      	ldr	r3, [sp, #0]
 800c144:	f8cd b014 	str.w	fp, [sp, #20]
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	46b1      	mov	r9, r6
 800c14e:	9307      	str	r3, [sp, #28]
 800c150:	4606      	mov	r6, r0
 800c152:	4639      	mov	r1, r7
 800c154:	9804      	ldr	r0, [sp, #16]
 800c156:	f7ff faa7 	bl	800b6a8 <quorem>
 800c15a:	4649      	mov	r1, r9
 800c15c:	4605      	mov	r5, r0
 800c15e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c162:	9804      	ldr	r0, [sp, #16]
 800c164:	f000 fce8 	bl	800cb38 <__mcmp>
 800c168:	4632      	mov	r2, r6
 800c16a:	9000      	str	r0, [sp, #0]
 800c16c:	4639      	mov	r1, r7
 800c16e:	4620      	mov	r0, r4
 800c170:	f000 fcfc 	bl	800cb6c <__mdiff>
 800c174:	68c3      	ldr	r3, [r0, #12]
 800c176:	4602      	mov	r2, r0
 800c178:	bb03      	cbnz	r3, 800c1bc <_dtoa_r+0x9fc>
 800c17a:	4601      	mov	r1, r0
 800c17c:	9008      	str	r0, [sp, #32]
 800c17e:	9804      	ldr	r0, [sp, #16]
 800c180:	f000 fcda 	bl	800cb38 <__mcmp>
 800c184:	9a08      	ldr	r2, [sp, #32]
 800c186:	4603      	mov	r3, r0
 800c188:	4611      	mov	r1, r2
 800c18a:	4620      	mov	r0, r4
 800c18c:	9308      	str	r3, [sp, #32]
 800c18e:	f000 faf1 	bl	800c774 <_Bfree>
 800c192:	9b08      	ldr	r3, [sp, #32]
 800c194:	b9a3      	cbnz	r3, 800c1c0 <_dtoa_r+0xa00>
 800c196:	9a06      	ldr	r2, [sp, #24]
 800c198:	b992      	cbnz	r2, 800c1c0 <_dtoa_r+0xa00>
 800c19a:	9a07      	ldr	r2, [sp, #28]
 800c19c:	b982      	cbnz	r2, 800c1c0 <_dtoa_r+0xa00>
 800c19e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c1a2:	d029      	beq.n	800c1f8 <_dtoa_r+0xa38>
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dd01      	ble.n	800c1ae <_dtoa_r+0x9ee>
 800c1aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c1ae:	9b05      	ldr	r3, [sp, #20]
 800c1b0:	1c5d      	adds	r5, r3, #1
 800c1b2:	f883 8000 	strb.w	r8, [r3]
 800c1b6:	e782      	b.n	800c0be <_dtoa_r+0x8fe>
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	e7c2      	b.n	800c142 <_dtoa_r+0x982>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e7e3      	b.n	800c188 <_dtoa_r+0x9c8>
 800c1c0:	9a00      	ldr	r2, [sp, #0]
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	db04      	blt.n	800c1d0 <_dtoa_r+0xa10>
 800c1c6:	d125      	bne.n	800c214 <_dtoa_r+0xa54>
 800c1c8:	9a06      	ldr	r2, [sp, #24]
 800c1ca:	bb1a      	cbnz	r2, 800c214 <_dtoa_r+0xa54>
 800c1cc:	9a07      	ldr	r2, [sp, #28]
 800c1ce:	bb0a      	cbnz	r2, 800c214 <_dtoa_r+0xa54>
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	ddec      	ble.n	800c1ae <_dtoa_r+0x9ee>
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	9904      	ldr	r1, [sp, #16]
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fc59 	bl	800ca90 <__lshift>
 800c1de:	4639      	mov	r1, r7
 800c1e0:	9004      	str	r0, [sp, #16]
 800c1e2:	f000 fca9 	bl	800cb38 <__mcmp>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	dc03      	bgt.n	800c1f2 <_dtoa_r+0xa32>
 800c1ea:	d1e0      	bne.n	800c1ae <_dtoa_r+0x9ee>
 800c1ec:	f018 0f01 	tst.w	r8, #1
 800c1f0:	d0dd      	beq.n	800c1ae <_dtoa_r+0x9ee>
 800c1f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c1f6:	d1d8      	bne.n	800c1aa <_dtoa_r+0x9ea>
 800c1f8:	9b05      	ldr	r3, [sp, #20]
 800c1fa:	9a05      	ldr	r2, [sp, #20]
 800c1fc:	1c5d      	adds	r5, r3, #1
 800c1fe:	2339      	movs	r3, #57	; 0x39
 800c200:	7013      	strb	r3, [r2, #0]
 800c202:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c206:	2b39      	cmp	r3, #57	; 0x39
 800c208:	f105 32ff 	add.w	r2, r5, #4294967295
 800c20c:	d04f      	beq.n	800c2ae <_dtoa_r+0xaee>
 800c20e:	3301      	adds	r3, #1
 800c210:	7013      	strb	r3, [r2, #0]
 800c212:	e754      	b.n	800c0be <_dtoa_r+0x8fe>
 800c214:	9a05      	ldr	r2, [sp, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f102 0501 	add.w	r5, r2, #1
 800c21c:	dd06      	ble.n	800c22c <_dtoa_r+0xa6c>
 800c21e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c222:	d0e9      	beq.n	800c1f8 <_dtoa_r+0xa38>
 800c224:	f108 0801 	add.w	r8, r8, #1
 800c228:	9b05      	ldr	r3, [sp, #20]
 800c22a:	e7c2      	b.n	800c1b2 <_dtoa_r+0x9f2>
 800c22c:	9a02      	ldr	r2, [sp, #8]
 800c22e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c232:	eba5 030b 	sub.w	r3, r5, fp
 800c236:	4293      	cmp	r3, r2
 800c238:	d021      	beq.n	800c27e <_dtoa_r+0xabe>
 800c23a:	2300      	movs	r3, #0
 800c23c:	220a      	movs	r2, #10
 800c23e:	9904      	ldr	r1, [sp, #16]
 800c240:	4620      	mov	r0, r4
 800c242:	f000 faae 	bl	800c7a2 <__multadd>
 800c246:	45b1      	cmp	r9, r6
 800c248:	9004      	str	r0, [sp, #16]
 800c24a:	f04f 0300 	mov.w	r3, #0
 800c24e:	f04f 020a 	mov.w	r2, #10
 800c252:	4649      	mov	r1, r9
 800c254:	4620      	mov	r0, r4
 800c256:	d105      	bne.n	800c264 <_dtoa_r+0xaa4>
 800c258:	f000 faa3 	bl	800c7a2 <__multadd>
 800c25c:	4681      	mov	r9, r0
 800c25e:	4606      	mov	r6, r0
 800c260:	9505      	str	r5, [sp, #20]
 800c262:	e776      	b.n	800c152 <_dtoa_r+0x992>
 800c264:	f000 fa9d 	bl	800c7a2 <__multadd>
 800c268:	4631      	mov	r1, r6
 800c26a:	4681      	mov	r9, r0
 800c26c:	2300      	movs	r3, #0
 800c26e:	220a      	movs	r2, #10
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fa96 	bl	800c7a2 <__multadd>
 800c276:	4606      	mov	r6, r0
 800c278:	e7f2      	b.n	800c260 <_dtoa_r+0xaa0>
 800c27a:	f04f 0900 	mov.w	r9, #0
 800c27e:	2201      	movs	r2, #1
 800c280:	9904      	ldr	r1, [sp, #16]
 800c282:	4620      	mov	r0, r4
 800c284:	f000 fc04 	bl	800ca90 <__lshift>
 800c288:	4639      	mov	r1, r7
 800c28a:	9004      	str	r0, [sp, #16]
 800c28c:	f000 fc54 	bl	800cb38 <__mcmp>
 800c290:	2800      	cmp	r0, #0
 800c292:	dcb6      	bgt.n	800c202 <_dtoa_r+0xa42>
 800c294:	d102      	bne.n	800c29c <_dtoa_r+0xadc>
 800c296:	f018 0f01 	tst.w	r8, #1
 800c29a:	d1b2      	bne.n	800c202 <_dtoa_r+0xa42>
 800c29c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2a0:	2b30      	cmp	r3, #48	; 0x30
 800c2a2:	f105 32ff 	add.w	r2, r5, #4294967295
 800c2a6:	f47f af0a 	bne.w	800c0be <_dtoa_r+0x8fe>
 800c2aa:	4615      	mov	r5, r2
 800c2ac:	e7f6      	b.n	800c29c <_dtoa_r+0xadc>
 800c2ae:	4593      	cmp	fp, r2
 800c2b0:	d105      	bne.n	800c2be <_dtoa_r+0xafe>
 800c2b2:	2331      	movs	r3, #49	; 0x31
 800c2b4:	f10a 0a01 	add.w	sl, sl, #1
 800c2b8:	f88b 3000 	strb.w	r3, [fp]
 800c2bc:	e6ff      	b.n	800c0be <_dtoa_r+0x8fe>
 800c2be:	4615      	mov	r5, r2
 800c2c0:	e79f      	b.n	800c202 <_dtoa_r+0xa42>
 800c2c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c328 <_dtoa_r+0xb68>
 800c2c6:	e007      	b.n	800c2d8 <_dtoa_r+0xb18>
 800c2c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c32c <_dtoa_r+0xb6c>
 800c2ce:	b11b      	cbz	r3, 800c2d8 <_dtoa_r+0xb18>
 800c2d0:	f10b 0308 	add.w	r3, fp, #8
 800c2d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2d6:	6013      	str	r3, [r2, #0]
 800c2d8:	4658      	mov	r0, fp
 800c2da:	b017      	add	sp, #92	; 0x5c
 800c2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e0:	9b06      	ldr	r3, [sp, #24]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	f77f ae35 	ble.w	800bf52 <_dtoa_r+0x792>
 800c2e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2ea:	9307      	str	r3, [sp, #28]
 800c2ec:	e649      	b.n	800bf82 <_dtoa_r+0x7c2>
 800c2ee:	9b02      	ldr	r3, [sp, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	dc03      	bgt.n	800c2fc <_dtoa_r+0xb3c>
 800c2f4:	9b06      	ldr	r3, [sp, #24]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	f73f aecc 	bgt.w	800c094 <_dtoa_r+0x8d4>
 800c2fc:	465d      	mov	r5, fp
 800c2fe:	4639      	mov	r1, r7
 800c300:	9804      	ldr	r0, [sp, #16]
 800c302:	f7ff f9d1 	bl	800b6a8 <quorem>
 800c306:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c30a:	f805 8b01 	strb.w	r8, [r5], #1
 800c30e:	9a02      	ldr	r2, [sp, #8]
 800c310:	eba5 030b 	sub.w	r3, r5, fp
 800c314:	429a      	cmp	r2, r3
 800c316:	ddb0      	ble.n	800c27a <_dtoa_r+0xaba>
 800c318:	2300      	movs	r3, #0
 800c31a:	220a      	movs	r2, #10
 800c31c:	9904      	ldr	r1, [sp, #16]
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 fa3f 	bl	800c7a2 <__multadd>
 800c324:	9004      	str	r0, [sp, #16]
 800c326:	e7ea      	b.n	800c2fe <_dtoa_r+0xb3e>
 800c328:	0800d150 	.word	0x0800d150
 800c32c:	0800d174 	.word	0x0800d174

0800c330 <__sflush_r>:
 800c330:	898a      	ldrh	r2, [r1, #12]
 800c332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c336:	4605      	mov	r5, r0
 800c338:	0710      	lsls	r0, r2, #28
 800c33a:	460c      	mov	r4, r1
 800c33c:	d458      	bmi.n	800c3f0 <__sflush_r+0xc0>
 800c33e:	684b      	ldr	r3, [r1, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	dc05      	bgt.n	800c350 <__sflush_r+0x20>
 800c344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c346:	2b00      	cmp	r3, #0
 800c348:	dc02      	bgt.n	800c350 <__sflush_r+0x20>
 800c34a:	2000      	movs	r0, #0
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c352:	2e00      	cmp	r6, #0
 800c354:	d0f9      	beq.n	800c34a <__sflush_r+0x1a>
 800c356:	2300      	movs	r3, #0
 800c358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c35c:	682f      	ldr	r7, [r5, #0]
 800c35e:	6a21      	ldr	r1, [r4, #32]
 800c360:	602b      	str	r3, [r5, #0]
 800c362:	d032      	beq.n	800c3ca <__sflush_r+0x9a>
 800c364:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	075a      	lsls	r2, r3, #29
 800c36a:	d505      	bpl.n	800c378 <__sflush_r+0x48>
 800c36c:	6863      	ldr	r3, [r4, #4]
 800c36e:	1ac0      	subs	r0, r0, r3
 800c370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c372:	b10b      	cbz	r3, 800c378 <__sflush_r+0x48>
 800c374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c376:	1ac0      	subs	r0, r0, r3
 800c378:	2300      	movs	r3, #0
 800c37a:	4602      	mov	r2, r0
 800c37c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c37e:	6a21      	ldr	r1, [r4, #32]
 800c380:	4628      	mov	r0, r5
 800c382:	47b0      	blx	r6
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	d106      	bne.n	800c398 <__sflush_r+0x68>
 800c38a:	6829      	ldr	r1, [r5, #0]
 800c38c:	291d      	cmp	r1, #29
 800c38e:	d848      	bhi.n	800c422 <__sflush_r+0xf2>
 800c390:	4a29      	ldr	r2, [pc, #164]	; (800c438 <__sflush_r+0x108>)
 800c392:	40ca      	lsrs	r2, r1
 800c394:	07d6      	lsls	r6, r2, #31
 800c396:	d544      	bpl.n	800c422 <__sflush_r+0xf2>
 800c398:	2200      	movs	r2, #0
 800c39a:	6062      	str	r2, [r4, #4]
 800c39c:	04d9      	lsls	r1, r3, #19
 800c39e:	6922      	ldr	r2, [r4, #16]
 800c3a0:	6022      	str	r2, [r4, #0]
 800c3a2:	d504      	bpl.n	800c3ae <__sflush_r+0x7e>
 800c3a4:	1c42      	adds	r2, r0, #1
 800c3a6:	d101      	bne.n	800c3ac <__sflush_r+0x7c>
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	b903      	cbnz	r3, 800c3ae <__sflush_r+0x7e>
 800c3ac:	6560      	str	r0, [r4, #84]	; 0x54
 800c3ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3b0:	602f      	str	r7, [r5, #0]
 800c3b2:	2900      	cmp	r1, #0
 800c3b4:	d0c9      	beq.n	800c34a <__sflush_r+0x1a>
 800c3b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ba:	4299      	cmp	r1, r3
 800c3bc:	d002      	beq.n	800c3c4 <__sflush_r+0x94>
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f7fe fa74 	bl	800a8ac <_free_r>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	6360      	str	r0, [r4, #52]	; 0x34
 800c3c8:	e7c0      	b.n	800c34c <__sflush_r+0x1c>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	47b0      	blx	r6
 800c3d0:	1c41      	adds	r1, r0, #1
 800c3d2:	d1c8      	bne.n	800c366 <__sflush_r+0x36>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0c5      	beq.n	800c366 <__sflush_r+0x36>
 800c3da:	2b1d      	cmp	r3, #29
 800c3dc:	d001      	beq.n	800c3e2 <__sflush_r+0xb2>
 800c3de:	2b16      	cmp	r3, #22
 800c3e0:	d101      	bne.n	800c3e6 <__sflush_r+0xb6>
 800c3e2:	602f      	str	r7, [r5, #0]
 800c3e4:	e7b1      	b.n	800c34a <__sflush_r+0x1a>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	e7ad      	b.n	800c34c <__sflush_r+0x1c>
 800c3f0:	690f      	ldr	r7, [r1, #16]
 800c3f2:	2f00      	cmp	r7, #0
 800c3f4:	d0a9      	beq.n	800c34a <__sflush_r+0x1a>
 800c3f6:	0793      	lsls	r3, r2, #30
 800c3f8:	680e      	ldr	r6, [r1, #0]
 800c3fa:	bf08      	it	eq
 800c3fc:	694b      	ldreq	r3, [r1, #20]
 800c3fe:	600f      	str	r7, [r1, #0]
 800c400:	bf18      	it	ne
 800c402:	2300      	movne	r3, #0
 800c404:	eba6 0807 	sub.w	r8, r6, r7
 800c408:	608b      	str	r3, [r1, #8]
 800c40a:	f1b8 0f00 	cmp.w	r8, #0
 800c40e:	dd9c      	ble.n	800c34a <__sflush_r+0x1a>
 800c410:	4643      	mov	r3, r8
 800c412:	463a      	mov	r2, r7
 800c414:	6a21      	ldr	r1, [r4, #32]
 800c416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c418:	4628      	mov	r0, r5
 800c41a:	47b0      	blx	r6
 800c41c:	2800      	cmp	r0, #0
 800c41e:	dc06      	bgt.n	800c42e <__sflush_r+0xfe>
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c426:	81a3      	strh	r3, [r4, #12]
 800c428:	f04f 30ff 	mov.w	r0, #4294967295
 800c42c:	e78e      	b.n	800c34c <__sflush_r+0x1c>
 800c42e:	4407      	add	r7, r0
 800c430:	eba8 0800 	sub.w	r8, r8, r0
 800c434:	e7e9      	b.n	800c40a <__sflush_r+0xda>
 800c436:	bf00      	nop
 800c438:	20400001 	.word	0x20400001

0800c43c <_fflush_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	690b      	ldr	r3, [r1, #16]
 800c440:	4605      	mov	r5, r0
 800c442:	460c      	mov	r4, r1
 800c444:	b1db      	cbz	r3, 800c47e <_fflush_r+0x42>
 800c446:	b118      	cbz	r0, 800c450 <_fflush_r+0x14>
 800c448:	6983      	ldr	r3, [r0, #24]
 800c44a:	b90b      	cbnz	r3, 800c450 <_fflush_r+0x14>
 800c44c:	f000 f860 	bl	800c510 <__sinit>
 800c450:	4b0c      	ldr	r3, [pc, #48]	; (800c484 <_fflush_r+0x48>)
 800c452:	429c      	cmp	r4, r3
 800c454:	d109      	bne.n	800c46a <_fflush_r+0x2e>
 800c456:	686c      	ldr	r4, [r5, #4]
 800c458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45c:	b17b      	cbz	r3, 800c47e <_fflush_r+0x42>
 800c45e:	4621      	mov	r1, r4
 800c460:	4628      	mov	r0, r5
 800c462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c466:	f7ff bf63 	b.w	800c330 <__sflush_r>
 800c46a:	4b07      	ldr	r3, [pc, #28]	; (800c488 <_fflush_r+0x4c>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	d101      	bne.n	800c474 <_fflush_r+0x38>
 800c470:	68ac      	ldr	r4, [r5, #8]
 800c472:	e7f1      	b.n	800c458 <_fflush_r+0x1c>
 800c474:	4b05      	ldr	r3, [pc, #20]	; (800c48c <_fflush_r+0x50>)
 800c476:	429c      	cmp	r4, r3
 800c478:	bf08      	it	eq
 800c47a:	68ec      	ldreq	r4, [r5, #12]
 800c47c:	e7ec      	b.n	800c458 <_fflush_r+0x1c>
 800c47e:	2000      	movs	r0, #0
 800c480:	bd38      	pop	{r3, r4, r5, pc}
 800c482:	bf00      	nop
 800c484:	0800d1a4 	.word	0x0800d1a4
 800c488:	0800d1c4 	.word	0x0800d1c4
 800c48c:	0800d184 	.word	0x0800d184

0800c490 <std>:
 800c490:	2300      	movs	r3, #0
 800c492:	b510      	push	{r4, lr}
 800c494:	4604      	mov	r4, r0
 800c496:	e9c0 3300 	strd	r3, r3, [r0]
 800c49a:	6083      	str	r3, [r0, #8]
 800c49c:	8181      	strh	r1, [r0, #12]
 800c49e:	6643      	str	r3, [r0, #100]	; 0x64
 800c4a0:	81c2      	strh	r2, [r0, #14]
 800c4a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4a6:	6183      	str	r3, [r0, #24]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	2208      	movs	r2, #8
 800c4ac:	305c      	adds	r0, #92	; 0x5c
 800c4ae:	f7fe f9f4 	bl	800a89a <memset>
 800c4b2:	4b05      	ldr	r3, [pc, #20]	; (800c4c8 <std+0x38>)
 800c4b4:	6263      	str	r3, [r4, #36]	; 0x24
 800c4b6:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <std+0x3c>)
 800c4b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4ba:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <std+0x40>)
 800c4bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4be:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <std+0x44>)
 800c4c0:	6224      	str	r4, [r4, #32]
 800c4c2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4c4:	bd10      	pop	{r4, pc}
 800c4c6:	bf00      	nop
 800c4c8:	0800cf61 	.word	0x0800cf61
 800c4cc:	0800cf83 	.word	0x0800cf83
 800c4d0:	0800cfbb 	.word	0x0800cfbb
 800c4d4:	0800cfdf 	.word	0x0800cfdf

0800c4d8 <_cleanup_r>:
 800c4d8:	4901      	ldr	r1, [pc, #4]	; (800c4e0 <_cleanup_r+0x8>)
 800c4da:	f000 b885 	b.w	800c5e8 <_fwalk_reent>
 800c4de:	bf00      	nop
 800c4e0:	0800c43d 	.word	0x0800c43d

0800c4e4 <__sfmoreglue>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	1e4a      	subs	r2, r1, #1
 800c4e8:	2568      	movs	r5, #104	; 0x68
 800c4ea:	4355      	muls	r5, r2
 800c4ec:	460e      	mov	r6, r1
 800c4ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4f2:	f7fe fa29 	bl	800a948 <_malloc_r>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	b140      	cbz	r0, 800c50c <__sfmoreglue+0x28>
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	e9c0 1600 	strd	r1, r6, [r0]
 800c500:	300c      	adds	r0, #12
 800c502:	60a0      	str	r0, [r4, #8]
 800c504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c508:	f7fe f9c7 	bl	800a89a <memset>
 800c50c:	4620      	mov	r0, r4
 800c50e:	bd70      	pop	{r4, r5, r6, pc}

0800c510 <__sinit>:
 800c510:	6983      	ldr	r3, [r0, #24]
 800c512:	b510      	push	{r4, lr}
 800c514:	4604      	mov	r4, r0
 800c516:	bb33      	cbnz	r3, 800c566 <__sinit+0x56>
 800c518:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c51c:	6503      	str	r3, [r0, #80]	; 0x50
 800c51e:	4b12      	ldr	r3, [pc, #72]	; (800c568 <__sinit+0x58>)
 800c520:	4a12      	ldr	r2, [pc, #72]	; (800c56c <__sinit+0x5c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6282      	str	r2, [r0, #40]	; 0x28
 800c526:	4298      	cmp	r0, r3
 800c528:	bf04      	itt	eq
 800c52a:	2301      	moveq	r3, #1
 800c52c:	6183      	streq	r3, [r0, #24]
 800c52e:	f000 f81f 	bl	800c570 <__sfp>
 800c532:	6060      	str	r0, [r4, #4]
 800c534:	4620      	mov	r0, r4
 800c536:	f000 f81b 	bl	800c570 <__sfp>
 800c53a:	60a0      	str	r0, [r4, #8]
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 f817 	bl	800c570 <__sfp>
 800c542:	2200      	movs	r2, #0
 800c544:	60e0      	str	r0, [r4, #12]
 800c546:	2104      	movs	r1, #4
 800c548:	6860      	ldr	r0, [r4, #4]
 800c54a:	f7ff ffa1 	bl	800c490 <std>
 800c54e:	2201      	movs	r2, #1
 800c550:	2109      	movs	r1, #9
 800c552:	68a0      	ldr	r0, [r4, #8]
 800c554:	f7ff ff9c 	bl	800c490 <std>
 800c558:	2202      	movs	r2, #2
 800c55a:	2112      	movs	r1, #18
 800c55c:	68e0      	ldr	r0, [r4, #12]
 800c55e:	f7ff ff97 	bl	800c490 <std>
 800c562:	2301      	movs	r3, #1
 800c564:	61a3      	str	r3, [r4, #24]
 800c566:	bd10      	pop	{r4, pc}
 800c568:	0800d13c 	.word	0x0800d13c
 800c56c:	0800c4d9 	.word	0x0800c4d9

0800c570 <__sfp>:
 800c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c572:	4b1b      	ldr	r3, [pc, #108]	; (800c5e0 <__sfp+0x70>)
 800c574:	681e      	ldr	r6, [r3, #0]
 800c576:	69b3      	ldr	r3, [r6, #24]
 800c578:	4607      	mov	r7, r0
 800c57a:	b913      	cbnz	r3, 800c582 <__sfp+0x12>
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff ffc7 	bl	800c510 <__sinit>
 800c582:	3648      	adds	r6, #72	; 0x48
 800c584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c588:	3b01      	subs	r3, #1
 800c58a:	d503      	bpl.n	800c594 <__sfp+0x24>
 800c58c:	6833      	ldr	r3, [r6, #0]
 800c58e:	b133      	cbz	r3, 800c59e <__sfp+0x2e>
 800c590:	6836      	ldr	r6, [r6, #0]
 800c592:	e7f7      	b.n	800c584 <__sfp+0x14>
 800c594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c598:	b16d      	cbz	r5, 800c5b6 <__sfp+0x46>
 800c59a:	3468      	adds	r4, #104	; 0x68
 800c59c:	e7f4      	b.n	800c588 <__sfp+0x18>
 800c59e:	2104      	movs	r1, #4
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	f7ff ff9f 	bl	800c4e4 <__sfmoreglue>
 800c5a6:	6030      	str	r0, [r6, #0]
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1f1      	bne.n	800c590 <__sfp+0x20>
 800c5ac:	230c      	movs	r3, #12
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b6:	4b0b      	ldr	r3, [pc, #44]	; (800c5e4 <__sfp+0x74>)
 800c5b8:	6665      	str	r5, [r4, #100]	; 0x64
 800c5ba:	e9c4 5500 	strd	r5, r5, [r4]
 800c5be:	60a5      	str	r5, [r4, #8]
 800c5c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c5c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c5c8:	2208      	movs	r2, #8
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5d0:	f7fe f963 	bl	800a89a <memset>
 800c5d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5dc:	e7e9      	b.n	800c5b2 <__sfp+0x42>
 800c5de:	bf00      	nop
 800c5e0:	0800d13c 	.word	0x0800d13c
 800c5e4:	ffff0001 	.word	0xffff0001

0800c5e8 <_fwalk_reent>:
 800c5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5ec:	4680      	mov	r8, r0
 800c5ee:	4689      	mov	r9, r1
 800c5f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5f4:	2600      	movs	r6, #0
 800c5f6:	b914      	cbnz	r4, 800c5fe <_fwalk_reent+0x16>
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c602:	3f01      	subs	r7, #1
 800c604:	d501      	bpl.n	800c60a <_fwalk_reent+0x22>
 800c606:	6824      	ldr	r4, [r4, #0]
 800c608:	e7f5      	b.n	800c5f6 <_fwalk_reent+0xe>
 800c60a:	89ab      	ldrh	r3, [r5, #12]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d907      	bls.n	800c620 <_fwalk_reent+0x38>
 800c610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c614:	3301      	adds	r3, #1
 800c616:	d003      	beq.n	800c620 <_fwalk_reent+0x38>
 800c618:	4629      	mov	r1, r5
 800c61a:	4640      	mov	r0, r8
 800c61c:	47c8      	blx	r9
 800c61e:	4306      	orrs	r6, r0
 800c620:	3568      	adds	r5, #104	; 0x68
 800c622:	e7ee      	b.n	800c602 <_fwalk_reent+0x1a>

0800c624 <_localeconv_r>:
 800c624:	4b04      	ldr	r3, [pc, #16]	; (800c638 <_localeconv_r+0x14>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6a18      	ldr	r0, [r3, #32]
 800c62a:	4b04      	ldr	r3, [pc, #16]	; (800c63c <_localeconv_r+0x18>)
 800c62c:	2800      	cmp	r0, #0
 800c62e:	bf08      	it	eq
 800c630:	4618      	moveq	r0, r3
 800c632:	30f0      	adds	r0, #240	; 0xf0
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20000038 	.word	0x20000038
 800c63c:	2000009c 	.word	0x2000009c

0800c640 <__swhatbuf_r>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	460e      	mov	r6, r1
 800c644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c648:	2900      	cmp	r1, #0
 800c64a:	b096      	sub	sp, #88	; 0x58
 800c64c:	4614      	mov	r4, r2
 800c64e:	461d      	mov	r5, r3
 800c650:	da07      	bge.n	800c662 <__swhatbuf_r+0x22>
 800c652:	2300      	movs	r3, #0
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	89b3      	ldrh	r3, [r6, #12]
 800c658:	061a      	lsls	r2, r3, #24
 800c65a:	d410      	bmi.n	800c67e <__swhatbuf_r+0x3e>
 800c65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c660:	e00e      	b.n	800c680 <__swhatbuf_r+0x40>
 800c662:	466a      	mov	r2, sp
 800c664:	f000 fce2 	bl	800d02c <_fstat_r>
 800c668:	2800      	cmp	r0, #0
 800c66a:	dbf2      	blt.n	800c652 <__swhatbuf_r+0x12>
 800c66c:	9a01      	ldr	r2, [sp, #4]
 800c66e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c672:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c676:	425a      	negs	r2, r3
 800c678:	415a      	adcs	r2, r3
 800c67a:	602a      	str	r2, [r5, #0]
 800c67c:	e7ee      	b.n	800c65c <__swhatbuf_r+0x1c>
 800c67e:	2340      	movs	r3, #64	; 0x40
 800c680:	2000      	movs	r0, #0
 800c682:	6023      	str	r3, [r4, #0]
 800c684:	b016      	add	sp, #88	; 0x58
 800c686:	bd70      	pop	{r4, r5, r6, pc}

0800c688 <__smakebuf_r>:
 800c688:	898b      	ldrh	r3, [r1, #12]
 800c68a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c68c:	079d      	lsls	r5, r3, #30
 800c68e:	4606      	mov	r6, r0
 800c690:	460c      	mov	r4, r1
 800c692:	d507      	bpl.n	800c6a4 <__smakebuf_r+0x1c>
 800c694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	6123      	str	r3, [r4, #16]
 800c69c:	2301      	movs	r3, #1
 800c69e:	6163      	str	r3, [r4, #20]
 800c6a0:	b002      	add	sp, #8
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
 800c6a4:	ab01      	add	r3, sp, #4
 800c6a6:	466a      	mov	r2, sp
 800c6a8:	f7ff ffca 	bl	800c640 <__swhatbuf_r>
 800c6ac:	9900      	ldr	r1, [sp, #0]
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f7fe f949 	bl	800a948 <_malloc_r>
 800c6b6:	b948      	cbnz	r0, 800c6cc <__smakebuf_r+0x44>
 800c6b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6bc:	059a      	lsls	r2, r3, #22
 800c6be:	d4ef      	bmi.n	800c6a0 <__smakebuf_r+0x18>
 800c6c0:	f023 0303 	bic.w	r3, r3, #3
 800c6c4:	f043 0302 	orr.w	r3, r3, #2
 800c6c8:	81a3      	strh	r3, [r4, #12]
 800c6ca:	e7e3      	b.n	800c694 <__smakebuf_r+0xc>
 800c6cc:	4b0d      	ldr	r3, [pc, #52]	; (800c704 <__smakebuf_r+0x7c>)
 800c6ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6d0:	89a3      	ldrh	r3, [r4, #12]
 800c6d2:	6020      	str	r0, [r4, #0]
 800c6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	9b00      	ldr	r3, [sp, #0]
 800c6dc:	6163      	str	r3, [r4, #20]
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	6120      	str	r0, [r4, #16]
 800c6e2:	b15b      	cbz	r3, 800c6fc <__smakebuf_r+0x74>
 800c6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f000 fcb1 	bl	800d050 <_isatty_r>
 800c6ee:	b128      	cbz	r0, 800c6fc <__smakebuf_r+0x74>
 800c6f0:	89a3      	ldrh	r3, [r4, #12]
 800c6f2:	f023 0303 	bic.w	r3, r3, #3
 800c6f6:	f043 0301 	orr.w	r3, r3, #1
 800c6fa:	81a3      	strh	r3, [r4, #12]
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	431d      	orrs	r5, r3
 800c700:	81a5      	strh	r5, [r4, #12]
 800c702:	e7cd      	b.n	800c6a0 <__smakebuf_r+0x18>
 800c704:	0800c4d9 	.word	0x0800c4d9

0800c708 <__malloc_lock>:
 800c708:	4770      	bx	lr

0800c70a <__malloc_unlock>:
 800c70a:	4770      	bx	lr

0800c70c <_Balloc>:
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c710:	4604      	mov	r4, r0
 800c712:	460e      	mov	r6, r1
 800c714:	b93d      	cbnz	r5, 800c726 <_Balloc+0x1a>
 800c716:	2010      	movs	r0, #16
 800c718:	f7fe f8a4 	bl	800a864 <malloc>
 800c71c:	6260      	str	r0, [r4, #36]	; 0x24
 800c71e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c722:	6005      	str	r5, [r0, #0]
 800c724:	60c5      	str	r5, [r0, #12]
 800c726:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c728:	68eb      	ldr	r3, [r5, #12]
 800c72a:	b183      	cbz	r3, 800c74e <_Balloc+0x42>
 800c72c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c734:	b9b8      	cbnz	r0, 800c766 <_Balloc+0x5a>
 800c736:	2101      	movs	r1, #1
 800c738:	fa01 f506 	lsl.w	r5, r1, r6
 800c73c:	1d6a      	adds	r2, r5, #5
 800c73e:	0092      	lsls	r2, r2, #2
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fabf 	bl	800ccc4 <_calloc_r>
 800c746:	b160      	cbz	r0, 800c762 <_Balloc+0x56>
 800c748:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c74c:	e00e      	b.n	800c76c <_Balloc+0x60>
 800c74e:	2221      	movs	r2, #33	; 0x21
 800c750:	2104      	movs	r1, #4
 800c752:	4620      	mov	r0, r4
 800c754:	f000 fab6 	bl	800ccc4 <_calloc_r>
 800c758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c75a:	60e8      	str	r0, [r5, #12]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e4      	bne.n	800c72c <_Balloc+0x20>
 800c762:	2000      	movs	r0, #0
 800c764:	bd70      	pop	{r4, r5, r6, pc}
 800c766:	6802      	ldr	r2, [r0, #0]
 800c768:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c76c:	2300      	movs	r3, #0
 800c76e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c772:	e7f7      	b.n	800c764 <_Balloc+0x58>

0800c774 <_Bfree>:
 800c774:	b570      	push	{r4, r5, r6, lr}
 800c776:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c778:	4606      	mov	r6, r0
 800c77a:	460d      	mov	r5, r1
 800c77c:	b93c      	cbnz	r4, 800c78e <_Bfree+0x1a>
 800c77e:	2010      	movs	r0, #16
 800c780:	f7fe f870 	bl	800a864 <malloc>
 800c784:	6270      	str	r0, [r6, #36]	; 0x24
 800c786:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c78a:	6004      	str	r4, [r0, #0]
 800c78c:	60c4      	str	r4, [r0, #12]
 800c78e:	b13d      	cbz	r5, 800c7a0 <_Bfree+0x2c>
 800c790:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c792:	686a      	ldr	r2, [r5, #4]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c79a:	6029      	str	r1, [r5, #0]
 800c79c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c7a0:	bd70      	pop	{r4, r5, r6, pc}

0800c7a2 <__multadd>:
 800c7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a6:	690d      	ldr	r5, [r1, #16]
 800c7a8:	461f      	mov	r7, r3
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	460c      	mov	r4, r1
 800c7ae:	f101 0c14 	add.w	ip, r1, #20
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f8dc 0000 	ldr.w	r0, [ip]
 800c7b8:	b281      	uxth	r1, r0
 800c7ba:	fb02 7101 	mla	r1, r2, r1, r7
 800c7be:	0c0f      	lsrs	r7, r1, #16
 800c7c0:	0c00      	lsrs	r0, r0, #16
 800c7c2:	fb02 7000 	mla	r0, r2, r0, r7
 800c7c6:	b289      	uxth	r1, r1
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c7ce:	429d      	cmp	r5, r3
 800c7d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c7d4:	f84c 1b04 	str.w	r1, [ip], #4
 800c7d8:	dcec      	bgt.n	800c7b4 <__multadd+0x12>
 800c7da:	b1d7      	cbz	r7, 800c812 <__multadd+0x70>
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	42ab      	cmp	r3, r5
 800c7e0:	dc12      	bgt.n	800c808 <__multadd+0x66>
 800c7e2:	6861      	ldr	r1, [r4, #4]
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	3101      	adds	r1, #1
 800c7e8:	f7ff ff90 	bl	800c70c <_Balloc>
 800c7ec:	6922      	ldr	r2, [r4, #16]
 800c7ee:	3202      	adds	r2, #2
 800c7f0:	f104 010c 	add.w	r1, r4, #12
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	0092      	lsls	r2, r2, #2
 800c7f8:	300c      	adds	r0, #12
 800c7fa:	f7fe f843 	bl	800a884 <memcpy>
 800c7fe:	4621      	mov	r1, r4
 800c800:	4630      	mov	r0, r6
 800c802:	f7ff ffb7 	bl	800c774 <_Bfree>
 800c806:	4644      	mov	r4, r8
 800c808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c80c:	3501      	adds	r5, #1
 800c80e:	615f      	str	r7, [r3, #20]
 800c810:	6125      	str	r5, [r4, #16]
 800c812:	4620      	mov	r0, r4
 800c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c818 <__hi0bits>:
 800c818:	0c02      	lsrs	r2, r0, #16
 800c81a:	0412      	lsls	r2, r2, #16
 800c81c:	4603      	mov	r3, r0
 800c81e:	b9b2      	cbnz	r2, 800c84e <__hi0bits+0x36>
 800c820:	0403      	lsls	r3, r0, #16
 800c822:	2010      	movs	r0, #16
 800c824:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c828:	bf04      	itt	eq
 800c82a:	021b      	lsleq	r3, r3, #8
 800c82c:	3008      	addeq	r0, #8
 800c82e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c832:	bf04      	itt	eq
 800c834:	011b      	lsleq	r3, r3, #4
 800c836:	3004      	addeq	r0, #4
 800c838:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c83c:	bf04      	itt	eq
 800c83e:	009b      	lsleq	r3, r3, #2
 800c840:	3002      	addeq	r0, #2
 800c842:	2b00      	cmp	r3, #0
 800c844:	db06      	blt.n	800c854 <__hi0bits+0x3c>
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	d503      	bpl.n	800c852 <__hi0bits+0x3a>
 800c84a:	3001      	adds	r0, #1
 800c84c:	4770      	bx	lr
 800c84e:	2000      	movs	r0, #0
 800c850:	e7e8      	b.n	800c824 <__hi0bits+0xc>
 800c852:	2020      	movs	r0, #32
 800c854:	4770      	bx	lr

0800c856 <__lo0bits>:
 800c856:	6803      	ldr	r3, [r0, #0]
 800c858:	f013 0207 	ands.w	r2, r3, #7
 800c85c:	4601      	mov	r1, r0
 800c85e:	d00b      	beq.n	800c878 <__lo0bits+0x22>
 800c860:	07da      	lsls	r2, r3, #31
 800c862:	d423      	bmi.n	800c8ac <__lo0bits+0x56>
 800c864:	0798      	lsls	r0, r3, #30
 800c866:	bf49      	itett	mi
 800c868:	085b      	lsrmi	r3, r3, #1
 800c86a:	089b      	lsrpl	r3, r3, #2
 800c86c:	2001      	movmi	r0, #1
 800c86e:	600b      	strmi	r3, [r1, #0]
 800c870:	bf5c      	itt	pl
 800c872:	600b      	strpl	r3, [r1, #0]
 800c874:	2002      	movpl	r0, #2
 800c876:	4770      	bx	lr
 800c878:	b298      	uxth	r0, r3
 800c87a:	b9a8      	cbnz	r0, 800c8a8 <__lo0bits+0x52>
 800c87c:	0c1b      	lsrs	r3, r3, #16
 800c87e:	2010      	movs	r0, #16
 800c880:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c884:	bf04      	itt	eq
 800c886:	0a1b      	lsreq	r3, r3, #8
 800c888:	3008      	addeq	r0, #8
 800c88a:	071a      	lsls	r2, r3, #28
 800c88c:	bf04      	itt	eq
 800c88e:	091b      	lsreq	r3, r3, #4
 800c890:	3004      	addeq	r0, #4
 800c892:	079a      	lsls	r2, r3, #30
 800c894:	bf04      	itt	eq
 800c896:	089b      	lsreq	r3, r3, #2
 800c898:	3002      	addeq	r0, #2
 800c89a:	07da      	lsls	r2, r3, #31
 800c89c:	d402      	bmi.n	800c8a4 <__lo0bits+0x4e>
 800c89e:	085b      	lsrs	r3, r3, #1
 800c8a0:	d006      	beq.n	800c8b0 <__lo0bits+0x5a>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	600b      	str	r3, [r1, #0]
 800c8a6:	4770      	bx	lr
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	e7e9      	b.n	800c880 <__lo0bits+0x2a>
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	4770      	bx	lr
 800c8b0:	2020      	movs	r0, #32
 800c8b2:	4770      	bx	lr

0800c8b4 <__i2b>:
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	2101      	movs	r1, #1
 800c8ba:	f7ff ff27 	bl	800c70c <_Balloc>
 800c8be:	2201      	movs	r2, #1
 800c8c0:	6144      	str	r4, [r0, #20]
 800c8c2:	6102      	str	r2, [r0, #16]
 800c8c4:	bd10      	pop	{r4, pc}

0800c8c6 <__multiply>:
 800c8c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ca:	4614      	mov	r4, r2
 800c8cc:	690a      	ldr	r2, [r1, #16]
 800c8ce:	6923      	ldr	r3, [r4, #16]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	bfb8      	it	lt
 800c8d4:	460b      	movlt	r3, r1
 800c8d6:	4688      	mov	r8, r1
 800c8d8:	bfbc      	itt	lt
 800c8da:	46a0      	movlt	r8, r4
 800c8dc:	461c      	movlt	r4, r3
 800c8de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8ee:	eb07 0609 	add.w	r6, r7, r9
 800c8f2:	42b3      	cmp	r3, r6
 800c8f4:	bfb8      	it	lt
 800c8f6:	3101      	addlt	r1, #1
 800c8f8:	f7ff ff08 	bl	800c70c <_Balloc>
 800c8fc:	f100 0514 	add.w	r5, r0, #20
 800c900:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c904:	462b      	mov	r3, r5
 800c906:	2200      	movs	r2, #0
 800c908:	4573      	cmp	r3, lr
 800c90a:	d316      	bcc.n	800c93a <__multiply+0x74>
 800c90c:	f104 0214 	add.w	r2, r4, #20
 800c910:	f108 0114 	add.w	r1, r8, #20
 800c914:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c918:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	9b00      	ldr	r3, [sp, #0]
 800c920:	9201      	str	r2, [sp, #4]
 800c922:	4293      	cmp	r3, r2
 800c924:	d80c      	bhi.n	800c940 <__multiply+0x7a>
 800c926:	2e00      	cmp	r6, #0
 800c928:	dd03      	ble.n	800c932 <__multiply+0x6c>
 800c92a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d05d      	beq.n	800c9ee <__multiply+0x128>
 800c932:	6106      	str	r6, [r0, #16]
 800c934:	b003      	add	sp, #12
 800c936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93a:	f843 2b04 	str.w	r2, [r3], #4
 800c93e:	e7e3      	b.n	800c908 <__multiply+0x42>
 800c940:	f8b2 b000 	ldrh.w	fp, [r2]
 800c944:	f1bb 0f00 	cmp.w	fp, #0
 800c948:	d023      	beq.n	800c992 <__multiply+0xcc>
 800c94a:	4689      	mov	r9, r1
 800c94c:	46ac      	mov	ip, r5
 800c94e:	f04f 0800 	mov.w	r8, #0
 800c952:	f859 4b04 	ldr.w	r4, [r9], #4
 800c956:	f8dc a000 	ldr.w	sl, [ip]
 800c95a:	b2a3      	uxth	r3, r4
 800c95c:	fa1f fa8a 	uxth.w	sl, sl
 800c960:	fb0b a303 	mla	r3, fp, r3, sl
 800c964:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c968:	f8dc 4000 	ldr.w	r4, [ip]
 800c96c:	4443      	add	r3, r8
 800c96e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c972:	fb0b 840a 	mla	r4, fp, sl, r8
 800c976:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c97a:	46e2      	mov	sl, ip
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c982:	454f      	cmp	r7, r9
 800c984:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c988:	f84a 3b04 	str.w	r3, [sl], #4
 800c98c:	d82b      	bhi.n	800c9e6 <__multiply+0x120>
 800c98e:	f8cc 8004 	str.w	r8, [ip, #4]
 800c992:	9b01      	ldr	r3, [sp, #4]
 800c994:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c998:	3204      	adds	r2, #4
 800c99a:	f1ba 0f00 	cmp.w	sl, #0
 800c99e:	d020      	beq.n	800c9e2 <__multiply+0x11c>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	4689      	mov	r9, r1
 800c9a4:	46a8      	mov	r8, r5
 800c9a6:	f04f 0b00 	mov.w	fp, #0
 800c9aa:	f8b9 c000 	ldrh.w	ip, [r9]
 800c9ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c9b2:	fb0a 440c 	mla	r4, sl, ip, r4
 800c9b6:	445c      	add	r4, fp
 800c9b8:	46c4      	mov	ip, r8
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c9c0:	f84c 3b04 	str.w	r3, [ip], #4
 800c9c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c9cc:	0c1b      	lsrs	r3, r3, #16
 800c9ce:	fb0a b303 	mla	r3, sl, r3, fp
 800c9d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c9d6:	454f      	cmp	r7, r9
 800c9d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c9dc:	d805      	bhi.n	800c9ea <__multiply+0x124>
 800c9de:	f8c8 3004 	str.w	r3, [r8, #4]
 800c9e2:	3504      	adds	r5, #4
 800c9e4:	e79b      	b.n	800c91e <__multiply+0x58>
 800c9e6:	46d4      	mov	ip, sl
 800c9e8:	e7b3      	b.n	800c952 <__multiply+0x8c>
 800c9ea:	46e0      	mov	r8, ip
 800c9ec:	e7dd      	b.n	800c9aa <__multiply+0xe4>
 800c9ee:	3e01      	subs	r6, #1
 800c9f0:	e799      	b.n	800c926 <__multiply+0x60>
	...

0800c9f4 <__pow5mult>:
 800c9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f8:	4615      	mov	r5, r2
 800c9fa:	f012 0203 	ands.w	r2, r2, #3
 800c9fe:	4606      	mov	r6, r0
 800ca00:	460f      	mov	r7, r1
 800ca02:	d007      	beq.n	800ca14 <__pow5mult+0x20>
 800ca04:	3a01      	subs	r2, #1
 800ca06:	4c21      	ldr	r4, [pc, #132]	; (800ca8c <__pow5mult+0x98>)
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca0e:	f7ff fec8 	bl	800c7a2 <__multadd>
 800ca12:	4607      	mov	r7, r0
 800ca14:	10ad      	asrs	r5, r5, #2
 800ca16:	d035      	beq.n	800ca84 <__pow5mult+0x90>
 800ca18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca1a:	b93c      	cbnz	r4, 800ca2c <__pow5mult+0x38>
 800ca1c:	2010      	movs	r0, #16
 800ca1e:	f7fd ff21 	bl	800a864 <malloc>
 800ca22:	6270      	str	r0, [r6, #36]	; 0x24
 800ca24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca28:	6004      	str	r4, [r0, #0]
 800ca2a:	60c4      	str	r4, [r0, #12]
 800ca2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca34:	b94c      	cbnz	r4, 800ca4a <__pow5mult+0x56>
 800ca36:	f240 2171 	movw	r1, #625	; 0x271
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f7ff ff3a 	bl	800c8b4 <__i2b>
 800ca40:	2300      	movs	r3, #0
 800ca42:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca46:	4604      	mov	r4, r0
 800ca48:	6003      	str	r3, [r0, #0]
 800ca4a:	f04f 0800 	mov.w	r8, #0
 800ca4e:	07eb      	lsls	r3, r5, #31
 800ca50:	d50a      	bpl.n	800ca68 <__pow5mult+0x74>
 800ca52:	4639      	mov	r1, r7
 800ca54:	4622      	mov	r2, r4
 800ca56:	4630      	mov	r0, r6
 800ca58:	f7ff ff35 	bl	800c8c6 <__multiply>
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	4681      	mov	r9, r0
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7ff fe87 	bl	800c774 <_Bfree>
 800ca66:	464f      	mov	r7, r9
 800ca68:	106d      	asrs	r5, r5, #1
 800ca6a:	d00b      	beq.n	800ca84 <__pow5mult+0x90>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	b938      	cbnz	r0, 800ca80 <__pow5mult+0x8c>
 800ca70:	4622      	mov	r2, r4
 800ca72:	4621      	mov	r1, r4
 800ca74:	4630      	mov	r0, r6
 800ca76:	f7ff ff26 	bl	800c8c6 <__multiply>
 800ca7a:	6020      	str	r0, [r4, #0]
 800ca7c:	f8c0 8000 	str.w	r8, [r0]
 800ca80:	4604      	mov	r4, r0
 800ca82:	e7e4      	b.n	800ca4e <__pow5mult+0x5a>
 800ca84:	4638      	mov	r0, r7
 800ca86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8a:	bf00      	nop
 800ca8c:	0800d2d8 	.word	0x0800d2d8

0800ca90 <__lshift>:
 800ca90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca94:	460c      	mov	r4, r1
 800ca96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca9a:	6923      	ldr	r3, [r4, #16]
 800ca9c:	6849      	ldr	r1, [r1, #4]
 800ca9e:	eb0a 0903 	add.w	r9, sl, r3
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	4607      	mov	r7, r0
 800caa6:	4616      	mov	r6, r2
 800caa8:	f109 0501 	add.w	r5, r9, #1
 800caac:	42ab      	cmp	r3, r5
 800caae:	db32      	blt.n	800cb16 <__lshift+0x86>
 800cab0:	4638      	mov	r0, r7
 800cab2:	f7ff fe2b 	bl	800c70c <_Balloc>
 800cab6:	2300      	movs	r3, #0
 800cab8:	4680      	mov	r8, r0
 800caba:	f100 0114 	add.w	r1, r0, #20
 800cabe:	461a      	mov	r2, r3
 800cac0:	4553      	cmp	r3, sl
 800cac2:	db2b      	blt.n	800cb1c <__lshift+0x8c>
 800cac4:	6920      	ldr	r0, [r4, #16]
 800cac6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caca:	f104 0314 	add.w	r3, r4, #20
 800cace:	f016 021f 	ands.w	r2, r6, #31
 800cad2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cad6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cada:	d025      	beq.n	800cb28 <__lshift+0x98>
 800cadc:	f1c2 0e20 	rsb	lr, r2, #32
 800cae0:	2000      	movs	r0, #0
 800cae2:	681e      	ldr	r6, [r3, #0]
 800cae4:	468a      	mov	sl, r1
 800cae6:	4096      	lsls	r6, r2
 800cae8:	4330      	orrs	r0, r6
 800caea:	f84a 0b04 	str.w	r0, [sl], #4
 800caee:	f853 0b04 	ldr.w	r0, [r3], #4
 800caf2:	459c      	cmp	ip, r3
 800caf4:	fa20 f00e 	lsr.w	r0, r0, lr
 800caf8:	d814      	bhi.n	800cb24 <__lshift+0x94>
 800cafa:	6048      	str	r0, [r1, #4]
 800cafc:	b108      	cbz	r0, 800cb02 <__lshift+0x72>
 800cafe:	f109 0502 	add.w	r5, r9, #2
 800cb02:	3d01      	subs	r5, #1
 800cb04:	4638      	mov	r0, r7
 800cb06:	f8c8 5010 	str.w	r5, [r8, #16]
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	f7ff fe32 	bl	800c774 <_Bfree>
 800cb10:	4640      	mov	r0, r8
 800cb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb16:	3101      	adds	r1, #1
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	e7c7      	b.n	800caac <__lshift+0x1c>
 800cb1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cb20:	3301      	adds	r3, #1
 800cb22:	e7cd      	b.n	800cac0 <__lshift+0x30>
 800cb24:	4651      	mov	r1, sl
 800cb26:	e7dc      	b.n	800cae2 <__lshift+0x52>
 800cb28:	3904      	subs	r1, #4
 800cb2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb32:	459c      	cmp	ip, r3
 800cb34:	d8f9      	bhi.n	800cb2a <__lshift+0x9a>
 800cb36:	e7e4      	b.n	800cb02 <__lshift+0x72>

0800cb38 <__mcmp>:
 800cb38:	6903      	ldr	r3, [r0, #16]
 800cb3a:	690a      	ldr	r2, [r1, #16]
 800cb3c:	1a9b      	subs	r3, r3, r2
 800cb3e:	b530      	push	{r4, r5, lr}
 800cb40:	d10c      	bne.n	800cb5c <__mcmp+0x24>
 800cb42:	0092      	lsls	r2, r2, #2
 800cb44:	3014      	adds	r0, #20
 800cb46:	3114      	adds	r1, #20
 800cb48:	1884      	adds	r4, r0, r2
 800cb4a:	4411      	add	r1, r2
 800cb4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb54:	4295      	cmp	r5, r2
 800cb56:	d003      	beq.n	800cb60 <__mcmp+0x28>
 800cb58:	d305      	bcc.n	800cb66 <__mcmp+0x2e>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	bd30      	pop	{r4, r5, pc}
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d3f3      	bcc.n	800cb4c <__mcmp+0x14>
 800cb64:	e7fa      	b.n	800cb5c <__mcmp+0x24>
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6a:	e7f7      	b.n	800cb5c <__mcmp+0x24>

0800cb6c <__mdiff>:
 800cb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb70:	460d      	mov	r5, r1
 800cb72:	4607      	mov	r7, r0
 800cb74:	4611      	mov	r1, r2
 800cb76:	4628      	mov	r0, r5
 800cb78:	4614      	mov	r4, r2
 800cb7a:	f7ff ffdd 	bl	800cb38 <__mcmp>
 800cb7e:	1e06      	subs	r6, r0, #0
 800cb80:	d108      	bne.n	800cb94 <__mdiff+0x28>
 800cb82:	4631      	mov	r1, r6
 800cb84:	4638      	mov	r0, r7
 800cb86:	f7ff fdc1 	bl	800c70c <_Balloc>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb94:	bfa4      	itt	ge
 800cb96:	4623      	movge	r3, r4
 800cb98:	462c      	movge	r4, r5
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	6861      	ldr	r1, [r4, #4]
 800cb9e:	bfa6      	itte	ge
 800cba0:	461d      	movge	r5, r3
 800cba2:	2600      	movge	r6, #0
 800cba4:	2601      	movlt	r6, #1
 800cba6:	f7ff fdb1 	bl	800c70c <_Balloc>
 800cbaa:	692b      	ldr	r3, [r5, #16]
 800cbac:	60c6      	str	r6, [r0, #12]
 800cbae:	6926      	ldr	r6, [r4, #16]
 800cbb0:	f105 0914 	add.w	r9, r5, #20
 800cbb4:	f104 0214 	add.w	r2, r4, #20
 800cbb8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cbbc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cbc0:	f100 0514 	add.w	r5, r0, #20
 800cbc4:	f04f 0e00 	mov.w	lr, #0
 800cbc8:	f852 ab04 	ldr.w	sl, [r2], #4
 800cbcc:	f859 4b04 	ldr.w	r4, [r9], #4
 800cbd0:	fa1e f18a 	uxtah	r1, lr, sl
 800cbd4:	b2a3      	uxth	r3, r4
 800cbd6:	1ac9      	subs	r1, r1, r3
 800cbd8:	0c23      	lsrs	r3, r4, #16
 800cbda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cbde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cbe2:	b289      	uxth	r1, r1
 800cbe4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cbe8:	45c8      	cmp	r8, r9
 800cbea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cbee:	4694      	mov	ip, r2
 800cbf0:	f845 3b04 	str.w	r3, [r5], #4
 800cbf4:	d8e8      	bhi.n	800cbc8 <__mdiff+0x5c>
 800cbf6:	45bc      	cmp	ip, r7
 800cbf8:	d304      	bcc.n	800cc04 <__mdiff+0x98>
 800cbfa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cbfe:	b183      	cbz	r3, 800cc22 <__mdiff+0xb6>
 800cc00:	6106      	str	r6, [r0, #16]
 800cc02:	e7c5      	b.n	800cb90 <__mdiff+0x24>
 800cc04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cc08:	fa1e f381 	uxtah	r3, lr, r1
 800cc0c:	141a      	asrs	r2, r3, #16
 800cc0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cc1c:	f845 3b04 	str.w	r3, [r5], #4
 800cc20:	e7e9      	b.n	800cbf6 <__mdiff+0x8a>
 800cc22:	3e01      	subs	r6, #1
 800cc24:	e7e9      	b.n	800cbfa <__mdiff+0x8e>

0800cc26 <__d2b>:
 800cc26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc2a:	460e      	mov	r6, r1
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	ec59 8b10 	vmov	r8, r9, d0
 800cc32:	4615      	mov	r5, r2
 800cc34:	f7ff fd6a 	bl	800c70c <_Balloc>
 800cc38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cc3c:	4607      	mov	r7, r0
 800cc3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc42:	bb34      	cbnz	r4, 800cc92 <__d2b+0x6c>
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	f1b8 0300 	subs.w	r3, r8, #0
 800cc4a:	d027      	beq.n	800cc9c <__d2b+0x76>
 800cc4c:	a802      	add	r0, sp, #8
 800cc4e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cc52:	f7ff fe00 	bl	800c856 <__lo0bits>
 800cc56:	9900      	ldr	r1, [sp, #0]
 800cc58:	b1f0      	cbz	r0, 800cc98 <__d2b+0x72>
 800cc5a:	9a01      	ldr	r2, [sp, #4]
 800cc5c:	f1c0 0320 	rsb	r3, r0, #32
 800cc60:	fa02 f303 	lsl.w	r3, r2, r3
 800cc64:	430b      	orrs	r3, r1
 800cc66:	40c2      	lsrs	r2, r0
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	9201      	str	r2, [sp, #4]
 800cc6c:	9b01      	ldr	r3, [sp, #4]
 800cc6e:	61bb      	str	r3, [r7, #24]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	bf14      	ite	ne
 800cc74:	2102      	movne	r1, #2
 800cc76:	2101      	moveq	r1, #1
 800cc78:	6139      	str	r1, [r7, #16]
 800cc7a:	b1c4      	cbz	r4, 800ccae <__d2b+0x88>
 800cc7c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cc80:	4404      	add	r4, r0
 800cc82:	6034      	str	r4, [r6, #0]
 800cc84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc88:	6028      	str	r0, [r5, #0]
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	b003      	add	sp, #12
 800cc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc96:	e7d5      	b.n	800cc44 <__d2b+0x1e>
 800cc98:	6179      	str	r1, [r7, #20]
 800cc9a:	e7e7      	b.n	800cc6c <__d2b+0x46>
 800cc9c:	a801      	add	r0, sp, #4
 800cc9e:	f7ff fdda 	bl	800c856 <__lo0bits>
 800cca2:	9b01      	ldr	r3, [sp, #4]
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	2101      	movs	r1, #1
 800cca8:	6139      	str	r1, [r7, #16]
 800ccaa:	3020      	adds	r0, #32
 800ccac:	e7e5      	b.n	800cc7a <__d2b+0x54>
 800ccae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ccb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccb6:	6030      	str	r0, [r6, #0]
 800ccb8:	6918      	ldr	r0, [r3, #16]
 800ccba:	f7ff fdad 	bl	800c818 <__hi0bits>
 800ccbe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ccc2:	e7e1      	b.n	800cc88 <__d2b+0x62>

0800ccc4 <_calloc_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	fb02 f401 	mul.w	r4, r2, r1
 800ccca:	4621      	mov	r1, r4
 800cccc:	f7fd fe3c 	bl	800a948 <_malloc_r>
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	b118      	cbz	r0, 800ccdc <_calloc_r+0x18>
 800ccd4:	4622      	mov	r2, r4
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	f7fd fddf 	bl	800a89a <memset>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	bd38      	pop	{r3, r4, r5, pc}

0800cce0 <__sfputc_r>:
 800cce0:	6893      	ldr	r3, [r2, #8]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	b410      	push	{r4}
 800cce8:	6093      	str	r3, [r2, #8]
 800ccea:	da08      	bge.n	800ccfe <__sfputc_r+0x1e>
 800ccec:	6994      	ldr	r4, [r2, #24]
 800ccee:	42a3      	cmp	r3, r4
 800ccf0:	db01      	blt.n	800ccf6 <__sfputc_r+0x16>
 800ccf2:	290a      	cmp	r1, #10
 800ccf4:	d103      	bne.n	800ccfe <__sfputc_r+0x1e>
 800ccf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccfa:	f7fe bc15 	b.w	800b528 <__swbuf_r>
 800ccfe:	6813      	ldr	r3, [r2, #0]
 800cd00:	1c58      	adds	r0, r3, #1
 800cd02:	6010      	str	r0, [r2, #0]
 800cd04:	7019      	strb	r1, [r3, #0]
 800cd06:	4608      	mov	r0, r1
 800cd08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <__sfputs_r>:
 800cd0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd10:	4606      	mov	r6, r0
 800cd12:	460f      	mov	r7, r1
 800cd14:	4614      	mov	r4, r2
 800cd16:	18d5      	adds	r5, r2, r3
 800cd18:	42ac      	cmp	r4, r5
 800cd1a:	d101      	bne.n	800cd20 <__sfputs_r+0x12>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	e007      	b.n	800cd30 <__sfputs_r+0x22>
 800cd20:	463a      	mov	r2, r7
 800cd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7ff ffda 	bl	800cce0 <__sfputc_r>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d1f3      	bne.n	800cd18 <__sfputs_r+0xa>
 800cd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd34 <_vfiprintf_r>:
 800cd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd38:	460c      	mov	r4, r1
 800cd3a:	b09d      	sub	sp, #116	; 0x74
 800cd3c:	4617      	mov	r7, r2
 800cd3e:	461d      	mov	r5, r3
 800cd40:	4606      	mov	r6, r0
 800cd42:	b118      	cbz	r0, 800cd4c <_vfiprintf_r+0x18>
 800cd44:	6983      	ldr	r3, [r0, #24]
 800cd46:	b90b      	cbnz	r3, 800cd4c <_vfiprintf_r+0x18>
 800cd48:	f7ff fbe2 	bl	800c510 <__sinit>
 800cd4c:	4b7c      	ldr	r3, [pc, #496]	; (800cf40 <_vfiprintf_r+0x20c>)
 800cd4e:	429c      	cmp	r4, r3
 800cd50:	d158      	bne.n	800ce04 <_vfiprintf_r+0xd0>
 800cd52:	6874      	ldr	r4, [r6, #4]
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	0718      	lsls	r0, r3, #28
 800cd58:	d55e      	bpl.n	800ce18 <_vfiprintf_r+0xe4>
 800cd5a:	6923      	ldr	r3, [r4, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d05b      	beq.n	800ce18 <_vfiprintf_r+0xe4>
 800cd60:	2300      	movs	r3, #0
 800cd62:	9309      	str	r3, [sp, #36]	; 0x24
 800cd64:	2320      	movs	r3, #32
 800cd66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd6a:	2330      	movs	r3, #48	; 0x30
 800cd6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd70:	9503      	str	r5, [sp, #12]
 800cd72:	f04f 0b01 	mov.w	fp, #1
 800cd76:	46b8      	mov	r8, r7
 800cd78:	4645      	mov	r5, r8
 800cd7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd7e:	b10b      	cbz	r3, 800cd84 <_vfiprintf_r+0x50>
 800cd80:	2b25      	cmp	r3, #37	; 0x25
 800cd82:	d154      	bne.n	800ce2e <_vfiprintf_r+0xfa>
 800cd84:	ebb8 0a07 	subs.w	sl, r8, r7
 800cd88:	d00b      	beq.n	800cda2 <_vfiprintf_r+0x6e>
 800cd8a:	4653      	mov	r3, sl
 800cd8c:	463a      	mov	r2, r7
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4630      	mov	r0, r6
 800cd92:	f7ff ffbc 	bl	800cd0e <__sfputs_r>
 800cd96:	3001      	adds	r0, #1
 800cd98:	f000 80c2 	beq.w	800cf20 <_vfiprintf_r+0x1ec>
 800cd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9e:	4453      	add	r3, sl
 800cda0:	9309      	str	r3, [sp, #36]	; 0x24
 800cda2:	f898 3000 	ldrb.w	r3, [r8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 80ba 	beq.w	800cf20 <_vfiprintf_r+0x1ec>
 800cdac:	2300      	movs	r3, #0
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdb6:	9304      	str	r3, [sp, #16]
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdbe:	931a      	str	r3, [sp, #104]	; 0x68
 800cdc0:	46a8      	mov	r8, r5
 800cdc2:	2205      	movs	r2, #5
 800cdc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cdc8:	485e      	ldr	r0, [pc, #376]	; (800cf44 <_vfiprintf_r+0x210>)
 800cdca:	f7f3 fa19 	bl	8000200 <memchr>
 800cdce:	9b04      	ldr	r3, [sp, #16]
 800cdd0:	bb78      	cbnz	r0, 800ce32 <_vfiprintf_r+0xfe>
 800cdd2:	06d9      	lsls	r1, r3, #27
 800cdd4:	bf44      	itt	mi
 800cdd6:	2220      	movmi	r2, #32
 800cdd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cddc:	071a      	lsls	r2, r3, #28
 800cdde:	bf44      	itt	mi
 800cde0:	222b      	movmi	r2, #43	; 0x2b
 800cde2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cde6:	782a      	ldrb	r2, [r5, #0]
 800cde8:	2a2a      	cmp	r2, #42	; 0x2a
 800cdea:	d02a      	beq.n	800ce42 <_vfiprintf_r+0x10e>
 800cdec:	9a07      	ldr	r2, [sp, #28]
 800cdee:	46a8      	mov	r8, r5
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	250a      	movs	r5, #10
 800cdf4:	4641      	mov	r1, r8
 800cdf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdfa:	3b30      	subs	r3, #48	; 0x30
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	d969      	bls.n	800ced4 <_vfiprintf_r+0x1a0>
 800ce00:	b360      	cbz	r0, 800ce5c <_vfiprintf_r+0x128>
 800ce02:	e024      	b.n	800ce4e <_vfiprintf_r+0x11a>
 800ce04:	4b50      	ldr	r3, [pc, #320]	; (800cf48 <_vfiprintf_r+0x214>)
 800ce06:	429c      	cmp	r4, r3
 800ce08:	d101      	bne.n	800ce0e <_vfiprintf_r+0xda>
 800ce0a:	68b4      	ldr	r4, [r6, #8]
 800ce0c:	e7a2      	b.n	800cd54 <_vfiprintf_r+0x20>
 800ce0e:	4b4f      	ldr	r3, [pc, #316]	; (800cf4c <_vfiprintf_r+0x218>)
 800ce10:	429c      	cmp	r4, r3
 800ce12:	bf08      	it	eq
 800ce14:	68f4      	ldreq	r4, [r6, #12]
 800ce16:	e79d      	b.n	800cd54 <_vfiprintf_r+0x20>
 800ce18:	4621      	mov	r1, r4
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7fe fbd6 	bl	800b5cc <__swsetup_r>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	d09d      	beq.n	800cd60 <_vfiprintf_r+0x2c>
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	b01d      	add	sp, #116	; 0x74
 800ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2e:	46a8      	mov	r8, r5
 800ce30:	e7a2      	b.n	800cd78 <_vfiprintf_r+0x44>
 800ce32:	4a44      	ldr	r2, [pc, #272]	; (800cf44 <_vfiprintf_r+0x210>)
 800ce34:	1a80      	subs	r0, r0, r2
 800ce36:	fa0b f000 	lsl.w	r0, fp, r0
 800ce3a:	4318      	orrs	r0, r3
 800ce3c:	9004      	str	r0, [sp, #16]
 800ce3e:	4645      	mov	r5, r8
 800ce40:	e7be      	b.n	800cdc0 <_vfiprintf_r+0x8c>
 800ce42:	9a03      	ldr	r2, [sp, #12]
 800ce44:	1d11      	adds	r1, r2, #4
 800ce46:	6812      	ldr	r2, [r2, #0]
 800ce48:	9103      	str	r1, [sp, #12]
 800ce4a:	2a00      	cmp	r2, #0
 800ce4c:	db01      	blt.n	800ce52 <_vfiprintf_r+0x11e>
 800ce4e:	9207      	str	r2, [sp, #28]
 800ce50:	e004      	b.n	800ce5c <_vfiprintf_r+0x128>
 800ce52:	4252      	negs	r2, r2
 800ce54:	f043 0302 	orr.w	r3, r3, #2
 800ce58:	9207      	str	r2, [sp, #28]
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	f898 3000 	ldrb.w	r3, [r8]
 800ce60:	2b2e      	cmp	r3, #46	; 0x2e
 800ce62:	d10e      	bne.n	800ce82 <_vfiprintf_r+0x14e>
 800ce64:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ce68:	2b2a      	cmp	r3, #42	; 0x2a
 800ce6a:	d138      	bne.n	800cede <_vfiprintf_r+0x1aa>
 800ce6c:	9b03      	ldr	r3, [sp, #12]
 800ce6e:	1d1a      	adds	r2, r3, #4
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	9203      	str	r2, [sp, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	bfb8      	it	lt
 800ce78:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce7c:	f108 0802 	add.w	r8, r8, #2
 800ce80:	9305      	str	r3, [sp, #20]
 800ce82:	4d33      	ldr	r5, [pc, #204]	; (800cf50 <_vfiprintf_r+0x21c>)
 800ce84:	f898 1000 	ldrb.w	r1, [r8]
 800ce88:	2203      	movs	r2, #3
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f7f3 f9b8 	bl	8000200 <memchr>
 800ce90:	b140      	cbz	r0, 800cea4 <_vfiprintf_r+0x170>
 800ce92:	2340      	movs	r3, #64	; 0x40
 800ce94:	1b40      	subs	r0, r0, r5
 800ce96:	fa03 f000 	lsl.w	r0, r3, r0
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	4303      	orrs	r3, r0
 800ce9e:	f108 0801 	add.w	r8, r8, #1
 800cea2:	9304      	str	r3, [sp, #16]
 800cea4:	f898 1000 	ldrb.w	r1, [r8]
 800cea8:	482a      	ldr	r0, [pc, #168]	; (800cf54 <_vfiprintf_r+0x220>)
 800ceaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ceae:	2206      	movs	r2, #6
 800ceb0:	f108 0701 	add.w	r7, r8, #1
 800ceb4:	f7f3 f9a4 	bl	8000200 <memchr>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d037      	beq.n	800cf2c <_vfiprintf_r+0x1f8>
 800cebc:	4b26      	ldr	r3, [pc, #152]	; (800cf58 <_vfiprintf_r+0x224>)
 800cebe:	bb1b      	cbnz	r3, 800cf08 <_vfiprintf_r+0x1d4>
 800cec0:	9b03      	ldr	r3, [sp, #12]
 800cec2:	3307      	adds	r3, #7
 800cec4:	f023 0307 	bic.w	r3, r3, #7
 800cec8:	3308      	adds	r3, #8
 800ceca:	9303      	str	r3, [sp, #12]
 800cecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cece:	444b      	add	r3, r9
 800ced0:	9309      	str	r3, [sp, #36]	; 0x24
 800ced2:	e750      	b.n	800cd76 <_vfiprintf_r+0x42>
 800ced4:	fb05 3202 	mla	r2, r5, r2, r3
 800ced8:	2001      	movs	r0, #1
 800ceda:	4688      	mov	r8, r1
 800cedc:	e78a      	b.n	800cdf4 <_vfiprintf_r+0xc0>
 800cede:	2300      	movs	r3, #0
 800cee0:	f108 0801 	add.w	r8, r8, #1
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	4619      	mov	r1, r3
 800cee8:	250a      	movs	r5, #10
 800ceea:	4640      	mov	r0, r8
 800ceec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cef0:	3a30      	subs	r2, #48	; 0x30
 800cef2:	2a09      	cmp	r2, #9
 800cef4:	d903      	bls.n	800cefe <_vfiprintf_r+0x1ca>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0c3      	beq.n	800ce82 <_vfiprintf_r+0x14e>
 800cefa:	9105      	str	r1, [sp, #20]
 800cefc:	e7c1      	b.n	800ce82 <_vfiprintf_r+0x14e>
 800cefe:	fb05 2101 	mla	r1, r5, r1, r2
 800cf02:	2301      	movs	r3, #1
 800cf04:	4680      	mov	r8, r0
 800cf06:	e7f0      	b.n	800ceea <_vfiprintf_r+0x1b6>
 800cf08:	ab03      	add	r3, sp, #12
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <_vfiprintf_r+0x228>)
 800cf10:	a904      	add	r1, sp, #16
 800cf12:	4630      	mov	r0, r6
 800cf14:	f7fd fe06 	bl	800ab24 <_printf_float>
 800cf18:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf1c:	4681      	mov	r9, r0
 800cf1e:	d1d5      	bne.n	800cecc <_vfiprintf_r+0x198>
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	065b      	lsls	r3, r3, #25
 800cf24:	f53f af7e 	bmi.w	800ce24 <_vfiprintf_r+0xf0>
 800cf28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf2a:	e77d      	b.n	800ce28 <_vfiprintf_r+0xf4>
 800cf2c:	ab03      	add	r3, sp, #12
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	4622      	mov	r2, r4
 800cf32:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <_vfiprintf_r+0x228>)
 800cf34:	a904      	add	r1, sp, #16
 800cf36:	4630      	mov	r0, r6
 800cf38:	f7fe f8aa 	bl	800b090 <_printf_i>
 800cf3c:	e7ec      	b.n	800cf18 <_vfiprintf_r+0x1e4>
 800cf3e:	bf00      	nop
 800cf40:	0800d1a4 	.word	0x0800d1a4
 800cf44:	0800d2e4 	.word	0x0800d2e4
 800cf48:	0800d1c4 	.word	0x0800d1c4
 800cf4c:	0800d184 	.word	0x0800d184
 800cf50:	0800d2ea 	.word	0x0800d2ea
 800cf54:	0800d2ee 	.word	0x0800d2ee
 800cf58:	0800ab25 	.word	0x0800ab25
 800cf5c:	0800cd0f 	.word	0x0800cd0f

0800cf60 <__sread>:
 800cf60:	b510      	push	{r4, lr}
 800cf62:	460c      	mov	r4, r1
 800cf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf68:	f000 f8a6 	bl	800d0b8 <_read_r>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	bfab      	itete	ge
 800cf70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf72:	89a3      	ldrhlt	r3, [r4, #12]
 800cf74:	181b      	addge	r3, r3, r0
 800cf76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf7a:	bfac      	ite	ge
 800cf7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf7e:	81a3      	strhlt	r3, [r4, #12]
 800cf80:	bd10      	pop	{r4, pc}

0800cf82 <__swrite>:
 800cf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf86:	461f      	mov	r7, r3
 800cf88:	898b      	ldrh	r3, [r1, #12]
 800cf8a:	05db      	lsls	r3, r3, #23
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	460c      	mov	r4, r1
 800cf90:	4616      	mov	r6, r2
 800cf92:	d505      	bpl.n	800cfa0 <__swrite+0x1e>
 800cf94:	2302      	movs	r3, #2
 800cf96:	2200      	movs	r2, #0
 800cf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9c:	f000 f868 	bl	800d070 <_lseek_r>
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfaa:	81a3      	strh	r3, [r4, #12]
 800cfac:	4632      	mov	r2, r6
 800cfae:	463b      	mov	r3, r7
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb6:	f000 b817 	b.w	800cfe8 <_write_r>

0800cfba <__sseek>:
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc2:	f000 f855 	bl	800d070 <_lseek_r>
 800cfc6:	1c43      	adds	r3, r0, #1
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	bf15      	itete	ne
 800cfcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfd6:	81a3      	strheq	r3, [r4, #12]
 800cfd8:	bf18      	it	ne
 800cfda:	81a3      	strhne	r3, [r4, #12]
 800cfdc:	bd10      	pop	{r4, pc}

0800cfde <__sclose>:
 800cfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe2:	f000 b813 	b.w	800d00c <_close_r>
	...

0800cfe8 <_write_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4c07      	ldr	r4, [pc, #28]	; (800d008 <_write_r+0x20>)
 800cfec:	4605      	mov	r5, r0
 800cfee:	4608      	mov	r0, r1
 800cff0:	4611      	mov	r1, r2
 800cff2:	2200      	movs	r2, #0
 800cff4:	6022      	str	r2, [r4, #0]
 800cff6:	461a      	mov	r2, r3
 800cff8:	f7fd fb0a 	bl	800a610 <_write>
 800cffc:	1c43      	adds	r3, r0, #1
 800cffe:	d102      	bne.n	800d006 <_write_r+0x1e>
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	b103      	cbz	r3, 800d006 <_write_r+0x1e>
 800d004:	602b      	str	r3, [r5, #0]
 800d006:	bd38      	pop	{r3, r4, r5, pc}
 800d008:	200009fc 	.word	0x200009fc

0800d00c <_close_r>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4c06      	ldr	r4, [pc, #24]	; (800d028 <_close_r+0x1c>)
 800d010:	2300      	movs	r3, #0
 800d012:	4605      	mov	r5, r0
 800d014:	4608      	mov	r0, r1
 800d016:	6023      	str	r3, [r4, #0]
 800d018:	f7f4 fbcf 	bl	80017ba <_close>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d102      	bne.n	800d026 <_close_r+0x1a>
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	b103      	cbz	r3, 800d026 <_close_r+0x1a>
 800d024:	602b      	str	r3, [r5, #0]
 800d026:	bd38      	pop	{r3, r4, r5, pc}
 800d028:	200009fc 	.word	0x200009fc

0800d02c <_fstat_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4c07      	ldr	r4, [pc, #28]	; (800d04c <_fstat_r+0x20>)
 800d030:	2300      	movs	r3, #0
 800d032:	4605      	mov	r5, r0
 800d034:	4608      	mov	r0, r1
 800d036:	4611      	mov	r1, r2
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	f7f4 fbca 	bl	80017d2 <_fstat>
 800d03e:	1c43      	adds	r3, r0, #1
 800d040:	d102      	bne.n	800d048 <_fstat_r+0x1c>
 800d042:	6823      	ldr	r3, [r4, #0]
 800d044:	b103      	cbz	r3, 800d048 <_fstat_r+0x1c>
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	bd38      	pop	{r3, r4, r5, pc}
 800d04a:	bf00      	nop
 800d04c:	200009fc 	.word	0x200009fc

0800d050 <_isatty_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4c06      	ldr	r4, [pc, #24]	; (800d06c <_isatty_r+0x1c>)
 800d054:	2300      	movs	r3, #0
 800d056:	4605      	mov	r5, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	f7f4 fbc9 	bl	80017f2 <_isatty>
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	d102      	bne.n	800d06a <_isatty_r+0x1a>
 800d064:	6823      	ldr	r3, [r4, #0]
 800d066:	b103      	cbz	r3, 800d06a <_isatty_r+0x1a>
 800d068:	602b      	str	r3, [r5, #0]
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	200009fc 	.word	0x200009fc

0800d070 <_lseek_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4c07      	ldr	r4, [pc, #28]	; (800d090 <_lseek_r+0x20>)
 800d074:	4605      	mov	r5, r0
 800d076:	4608      	mov	r0, r1
 800d078:	4611      	mov	r1, r2
 800d07a:	2200      	movs	r2, #0
 800d07c:	6022      	str	r2, [r4, #0]
 800d07e:	461a      	mov	r2, r3
 800d080:	f7f4 fbc2 	bl	8001808 <_lseek>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_lseek_r+0x1e>
 800d088:	6823      	ldr	r3, [r4, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_lseek_r+0x1e>
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	200009fc 	.word	0x200009fc

0800d094 <__ascii_mbtowc>:
 800d094:	b082      	sub	sp, #8
 800d096:	b901      	cbnz	r1, 800d09a <__ascii_mbtowc+0x6>
 800d098:	a901      	add	r1, sp, #4
 800d09a:	b142      	cbz	r2, 800d0ae <__ascii_mbtowc+0x1a>
 800d09c:	b14b      	cbz	r3, 800d0b2 <__ascii_mbtowc+0x1e>
 800d09e:	7813      	ldrb	r3, [r2, #0]
 800d0a0:	600b      	str	r3, [r1, #0]
 800d0a2:	7812      	ldrb	r2, [r2, #0]
 800d0a4:	1c10      	adds	r0, r2, #0
 800d0a6:	bf18      	it	ne
 800d0a8:	2001      	movne	r0, #1
 800d0aa:	b002      	add	sp, #8
 800d0ac:	4770      	bx	lr
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	e7fb      	b.n	800d0aa <__ascii_mbtowc+0x16>
 800d0b2:	f06f 0001 	mvn.w	r0, #1
 800d0b6:	e7f8      	b.n	800d0aa <__ascii_mbtowc+0x16>

0800d0b8 <_read_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4c07      	ldr	r4, [pc, #28]	; (800d0d8 <_read_r+0x20>)
 800d0bc:	4605      	mov	r5, r0
 800d0be:	4608      	mov	r0, r1
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	6022      	str	r2, [r4, #0]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	f7f4 fb5a 	bl	8001780 <_read>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_read_r+0x1e>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_read_r+0x1e>
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	200009fc 	.word	0x200009fc

0800d0dc <__ascii_wctomb>:
 800d0dc:	b149      	cbz	r1, 800d0f2 <__ascii_wctomb+0x16>
 800d0de:	2aff      	cmp	r2, #255	; 0xff
 800d0e0:	bf85      	ittet	hi
 800d0e2:	238a      	movhi	r3, #138	; 0x8a
 800d0e4:	6003      	strhi	r3, [r0, #0]
 800d0e6:	700a      	strbls	r2, [r1, #0]
 800d0e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d0ec:	bf98      	it	ls
 800d0ee:	2001      	movls	r0, #1
 800d0f0:	4770      	bx	lr
 800d0f2:	4608      	mov	r0, r1
 800d0f4:	4770      	bx	lr
	...

0800d0f8 <_init>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	bf00      	nop
 800d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fe:	bc08      	pop	{r3}
 800d100:	469e      	mov	lr, r3
 800d102:	4770      	bx	lr

0800d104 <_fini>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr
