
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016274  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08016428  08016428  00026428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080168c0  080168c0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080168c0  080168c0  000268c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080168c8  080168c8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080168c8  080168c8  000268c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080168cc  080168cc  000268cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080168d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  200001f0  08016ac0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc0  08016ac0  00031cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029639  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005197  00000000  00000000  00059859  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e20  00000000  00000000  0005e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  00060810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007c47  00000000  00000000  000623e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001af5b  00000000  00000000  0006a02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebf20  00000000  00000000  00084f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093e4  00000000  00000000  00170f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801640c 	.word	0x0801640c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0801640c 	.word	0x0801640c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_DMA_Init+0x5c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2105      	movs	r1, #5
 800106e:	200b      	movs	r0, #11
 8001070:	f001 fbc4 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001074:	200b      	movs	r0, #11
 8001076:	f001 fbdd 	bl	8002834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	200e      	movs	r0, #14
 8001080:	f001 fbbc 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001084:	200e      	movs	r0, #14
 8001086:	f001 fbd5 	bl	8002834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2010      	movs	r0, #16
 8001090:	f001 fbb4 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001094:	2010      	movs	r0, #16
 8001096:	f001 fbcd 	bl	8002834 <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <MX_FREERTOS_Init+0x18>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_FREERTOS_Init+0x1c>)
 80010b2:	f00c fd49 	bl	800db48 <osThreadNew>
 80010b6:	4602      	mov	r2, r0
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <MX_FREERTOS_Init+0x20>)
 80010ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	080164c8 	.word	0x080164c8
 80010c4:	080010cd 	.word	0x080010cd
 80010c8:	20001210 	.word	0x20001210

080010cc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f00c fddd 	bl	800dc94 <osDelay>
 80010da:	e7fb      	b.n	80010d4 <StartDefaultTask+0x8>

080010dc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	4b80      	ldr	r3, [pc, #512]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a7f      	ldr	r2, [pc, #508]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	623b      	str	r3, [r7, #32]
 800110c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a78      	ldr	r2, [pc, #480]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a71      	ldr	r2, [pc, #452]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <MX_GPIO_Init+0x21c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <MX_GPIO_Init+0x21c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a6a      	ldr	r2, [pc, #424]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b68      	ldr	r3, [pc, #416]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a63      	ldr	r2, [pc, #396]	; (80012f8 <MX_GPIO_Init+0x21c>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a5c      	ldr	r2, [pc, #368]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b5a      	ldr	r3, [pc, #360]	; (80012f8 <MX_GPIO_Init+0x21c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b56      	ldr	r3, [pc, #344]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a55      	ldr	r2, [pc, #340]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b4f      	ldr	r3, [pc, #316]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80011c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <MX_GPIO_Init+0x21c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80011d8:	4848      	ldr	r0, [pc, #288]	; (80012fc <MX_GPIO_Init+0x220>)
 80011da:	f002 f88d 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	4847      	ldr	r0, [pc, #284]	; (8001300 <MX_GPIO_Init+0x224>)
 80011e4:	f002 f888 	bl	80032f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	4b45      	ldr	r3, [pc, #276]	; (8001304 <MX_GPIO_Init+0x228>)
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	4842      	ldr	r0, [pc, #264]	; (8001308 <MX_GPIO_Init+0x22c>)
 80011fe:	f001 fed1 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001202:	2332      	movs	r3, #50	; 0x32
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001212:	230b      	movs	r3, #11
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	483a      	ldr	r0, [pc, #232]	; (8001308 <MX_GPIO_Init+0x22c>)
 800121e:	f001 fec1 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001222:	2386      	movs	r3, #134	; 0x86
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001232:	230b      	movs	r3, #11
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4833      	ldr	r0, [pc, #204]	; (800130c <MX_GPIO_Init+0x230>)
 800123e:	f001 feb1 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001242:	f244 0381 	movw	r3, #16513	; 0x4081
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	4828      	ldr	r0, [pc, #160]	; (80012fc <MX_GPIO_Init+0x220>)
 800125c:	f001 fea2 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001272:	230b      	movs	r3, #11
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	481f      	ldr	r0, [pc, #124]	; (80012fc <MX_GPIO_Init+0x220>)
 800127e:	f001 fe91 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4819      	ldr	r0, [pc, #100]	; (8001300 <MX_GPIO_Init+0x224>)
 800129a:	f001 fe83 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_GPIO_Init+0x224>)
 80012b2:	f001 fe77 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_GPIO_Init+0x228>)
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_GPIO_Init+0x234>)
 80012ca:	f001 fe6b 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_GPIO_Init+0x224>)
 80012ec:	f001 fe5a 	bl	8002fa4 <HAL_GPIO_Init>

}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	; 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400
 8001300:	40021800 	.word	0x40021800
 8001304:	10110000 	.word	0x10110000
 8001308:	40020800 	.word	0x40020800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020c00 	.word	0x40020c00

08001314 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_I2C1_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <MX_I2C1_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_I2C1_Init+0x74>)
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <MX_I2C1_Init+0x7c>)
 8001322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_I2C1_Init+0x74>)
 8001332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_I2C1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_I2C1_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_I2C1_Init+0x74>)
 8001352:	f001 ffeb 	bl	800332c <HAL_I2C_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800135c:	f000 f9de 	bl	800171c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <MX_I2C1_Init+0x74>)
 8001364:	f004 feb3 	bl	80060ce <HAL_I2CEx_ConfigAnalogFilter>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800136e:	f000 f9d5 	bl	800171c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_I2C1_Init+0x74>)
 8001376:	f004 fee6 	bl	8006146 <HAL_I2CEx_ConfigDigitalFilter>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 f9cc 	bl	800171c <Error_Handler>
  }

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20001214 	.word	0x20001214
 800138c:	40005400 	.word	0x40005400
 8001390:	00061a80 	.word	0x00061a80

08001394 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_I2C2_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_I2C2_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_I2C2_Init+0x74>)
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <MX_I2C2_Init+0x7c>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_I2C2_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_I2C2_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_I2C2_Init+0x74>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_I2C2_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_I2C2_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_I2C2_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_I2C2_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_I2C2_Init+0x74>)
 80013d2:	f001 ffab 	bl	800332c <HAL_I2C_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 f99e 	bl	800171c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4809      	ldr	r0, [pc, #36]	; (8001408 <MX_I2C2_Init+0x74>)
 80013e4:	f004 fe73 	bl	80060ce <HAL_I2CEx_ConfigAnalogFilter>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80013ee:	f000 f995 	bl	800171c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_I2C2_Init+0x74>)
 80013f6:	f004 fea6 	bl	8006146 <HAL_I2CEx_ConfigDigitalFilter>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 f98c 	bl	800171c <Error_Handler>
  }

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20001268 	.word	0x20001268
 800140c:	40005800 	.word	0x40005800
 8001410:	00061a80 	.word	0x00061a80

08001414 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a51      	ldr	r2, [pc, #324]	; (8001578 <HAL_I2C_MspInit+0x164>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d15b      	bne.n	80014ee <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_I2C_MspInit+0x168>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a4f      	ldr	r2, [pc, #316]	; (800157c <HAL_I2C_MspInit+0x168>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b4d      	ldr	r3, [pc, #308]	; (800157c <HAL_I2C_MspInit+0x168>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001452:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	2312      	movs	r3, #18
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001464:	2304      	movs	r3, #4
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4844      	ldr	r0, [pc, #272]	; (8001580 <HAL_I2C_MspInit+0x16c>)
 8001470:	f001 fd98 	bl	8002fa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_I2C_MspInit+0x168>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a3f      	ldr	r2, [pc, #252]	; (800157c <HAL_I2C_MspInit+0x168>)
 800147e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_I2C_MspInit+0x168>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <HAL_I2C_MspInit+0x170>)
 8001492:	4a3d      	ldr	r2, [pc, #244]	; (8001588 <HAL_I2C_MspInit+0x174>)
 8001494:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_I2C_MspInit+0x170>)
 8001498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800149c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80014d0:	482c      	ldr	r0, [pc, #176]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014d2:	f001 f9bd 	bl	8002850 <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80014dc:	f000 f91e 	bl	800171c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <HAL_I2C_MspInit+0x170>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014ec:	e040      	b.n	8001570 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <HAL_I2C_MspInit+0x178>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13b      	bne.n	8001570 <HAL_I2C_MspInit+0x15c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_I2C_MspInit+0x168>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_I2C_MspInit+0x168>)
 8001502:	f043 0320 	orr.w	r3, r3, #32
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_I2C_MspInit+0x168>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0320 	and.w	r3, r3, #32
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001514:	2303      	movs	r3, #3
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001518:	2312      	movs	r3, #18
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001524:	2304      	movs	r3, #4
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4818      	ldr	r0, [pc, #96]	; (8001590 <HAL_I2C_MspInit+0x17c>)
 8001530:	f001 fd38 	bl	8002fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_I2C_MspInit+0x168>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_I2C_MspInit+0x168>)
 800153e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_I2C_MspInit+0x168>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2105      	movs	r1, #5
 8001554:	2021      	movs	r0, #33	; 0x21
 8001556:	f001 f951 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800155a:	2021      	movs	r0, #33	; 0x21
 800155c:	f001 f96a 	bl	8002834 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2105      	movs	r1, #5
 8001564:	2022      	movs	r0, #34	; 0x22
 8001566:	f001 f949 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800156a:	2022      	movs	r0, #34	; 0x22
 800156c:	f001 f962 	bl	8002834 <HAL_NVIC_EnableIRQ>
}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40005400 	.word	0x40005400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400
 8001584:	200012bc 	.word	0x200012bc
 8001588:	40026088 	.word	0x40026088
 800158c:	40005800 	.word	0x40005800
 8001590:	40021400 	.word	0x40021400

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001598:	f001 f814 	bl	80025c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 f826 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a0:	f7ff fd9c 	bl	80010dc <MX_GPIO_Init>
  MX_DMA_Init();
 80015a4:	f7ff fd50 	bl	8001048 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015a8:	f000 fd8c 	bl	80020c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015ac:	f000 ff58 	bl	8002460 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80015b0:	f7ff feb0 	bl	8001314 <MX_I2C1_Init>
  MX_TIM11_Init();
 80015b4:	f000 fbcc 	bl	8001d50 <MX_TIM11_Init>
  MX_TIM3_Init();
 80015b8:	f000 fa64 	bl	8001a84 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015bc:	f000 fae4 	bl	8001b88 <MX_TIM4_Init>
  MX_UART7_Init();
 80015c0:	f000 fd28 	bl	8002014 <MX_UART7_Init>
  MX_USART2_UART_Init();
 80015c4:	f000 fd54 	bl	8002070 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80015c8:	f7ff fee4 	bl	8001394 <MX_I2C2_Init>
  MX_TIM10_Init();
 80015cc:	f000 fb74 	bl	8001cb8 <MX_TIM10_Init>
  MX_UART5_Init();
 80015d0:	f000 fcf6 	bl	8001fc0 <MX_UART5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80015d4:	f000 f874 	bl	80016c0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  userMain();
 80015d8:	f00c f9c6 	bl	800d968 <userMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80015dc:	f00c fa4a 	bl	800da74 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80015e0:	f7ff fd62 	bl	80010a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80015e4:	f00c fa7a 	bl	800dadc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <main+0x54>
	...

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b094      	sub	sp, #80	; 0x50
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2230      	movs	r2, #48	; 0x30
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f010 fc1b 	bl	8011e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <SystemClock_Config+0xcc>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <SystemClock_Config+0xcc>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a21      	ldr	r2, [pc, #132]	; (80016bc <SystemClock_Config+0xd0>)
 8001636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <SystemClock_Config+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001648:	2301      	movs	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800165c:	2308      	movs	r3, #8
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800166a:	2307      	movs	r3, #7
 800166c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	4618      	mov	r0, r3
 8001674:	f004 fec4 	bl	8006400 <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800167e:	f000 f84d 	bl	800171c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2302      	movs	r3, #2
 8001688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2105      	movs	r1, #5
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 f91d 	bl	80068e0 <HAL_RCC_ClockConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016ac:	f000 f836 	bl	800171c <Error_Handler>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3750      	adds	r7, #80	; 0x50
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2105      	movs	r1, #5
 80016c8:	201f      	movs	r0, #31
 80016ca:	f001 f897 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016ce:	201f      	movs	r0, #31
 80016d0:	f001 f8b0 	bl	8002834 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2105      	movs	r1, #5
 80016d8:	2020      	movs	r0, #32
 80016da:	f001 f88f 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016de:	2020      	movs	r0, #32
 80016e0:	f001 f8a8 	bl	8002834 <HAL_NVIC_EnableIRQ>
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2105      	movs	r1, #5
 80016e8:	2052      	movs	r0, #82	; 0x52
 80016ea:	f001 f887 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 80016ee:	2052      	movs	r0, #82	; 0x52
 80016f0:	f001 f8a0 	bl	8002834 <HAL_NVIC_EnableIRQ>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800170a:	f000 ff7d 	bl	8002608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40001000 	.word	0x40001000

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_MspInit+0x54>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_MspInit+0x54>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x54>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_MspInit+0x54>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_MspInit+0x54>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_MspInit+0x54>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	210f      	movs	r1, #15
 800176e:	f06f 0001 	mvn.w	r0, #1
 8001772:	f001 f843 	bl	80027fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	2036      	movs	r0, #54	; 0x36
 800179a:	f001 f82f 	bl	80027fc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800179e:	2036      	movs	r0, #54	; 0x36
 80017a0:	f001 f848 	bl	8002834 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <HAL_InitTick+0xa4>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <HAL_InitTick+0xa4>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_InitTick+0xa4>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c0:	f107 0210 	add.w	r2, r7, #16
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 fa7a 	bl	8006cc4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017d0:	f005 fa50 	bl	8006c74 <HAL_RCC_GetPCLK1Freq>
 80017d4:	4603      	mov	r3, r0
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <HAL_InitTick+0xa8>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	3b01      	subs	r3, #1
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_InitTick+0xac>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <HAL_InitTick+0xb0>)
 80017ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_InitTick+0xac>)
 80017f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_InitTick+0xac>)
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_InitTick+0xac>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_InitTick+0xac>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001808:	4809      	ldr	r0, [pc, #36]	; (8001830 <HAL_InitTick+0xac>)
 800180a:	f005 fa8d 	bl	8006d28 <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <HAL_InitTick+0xac>)
 8001816:	f005 fab2 	bl	8006d7e <HAL_TIM_Base_Start_IT>
 800181a:	4603      	mov	r3, r0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	431bde83 	.word	0x431bde83
 8001830:	2000131c 	.word	0x2000131c
 8001834:	40001000 	.word	0x40001000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <DMA1_Stream0_IRQHandler+0x10>)
 8001872:	f001 f915 	bl	8002aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200015bc 	.word	0x200015bc

08001880 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Stream3_IRQHandler+0x10>)
 8001886:	f001 f90b 	bl	8002aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000151c 	.word	0x2000151c

08001894 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <DMA1_Stream5_IRQHandler+0x10>)
 800189a:	f001 f901 	bl	8002aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200012bc 	.word	0x200012bc

080018a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80018ae:	f005 fabf 	bl	8006e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000141c 	.word	0x2000141c

080018bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <I2C1_EV_IRQHandler+0x10>)
 80018c2:	f002 fb95 	bl	8003ff0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20001214 	.word	0x20001214

080018d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <I2C1_ER_IRQHandler+0x10>)
 80018d6:	f002 fcf1 	bl	80042bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20001214 	.word	0x20001214

080018e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <I2C2_EV_IRQHandler+0x10>)
 80018ea:	f002 fb81 	bl	8003ff0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20001268 	.word	0x20001268

080018f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <I2C2_ER_IRQHandler+0x10>)
 80018fe:	f002 fcdd 	bl	80042bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20001268 	.word	0x20001268

0800190c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <USART3_IRQHandler+0x10>)
 8001912:	f006 fa1b 	bl	8007d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000149c 	.word	0x2000149c

08001920 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <UART5_IRQHandler+0x10>)
 8001926:	f006 fa11 	bl	8007d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200014dc 	.word	0x200014dc

08001934 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <TIM6_DAC_IRQHandler+0x10>)
 800193a:	f005 fa79 	bl	8006e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000131c 	.word	0x2000131c

08001948 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <UART7_IRQHandler+0x10>)
 800194e:	f006 f9fd 	bl	8007d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000145c 	.word	0x2000145c

0800195c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00a      	b.n	8001984 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196e:	f3af 8000 	nop.w
 8001972:	4601      	mov	r1, r0
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf0      	blt.n	800196e <_read+0x12>
	}

return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019be:	605a      	str	r2, [r3, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x50>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x16>
		heap_end = &end;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <_sbrk+0x50>)
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <_sbrk+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <_sbrk+0x50>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <_sbrk+0x50>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	466a      	mov	r2, sp
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d907      	bls.n	8001a3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a2a:	f010 f9bf 	bl	8011dac <__errno>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	230c      	movs	r3, #12
 8001a32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	e006      	b.n	8001a48 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <_sbrk+0x50>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <_sbrk+0x50>)
 8001a44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000020c 	.word	0x2000020c
 8001a54:	20001cc0 	.word	0x20001cc0

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <SystemInit+0x28>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <SystemInit+0x28>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SystemInit+0x28>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	609a      	str	r2, [r3, #8]
#endif
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	615a      	str	r2, [r3, #20]
 8001ab2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001ab4:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001ab6:	4a33      	ldr	r2, [pc, #204]	; (8001b84 <MX_TIM3_Init+0x100>)
 8001ab8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001abc:	2229      	movs	r2, #41	; 0x29
 8001abe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001ac8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001acc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ada:	4829      	ldr	r0, [pc, #164]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001adc:	f005 f924 	bl	8006d28 <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ae6:	f7ff fe19 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4822      	ldr	r0, [pc, #136]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001af8:	f005 fb68 	bl	80071cc <HAL_TIM_ConfigClockSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b02:	f7ff fe0b 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b06:	481e      	ldr	r0, [pc, #120]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001b08:	f005 f95d 	bl	8006dc6 <HAL_TIM_PWM_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b12:	f7ff fe03 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b1e:	f107 0320 	add.w	r3, r7, #32
 8001b22:	4619      	mov	r1, r3
 8001b24:	4816      	ldr	r0, [pc, #88]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001b26:	f005 ff1b 	bl	8007960 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b30:	f7ff fdf4 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b34:	2360      	movs	r3, #96	; 0x60
 8001b36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001b4c:	f005 fa78 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b56:	f7ff fde1 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001b62:	f005 fa6d 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b6c:	f7ff fdd6 	bl	800171c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <MX_TIM3_Init+0xfc>)
 8001b72:	f000 f97b 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001b76:	bf00      	nop
 8001b78:	3738      	adds	r7, #56	; 0x38
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200013dc 	.word	0x200013dc
 8001b84:	40000400 	.word	0x40000400

08001b88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001bba:	4a3e      	ldr	r2, [pc, #248]	; (8001cb4 <MX_TIM4_Init+0x12c>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001bc0:	2229      	movs	r2, #41	; 0x29
 8001bc2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001bcc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001bd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bde:	4834      	ldr	r0, [pc, #208]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001be0:	f005 f8a2 	bl	8006d28 <HAL_TIM_Base_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001bea:	f7ff fd97 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	482d      	ldr	r0, [pc, #180]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001bfc:	f005 fae6 	bl	80071cc <HAL_TIM_ConfigClockSource>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c06:	f7ff fd89 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c0a:	4829      	ldr	r0, [pc, #164]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001c0c:	f005 f8db 	bl	8006dc6 <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c16:	f7ff fd81 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	4619      	mov	r1, r3
 8001c28:	4821      	ldr	r0, [pc, #132]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001c2a:	f005 fe99 	bl	8007960 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c34:	f7ff fd72 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c38:	2360      	movs	r3, #96	; 0x60
 8001c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001c50:	f005 f9f6 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c5a:	f7ff fd5f 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2204      	movs	r2, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001c66:	f005 f9eb 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c70:	f7ff fd54 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2208      	movs	r2, #8
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001c7c:	f005 f9e0 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c86:	f7ff fd49 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001c92:	f005 f9d5 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c9c:	f7ff fd3e 	bl	800171c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <MX_TIM4_Init+0x128>)
 8001ca2:	f000 f8e3 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001ca6:	bf00      	nop
 8001ca8:	3738      	adds	r7, #56	; 0x38
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000135c 	.word	0x2000135c
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001cd4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001cf4:	4814      	ldr	r0, [pc, #80]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001cf6:	f005 f817 	bl	8006d28 <HAL_TIM_Base_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001d00:	f7ff fd0c 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001d04:	4810      	ldr	r0, [pc, #64]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001d06:	f005 f85e 	bl	8006dc6 <HAL_TIM_PWM_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001d10:	f7ff fd04 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d14:	2360      	movs	r3, #96	; 0x60
 8001d16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001d2c:	f005 f988 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001d36:	f7ff fcf1 	bl	800171c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <MX_TIM10_Init+0x90>)
 8001d3c:	f000 f896 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001d40:	bf00      	nop
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000139c 	.word	0x2000139c
 8001d4c:	40014400 	.word	0x40014400

08001d50 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_TIM11_Init+0x40>)
 8001d56:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <MX_TIM11_Init+0x44>)
 8001d58:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1680-1;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_TIM11_Init+0x40>)
 8001d5c:	f240 628f 	movw	r2, #1679	; 0x68f
 8001d60:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_TIM11_Init+0x40>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_TIM11_Init+0x40>)
 8001d6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d6e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_TIM11_Init+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_TIM11_Init+0x40>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_TIM11_Init+0x40>)
 8001d7e:	f004 ffd3 	bl	8006d28 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001d88:	f7ff fcc8 	bl	800171c <Error_Handler>
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000141c 	.word	0x2000141c
 8001d94:	40014800 	.word	0x40014800

08001d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2c      	ldr	r2, [pc, #176]	; (8001e58 <HAL_TIM_Base_MspInit+0xc0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001dc6:	e042      	b.n	8001e4e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_TIM_Base_MspInit+0xc8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
}
 8001dee:	e02e      	b.n	8001e4e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_TIM_Base_MspInit+0xcc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
}
 8001e16:	e01a      	b.n	8001e4e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_TIM_Base_MspInit+0xd0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d115      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_TIM_Base_MspInit+0xc4>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2105      	movs	r1, #5
 8001e42:	201a      	movs	r0, #26
 8001e44:	f000 fcda 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e48:	201a      	movs	r0, #26
 8001e4a:	f000 fcf3 	bl	8002834 <HAL_NVIC_EnableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40014400 	.word	0x40014400
 8001e68:	40014800 	.word	0x40014800

08001e6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a45      	ldr	r2, [pc, #276]	; (8001fa0 <HAL_TIM_MspPostInit+0x134>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d13c      	bne.n	8001f08 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a43      	ldr	r2, [pc, #268]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <HAL_TIM_MspPostInit+0x13c>)
 8001ee2:	f001 f85f 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	482a      	ldr	r0, [pc, #168]	; (8001fac <HAL_TIM_MspPostInit+0x140>)
 8001f02:	f001 f84f 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001f06:	e047      	b.n	8001f98 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <HAL_TIM_MspPostInit+0x144>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11f      	bne.n	8001f52 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f2e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f40:	2302      	movs	r3, #2
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481a      	ldr	r0, [pc, #104]	; (8001fb4 <HAL_TIM_MspPostInit+0x148>)
 8001f4c:	f001 f82a 	bl	8002fa4 <HAL_GPIO_Init>
}
 8001f50:	e022      	b.n	8001f98 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_MspPostInit+0x14c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d11d      	bne.n	8001f98 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001f66:	f043 0320 	orr.w	r3, r3, #32
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_TIM_MspPostInit+0x138>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	480a      	ldr	r0, [pc, #40]	; (8001fbc <HAL_TIM_MspPostInit+0x150>)
 8001f94:	f001 f806 	bl	8002fa4 <HAL_GPIO_Init>
}
 8001f98:	bf00      	nop
 8001f9a:	3730      	adds	r7, #48	; 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40000800 	.word	0x40000800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40014400 	.word	0x40014400
 8001fbc:	40021400 	.word	0x40021400

08001fc0 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart7_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_UART5_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_UART5_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_UART5_Init+0x4c>)
 8001fcc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001fd0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_UART5_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_UART5_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_UART5_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_UART5_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_UART5_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_UART5_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_UART5_Init+0x4c>)
 8001ff8:	f005 fd42 	bl	8007a80 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002002:	f7ff fb8b 	bl	800171c <Error_Handler>
  }

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200014dc 	.word	0x200014dc
 8002010:	40005000 	.word	0x40005000

08002014 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_UART7_Init+0x50>)
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <MX_UART7_Init+0x54>)
 800201c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_UART7_Init+0x50>)
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <MX_UART7_Init+0x58>)
 8002022:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_UART7_Init+0x50>)
 8002026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800202a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <MX_UART7_Init+0x50>)
 800202e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002032:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_UART7_Init+0x50>)
 8002036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_UART7_Init+0x50>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_UART7_Init+0x50>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_UART7_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_UART7_Init+0x50>)
 8002050:	f005 fd16 	bl	8007a80 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 800205a:	f7ff fb5f 	bl	800171c <Error_Handler>
  }

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000145c 	.word	0x2000145c
 8002068:	40007800 	.word	0x40007800
 800206c:	000186a0 	.word	0x000186a0

08002070 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <MX_USART2_UART_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 800209c:	f44f 7240 	mov.w	r2, #768	; 0x300
 80020a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a8:	4804      	ldr	r0, [pc, #16]	; (80020bc <MX_USART2_UART_Init+0x4c>)
 80020aa:	f005 fce9 	bl	8007a80 <HAL_UART_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80020b4:	f7ff fb32 	bl	800171c <Error_Handler>
  }

}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000157c 	.word	0x2000157c
 80020c0:	40004400 	.word	0x40004400

080020c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <MX_USART3_UART_Init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80020d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_USART3_UART_Init+0x4c>)
 80020fc:	f005 fcc0 	bl	8007a80 <HAL_UART_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002106:	f7ff fb09 	bl	800171c <Error_Handler>
  }

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000149c 	.word	0x2000149c
 8002114:	40004800 	.word	0x40004800

08002118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b092      	sub	sp, #72	; 0x48
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a9c      	ldr	r2, [pc, #624]	; (80023a8 <HAL_UART_MspInit+0x290>)
 8002136:	4293      	cmp	r3, r2
 8002138:	f040 8083 	bne.w	8002242 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
 8002140:	4b9a      	ldr	r3, [pc, #616]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a99      	ldr	r2, [pc, #612]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b97      	ldr	r3, [pc, #604]	; (80023ac <HAL_UART_MspInit+0x294>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215c:	4b93      	ldr	r3, [pc, #588]	; (80023ac <HAL_UART_MspInit+0x294>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a92      	ldr	r2, [pc, #584]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b90      	ldr	r3, [pc, #576]	; (80023ac <HAL_UART_MspInit+0x294>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
 8002178:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_UART_MspInit+0x294>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a8b      	ldr	r2, [pc, #556]	; (80023ac <HAL_UART_MspInit+0x294>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b89      	ldr	r3, [pc, #548]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800219a:	2301      	movs	r3, #1
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021a2:	2308      	movs	r3, #8
 80021a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021aa:	4619      	mov	r1, r3
 80021ac:	4880      	ldr	r0, [pc, #512]	; (80023b0 <HAL_UART_MspInit+0x298>)
 80021ae:	f000 fef9 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b2:	2304      	movs	r3, #4
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021c2:	2308      	movs	r3, #8
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ca:	4619      	mov	r1, r3
 80021cc:	4879      	ldr	r0, [pc, #484]	; (80023b4 <HAL_UART_MspInit+0x29c>)
 80021ce:	f000 fee9 	bl	8002fa4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80021d2:	4b79      	ldr	r3, [pc, #484]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 80021d4:	4a79      	ldr	r2, [pc, #484]	; (80023bc <HAL_UART_MspInit+0x2a4>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80021d8:	4b77      	ldr	r3, [pc, #476]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 80021da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021de:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e0:	4b75      	ldr	r3, [pc, #468]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e6:	4b74      	ldr	r3, [pc, #464]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ec:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 80021ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f4:	4b70      	ldr	r3, [pc, #448]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021fa:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002200:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 8002202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002206:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002208:	4b6b      	ldr	r3, [pc, #428]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800220e:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002214:	4868      	ldr	r0, [pc, #416]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 8002216:	f000 fb1b 	bl	8002850 <HAL_DMA_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002220:	f7ff fa7c 	bl	800171c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a64      	ldr	r2, [pc, #400]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 8002228:	635a      	str	r2, [r3, #52]	; 0x34
 800222a:	4a63      	ldr	r2, [pc, #396]	; (80023b8 <HAL_UART_MspInit+0x2a0>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2105      	movs	r1, #5
 8002234:	2035      	movs	r0, #53	; 0x35
 8002236:	f000 fae1 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800223a:	2035      	movs	r0, #53	; 0x35
 800223c:	f000 fafa 	bl	8002834 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002240:	e104      	b.n	800244c <HAL_UART_MspInit+0x334>
  else if(uartHandle->Instance==UART7)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5e      	ldr	r2, [pc, #376]	; (80023c0 <HAL_UART_MspInit+0x2a8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d15c      	bne.n	8002306 <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_UART7_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
 8002250:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	4a55      	ldr	r2, [pc, #340]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800225a:	6413      	str	r3, [r2, #64]	; 0x40
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_UART_MspInit+0x294>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_UART_MspInit+0x294>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002272:	f043 0310 	orr.w	r3, r3, #16
 8002276:	6313      	str	r3, [r2, #48]	; 0x30
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_UART_MspInit+0x294>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002284:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228e:	2301      	movs	r3, #1
 8002290:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002296:	2308      	movs	r3, #8
 8002298:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800229e:	4619      	mov	r1, r3
 80022a0:	4848      	ldr	r0, [pc, #288]	; (80023c4 <HAL_UART_MspInit+0x2ac>)
 80022a2:	f000 fe7f 	bl	8002fa4 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80022a6:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022a8:	4a48      	ldr	r2, [pc, #288]	; (80023cc <HAL_UART_MspInit+0x2b4>)
 80022aa:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022ae:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80022b2:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b4:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ba:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022c0:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c6:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022c8:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ce:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022da:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022dc:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80022e8:	4837      	ldr	r0, [pc, #220]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022ea:	f000 fab1 	bl	8002850 <HAL_DMA_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80022f4:	f7ff fa12 	bl	800171c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34
 80022fe:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <HAL_UART_MspInit+0x2b0>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002304:	e0a2      	b.n	800244c <HAL_UART_MspInit+0x334>
  else if(uartHandle->Instance==USART2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <HAL_UART_MspInit+0x2b8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d163      	bne.n	80023d8 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_UART_MspInit+0x294>)
 800231a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6313      	str	r3, [r2, #48]	; 0x30
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_UART_MspInit+0x294>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_UART_MspInit+0x294>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_UART_MspInit+0x294>)
 8002352:	f043 0308 	orr.w	r3, r3, #8
 8002356:	6313      	str	r3, [r2, #48]	; 0x30
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_UART_MspInit+0x294>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002364:	2301      	movs	r3, #1
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002374:	2307      	movs	r3, #7
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800237c:	4619      	mov	r1, r3
 800237e:	4815      	ldr	r0, [pc, #84]	; (80023d4 <HAL_UART_MspInit+0x2bc>)
 8002380:	f000 fe10 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002384:	2370      	movs	r3, #112	; 0x70
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002394:	2307      	movs	r3, #7
 8002396:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002398:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800239c:	4619      	mov	r1, r3
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <HAL_UART_MspInit+0x29c>)
 80023a0:	f000 fe00 	bl	8002fa4 <HAL_GPIO_Init>
}
 80023a4:	e052      	b.n	800244c <HAL_UART_MspInit+0x334>
 80023a6:	bf00      	nop
 80023a8:	40005000 	.word	0x40005000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020800 	.word	0x40020800
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	200015bc 	.word	0x200015bc
 80023bc:	40026010 	.word	0x40026010
 80023c0:	40007800 	.word	0x40007800
 80023c4:	40021000 	.word	0x40021000
 80023c8:	2000151c 	.word	0x2000151c
 80023cc:	40026058 	.word	0x40026058
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40020000 	.word	0x40020000
  else if(uartHandle->Instance==USART3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_UART_MspInit+0x33c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d134      	bne.n	800244c <HAL_UART_MspInit+0x334>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_UART_MspInit+0x340>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_UART_MspInit+0x340>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_UART_MspInit+0x340>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_UART_MspInit+0x340>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_UART_MspInit+0x340>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_UART_MspInit+0x340>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800241a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800242c:	2307      	movs	r3, #7
 800242e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002434:	4619      	mov	r1, r3
 8002436:	4809      	ldr	r0, [pc, #36]	; (800245c <HAL_UART_MspInit+0x344>)
 8002438:	f000 fdb4 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2105      	movs	r1, #5
 8002440:	2027      	movs	r0, #39	; 0x27
 8002442:	f000 f9db 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002446:	2027      	movs	r0, #39	; 0x27
 8002448:	f000 f9f4 	bl	8002834 <HAL_NVIC_EnableIRQ>
}
 800244c:	bf00      	nop
 800244e:	3748      	adds	r7, #72	; 0x48
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40004800 	.word	0x40004800
 8002458:	40023800 	.word	0x40023800
 800245c:	40020c00 	.word	0x40020c00

08002460 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002466:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800246a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800246e:	2204      	movs	r2, #4
 8002470:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002474:	2202      	movs	r2, #2
 8002476:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002480:	2202      	movs	r2, #2
 8002482:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002486:	2201      	movs	r2, #1
 8002488:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002498:	2201      	movs	r2, #1
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a4:	f003 fe8e 	bl	80061c4 <HAL_PCD_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024ae:	f7ff f935 	bl	800171c <Error_Handler>
  }

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000161c 	.word	0x2000161c

080024bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024dc:	d13f      	bne.n	800255e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_PCD_MspInit+0xac>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_PCD_MspInit+0xac>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_PCD_MspInit+0xac>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024fa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800250c:	230a      	movs	r3, #10
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	4815      	ldr	r0, [pc, #84]	; (800256c <HAL_PCD_MspInit+0xb0>)
 8002518:	f000 fd44 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800251c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	480e      	ldr	r0, [pc, #56]	; (800256c <HAL_PCD_MspInit+0xb0>)
 8002532:	f000 fd37 	bl	8002fa4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_PCD_MspInit+0xac>)
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <HAL_PCD_MspInit+0xac>)
 800253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002540:	6353      	str	r3, [r2, #52]	; 0x34
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_PCD_MspInit+0xac>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_PCD_MspInit+0xac>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_PCD_MspInit+0xac>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800255e:	bf00      	nop
 8002560:	3728      	adds	r7, #40	; 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40020000 	.word	0x40020000

08002570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002574:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002576:	e003      	b.n	8002580 <LoopCopyDataInit>

08002578 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800257a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800257c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800257e:	3104      	adds	r1, #4

08002580 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002580:	480b      	ldr	r0, [pc, #44]	; (80025b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002584:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002586:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002588:	d3f6      	bcc.n	8002578 <CopyDataInit>
  ldr  r2, =_sbss
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800258c:	e002      	b.n	8002594 <LoopFillZerobss>

0800258e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800258e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002590:	f842 3b04 	str.w	r3, [r2], #4

08002594 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002596:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002598:	d3f9      	bcc.n	800258e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800259a:	f7ff fa5d 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259e:	f00f fc0b 	bl	8011db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a2:	f7fe fff7 	bl	8001594 <main>
  bx  lr    
 80025a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80025ac:	080168d0 	.word	0x080168d0
  ldr  r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025b4:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80025b8:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80025bc:	20001cc0 	.word	0x20001cc0

080025c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC_IRQHandler>
	...

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_Init+0x40>)
 80025ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_Init+0x40>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_Init+0x40>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f8fa 	bl	80027e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff f8c6 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f8:	f7ff f898 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00

08002608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_IncTick+0x20>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_IncTick+0x24>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4413      	add	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_IncTick+0x24>)
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000008 	.word	0x20000008
 800262c:	20001a24 	.word	0x20001a24

08002630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return uwTick;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_GetTick+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20001a24 	.word	0x20001a24

08002648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff ffee 	bl	8002630 <HAL_GetTick>
 8002654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d005      	beq.n	800266e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_Delay+0x40>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800266e:	bf00      	nop
 8002670:	f7ff ffde 	bl	8002630 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d8f7      	bhi.n	8002670 <HAL_Delay+0x28>
  {
  }
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000008 	.word	0x20000008

0800268c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <__NVIC_GetPriorityGrouping+0x18>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0307 	and.w	r3, r3, #7
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0b      	blt.n	800271a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4907      	ldr	r1, [pc, #28]	; (8002728 <__NVIC_EnableIRQ+0x38>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2001      	movs	r0, #1
 8002712:	fa00 f202 	lsl.w	r2, r0, r2
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000e100 	.word	0xe000e100

0800272c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	; (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <__NVIC_SetPriority+0x50>)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
         );
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ff4c 	bl	800268c <__NVIC_SetPriorityGrouping>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280e:	f7ff ff61 	bl	80026d4 <__NVIC_GetPriorityGrouping>
 8002812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	6978      	ldr	r0, [r7, #20]
 800281a:	f7ff ffb1 	bl	8002780 <NVIC_EncodePriority>
 800281e:	4602      	mov	r2, r0
 8002820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff80 	bl	800272c <__NVIC_SetPriority>
}
 800282c:	bf00      	nop
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff54 	bl	80026f0 <__NVIC_EnableIRQ>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff fee8 	bl	8002630 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e099      	b.n	80029a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288c:	e00f      	b.n	80028ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800288e:	f7ff fecf 	bl	8002630 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b05      	cmp	r3, #5
 800289a:	d908      	bls.n	80028ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2203      	movs	r2, #3
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e078      	b.n	80029a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e8      	bne.n	800288e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <HAL_DMA_Init+0x158>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2b04      	cmp	r3, #4
 8002906:	d107      	bne.n	8002918 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4313      	orrs	r3, r2
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 0307 	bic.w	r3, r3, #7
 800292e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b04      	cmp	r3, #4
 8002940:	d117      	bne.n	8002972 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 faab 	bl	8002eb0 <DMA_CheckFifoParam>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800296e:	2301      	movs	r3, #1
 8002970:	e016      	b.n	80029a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa62 	bl	8002e44 <DMA_CalcBaseAndBitshift>
 8002980:	4603      	mov	r3, r0
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	223f      	movs	r2, #63	; 0x3f
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	f010803f 	.word	0xf010803f

080029ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_DMA_Start_IT+0x26>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e040      	b.n	8002a54 <HAL_DMA_Start_IT+0xa8>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d12f      	bne.n	8002a46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2202      	movs	r2, #2
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f9f4 	bl	8002de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	223f      	movs	r2, #63	; 0x3f
 8002a06:	409a      	lsls	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0216 	orr.w	r2, r2, #22
 8002a1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0208 	orr.w	r2, r2, #8
 8002a32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e005      	b.n	8002a52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00c      	b.n	8002a94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_DMA_IRQHandler+0x258>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a92      	ldr	r2, [pc, #584]	; (8002cfc <HAL_DMA_IRQHandler+0x25c>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0a9b      	lsrs	r3, r3, #10
 8002ab8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2208      	movs	r2, #8
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01a      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2208      	movs	r2, #8
 8002afa:	409a      	lsls	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	2201      	movs	r2, #1
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d012      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	2201      	movs	r2, #1
 8002b30:	409a      	lsls	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2204      	movs	r2, #4
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b64:	2204      	movs	r2, #4
 8002b66:	409a      	lsls	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d043      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03c      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d108      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d024      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
 8002bce:	e01f      	b.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01b      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	e016      	b.n	8002c10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0208 	bic.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	2220      	movs	r2, #32
 8002c16:	409a      	lsls	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 808e 	beq.w	8002d3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8086 	beq.w	8002d3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2220      	movs	r2, #32
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d136      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0216 	bic.w	r2, r2, #22
 8002c58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x1da>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0208 	bic.w	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	223f      	movs	r2, #63	; 0x3f
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d07d      	beq.n	8002daa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
        }
        return;
 8002cb6:	e078      	b.n	8002daa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01c      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d108      	bne.n	8002ce6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d030      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e02b      	b.n	8002d3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d027      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
 8002cf6:	e022      	b.n	8002d3e <HAL_DMA_IRQHandler+0x29e>
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0210 	bic.w	r2, r2, #16
 8002d1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d032      	beq.n	8002dac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d022      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2205      	movs	r2, #5
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d307      	bcc.n	8002d86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f2      	bne.n	8002d6a <HAL_DMA_IRQHandler+0x2ca>
 8002d84:	e000      	b.n	8002d88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d86:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
 8002da8:	e000      	b.n	8002dac <HAL_DMA_IRQHandler+0x30c>
        return;
 8002daa:	bf00      	nop
    }
  }
}
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc2:	b2db      	uxtb	r3, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d108      	bne.n	8002e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e26:	e007      	b.n	8002e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3b10      	subs	r3, #16
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <DMA_CalcBaseAndBitshift+0x68>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d909      	bls.n	8002e86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	; 0x58
 8002e84:	e007      	b.n	8002e96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	08016504 	.word	0x08016504

08002eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d855      	bhi.n	8002f7c <DMA_CheckFifoParam+0xcc>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <DMA_CheckFifoParam+0x28>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002efb 	.word	0x08002efb
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f7d 	.word	0x08002f7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d045      	beq.n	8002f80 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e042      	b.n	8002f80 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f02:	d13f      	bne.n	8002f84 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e03c      	b.n	8002f84 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f12:	d121      	bne.n	8002f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d836      	bhi.n	8002f88 <DMA_CheckFifoParam+0xd8>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <DMA_CheckFifoParam+0x70>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f37 	.word	0x08002f37
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002f49 	.word	0x08002f49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e02f      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d024      	beq.n	8002f8c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f46:	e021      	b.n	8002f8c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f50:	d11e      	bne.n	8002f90 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f56:	e01b      	b.n	8002f90 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d902      	bls.n	8002f64 <DMA_CheckFifoParam+0xb4>
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d003      	beq.n	8002f6a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f62:	e018      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
      break;
 8002f68:	e015      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00e      	beq.n	8002f94 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7a:	e00b      	b.n	8002f94 <DMA_CheckFifoParam+0xe4>
      break;
 8002f7c:	bf00      	nop
 8002f7e:	e00a      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f80:	bf00      	nop
 8002f82:	e008      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f84:	bf00      	nop
 8002f86:	e006      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f88:	bf00      	nop
 8002f8a:	e004      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e002      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f90:	bf00      	nop
 8002f92:	e000      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f94:	bf00      	nop
    }
  } 
  
  return status; 
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e177      	b.n	80032b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8166 	bne.w	80032aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00b      	beq.n	8002ffe <HAL_GPIO_Init+0x5a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d007      	beq.n	8002ffe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff2:	2b11      	cmp	r3, #17
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d130      	bne.n	8003060 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 0201 	and.w	r2, r3, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0xfc>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b12      	cmp	r3, #18
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80c0 	beq.w	80032aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_GPIO_Init+0x320>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4a64      	ldr	r2, [pc, #400]	; (80032c4 <HAL_GPIO_Init+0x320>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
 800313a:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_GPIO_Init+0x320>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003146:	4a60      	ldr	r2, [pc, #384]	; (80032c8 <HAL_GPIO_Init+0x324>)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_GPIO_Init+0x328>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d037      	beq.n	80031e2 <HAL_GPIO_Init+0x23e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_GPIO_Init+0x32c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_GPIO_Init+0x23a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a55      	ldr	r2, [pc, #340]	; (80032d4 <HAL_GPIO_Init+0x330>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <HAL_GPIO_Init+0x236>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a54      	ldr	r2, [pc, #336]	; (80032d8 <HAL_GPIO_Init+0x334>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d025      	beq.n	80031d6 <HAL_GPIO_Init+0x232>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_GPIO_Init+0x338>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <HAL_GPIO_Init+0x22e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_GPIO_Init+0x33c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <HAL_GPIO_Init+0x22a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a51      	ldr	r2, [pc, #324]	; (80032e4 <HAL_GPIO_Init+0x340>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0x226>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a50      	ldr	r2, [pc, #320]	; (80032e8 <HAL_GPIO_Init+0x344>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x222>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4f      	ldr	r2, [pc, #316]	; (80032ec <HAL_GPIO_Init+0x348>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x21e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4e      	ldr	r2, [pc, #312]	; (80032f0 <HAL_GPIO_Init+0x34c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x21a>
 80031ba:	2309      	movs	r3, #9
 80031bc:	e012      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031be:	230a      	movs	r3, #10
 80031c0:	e010      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031c2:	2308      	movs	r3, #8
 80031c4:	e00e      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031c6:	2307      	movs	r3, #7
 80031c8:	e00c      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e00a      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031ce:	2305      	movs	r3, #5
 80031d0:	e008      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031e2:	2300      	movs	r3, #0
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f002 0203 	and.w	r2, r2, #3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4093      	lsls	r3, r2
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f4:	4934      	ldr	r1, [pc, #208]	; (80032c8 <HAL_GPIO_Init+0x324>)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3302      	adds	r3, #2
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003202:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003226:	4a33      	ldr	r2, [pc, #204]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_GPIO_Init+0x350>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003256:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_GPIO_Init+0x350>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <HAL_GPIO_Init+0x350>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a4:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <HAL_GPIO_Init+0x350>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	f67f ae84 	bls.w	8002fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	3724      	adds	r7, #36	; 0x24
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40021400 	.word	0x40021400
 80032e4:	40021800 	.word	0x40021800
 80032e8:	40021c00 	.word	0x40021c00
 80032ec:	40022000 	.word	0x40022000
 80032f0:	40022400 	.word	0x40022400
 80032f4:	40013c00 	.word	0x40013c00

080032f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003308:	787b      	ldrb	r3, [r7, #1]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003314:	e003      	b.n	800331e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	619a      	str	r2, [r3, #24]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e11f      	b.n	800357e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe f85e 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003390:	f003 fc70 	bl	8006c74 <HAL_RCC_GetPCLK1Freq>
 8003394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4a7b      	ldr	r2, [pc, #492]	; (8003588 <HAL_I2C_Init+0x25c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d807      	bhi.n	80033b0 <HAL_I2C_Init+0x84>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a7a      	ldr	r2, [pc, #488]	; (800358c <HAL_I2C_Init+0x260>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bf94      	ite	ls
 80033a8:	2301      	movls	r3, #1
 80033aa:	2300      	movhi	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e006      	b.n	80033be <HAL_I2C_Init+0x92>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a77      	ldr	r2, [pc, #476]	; (8003590 <HAL_I2C_Init+0x264>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0db      	b.n	800357e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a72      	ldr	r2, [pc, #456]	; (8003594 <HAL_I2C_Init+0x268>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0c9b      	lsrs	r3, r3, #18
 80033d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a64      	ldr	r2, [pc, #400]	; (8003588 <HAL_I2C_Init+0x25c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d802      	bhi.n	8003400 <HAL_I2C_Init+0xd4>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3301      	adds	r3, #1
 80033fe:	e009      	b.n	8003414 <HAL_I2C_Init+0xe8>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	4a63      	ldr	r2, [pc, #396]	; (8003598 <HAL_I2C_Init+0x26c>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	3301      	adds	r3, #1
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	430b      	orrs	r3, r1
 800341a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4956      	ldr	r1, [pc, #344]	; (8003588 <HAL_I2C_Init+0x25c>)
 8003430:	428b      	cmp	r3, r1
 8003432:	d80d      	bhi.n	8003450 <HAL_I2C_Init+0x124>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e59      	subs	r1, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003442:	3301      	adds	r3, #1
 8003444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003448:	2b04      	cmp	r3, #4
 800344a:	bf38      	it	cc
 800344c:	2304      	movcc	r3, #4
 800344e:	e04f      	b.n	80034f0 <HAL_I2C_Init+0x1c4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d111      	bne.n	800347c <HAL_I2C_Init+0x150>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	440b      	add	r3, r1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e012      	b.n	80034a2 <HAL_I2C_Init+0x176>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	0099      	lsls	r1, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Init+0x17e>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e022      	b.n	80034f0 <HAL_I2C_Init+0x1c4>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10e      	bne.n	80034d0 <HAL_I2C_Init+0x1a4>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1e58      	subs	r0, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	440b      	add	r3, r1
 80034c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ce:	e00f      	b.n	80034f0 <HAL_I2C_Init+0x1c4>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	1e58      	subs	r0, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	0099      	lsls	r1, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e6:	3301      	adds	r3, #1
 80034e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	6809      	ldr	r1, [r1, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800351e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6911      	ldr	r1, [r2, #16]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68d2      	ldr	r2, [r2, #12]
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	430b      	orrs	r3, r1
 8003532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	000186a0 	.word	0x000186a0
 800358c:	001e847f 	.word	0x001e847f
 8003590:	003d08ff 	.word	0x003d08ff
 8003594:	431bde83 	.word	0x431bde83
 8003598:	10624dd3 	.word	0x10624dd3

0800359c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	4608      	mov	r0, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	817b      	strh	r3, [r7, #10]
 80035ae:	460b      	mov	r3, r1
 80035b0:	813b      	strh	r3, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035b6:	f7ff f83b 	bl	8002630 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	f040 80d9 	bne.w	800377c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2319      	movs	r3, #25
 80035d0:	2201      	movs	r2, #1
 80035d2:	496d      	ldr	r1, [pc, #436]	; (8003788 <HAL_I2C_Mem_Write+0x1ec>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f002 fb82 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0cc      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Mem_Write+0x56>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0c5      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d007      	beq.n	8003618 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2221      	movs	r2, #33	; 0x21
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a3a      	ldr	r2, [r7, #32]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a4d      	ldr	r2, [pc, #308]	; (800378c <HAL_I2C_Mem_Write+0x1f0>)
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365a:	88f8      	ldrh	r0, [r7, #6]
 800365c:	893a      	ldrh	r2, [r7, #8]
 800365e:	8979      	ldrh	r1, [r7, #10]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4603      	mov	r3, r0
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f002 f82c 	bl	80056c8 <I2C_RequestMemoryWrite>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d052      	beq.n	800371c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e081      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f002 fc03 	bl	8005e8a <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06b      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d11b      	bne.n	800371c <HAL_I2C_Mem_Write+0x180>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1aa      	bne.n	800367a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f002 fbef 	bl	8005f0c <I2C_WaitOnBTFFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00d      	beq.n	8003750 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	2b04      	cmp	r3, #4
 800373a:	d107      	bne.n	800374c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e016      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000

08003790 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	; 0x30
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	4608      	mov	r0, r1
 800379a:	4611      	mov	r1, r2
 800379c:	461a      	mov	r2, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	460b      	mov	r3, r1
 80037a4:	813b      	strh	r3, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037aa:	f7fe ff41 	bl	8002630 <HAL_GetTick>
 80037ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	f040 8208 	bne.w	8003bce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2319      	movs	r3, #25
 80037c4:	2201      	movs	r2, #1
 80037c6:	497b      	ldr	r1, [pc, #492]	; (80039b4 <HAL_I2C_Mem_Read+0x224>)
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f002 fa88 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	e1fb      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_I2C_Mem_Read+0x56>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e1f4      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d007      	beq.n	800380c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2222      	movs	r2, #34	; 0x22
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a5b      	ldr	r2, [pc, #364]	; (80039b8 <HAL_I2C_Mem_Read+0x228>)
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800384e:	88f8      	ldrh	r0, [r7, #6]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	4603      	mov	r3, r0
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f001 ffc6 	bl	80057f0 <I2C_RequestMemoryRead>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1b0      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	623b      	str	r3, [r7, #32]
 800388a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e184      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d11b      	bne.n	80038de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e164      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d11b      	bne.n	800391e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	e144      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003934:	e138      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	2b03      	cmp	r3, #3
 800393c:	f200 80f1 	bhi.w	8003b22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b01      	cmp	r3, #1
 8003946:	d123      	bne.n	8003990 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f002 fb1e 	bl	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e139      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800398e:	e10b      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	2b02      	cmp	r3, #2
 8003996:	d14e      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2200      	movs	r2, #0
 80039a0:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_I2C_Mem_Read+0x22c>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f002 f99b 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e10e      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000
 80039bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a34:	e0b8      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4966      	ldr	r1, [pc, #408]	; (8003bd8 <HAL_I2C_Mem_Read+0x448>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f002 f94c 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0bf      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	2200      	movs	r2, #0
 8003a9a:	494f      	ldr	r1, [pc, #316]	; (8003bd8 <HAL_I2C_Mem_Read+0x448>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f002 f91e 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e091      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b20:	e042      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f002 fa31 	bl	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e04c      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d118      	bne.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f47f aec2 	bne.w	8003936 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	00010004 	.word	0x00010004

08003bdc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	f040 809a 	bne.w	8003d3c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c08:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_I2C_Mem_Read_IT+0x170>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	4a50      	ldr	r2, [pc, #320]	; (8003d50 <HAL_I2C_Mem_Read_IT+0x174>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	0a1a      	lsrs	r2, r3, #8
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009a      	lsls	r2, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e070      	b.n	8003d3e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d0db      	beq.n	8003c22 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_I2C_Mem_Read_IT+0x9c>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e062      	b.n	8003d3e <HAL_I2C_Mem_Read_IT+0x162>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d007      	beq.n	8003c9e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2222      	movs	r2, #34	; 0x22
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2240      	movs	r2, #64	; 0x40
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a3a      	ldr	r2, [r7, #32]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <HAL_I2C_Mem_Read_IT+0x178>)
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ce0:	897a      	ldrh	r2, [r7, #10]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003ce6:	893a      	ldrh	r2, [r7, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d06:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d16:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d36:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	14f8b589 	.word	0x14f8b589
 8003d54:	ffff0000 	.word	0xffff0000

08003d58 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d72:	f7fe fc5d 	bl	8002630 <HAL_GetTick>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	f040 8123 	bne.w	8003fd0 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d8a:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <HAL_I2C_Mem_Read_DMA+0x284>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	08db      	lsrs	r3, r3, #3
 8003d90:	4a93      	ldr	r2, [pc, #588]	; (8003fe0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	0a1a      	lsrs	r2, r3, #8
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009a      	lsls	r2, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d116      	bne.n	8003dde <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0f9      	b.n	8003fd2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d0db      	beq.n	8003da4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Mem_Read_DMA+0xa2>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0eb      	b.n	8003fd2 <HAL_I2C_Mem_Read_DMA+0x27a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d007      	beq.n	8003e20 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2222      	movs	r2, #34	; 0x22
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a61      	ldr	r2, [pc, #388]	; (8003fe4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8085 	beq.w	8003f76 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	4a5c      	ldr	r2, [pc, #368]	; (8003fec <HAL_I2C_Mem_Read_DMA+0x294>)
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	2200      	movs	r2, #0
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	2200      	movs	r2, #0
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2200      	movs	r2, #0
 8003e92:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	2200      	movs	r2, #0
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3310      	adds	r3, #16
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	461a      	mov	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	f7fe fd7b 	bl	80029ac <HAL_DMA_Start_IT>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d144      	bne.n	8003f4e <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003ec4:	88f8      	ldrh	r0, [r7, #6]
 8003ec6:	893a      	ldrh	r2, [r7, #8]
 8003ec8:	8979      	ldrh	r1, [r7, #10]
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	2323      	movs	r3, #35	; 0x23
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f001 fc8b 	bl	80057f0 <I2C_RequestMemoryRead>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e076      	b.n	8003fd2 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d108      	bne.n	8003efe <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e007      	b.n	8003f0e <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	e03e      	b.n	8003fcc <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e02d      	b.n	8003fd2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003f76:	88f8      	ldrh	r0, [r7, #6]
 8003f78:	893a      	ldrh	r2, [r7, #8]
 8003f7a:	8979      	ldrh	r1, [r7, #10]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	2323      	movs	r3, #35	; 0x23
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4603      	mov	r3, r0
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f001 fc32 	bl	80057f0 <I2C_RequestMemoryRead>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e01d      	b.n	8003fd2 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3728      	adds	r7, #40	; 0x28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	14f8b589 	.word	0x14f8b589
 8003fe4:	ffff0000 	.word	0xffff0000
 8003fe8:	080059bd 	.word	0x080059bd
 8003fec:	08005b67 	.word	0x08005b67

08003ff0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004010:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004018:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b10      	cmp	r3, #16
 800401e:	d003      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0x38>
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	f040 80b6 	bne.w	8004194 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_I2C_EV_IRQHandler+0x6e>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004048:	d003      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0x62>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004050:	d101      	bne.n	8004056 <HAL_I2C_EV_IRQHandler+0x66>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_I2C_EV_IRQHandler+0x68>
 8004056:	2300      	movs	r3, #0
 8004058:	2b01      	cmp	r3, #1
 800405a:	f000 8127 	beq.w	80042ac <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_I2C_EV_IRQHandler+0x92>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	0a5b      	lsrs	r3, r3, #9
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f002 f80f 	bl	8006098 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fd12 	bl	8004aa4 <I2C_Master_SB>
 8004080:	e087      	b.n	8004192 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	0a5b      	lsrs	r3, r3, #9
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fd88 	bl	8004bb0 <I2C_Master_ADD10>
 80040a0:	e077      	b.n	8004192 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	0a5b      	lsrs	r3, r3, #9
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fda2 	bl	8004c04 <I2C_Master_ADDR>
 80040c0:	e067      	b.n	8004192 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d030      	beq.n	8004130 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040dc:	f000 80e8 	beq.w	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	09db      	lsrs	r3, r3, #7
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00f      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x11c>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	0a9b      	lsrs	r3, r3, #10
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x11c>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9de 	bl	80044c6 <I2C_MasterTransmit_TXE>
 800410a:	e042      	b.n	8004192 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80cb 	beq.w	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	0a5b      	lsrs	r3, r3, #9
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80c4 	beq.w	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa68 	bl	80045fe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800412e:	e0bf      	b.n	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413e:	f000 80b7 	beq.w	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00f      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x17e>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	0a9b      	lsrs	r3, r3, #10
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x17e>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fb30 	bl	80047cc <I2C_MasterReceive_RXNE>
 800416c:	e011      	b.n	8004192 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 809a 	beq.w	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	0a5b      	lsrs	r3, r3, #9
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8093 	beq.w	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fba0 	bl	80048d0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004190:	e08e      	b.n	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004192:	e08d      	b.n	80042b0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	e007      	b.n	80041b6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d012      	beq.n	80041e8 <HAL_I2C_EV_IRQHandler+0x1f8>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	0a5b      	lsrs	r3, r3, #9
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00c      	beq.n	80041e8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 ff5e 	bl	80050a2 <I2C_Slave_ADDR>
 80041e6:	e066      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <HAL_I2C_EV_IRQHandler+0x218>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	0a5b      	lsrs	r3, r3, #9
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 ff93 	bl	800512c <I2C_Slave_STOPF>
 8004206:	e056      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004208:	7bbb      	ldrb	r3, [r7, #14]
 800420a:	2b21      	cmp	r3, #33	; 0x21
 800420c:	d002      	beq.n	8004214 <HAL_I2C_EV_IRQHandler+0x224>
 800420e:	7bbb      	ldrb	r3, [r7, #14]
 8004210:	2b29      	cmp	r3, #41	; 0x29
 8004212:	d125      	bne.n	8004260 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	09db      	lsrs	r3, r3, #7
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00f      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x250>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	0a9b      	lsrs	r3, r3, #10
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x250>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fe74 	bl	8004f26 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800423e:	e039      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d033      	beq.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2c4>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	0a5b      	lsrs	r3, r3, #9
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d02d      	beq.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fea1 	bl	8004fa0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425e:	e029      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00f      	beq.n	800428c <HAL_I2C_EV_IRQHandler+0x29c>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_I2C_EV_IRQHandler+0x29c>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 feac 	bl	8004fe2 <I2C_SlaveReceive_RXNE>
 800428a:	e014      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	0a5b      	lsrs	r3, r3, #9
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 feda 	bl	800505e <I2C_SlaveReceive_BTF>
 80042aa:	e004      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042b4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	; 0x28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042de:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00e      	beq.n	800430a <HAL_I2C_ER_IRQHandler+0x4e>
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004308:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	0a5b      	lsrs	r3, r3, #9
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00e      	beq.n	8004334 <HAL_I2C_ER_IRQHandler+0x78>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004332:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	0a9b      	lsrs	r3, r3, #10
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d03f      	beq.n	80043c0 <HAL_I2C_ER_IRQHandler+0x104>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d039      	beq.n	80043c0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800434c:	7efb      	ldrb	r3, [r7, #27]
 800434e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004366:	7ebb      	ldrb	r3, [r7, #26]
 8004368:	2b20      	cmp	r3, #32
 800436a:	d112      	bne.n	8004392 <HAL_I2C_ER_IRQHandler+0xd6>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <HAL_I2C_ER_IRQHandler+0xd6>
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	2b21      	cmp	r3, #33	; 0x21
 8004376:	d008      	beq.n	800438a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	2b29      	cmp	r3, #41	; 0x29
 800437c:	d005      	beq.n	800438a <HAL_I2C_ER_IRQHandler+0xce>
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	2b28      	cmp	r3, #40	; 0x28
 8004382:	d106      	bne.n	8004392 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b21      	cmp	r3, #33	; 0x21
 8004388:	d103      	bne.n	8004392 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fffe 	bl	800538c <I2C_Slave_AF>
 8004390:	e016      	b.n	80043c0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800439a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043a4:	7efb      	ldrb	r3, [r7, #27]
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d002      	beq.n	80043b0 <HAL_I2C_ER_IRQHandler+0xf4>
 80043aa:	7efb      	ldrb	r3, [r7, #27]
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d107      	bne.n	80043c0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043be:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	0adb      	lsrs	r3, r3, #11
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <HAL_I2C_ER_IRQHandler+0x12e>
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	f043 0308 	orr.w	r3, r3, #8
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043e8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f001 f835 	bl	800546c <I2C_ITError>
  }
}
 8004402:	bf00      	nop
 8004404:	3728      	adds	r7, #40	; 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	70fb      	strb	r3, [r7, #3]
 8004466:	4613      	mov	r3, r2
 8004468:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044dc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d150      	bne.n	800458e <I2C_MasterTransmit_TXE+0xc8>
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b21      	cmp	r3, #33	; 0x21
 80044f0:	d14d      	bne.n	800458e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d01d      	beq.n	8004534 <I2C_MasterTransmit_TXE+0x6e>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d01a      	beq.n	8004534 <I2C_MasterTransmit_TXE+0x6e>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004504:	d016      	beq.n	8004534 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004514:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2211      	movs	r2, #17
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ff6c 	bl	800440a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004532:	e060      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004542:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d107      	bne.n	800457e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff87 	bl	800448a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800457c:	e03b      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ff3f 	bl	800440a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800458c:	e033      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b21      	cmp	r3, #33	; 0x21
 8004592:	d005      	beq.n	80045a0 <I2C_MasterTransmit_TXE+0xda>
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d12d      	bne.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b22      	cmp	r3, #34	; 0x22
 800459e:	d12a      	bne.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d108      	bne.n	80045bc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045ba:	e01c      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d103      	bne.n	80045d0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f898 	bl	80046fe <I2C_MemoryTransmit_TXE_BTF>
}
 80045ce:	e012      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045f4:	e7ff      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b21      	cmp	r3, #33	; 0x21
 8004616:	d165      	bne.n	80046e4 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004646:	e056      	b.n	80046f6 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b08      	cmp	r3, #8
 800464c:	d01d      	beq.n	800468a <I2C_MasterTransmit_BTF+0x8c>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b20      	cmp	r3, #32
 8004652:	d01a      	beq.n	800468a <I2C_MasterTransmit_BTF+0x8c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800465a:	d016      	beq.n	800468a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800466a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2211      	movs	r2, #17
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fec1 	bl	800440a <HAL_I2C_MasterTxCpltCallback>
}
 8004688:	e035      	b.n	80046f6 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004698:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d107      	bne.n	80046d4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fedc 	bl	800448a <HAL_I2C_MemTxCpltCallback>
}
 80046d2:	e010      	b.n	80046f6 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fe94 	bl	800440a <HAL_I2C_MasterTxCpltCallback>
}
 80046e2:	e008      	b.n	80046f6 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d102      	bne.n	80046f6 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f804 	bl	80046fe <I2C_MemoryTransmit_TXE_BTF>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	2b00      	cmp	r3, #0
 800470c:	d11d      	bne.n	800474a <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10b      	bne.n	800472e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471a:	b2da      	uxtb	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	1c9a      	adds	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800472c:	e048      	b.n	80047c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004732:	b29b      	uxth	r3, r3
 8004734:	121b      	asrs	r3, r3, #8
 8004736:	b2da      	uxtb	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004748:	e03a      	b.n	80047c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10b      	bne.n	800476a <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	b2da      	uxtb	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004768:	e02a      	b.n	80047c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	2b02      	cmp	r3, #2
 8004770:	d126      	bne.n	80047c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b22      	cmp	r3, #34	; 0x22
 800477c:	d108      	bne.n	8004790 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	e017      	b.n	80047c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d111      	bne.n	80047c0 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b22      	cmp	r3, #34	; 0x22
 80047de:	d173      	bne.n	80048c8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d920      	bls.n	8004830 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d154      	bne.n	80048c8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800482e:	e04b      	b.n	80048c8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	2b02      	cmp	r3, #2
 8004836:	d047      	beq.n	80048c8 <I2C_MasterReceive_RXNE+0xfc>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d002      	beq.n	8004844 <I2C_MasterReceive_RXNE+0x78>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d141      	bne.n	80048c8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004852:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004862:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d10a      	bne.n	80048b4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f009 f8ad 	bl	800da0c <HAL_I2C_MemRxCpltCallback>
}
 80048b2:	e009      	b.n	80048c8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2212      	movs	r2, #18
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fdab 	bl	800441e <HAL_I2C_MasterRxCpltCallback>
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d11b      	bne.n	8004920 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800491e:	e0bd      	b.n	8004a9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b03      	cmp	r3, #3
 8004928:	d129      	bne.n	800497e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004938:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b04      	cmp	r3, #4
 800493e:	d00a      	beq.n	8004956 <I2C_MasterReceive_BTF+0x86>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d007      	beq.n	8004956 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004954:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800497c:	e08e      	b.n	8004a9c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d176      	bne.n	8004a76 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d002      	beq.n	8004994 <I2C_MasterReceive_BTF+0xc4>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b10      	cmp	r3, #16
 8004992:	d108      	bne.n	80049a6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e019      	b.n	80049da <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d002      	beq.n	80049b2 <I2C_MasterReceive_BTF+0xe2>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d108      	bne.n	80049c4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e00a      	b.n	80049da <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d007      	beq.n	80049da <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a34:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d10a      	bne.n	8004a60 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f008 ffd7 	bl	800da0c <HAL_I2C_MemRxCpltCallback>
}
 8004a5e:	e01d      	b.n	8004a9c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2212      	movs	r2, #18
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fcd5 	bl	800441e <HAL_I2C_MasterRxCpltCallback>
}
 8004a74:	e012      	b.n	8004a9c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d117      	bne.n	8004ae8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ad0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ad2:	e067      	b.n	8004ba4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	611a      	str	r2, [r3, #16]
}
 8004ae6:	e05d      	b.n	8004ba4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af0:	d133      	bne.n	8004b5a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b21      	cmp	r3, #33	; 0x21
 8004afc:	d109      	bne.n	8004b12 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b0e:	611a      	str	r2, [r3, #16]
 8004b10:	e008      	b.n	8004b24 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <I2C_Master_SB+0x92>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d032      	beq.n	8004ba4 <I2C_Master_SB+0x100>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d02d      	beq.n	8004ba4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b56:	605a      	str	r2, [r3, #4]
}
 8004b58:	e024      	b.n	8004ba4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	11db      	asrs	r3, r3, #7
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 0306 	and.w	r3, r3, #6
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f063 030f 	orn	r3, r3, #15
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]
}
 8004b7e:	e011      	b.n	8004ba4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10d      	bne.n	8004ba4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	11db      	asrs	r3, r3, #7
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 0306 	and.w	r3, r3, #6
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f063 030e 	orn	r3, r3, #14
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d103      	bne.n	8004bd4 <I2C_Master_ADD10+0x24>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d011      	beq.n	8004bf8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <I2C_Master_ADD10+0x38>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf6:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b091      	sub	sp, #68	; 0x44
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b22      	cmp	r3, #34	; 0x22
 8004c2c:	f040 8169 	bne.w	8004f02 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <I2C_Master_ADDR+0x54>
 8004c38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d10b      	bne.n	8004c58 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c40:	2300      	movs	r3, #0
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	e160      	b.n	8004f1a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11d      	bne.n	8004c9c <I2C_Master_ADDR+0x98>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c68:	d118      	bne.n	8004c9c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	651a      	str	r2, [r3, #80]	; 0x50
 8004c9a:	e13e      	b.n	8004f1a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d113      	bne.n	8004cce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e115      	b.n	8004efa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	f040 808a 	bne.w	8004dee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ce0:	d137      	bne.n	8004d52 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d00:	d113      	bne.n	8004d2a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d10:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	e0e7      	b.n	8004efa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e0d3      	b.n	8004efa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d02e      	beq.n	8004db6 <I2C_Master_ADDR+0x1b2>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d02b      	beq.n	8004db6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	2b12      	cmp	r3, #18
 8004d62:	d102      	bne.n	8004d6a <I2C_Master_ADDR+0x166>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d125      	bne.n	8004db6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d00e      	beq.n	8004d8e <I2C_Master_ADDR+0x18a>
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d00b      	beq.n	8004d8e <I2C_Master_ADDR+0x18a>
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d008      	beq.n	8004d8e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e007      	b.n	8004d9e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	e0a1      	b.n	8004efa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e085      	b.n	8004efa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d14d      	bne.n	8004e94 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d016      	beq.n	8004e2c <I2C_Master_ADDR+0x228>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d013      	beq.n	8004e2c <I2C_Master_ADDR+0x228>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d010      	beq.n	8004e2c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e18:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e007      	b.n	8004e3c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e3a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4a:	d117      	bne.n	8004e7c <I2C_Master_ADDR+0x278>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e52:	d00b      	beq.n	8004e6c <I2C_Master_ADDR+0x268>
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d008      	beq.n	8004e6c <I2C_Master_ADDR+0x268>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d005      	beq.n	8004e6c <I2C_Master_ADDR+0x268>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d002      	beq.n	8004e6c <I2C_Master_ADDR+0x268>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d107      	bne.n	8004e7c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	e032      	b.n	8004efa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ea2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d117      	bne.n	8004ee4 <I2C_Master_ADDR+0x2e0>
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eba:	d00b      	beq.n	8004ed4 <I2C_Master_ADDR+0x2d0>
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d008      	beq.n	8004ed4 <I2C_Master_ADDR+0x2d0>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d005      	beq.n	8004ed4 <I2C_Master_ADDR+0x2d0>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d002      	beq.n	8004ed4 <I2C_Master_ADDR+0x2d0>
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d107      	bne.n	8004ee4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ee2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f00:	e00b      	b.n	8004f1a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
}
 8004f18:	e7ff      	b.n	8004f1a <I2C_Master_ADDR+0x316>
 8004f1a:	bf00      	nop
 8004f1c:	3744      	adds	r7, #68	; 0x44
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02b      	beq.n	8004f98 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d114      	bne.n	8004f98 <I2C_SlaveTransmit_TXE+0x72>
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b29      	cmp	r3, #41	; 0x29
 8004f72:	d111      	bne.n	8004f98 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2221      	movs	r2, #33	; 0x21
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2228      	movs	r2, #40	; 0x28
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff fa4d 	bl	8004432 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d011      	beq.n	8004fd6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02c      	beq.n	8005056 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d114      	bne.n	8005056 <I2C_SlaveReceive_RXNE+0x74>
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b2a      	cmp	r3, #42	; 0x2a
 8005030:	d111      	bne.n	8005056 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005040:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2222      	movs	r2, #34	; 0x22
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2228      	movs	r2, #40	; 0x28
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff f9f8 	bl	8004446 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d012      	beq.n	8005096 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050bc:	2b28      	cmp	r3, #40	; 0x28
 80050be:	d127      	bne.n	8005110 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	09db      	lsrs	r3, r3, #7
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d103      	bne.n	80050f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	81bb      	strh	r3, [r7, #12]
 80050f2:	e002      	b.n	80050fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005102:	89ba      	ldrh	r2, [r7, #12]
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff f9a6 	bl	800445a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800510e:	e008      	b.n	8005122 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0202 	mvn.w	r2, #2
 8005118:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	60bb      	str	r3, [r7, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005178:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005188:	d172      	bne.n	8005270 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b22      	cmp	r3, #34	; 0x22
 800518e:	d002      	beq.n	8005196 <I2C_Slave_STOPF+0x6a>
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b2a      	cmp	r3, #42	; 0x2a
 8005194:	d135      	bne.n	8005202 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fdf0 	bl	8002db4 <HAL_DMA_GetState>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d049      	beq.n	800526e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	4a69      	ldr	r2, [pc, #420]	; (8005384 <I2C_Slave_STOPF+0x258>)
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fd fc38 	bl	8002a5c <HAL_DMA_Abort_IT>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03d      	beq.n	800526e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051fc:	4610      	mov	r0, r2
 80051fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005200:	e035      	b.n	800526e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005234:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd fdba 	bl	8002db4 <HAL_DMA_GetState>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d014      	beq.n	8005270 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	4a4e      	ldr	r2, [pc, #312]	; (8005384 <I2C_Slave_STOPF+0x258>)
 800524c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd fc02 	bl	8002a5c <HAL_DMA_Abort_IT>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005268:	4610      	mov	r0, r2
 800526a:	4798      	blx	r3
 800526c:	e000      	b.n	8005270 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800526e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d03e      	beq.n	80052f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b04      	cmp	r3, #4
 8005286:	d112      	bne.n	80052ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d112      	bne.n	80052e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f043 0204 	orr.w	r2, r3, #4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8b3 	bl	800546c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005306:	e039      	b.n	800537c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b2a      	cmp	r3, #42	; 0x2a
 800530c:	d109      	bne.n	8005322 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2228      	movs	r2, #40	; 0x28
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff f892 	bl	8004446 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b28      	cmp	r3, #40	; 0x28
 800532c:	d111      	bne.n	8005352 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <I2C_Slave_STOPF+0x25c>)
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff f893 	bl	8004476 <HAL_I2C_ListenCpltCallback>
}
 8005350:	e014      	b.n	800537c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	2b22      	cmp	r3, #34	; 0x22
 8005358:	d002      	beq.n	8005360 <I2C_Slave_STOPF+0x234>
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b22      	cmp	r3, #34	; 0x22
 800535e:	d10d      	bne.n	800537c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff f865 	bl	8004446 <HAL_I2C_SlaveRxCpltCallback>
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08005be1 	.word	0x08005be1
 8005388:	ffff0000 	.word	0xffff0000

0800538c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d002      	beq.n	80053ae <I2C_Slave_AF+0x22>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d129      	bne.n	8005402 <I2C_Slave_AF+0x76>
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b28      	cmp	r3, #40	; 0x28
 80053b2:	d126      	bne.n	8005402 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a2c      	ldr	r2, [pc, #176]	; (8005468 <I2C_Slave_AF+0xdc>)
 80053b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff f83b 	bl	8004476 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005400:	e02e      	b.n	8005460 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b21      	cmp	r3, #33	; 0x21
 8005406:	d126      	bne.n	8005456 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <I2C_Slave_AF+0xdc>)
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2221      	movs	r2, #33	; 0x21
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005432:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800543c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fe ffef 	bl	8004432 <HAL_I2C_SlaveTxCpltCallback>
}
 8005454:	e004      	b.n	8005460 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800545e:	615a      	str	r2, [r3, #20]
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	ffff0000 	.word	0xffff0000

0800546c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b10      	cmp	r3, #16
 8005486:	d10a      	bne.n	800549e <I2C_ITError+0x32>
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b22      	cmp	r3, #34	; 0x22
 800548c:	d107      	bne.n	800549e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054a4:	2b28      	cmp	r3, #40	; 0x28
 80054a6:	d107      	bne.n	80054b8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2228      	movs	r2, #40	; 0x28
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054b6:	e015      	b.n	80054e4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c6:	d006      	beq.n	80054d6 <I2C_ITError+0x6a>
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b60      	cmp	r3, #96	; 0x60
 80054cc:	d003      	beq.n	80054d6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f2:	d162      	bne.n	80055ba <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005502:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d020      	beq.n	8005554 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	4a6a      	ldr	r2, [pc, #424]	; (80056c0 <I2C_ITError+0x254>)
 8005518:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	4618      	mov	r0, r3
 8005520:	f7fd fa9c 	bl	8002a5c <HAL_DMA_Abort_IT>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8089 	beq.w	800563e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800554e:	4610      	mov	r0, r2
 8005550:	4798      	blx	r3
 8005552:	e074      	b.n	800563e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	4a59      	ldr	r2, [pc, #356]	; (80056c0 <I2C_ITError+0x254>)
 800555a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd fa7b 	bl	8002a5c <HAL_DMA_Abort_IT>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d068      	beq.n	800563e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d10b      	bne.n	8005592 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
 80055b8:	e041      	b.n	800563e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b60      	cmp	r3, #96	; 0x60
 80055c4:	d125      	bne.n	8005612 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d10b      	bne.n	80055fa <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fe ff51 	bl	80044b2 <HAL_I2C_AbortCpltCallback>
 8005610:	e015      	b.n	800563e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d10b      	bne.n	8005638 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fe ff30 	bl	800449e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10e      	bne.n	800566c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800567a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b04      	cmp	r3, #4
 800568e:	d113      	bne.n	80056b8 <I2C_ITError+0x24c>
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b28      	cmp	r3, #40	; 0x28
 8005694:	d110      	bne.n	80056b8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a0a      	ldr	r2, [pc, #40]	; (80056c4 <I2C_ITError+0x258>)
 800569a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fe fedf 	bl	8004476 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056b8:	bf00      	nop
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	08005be1 	.word	0x08005be1
 80056c4:	ffff0000 	.word	0xffff0000

080056c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	817b      	strh	r3, [r7, #10]
 80056da:	460b      	mov	r3, r1
 80056dc:	813b      	strh	r3, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 faed 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e05f      	b.n	80057e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005724:	897b      	ldrh	r3, [r7, #10]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	492c      	ldr	r1, [pc, #176]	; (80057ec <I2C_RequestMemoryWrite+0x124>)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fb26 	bl	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e04c      	b.n	80057e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	6a39      	ldr	r1, [r7, #32]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fb90 	bl	8005e8a <I2C_WaitOnTXEFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	2b04      	cmp	r3, #4
 8005776:	d107      	bne.n	8005788 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005786:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e02b      	b.n	80057e4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005792:	893b      	ldrh	r3, [r7, #8]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	611a      	str	r2, [r3, #16]
 800579c:	e021      	b.n	80057e2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800579e:	893b      	ldrh	r3, [r7, #8]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ae:	6a39      	ldr	r1, [r7, #32]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fb6a 	bl	8005e8a <I2C_WaitOnTXEFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d107      	bne.n	80057d4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e005      	b.n	80057e4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057d8:	893b      	ldrh	r3, [r7, #8]
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	00010002 	.word	0x00010002

080057f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	461a      	mov	r2, r3
 80057fe:	4603      	mov	r3, r0
 8005800:	817b      	strh	r3, [r7, #10]
 8005802:	460b      	mov	r3, r1
 8005804:	813b      	strh	r3, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005818:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	2200      	movs	r2, #0
 8005832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fa51 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00c      	beq.n	800585c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e0a9      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800585c:	897b      	ldrh	r3, [r7, #10]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800586a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	6a3a      	ldr	r2, [r7, #32]
 8005870:	4951      	ldr	r1, [pc, #324]	; (80059b8 <I2C_RequestMemoryRead+0x1c8>)
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fa8a 	bl	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e096      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589a:	6a39      	ldr	r1, [r7, #32]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 faf4 	bl	8005e8a <I2C_WaitOnTXEFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d107      	bne.n	80058c0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e075      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d105      	bne.n	80058d6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]
 80058d4:	e021      	b.n	800591a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058d6:	893b      	ldrh	r3, [r7, #8]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	b29b      	uxth	r3, r3
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	6a39      	ldr	r1, [r7, #32]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 face 	bl	8005e8a <I2C_WaitOnTXEFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00d      	beq.n	8005910 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d107      	bne.n	800590c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e04f      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005910:	893b      	ldrh	r3, [r7, #8]
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591c:	6a39      	ldr	r1, [r7, #32]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fab3 	bl	8005e8a <I2C_WaitOnTXEFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b04      	cmp	r3, #4
 8005930:	d107      	bne.n	8005942 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e034      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	2200      	movs	r2, #0
 800595e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f9bb 	bl	8005cde <I2C_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e013      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	b2da      	uxtb	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	4906      	ldr	r1, [pc, #24]	; (80059b8 <I2C_RequestMemoryRead+0x1c8>)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f9f4 	bl	8005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	00010002 	.word	0x00010002

080059bc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059ee:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	2200      	movs	r2, #0
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005a16:	2b21      	cmp	r3, #33	; 0x21
 8005a18:	d007      	beq.n	8005a2a <I2C_DMAXferCplt+0x6e>
 8005a1a:	7cfb      	ldrb	r3, [r7, #19]
 8005a1c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005a20:	2b22      	cmp	r3, #34	; 0x22
 8005a22:	d131      	bne.n	8005a88 <I2C_DMAXferCplt+0xcc>
 8005a24:	7cbb      	ldrb	r3, [r7, #18]
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d12e      	bne.n	8005a88 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a38:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005a40:	7cfb      	ldrb	r3, [r7, #19]
 8005a42:	2b29      	cmp	r3, #41	; 0x29
 8005a44:	d10a      	bne.n	8005a5c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2221      	movs	r2, #33	; 0x21
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2228      	movs	r2, #40	; 0x28
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a54:	6978      	ldr	r0, [r7, #20]
 8005a56:	f7fe fcec 	bl	8004432 <HAL_I2C_SlaveTxCpltCallback>
 8005a5a:	e00c      	b.n	8005a76 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a60:	d109      	bne.n	8005a76 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2222      	movs	r2, #34	; 0x22
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2228      	movs	r2, #40	; 0x28
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a70:	6978      	ldr	r0, [r7, #20]
 8005a72:	f7fe fce8 	bl	8004446 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005a84:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005a86:	e06a      	b.n	8005b5e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d064      	beq.n	8005b5e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aac:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005abc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ac4:	d009      	beq.n	8005ada <I2C_DMAXferCplt+0x11e>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d006      	beq.n	8005ada <I2C_DMAXferCplt+0x11e>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ad2:	d002      	beq.n	8005ada <I2C_DMAXferCplt+0x11e>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d107      	bne.n	8005aea <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005af8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b08:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005b18:	6978      	ldr	r0, [r7, #20]
 8005b1a:	f7fe fcc0 	bl	800449e <HAL_I2C_ErrorCallback>
}
 8005b1e:	e01e      	b.n	8005b5e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d10a      	bne.n	8005b4a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005b42:	6978      	ldr	r0, [r7, #20]
 8005b44:	f007 ff62 	bl	800da0c <HAL_I2C_MemRxCpltCallback>
}
 8005b48:	e009      	b.n	8005b5e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2212      	movs	r2, #18
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b58:	6978      	ldr	r0, [r7, #20]
 8005b5a:	f7fe fc60 	bl	800441e <HAL_I2C_MasterRxCpltCallback>
}
 8005b5e:	bf00      	nop
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	2200      	movs	r2, #0
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	2200      	movs	r2, #0
 8005b92:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fd f91b 	bl	8002dd0 <HAL_DMA_GetError>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d01b      	beq.n	8005bd8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bae:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f043 0210 	orr.w	r2, r3, #16
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7fe fc63 	bl	800449e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	2200      	movs	r2, #0
 8005c04:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	2200      	movs	r2, #0
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	2200      	movs	r2, #0
 8005c3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	2200      	movs	r2, #0
 8005c4a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b60      	cmp	r3, #96	; 0x60
 8005c66:	d10e      	bne.n	8005c86 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7fe fc17 	bl	80044b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c84:	e027      	b.n	8005cd6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c8c:	2b28      	cmp	r3, #40	; 0x28
 8005c8e:	d117      	bne.n	8005cc0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2228      	movs	r2, #40	; 0x28
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cbe:	e007      	b.n	8005cd0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7fe fbe4 	bl	800449e <HAL_I2C_ErrorCallback>
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cee:	e025      	b.n	8005d3c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d021      	beq.n	8005d3c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf8:	f7fc fc9a 	bl	8002630 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d116      	bne.n	8005d3c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e023      	b.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d10d      	bne.n	8005d62 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	43da      	mvns	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	4013      	ands	r3, r2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	e00c      	b.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	43da      	mvns	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d0b6      	beq.n	8005cf0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d9a:	e051      	b.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005daa:	d123      	bne.n	8005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	f043 0204 	orr.w	r2, r3, #4
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e046      	b.n	8005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d021      	beq.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfc:	f7fc fc18 	bl	8002630 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d116      	bne.n	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e020      	b.n	8005e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10c      	bne.n	8005e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	43da      	mvns	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4013      	ands	r3, r2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e00b      	b.n	8005e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d18d      	bne.n	8005d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e96:	e02d      	b.n	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f8ce 	bl	800603a <I2C_IsAcknowledgeFailed>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e02d      	b.n	8005f04 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d021      	beq.n	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb0:	f7fc fbbe 	bl	8002630 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d302      	bcc.n	8005ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d116      	bne.n	8005ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e007      	b.n	8005f04 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	2b80      	cmp	r3, #128	; 0x80
 8005f00:	d1ca      	bne.n	8005e98 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f18:	e02d      	b.n	8005f76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f88d 	bl	800603a <I2C_IsAcknowledgeFailed>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e02d      	b.n	8005f86 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d021      	beq.n	8005f76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f32:	f7fc fb7d 	bl	8002630 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d302      	bcc.n	8005f48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d116      	bne.n	8005f76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e007      	b.n	8005f86 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d1ca      	bne.n	8005f1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f9a:	e042      	b.n	8006022 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d119      	bne.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f06f 0210 	mvn.w	r2, #16
 8005fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e029      	b.n	8006032 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fde:	f7fc fb27 	bl	8002630 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d302      	bcc.n	8005ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d116      	bne.n	8006022 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f043 0220 	orr.w	r2, r3, #32
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e007      	b.n	8006032 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d1b5      	bne.n	8005f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006050:	d11b      	bne.n	800608a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800605a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0204 	orr.w	r2, r3, #4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80060a8:	d103      	bne.n	80060b2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80060b0:	e007      	b.n	80060c2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80060ba:	d102      	bne.n	80060c2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2208      	movs	r2, #8
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d129      	bne.n	8006138 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2224      	movs	r2, #36	; 0x24
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0210 	bic.w	r2, r2, #16
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	e000      	b.n	800613a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006138:	2302      	movs	r3, #2
  }
}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b20      	cmp	r3, #32
 800615e:	d12a      	bne.n	80061b6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	; 0x24
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006180:	89fb      	ldrh	r3, [r7, #14]
 8006182:	f023 030f 	bic.w	r3, r3, #15
 8006186:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	b29a      	uxth	r2, r3
 800618c:	89fb      	ldrh	r3, [r7, #14]
 800618e:	4313      	orrs	r3, r2
 8006190:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	89fa      	ldrh	r2, [r7, #14]
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c6:	b08f      	sub	sp, #60	; 0x3c
 80061c8:	af0a      	add	r7, sp, #40	; 0x28
 80061ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e10f      	b.n	80063f6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fc f963 	bl	80024bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2203      	movs	r2, #3
 80061fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f002 fca2 	bl	8008b5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	687e      	ldr	r6, [r7, #4]
 8006222:	466d      	mov	r5, sp
 8006224:	f106 0410 	add.w	r4, r6, #16
 8006228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800622a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800622c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800622e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006230:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006234:	e885 0003 	stmia.w	r5, {r0, r1}
 8006238:	1d33      	adds	r3, r6, #4
 800623a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800623c:	6838      	ldr	r0, [r7, #0]
 800623e:	f002 fc2d 	bl	8008a9c <USB_CoreInit>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0d0      	b.n	80063f6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f002 fc90 	bl	8008b80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e04a      	b.n	80062fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006266:	7bfa      	ldrb	r2, [r7, #15]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	333d      	adds	r3, #61	; 0x3d
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	333c      	adds	r3, #60	; 0x3c
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800628e:	7bfa      	ldrb	r2, [r7, #15]
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	b298      	uxth	r0, r3
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	3342      	adds	r3, #66	; 0x42
 80062a2:	4602      	mov	r2, r0
 80062a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062a6:	7bfa      	ldrb	r2, [r7, #15]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	333f      	adds	r3, #63	; 0x3f
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	3344      	adds	r3, #68	; 0x44
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062ce:	7bfa      	ldrb	r2, [r7, #15]
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	3348      	adds	r3, #72	; 0x48
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062e2:	7bfa      	ldrb	r2, [r7, #15]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	3350      	adds	r3, #80	; 0x50
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	3301      	adds	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d3af      	bcc.n	8006266 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]
 800630a:	e044      	b.n	8006396 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800630c:	7bfa      	ldrb	r2, [r7, #15]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006322:	7bfa      	ldrb	r2, [r7, #15]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006334:	7bfa      	ldrb	r2, [r7, #15]
 8006336:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006338:	7bfa      	ldrb	r2, [r7, #15]
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006364:	7bfa      	ldrb	r2, [r7, #15]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800637a:	7bfa      	ldrb	r2, [r7, #15]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	3301      	adds	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d3b5      	bcc.n	800630c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	687e      	ldr	r6, [r7, #4]
 80063a8:	466d      	mov	r5, sp
 80063aa:	f106 0410 	add.w	r4, r6, #16
 80063ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80063be:	1d33      	adds	r3, r6, #4
 80063c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063c2:	6838      	ldr	r0, [r7, #0]
 80063c4:	f002 fc06 	bl	8008bd4 <USB_DevInit>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e00d      	b.n	80063f6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f002 fdb5 	bl	8008f5e <USB_DevDisconnect>

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e25b      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d075      	beq.n	800650a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800641e:	4ba3      	ldr	r3, [pc, #652]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 030c 	and.w	r3, r3, #12
 8006426:	2b04      	cmp	r3, #4
 8006428:	d00c      	beq.n	8006444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800642a:	4ba0      	ldr	r3, [pc, #640]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006432:	2b08      	cmp	r3, #8
 8006434:	d112      	bne.n	800645c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006436:	4b9d      	ldr	r3, [pc, #628]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006442:	d10b      	bne.n	800645c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006444:	4b99      	ldr	r3, [pc, #612]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05b      	beq.n	8006508 <HAL_RCC_OscConfig+0x108>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d157      	bne.n	8006508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e236      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x74>
 8006466:	4b91      	ldr	r3, [pc, #580]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a90      	ldr	r2, [pc, #576]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e01d      	b.n	80064b0 <HAL_RCC_OscConfig+0xb0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800647c:	d10c      	bne.n	8006498 <HAL_RCC_OscConfig+0x98>
 800647e:	4b8b      	ldr	r3, [pc, #556]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a8a      	ldr	r2, [pc, #552]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b88      	ldr	r3, [pc, #544]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a87      	ldr	r2, [pc, #540]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e00b      	b.n	80064b0 <HAL_RCC_OscConfig+0xb0>
 8006498:	4b84      	ldr	r3, [pc, #528]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a83      	ldr	r2, [pc, #524]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800649e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4b81      	ldr	r3, [pc, #516]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a80      	ldr	r2, [pc, #512]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fc f8ba 	bl	8002630 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fc f8b6 	bl	8002630 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e1fb      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	4b76      	ldr	r3, [pc, #472]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0xc0>
 80064de:	e014      	b.n	800650a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e0:	f7fc f8a6 	bl	8002630 <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064e8:	f7fc f8a2 	bl	8002630 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	; 0x64
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e1e7      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fa:	4b6c      	ldr	r3, [pc, #432]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0xe8>
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d063      	beq.n	80065de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006516:	4b65      	ldr	r3, [pc, #404]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006522:	4b62      	ldr	r3, [pc, #392]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800652a:	2b08      	cmp	r3, #8
 800652c:	d11c      	bne.n	8006568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800652e:	4b5f      	ldr	r3, [pc, #380]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d116      	bne.n	8006568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653a:	4b5c      	ldr	r3, [pc, #368]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_RCC_OscConfig+0x152>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d001      	beq.n	8006552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e1bb      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b56      	ldr	r3, [pc, #344]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4952      	ldr	r1, [pc, #328]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006566:	e03a      	b.n	80065de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d020      	beq.n	80065b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006570:	4b4f      	ldr	r3, [pc, #316]	; (80066b0 <HAL_RCC_OscConfig+0x2b0>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fc f85b 	bl	8002630 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800657e:	f7fc f857 	bl	8002630 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e19c      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006590:	4b46      	ldr	r3, [pc, #280]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f0      	beq.n	800657e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659c:	4b43      	ldr	r3, [pc, #268]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4940      	ldr	r1, [pc, #256]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]
 80065b0:	e015      	b.n	80065de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065b2:	4b3f      	ldr	r3, [pc, #252]	; (80066b0 <HAL_RCC_OscConfig+0x2b0>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fc f83a 	bl	8002630 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065c0:	f7fc f836 	bl	8002630 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e17b      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065d2:	4b36      	ldr	r3, [pc, #216]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d030      	beq.n	800664c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f2:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <HAL_RCC_OscConfig+0x2b4>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fc f81a 	bl	8002630 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006600:	f7fc f816 	bl	8002630 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e15b      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x200>
 800661e:	e015      	b.n	800664c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006620:	4b24      	ldr	r3, [pc, #144]	; (80066b4 <HAL_RCC_OscConfig+0x2b4>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006626:	f7fc f803 	bl	8002630 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800662e:	f7fb ffff 	bl	8002630 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e144      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006640:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80a0 	beq.w	800679a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800665a:	2300      	movs	r3, #0
 800665c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800665e:	4b13      	ldr	r3, [pc, #76]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	4a0e      	ldr	r2, [pc, #56]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006678:	6413      	str	r3, [r2, #64]	; 0x40
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668a:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <HAL_RCC_OscConfig+0x2b8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d121      	bne.n	80066da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <HAL_RCC_OscConfig+0x2b8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <HAL_RCC_OscConfig+0x2b8>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a2:	f7fb ffc5 	bl	8002630 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a8:	e011      	b.n	80066ce <HAL_RCC_OscConfig+0x2ce>
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	42470000 	.word	0x42470000
 80066b4:	42470e80 	.word	0x42470e80
 80066b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066bc:	f7fb ffb8 	bl	8002630 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0fd      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ce:	4b81      	ldr	r3, [pc, #516]	; (80068d4 <HAL_RCC_OscConfig+0x4d4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d106      	bne.n	80066f0 <HAL_RCC_OscConfig+0x2f0>
 80066e2:	4b7d      	ldr	r3, [pc, #500]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4a7c      	ldr	r2, [pc, #496]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	6713      	str	r3, [r2, #112]	; 0x70
 80066ee:	e01c      	b.n	800672a <HAL_RCC_OscConfig+0x32a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	d10c      	bne.n	8006712 <HAL_RCC_OscConfig+0x312>
 80066f8:	4b77      	ldr	r3, [pc, #476]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	4a76      	ldr	r2, [pc, #472]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 80066fe:	f043 0304 	orr.w	r3, r3, #4
 8006702:	6713      	str	r3, [r2, #112]	; 0x70
 8006704:	4b74      	ldr	r3, [pc, #464]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006708:	4a73      	ldr	r2, [pc, #460]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	6713      	str	r3, [r2, #112]	; 0x70
 8006710:	e00b      	b.n	800672a <HAL_RCC_OscConfig+0x32a>
 8006712:	4b71      	ldr	r3, [pc, #452]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	4a70      	ldr	r2, [pc, #448]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	6713      	str	r3, [r2, #112]	; 0x70
 800671e:	4b6e      	ldr	r3, [pc, #440]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a6d      	ldr	r2, [pc, #436]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d015      	beq.n	800675e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006732:	f7fb ff7d 	bl	8002630 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fb ff79 	bl	8002630 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e0bc      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006750:	4b61      	ldr	r3, [pc, #388]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ee      	beq.n	800673a <HAL_RCC_OscConfig+0x33a>
 800675c:	e014      	b.n	8006788 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675e:	f7fb ff67 	bl	8002630 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006764:	e00a      	b.n	800677c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006766:	f7fb ff63 	bl	8002630 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f241 3288 	movw	r2, #5000	; 0x1388
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e0a6      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677c:	4b56      	ldr	r3, [pc, #344]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 800677e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1ee      	bne.n	8006766 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678e:	4b52      	ldr	r3, [pc, #328]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	4a51      	ldr	r2, [pc, #324]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8092 	beq.w	80068c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067a4:	4b4c      	ldr	r3, [pc, #304]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 030c 	and.w	r3, r3, #12
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d05c      	beq.n	800686a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d141      	bne.n	800683c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b8:	4b48      	ldr	r3, [pc, #288]	; (80068dc <HAL_RCC_OscConfig+0x4dc>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067be:	f7fb ff37 	bl	8002630 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c6:	f7fb ff33 	bl	8002630 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e078      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d8:	4b3f      	ldr	r3, [pc, #252]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f0      	bne.n	80067c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	019b      	lsls	r3, r3, #6
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	3b01      	subs	r3, #1
 80067fe:	041b      	lsls	r3, r3, #16
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	061b      	lsls	r3, r3, #24
 8006808:	4933      	ldr	r1, [pc, #204]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 800680a:	4313      	orrs	r3, r2
 800680c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800680e:	4b33      	ldr	r3, [pc, #204]	; (80068dc <HAL_RCC_OscConfig+0x4dc>)
 8006810:	2201      	movs	r2, #1
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006814:	f7fb ff0c 	bl	8002630 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681c:	f7fb ff08 	bl	8002630 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e04d      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682e:	4b2a      	ldr	r3, [pc, #168]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0x41c>
 800683a:	e045      	b.n	80068c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683c:	4b27      	ldr	r3, [pc, #156]	; (80068dc <HAL_RCC_OscConfig+0x4dc>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006842:	f7fb fef5 	bl	8002630 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684a:	f7fb fef1 	bl	8002630 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e036      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685c:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCC_OscConfig+0x44a>
 8006868:	e02e      	b.n	80068c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e029      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006876:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <HAL_RCC_OscConfig+0x4d8>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	429a      	cmp	r2, r3
 8006888:	d11c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d115      	bne.n	80068c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800689e:	4013      	ands	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d10d      	bne.n	80068c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d106      	bne.n	80068c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d001      	beq.n	80068c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40007000 	.word	0x40007000
 80068d8:	40023800 	.word	0x40023800
 80068dc:	42470060 	.word	0x42470060

080068e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0cc      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068f4:	4b68      	ldr	r3, [pc, #416]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d90c      	bls.n	800691c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006902:	4b65      	ldr	r3, [pc, #404]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800690a:	4b63      	ldr	r3, [pc, #396]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d001      	beq.n	800691c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0b8      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d020      	beq.n	800696a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006934:	4b59      	ldr	r3, [pc, #356]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a58      	ldr	r2, [pc, #352]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800693e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800694c:	4b53      	ldr	r3, [pc, #332]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4a52      	ldr	r2, [pc, #328]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006958:	4b50      	ldr	r3, [pc, #320]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	494d      	ldr	r1, [pc, #308]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d044      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d107      	bne.n	800698e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697e:	4b47      	ldr	r3, [pc, #284]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d119      	bne.n	80069be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e07f      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d003      	beq.n	800699e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800699a:	2b03      	cmp	r3, #3
 800699c:	d107      	bne.n	80069ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800699e:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e06f      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ae:	4b3b      	ldr	r3, [pc, #236]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e067      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069be:	4b37      	ldr	r3, [pc, #220]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f023 0203 	bic.w	r2, r3, #3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	4934      	ldr	r1, [pc, #208]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069d0:	f7fb fe2e 	bl	8002630 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d6:	e00a      	b.n	80069ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069d8:	f7fb fe2a 	bl	8002630 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e04f      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ee:	4b2b      	ldr	r3, [pc, #172]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 020c 	and.w	r2, r3, #12
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1eb      	bne.n	80069d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a00:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d20c      	bcs.n	8006a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0e:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a16:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <HAL_RCC_ClockConfig+0x1b8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e032      	b.n	8006a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a34:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4916      	ldr	r1, [pc, #88]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a52:	4b12      	ldr	r3, [pc, #72]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	490e      	ldr	r1, [pc, #56]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a66:	f000 f821 	bl	8006aac <HAL_RCC_GetSysClockFreq>
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	091b      	lsrs	r3, r3, #4
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a78:	5cd3      	ldrb	r3, [r2, r3]
 8006a7a:	fa21 f303 	lsr.w	r3, r1, r3
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fa fe7c 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40023c00 	.word	0x40023c00
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	080164ec 	.word	0x080164ec
 8006aa4:	20000000 	.word	0x20000000
 8006aa8:	20000004 	.word	0x20000004

08006aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	607b      	str	r3, [r7, #4]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	2300      	movs	r3, #0
 8006abc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac2:	4b63      	ldr	r3, [pc, #396]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d007      	beq.n	8006ade <HAL_RCC_GetSysClockFreq+0x32>
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d008      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x38>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 80b4 	bne.w	8006c40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ad8:	4b5e      	ldr	r3, [pc, #376]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ada:	60bb      	str	r3, [r7, #8]
       break;
 8006adc:	e0b3      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ade:	4b5e      	ldr	r3, [pc, #376]	; (8006c58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006ae0:	60bb      	str	r3, [r7, #8]
      break;
 8006ae2:	e0b0      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ae4:	4b5a      	ldr	r3, [pc, #360]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aee:	4b58      	ldr	r3, [pc, #352]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d04a      	beq.n	8006b90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006afa:	4b55      	ldr	r3, [pc, #340]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	099b      	lsrs	r3, r3, #6
 8006b00:	f04f 0400 	mov.w	r4, #0
 8006b04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	ea03 0501 	and.w	r5, r3, r1
 8006b10:	ea04 0602 	and.w	r6, r4, r2
 8006b14:	4629      	mov	r1, r5
 8006b16:	4632      	mov	r2, r6
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	f04f 0400 	mov.w	r4, #0
 8006b20:	0154      	lsls	r4, r2, #5
 8006b22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b26:	014b      	lsls	r3, r1, #5
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	1b49      	subs	r1, r1, r5
 8006b2e:	eb62 0206 	sbc.w	r2, r2, r6
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	f04f 0400 	mov.w	r4, #0
 8006b3a:	0194      	lsls	r4, r2, #6
 8006b3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b40:	018b      	lsls	r3, r1, #6
 8006b42:	1a5b      	subs	r3, r3, r1
 8006b44:	eb64 0402 	sbc.w	r4, r4, r2
 8006b48:	f04f 0100 	mov.w	r1, #0
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	00e2      	lsls	r2, r4, #3
 8006b52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b56:	00d9      	lsls	r1, r3, #3
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4614      	mov	r4, r2
 8006b5c:	195b      	adds	r3, r3, r5
 8006b5e:	eb44 0406 	adc.w	r4, r4, r6
 8006b62:	f04f 0100 	mov.w	r1, #0
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	0262      	lsls	r2, r4, #9
 8006b6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006b70:	0259      	lsls	r1, r3, #9
 8006b72:	460b      	mov	r3, r1
 8006b74:	4614      	mov	r4, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	4621      	mov	r1, r4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f04f 0400 	mov.w	r4, #0
 8006b80:	461a      	mov	r2, r3
 8006b82:	4623      	mov	r3, r4
 8006b84:	f7fa f8e0 	bl	8000d48 <__aeabi_uldivmod>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	e049      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b90:	4b2f      	ldr	r3, [pc, #188]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	099b      	lsrs	r3, r3, #6
 8006b96:	f04f 0400 	mov.w	r4, #0
 8006b9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	ea03 0501 	and.w	r5, r3, r1
 8006ba6:	ea04 0602 	and.w	r6, r4, r2
 8006baa:	4629      	mov	r1, r5
 8006bac:	4632      	mov	r2, r6
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	f04f 0400 	mov.w	r4, #0
 8006bb6:	0154      	lsls	r4, r2, #5
 8006bb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bbc:	014b      	lsls	r3, r1, #5
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	1b49      	subs	r1, r1, r5
 8006bc4:	eb62 0206 	sbc.w	r2, r2, r6
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	f04f 0400 	mov.w	r4, #0
 8006bd0:	0194      	lsls	r4, r2, #6
 8006bd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bd6:	018b      	lsls	r3, r1, #6
 8006bd8:	1a5b      	subs	r3, r3, r1
 8006bda:	eb64 0402 	sbc.w	r4, r4, r2
 8006bde:	f04f 0100 	mov.w	r1, #0
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	00e2      	lsls	r2, r4, #3
 8006be8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bec:	00d9      	lsls	r1, r3, #3
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	195b      	adds	r3, r3, r5
 8006bf4:	eb44 0406 	adc.w	r4, r4, r6
 8006bf8:	f04f 0100 	mov.w	r1, #0
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	02a2      	lsls	r2, r4, #10
 8006c02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c06:	0299      	lsls	r1, r3, #10
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4614      	mov	r4, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	4621      	mov	r1, r4
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f04f 0400 	mov.w	r4, #0
 8006c16:	461a      	mov	r2, r3
 8006c18:	4623      	mov	r3, r4
 8006c1a:	f7fa f895 	bl	8000d48 <__aeabi_uldivmod>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	460c      	mov	r4, r1
 8006c22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	0c1b      	lsrs	r3, r3, #16
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	3301      	adds	r3, #1
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3c:	60bb      	str	r3, [r7, #8]
      break;
 8006c3e:	e002      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006c42:	60bb      	str	r3, [r7, #8]
      break;
 8006c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c46:	68bb      	ldr	r3, [r7, #8]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c50:	40023800 	.word	0x40023800
 8006c54:	00f42400 	.word	0x00f42400
 8006c58:	007a1200 	.word	0x007a1200

08006c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000000 	.word	0x20000000

08006c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c78:	f7ff fff0 	bl	8006c5c <HAL_RCC_GetHCLKFreq>
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	0a9b      	lsrs	r3, r3, #10
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	4a03      	ldr	r2, [pc, #12]	; (8006c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c8a:	5cd3      	ldrb	r3, [r2, r3]
 8006c8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40023800 	.word	0x40023800
 8006c98:	080164fc 	.word	0x080164fc

08006c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ca0:	f7ff ffdc 	bl	8006c5c <HAL_RCC_GetHCLKFreq>
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	0b5b      	lsrs	r3, r3, #13
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	4a03      	ldr	r2, [pc, #12]	; (8006cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cb2:	5cd3      	ldrb	r3, [r2, r3]
 8006cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	080164fc 	.word	0x080164fc

08006cc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	220f      	movs	r2, #15
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cd4:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <HAL_RCC_GetClockConfig+0x5c>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0203 	and.w	r2, r3, #3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ce0:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <HAL_RCC_GetClockConfig+0x5c>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <HAL_RCC_GetClockConfig+0x5c>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006cf8:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <HAL_RCC_GetClockConfig+0x5c>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	08db      	lsrs	r3, r3, #3
 8006cfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d06:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <HAL_RCC_GetClockConfig+0x60>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 020f 	and.w	r2, r3, #15
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40023800 	.word	0x40023800
 8006d24:	40023c00 	.word	0x40023c00

08006d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e01d      	b.n	8006d76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fb f822 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4619      	mov	r1, r3
 8006d66:	4610      	mov	r0, r2
 8006d68:	f000 fb10 	bl	800738c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d007      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e01d      	b.n	8006e14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f815 	bl	8006e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f000 fac1 	bl	800738c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d122      	bne.n	8006e8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d11b      	bne.n	8006e8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0202 	mvn.w	r2, #2
 8006e5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa6b 	bl	800734e <HAL_TIM_IC_CaptureCallback>
 8006e78:	e005      	b.n	8006e86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa5d 	bl	800733a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fa6e 	bl	8007362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d122      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d11b      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0204 	mvn.w	r2, #4
 8006eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa41 	bl	800734e <HAL_TIM_IC_CaptureCallback>
 8006ecc:	e005      	b.n	8006eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa33 	bl	800733a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fa44 	bl	8007362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d122      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d11b      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0208 	mvn.w	r2, #8
 8006f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2204      	movs	r2, #4
 8006f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa17 	bl	800734e <HAL_TIM_IC_CaptureCallback>
 8006f20:	e005      	b.n	8006f2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa09 	bl	800733a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa1a 	bl	8007362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d122      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d11b      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0210 	mvn.w	r2, #16
 8006f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2208      	movs	r2, #8
 8006f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f9ed 	bl	800734e <HAL_TIM_IC_CaptureCallback>
 8006f74:	e005      	b.n	8006f82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f9df 	bl	800733a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f9f0 	bl	8007362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d10e      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d107      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0201 	mvn.w	r2, #1
 8006fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fa fba2 	bl	80016f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbe:	2b80      	cmp	r3, #128	; 0x80
 8006fc0:	d10e      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fcc:	2b80      	cmp	r3, #128	; 0x80
 8006fce:	d107      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fd46 	bl	8007a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fea:	2b40      	cmp	r3, #64	; 0x40
 8006fec:	d10e      	bne.n	800700c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	2b40      	cmp	r3, #64	; 0x40
 8006ffa:	d107      	bne.n	800700c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f9b5 	bl	8007376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b20      	cmp	r3, #32
 8007018:	d10e      	bne.n	8007038 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b20      	cmp	r3, #32
 8007026:	d107      	bne.n	8007038 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0220 	mvn.w	r2, #32
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fd10 	bl	8007a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007038:	bf00      	nop
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007056:	2302      	movs	r3, #2
 8007058:	e0b4      	b.n	80071c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b0c      	cmp	r3, #12
 800706e:	f200 809f 	bhi.w	80071b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	080070ad 	.word	0x080070ad
 800707c:	080071b1 	.word	0x080071b1
 8007080:	080071b1 	.word	0x080071b1
 8007084:	080071b1 	.word	0x080071b1
 8007088:	080070ed 	.word	0x080070ed
 800708c:	080071b1 	.word	0x080071b1
 8007090:	080071b1 	.word	0x080071b1
 8007094:	080071b1 	.word	0x080071b1
 8007098:	0800712f 	.word	0x0800712f
 800709c:	080071b1 	.word	0x080071b1
 80070a0:	080071b1 	.word	0x080071b1
 80070a4:	080071b1 	.word	0x080071b1
 80070a8:	0800716f 	.word	0x0800716f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fa0a 	bl	80074cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0208 	orr.w	r2, r2, #8
 80070c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0204 	bic.w	r2, r2, #4
 80070d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6999      	ldr	r1, [r3, #24]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	619a      	str	r2, [r3, #24]
      break;
 80070ea:	e062      	b.n	80071b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fa5a 	bl	80075ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699a      	ldr	r2, [r3, #24]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6999      	ldr	r1, [r3, #24]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	021a      	lsls	r2, r3, #8
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	619a      	str	r2, [r3, #24]
      break;
 800712c:	e041      	b.n	80071b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 faaf 	bl	8007698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0208 	orr.w	r2, r2, #8
 8007148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0204 	bic.w	r2, r2, #4
 8007158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69d9      	ldr	r1, [r3, #28]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	61da      	str	r2, [r3, #28]
      break;
 800716c:	e021      	b.n	80071b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fb03 	bl	8007780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69d9      	ldr	r1, [r3, #28]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	021a      	lsls	r2, r3, #8
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	61da      	str	r2, [r3, #28]
      break;
 80071ae:	e000      	b.n	80071b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80071b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_TIM_ConfigClockSource+0x18>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e0a6      	b.n	8007332 <HAL_TIM_ConfigClockSource+0x166>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800720a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d067      	beq.n	80072ec <HAL_TIM_ConfigClockSource+0x120>
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d80b      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x6c>
 8007220:	2b10      	cmp	r3, #16
 8007222:	d073      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x140>
 8007224:	2b10      	cmp	r3, #16
 8007226:	d802      	bhi.n	800722e <HAL_TIM_ConfigClockSource+0x62>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d06f      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800722c:	e078      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800722e:	2b20      	cmp	r3, #32
 8007230:	d06c      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x140>
 8007232:	2b30      	cmp	r3, #48	; 0x30
 8007234:	d06a      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007236:	e073      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007238:	2b70      	cmp	r3, #112	; 0x70
 800723a:	d00d      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0x8c>
 800723c:	2b70      	cmp	r3, #112	; 0x70
 800723e:	d804      	bhi.n	800724a <HAL_TIM_ConfigClockSource+0x7e>
 8007240:	2b50      	cmp	r3, #80	; 0x50
 8007242:	d033      	beq.n	80072ac <HAL_TIM_ConfigClockSource+0xe0>
 8007244:	2b60      	cmp	r3, #96	; 0x60
 8007246:	d041      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007248:	e06a      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800724a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724e:	d066      	beq.n	800731e <HAL_TIM_ConfigClockSource+0x152>
 8007250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007254:	d017      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007256:	e063      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	6899      	ldr	r1, [r3, #8]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f000 fb5a 	bl	8007920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800727a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
      break;
 8007284:	e04c      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6899      	ldr	r1, [r3, #8]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f000 fb43 	bl	8007920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a8:	609a      	str	r2, [r3, #8]
      break;
 80072aa:	e039      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	6859      	ldr	r1, [r3, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	461a      	mov	r2, r3
 80072ba:	f000 fab7 	bl	800782c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2150      	movs	r1, #80	; 0x50
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fb10 	bl	80078ea <TIM_ITRx_SetConfig>
      break;
 80072ca:	e029      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	6859      	ldr	r1, [r3, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	461a      	mov	r2, r3
 80072da:	f000 fad6 	bl	800788a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2160      	movs	r1, #96	; 0x60
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fb00 	bl	80078ea <TIM_ITRx_SetConfig>
      break;
 80072ea:	e019      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6859      	ldr	r1, [r3, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	461a      	mov	r2, r3
 80072fa:	f000 fa97 	bl	800782c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2140      	movs	r1, #64	; 0x40
 8007304:	4618      	mov	r0, r3
 8007306:	f000 faf0 	bl	80078ea <TIM_ITRx_SetConfig>
      break;
 800730a:	e009      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f000 fae7 	bl	80078ea <TIM_ITRx_SetConfig>
      break;
 800731c:	e000      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800731e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007342:	bf00      	nop
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a40      	ldr	r2, [pc, #256]	; (80074a0 <TIM_Base_SetConfig+0x114>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d013      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d00f      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a3d      	ldr	r2, [pc, #244]	; (80074a4 <TIM_Base_SetConfig+0x118>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00b      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a3c      	ldr	r2, [pc, #240]	; (80074a8 <TIM_Base_SetConfig+0x11c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d007      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a3b      	ldr	r2, [pc, #236]	; (80074ac <TIM_Base_SetConfig+0x120>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a3a      	ldr	r2, [pc, #232]	; (80074b0 <TIM_Base_SetConfig+0x124>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d108      	bne.n	80073de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2f      	ldr	r2, [pc, #188]	; (80074a0 <TIM_Base_SetConfig+0x114>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d02b      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ec:	d027      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2c      	ldr	r2, [pc, #176]	; (80074a4 <TIM_Base_SetConfig+0x118>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d023      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <TIM_Base_SetConfig+0x11c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01f      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a2a      	ldr	r2, [pc, #168]	; (80074ac <TIM_Base_SetConfig+0x120>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01b      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a29      	ldr	r2, [pc, #164]	; (80074b0 <TIM_Base_SetConfig+0x124>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d017      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a28      	ldr	r2, [pc, #160]	; (80074b4 <TIM_Base_SetConfig+0x128>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a27      	ldr	r2, [pc, #156]	; (80074b8 <TIM_Base_SetConfig+0x12c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a26      	ldr	r2, [pc, #152]	; (80074bc <TIM_Base_SetConfig+0x130>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a25      	ldr	r2, [pc, #148]	; (80074c0 <TIM_Base_SetConfig+0x134>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a24      	ldr	r2, [pc, #144]	; (80074c4 <TIM_Base_SetConfig+0x138>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a23      	ldr	r2, [pc, #140]	; (80074c8 <TIM_Base_SetConfig+0x13c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d108      	bne.n	8007450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <TIM_Base_SetConfig+0x114>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_Base_SetConfig+0xf8>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <TIM_Base_SetConfig+0x124>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d103      	bne.n	800748c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	615a      	str	r2, [r3, #20]
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40000400 	.word	0x40000400
 80074a8:	40000800 	.word	0x40000800
 80074ac:	40000c00 	.word	0x40000c00
 80074b0:	40010400 	.word	0x40010400
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40014400 	.word	0x40014400
 80074bc:	40014800 	.word	0x40014800
 80074c0:	40001800 	.word	0x40001800
 80074c4:	40001c00 	.word	0x40001c00
 80074c8:	40002000 	.word	0x40002000

080074cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f023 0201 	bic.w	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f023 0302 	bic.w	r3, r3, #2
 8007514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <TIM_OC1_SetConfig+0xd8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_OC1_SetConfig+0x64>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1f      	ldr	r2, [pc, #124]	; (80075a8 <TIM_OC1_SetConfig+0xdc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10c      	bne.n	800754a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0308 	bic.w	r3, r3, #8
 8007536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f023 0304 	bic.w	r3, r3, #4
 8007548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <TIM_OC1_SetConfig+0xd8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_OC1_SetConfig+0x8e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <TIM_OC1_SetConfig+0xdc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d111      	bne.n	800757e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	621a      	str	r2, [r3, #32]
}
 8007598:	bf00      	nop
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40010400 	.word	0x40010400

080075ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f023 0210 	bic.w	r2, r3, #16
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f023 0320 	bic.w	r3, r3, #32
 80075f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	011b      	lsls	r3, r3, #4
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4313      	orrs	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a22      	ldr	r2, [pc, #136]	; (8007690 <TIM_OC2_SetConfig+0xe4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d003      	beq.n	8007614 <TIM_OC2_SetConfig+0x68>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a21      	ldr	r2, [pc, #132]	; (8007694 <TIM_OC2_SetConfig+0xe8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d10d      	bne.n	8007630 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800761a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a17      	ldr	r2, [pc, #92]	; (8007690 <TIM_OC2_SetConfig+0xe4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC2_SetConfig+0x94>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a16      	ldr	r2, [pc, #88]	; (8007694 <TIM_OC2_SetConfig+0xe8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d113      	bne.n	8007668 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800764e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	621a      	str	r2, [r3, #32]
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40010000 	.word	0x40010000
 8007694:	40010400 	.word	0x40010400

08007698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	021b      	lsls	r3, r3, #8
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a21      	ldr	r2, [pc, #132]	; (8007778 <TIM_OC3_SetConfig+0xe0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d003      	beq.n	80076fe <TIM_OC3_SetConfig+0x66>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a20      	ldr	r2, [pc, #128]	; (800777c <TIM_OC3_SetConfig+0xe4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d10d      	bne.n	800771a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a16      	ldr	r2, [pc, #88]	; (8007778 <TIM_OC3_SetConfig+0xe0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_OC3_SetConfig+0x92>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a15      	ldr	r2, [pc, #84]	; (800777c <TIM_OC3_SetConfig+0xe4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d113      	bne.n	8007752 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	621a      	str	r2, [r3, #32]
}
 800776c:	bf00      	nop
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	40010000 	.word	0x40010000
 800777c:	40010400 	.word	0x40010400

08007780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	031b      	lsls	r3, r3, #12
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a12      	ldr	r2, [pc, #72]	; (8007824 <TIM_OC4_SetConfig+0xa4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_OC4_SetConfig+0x68>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a11      	ldr	r2, [pc, #68]	; (8007828 <TIM_OC4_SetConfig+0xa8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d109      	bne.n	80077fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	019b      	lsls	r3, r3, #6
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40010000 	.word	0x40010000
 8007828:	40010400 	.word	0x40010400

0800782c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f023 0201 	bic.w	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f023 030a 	bic.w	r3, r3, #10
 8007868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	621a      	str	r2, [r3, #32]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800788a:	b480      	push	{r7}
 800788c:	b087      	sub	sp, #28
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f023 0210 	bic.w	r2, r3, #16
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	031b      	lsls	r3, r3, #12
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	621a      	str	r2, [r3, #32]
}
 80078de:	bf00      	nop
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4313      	orrs	r3, r2
 8007908:	f043 0307 	orr.w	r3, r3, #7
 800790c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	609a      	str	r2, [r3, #8]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800793a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	021a      	lsls	r2, r3, #8
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	431a      	orrs	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4313      	orrs	r3, r2
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	609a      	str	r2, [r3, #8]
}
 8007954:	bf00      	nop
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007974:	2302      	movs	r3, #2
 8007976:	e05a      	b.n	8007a2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a21      	ldr	r2, [pc, #132]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d022      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c4:	d01d      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1d      	ldr	r2, [pc, #116]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d018      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d013      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1a      	ldr	r2, [pc, #104]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00e      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a18      	ldr	r2, [pc, #96]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d009      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d004      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a15      	ldr	r2, [pc, #84]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d10c      	bne.n	8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40010400 	.word	0x40010400
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40001800 	.word	0x40001800

08007a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e03f      	b.n	8007b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fa fb36 	bl	8002118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2224      	movs	r2, #36	; 0x24
 8007ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fc6d 	bl	80083a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b088      	sub	sp, #32
 8007b1e:	af02      	add	r7, sp, #8
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	603b      	str	r3, [r7, #0]
 8007b26:	4613      	mov	r3, r2
 8007b28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	f040 8083 	bne.w	8007c42 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_UART_Transmit+0x2e>
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e07b      	b.n	8007c44 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d101      	bne.n	8007b5a <HAL_UART_Transmit+0x40>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e074      	b.n	8007c44 <HAL_UART_Transmit+0x12a>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2221      	movs	r2, #33	; 0x21
 8007b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007b70:	f7fa fd5e 	bl	8002630 <HAL_GetTick>
 8007b74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	88fa      	ldrh	r2, [r7, #6]
 8007b7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007b8a:	e042      	b.n	8007c12 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba2:	d122      	bne.n	8007bea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2200      	movs	r2, #0
 8007bac:	2180      	movs	r1, #128	; 0x80
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fa76 	bl	80080a0 <UART_WaitOnFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e042      	b.n	8007c44 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3302      	adds	r3, #2
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	e017      	b.n	8007c12 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60bb      	str	r3, [r7, #8]
 8007be8:	e013      	b.n	8007c12 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fa53 	bl	80080a0 <UART_WaitOnFlagUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e01f      	b.n	8007c44 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	60ba      	str	r2, [r7, #8]
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1b7      	bne.n	8007b8c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2200      	movs	r2, #0
 8007c24:	2140      	movs	r1, #64	; 0x40
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fa3a 	bl	80080a0 <UART_WaitOnFlagUntilTimeout>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e006      	b.n	8007c44 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e000      	b.n	8007c44 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007c42:	2302      	movs	r3, #2
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d166      	bne.n	8007d34 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_UART_Receive_DMA+0x26>
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e05f      	b.n	8007d36 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_UART_Receive_DMA+0x38>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e058      	b.n	8007d36 <HAL_UART_Receive_DMA+0xea>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	88fa      	ldrh	r2, [r7, #6]
 8007c96:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2222      	movs	r2, #34	; 0x22
 8007ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	4a25      	ldr	r2, [pc, #148]	; (8007d40 <HAL_UART_Receive_DMA+0xf4>)
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb2:	4a24      	ldr	r2, [pc, #144]	; (8007d44 <HAL_UART_Receive_DMA+0xf8>)
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cba:	4a23      	ldr	r2, [pc, #140]	; (8007d48 <HAL_UART_Receive_DMA+0xfc>)
 8007cbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007cc6:	f107 0308 	add.w	r3, r7, #8
 8007cca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	f7fa fe65 	bl	80029ac <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d0e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695a      	ldr	r2, [r3, #20]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0201 	orr.w	r2, r2, #1
 8007d1e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	695a      	ldr	r2, [r3, #20]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d2e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e000      	b.n	8007d36 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007d34:	2302      	movs	r3, #2
  }
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	08007f89 	.word	0x08007f89
 8007d44:	08007ff1 	.word	0x08007ff1
 8007d48:	0800800d 	.word	0x0800800d

08007d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10d      	bne.n	8007d9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f003 0320 	and.w	r3, r3, #32
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_UART_IRQHandler+0x52>
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa82 	bl	80082a0 <UART_Receive_IT>
      return;
 8007d9c:	e0d1      	b.n	8007f42 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80b0 	beq.w	8007f06 <HAL_UART_IRQHandler+0x1ba>
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d105      	bne.n	8007dbc <HAL_UART_IRQHandler+0x70>
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80a5 	beq.w	8007f06 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <HAL_UART_IRQHandler+0x90>
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd4:	f043 0201 	orr.w	r2, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <HAL_UART_IRQHandler+0xb0>
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df4:	f043 0202 	orr.w	r2, r3, #2
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <HAL_UART_IRQHandler+0xd0>
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	f043 0204 	orr.w	r2, r3, #4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00f      	beq.n	8007e46 <HAL_UART_IRQHandler+0xfa>
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <HAL_UART_IRQHandler+0xee>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	f043 0208 	orr.w	r2, r3, #8
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d078      	beq.n	8007f40 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <HAL_UART_IRQHandler+0x11c>
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa1c 	bl	80082a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e72:	2b40      	cmp	r3, #64	; 0x40
 8007e74:	bf0c      	ite	eq
 8007e76:	2301      	moveq	r3, #1
 8007e78:	2300      	movne	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <HAL_UART_IRQHandler+0x144>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d031      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f965 	bl	8008160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b40      	cmp	r3, #64	; 0x40
 8007ea2:	d123      	bne.n	8007eec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d013      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec0:	4a21      	ldr	r2, [pc, #132]	; (8007f48 <HAL_UART_IRQHandler+0x1fc>)
 8007ec2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fa fdc7 	bl	8002a5c <HAL_DMA_Abort_IT>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d016      	beq.n	8007f02 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee2:	e00e      	b.n	8007f02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f845 	bl	8007f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eea:	e00a      	b.n	8007f02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f841 	bl	8007f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef2:	e006      	b.n	8007f02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f83d 	bl	8007f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007f00:	e01e      	b.n	8007f40 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f02:	bf00      	nop
    return;
 8007f04:	e01c      	b.n	8007f40 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <HAL_UART_IRQHandler+0x1d6>
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f952 	bl	80081c4 <UART_Transmit_IT>
    return;
 8007f20:	e00f      	b.n	8007f42 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1f6>
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d005      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f99a 	bl	8008270 <UART_EndTransmit_IT>
    return;
 8007f3c:	bf00      	nop
 8007f3e:	e000      	b.n	8007f42 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007f40:	bf00      	nop
  }
}
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	0800819d 	.word	0x0800819d

08007f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d11e      	bne.n	8007fe2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fb8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695a      	ldr	r2, [r3, #20]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	695a      	ldr	r2, [r3, #20]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f005 fd24 	bl	800da30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe8:	bf00      	nop
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff ffae 	bl	8007f60 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008004:	bf00      	nop
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008028:	2b80      	cmp	r3, #128	; 0x80
 800802a:	bf0c      	ite	eq
 800802c:	2301      	moveq	r3, #1
 800802e:	2300      	movne	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b21      	cmp	r3, #33	; 0x21
 800803e:	d108      	bne.n	8008052 <UART_DMAError+0x46>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2200      	movs	r2, #0
 800804a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800804c:	68b8      	ldr	r0, [r7, #8]
 800804e:	f000 f871 	bl	8008134 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b22      	cmp	r3, #34	; 0x22
 8008072:	d108      	bne.n	8008086 <UART_DMAError+0x7a>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008080:	68b8      	ldr	r0, [r7, #8]
 8008082:	f000 f86d 	bl	8008160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808a:	f043 0210 	orr.w	r2, r3, #16
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008092:	68b8      	ldr	r0, [r7, #8]
 8008094:	f7ff ff6e 	bl	8007f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	4613      	mov	r3, r2
 80080ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b0:	e02c      	b.n	800810c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b8:	d028      	beq.n	800810c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80080c0:	f7fa fab6 	bl	8002630 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d21d      	bcs.n	800810c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695a      	ldr	r2, [r3, #20]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e00f      	b.n	800812c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4013      	ands	r3, r2
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	bf0c      	ite	eq
 800811c:	2301      	moveq	r3, #1
 800811e:	2300      	movne	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	429a      	cmp	r2, r3
 8008128:	d0c3      	beq.n	80080b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800814a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008176:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695a      	ldr	r2, [r3, #20]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7ff fedc 	bl	8007f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081bc:	bf00      	nop
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b21      	cmp	r3, #33	; 0x21
 80081d6:	d144      	bne.n	8008262 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e0:	d11a      	bne.n	8008218 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d105      	bne.n	800820c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	1c9a      	adds	r2, r3, #2
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	621a      	str	r2, [r3, #32]
 800820a:	e00e      	b.n	800822a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	621a      	str	r2, [r3, #32]
 8008216:	e008      	b.n	800822a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	1c59      	adds	r1, r3, #1
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6211      	str	r1, [r2, #32]
 8008222:	781a      	ldrb	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29b      	uxth	r3, r3
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	4619      	mov	r1, r3
 8008238:	84d1      	strh	r1, [r2, #38]	; 0x26
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10f      	bne.n	800825e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800824c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800825c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	e000      	b.n	8008264 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008262:	2302      	movs	r3, #2
  }
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008286:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fe5b 	bl	8007f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b22      	cmp	r3, #34	; 0x22
 80082b2:	d171      	bne.n	8008398 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082bc:	d123      	bne.n	8008306 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10e      	bne.n	80082ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	1c9a      	adds	r2, r3, #2
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	629a      	str	r2, [r3, #40]	; 0x28
 80082e8:	e029      	b.n	800833e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	629a      	str	r2, [r3, #40]	; 0x28
 8008304:	e01b      	b.n	800833e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6858      	ldr	r0, [r3, #4]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008318:	1c59      	adds	r1, r3, #1
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6291      	str	r1, [r2, #40]	; 0x28
 800831e:	b2c2      	uxtb	r2, r0
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e00c      	b.n	800833e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b2da      	uxtb	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	1c58      	adds	r0, r3, #1
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	6288      	str	r0, [r1, #40]	; 0x28
 8008336:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008342:	b29b      	uxth	r3, r3
 8008344:	3b01      	subs	r3, #1
 8008346:	b29b      	uxth	r3, r3
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	4619      	mov	r1, r3
 800834c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800834e:	2b00      	cmp	r3, #0
 8008350:	d120      	bne.n	8008394 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0220 	bic.w	r2, r2, #32
 8008360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695a      	ldr	r2, [r3, #20]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f005 fb50 	bl	800da30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e002      	b.n	800839a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	e000      	b.n	800839a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008398:	2302      	movs	r3, #2
  }
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	b085      	sub	sp, #20
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80083e6:	f023 030c 	bic.w	r3, r3, #12
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	430b      	orrs	r3, r1
 80083f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008412:	f040 818b 	bne.w	800872c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4ac1      	ldr	r2, [pc, #772]	; (8008720 <UART_SetConfig+0x37c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d005      	beq.n	800842c <UART_SetConfig+0x88>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4abf      	ldr	r2, [pc, #764]	; (8008724 <UART_SetConfig+0x380>)
 8008426:	4293      	cmp	r3, r2
 8008428:	f040 80bd 	bne.w	80085a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800842c:	f7fe fc36 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 8008430:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	461d      	mov	r5, r3
 8008436:	f04f 0600 	mov.w	r6, #0
 800843a:	46a8      	mov	r8, r5
 800843c:	46b1      	mov	r9, r6
 800843e:	eb18 0308 	adds.w	r3, r8, r8
 8008442:	eb49 0409 	adc.w	r4, r9, r9
 8008446:	4698      	mov	r8, r3
 8008448:	46a1      	mov	r9, r4
 800844a:	eb18 0805 	adds.w	r8, r8, r5
 800844e:	eb49 0906 	adc.w	r9, r9, r6
 8008452:	f04f 0100 	mov.w	r1, #0
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800845e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008462:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008466:	4688      	mov	r8, r1
 8008468:	4691      	mov	r9, r2
 800846a:	eb18 0005 	adds.w	r0, r8, r5
 800846e:	eb49 0106 	adc.w	r1, r9, r6
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	461d      	mov	r5, r3
 8008478:	f04f 0600 	mov.w	r6, #0
 800847c:	196b      	adds	r3, r5, r5
 800847e:	eb46 0406 	adc.w	r4, r6, r6
 8008482:	461a      	mov	r2, r3
 8008484:	4623      	mov	r3, r4
 8008486:	f7f8 fc5f 	bl	8000d48 <__aeabi_uldivmod>
 800848a:	4603      	mov	r3, r0
 800848c:	460c      	mov	r4, r1
 800848e:	461a      	mov	r2, r3
 8008490:	4ba5      	ldr	r3, [pc, #660]	; (8008728 <UART_SetConfig+0x384>)
 8008492:	fba3 2302 	umull	r2, r3, r3, r2
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	461d      	mov	r5, r3
 80084a0:	f04f 0600 	mov.w	r6, #0
 80084a4:	46a9      	mov	r9, r5
 80084a6:	46b2      	mov	sl, r6
 80084a8:	eb19 0309 	adds.w	r3, r9, r9
 80084ac:	eb4a 040a 	adc.w	r4, sl, sl
 80084b0:	4699      	mov	r9, r3
 80084b2:	46a2      	mov	sl, r4
 80084b4:	eb19 0905 	adds.w	r9, r9, r5
 80084b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80084bc:	f04f 0100 	mov.w	r1, #0
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084d0:	4689      	mov	r9, r1
 80084d2:	4692      	mov	sl, r2
 80084d4:	eb19 0005 	adds.w	r0, r9, r5
 80084d8:	eb4a 0106 	adc.w	r1, sl, r6
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	461d      	mov	r5, r3
 80084e2:	f04f 0600 	mov.w	r6, #0
 80084e6:	196b      	adds	r3, r5, r5
 80084e8:	eb46 0406 	adc.w	r4, r6, r6
 80084ec:	461a      	mov	r2, r3
 80084ee:	4623      	mov	r3, r4
 80084f0:	f7f8 fc2a 	bl	8000d48 <__aeabi_uldivmod>
 80084f4:	4603      	mov	r3, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	461a      	mov	r2, r3
 80084fa:	4b8b      	ldr	r3, [pc, #556]	; (8008728 <UART_SetConfig+0x384>)
 80084fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	2164      	movs	r1, #100	; 0x64
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	3332      	adds	r3, #50	; 0x32
 800850e:	4a86      	ldr	r2, [pc, #536]	; (8008728 <UART_SetConfig+0x384>)
 8008510:	fba2 2303 	umull	r2, r3, r2, r3
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800851c:	4498      	add	r8, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	461d      	mov	r5, r3
 8008522:	f04f 0600 	mov.w	r6, #0
 8008526:	46a9      	mov	r9, r5
 8008528:	46b2      	mov	sl, r6
 800852a:	eb19 0309 	adds.w	r3, r9, r9
 800852e:	eb4a 040a 	adc.w	r4, sl, sl
 8008532:	4699      	mov	r9, r3
 8008534:	46a2      	mov	sl, r4
 8008536:	eb19 0905 	adds.w	r9, r9, r5
 800853a:	eb4a 0a06 	adc.w	sl, sl, r6
 800853e:	f04f 0100 	mov.w	r1, #0
 8008542:	f04f 0200 	mov.w	r2, #0
 8008546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800854a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800854e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008552:	4689      	mov	r9, r1
 8008554:	4692      	mov	sl, r2
 8008556:	eb19 0005 	adds.w	r0, r9, r5
 800855a:	eb4a 0106 	adc.w	r1, sl, r6
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	461d      	mov	r5, r3
 8008564:	f04f 0600 	mov.w	r6, #0
 8008568:	196b      	adds	r3, r5, r5
 800856a:	eb46 0406 	adc.w	r4, r6, r6
 800856e:	461a      	mov	r2, r3
 8008570:	4623      	mov	r3, r4
 8008572:	f7f8 fbe9 	bl	8000d48 <__aeabi_uldivmod>
 8008576:	4603      	mov	r3, r0
 8008578:	460c      	mov	r4, r1
 800857a:	461a      	mov	r2, r3
 800857c:	4b6a      	ldr	r3, [pc, #424]	; (8008728 <UART_SetConfig+0x384>)
 800857e:	fba3 1302 	umull	r1, r3, r3, r2
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	2164      	movs	r1, #100	; 0x64
 8008586:	fb01 f303 	mul.w	r3, r1, r3
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	3332      	adds	r3, #50	; 0x32
 8008590:	4a65      	ldr	r2, [pc, #404]	; (8008728 <UART_SetConfig+0x384>)
 8008592:	fba2 2303 	umull	r2, r3, r2, r3
 8008596:	095b      	lsrs	r3, r3, #5
 8008598:	f003 0207 	and.w	r2, r3, #7
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4442      	add	r2, r8
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	e26f      	b.n	8008a86 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085a6:	f7fe fb65 	bl	8006c74 <HAL_RCC_GetPCLK1Freq>
 80085aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	461d      	mov	r5, r3
 80085b0:	f04f 0600 	mov.w	r6, #0
 80085b4:	46a8      	mov	r8, r5
 80085b6:	46b1      	mov	r9, r6
 80085b8:	eb18 0308 	adds.w	r3, r8, r8
 80085bc:	eb49 0409 	adc.w	r4, r9, r9
 80085c0:	4698      	mov	r8, r3
 80085c2:	46a1      	mov	r9, r4
 80085c4:	eb18 0805 	adds.w	r8, r8, r5
 80085c8:	eb49 0906 	adc.w	r9, r9, r6
 80085cc:	f04f 0100 	mov.w	r1, #0
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085e0:	4688      	mov	r8, r1
 80085e2:	4691      	mov	r9, r2
 80085e4:	eb18 0005 	adds.w	r0, r8, r5
 80085e8:	eb49 0106 	adc.w	r1, r9, r6
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	461d      	mov	r5, r3
 80085f2:	f04f 0600 	mov.w	r6, #0
 80085f6:	196b      	adds	r3, r5, r5
 80085f8:	eb46 0406 	adc.w	r4, r6, r6
 80085fc:	461a      	mov	r2, r3
 80085fe:	4623      	mov	r3, r4
 8008600:	f7f8 fba2 	bl	8000d48 <__aeabi_uldivmod>
 8008604:	4603      	mov	r3, r0
 8008606:	460c      	mov	r4, r1
 8008608:	461a      	mov	r2, r3
 800860a:	4b47      	ldr	r3, [pc, #284]	; (8008728 <UART_SetConfig+0x384>)
 800860c:	fba3 2302 	umull	r2, r3, r3, r2
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	461d      	mov	r5, r3
 800861a:	f04f 0600 	mov.w	r6, #0
 800861e:	46a9      	mov	r9, r5
 8008620:	46b2      	mov	sl, r6
 8008622:	eb19 0309 	adds.w	r3, r9, r9
 8008626:	eb4a 040a 	adc.w	r4, sl, sl
 800862a:	4699      	mov	r9, r3
 800862c:	46a2      	mov	sl, r4
 800862e:	eb19 0905 	adds.w	r9, r9, r5
 8008632:	eb4a 0a06 	adc.w	sl, sl, r6
 8008636:	f04f 0100 	mov.w	r1, #0
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008642:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008646:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800864a:	4689      	mov	r9, r1
 800864c:	4692      	mov	sl, r2
 800864e:	eb19 0005 	adds.w	r0, r9, r5
 8008652:	eb4a 0106 	adc.w	r1, sl, r6
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	461d      	mov	r5, r3
 800865c:	f04f 0600 	mov.w	r6, #0
 8008660:	196b      	adds	r3, r5, r5
 8008662:	eb46 0406 	adc.w	r4, r6, r6
 8008666:	461a      	mov	r2, r3
 8008668:	4623      	mov	r3, r4
 800866a:	f7f8 fb6d 	bl	8000d48 <__aeabi_uldivmod>
 800866e:	4603      	mov	r3, r0
 8008670:	460c      	mov	r4, r1
 8008672:	461a      	mov	r2, r3
 8008674:	4b2c      	ldr	r3, [pc, #176]	; (8008728 <UART_SetConfig+0x384>)
 8008676:	fba3 1302 	umull	r1, r3, r3, r2
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	2164      	movs	r1, #100	; 0x64
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	3332      	adds	r3, #50	; 0x32
 8008688:	4a27      	ldr	r2, [pc, #156]	; (8008728 <UART_SetConfig+0x384>)
 800868a:	fba2 2303 	umull	r2, r3, r2, r3
 800868e:	095b      	lsrs	r3, r3, #5
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008696:	4498      	add	r8, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	461d      	mov	r5, r3
 800869c:	f04f 0600 	mov.w	r6, #0
 80086a0:	46a9      	mov	r9, r5
 80086a2:	46b2      	mov	sl, r6
 80086a4:	eb19 0309 	adds.w	r3, r9, r9
 80086a8:	eb4a 040a 	adc.w	r4, sl, sl
 80086ac:	4699      	mov	r9, r3
 80086ae:	46a2      	mov	sl, r4
 80086b0:	eb19 0905 	adds.w	r9, r9, r5
 80086b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80086b8:	f04f 0100 	mov.w	r1, #0
 80086bc:	f04f 0200 	mov.w	r2, #0
 80086c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086cc:	4689      	mov	r9, r1
 80086ce:	4692      	mov	sl, r2
 80086d0:	eb19 0005 	adds.w	r0, r9, r5
 80086d4:	eb4a 0106 	adc.w	r1, sl, r6
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	461d      	mov	r5, r3
 80086de:	f04f 0600 	mov.w	r6, #0
 80086e2:	196b      	adds	r3, r5, r5
 80086e4:	eb46 0406 	adc.w	r4, r6, r6
 80086e8:	461a      	mov	r2, r3
 80086ea:	4623      	mov	r3, r4
 80086ec:	f7f8 fb2c 	bl	8000d48 <__aeabi_uldivmod>
 80086f0:	4603      	mov	r3, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <UART_SetConfig+0x384>)
 80086f8:	fba3 1302 	umull	r1, r3, r3, r2
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	2164      	movs	r1, #100	; 0x64
 8008700:	fb01 f303 	mul.w	r3, r1, r3
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	3332      	adds	r3, #50	; 0x32
 800870a:	4a07      	ldr	r2, [pc, #28]	; (8008728 <UART_SetConfig+0x384>)
 800870c:	fba2 2303 	umull	r2, r3, r2, r3
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	f003 0207 	and.w	r2, r3, #7
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4442      	add	r2, r8
 800871c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800871e:	e1b2      	b.n	8008a86 <UART_SetConfig+0x6e2>
 8008720:	40011000 	.word	0x40011000
 8008724:	40011400 	.word	0x40011400
 8008728:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4ad7      	ldr	r2, [pc, #860]	; (8008a90 <UART_SetConfig+0x6ec>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d005      	beq.n	8008742 <UART_SetConfig+0x39e>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4ad6      	ldr	r2, [pc, #856]	; (8008a94 <UART_SetConfig+0x6f0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	f040 80d1 	bne.w	80088e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008742:	f7fe faab 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 8008746:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	469a      	mov	sl, r3
 800874c:	f04f 0b00 	mov.w	fp, #0
 8008750:	46d0      	mov	r8, sl
 8008752:	46d9      	mov	r9, fp
 8008754:	eb18 0308 	adds.w	r3, r8, r8
 8008758:	eb49 0409 	adc.w	r4, r9, r9
 800875c:	4698      	mov	r8, r3
 800875e:	46a1      	mov	r9, r4
 8008760:	eb18 080a 	adds.w	r8, r8, sl
 8008764:	eb49 090b 	adc.w	r9, r9, fp
 8008768:	f04f 0100 	mov.w	r1, #0
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008774:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008778:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800877c:	4688      	mov	r8, r1
 800877e:	4691      	mov	r9, r2
 8008780:	eb1a 0508 	adds.w	r5, sl, r8
 8008784:	eb4b 0609 	adc.w	r6, fp, r9
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4619      	mov	r1, r3
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	f04f 0400 	mov.w	r4, #0
 800879a:	0094      	lsls	r4, r2, #2
 800879c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087a0:	008b      	lsls	r3, r1, #2
 80087a2:	461a      	mov	r2, r3
 80087a4:	4623      	mov	r3, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	4631      	mov	r1, r6
 80087aa:	f7f8 facd 	bl	8000d48 <__aeabi_uldivmod>
 80087ae:	4603      	mov	r3, r0
 80087b0:	460c      	mov	r4, r1
 80087b2:	461a      	mov	r2, r3
 80087b4:	4bb8      	ldr	r3, [pc, #736]	; (8008a98 <UART_SetConfig+0x6f4>)
 80087b6:	fba3 2302 	umull	r2, r3, r3, r2
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	469b      	mov	fp, r3
 80087c4:	f04f 0c00 	mov.w	ip, #0
 80087c8:	46d9      	mov	r9, fp
 80087ca:	46e2      	mov	sl, ip
 80087cc:	eb19 0309 	adds.w	r3, r9, r9
 80087d0:	eb4a 040a 	adc.w	r4, sl, sl
 80087d4:	4699      	mov	r9, r3
 80087d6:	46a2      	mov	sl, r4
 80087d8:	eb19 090b 	adds.w	r9, r9, fp
 80087dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087e0:	f04f 0100 	mov.w	r1, #0
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087f4:	4689      	mov	r9, r1
 80087f6:	4692      	mov	sl, r2
 80087f8:	eb1b 0509 	adds.w	r5, fp, r9
 80087fc:	eb4c 060a 	adc.w	r6, ip, sl
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	4619      	mov	r1, r3
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	f04f 0400 	mov.w	r4, #0
 8008812:	0094      	lsls	r4, r2, #2
 8008814:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008818:	008b      	lsls	r3, r1, #2
 800881a:	461a      	mov	r2, r3
 800881c:	4623      	mov	r3, r4
 800881e:	4628      	mov	r0, r5
 8008820:	4631      	mov	r1, r6
 8008822:	f7f8 fa91 	bl	8000d48 <__aeabi_uldivmod>
 8008826:	4603      	mov	r3, r0
 8008828:	460c      	mov	r4, r1
 800882a:	461a      	mov	r2, r3
 800882c:	4b9a      	ldr	r3, [pc, #616]	; (8008a98 <UART_SetConfig+0x6f4>)
 800882e:	fba3 1302 	umull	r1, r3, r3, r2
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	2164      	movs	r1, #100	; 0x64
 8008836:	fb01 f303 	mul.w	r3, r1, r3
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	3332      	adds	r3, #50	; 0x32
 8008840:	4a95      	ldr	r2, [pc, #596]	; (8008a98 <UART_SetConfig+0x6f4>)
 8008842:	fba2 2303 	umull	r2, r3, r2, r3
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800884c:	4498      	add	r8, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	469b      	mov	fp, r3
 8008852:	f04f 0c00 	mov.w	ip, #0
 8008856:	46d9      	mov	r9, fp
 8008858:	46e2      	mov	sl, ip
 800885a:	eb19 0309 	adds.w	r3, r9, r9
 800885e:	eb4a 040a 	adc.w	r4, sl, sl
 8008862:	4699      	mov	r9, r3
 8008864:	46a2      	mov	sl, r4
 8008866:	eb19 090b 	adds.w	r9, r9, fp
 800886a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800886e:	f04f 0100 	mov.w	r1, #0
 8008872:	f04f 0200 	mov.w	r2, #0
 8008876:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800887a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800887e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008882:	4689      	mov	r9, r1
 8008884:	4692      	mov	sl, r2
 8008886:	eb1b 0509 	adds.w	r5, fp, r9
 800888a:	eb4c 060a 	adc.w	r6, ip, sl
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4619      	mov	r1, r3
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	f04f 0400 	mov.w	r4, #0
 80088a0:	0094      	lsls	r4, r2, #2
 80088a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088a6:	008b      	lsls	r3, r1, #2
 80088a8:	461a      	mov	r2, r3
 80088aa:	4623      	mov	r3, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	4631      	mov	r1, r6
 80088b0:	f7f8 fa4a 	bl	8000d48 <__aeabi_uldivmod>
 80088b4:	4603      	mov	r3, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	461a      	mov	r2, r3
 80088ba:	4b77      	ldr	r3, [pc, #476]	; (8008a98 <UART_SetConfig+0x6f4>)
 80088bc:	fba3 1302 	umull	r1, r3, r3, r2
 80088c0:	095b      	lsrs	r3, r3, #5
 80088c2:	2164      	movs	r1, #100	; 0x64
 80088c4:	fb01 f303 	mul.w	r3, r1, r3
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	3332      	adds	r3, #50	; 0x32
 80088ce:	4a72      	ldr	r2, [pc, #456]	; (8008a98 <UART_SetConfig+0x6f4>)
 80088d0:	fba2 2303 	umull	r2, r3, r2, r3
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	f003 020f 	and.w	r2, r3, #15
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4442      	add	r2, r8
 80088e0:	609a      	str	r2, [r3, #8]
 80088e2:	e0d0      	b.n	8008a86 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80088e4:	f7fe f9c6 	bl	8006c74 <HAL_RCC_GetPCLK1Freq>
 80088e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	469a      	mov	sl, r3
 80088ee:	f04f 0b00 	mov.w	fp, #0
 80088f2:	46d0      	mov	r8, sl
 80088f4:	46d9      	mov	r9, fp
 80088f6:	eb18 0308 	adds.w	r3, r8, r8
 80088fa:	eb49 0409 	adc.w	r4, r9, r9
 80088fe:	4698      	mov	r8, r3
 8008900:	46a1      	mov	r9, r4
 8008902:	eb18 080a 	adds.w	r8, r8, sl
 8008906:	eb49 090b 	adc.w	r9, r9, fp
 800890a:	f04f 0100 	mov.w	r1, #0
 800890e:	f04f 0200 	mov.w	r2, #0
 8008912:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008916:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800891a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800891e:	4688      	mov	r8, r1
 8008920:	4691      	mov	r9, r2
 8008922:	eb1a 0508 	adds.w	r5, sl, r8
 8008926:	eb4b 0609 	adc.w	r6, fp, r9
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	4619      	mov	r1, r3
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	f04f 0400 	mov.w	r4, #0
 800893c:	0094      	lsls	r4, r2, #2
 800893e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008942:	008b      	lsls	r3, r1, #2
 8008944:	461a      	mov	r2, r3
 8008946:	4623      	mov	r3, r4
 8008948:	4628      	mov	r0, r5
 800894a:	4631      	mov	r1, r6
 800894c:	f7f8 f9fc 	bl	8000d48 <__aeabi_uldivmod>
 8008950:	4603      	mov	r3, r0
 8008952:	460c      	mov	r4, r1
 8008954:	461a      	mov	r2, r3
 8008956:	4b50      	ldr	r3, [pc, #320]	; (8008a98 <UART_SetConfig+0x6f4>)
 8008958:	fba3 2302 	umull	r2, r3, r3, r2
 800895c:	095b      	lsrs	r3, r3, #5
 800895e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	469b      	mov	fp, r3
 8008966:	f04f 0c00 	mov.w	ip, #0
 800896a:	46d9      	mov	r9, fp
 800896c:	46e2      	mov	sl, ip
 800896e:	eb19 0309 	adds.w	r3, r9, r9
 8008972:	eb4a 040a 	adc.w	r4, sl, sl
 8008976:	4699      	mov	r9, r3
 8008978:	46a2      	mov	sl, r4
 800897a:	eb19 090b 	adds.w	r9, r9, fp
 800897e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008982:	f04f 0100 	mov.w	r1, #0
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800898e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008992:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008996:	4689      	mov	r9, r1
 8008998:	4692      	mov	sl, r2
 800899a:	eb1b 0509 	adds.w	r5, fp, r9
 800899e:	eb4c 060a 	adc.w	r6, ip, sl
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4619      	mov	r1, r3
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	f04f 0300 	mov.w	r3, #0
 80089b0:	f04f 0400 	mov.w	r4, #0
 80089b4:	0094      	lsls	r4, r2, #2
 80089b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089ba:	008b      	lsls	r3, r1, #2
 80089bc:	461a      	mov	r2, r3
 80089be:	4623      	mov	r3, r4
 80089c0:	4628      	mov	r0, r5
 80089c2:	4631      	mov	r1, r6
 80089c4:	f7f8 f9c0 	bl	8000d48 <__aeabi_uldivmod>
 80089c8:	4603      	mov	r3, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b32      	ldr	r3, [pc, #200]	; (8008a98 <UART_SetConfig+0x6f4>)
 80089d0:	fba3 1302 	umull	r1, r3, r3, r2
 80089d4:	095b      	lsrs	r3, r3, #5
 80089d6:	2164      	movs	r1, #100	; 0x64
 80089d8:	fb01 f303 	mul.w	r3, r1, r3
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	3332      	adds	r3, #50	; 0x32
 80089e2:	4a2d      	ldr	r2, [pc, #180]	; (8008a98 <UART_SetConfig+0x6f4>)
 80089e4:	fba2 2303 	umull	r2, r3, r2, r3
 80089e8:	095b      	lsrs	r3, r3, #5
 80089ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089ee:	4498      	add	r8, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	469b      	mov	fp, r3
 80089f4:	f04f 0c00 	mov.w	ip, #0
 80089f8:	46d9      	mov	r9, fp
 80089fa:	46e2      	mov	sl, ip
 80089fc:	eb19 0309 	adds.w	r3, r9, r9
 8008a00:	eb4a 040a 	adc.w	r4, sl, sl
 8008a04:	4699      	mov	r9, r3
 8008a06:	46a2      	mov	sl, r4
 8008a08:	eb19 090b 	adds.w	r9, r9, fp
 8008a0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a10:	f04f 0100 	mov.w	r1, #0
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a24:	4689      	mov	r9, r1
 8008a26:	4692      	mov	sl, r2
 8008a28:	eb1b 0509 	adds.w	r5, fp, r9
 8008a2c:	eb4c 060a 	adc.w	r6, ip, sl
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f04f 0200 	mov.w	r2, #0
 8008a3a:	f04f 0300 	mov.w	r3, #0
 8008a3e:	f04f 0400 	mov.w	r4, #0
 8008a42:	0094      	lsls	r4, r2, #2
 8008a44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a48:	008b      	lsls	r3, r1, #2
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	4631      	mov	r1, r6
 8008a52:	f7f8 f979 	bl	8000d48 <__aeabi_uldivmod>
 8008a56:	4603      	mov	r3, r0
 8008a58:	460c      	mov	r4, r1
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <UART_SetConfig+0x6f4>)
 8008a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a62:	095b      	lsrs	r3, r3, #5
 8008a64:	2164      	movs	r1, #100	; 0x64
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	3332      	adds	r3, #50	; 0x32
 8008a70:	4a09      	ldr	r2, [pc, #36]	; (8008a98 <UART_SetConfig+0x6f4>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	f003 020f 	and.w	r2, r3, #15
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4442      	add	r2, r8
 8008a82:	609a      	str	r2, [r3, #8]
}
 8008a84:	e7ff      	b.n	8008a86 <UART_SetConfig+0x6e2>
 8008a86:	bf00      	nop
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	40011000 	.word	0x40011000
 8008a94:	40011400 	.word	0x40011400
 8008a98:	51eb851f 	.word	0x51eb851f

08008a9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	f107 001c 	add.w	r0, r7, #28
 8008aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d122      	bne.n	8008afa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d105      	bne.n	8008aee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa4e 	bl	8008f90 <USB_CoreReset>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]
 8008af8:	e01a      	b.n	8008b30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa42 	bl	8008f90 <USB_CoreReset>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
 8008b22:	e005      	b.n	8008b30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d10b      	bne.n	8008b4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f043 0206 	orr.w	r2, r3, #6
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f043 0220 	orr.w	r2, r3, #32
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b5a:	b004      	add	sp, #16
 8008b5c:	4770      	bx	lr

08008b5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f023 0201 	bic.w	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d106      	bne.n	8008bac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	e00b      	b.n	8008bc4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	e001      	b.n	8008bc4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e003      	b.n	8008bcc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008bc4:	2032      	movs	r0, #50	; 0x32
 8008bc6:	f7f9 fd3f 	bl	8002648 <HAL_Delay>

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b086      	sub	sp, #24
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bee:	2300      	movs	r3, #0
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	e009      	b.n	8008c08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	3340      	adds	r3, #64	; 0x40
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3301      	adds	r3, #1
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b0e      	cmp	r3, #14
 8008c0c:	d9f2      	bls.n	8008bf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11c      	bne.n	8008c4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c22:	f043 0302 	orr.w	r3, r3, #2
 8008c26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c4c:	e00b      	b.n	8008c66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c78:	4619      	mov	r1, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c80:	461a      	mov	r2, r3
 8008c82:	680b      	ldr	r3, [r1, #0]
 8008c84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d10c      	bne.n	8008ca6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c92:	2100      	movs	r1, #0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f949 	bl	8008f2c <USB_SetDevSpeed>
 8008c9a:	e008      	b.n	8008cae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f944 	bl	8008f2c <USB_SetDevSpeed>
 8008ca4:	e003      	b.n	8008cae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ca6:	2103      	movs	r1, #3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f93f 	bl	8008f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cae:	2110      	movs	r1, #16
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f8f3 	bl	8008e9c <USB_FlushTxFifo>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f911 	bl	8008ee8 <USB_FlushRxFifo>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	2300      	movs	r3, #0
 8008cda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	461a      	mov	r2, r3
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	e043      	b.n	8008d82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d10:	d118      	bne.n	8008d44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	461a      	mov	r2, r3
 8008d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	e013      	b.n	8008d56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	e008      	b.n	8008d56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d50:	461a      	mov	r2, r3
 8008d52:	2300      	movs	r3, #0
 8008d54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d62:	461a      	mov	r2, r3
 8008d64:	2300      	movs	r3, #0
 8008d66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d74:	461a      	mov	r2, r3
 8008d76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d3b7      	bcc.n	8008cfa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	613b      	str	r3, [r7, #16]
 8008d8e:	e043      	b.n	8008e18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008da6:	d118      	bne.n	8008dda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	e013      	b.n	8008dec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	e008      	b.n	8008dec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de6:	461a      	mov	r2, r3
 8008de8:	2300      	movs	r3, #0
 8008dea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df8:	461a      	mov	r2, r3
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3301      	adds	r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d3b7      	bcc.n	8008d90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d105      	bne.n	8008e54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f043 0210 	orr.w	r2, r3, #16
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699a      	ldr	r2, [r3, #24]
 8008e58:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <USB_DevInit+0x2c4>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	f043 0208 	orr.w	r2, r3, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d107      	bne.n	8008e88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e80:	f043 0304 	orr.w	r3, r3, #4
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e94:	b004      	add	sp, #16
 8008e96:	4770      	bx	lr
 8008e98:	803c3800 	.word	0x803c3800

08008e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	019b      	lsls	r3, r3, #6
 8008eae:	f043 0220 	orr.w	r2, r3, #32
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4a09      	ldr	r2, [pc, #36]	; (8008ee4 <USB_FlushTxFifo+0x48>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d901      	bls.n	8008ec8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e006      	b.n	8008ed6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d0f0      	beq.n	8008eb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	00030d40 	.word	0x00030d40

08008ee8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <USB_FlushRxFifo+0x40>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d901      	bls.n	8008f0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e006      	b.n	8008f1a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b10      	cmp	r3, #16
 8008f16:	d0f0      	beq.n	8008efa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	00030d40 	.word	0x00030d40

08008f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	68f9      	ldr	r1, [r7, #12]
 8008f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f78:	f043 0302 	orr.w	r3, r3, #2
 8008f7c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008f7e:	2003      	movs	r0, #3
 8008f80:	f7f9 fb62 	bl	8002648 <HAL_Delay>

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60fb      	str	r3, [r7, #12]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4a13      	ldr	r2, [pc, #76]	; (8008ff4 <USB_CoreReset+0x64>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d901      	bls.n	8008fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e01b      	b.n	8008fe6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	daf2      	bge.n	8008f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f043 0201 	orr.w	r2, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4a09      	ldr	r2, [pc, #36]	; (8008ff4 <USB_CoreReset+0x64>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d901      	bls.n	8008fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e006      	b.n	8008fe6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d0f0      	beq.n	8008fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	00030d40 	.word	0x00030d40

08008ff8 <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 8009000:	4a06      	ldr	r2, [pc, #24]	; (800901c <IST8310+0x24>)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 8009006:	f000 f92b 	bl	8009260 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 800900a:	210b      	movs	r1, #11
 800900c:	200a      	movs	r0, #10
 800900e:	f000 f915 	bl	800923c <IST8310_write_reg>
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20001a84 	.word	0x20001a84

08009020 <IST8310_updataIT>:
}

/*
 *  150hz gogo
 */
void IST8310_updataIT(){
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af02      	add	r7, sp, #8
	while(1){
		if(bm_i2cFlag == bm_i2cIdle){
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <IST8310_updataIT+0x38>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10e      	bne.n	800904c <IST8310_updataIT+0x2c>
			HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
 800902e:	4b0b      	ldr	r3, [pc, #44]	; (800905c <IST8310_updataIT+0x3c>)
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	2306      	movs	r3, #6
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <IST8310_updataIT+0x40>)
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	2301      	movs	r3, #1
 800903c:	2203      	movs	r2, #3
 800903e:	211c      	movs	r1, #28
 8009040:	f7fa fdcc 	bl	8003bdc <HAL_I2C_Mem_Read_IT>
			bm_i2cFlag = bm_i2cIST8310;
 8009044:	4b04      	ldr	r3, [pc, #16]	; (8009058 <IST8310_updataIT+0x38>)
 8009046:	2202      	movs	r2, #2
 8009048:	701a      	strb	r2, [r3, #0]
			return;
 800904a:	e003      	b.n	8009054 <IST8310_updataIT+0x34>
		}
		else osDelay(1);
 800904c:	2001      	movs	r0, #1
 800904e:	f004 fe21 	bl	800dc94 <osDelay>
		if(bm_i2cFlag == bm_i2cIdle){
 8009052:	e7e8      	b.n	8009026 <IST8310_updataIT+0x6>
	}
}
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20001a28 	.word	0x20001a28
 800905c:	20001a84 	.word	0x20001a84
 8009060:	20001a88 	.word	0x20001a88
 8009064:	00000000 	.word	0x00000000

08009068 <IST8310_rxCpltCallback>:
void IST8310_rxCpltCallback(I2C_HandleTypeDef *hi2c){
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance != ist8310.hi2c->Instance) return;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b60      	ldr	r3, [pc, #384]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	f040 80a2 	bne.w	80091c4 <IST8310_rxCpltCallback+0x15c>
	if(bm_i2cFlag != bm_i2cIST8310) return;
 8009080:	4b5e      	ldr	r3, [pc, #376]	; (80091fc <IST8310_rxCpltCallback+0x194>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b02      	cmp	r3, #2
 8009086:	f040 809f 	bne.w	80091c8 <IST8310_rxCpltCallback+0x160>

	bm_i2cFlag = bm_i2cIdle;
 800908a:	4b5c      	ldr	r3, [pc, #368]	; (80091fc <IST8310_rxCpltCallback+0x194>)
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 8009090:	4b59      	ldr	r3, [pc, #356]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 8009092:	795b      	ldrb	r3, [r3, #5]
 8009094:	021b      	lsls	r3, r3, #8
 8009096:	b21a      	sxth	r2, r3
 8009098:	4b57      	ldr	r3, [pc, #348]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 800909a:	791b      	ldrb	r3, [r3, #4]
 800909c:	b21b      	sxth	r3, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	b21a      	sxth	r2, r3
 80090a2:	4b55      	ldr	r3, [pc, #340]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090a4:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 80090a6:	4b54      	ldr	r3, [pc, #336]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090a8:	79db      	ldrb	r3, [r3, #7]
 80090aa:	021b      	lsls	r3, r3, #8
 80090ac:	b21a      	sxth	r2, r3
 80090ae:	4b52      	ldr	r3, [pc, #328]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090b0:	799b      	ldrb	r3, [r3, #6]
 80090b2:	b21b      	sxth	r3, r3
 80090b4:	4313      	orrs	r3, r2
 80090b6:	b21a      	sxth	r2, r3
 80090b8:	4b4f      	ldr	r3, [pc, #316]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090ba:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 80090bc:	4b4e      	ldr	r3, [pc, #312]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090be:	7a5b      	ldrb	r3, [r3, #9]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	b21a      	sxth	r2, r3
 80090c4:	4b4c      	ldr	r3, [pc, #304]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090c6:	7a1b      	ldrb	r3, [r3, #8]
 80090c8:	b21b      	sxth	r3, r3
 80090ca:	4313      	orrs	r3, r2
 80090cc:	b21a      	sxth	r2, r3
 80090ce:	4b4a      	ldr	r3, [pc, #296]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090d0:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 80090d2:	4b49      	ldr	r3, [pc, #292]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80090d8:	4618      	mov	r0, r3
 80090da:	f7f7 fa33 	bl	8000544 <__aeabi_i2d>
 80090de:	a33e      	add	r3, pc, #248	; (adr r3, 80091d8 <IST8310_rxCpltCallback+0x170>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f7f7 fd28 	bl	8000b38 <__aeabi_dcmpgt>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d16e      	bne.n	80091cc <IST8310_rxCpltCallback+0x164>
 80090ee:	4b42      	ldr	r3, [pc, #264]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80090f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7f7 fa25 	bl	8000544 <__aeabi_i2d>
 80090fa:	a339      	add	r3, pc, #228	; (adr r3, 80091e0 <IST8310_rxCpltCallback+0x178>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 fcfc 	bl	8000afc <__aeabi_dcmplt>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d160      	bne.n	80091cc <IST8310_rxCpltCallback+0x164>
		    ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800910a:	4b3b      	ldr	r3, [pc, #236]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 800910c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009110:	4618      	mov	r0, r3
 8009112:	f7f7 fa17 	bl	8000544 <__aeabi_i2d>
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8009116:	a330      	add	r3, pc, #192	; (adr r3, 80091d8 <IST8310_rxCpltCallback+0x170>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f7f7 fd0c 	bl	8000b38 <__aeabi_dcmpgt>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d152      	bne.n	80091cc <IST8310_rxCpltCallback+0x164>
		    ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8009126:	4b34      	ldr	r3, [pc, #208]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 8009128:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800912c:	4618      	mov	r0, r3
 800912e:	f7f7 fa09 	bl	8000544 <__aeabi_i2d>
 8009132:	a32b      	add	r3, pc, #172	; (adr r3, 80091e0 <IST8310_rxCpltCallback+0x178>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f7f7 fce0 	bl	8000afc <__aeabi_dcmplt>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d144      	bne.n	80091cc <IST8310_rxCpltCallback+0x164>
		    ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z) {
 8009142:	4b2d      	ldr	r3, [pc, #180]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 8009144:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009148:	4618      	mov	r0, r3
 800914a:	f7f7 f9fb 	bl	8000544 <__aeabi_i2d>
		    ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 800914e:	a326      	add	r3, pc, #152	; (adr r3, 80091e8 <IST8310_rxCpltCallback+0x180>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 fcf0 	bl	8000b38 <__aeabi_dcmpgt>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d136      	bne.n	80091cc <IST8310_rxCpltCallback+0x164>
		    ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z) {
 800915e:	4b26      	ldr	r3, [pc, #152]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 8009160:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009164:	4618      	mov	r0, r3
 8009166:	f7f7 f9ed 	bl	8000544 <__aeabi_i2d>
 800916a:	a321      	add	r3, pc, #132	; (adr r3, 80091f0 <IST8310_rxCpltCallback+0x188>)
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	f7f7 fcc4 	bl	8000afc <__aeabi_dcmplt>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d128      	bne.n	80091cc <IST8310_rxCpltCallback+0x164>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 800917a:	4b1f      	ldr	r3, [pc, #124]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 800917c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009188:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 800918a:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 800918e:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 8009190:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800919c:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 800919e:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80091a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80091a8:	ee07 3a90 	vmov	s15, r3
 80091ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091b0:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80091b2:	edc3 7a06 	vstr	s15, [r3, #24]

	ist8310.hzCnt++;
 80091b6:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80091b8:	8bdb      	ldrh	r3, [r3, #30]
 80091ba:	3301      	adds	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <IST8310_rxCpltCallback+0x190>)
 80091c0:	83da      	strh	r2, [r3, #30]
 80091c2:	e004      	b.n	80091ce <IST8310_rxCpltCallback+0x166>
	if(hi2c->Instance != ist8310.hi2c->Instance) return;
 80091c4:	bf00      	nop
 80091c6:	e002      	b.n	80091ce <IST8310_rxCpltCallback+0x166>
	if(bm_i2cFlag != bm_i2cIST8310) return;
 80091c8:	bf00      	nop
 80091ca:	e000      	b.n	80091ce <IST8310_rxCpltCallback+0x166>
			return;
 80091cc:	bf00      	nop
}
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	f3af 8000 	nop.w
 80091d8:	55555556 	.word	0x55555556
 80091dc:	40b4d655 	.word	0x40b4d655
 80091e0:	55555556 	.word	0x55555556
 80091e4:	c0b4d655 	.word	0xc0b4d655
 80091e8:	aaaaaaab 	.word	0xaaaaaaab
 80091ec:	40c0472a 	.word	0x40c0472a
 80091f0:	aaaaaaab 	.word	0xaaaaaaab
 80091f4:	c0c0472a 	.word	0xc0c0472a
 80091f8:	20001a84 	.word	0x20001a84
 80091fc:	20001a28 	.word	0x20001a28

08009200 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af04      	add	r7, sp, #16
 8009206:	4603      	mov	r3, r0
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	71fb      	strb	r3, [r7, #7]
 800920c:	4613      	mov	r3, r2
 800920e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8009210:	4b09      	ldr	r3, [pc, #36]	; (8009238 <IST8310_write+0x38>)
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	b299      	uxth	r1, r3
 8009218:	79bb      	ldrb	r3, [r7, #6]
 800921a:	b29b      	uxth	r3, r3
 800921c:	2264      	movs	r2, #100	; 0x64
 800921e:	9202      	str	r2, [sp, #8]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	2301      	movs	r3, #1
 8009228:	460a      	mov	r2, r1
 800922a:	211c      	movs	r1, #28
 800922c:	f7fa f9b6 	bl	800359c <HAL_I2C_Mem_Write>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20001a84 	.word	0x20001a84

0800923c <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	460a      	mov	r2, r1
 8009246:	71fb      	strb	r3, [r7, #7]
 8009248:	4613      	mov	r3, r2
 800924a:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 800924c:	1db9      	adds	r1, r7, #6
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	2201      	movs	r2, #1
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff ffd4 	bl	8009200 <IST8310_write>
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 8009264:	2101      	movs	r1, #1
 8009266:	200b      	movs	r0, #11
 8009268:	f7ff ffe8 	bl	800923c <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 800926c:	2124      	movs	r1, #36	; 0x24
 800926e:	2041      	movs	r0, #65	; 0x41
 8009270:	f7ff ffe4 	bl	800923c <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 8009274:	21c0      	movs	r1, #192	; 0xc0
 8009276:	2042      	movs	r0, #66	; 0x42
 8009278:	f7ff ffe0 	bl	800923c <IST8310_write_reg>
}
 800927c:	bf00      	nop
 800927e:	bd80      	pop	{r7, pc}

08009280 <MPU9250_main>:
#include "cmsis_os.h"
#include "math.h"

#define MPU9250_I2C mpu9250.hi2c

void MPU9250_main(){
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5;
 8009286:	2305      	movs	r3, #5
 8009288:	607b      	str	r3, [r7, #4]

	MPU9250(&hi2c1);
 800928a:	4807      	ldr	r0, [pc, #28]	; (80092a8 <MPU9250_main+0x28>)
 800928c:	f000 f80e 	bl	80092ac <MPU9250>

	xLastWakeTime = xTaskGetTickCount();
 8009290:	f005 fe44 	bl	800ef1c <xTaskGetTickCount>
 8009294:	4603      	mov	r3, r0
 8009296:	603b      	str	r3, [r7, #0]
	while(1){
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8009298:	463b      	mov	r3, r7
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4618      	mov	r0, r3
 800929e:	f005 fc81 	bl	800eba4 <vTaskDelayUntil>
		MPU9250_updateDMA();
 80092a2:	f000 f8e9 	bl	8009478 <MPU9250_updateDMA>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80092a6:	e7f7      	b.n	8009298 <MPU9250_main+0x18>
 80092a8:	20001214 	.word	0x20001214

080092ac <MPU9250>:
//		printf("%d %d %d\r\n", (int)(mpu9250.mag[0]), (int)(mpu9250.mag[1]), (int)(mpu9250.mag[2]));
	}
}

void MPU9250(I2C_HandleTypeDef *hi2c){
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	//configuration
	MPU9250_I2C = hi2c;
 80092b4:	4a4d      	ldr	r2, [pc, #308]	; (80093ec <MPU9250+0x140>)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 80092ba:	4b4c      	ldr	r3, [pc, #304]	; (80093ec <MPU9250+0x140>)
 80092bc:	2202      	movs	r2, #2
 80092be:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 80092c0:	4b4a      	ldr	r3, [pc, #296]	; (80093ec <MPU9250+0x140>)
 80092c2:	2203      	movs	r2, #3
 80092c4:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 80092c6:	4b49      	ldr	r3, [pc, #292]	; (80093ec <MPU9250+0x140>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 80092cc:	4b47      	ldr	r3, [pc, #284]	; (80093ec <MPU9250+0x140>)
 80092ce:	2206      	movs	r2, #6
 80092d0:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 80092d2:	4b46      	ldr	r3, [pc, #280]	; (80093ec <MPU9250+0x140>)
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	609a      	str	r2, [r3, #8]
 80092da:	4b44      	ldr	r3, [pc, #272]	; (80093ec <MPU9250+0x140>)
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	60da      	str	r2, [r3, #12]
 80092e2:	4b42      	ldr	r3, [pc, #264]	; (80093ec <MPU9250+0x140>)
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 80092ea:	2206      	movs	r2, #6
 80092ec:	2100      	movs	r1, #0
 80092ee:	4840      	ldr	r0, [pc, #256]	; (80093f0 <MPU9250+0x144>)
 80092f0:	f008 fda1 	bl	8011e36 <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 80092f4:	2206      	movs	r2, #6
 80092f6:	2100      	movs	r1, #0
 80092f8:	483e      	ldr	r0, [pc, #248]	; (80093f4 <MPU9250+0x148>)
 80092fa:	f008 fd9c 	bl	8011e36 <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 80092fe:	2206      	movs	r2, #6
 8009300:	2100      	movs	r1, #0
 8009302:	483d      	ldr	r0, [pc, #244]	; (80093f8 <MPU9250+0x14c>)
 8009304:	f008 fd97 	bl	8011e36 <memset>
	mpu9250.tmpCount = 0;
 8009308:	4b38      	ldr	r3, [pc, #224]	; (80093ec <MPU9250+0x140>)
 800930a:	2200      	movs	r2, #0
 800930c:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 800930e:	220c      	movs	r2, #12
 8009310:	2100      	movs	r1, #0
 8009312:	483a      	ldr	r0, [pc, #232]	; (80093fc <MPU9250+0x150>)
 8009314:	f008 fd8f 	bl	8011e36 <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 8009318:	220c      	movs	r2, #12
 800931a:	2100      	movs	r1, #0
 800931c:	4838      	ldr	r0, [pc, #224]	; (8009400 <MPU9250+0x154>)
 800931e:	f008 fd8a 	bl	8011e36 <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 8009322:	220c      	movs	r2, #12
 8009324:	2100      	movs	r1, #0
 8009326:	4837      	ldr	r0, [pc, #220]	; (8009404 <MPU9250+0x158>)
 8009328:	f008 fd85 	bl	8011e36 <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 800932c:	220c      	movs	r2, #12
 800932e:	2100      	movs	r1, #0
 8009330:	4835      	ldr	r0, [pc, #212]	; (8009408 <MPU9250+0x15c>)
 8009332:	f008 fd80 	bl	8011e36 <memset>
	mpu9250.tmp = 0;
 8009336:	4b2d      	ldr	r3, [pc, #180]	; (80093ec <MPU9250+0x140>)
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.q, 0, sizeof(mpu9250.q)); mpu9250.q[0] = 1.0;		// set initial quaternion to (1, 0, 0, 0)
 800933e:	2210      	movs	r2, #16
 8009340:	2100      	movs	r1, #0
 8009342:	4832      	ldr	r0, [pc, #200]	; (800940c <MPU9250+0x160>)
 8009344:	f008 fd77 	bl	8011e36 <memset>
 8009348:	4b28      	ldr	r3, [pc, #160]	; (80093ec <MPU9250+0x140>)
 800934a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800934e:	669a      	str	r2, [r3, #104]	; 0x68
	mpu9250.roll = 0; mpu9250.pitch = 0; mpu9250.yaw = 0;
 8009350:	4b26      	ldr	r3, [pc, #152]	; (80093ec <MPU9250+0x140>)
 8009352:	f04f 0200 	mov.w	r2, #0
 8009356:	679a      	str	r2, [r3, #120]	; 0x78
 8009358:	4b24      	ldr	r3, [pc, #144]	; (80093ec <MPU9250+0x140>)
 800935a:	f04f 0200 	mov.w	r2, #0
 800935e:	67da      	str	r2, [r3, #124]	; 0x7c
 8009360:	4b22      	ldr	r3, [pc, #136]	; (80093ec <MPU9250+0x140>)
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 800936a:	220e      	movs	r2, #14
 800936c:	2100      	movs	r1, #0
 800936e:	4828      	ldr	r0, [pc, #160]	; (8009410 <MPU9250+0x164>)
 8009370:	f008 fd61 	bl	8011e36 <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 8009374:	2207      	movs	r2, #7
 8009376:	2100      	movs	r1, #0
 8009378:	4826      	ldr	r0, [pc, #152]	; (8009414 <MPU9250+0x168>)
 800937a:	f008 fd5c 	bl	8011e36 <memset>
	mpu9250.MPU9250_lastUpdate = 0, mpu9250.AK8963_lastUpdate = 0;
 800937e:	4b1b      	ldr	r3, [pc, #108]	; (80093ec <MPU9250+0x140>)
 8009380:	2200      	movs	r2, #0
 8009382:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8009386:	4b19      	ldr	r3, [pc, #100]	; (80093ec <MPU9250+0x140>)
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	mpu9250.MPU9250_hz = 0; mpu9250.AK8963_hz = 0; mpu9250.MPU9250_hzCnt = 0; mpu9250.AK8963_hzCnt = 0;
 800938e:	4b17      	ldr	r3, [pc, #92]	; (80093ec <MPU9250+0x140>)
 8009390:	2200      	movs	r2, #0
 8009392:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8009396:	4b15      	ldr	r3, [pc, #84]	; (80093ec <MPU9250+0x140>)
 8009398:	2200      	movs	r2, #0
 800939a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <MPU9250+0x140>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80093a6:	4b11      	ldr	r3, [pc, #68]	; (80093ec <MPU9250+0x140>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <MPU9250+0x140>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

	mpu9250.magBias[0] = 280.0f;
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <MPU9250+0x140>)
 80093b8:	4a17      	ldr	r2, [pc, #92]	; (8009418 <MPU9250+0x16c>)
 80093ba:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 80093bc:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <MPU9250+0x140>)
 80093be:	4a17      	ldr	r2, [pc, #92]	; (800941c <MPU9250+0x170>)
 80093c0:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 80093c2:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <MPU9250+0x140>)
 80093c4:	4a16      	ldr	r2, [pc, #88]	; (8009420 <MPU9250+0x174>)
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 80093c8:	f001 fcf2 	bl	800adb0 <MPU9250_getMres>
	MPU9250_getGres();
 80093cc:	f001 fd0c 	bl	800ade8 <MPU9250_getGres>
	MPU9250_getAres();
 80093d0:	f001 fd3c 	bl	800ae4c <MPU9250_getAres>

	MPU9250_resetMPU9250();
 80093d4:	f001 fd68 	bl	800aea8 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 80093d8:	f001 fe54 	bl	800b084 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 80093dc:	f001 fdde 	bl	800af9c <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 80093e0:	f001 fd6e 	bl	800aec0 <MPU9250_initAK8963>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20001aa4 	.word	0x20001aa4
 80093f0:	20001ab8 	.word	0x20001ab8
 80093f4:	20001abe 	.word	0x20001abe
 80093f8:	20001ac4 	.word	0x20001ac4
 80093fc:	20001acc 	.word	0x20001acc
 8009400:	20001ae4 	.word	0x20001ae4
 8009404:	20001af0 	.word	0x20001af0
 8009408:	20001afc 	.word	0x20001afc
 800940c:	20001b0c 	.word	0x20001b0c
 8009410:	20001b28 	.word	0x20001b28
 8009414:	20001b36 	.word	0x20001b36
 8009418:	438c0000 	.word	0x438c0000
 800941c:	438e8000 	.word	0x438e8000
 8009420:	43a50000 	.word	0x43a50000

08009424 <MPU9250_calHz>:

void MPU9250_calHz(){
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
	if(xTaskGetTickCount() - mpu9250.hz_lastUpdate > MPU9250_HZ_CHECK_TICK){
 8009428:	f005 fd78 	bl	800ef1c <xTaskGetTickCount>
 800942c:	4602      	mov	r2, r0
 800942e:	4b11      	ldr	r3, [pc, #68]	; (8009474 <MPU9250_calHz+0x50>)
 8009430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800943a:	d919      	bls.n	8009470 <MPU9250_calHz+0x4c>
		mpu9250.MPU9250_hz = mpu9250.MPU9250_hzCnt;
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <MPU9250_calHz+0x50>)
 800943e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8009442:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <MPU9250_calHz+0x50>)
 8009444:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		mpu9250.AK8963_hz = mpu9250.AK8963_hzCnt;
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <MPU9250_calHz+0x50>)
 800944a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 800944e:	4b09      	ldr	r3, [pc, #36]	; (8009474 <MPU9250_calHz+0x50>)
 8009450:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		mpu9250.MPU9250_hzCnt = 0;
 8009454:	4b07      	ldr	r3, [pc, #28]	; (8009474 <MPU9250_calHz+0x50>)
 8009456:	2200      	movs	r2, #0
 8009458:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		mpu9250.AK8963_hzCnt = 0;
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <MPU9250_calHz+0x50>)
 800945e:	2200      	movs	r2, #0
 8009460:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		mpu9250.hz_lastUpdate = xTaskGetTickCount();
 8009464:	f005 fd5a 	bl	800ef1c <xTaskGetTickCount>
 8009468:	4602      	mov	r2, r0
 800946a:	4b02      	ldr	r3, [pc, #8]	; (8009474 <MPU9250_calHz+0x50>)
 800946c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}
}
 8009470:	bf00      	nop
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20001aa4 	.word	0x20001aa4

08009478 <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af02      	add	r7, sp, #8
	MPU9250_calHz();
 800947e:	f7ff ffd1 	bl	8009424 <MPU9250_calHz>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8009482:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <MPU9250_updateDMA+0x3c>)
 8009484:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10f      	bne.n	80094ac <MPU9250_updateDMA+0x34>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 800948c:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <MPU9250_updateDMA+0x3c>)
 800948e:	2201      	movs	r2, #1
 8009490:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	HAL_I2C_Mem_Read_DMA(MPU9250_I2C, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <MPU9250_updateDMA+0x3c>)
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	230e      	movs	r3, #14
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <MPU9250_updateDMA+0x40>)
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	2301      	movs	r3, #1
 80094a2:	223b      	movs	r2, #59	; 0x3b
 80094a4:	21d0      	movs	r1, #208	; 0xd0
 80094a6:	f7fa fc57 	bl	8003d58 <HAL_I2C_Mem_Read_DMA>
 80094aa:	e000      	b.n	80094ae <MPU9250_updateDMA+0x36>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 80094ac:	bf00      	nop
}
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20001aa4 	.word	0x20001aa4
 80094b8:	20001b28 	.word	0x20001b28

080094bc <MPU9250_rxCpltCallback>:


void MPU9250_rxCpltCallback(I2C_HandleTypeDef *hi2c){
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance != MPU9250_I2C->Instance) return;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b33      	ldr	r3, [pc, #204]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d15d      	bne.n	800958e <MPU9250_rxCpltCallback+0xd2>

	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 80094d2:	4b31      	ldr	r3, [pc, #196]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 80094d4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d13f      	bne.n	800955c <MPU9250_rxCpltCallback+0xa0>
		if(MPU9250_calRawData() != MPU9250_Fail){
 80094dc:	f000 f860 	bl	80095a0 <MPU9250_calRawData>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d01b      	beq.n	800951e <MPU9250_rxCpltCallback+0x62>
			MPU9250_calCalibValue();
 80094e6:	f000 f8dd 	bl	80096a4 <MPU9250_calCalibValue>

			if( mpu9250.AK8963_hz != 0 ) MPU9250_madgwickAHRSupdate();
 80094ea:	4b2b      	ldr	r3, [pc, #172]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 80094ec:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <MPU9250_rxCpltCallback+0x3e>
 80094f4:	f000 fc58 	bl	8009da8 <MPU9250_madgwickAHRSupdate>
 80094f8:	e001      	b.n	80094fe <MPU9250_rxCpltCallback+0x42>
			else MPU9250_madgwickAHRSupdateIMU();
 80094fa:	f000 f945 	bl	8009788 <MPU9250_madgwickAHRSupdateIMU>
			MPU9250_calRPY();
 80094fe:	f001 fae7 	bl	800aad0 <MPU9250_calRPY>

			mpu9250.MPU9250_lastUpdate = xTaskGetTickCount();
 8009502:	f005 fd0b 	bl	800ef1c <xTaskGetTickCount>
 8009506:	4602      	mov	r2, r0
 8009508:	4b23      	ldr	r3, [pc, #140]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 800950a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			mpu9250.MPU9250_hzCnt++;
 800950e:	4b22      	ldr	r3, [pc, #136]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 8009510:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8009514:	3301      	adds	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	4b1f      	ldr	r3, [pc, #124]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 800951a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 800951e:	f005 fcfd 	bl	800ef1c <xTaskGetTickCount>
 8009522:	4602      	mov	r2, r0
 8009524:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 8009526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	2b0a      	cmp	r3, #10
 800952e:	d929      	bls.n	8009584 <MPU9250_rxCpltCallback+0xc8>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 8009530:	4b19      	ldr	r3, [pc, #100]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 8009532:	2202      	movs	r2, #2
 8009534:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
			HAL_I2C_Mem_Read_DMA(MPU9250_I2C, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 8009538:	4b17      	ldr	r3, [pc, #92]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	2307      	movs	r3, #7
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	4b16      	ldr	r3, [pc, #88]	; (800959c <MPU9250_rxCpltCallback+0xe0>)
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	2301      	movs	r3, #1
 8009546:	2203      	movs	r2, #3
 8009548:	2118      	movs	r1, #24
 800954a:	f7fa fc05 	bl	8003d58 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 800954e:	f005 fce5 	bl	800ef1c <xTaskGetTickCount>
 8009552:	4602      	mov	r2, r0
 8009554:	4b10      	ldr	r3, [pc, #64]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 8009556:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			return;
 800955a:	e019      	b.n	8009590 <MPU9250_rxCpltCallback+0xd4>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 800955c:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 800955e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009562:	2b02      	cmp	r3, #2
 8009564:	d10e      	bne.n	8009584 <MPU9250_rxCpltCallback+0xc8>
			if(AK8963_calRawData() == MPU9250_Success){
 8009566:	f001 fb91 	bl	800ac8c <AK8963_calRawData>
 800956a:	4603      	mov	r3, r0
 800956c:	2b01      	cmp	r3, #1
 800956e:	d109      	bne.n	8009584 <MPU9250_rxCpltCallback+0xc8>
				AK8963_calCalibValue();
 8009570:	f001 fbca 	bl	800ad08 <AK8963_calCalibValue>
			    mpu9250.AK8963_hzCnt++;
 8009574:	4b08      	ldr	r3, [pc, #32]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 8009576:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800957a:	3301      	adds	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 8009580:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
			}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <MPU9250_rxCpltCallback+0xdc>)
 8009586:	2200      	movs	r2, #0
 8009588:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800958c:	e000      	b.n	8009590 <MPU9250_rxCpltCallback+0xd4>
	if(hi2c->Instance != MPU9250_I2C->Instance) return;
 800958e:	bf00      	nop
}
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20001aa4 	.word	0x20001aa4
 800959c:	20001b36 	.word	0x20001b36

080095a0 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 80095a4:	4b3e      	ldr	r3, [pc, #248]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	b21a      	sxth	r2, r3
 80095ae:	4b3c      	ldr	r3, [pc, #240]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095b0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80095b4:	b21b      	sxth	r3, r3
 80095b6:	4313      	orrs	r3, r2
 80095b8:	b21b      	sxth	r3, r3
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	425b      	negs	r3, r3
 80095be:	b29b      	uxth	r3, r3
 80095c0:	b21a      	sxth	r2, r3
 80095c2:	4b37      	ldr	r3, [pc, #220]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095c4:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 80095c6:	4b36      	ldr	r3, [pc, #216]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095c8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	b21a      	sxth	r2, r3
 80095d0:	4b33      	ldr	r3, [pc, #204]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095d2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80095d6:	b21b      	sxth	r3, r3
 80095d8:	4313      	orrs	r3, r2
 80095da:	b21b      	sxth	r3, r3
 80095dc:	b29b      	uxth	r3, r3
 80095de:	425b      	negs	r3, r3
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	b21a      	sxth	r2, r3
 80095e4:	4b2e      	ldr	r3, [pc, #184]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095e6:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 80095e8:	4b2d      	ldr	r3, [pc, #180]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095ea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	b21a      	sxth	r2, r3
 80095f2:	4b2b      	ldr	r3, [pc, #172]	; (80096a0 <MPU9250_calRawData+0x100>)
 80095f4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80095f8:	b21b      	sxth	r3, r3
 80095fa:	4313      	orrs	r3, r2
 80095fc:	b21b      	sxth	r3, r3
 80095fe:	b29b      	uxth	r3, r3
 8009600:	425b      	negs	r3, r3
 8009602:	b29b      	uxth	r3, r3
 8009604:	b21a      	sxth	r2, r3
 8009606:	4b26      	ldr	r3, [pc, #152]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009608:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 800960a:	4b25      	ldr	r3, [pc, #148]	; (80096a0 <MPU9250_calRawData+0x100>)
 800960c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	b21a      	sxth	r2, r3
 8009614:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009616:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800961a:	b21b      	sxth	r3, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	b21a      	sxth	r2, r3
 8009620:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009622:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 8009624:	4b1e      	ldr	r3, [pc, #120]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009626:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800962a:	021b      	lsls	r3, r3, #8
 800962c:	b21a      	sxth	r2, r3
 800962e:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009630:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009634:	b21b      	sxth	r3, r3
 8009636:	4313      	orrs	r3, r2
 8009638:	b21a      	sxth	r2, r3
 800963a:	4b19      	ldr	r3, [pc, #100]	; (80096a0 <MPU9250_calRawData+0x100>)
 800963c:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 800963e:	4b18      	ldr	r3, [pc, #96]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009640:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8009644:	021b      	lsls	r3, r3, #8
 8009646:	b21a      	sxth	r2, r3
 8009648:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <MPU9250_calRawData+0x100>)
 800964a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800964e:	b21b      	sxth	r3, r3
 8009650:	4313      	orrs	r3, r2
 8009652:	b21a      	sxth	r2, r3
 8009654:	4b12      	ldr	r3, [pc, #72]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009656:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <MPU9250_calRawData+0x100>)
 800965a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	b21a      	sxth	r2, r3
 8009662:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009664:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009668:	b21b      	sxth	r3, r3
 800966a:	4313      	orrs	r3, r2
 800966c:	b21a      	sxth	r2, r3
 800966e:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009670:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 8009672:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009674:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10b      	bne.n	8009694 <MPU9250_calRawData+0xf4>
 800967c:	4b08      	ldr	r3, [pc, #32]	; (80096a0 <MPU9250_calRawData+0x100>)
 800967e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d106      	bne.n	8009694 <MPU9250_calRawData+0xf4>
 8009686:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <MPU9250_calRawData+0x100>)
 8009688:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <MPU9250_calRawData+0xf4>
 8009690:	2300      	movs	r3, #0
 8009692:	e000      	b.n	8009696 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 8009694:	2301      	movs	r3, #1
}
 8009696:	4618      	mov	r0, r3
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	20001aa4 	.word	0x20001aa4

080096a4 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 80096a8:	4b35      	ldr	r3, [pc, #212]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096b6:	4b32      	ldr	r3, [pc, #200]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80096bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c0:	4b2f      	ldr	r3, [pc, #188]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096c2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 80096c6:	4b2e      	ldr	r3, [pc, #184]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096d4:	4b2a      	ldr	r3, [pc, #168]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80096da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096de:	4b28      	ldr	r3, [pc, #160]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096e0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 80096e4:	4b26      	ldr	r3, [pc, #152]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096e6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096f2:	4b23      	ldr	r3, [pc, #140]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80096f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fc:	4b20      	ldr	r3, [pc, #128]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 80096fe:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 8009702:	4b1f      	ldr	r3, [pc, #124]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 8009704:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009708:	ee07 3a90 	vmov	s15, r3
 800970c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009710:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 8009712:	edd3 7a03 	vldr	s15, [r3, #12]
 8009716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009784 <MPU9250_calCalibValue+0xe0>
 800971e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009722:	4b17      	ldr	r3, [pc, #92]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 8009724:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 8009728:	4b15      	ldr	r3, [pc, #84]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 800972a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009736:	4b12      	ldr	r3, [pc, #72]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 8009738:	edd3 7a03 	vldr	s15, [r3, #12]
 800973c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009740:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009784 <MPU9250_calCalibValue+0xe0>
 8009744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 800974a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 8009750:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800975c:	4b08      	ldr	r3, [pc, #32]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 800975e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009766:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8009784 <MPU9250_calCalibValue+0xe0>
 800976a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800976e:	4b04      	ldr	r3, [pc, #16]	; (8009780 <MPU9250_calCalibValue+0xdc>)
 8009770:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8009774:	bf00      	nop
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	20001aa4 	.word	0x20001aa4
 8009784:	3c8efa35 	.word	0x3c8efa35

08009788 <MPU9250_madgwickAHRSupdateIMU>:

void MPU9250_madgwickAHRSupdateIMU(){
 8009788:	b590      	push	{r4, r7, lr}
 800978a:	b0a3      	sub	sp, #140	; 0x8c
 800978c:	af00      	add	r7, sp, #0
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	float q0 = mpu9250.q[0];
 800978e:	4bee      	ldr	r3, [pc, #952]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 8009790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float q1 = mpu9250.q[1];
 8009796:	4bec      	ldr	r3, [pc, #944]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 8009798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	float q2 = mpu9250.q[2];
 800979e:	4bea      	ldr	r3, [pc, #936]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	67fb      	str	r3, [r7, #124]	; 0x7c
	float q3 = mpu9250.q[3];
 80097a4:	4be8      	ldr	r3, [pc, #928]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a8:	67bb      	str	r3, [r7, #120]	; 0x78

	float ax = mpu9250.accel[0];
 80097aa:	4be7      	ldr	r3, [pc, #924]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	677b      	str	r3, [r7, #116]	; 0x74
	float ay = mpu9250.accel[1];
 80097b0:	4be5      	ldr	r3, [pc, #916]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b4:	673b      	str	r3, [r7, #112]	; 0x70
	float az = mpu9250.accel[2];
 80097b6:	4be4      	ldr	r3, [pc, #912]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ba:	66fb      	str	r3, [r7, #108]	; 0x6c

	float gx = mpu9250.gyro[0];
 80097bc:	4be2      	ldr	r3, [pc, #904]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c0:	66bb      	str	r3, [r7, #104]	; 0x68
	float gy = mpu9250.gyro[1];
 80097c2:	4be1      	ldr	r3, [pc, #900]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c6:	667b      	str	r3, [r7, #100]	; 0x64
	float gz = mpu9250.gyro[2];
 80097c8:	4bdf      	ldr	r3, [pc, #892]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097cc:	663b      	str	r3, [r7, #96]	; 0x60

	float dt = (xTaskGetTickCount() - mpu9250.MPU9250_lastUpdate)/1000.0;
 80097ce:	f005 fba5 	bl	800ef1c <xTaskGetTickCount>
 80097d2:	4602      	mov	r2, r0
 80097d4:	4bdc      	ldr	r3, [pc, #880]	; (8009b48 <MPU9250_madgwickAHRSupdateIMU+0x3c0>)
 80097d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	4618      	mov	r0, r3
 80097de:	f7f6 fea1 	bl	8000524 <__aeabi_ui2d>
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	4bd9      	ldr	r3, [pc, #868]	; (8009b4c <MPU9250_madgwickAHRSupdateIMU+0x3c4>)
 80097e8:	f7f7 f840 	bl	800086c <__aeabi_ddiv>
 80097ec:	4603      	mov	r3, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	4618      	mov	r0, r3
 80097f2:	4621      	mov	r1, r4
 80097f4:	f7f7 fa08 	bl	8000c08 <__aeabi_d2f>
 80097f8:	4603      	mov	r3, r0
 80097fa:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80097fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009800:	eeb1 7a67 	vneg.f32	s14, s15
 8009804:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800980c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8009810:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800981c:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8009820:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800982c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009834:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8009838:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800983c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009844:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8009848:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800984c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009854:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8009858:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800985c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009864:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800986c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8009870:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8009874:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8009878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800987c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8009880:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009888:	ee37 7a67 	vsub.f32	s14, s14, s15
 800988c:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8009890:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8009894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800989c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80098a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80098a8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80098ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80098b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098b4:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80098b8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80098bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098c4:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80098c8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80098cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80098d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098dc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
//	if((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)) return 0;

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80098e0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80098e4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80098e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098ec:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80098f0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80098f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098fc:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009900:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800990c:	eeb0 0a67 	vmov.f32	s0, s15
 8009910:	f001 fe8e 	bl	800b630 <invSqrt>
 8009914:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		ax *= recipNorm;
 8009918:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800991c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009924:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		ay *= recipNorm;
 8009928:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800992c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009934:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		az *= recipNorm;
 8009938:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800993c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009944:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8009948:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800994c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009950:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_2q1 = 2.0f * q1;
 8009954:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009958:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800995c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_2q2 = 2.0f * q2;
 8009960:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009964:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009968:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_2q3 = 2.0f * q3;
 800996c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009974:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		_4q0 = 4.0f * q0;
 8009978:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800997c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009984:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		_4q1 = 4.0f * q1;
 8009988:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800998c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009994:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		_4q2 = 4.0f * q2;
 8009998:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800999c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80099a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		_8q1 = 8.0f * q1;
 80099a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80099ac:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80099b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		_8q2 = 8.0f * q2;
 80099b8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80099bc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80099c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		q0q0 = q0 * q0;
 80099c8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80099cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80099d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d4:	edc7 7a08 	vstr	s15, [r7, #32]
		q1q1 = q1 * q1;
 80099d8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80099dc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80099e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e4:	edc7 7a07 	vstr	s15, [r7, #28]
		q2q2 = q2 * q2;
 80099e8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80099ec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80099f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f4:	edc7 7a06 	vstr	s15, [r7, #24]
		q3q3 = q3 * q3;
 80099f8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80099fc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a04:	edc7 7a05 	vstr	s15, [r7, #20]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8009a08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009a0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a14:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8009a18:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a24:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009a28:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a34:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009a38:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a44:	edc7 7a04 	vstr	s15, [r7, #16]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8009a48:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a54:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009a58:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a64:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a68:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009a6c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009a70:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a7c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8009a80:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a8c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a94:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009a98:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009aa4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009aa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ab4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009ab8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ac4:	edc7 7a03 	vstr	s15, [r7, #12]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8009ac8:	edd7 7a08 	vldr	s15, [r7, #32]
 8009acc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009ad0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009ad4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009adc:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8009ae0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009aec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8009af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009afc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009b00:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b14:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b24:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009b28:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b34:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009b38:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b44:	e004      	b.n	8009b50 <MPU9250_madgwickAHRSupdateIMU+0x3c8>
 8009b46:	bf00      	nop
 8009b48:	20001aa4 	.word	0x20001aa4
 8009b4c:	408f4000 	.word	0x408f4000
 8009b50:	edc7 7a02 	vstr	s15, [r7, #8]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8009b54:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b58:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009b5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b60:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b68:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009b6c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b78:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b7c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009b80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009b84:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b90:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8009b94:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ba0:	edc7 7a01 	vstr	s15, [r7, #4]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8009ba4:	ed97 7a04 	vldr	s14, [r7, #16]
 8009ba8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bb0:	edd7 6a03 	vldr	s13, [r7, #12]
 8009bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bc0:	edd7 6a02 	vldr	s13, [r7, #8]
 8009bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bd0:	edd7 6a01 	vldr	s13, [r7, #4]
 8009bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8009bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009be0:	eeb0 0a67 	vmov.f32	s0, s15
 8009be4:	f001 fd24 	bl	800b630 <invSqrt>
 8009be8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		s0 *= recipNorm;
 8009bec:	ed97 7a04 	vldr	s14, [r7, #16]
 8009bf0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf8:	edc7 7a04 	vstr	s15, [r7, #16]
		s1 *= recipNorm;
 8009bfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8009c00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c08:	edc7 7a03 	vstr	s15, [r7, #12]
		s2 *= recipNorm;
 8009c0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009c10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c18:	edc7 7a02 	vstr	s15, [r7, #8]
		s3 *= recipNorm;
 8009c1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c20:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c28:	edc7 7a01 	vstr	s15, [r7, #4]

		// Apply feedback step
		qDot1 -= beta * s0;
 8009c2c:	4b5c      	ldr	r3, [pc, #368]	; (8009da0 <MPU9250_madgwickAHRSupdateIMU+0x618>)
 8009c2e:	ed93 7a00 	vldr	s14, [r3]
 8009c32:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		qDot2 -= beta * s1;
 8009c46:	4b56      	ldr	r3, [pc, #344]	; (8009da0 <MPU9250_madgwickAHRSupdateIMU+0x618>)
 8009c48:	ed93 7a00 	vldr	s14, [r3]
 8009c4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c54:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c5c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		qDot3 -= beta * s2;
 8009c60:	4b4f      	ldr	r3, [pc, #316]	; (8009da0 <MPU9250_madgwickAHRSupdateIMU+0x618>)
 8009c62:	ed93 7a00 	vldr	s14, [r3]
 8009c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c76:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		qDot4 -= beta * s3;
 8009c7a:	4b49      	ldr	r3, [pc, #292]	; (8009da0 <MPU9250_madgwickAHRSupdateIMU+0x618>)
 8009c7c:	ed93 7a00 	vldr	s14, [r3]
 8009c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c90:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
//	q0 += qDot1 * (1.0f / sampleFreq);
//	q1 += qDot2 * (1.0f / sampleFreq);
//	q2 += qDot3 * (1.0f / sampleFreq);
//	q3 += qDot4 * (1.0f / sampleFreq);

	q0 += qDot1 * (dt);
 8009c94:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009c98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8009ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ca8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	q1 += qDot2 * (dt);
 8009cac:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009cb0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cc0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	q2 += qDot3 * (dt);
 8009cc4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009cc8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8009cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cd8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q3 += qDot4 * (dt);
 8009cdc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ce0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cf0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78


	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8009cf4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8009cf8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d00:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8009d04:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d10:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8009d14:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d20:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8009d24:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d30:	eeb0 0a67 	vmov.f32	s0, s15
 8009d34:	f001 fc7c 	bl	800b630 <invSqrt>
 8009d38:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 *= recipNorm;
 8009d3c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8009d40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d48:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	q1 *= recipNorm;
 8009d4c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009d50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d58:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	q2 *= recipNorm;
 8009d5c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8009d60:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d68:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q3 *= recipNorm;
 8009d6c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8009d70:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d78:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	mpu9250.q[0] = q0;
 8009d7c:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <MPU9250_madgwickAHRSupdateIMU+0x61c>)
 8009d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d82:	6693      	str	r3, [r2, #104]	; 0x68
	mpu9250.q[1] = q1;
 8009d84:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <MPU9250_madgwickAHRSupdateIMU+0x61c>)
 8009d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d8a:	66d3      	str	r3, [r2, #108]	; 0x6c
	mpu9250.q[2] = q2;
 8009d8c:	4a05      	ldr	r2, [pc, #20]	; (8009da4 <MPU9250_madgwickAHRSupdateIMU+0x61c>)
 8009d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d90:	6713      	str	r3, [r2, #112]	; 0x70
	mpu9250.q[3] = q3;
 8009d92:	4a04      	ldr	r2, [pc, #16]	; (8009da4 <MPU9250_madgwickAHRSupdateIMU+0x61c>)
 8009d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d96:	6753      	str	r3, [r2, #116]	; 0x74
}
 8009d98:	bf00      	nop
 8009d9a:	378c      	adds	r7, #140	; 0x8c
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd90      	pop	{r4, r7, pc}
 8009da0:	2000000c 	.word	0x2000000c
 8009da4:	20001aa4 	.word	0x20001aa4

08009da8 <MPU9250_madgwickAHRSupdate>:

void MPU9250_madgwickAHRSupdate()
{
 8009da8:	b590      	push	{r4, r7, lr}
 8009daa:	b0b3      	sub	sp, #204	; 0xcc
 8009dac:	af00      	add	r7, sp, #0
	static float beta = 0.9; // ???
    float q1 = mpu9250.q[0], q2 = mpu9250.q[1], q3 = mpu9250.q[2], q4 = mpu9250.q[3];   // short name local variable for readability
 8009dae:	4bed      	ldr	r3, [pc, #948]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009db2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009db6:	4beb      	ldr	r3, [pc, #940]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dbe:	4be9      	ldr	r3, [pc, #932]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dc6:	4be7      	ldr	r3, [pc, #924]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8009dce:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009dd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dd6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    float _2q2 = 2.0f * q2;
 8009dda:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8009dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009de2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    float _2q3 = 2.0f * q3;
 8009de6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8009dea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dee:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float _2q4 = 2.0f * q4;
 8009df2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009df6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dfa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    float _2q1q3 = 2.0f * q1 * q3;
 8009dfe:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009e02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e06:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8009e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float _2q3q4 = 2.0f * q3 * q4;
 8009e12:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8009e16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e1a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e22:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    float q1q1 = q1 * q1;
 8009e26:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8009e2a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e32:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float q1q2 = q1 * q2;
 8009e36:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8009e3a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    float q1q3 = q1 * q3;
 8009e46:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8009e4a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8009e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e52:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q1q4 = q1 * q4;
 8009e56:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8009e5a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e62:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q2q2 = q2 * q2;
 8009e66:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8009e6a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8009e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e72:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q2q3 = q2 * q3;
 8009e76:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8009e7a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8009e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e82:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q2q4 = q2 * q4;
 8009e86:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8009e8a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e92:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q3q3 = q3 * q3;
 8009e96:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8009e9a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q3q4 = q3 * q4;
 8009ea6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8009eaa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q4q4 = q4 * q4;
 8009eb6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009eba:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    //input value
    float ax = mpu9250.accel[0];
 8009ec6:	4ba7      	ldr	r3, [pc, #668]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	677b      	str	r3, [r7, #116]	; 0x74
    float ay = mpu9250.accel[1];
 8009ecc:	4ba5      	ldr	r3, [pc, #660]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed0:	673b      	str	r3, [r7, #112]	; 0x70
    float az = mpu9250.accel[2];
 8009ed2:	4ba4      	ldr	r3, [pc, #656]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
    float gx = mpu9250.gyro[0];
 8009ed8:	4ba2      	ldr	r3, [pc, #648]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009edc:	66bb      	str	r3, [r7, #104]	; 0x68
    float gy = mpu9250.gyro[1];
 8009ede:	4ba1      	ldr	r3, [pc, #644]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee2:	667b      	str	r3, [r7, #100]	; 0x64
    float gz = mpu9250.gyro[2];
 8009ee4:	4b9f      	ldr	r3, [pc, #636]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee8:	663b      	str	r3, [r7, #96]	; 0x60
    float mx = mpu9250.mag[0];
 8009eea:	4b9e      	ldr	r3, [pc, #632]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eee:	65fb      	str	r3, [r7, #92]	; 0x5c
    float my = mpu9250.mag[1];
 8009ef0:	4b9c      	ldr	r3, [pc, #624]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef4:	65bb      	str	r3, [r7, #88]	; 0x58
    float mz = mpu9250.mag[2];
 8009ef6:	4b9b      	ldr	r3, [pc, #620]	; (800a164 <MPU9250_madgwickAHRSupdate+0x3bc>)
 8009ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009efa:	657b      	str	r3, [r7, #84]	; 0x54

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8009efc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009f00:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f08:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8009f0c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f18:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8009f1c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8009f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f28:	eeb0 0a67 	vmov.f32	s0, s15
 8009f2c:	f001 fb80 	bl	800b630 <invSqrt>
 8009f30:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
//    if (norm == 0.0f) return; // handle NaN
    ax *= recipNorm;
 8009f34:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8009f38:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f40:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    ay *= recipNorm;
 8009f44:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009f48:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f50:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    az *= recipNorm;
 8009f54:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8009f58:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f60:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

    // Normalise magnetometer measurement
    recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8009f64:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009f68:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f70:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8009f74:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f80:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8009f84:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f90:	eeb0 0a67 	vmov.f32	s0, s15
 8009f94:	f001 fb4c 	bl	800b630 <invSqrt>
 8009f98:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
//    if (norm == 0.0f){	// handle NaN
//    	MPU9250_madgwickAHRSupdateIMU(); // not use magnetometer
//    	return;
//    }
    mx *= recipNorm;
 8009f9c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009fa0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    my *= recipNorm;
 8009fac:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009fb0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    mz *= recipNorm;
 8009fbc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009fc0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8009fcc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009fd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009fd4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fdc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    _2q1my = 2.0f * q1 * my;
 8009fe0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009fe4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009fe8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    _2q1mz = 2.0f * q1 * mz;
 8009ff4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009ff8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ffc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a004:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    _2q2mx = 2.0f * q2 * mx;
 800a008:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a00c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a010:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a018:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800a01c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a020:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a024:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a028:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a02c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a034:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a038:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a03c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a044:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a048:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a04c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a054:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a058:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800a05c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a060:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a064:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a06c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a070:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800a074:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a078:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a07c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a084:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a088:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a08c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a094:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a098:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a09c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a0a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 800a0ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a0b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a0b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0b8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a0bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a0c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0c8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a0cc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a0d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a0d8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a0dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a0e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0e8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a0ec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a0f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a0f8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a0fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a104:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a108:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800a10c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a110:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a114:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a11c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a120:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a124:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a12c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a130:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    _2bx = sqrt(hx * hx + hy * hy);
 800a134:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a138:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a13c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a140:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a144:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a14c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a150:	ee17 0a90 	vmov	r0, s15
 800a154:	f7f6 fa08 	bl	8000568 <__aeabi_f2d>
 800a158:	4603      	mov	r3, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	ec44 3b10 	vmov	d0, r3, r4
 800a160:	e002      	b.n	800a168 <MPU9250_madgwickAHRSupdate+0x3c0>
 800a162:	bf00      	nop
 800a164:	20001aa4 	.word	0x20001aa4
 800a168:	f006 fa50 	bl	801060c <sqrt>
 800a16c:	ec54 3b10 	vmov	r3, r4, d0
 800a170:	4618      	mov	r0, r3
 800a172:	4621      	mov	r1, r4
 800a174:	f7f6 fd48 	bl	8000c08 <__aeabi_d2f>
 800a178:	4603      	mov	r3, r0
 800a17a:	637b      	str	r3, [r7, #52]	; 0x34
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800a17c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a180:	eeb1 7a67 	vneg.f32	s14, s15
 800a184:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a18c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a190:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a19c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a1a0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a1a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1ac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a1b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a1b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1bc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a1c0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a1c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1cc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800a1d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a1d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a1d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a1dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1e4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a1e8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a1ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1f4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a1f8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a1fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a200:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a204:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    _4bx = 2.0f * _2bx;
 800a208:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a20c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a210:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    _4bz = 2.0f * _2bz;
 800a214:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a218:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a21c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800a220:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a224:	eeb1 7a67 	vneg.f32	s14, s15
 800a228:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a22c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a230:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a234:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a238:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a23c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a240:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a244:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a248:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a24c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a250:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a254:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a258:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a25c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a264:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a268:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a26c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a270:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a274:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a278:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a27c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a280:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a284:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a288:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a28c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a290:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800a294:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a298:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a29c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a2a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a2a8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a2ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a2b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a2bc:	eef1 6a67 	vneg.f32	s13, s15
 800a2c0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a2c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a2c8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800a2cc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a2d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a2d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a2d8:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800a2dc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a2e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a2e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a2e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a2ec:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800a2f0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a2f4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a2f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a300:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a304:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a308:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a30c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a310:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a314:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a318:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a31c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a320:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800a324:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a328:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a32c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a330:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a334:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a338:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a33c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a340:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a344:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a348:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a34c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a350:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a354:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a358:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a35c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a360:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a364:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800a368:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a36c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a370:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a374:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a378:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a37c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a380:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a384:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a388:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a38c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a390:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a394:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a398:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a39c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a3a0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a3a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3ac:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a3b0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a3b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a3b8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a3bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a3c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a3c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a3cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a3d4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a3d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a3dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3e4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a3e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a3ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a3f0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a3f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a3f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a3fc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a400:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a404:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a408:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a40c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800a410:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a414:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a418:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a41c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a420:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a424:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a428:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a42c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a430:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a434:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a438:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a43c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a440:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800a444:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800a448:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a44c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a450:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800a454:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a458:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a45c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a460:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a464:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800a468:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a46c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a470:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a474:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a478:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a47c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a480:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a48c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a490:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a494:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a498:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a49c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a4a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a4a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a4a8:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800a4ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a4b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a4b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a4b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a4bc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a4c0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a4c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a4c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a4cc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a4d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a4d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a4dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a4e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a4e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4ec:	edc7 7a08 	vstr	s15, [r7, #32]
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800a4f0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a4f4:	eeb1 7a67 	vneg.f32	s14, s15
 800a4f8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a4fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a500:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a504:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a508:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a50c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a510:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a514:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a518:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a51c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a520:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a524:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a528:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a52c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a534:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a538:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a53c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a540:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a544:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a54c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a550:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a554:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a55c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a560:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a564:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a56c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a570:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a574:	eef1 6a67 	vneg.f32	s13, s15
 800a578:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a57c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a580:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800a584:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800a588:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a58c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a590:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a594:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a598:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a59c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a5a0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a5a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a5a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a5ac:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800a5b0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a5b4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a5b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a5bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a5c0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a5c4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a5c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a5cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5d4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a5d8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a5dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a5e0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800a5e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a5e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a5ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5f0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800a5f4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a5f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a5fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a600:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a604:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800a608:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a60c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a610:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a614:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a618:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a61c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a620:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a62c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a630:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800a634:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a638:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a63c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a640:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a644:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a648:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800a64c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a650:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a654:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a658:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a65c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a660:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a664:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a668:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a66c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a670:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a674:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a678:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a67c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a680:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a68c:	edc7 7a07 	vstr	s15, [r7, #28]
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800a690:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a694:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a698:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a69c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6a0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a6a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6a8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a6ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6b0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a6b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a6b8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a6bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a6c0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a6c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a6c8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a6cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a6d8:	eef1 6a67 	vneg.f32	s13, s15
 800a6dc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a6e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a6e4:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800a6e8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a6ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a6f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a6f4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a6f8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a6fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a700:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a704:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a708:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a70c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a710:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800a714:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a718:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a71c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a720:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a724:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a728:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a72c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a734:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a738:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a73c:	eef1 6a67 	vneg.f32	s13, s15
 800a740:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800a744:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a748:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800a74c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a750:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a754:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a758:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800a75c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a760:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a764:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a768:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a76c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800a770:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a774:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a778:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a77c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a780:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a784:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a788:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a78c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a790:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a794:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a798:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a79c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a7a0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800a7a4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a7a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a7ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a7b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a7b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a7b8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a7bc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a7c0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a7c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a7c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a7cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a7d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a7d4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a7d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a7dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7e4:	edc7 7a06 	vstr	s15, [r7, #24]
    recipNorm = invSqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 800a7e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a7ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a7f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7f4:	edd7 6a08 	vldr	s13, [r7, #32]
 800a7f8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a7fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a800:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a804:	edd7 6a07 	vldr	s13, [r7, #28]
 800a808:	edd7 7a07 	vldr	s15, [r7, #28]
 800a80c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a810:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a814:	edd7 6a06 	vldr	s13, [r7, #24]
 800a818:	edd7 7a06 	vldr	s15, [r7, #24]
 800a81c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a820:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a824:	eeb0 0a67 	vmov.f32	s0, s15
 800a828:	f000 ff02 	bl	800b630 <invSqrt>
 800a82c:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    s1 *= recipNorm;
 800a830:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a834:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    s2 *= recipNorm;
 800a840:	ed97 7a08 	vldr	s14, [r7, #32]
 800a844:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84c:	edc7 7a08 	vstr	s15, [r7, #32]
    s3 *= recipNorm;
 800a850:	ed97 7a07 	vldr	s14, [r7, #28]
 800a854:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85c:	edc7 7a07 	vstr	s15, [r7, #28]
    s4 *= recipNorm;
 800a860:	ed97 7a06 	vldr	s14, [r7, #24]
 800a864:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86c:	edc7 7a06 	vstr	s15, [r7, #24]

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800a870:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800a874:	eeb1 7a67 	vneg.f32	s14, s15
 800a878:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a880:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800a884:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a88c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a890:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800a894:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a89c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a8a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a8a8:	4b86      	ldr	r3, [pc, #536]	; (800aac4 <MPU9250_madgwickAHRSupdate+0xd1c>)
 800a8aa:	edd3 6a00 	vldr	s13, [r3]
 800a8ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a8b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ba:	edc7 7a05 	vstr	s15, [r7, #20]
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 800a8be:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800a8c2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a8c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ca:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800a8ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a8d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8da:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800a8de:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a8e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a8ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a8f2:	4b74      	ldr	r3, [pc, #464]	; (800aac4 <MPU9250_madgwickAHRSupdate+0xd1c>)
 800a8f4:	edd3 6a00 	vldr	s13, [r3]
 800a8f8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a900:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a904:	edc7 7a04 	vstr	s15, [r7, #16]
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 800a908:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800a90c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a910:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a914:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800a918:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a91c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a920:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a924:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800a928:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a92c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a930:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a934:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a938:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a93c:	4b61      	ldr	r3, [pc, #388]	; (800aac4 <MPU9250_madgwickAHRSupdate+0xd1c>)
 800a93e:	edd3 6a00 	vldr	s13, [r3]
 800a942:	edd7 7a07 	vldr	s15, [r7, #28]
 800a946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a94a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a94e:	edc7 7a03 	vstr	s15, [r7, #12]
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800a952:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800a956:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a95a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a95e:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800a962:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a96a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a96e:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800a972:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a97a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a97e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a982:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a986:	4b4f      	ldr	r3, [pc, #316]	; (800aac4 <MPU9250_madgwickAHRSupdate+0xd1c>)
 800a988:	edd3 6a00 	vldr	s13, [r3]
 800a98c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a994:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a998:	edc7 7a02 	vstr	s15, [r7, #8]

    float deltat = (xTaskGetTickCount() - mpu9250.MPU9250_lastUpdate)/1000.0;
 800a99c:	f004 fabe 	bl	800ef1c <xTaskGetTickCount>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	4b49      	ldr	r3, [pc, #292]	; (800aac8 <MPU9250_madgwickAHRSupdate+0xd20>)
 800a9a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f5 fdba 	bl	8000524 <__aeabi_ui2d>
 800a9b0:	f04f 0200 	mov.w	r2, #0
 800a9b4:	4b45      	ldr	r3, [pc, #276]	; (800aacc <MPU9250_madgwickAHRSupdate+0xd24>)
 800a9b6:	f7f5 ff59 	bl	800086c <__aeabi_ddiv>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	460c      	mov	r4, r1
 800a9be:	4618      	mov	r0, r3
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	f7f6 f921 	bl	8000c08 <__aeabi_d2f>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	607b      	str	r3, [r7, #4]
    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 800a9ca:	ed97 7a05 	vldr	s14, [r7, #20]
 800a9ce:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d6:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800a9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9de:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    q2 += qDot2 * deltat;
 800a9e2:	ed97 7a04 	vldr	s14, [r7, #16]
 800a9e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ee:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800a9f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9f6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    q3 += qDot3 * deltat;
 800a9fa:	ed97 7a03 	vldr	s14, [r7, #12]
 800a9fe:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa06:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800aa0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa0e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    q4 += qDot4 * deltat;
 800aa12:	ed97 7a02 	vldr	s14, [r7, #8]
 800aa16:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aa22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa26:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    recipNorm = invSqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800aa2a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800aa2e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800aa32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa36:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800aa3a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800aa3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa46:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800aa4a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800aa4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa52:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa56:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800aa5a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aa5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa66:	eeb0 0a67 	vmov.f32	s0, s15
 800aa6a:	f000 fde1 	bl	800b630 <invSqrt>
 800aa6e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    mpu9250.q[0] = q1 * recipNorm;
 800aa72:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800aa76:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800aa7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7e:	4b12      	ldr	r3, [pc, #72]	; (800aac8 <MPU9250_madgwickAHRSupdate+0xd20>)
 800aa80:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    mpu9250.q[1] = q2 * recipNorm;
 800aa84:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800aa88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800aa8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa90:	4b0d      	ldr	r3, [pc, #52]	; (800aac8 <MPU9250_madgwickAHRSupdate+0xd20>)
 800aa92:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    mpu9250.q[2] = q3 * recipNorm;
 800aa96:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800aa9a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <MPU9250_madgwickAHRSupdate+0xd20>)
 800aaa4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    mpu9250.q[3] = q4 * recipNorm;
 800aaa8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aaac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800aab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab4:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <MPU9250_madgwickAHRSupdate+0xd20>)
 800aab6:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
}
 800aaba:	bf00      	nop
 800aabc:	37cc      	adds	r7, #204	; 0xcc
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd90      	pop	{r4, r7, pc}
 800aac2:	bf00      	nop
 800aac4:	20000010 	.word	0x20000010
 800aac8:	20001aa4 	.word	0x20001aa4
 800aacc:	408f4000 	.word	0x408f4000

0800aad0 <MPU9250_calRPY>:

void MPU9250_calRPY(){
 800aad0:	b5b0      	push	{r4, r5, r7, lr}
 800aad2:	af00      	add	r7, sp, #0
    mpu9250.roll = atan2(2.0f * (mpu9250.q[0] * mpu9250.q[1] + mpu9250.q[2] * mpu9250.q[3]), mpu9250.q[0] * mpu9250.q[0]- mpu9250.q[1] * mpu9250.q[1] - mpu9250.q[2] * mpu9250.q[2] + mpu9250.q[3] * mpu9250.q[3]);		//roll
 800aad4:	4b6c      	ldr	r3, [pc, #432]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800aad6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800aada:	4b6b      	ldr	r3, [pc, #428]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800aadc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800aae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aae4:	4b68      	ldr	r3, [pc, #416]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800aae6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800aaea:	4b67      	ldr	r3, [pc, #412]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800aaec:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800aaf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aaf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aafc:	ee17 0a90 	vmov	r0, s15
 800ab00:	f7f5 fd32 	bl	8000568 <__aeabi_f2d>
 800ab04:	4604      	mov	r4, r0
 800ab06:	460d      	mov	r5, r1
 800ab08:	4b5f      	ldr	r3, [pc, #380]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab0a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800ab0e:	4b5e      	ldr	r3, [pc, #376]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab10:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800ab14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab18:	4b5b      	ldr	r3, [pc, #364]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab1a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800ab1e:	4b5a      	ldr	r3, [pc, #360]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab20:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ab24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab28:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab2c:	4b56      	ldr	r3, [pc, #344]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab2e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800ab32:	4b55      	ldr	r3, [pc, #340]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab34:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ab38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab40:	4b51      	ldr	r3, [pc, #324]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab42:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800ab46:	4b50      	ldr	r3, [pc, #320]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab48:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ab4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab54:	ee17 0a90 	vmov	r0, s15
 800ab58:	f7f5 fd06 	bl	8000568 <__aeabi_f2d>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	ec43 2b11 	vmov	d1, r2, r3
 800ab64:	ec45 4b10 	vmov	d0, r4, r5
 800ab68:	f005 fbde 	bl	8010328 <atan2>
 800ab6c:	ec54 3b10 	vmov	r3, r4, d0
 800ab70:	4618      	mov	r0, r3
 800ab72:	4621      	mov	r1, r4
 800ab74:	f7f6 f848 	bl	8000c08 <__aeabi_d2f>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	4b43      	ldr	r3, [pc, #268]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab7c:	679a      	str	r2, [r3, #120]	; 0x78
    mpu9250.pitch = -asin(2.0f * (mpu9250.q[1] * mpu9250.q[3] - mpu9250.q[0] * mpu9250.q[2]));												//pitch
 800ab7e:	4b42      	ldr	r3, [pc, #264]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab80:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800ab84:	4b40      	ldr	r3, [pc, #256]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab86:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ab8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab8e:	4b3e      	ldr	r3, [pc, #248]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab90:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800ab94:	4b3c      	ldr	r3, [pc, #240]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ab96:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ab9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aba2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aba6:	ee17 0a90 	vmov	r0, s15
 800abaa:	f7f5 fcdd 	bl	8000568 <__aeabi_f2d>
 800abae:	4603      	mov	r3, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	ec44 3b10 	vmov	d0, r3, r4
 800abb6:	f005 fb5f 	bl	8010278 <asin>
 800abba:	ec54 3b10 	vmov	r3, r4, d0
 800abbe:	4618      	mov	r0, r3
 800abc0:	4621      	mov	r1, r4
 800abc2:	f7f6 f821 	bl	8000c08 <__aeabi_d2f>
 800abc6:	4603      	mov	r3, r0
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef1 7a67 	vneg.f32	s15, s15
 800abd0:	4b2d      	ldr	r3, [pc, #180]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800abd2:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    mpu9250.yaw = atan2(2.0f * (mpu9250.q[1] * mpu9250.q[2] + mpu9250.q[0] * mpu9250.q[3]), mpu9250.q[0] * mpu9250.q[0] + mpu9250.q[1] * mpu9250.q[1] - mpu9250.q[2] * mpu9250.q[2] - mpu9250.q[3] * mpu9250.q[3]);		//yaw
 800abd6:	4b2c      	ldr	r3, [pc, #176]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800abd8:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800abdc:	4b2a      	ldr	r3, [pc, #168]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800abde:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800abe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abe6:	4b28      	ldr	r3, [pc, #160]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800abe8:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800abec:	4b26      	ldr	r3, [pc, #152]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800abee:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800abf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800abfe:	ee17 0a90 	vmov	r0, s15
 800ac02:	f7f5 fcb1 	bl	8000568 <__aeabi_f2d>
 800ac06:	4604      	mov	r4, r0
 800ac08:	460d      	mov	r5, r1
 800ac0a:	4b1f      	ldr	r3, [pc, #124]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac0c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800ac10:	4b1d      	ldr	r3, [pc, #116]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac12:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800ac16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac1a:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac1c:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800ac20:	4b19      	ldr	r3, [pc, #100]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac22:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ac26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac2e:	4b16      	ldr	r3, [pc, #88]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac30:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800ac34:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac36:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ac3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac42:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac44:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800ac48:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac4a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ac4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac56:	ee17 0a90 	vmov	r0, s15
 800ac5a:	f7f5 fc85 	bl	8000568 <__aeabi_f2d>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	ec43 2b11 	vmov	d1, r2, r3
 800ac66:	ec45 4b10 	vmov	d0, r4, r5
 800ac6a:	f005 fb5d 	bl	8010328 <atan2>
 800ac6e:	ec54 3b10 	vmov	r3, r4, d0
 800ac72:	4618      	mov	r0, r3
 800ac74:	4621      	mov	r1, r4
 800ac76:	f7f5 ffc7 	bl	8000c08 <__aeabi_d2f>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b02      	ldr	r3, [pc, #8]	; (800ac88 <MPU9250_calRPY+0x1b8>)
 800ac7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ac82:	bf00      	nop
 800ac84:	bdb0      	pop	{r4, r5, r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20001aa4 	.word	0x20001aa4

0800ac8c <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 800ac90:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <AK8963_calRawData+0x78>)
 800ac92:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <AK8963_calRawData+0x16>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e02b      	b.n	800acfa <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 800aca2:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <AK8963_calRawData+0x78>)
 800aca4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800aca8:	021b      	lsls	r3, r3, #8
 800acaa:	b21a      	sxth	r2, r3
 800acac:	4b15      	ldr	r3, [pc, #84]	; (800ad04 <AK8963_calRawData+0x78>)
 800acae:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	4313      	orrs	r3, r2
 800acb6:	b21a      	sxth	r2, r3
 800acb8:	4b12      	ldr	r3, [pc, #72]	; (800ad04 <AK8963_calRawData+0x78>)
 800acba:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 800acbc:	4b11      	ldr	r3, [pc, #68]	; (800ad04 <AK8963_calRawData+0x78>)
 800acbe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	b21a      	sxth	r2, r3
 800acc6:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <AK8963_calRawData+0x78>)
 800acc8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800accc:	b21b      	sxth	r3, r3
 800acce:	4313      	orrs	r3, r2
 800acd0:	b21a      	sxth	r2, r3
 800acd2:	4b0c      	ldr	r3, [pc, #48]	; (800ad04 <AK8963_calRawData+0x78>)
 800acd4:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <AK8963_calRawData+0x78>)
 800acd8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	b21a      	sxth	r2, r3
 800ace0:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <AK8963_calRawData+0x78>)
 800ace2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	4313      	orrs	r3, r2
 800acea:	b21b      	sxth	r3, r3
 800acec:	b29b      	uxth	r3, r3
 800acee:	425b      	negs	r3, r3
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	b21a      	sxth	r2, r3
 800acf4:	4b03      	ldr	r3, [pc, #12]	; (800ad04 <AK8963_calRawData+0x78>)
 800acf6:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 800acf8:	2301      	movs	r3, #1
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	20001aa4 	.word	0x20001aa4

0800ad08 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 800ad0c:	4b27      	ldr	r3, [pc, #156]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad1a:	4b24      	ldr	r3, [pc, #144]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad1c:	edd3 7a04 	vldr	s15, [r3, #16]
 800ad20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad24:	4b21      	ldr	r3, [pc, #132]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad26:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ad2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad2e:	4b1f      	ldr	r3, [pc, #124]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad30:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ad34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad38:	4b1c      	ldr	r3, [pc, #112]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad3a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 800ad3e:	4b1b      	ldr	r3, [pc, #108]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad4c:	4b17      	ldr	r3, [pc, #92]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad4e:	edd3 7a04 	vldr	s15, [r3, #16]
 800ad52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad56:	4b15      	ldr	r3, [pc, #84]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad58:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ad5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad60:	4b12      	ldr	r3, [pc, #72]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad62:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ad66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad6a:	4b10      	ldr	r3, [pc, #64]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad6c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 800ad70:	4b0e      	ldr	r3, [pc, #56]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad72:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad7e:	4b0b      	ldr	r3, [pc, #44]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad80:	edd3 7a04 	vldr	s15, [r3, #16]
 800ad84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad88:	4b08      	ldr	r3, [pc, #32]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad8a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ad8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad94:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ad98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad9c:	4b03      	ldr	r3, [pc, #12]	; (800adac <AK8963_calCalibValue+0xa4>)
 800ad9e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 800ada2:	bf00      	nop
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20001aa4 	.word	0x20001aa4

0800adb0 <MPU9250_getMres>:
float MPU9250_getGx(){return mpu9250.gyro[0];}
float MPU9250_getGy(){return mpu9250.gyro[1];}
float MPU9250_getGz(){return mpu9250.gyro[2];}


void MPU9250_getMres() {
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 800adb4:	4b09      	ldr	r3, [pc, #36]	; (800addc <MPU9250_getMres+0x2c>)
 800adb6:	799b      	ldrb	r3, [r3, #6]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <MPU9250_getMres+0x12>
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d004      	beq.n	800adca <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 800adc0:	e007      	b.n	800add2 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 800adc2:	4b06      	ldr	r3, [pc, #24]	; (800addc <MPU9250_getMres+0x2c>)
 800adc4:	4a06      	ldr	r2, [pc, #24]	; (800ade0 <MPU9250_getMres+0x30>)
 800adc6:	611a      	str	r2, [r3, #16]
		  break;
 800adc8:	e003      	b.n	800add2 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 800adca:	4b04      	ldr	r3, [pc, #16]	; (800addc <MPU9250_getMres+0x2c>)
 800adcc:	4a05      	ldr	r2, [pc, #20]	; (800ade4 <MPU9250_getMres+0x34>)
 800adce:	611a      	str	r2, [r3, #16]
		  break;
 800add0:	bf00      	nop
}
 800add2:	bf00      	nop
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	20001aa4 	.word	0x20001aa4
 800ade0:	40bfebff 	.word	0x40bfebff
 800ade4:	3fbfebff 	.word	0x3fbfebff

0800ade8 <MPU9250_getGres>:

void MPU9250_getGres() {
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 800adec:	4b12      	ldr	r3, [pc, #72]	; (800ae38 <MPU9250_getGres+0x50>)
 800adee:	795b      	ldrb	r3, [r3, #5]
 800adf0:	2b03      	cmp	r3, #3
 800adf2:	d81b      	bhi.n	800ae2c <MPU9250_getGres+0x44>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <MPU9250_getGres+0x14>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae0d 	.word	0x0800ae0d
 800ae00:	0800ae15 	.word	0x0800ae15
 800ae04:	0800ae1d 	.word	0x0800ae1d
 800ae08:	0800ae25 	.word	0x0800ae25
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <MPU9250_getGres+0x50>)
 800ae0e:	4a0b      	ldr	r2, [pc, #44]	; (800ae3c <MPU9250_getGres+0x54>)
 800ae10:	60da      	str	r2, [r3, #12]
          break;
 800ae12:	e00b      	b.n	800ae2c <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 800ae14:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <MPU9250_getGres+0x50>)
 800ae16:	4a0a      	ldr	r2, [pc, #40]	; (800ae40 <MPU9250_getGres+0x58>)
 800ae18:	60da      	str	r2, [r3, #12]
          break;
 800ae1a:	e007      	b.n	800ae2c <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 800ae1c:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <MPU9250_getGres+0x50>)
 800ae1e:	4a09      	ldr	r2, [pc, #36]	; (800ae44 <MPU9250_getGres+0x5c>)
 800ae20:	60da      	str	r2, [r3, #12]
          break;
 800ae22:	e003      	b.n	800ae2c <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <MPU9250_getGres+0x50>)
 800ae26:	4a08      	ldr	r2, [pc, #32]	; (800ae48 <MPU9250_getGres+0x60>)
 800ae28:	60da      	str	r2, [r3, #12]
          break;
 800ae2a:	bf00      	nop
  }
}
 800ae2c:	bf00      	nop
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	20001aa4 	.word	0x20001aa4
 800ae3c:	3bfa0000 	.word	0x3bfa0000
 800ae40:	3c7a0000 	.word	0x3c7a0000
 800ae44:	3cfa0000 	.word	0x3cfa0000
 800ae48:	3d7a0000 	.word	0x3d7a0000

0800ae4c <MPU9250_getAres>:


void MPU9250_getAres() {
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 800ae50:	4b14      	ldr	r3, [pc, #80]	; (800aea4 <MPU9250_getAres+0x58>)
 800ae52:	791b      	ldrb	r3, [r3, #4]
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d81f      	bhi.n	800ae98 <MPU9250_getAres+0x4c>
 800ae58:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <MPU9250_getAres+0x14>)
 800ae5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5e:	bf00      	nop
 800ae60:	0800ae71 	.word	0x0800ae71
 800ae64:	0800ae7b 	.word	0x0800ae7b
 800ae68:	0800ae85 	.word	0x0800ae85
 800ae6c:	0800ae8f 	.word	0x0800ae8f
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 800ae70:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <MPU9250_getAres+0x58>)
 800ae72:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800ae76:	609a      	str	r2, [r3, #8]
          break;
 800ae78:	e00e      	b.n	800ae98 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <MPU9250_getAres+0x58>)
 800ae7c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800ae80:	609a      	str	r2, [r3, #8]
          break;
 800ae82:	e009      	b.n	800ae98 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 800ae84:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <MPU9250_getAres+0x58>)
 800ae86:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800ae8a:	609a      	str	r2, [r3, #8]
          break;
 800ae8c:	e004      	b.n	800ae98 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 800ae8e:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <MPU9250_getAres+0x58>)
 800ae90:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800ae94:	609a      	str	r2, [r3, #8]
          break;
 800ae96:	bf00      	nop
  }
}
 800ae98:	bf00      	nop
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	20001aa4 	.word	0x20001aa4

0800aea8 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800aeac:	2280      	movs	r2, #128	; 0x80
 800aeae:	216b      	movs	r1, #107	; 0x6b
 800aeb0:	20d0      	movs	r0, #208	; 0xd0
 800aeb2:	f000 fb69 	bl	800b588 <MPU9250_writeByte>
    HAL_Delay(10);
 800aeb6:	200a      	movs	r0, #10
 800aeb8:	f7f7 fbc6 	bl	8002648 <HAL_Delay>
}
 800aebc:	bf00      	nop
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 800aec6:	2200      	movs	r2, #0
 800aec8:	210a      	movs	r1, #10
 800aeca:	2018      	movs	r0, #24
 800aecc:	f000 fb5c 	bl	800b588 <MPU9250_writeByte>
	HAL_Delay(10);
 800aed0:	200a      	movs	r0, #10
 800aed2:	f7f7 fbb9 	bl	8002648 <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800aed6:	220f      	movs	r2, #15
 800aed8:	210a      	movs	r1, #10
 800aeda:	2018      	movs	r0, #24
 800aedc:	f000 fb54 	bl	800b588 <MPU9250_writeByte>
	HAL_Delay(10);
 800aee0:	200a      	movs	r0, #10
 800aee2:	f7f7 fbb1 	bl	8002648 <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 800aee6:	1d3b      	adds	r3, r7, #4
 800aee8:	2203      	movs	r2, #3
 800aeea:	2110      	movs	r1, #16
 800aeec:	2018      	movs	r0, #24
 800aeee:	f000 fb69 	bl	800b5c4 <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 800aef2:	793b      	ldrb	r3, [r7, #4]
 800aef4:	3b80      	subs	r3, #128	; 0x80
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aefe:	eddf 6a25 	vldr	s13, [pc, #148]	; 800af94 <MPU9250_initAK8963+0xd4>
 800af02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af0e:	4b22      	ldr	r3, [pc, #136]	; (800af98 <MPU9250_initAK8963+0xd8>)
 800af10:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 800af14:	797b      	ldrb	r3, [r7, #5]
 800af16:	3b80      	subs	r3, #128	; 0x80
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af20:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800af94 <MPU9250_initAK8963+0xd4>
 800af24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af30:	4b19      	ldr	r3, [pc, #100]	; (800af98 <MPU9250_initAK8963+0xd8>)
 800af32:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 800af36:	79bb      	ldrb	r3, [r7, #6]
 800af38:	3b80      	subs	r3, #128	; 0x80
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af42:	eddf 6a14 	vldr	s13, [pc, #80]	; 800af94 <MPU9250_initAK8963+0xd4>
 800af46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af52:	4b11      	ldr	r3, [pc, #68]	; (800af98 <MPU9250_initAK8963+0xd8>)
 800af54:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 800af58:	2200      	movs	r2, #0
 800af5a:	210a      	movs	r1, #10
 800af5c:	2018      	movs	r0, #24
 800af5e:	f000 fb13 	bl	800b588 <MPU9250_writeByte>
	HAL_Delay(10);
 800af62:	200a      	movs	r0, #10
 800af64:	f7f7 fb70 	bl	8002648 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 800af68:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <MPU9250_initAK8963+0xd8>)
 800af6a:	799b      	ldrb	r3, [r3, #6]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	b25a      	sxtb	r2, r3
 800af70:	4b09      	ldr	r3, [pc, #36]	; (800af98 <MPU9250_initAK8963+0xd8>)
 800af72:	79db      	ldrb	r3, [r3, #7]
 800af74:	b25b      	sxtb	r3, r3
 800af76:	4313      	orrs	r3, r2
 800af78:	b25b      	sxtb	r3, r3
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	461a      	mov	r2, r3
 800af7e:	210a      	movs	r1, #10
 800af80:	2018      	movs	r0, #24
 800af82:	f000 fb01 	bl	800b588 <MPU9250_writeByte>
	HAL_Delay(10);
 800af86:	200a      	movs	r0, #10
 800af88:	f7f7 fb5e 	bl	8002648 <HAL_Delay>
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	43800000 	.word	0x43800000
 800af98:	20001aa4 	.word	0x20001aa4

0800af9c <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800afa2:	2200      	movs	r2, #0
 800afa4:	216b      	movs	r1, #107	; 0x6b
 800afa6:	20d0      	movs	r0, #208	; 0xd0
 800afa8:	f000 faee 	bl	800b588 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 800afac:	2064      	movs	r0, #100	; 0x64
 800afae:	f7f7 fb4b 	bl	8002648 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800afb2:	2201      	movs	r2, #1
 800afb4:	216b      	movs	r1, #107	; 0x6b
 800afb6:	20d0      	movs	r0, #208	; 0xd0
 800afb8:	f000 fae6 	bl	800b588 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 800afbc:	2203      	movs	r2, #3
 800afbe:	211a      	movs	r1, #26
 800afc0:	20d0      	movs	r0, #208	; 0xd0
 800afc2:	f000 fae1 	bl	800b588 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 800afc6:	2204      	movs	r2, #4
 800afc8:	2119      	movs	r1, #25
 800afca:	20d0      	movs	r0, #208	; 0xd0
 800afcc:	f000 fadc 	bl	800b588 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 800afd0:	211b      	movs	r1, #27
 800afd2:	20d0      	movs	r0, #208	; 0xd0
 800afd4:	f000 fb18 	bl	800b608 <MPU9250_readByte>
 800afd8:	4603      	mov	r3, r0
 800afda:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	f023 0302 	bic.w	r3, r3, #2
 800afe2:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	f023 0318 	bic.w	r3, r3, #24
 800afea:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 800afec:	4b24      	ldr	r3, [pc, #144]	; (800b080 <MPU9250_initMPU9250+0xe4>)
 800afee:	795b      	ldrb	r3, [r3, #5]
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	b25a      	sxtb	r2, r3
 800aff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aff8:	4313      	orrs	r3, r2
 800affa:	b25b      	sxtb	r3, r3
 800affc:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	461a      	mov	r2, r3
 800b002:	211b      	movs	r1, #27
 800b004:	20d0      	movs	r0, #208	; 0xd0
 800b006:	f000 fabf 	bl	800b588 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 800b00a:	211c      	movs	r1, #28
 800b00c:	20d0      	movs	r0, #208	; 0xd0
 800b00e:	f000 fafb 	bl	800b608 <MPU9250_readByte>
 800b012:	4603      	mov	r3, r0
 800b014:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	f023 0318 	bic.w	r3, r3, #24
 800b01c:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 800b01e:	4b18      	ldr	r3, [pc, #96]	; (800b080 <MPU9250_initMPU9250+0xe4>)
 800b020:	791b      	ldrb	r3, [r3, #4]
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	b25a      	sxtb	r2, r3
 800b026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	461a      	mov	r2, r3
 800b034:	211c      	movs	r1, #28
 800b036:	20d0      	movs	r0, #208	; 0xd0
 800b038:	f000 faa6 	bl	800b588 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 800b03c:	211d      	movs	r1, #29
 800b03e:	20d0      	movs	r0, #208	; 0xd0
 800b040:	f000 fae2 	bl	800b608 <MPU9250_readByte>
 800b044:	4603      	mov	r3, r0
 800b046:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800b048:	79fb      	ldrb	r3, [r7, #7]
 800b04a:	f023 030f 	bic.w	r3, r3, #15
 800b04e:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	f043 0303 	orr.w	r3, r3, #3
 800b056:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 800b058:	79fb      	ldrb	r3, [r7, #7]
 800b05a:	461a      	mov	r2, r3
 800b05c:	211d      	movs	r1, #29
 800b05e:	20d0      	movs	r0, #208	; 0xd0
 800b060:	f000 fa92 	bl	800b588 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 800b064:	2222      	movs	r2, #34	; 0x22
 800b066:	2137      	movs	r1, #55	; 0x37
 800b068:	20d0      	movs	r0, #208	; 0xd0
 800b06a:	f000 fa8d 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800b06e:	2201      	movs	r2, #1
 800b070:	2138      	movs	r1, #56	; 0x38
 800b072:	20d0      	movs	r0, #208	; 0xd0
 800b074:	f000 fa88 	bl	800b588 <MPU9250_writeByte>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	20001aa4 	.word	0x20001aa4

0800b084 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b094      	sub	sp, #80	; 0x50
 800b088:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800b08a:	2300      	movs	r3, #0
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b08e:	2300      	movs	r3, #0
 800b090:	633b      	str	r3, [r7, #48]	; 0x30
 800b092:	2300      	movs	r3, #0
 800b094:	637b      	str	r3, [r7, #52]	; 0x34
 800b096:	2300      	movs	r3, #0
 800b098:	623b      	str	r3, [r7, #32]
 800b09a:	2300      	movs	r3, #0
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
 800b09e:	2300      	movs	r3, #0
 800b0a0:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800b0a2:	2280      	movs	r2, #128	; 0x80
 800b0a4:	216b      	movs	r1, #107	; 0x6b
 800b0a6:	20d0      	movs	r0, #208	; 0xd0
 800b0a8:	f000 fa6e 	bl	800b588 <MPU9250_writeByte>
  HAL_Delay(100);
 800b0ac:	2064      	movs	r0, #100	; 0x64
 800b0ae:	f7f7 facb 	bl	8002648 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	216b      	movs	r1, #107	; 0x6b
 800b0b6:	20d0      	movs	r0, #208	; 0xd0
 800b0b8:	f000 fa66 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 800b0bc:	2200      	movs	r2, #0
 800b0be:	216c      	movs	r1, #108	; 0x6c
 800b0c0:	20d0      	movs	r0, #208	; 0xd0
 800b0c2:	f000 fa61 	bl	800b588 <MPU9250_writeByte>
  HAL_Delay(200);
 800b0c6:	20c8      	movs	r0, #200	; 0xc8
 800b0c8:	f7f7 fabe 	bl	8002648 <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2138      	movs	r1, #56	; 0x38
 800b0d0:	20d0      	movs	r0, #208	; 0xd0
 800b0d2:	f000 fa59 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2123      	movs	r1, #35	; 0x23
 800b0da:	20d0      	movs	r0, #208	; 0xd0
 800b0dc:	f000 fa54 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	216b      	movs	r1, #107	; 0x6b
 800b0e4:	20d0      	movs	r0, #208	; 0xd0
 800b0e6:	f000 fa4f 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2124      	movs	r1, #36	; 0x24
 800b0ee:	20d0      	movs	r0, #208	; 0xd0
 800b0f0:	f000 fa4a 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	216a      	movs	r1, #106	; 0x6a
 800b0f8:	20d0      	movs	r0, #208	; 0xd0
 800b0fa:	f000 fa45 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800b0fe:	220c      	movs	r2, #12
 800b100:	216a      	movs	r1, #106	; 0x6a
 800b102:	20d0      	movs	r0, #208	; 0xd0
 800b104:	f000 fa40 	bl	800b588 <MPU9250_writeByte>
  HAL_Delay(15);
 800b108:	200f      	movs	r0, #15
 800b10a:	f7f7 fa9d 	bl	8002648 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800b10e:	2201      	movs	r2, #1
 800b110:	211a      	movs	r1, #26
 800b112:	20d0      	movs	r0, #208	; 0xd0
 800b114:	f000 fa38 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 800b118:	2200      	movs	r2, #0
 800b11a:	2119      	movs	r1, #25
 800b11c:	20d0      	movs	r0, #208	; 0xd0
 800b11e:	f000 fa33 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800b122:	2200      	movs	r2, #0
 800b124:	211b      	movs	r1, #27
 800b126:	20d0      	movs	r0, #208	; 0xd0
 800b128:	f000 fa2e 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 800b12c:	2200      	movs	r2, #0
 800b12e:	211c      	movs	r1, #28
 800b130:	20d0      	movs	r0, #208	; 0xd0
 800b132:	f000 fa29 	bl	800b588 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 800b136:	2240      	movs	r2, #64	; 0x40
 800b138:	216a      	movs	r1, #106	; 0x6a
 800b13a:	20d0      	movs	r0, #208	; 0xd0
 800b13c:	f000 fa24 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 800b140:	2278      	movs	r2, #120	; 0x78
 800b142:	2123      	movs	r1, #35	; 0x23
 800b144:	20d0      	movs	r0, #208	; 0xd0
 800b146:	f000 fa1f 	bl	800b588 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 800b14a:	2028      	movs	r0, #40	; 0x28
 800b14c:	f7f7 fa7c 	bl	8002648 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800b150:	2200      	movs	r2, #0
 800b152:	2123      	movs	r1, #35	; 0x23
 800b154:	20d0      	movs	r0, #208	; 0xd0
 800b156:	f000 fa17 	bl	800b588 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 800b15a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b15e:	2202      	movs	r2, #2
 800b160:	2172      	movs	r1, #114	; 0x72
 800b162:	20d0      	movs	r0, #208	; 0xd0
 800b164:	f000 fa2e 	bl	800b5c4 <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 800b168:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	b21a      	sxth	r2, r3
 800b170:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b174:	b21b      	sxth	r3, r3
 800b176:	4313      	orrs	r3, r2
 800b178:	b21b      	sxth	r3, r3
 800b17a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800b17e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b182:	4ab3      	ldr	r2, [pc, #716]	; (800b450 <MPU9250_calibrateMPU9250+0x3cc>)
 800b184:	fba2 2303 	umull	r2, r3, r2, r3
 800b188:	08db      	lsrs	r3, r3, #3
 800b18a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 800b18e:	2300      	movs	r3, #0
 800b190:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b194:	e071      	b.n	800b27a <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 800b196:	2300      	movs	r3, #0
 800b198:	813b      	strh	r3, [r7, #8]
 800b19a:	2300      	movs	r3, #0
 800b19c:	817b      	strh	r3, [r7, #10]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	81bb      	strh	r3, [r7, #12]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	803b      	strh	r3, [r7, #0]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	807b      	strh	r3, [r7, #2]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 800b1ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b1b2:	220c      	movs	r2, #12
 800b1b4:	2174      	movs	r1, #116	; 0x74
 800b1b6:	20d0      	movs	r0, #208	; 0xd0
 800b1b8:	f000 fa04 	bl	800b5c4 <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 800b1bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b1c0:	021b      	lsls	r3, r3, #8
 800b1c2:	b21a      	sxth	r2, r3
 800b1c4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b1c8:	b21b      	sxth	r3, r3
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	b21b      	sxth	r3, r3
 800b1ce:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800b1d0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b1d4:	021b      	lsls	r3, r3, #8
 800b1d6:	b21a      	sxth	r2, r3
 800b1d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1dc:	b21b      	sxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b21b      	sxth	r3, r3
 800b1e2:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800b1e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	b21a      	sxth	r2, r3
 800b1ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b1f0:	b21b      	sxth	r3, r3
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	b21b      	sxth	r3, r3
 800b1f6:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800b1f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b1fc:	021b      	lsls	r3, r3, #8
 800b1fe:	b21a      	sxth	r2, r3
 800b200:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b204:	b21b      	sxth	r3, r3
 800b206:	4313      	orrs	r3, r2
 800b208:	b21b      	sxth	r3, r3
 800b20a:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800b20c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	b21a      	sxth	r2, r3
 800b214:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b218:	b21b      	sxth	r3, r3
 800b21a:	4313      	orrs	r3, r2
 800b21c:	b21b      	sxth	r3, r3
 800b21e:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800b220:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b224:	021b      	lsls	r3, r3, #8
 800b226:	b21a      	sxth	r2, r3
 800b228:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b22c:	b21b      	sxth	r3, r3
 800b22e:	4313      	orrs	r3, r2
 800b230:	b21b      	sxth	r3, r3
 800b232:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b23a:	4413      	add	r3, r2
 800b23c:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b244:	4413      	add	r3, r2
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b24e:	4413      	add	r3, r2
 800b250:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800b252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b254:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b258:	4413      	add	r3, r2
 800b25a:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800b25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b262:	4413      	add	r3, r2
 800b264:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800b26c:	4413      	add	r3, r2
 800b26e:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 800b270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b274:	3301      	adds	r3, #1
 800b276:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b27a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b27e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b282:	429a      	cmp	r2, r3
 800b284:	d387      	bcc.n	800b196 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800b286:	6a3a      	ldr	r2, [r7, #32]
 800b288:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b28c:	fb92 f3f3 	sdiv	r3, r2, r3
 800b290:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 800b292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b294:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b298:	fb92 f3f3 	sdiv	r3, r2, r3
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 800b29e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b2a4:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2a8:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 800b2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b2b0:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 800b2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b2bc:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2c0:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 800b2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b2c8:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2cc:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 800b2ce:	4b61      	ldr	r3, [pc, #388]	; (800b454 <MPU9250_calibrateMPU9250+0x3d0>)
 800b2d0:	ed93 7a02 	vldr	s14, [r3, #8]
 800b2d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2e0:	ee17 3a90 	vmov	r3, s15
 800b2e4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	dd05      	ble.n	800b2fa <MPU9250_calibrateMPU9250+0x276>
 800b2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2f8:	e004      	b.n	800b304 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 800b2fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b300:	4413      	add	r3, r2
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b306:	425b      	negs	r3, r3
 800b308:	2b00      	cmp	r3, #0
 800b30a:	da00      	bge.n	800b30e <MPU9250_calibrateMPU9250+0x28a>
 800b30c:	3303      	adds	r3, #3
 800b30e:	109b      	asrs	r3, r3, #2
 800b310:	121b      	asrs	r3, r3, #8
 800b312:	b2db      	uxtb	r3, r3
 800b314:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	425b      	negs	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	da00      	bge.n	800b322 <MPU9250_calibrateMPU9250+0x29e>
 800b320:	3303      	adds	r3, #3
 800b322:	109b      	asrs	r3, r3, #2
 800b324:	b2db      	uxtb	r3, r3
 800b326:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	425b      	negs	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	da00      	bge.n	800b334 <MPU9250_calibrateMPU9250+0x2b0>
 800b332:	3303      	adds	r3, #3
 800b334:	109b      	asrs	r3, r3, #2
 800b336:	121b      	asrs	r3, r3, #8
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	425b      	negs	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	da00      	bge.n	800b348 <MPU9250_calibrateMPU9250+0x2c4>
 800b346:	3303      	adds	r3, #3
 800b348:	109b      	asrs	r3, r3, #2
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800b350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b352:	425b      	negs	r3, r3
 800b354:	2b00      	cmp	r3, #0
 800b356:	da00      	bge.n	800b35a <MPU9250_calibrateMPU9250+0x2d6>
 800b358:	3303      	adds	r3, #3
 800b35a:	109b      	asrs	r3, r3, #2
 800b35c:	121b      	asrs	r3, r3, #8
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	425b      	negs	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	da00      	bge.n	800b36e <MPU9250_calibrateMPU9250+0x2ea>
 800b36c:	3303      	adds	r3, #3
 800b36e:	109b      	asrs	r3, r3, #2
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 800b376:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b37a:	461a      	mov	r2, r3
 800b37c:	2113      	movs	r1, #19
 800b37e:	20d0      	movs	r0, #208	; 0xd0
 800b380:	f000 f902 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 800b384:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b388:	461a      	mov	r2, r3
 800b38a:	2114      	movs	r1, #20
 800b38c:	20d0      	movs	r0, #208	; 0xd0
 800b38e:	f000 f8fb 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 800b392:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b396:	461a      	mov	r2, r3
 800b398:	2115      	movs	r1, #21
 800b39a:	20d0      	movs	r0, #208	; 0xd0
 800b39c:	f000 f8f4 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 800b3a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	2116      	movs	r1, #22
 800b3a8:	20d0      	movs	r0, #208	; 0xd0
 800b3aa:	f000 f8ed 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 800b3ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	2117      	movs	r1, #23
 800b3b6:	20d0      	movs	r0, #208	; 0xd0
 800b3b8:	f000 f8e6 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 800b3bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	2118      	movs	r1, #24
 800b3c4:	20d0      	movs	r0, #208	; 0xd0
 800b3c6:	f000 f8df 	bl	800b588 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	617b      	str	r3, [r7, #20]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 800b3d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b3da:	2202      	movs	r2, #2
 800b3dc:	2177      	movs	r1, #119	; 0x77
 800b3de:	20d0      	movs	r0, #208	; 0xd0
 800b3e0:	f000 f8f0 	bl	800b5c4 <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800b3e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	b21b      	sxth	r3, r3
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 800b3f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	217a      	movs	r1, #122	; 0x7a
 800b3fe:	20d0      	movs	r0, #208	; 0xd0
 800b400:	f000 f8e0 	bl	800b5c4 <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800b404:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b408:	021b      	lsls	r3, r3, #8
 800b40a:	b21b      	sxth	r3, r3
 800b40c:	461a      	mov	r2, r3
 800b40e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b412:	4313      	orrs	r3, r2
 800b414:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 800b416:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b41a:	2202      	movs	r2, #2
 800b41c:	217d      	movs	r1, #125	; 0x7d
 800b41e:	20d0      	movs	r0, #208	; 0xd0
 800b420:	f000 f8d0 	bl	800b5c4 <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 800b424:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b428:	021b      	lsls	r3, r3, #8
 800b42a:	b21b      	sxth	r3, r3
 800b42c:	461a      	mov	r2, r3
 800b42e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b432:	4313      	orrs	r3, r2
 800b434:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800b436:	2301      	movs	r3, #1
 800b438:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800b43a:	2300      	movs	r3, #0
 800b43c:	743b      	strb	r3, [r7, #16]
 800b43e:	2300      	movs	r3, #0
 800b440:	747b      	strb	r3, [r7, #17]
 800b442:	2300      	movs	r3, #0
 800b444:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 800b446:	2300      	movs	r3, #0
 800b448:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b44c:	e01e      	b.n	800b48c <MPU9250_calibrateMPU9250+0x408>
 800b44e:	bf00      	nop
 800b450:	aaaaaaab 	.word	0xaaaaaaab
 800b454:	20001aa4 	.word	0x20001aa4
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 800b458:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b462:	4413      	add	r3, r2
 800b464:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b468:	461a      	mov	r2, r3
 800b46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b46c:	4013      	ands	r3, r2
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d007      	beq.n	800b482 <MPU9250_calibrateMPU9250+0x3fe>
 800b472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b476:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b47a:	4413      	add	r3, r2
 800b47c:	2201      	movs	r2, #1
 800b47e:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 800b482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b486:	3301      	adds	r3, #1
 800b488:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b48c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b490:	2b02      	cmp	r3, #2
 800b492:	d9e1      	bls.n	800b458 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	da00      	bge.n	800b49e <MPU9250_calibrateMPU9250+0x41a>
 800b49c:	3307      	adds	r3, #7
 800b49e:	10db      	asrs	r3, r3, #3
 800b4a0:	425b      	negs	r3, r3
 800b4a2:	4413      	add	r3, r2
 800b4a4:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 800b4a6:	69ba      	ldr	r2, [r7, #24]
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da00      	bge.n	800b4b0 <MPU9250_calibrateMPU9250+0x42c>
 800b4ae:	3307      	adds	r3, #7
 800b4b0:	10db      	asrs	r3, r3, #3
 800b4b2:	425b      	negs	r3, r3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 800b4b8:	69fa      	ldr	r2, [r7, #28]
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	da00      	bge.n	800b4c2 <MPU9250_calibrateMPU9250+0x43e>
 800b4c0:	3307      	adds	r3, #7
 800b4c2:	10db      	asrs	r3, r3, #3
 800b4c4:	425b      	negs	r3, r3
 800b4c6:	4413      	add	r3, r2
 800b4c8:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	121b      	asrs	r3, r3, #8
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800b4dc:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800b4e0:	7c3b      	ldrb	r3, [r7, #16]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	121b      	asrs	r3, r3, #8
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800b4fc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b500:	7c7b      	ldrb	r3, [r7, #17]
 800b502:	4313      	orrs	r3, r2
 800b504:	b2db      	uxtb	r3, r3
 800b506:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	121b      	asrs	r3, r3, #8
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800b51c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800b520:	7cbb      	ldrb	r3, [r7, #18]
 800b522:	4313      	orrs	r3, r2
 800b524:	b2db      	uxtb	r3, r3
 800b526:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 800b52a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800b52e:	461a      	mov	r2, r3
 800b530:	2177      	movs	r1, #119	; 0x77
 800b532:	20d0      	movs	r0, #208	; 0xd0
 800b534:	f000 f828 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
 800b538:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b53c:	461a      	mov	r2, r3
 800b53e:	2178      	movs	r1, #120	; 0x78
 800b540:	20d0      	movs	r0, #208	; 0xd0
 800b542:	f000 f821 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
 800b546:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b54a:	461a      	mov	r2, r3
 800b54c:	217a      	movs	r1, #122	; 0x7a
 800b54e:	20d0      	movs	r0, #208	; 0xd0
 800b550:	f000 f81a 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
 800b554:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b558:	461a      	mov	r2, r3
 800b55a:	217b      	movs	r1, #123	; 0x7b
 800b55c:	20d0      	movs	r0, #208	; 0xd0
 800b55e:	f000 f813 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
 800b562:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b566:	461a      	mov	r2, r3
 800b568:	217d      	movs	r1, #125	; 0x7d
 800b56a:	20d0      	movs	r0, #208	; 0xd0
 800b56c:	f000 f80c 	bl	800b588 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
 800b570:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b574:	461a      	mov	r2, r3
 800b576:	217e      	movs	r1, #126	; 0x7e
 800b578:	20d0      	movs	r0, #208	; 0xd0
 800b57a:	f000 f805 	bl	800b588 <MPU9250_writeByte>

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 800b57e:	bf00      	nop
 800b580:	3750      	adds	r7, #80	; 0x50
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop

0800b588 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af04      	add	r7, sp, #16
 800b58e:	4603      	mov	r3, r0
 800b590:	71fb      	strb	r3, [r7, #7]
 800b592:	460b      	mov	r3, r1
 800b594:	71bb      	strb	r3, [r7, #6]
 800b596:	4613      	mov	r3, r2
 800b598:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(MPU9250_I2C, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 800b59a:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <MPU9250_writeByte+0x38>)
 800b59c:	6818      	ldr	r0, [r3, #0]
 800b59e:	79fb      	ldrb	r3, [r7, #7]
 800b5a0:	b299      	uxth	r1, r3
 800b5a2:	79bb      	ldrb	r3, [r7, #6]
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	2364      	movs	r3, #100	; 0x64
 800b5a8:	9302      	str	r3, [sp, #8]
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	1d7b      	adds	r3, r7, #5
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f7f7 fff2 	bl	800359c <HAL_I2C_Mem_Write>
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20001aa4 	.word	0x20001aa4

0800b5c4 <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 800b5c4:	b590      	push	{r4, r7, lr}
 800b5c6:	b087      	sub	sp, #28
 800b5c8:	af04      	add	r7, sp, #16
 800b5ca:	603b      	str	r3, [r7, #0]
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	71fb      	strb	r3, [r7, #7]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	71bb      	strb	r3, [r7, #6]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(MPU9250_I2C, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <MPU9250_readBytes+0x40>)
 800b5da:	6818      	ldr	r0, [r3, #0]
 800b5dc:	79fb      	ldrb	r3, [r7, #7]
 800b5de:	b299      	uxth	r1, r3
 800b5e0:	79bb      	ldrb	r3, [r7, #6]
 800b5e2:	b29c      	uxth	r4, r3
 800b5e4:	797b      	ldrb	r3, [r7, #5]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	2264      	movs	r2, #100	; 0x64
 800b5ea:	9202      	str	r2, [sp, #8]
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	f7f8 f8cb 	bl	8003790 <HAL_I2C_Mem_Read>
}
 800b5fa:	bf00      	nop
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd90      	pop	{r4, r7, pc}
 800b602:	bf00      	nop
 800b604:	20001aa4 	.word	0x20001aa4

0800b608 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	460a      	mov	r2, r1
 800b612:	71fb      	strb	r3, [r7, #7]
 800b614:	4613      	mov	r3, r2
 800b616:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 800b618:	f107 030f 	add.w	r3, r7, #15
 800b61c:	79b9      	ldrb	r1, [r7, #6]
 800b61e:	79f8      	ldrb	r0, [r7, #7]
 800b620:	2201      	movs	r2, #1
 800b622:	f7ff ffcf 	bl	800b5c4 <MPU9250_readBytes>
	return data;
 800b626:	7bfb      	ldrb	r3, [r7, #15]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <invSqrt>:

float invSqrt(float x) {
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800b63a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b63e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b642:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b646:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800b64e:	f107 0310 	add.w	r3, r7, #16
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	105a      	asrs	r2, r3, #1
 800b65a:	4b12      	ldr	r3, [pc, #72]	; (800b6a4 <invSqrt+0x74>)
 800b65c:	1a9b      	subs	r3, r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800b660:	f107 030c 	add.w	r3, r7, #12
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800b668:	ed97 7a04 	vldr	s14, [r7, #16]
 800b66c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b670:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b674:	edd7 7a04 	vldr	s15, [r7, #16]
 800b678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b67c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800b680:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b684:	edd7 7a04 	vldr	s15, [r7, #16]
 800b688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b68c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	ee07 3a90 	vmov	s15, r3
}
 800b696:	eeb0 0a67 	vmov.f32	s0, s15
 800b69a:	371c      	adds	r7, #28
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	5f3759df 	.word	0x5f3759df

0800b6a8 <BME280>:
#include "bme280.h"
#include "math.h"

#define BME280_I2C bme280.hi2c

void BME280(I2C_HandleTypeDef *hi2c){
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
	bme280.hi2c = hi2c;
 800b6b0:	4a04      	ldr	r2, [pc, #16]	; (800b6c4 <BME280+0x1c>)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6013      	str	r3, [r2, #0]
	BME280_reset();
 800b6b6:	f000 f8b3 	bl	800b820 <BME280_reset>
}
 800b6ba:	bf00      	nop
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20001a2c 	.word	0x20001a2c

0800b6c8 <BME280_updateIT>:

void BME280_updateIT(){
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af02      	add	r7, sp, #8
	while(1){
		if(bm_i2cFlag == bm_i2cIdle){
 800b6ce:	4b0c      	ldr	r3, [pc, #48]	; (800b700 <BME280_updateIT+0x38>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10e      	bne.n	800b6f4 <BME280_updateIT+0x2c>
			HAL_I2C_Mem_Read_IT(BME280_I2C, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 3);
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <BME280_updateIT+0x3c>)
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	2303      	movs	r3, #3
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <BME280_updateIT+0x40>)
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	22f7      	movs	r2, #247	; 0xf7
 800b6e6:	21ec      	movs	r1, #236	; 0xec
 800b6e8:	f7f8 fa78 	bl	8003bdc <HAL_I2C_Mem_Read_IT>
			bm_i2cFlag = bm_i2cBME280;
 800b6ec:	4b04      	ldr	r3, [pc, #16]	; (800b700 <BME280_updateIT+0x38>)
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	701a      	strb	r2, [r3, #0]
			return;
 800b6f2:	e003      	b.n	800b6fc <BME280_updateIT+0x34>
		}
		else osDelay(1);
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	f002 facd 	bl	800dc94 <osDelay>
		if(bm_i2cFlag == bm_i2cIdle){
 800b6fa:	e7e8      	b.n	800b6ce <BME280_updateIT+0x6>
	}
}
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	20001a28 	.word	0x20001a28
 800b704:	20001a2c 	.word	0x20001a2c
 800b708:	20001a54 	.word	0x20001a54
 800b70c:	00000000 	.word	0x00000000

0800b710 <BME280_rxCpltCallback>:

void BME280_rxCpltCallback(I2C_HandleTypeDef *hi2c){
 800b710:	b590      	push	{r4, r7, lr}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance != bme280.hi2c->Instance) return;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	4b3c      	ldr	r3, [pc, #240]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d165      	bne.n	800b7f2 <BME280_rxCpltCallback+0xe2>
	if(bm_i2cFlag != bm_i2cBME280) return;
 800b726:	4b3b      	ldr	r3, [pc, #236]	; (800b814 <BME280_rxCpltCallback+0x104>)
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d163      	bne.n	800b7f6 <BME280_rxCpltCallback+0xe6>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 800b72e:	4b38      	ldr	r3, [pc, #224]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b734:	061a      	lsls	r2, r3, #24
 800b736:	4b36      	ldr	r3, [pc, #216]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b738:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b73c:	041b      	lsls	r3, r3, #16
 800b73e:	431a      	orrs	r2, r3
 800b740:	4b33      	ldr	r3, [pc, #204]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b742:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b746:	021b      	lsls	r3, r3, #8
 800b748:	4313      	orrs	r3, r2
 800b74a:	131b      	asrs	r3, r3, #12
 800b74c:	461a      	mov	r2, r3
 800b74e:	4b30      	ldr	r3, [pc, #192]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b750:	609a      	str	r2, [r3, #8]

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;
 800b752:	4b2f      	ldr	r3, [pc, #188]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	4618      	mov	r0, r3
 800b758:	f000 f9be 	bl	800bad8 <BME280_compensate_P>
 800b75c:	4603      	mov	r3, r0
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f4 fee0 	bl	8000524 <__aeabi_ui2d>
 800b764:	f04f 0200 	mov.w	r2, #0
 800b768:	4b2b      	ldr	r3, [pc, #172]	; (800b818 <BME280_rxCpltCallback+0x108>)
 800b76a:	f7f5 f87f 	bl	800086c <__aeabi_ddiv>
 800b76e:	4603      	mov	r3, r0
 800b770:	460c      	mov	r4, r1
 800b772:	4618      	mov	r0, r3
 800b774:	4621      	mov	r1, r4
 800b776:	f7f5 fa47 	bl	8000c08 <__aeabi_d2f>
 800b77a:	4602      	mov	r2, r0
 800b77c:	4b24      	ldr	r3, [pc, #144]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b77e:	615a      	str	r2, [r3, #20]

    bme280.alt = 44330 * (1.0 - pow(bme280.P / bme280.base_P, 0.1903));
 800b780:	4b23      	ldr	r3, [pc, #140]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b782:	ed93 7a05 	vldr	s14, [r3, #20]
 800b786:	4b22      	ldr	r3, [pc, #136]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b788:	edd3 7a07 	vldr	s15, [r3, #28]
 800b78c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b790:	ee16 0a90 	vmov	r0, s13
 800b794:	f7f4 fee8 	bl	8000568 <__aeabi_f2d>
 800b798:	4603      	mov	r3, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 800b800 <BME280_rxCpltCallback+0xf0>
 800b7a0:	ec44 3b10 	vmov	d0, r3, r4
 800b7a4:	f004 fdc2 	bl	801032c <pow>
 800b7a8:	ec54 3b10 	vmov	r3, r4, d0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4623      	mov	r3, r4
 800b7b0:	f04f 0000 	mov.w	r0, #0
 800b7b4:	4919      	ldr	r1, [pc, #100]	; (800b81c <BME280_rxCpltCallback+0x10c>)
 800b7b6:	f7f4 fd77 	bl	80002a8 <__aeabi_dsub>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	460c      	mov	r4, r1
 800b7be:	4618      	mov	r0, r3
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	a311      	add	r3, pc, #68	; (adr r3, 800b808 <BME280_rxCpltCallback+0xf8>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	f7f4 ff26 	bl	8000618 <__aeabi_dmul>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	f7f5 fa18 	bl	8000c08 <__aeabi_d2f>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b7dc:	621a      	str	r2, [r3, #32]

    bme280.hzCnt++;
 800b7de:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b7e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <BME280_rxCpltCallback+0x100>)
 800b7e8:	84da      	strh	r2, [r3, #38]	; 0x26
    bm_i2cFlag = bm_i2cIdle;
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <BME280_rxCpltCallback+0x104>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	e002      	b.n	800b7f8 <BME280_rxCpltCallback+0xe8>
	if(hi2c->Instance != bme280.hi2c->Instance) return;
 800b7f2:	bf00      	nop
 800b7f4:	e000      	b.n	800b7f8 <BME280_rxCpltCallback+0xe8>
	if(bm_i2cFlag != bm_i2cBME280) return;
 800b7f6:	bf00      	nop
}
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd90      	pop	{r4, r7, pc}
 800b7fe:	bf00      	nop
 800b800:	1a36e2eb 	.word	0x1a36e2eb
 800b804:	3fc85bc0 	.word	0x3fc85bc0
 800b808:	00000000 	.word	0x00000000
 800b80c:	40e5a540 	.word	0x40e5a540
 800b810:	20001a2c 	.word	0x20001a2c
 800b814:	20001a28 	.word	0x20001a28
 800b818:	40d90000 	.word	0x40d90000
 800b81c:	3ff00000 	.word	0x3ff00000

0800b820 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 800b824:	22b6      	movs	r2, #182	; 0xb6
 800b826:	21e0      	movs	r1, #224	; 0xe0
 800b828:	20ec      	movs	r0, #236	; 0xec
 800b82a:	f000 fb03 	bl	800be34 <BME280_writeByte>
}
 800b82e:	bf00      	nop
 800b830:	bd80      	pop	{r7, pc}

0800b832 <BME280_readPressure>:
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
}

int32_t BME280_readPressure(){
 800b832:	b580      	push	{r7, lr}
 800b834:	b082      	sub	sp, #8
 800b836:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 800b838:	1d3b      	adds	r3, r7, #4
 800b83a:	2203      	movs	r2, #3
 800b83c:	21f7      	movs	r1, #247	; 0xf7
 800b83e:	20ec      	movs	r0, #236	; 0xec
 800b840:	f000 fb16 	bl	800be70 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 800b844:	793b      	ldrb	r3, [r7, #4]
 800b846:	061a      	lsls	r2, r3, #24
 800b848:	797b      	ldrb	r3, [r7, #5]
 800b84a:	041b      	lsls	r3, r3, #16
 800b84c:	431a      	orrs	r2, r3
 800b84e:	79bb      	ldrb	r3, [r7, #6]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	4313      	orrs	r3, r2
 800b854:	131b      	asrs	r3, r3, #12
}
 800b856:	4618      	mov	r0, r3
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
	...

0800b860 <BME280_init>:
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
}

void BME280_init(uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 800b860:	b590      	push	{r4, r7, lr}
 800b862:	b08f      	sub	sp, #60	; 0x3c
 800b864:	af00      	add	r7, sp, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	4611      	mov	r1, r2
 800b86c:	461a      	mov	r2, r3
 800b86e:	4623      	mov	r3, r4
 800b870:	71fb      	strb	r3, [r7, #7]
 800b872:	4603      	mov	r3, r0
 800b874:	71bb      	strb	r3, [r7, #6]
 800b876:	460b      	mov	r3, r1
 800b878:	717b      	strb	r3, [r7, #5]
 800b87a:	4613      	mov	r3, r2
 800b87c:	713b      	strb	r3, [r7, #4]
	// Configure the BME280
	  // Set H oversampling rate
	  BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 800b87e:	79bb      	ldrb	r3, [r7, #6]
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	b2db      	uxtb	r3, r3
 800b886:	461a      	mov	r2, r3
 800b888:	21f2      	movs	r1, #242	; 0xf2
 800b88a:	20ec      	movs	r0, #236	; 0xec
 800b88c:	f000 fad2 	bl	800be34 <BME280_writeByte>
	  // Set T and P oversampling rates and sensor mode
  	  BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 800b890:	797b      	ldrb	r3, [r7, #5]
 800b892:	015b      	lsls	r3, r3, #5
 800b894:	b25a      	sxtb	r2, r3
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	b25b      	sxtb	r3, r3
 800b89c:	4313      	orrs	r3, r2
 800b89e:	b25a      	sxtb	r2, r3
 800b8a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	b25b      	sxtb	r3, r3
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	21f4      	movs	r1, #244	; 0xf4
 800b8ae:	20ec      	movs	r0, #236	; 0xec
 800b8b0:	f000 fac0 	bl	800be34 <BME280_writeByte>
	  // Set standby time interval in normal mode and bandwidth
	  BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 800b8b4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b8b8:	015b      	lsls	r3, r3, #5
 800b8ba:	b25a      	sxtb	r2, r3
 800b8bc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	b25b      	sxtb	r3, r3
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	b25b      	sxtb	r3, r3
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	21f5      	movs	r1, #245	; 0xf5
 800b8ce:	20ec      	movs	r0, #236	; 0xec
 800b8d0:	f000 fab0 	bl	800be34 <BME280_writeByte>

	  //wait.
	  HAL_Delay(50);
 800b8d4:	2032      	movs	r0, #50	; 0x32
 800b8d6:	f7f6 feb7 	bl	8002648 <HAL_Delay>
	  uint8_t calib[26];
	  BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 800b8da:	f107 0308 	add.w	r3, r7, #8
 800b8de:	221a      	movs	r2, #26
 800b8e0:	2188      	movs	r1, #136	; 0x88
 800b8e2:	20ec      	movs	r0, #236	; 0xec
 800b8e4:	f000 fac4 	bl	800be70 <BME280_readBytes>
	  bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 800b8e8:	7a7b      	ldrb	r3, [r7, #9]
 800b8ea:	021b      	lsls	r3, r3, #8
 800b8ec:	b21a      	sxth	r2, r3
 800b8ee:	7a3b      	ldrb	r3, [r7, #8]
 800b8f0:	b21b      	sxth	r3, r3
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	b21b      	sxth	r3, r3
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	4b75      	ldr	r3, [pc, #468]	; (800bad0 <BME280_init+0x270>)
 800b8fa:	869a      	strh	r2, [r3, #52]	; 0x34
	  bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	021b      	lsls	r3, r3, #8
 800b900:	b21a      	sxth	r2, r3
 800b902:	7abb      	ldrb	r3, [r7, #10]
 800b904:	b21b      	sxth	r3, r3
 800b906:	4313      	orrs	r3, r2
 800b908:	b21a      	sxth	r2, r3
 800b90a:	4b71      	ldr	r3, [pc, #452]	; (800bad0 <BME280_init+0x270>)
 800b90c:	879a      	strh	r2, [r3, #60]	; 0x3c
	  bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 800b90e:	7b7b      	ldrb	r3, [r7, #13]
 800b910:	021b      	lsls	r3, r3, #8
 800b912:	b21a      	sxth	r2, r3
 800b914:	7b3b      	ldrb	r3, [r7, #12]
 800b916:	b21b      	sxth	r3, r3
 800b918:	4313      	orrs	r3, r2
 800b91a:	b21a      	sxth	r2, r3
 800b91c:	4b6c      	ldr	r3, [pc, #432]	; (800bad0 <BME280_init+0x270>)
 800b91e:	87da      	strh	r2, [r3, #62]	; 0x3e
	  bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	021b      	lsls	r3, r3, #8
 800b924:	b21a      	sxth	r2, r3
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	b21b      	sxth	r3, r3
 800b92a:	4313      	orrs	r3, r2
 800b92c:	b21b      	sxth	r3, r3
 800b92e:	b29a      	uxth	r2, r3
 800b930:	4b67      	ldr	r3, [pc, #412]	; (800bad0 <BME280_init+0x270>)
 800b932:	86da      	strh	r2, [r3, #54]	; 0x36
	  bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 800b934:	7c7b      	ldrb	r3, [r7, #17]
 800b936:	021b      	lsls	r3, r3, #8
 800b938:	b21a      	sxth	r2, r3
 800b93a:	7c3b      	ldrb	r3, [r7, #16]
 800b93c:	b21b      	sxth	r3, r3
 800b93e:	4313      	orrs	r3, r2
 800b940:	b21a      	sxth	r2, r3
 800b942:	4b63      	ldr	r3, [pc, #396]	; (800bad0 <BME280_init+0x270>)
 800b944:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	  bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 800b948:	7cfb      	ldrb	r3, [r7, #19]
 800b94a:	021b      	lsls	r3, r3, #8
 800b94c:	b21a      	sxth	r2, r3
 800b94e:	7cbb      	ldrb	r3, [r7, #18]
 800b950:	b21b      	sxth	r3, r3
 800b952:	4313      	orrs	r3, r2
 800b954:	b21a      	sxth	r2, r3
 800b956:	4b5e      	ldr	r3, [pc, #376]	; (800bad0 <BME280_init+0x270>)
 800b958:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	  bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 800b95c:	7d7b      	ldrb	r3, [r7, #21]
 800b95e:	021b      	lsls	r3, r3, #8
 800b960:	b21a      	sxth	r2, r3
 800b962:	7d3b      	ldrb	r3, [r7, #20]
 800b964:	b21b      	sxth	r3, r3
 800b966:	4313      	orrs	r3, r2
 800b968:	b21a      	sxth	r2, r3
 800b96a:	4b59      	ldr	r3, [pc, #356]	; (800bad0 <BME280_init+0x270>)
 800b96c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 800b970:	7dfb      	ldrb	r3, [r7, #23]
 800b972:	021b      	lsls	r3, r3, #8
 800b974:	b21a      	sxth	r2, r3
 800b976:	7dbb      	ldrb	r3, [r7, #22]
 800b978:	b21b      	sxth	r3, r3
 800b97a:	4313      	orrs	r3, r2
 800b97c:	b21a      	sxth	r2, r3
 800b97e:	4b54      	ldr	r3, [pc, #336]	; (800bad0 <BME280_init+0x270>)
 800b980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 800b984:	7e7b      	ldrb	r3, [r7, #25]
 800b986:	021b      	lsls	r3, r3, #8
 800b988:	b21a      	sxth	r2, r3
 800b98a:	7e3b      	ldrb	r3, [r7, #24]
 800b98c:	b21b      	sxth	r3, r3
 800b98e:	4313      	orrs	r3, r2
 800b990:	b21a      	sxth	r2, r3
 800b992:	4b4f      	ldr	r3, [pc, #316]	; (800bad0 <BME280_init+0x270>)
 800b994:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 800b998:	7efb      	ldrb	r3, [r7, #27]
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	b21a      	sxth	r2, r3
 800b99e:	7ebb      	ldrb	r3, [r7, #26]
 800b9a0:	b21b      	sxth	r3, r3
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	b21a      	sxth	r2, r3
 800b9a6:	4b4a      	ldr	r3, [pc, #296]	; (800bad0 <BME280_init+0x270>)
 800b9a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 800b9ac:	7f7b      	ldrb	r3, [r7, #29]
 800b9ae:	021b      	lsls	r3, r3, #8
 800b9b0:	b21a      	sxth	r2, r3
 800b9b2:	7f3b      	ldrb	r3, [r7, #28]
 800b9b4:	b21b      	sxth	r3, r3
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	b21a      	sxth	r2, r3
 800b9ba:	4b45      	ldr	r3, [pc, #276]	; (800bad0 <BME280_init+0x270>)
 800b9bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 800b9c0:	7ffb      	ldrb	r3, [r7, #31]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	b21a      	sxth	r2, r3
 800b9c6:	7fbb      	ldrb	r3, [r7, #30]
 800b9c8:	b21b      	sxth	r3, r3
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	b21a      	sxth	r2, r3
 800b9ce:	4b40      	ldr	r3, [pc, #256]	; (800bad0 <BME280_init+0x270>)
 800b9d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  bme280._dig_H1 = calib[25];
 800b9d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b9d8:	4b3d      	ldr	r3, [pc, #244]	; (800bad0 <BME280_init+0x270>)
 800b9da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	  BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 800b9de:	f107 0308 	add.w	r3, r7, #8
 800b9e2:	2207      	movs	r2, #7
 800b9e4:	21e1      	movs	r1, #225	; 0xe1
 800b9e6:	20ec      	movs	r0, #236	; 0xec
 800b9e8:	f000 fa42 	bl	800be70 <BME280_readBytes>
	  bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 800b9ec:	7a7b      	ldrb	r3, [r7, #9]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	b21a      	sxth	r2, r3
 800b9f2:	7a3b      	ldrb	r3, [r7, #8]
 800b9f4:	b21b      	sxth	r3, r3
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	b21a      	sxth	r2, r3
 800b9fa:	4b35      	ldr	r3, [pc, #212]	; (800bad0 <BME280_init+0x270>)
 800b9fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  bme280._dig_H3 = calib[2];
 800ba00:	7aba      	ldrb	r2, [r7, #10]
 800ba02:	4b33      	ldr	r3, [pc, #204]	; (800bad0 <BME280_init+0x270>)
 800ba04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	  bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 800ba08:	7afb      	ldrb	r3, [r7, #11]
 800ba0a:	021a      	lsls	r2, r3, #8
 800ba0c:	7b3b      	ldrb	r3, [r7, #12]
 800ba0e:	011b      	lsls	r3, r3, #4
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	4313      	orrs	r3, r2
 800ba14:	111b      	asrs	r3, r3, #4
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	4b2d      	ldr	r3, [pc, #180]	; (800bad0 <BME280_init+0x270>)
 800ba1a:	871a      	strh	r2, [r3, #56]	; 0x38
	  bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 800ba1c:	7b7b      	ldrb	r3, [r7, #13]
 800ba1e:	021a      	lsls	r2, r3, #8
 800ba20:	7b3b      	ldrb	r3, [r7, #12]
 800ba22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba26:	4313      	orrs	r3, r2
 800ba28:	111b      	asrs	r3, r3, #4
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	4b28      	ldr	r3, [pc, #160]	; (800bad0 <BME280_init+0x270>)
 800ba2e:	875a      	strh	r2, [r3, #58]	; 0x3a
	  bme280._dig_H6 = calib[6];
 800ba30:	7bba      	ldrb	r2, [r7, #14]
 800ba32:	4b27      	ldr	r3, [pc, #156]	; (800bad0 <BME280_init+0x270>)
 800ba34:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	  /* base altitude set */
	  int32_t p = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	62bb      	str	r3, [r7, #40]	; 0x28
	  float comP = 0;
 800ba3c:	f04f 0300 	mov.w	r3, #0
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
	  double sum = 0;
 800ba42:	f04f 0300 	mov.w	r3, #0
 800ba46:	f04f 0400 	mov.w	r4, #0
 800ba4a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	  for(int i=0; i<10; i++){
 800ba4e:	2300      	movs	r3, #0
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba52:	e028      	b.n	800baa6 <BME280_init+0x246>
		  p = BME280_readPressure();
 800ba54:	f7ff feed 	bl	800b832 <BME280_readPressure>
 800ba58:	62b8      	str	r0, [r7, #40]	; 0x28
		  comP = BME280_compensate_P(p)/25600.0;
 800ba5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5c:	f000 f83c 	bl	800bad8 <BME280_compensate_P>
 800ba60:	4603      	mov	r3, r0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f4 fd5e 	bl	8000524 <__aeabi_ui2d>
 800ba68:	f04f 0200 	mov.w	r2, #0
 800ba6c:	4b19      	ldr	r3, [pc, #100]	; (800bad4 <BME280_init+0x274>)
 800ba6e:	f7f4 fefd 	bl	800086c <__aeabi_ddiv>
 800ba72:	4603      	mov	r3, r0
 800ba74:	460c      	mov	r4, r1
 800ba76:	4618      	mov	r0, r3
 800ba78:	4621      	mov	r1, r4
 800ba7a:	f7f5 f8c5 	bl	8000c08 <__aeabi_d2f>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	627b      	str	r3, [r7, #36]	; 0x24
		  sum += comP;
 800ba82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba84:	f7f4 fd70 	bl	8000568 <__aeabi_f2d>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4623      	mov	r3, r4
 800ba90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ba94:	f7f4 fc0a 	bl	80002ac <__adddf3>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	  for(int i=0; i<10; i++){
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	3301      	adds	r3, #1
 800baa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa8:	2b09      	cmp	r3, #9
 800baaa:	ddd3      	ble.n	800ba54 <BME280_init+0x1f4>
	  }
	  bme280.base_P = (float)sum/10;
 800baac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800bab0:	f7f5 f8aa 	bl	8000c08 <__aeabi_d2f>
 800bab4:	ee06 0a90 	vmov	s13, r0
 800bab8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800babc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bac0:	4b03      	ldr	r3, [pc, #12]	; (800bad0 <BME280_init+0x270>)
 800bac2:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800bac6:	bf00      	nop
 800bac8:	373c      	adds	r7, #60	; 0x3c
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd90      	pop	{r4, r7, pc}
 800bace:	bf00      	nop
 800bad0:	20001a2c 	.word	0x20001a2c
 800bad4:	40d90000 	.word	0x40d90000

0800bad8 <BME280_compensate_P>:
}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 800bad8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800badc:	b088      	sub	sp, #32
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 800bae2:	4b65      	ldr	r3, [pc, #404]	; (800bc78 <BME280_compensate_P+0x1a0>)
 800bae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae6:	4619      	mov	r1, r3
 800bae8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800baec:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800baf0:	f142 34ff 	adc.w	r4, r2, #4294967295
 800baf4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	fb02 f203 	mul.w	r2, r2, r3
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	69b9      	ldr	r1, [r7, #24]
 800bb04:	fb01 f303 	mul.w	r3, r1, r3
 800bb08:	441a      	add	r2, r3
 800bb0a:	69b9      	ldr	r1, [r7, #24]
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	fba1 3403 	umull	r3, r4, r1, r3
 800bb12:	4422      	add	r2, r4
 800bb14:	4614      	mov	r4, r2
 800bb16:	4a58      	ldr	r2, [pc, #352]	; (800bc78 <BME280_compensate_P+0x1a0>)
 800bb18:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 800bb1c:	b211      	sxth	r1, r2
 800bb1e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800bb22:	fb01 f504 	mul.w	r5, r1, r4
 800bb26:	fb03 f002 	mul.w	r0, r3, r2
 800bb2a:	4428      	add	r0, r5
 800bb2c:	fba3 3401 	umull	r3, r4, r3, r1
 800bb30:	1902      	adds	r2, r0, r4
 800bb32:	4614      	mov	r4, r2
 800bb34:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800bb38:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 800bb3c:	4b4e      	ldr	r3, [pc, #312]	; (800bc78 <BME280_compensate_P+0x1a0>)
 800bb3e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800bb42:	b21b      	sxth	r3, r3
 800bb44:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	fb04 f102 	mul.w	r1, r4, r2
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	fb03 f202 	mul.w	r2, r3, r2
 800bb54:	1888      	adds	r0, r1, r2
 800bb56:	69ba      	ldr	r2, [r7, #24]
 800bb58:	fba2 1203 	umull	r1, r2, r2, r3
 800bb5c:	1883      	adds	r3, r0, r2
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f04f 0500 	mov.w	r5, #0
 800bb64:	f04f 0600 	mov.w	r6, #0
 800bb68:	0456      	lsls	r6, r2, #17
 800bb6a:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800bb6e:	044d      	lsls	r5, r1, #17
 800bb70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb74:	186b      	adds	r3, r5, r1
 800bb76:	eb46 0402 	adc.w	r4, r6, r2
 800bb7a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 800bb7e:	4b3e      	ldr	r3, [pc, #248]	; (800bc78 <BME280_compensate_P+0x1a0>)
 800bb80:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800bb84:	b219      	sxth	r1, r3
 800bb86:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800bb8a:	f04f 0500 	mov.w	r5, #0
 800bb8e:	f04f 0600 	mov.w	r6, #0
 800bb92:	00ce      	lsls	r6, r1, #3
 800bb94:	2500      	movs	r5, #0
 800bb96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb9a:	186b      	adds	r3, r5, r1
 800bb9c:	eb46 0402 	adc.w	r4, r6, r2
 800bba0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	fb02 f203 	mul.w	r2, r2, r3
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	69b9      	ldr	r1, [r7, #24]
 800bbb0:	fb01 f303 	mul.w	r3, r1, r3
 800bbb4:	441a      	add	r2, r3
 800bbb6:	69b9      	ldr	r1, [r7, #24]
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	fba1 3403 	umull	r3, r4, r1, r3
 800bbbe:	4422      	add	r2, r4
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	4a2d      	ldr	r2, [pc, #180]	; (800bc78 <BME280_compensate_P+0x1a0>)
 800bbc4:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800bbc8:	b211      	sxth	r1, r2
 800bbca:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800bbce:	fb01 f504 	mul.w	r5, r1, r4
 800bbd2:	fb03 f002 	mul.w	r0, r3, r2
 800bbd6:	4428      	add	r0, r5
 800bbd8:	fba3 3401 	umull	r3, r4, r3, r1
 800bbdc:	1902      	adds	r2, r0, r4
 800bbde:	4614      	mov	r4, r2
 800bbe0:	f04f 0100 	mov.w	r1, #0
 800bbe4:	f04f 0200 	mov.w	r2, #0
 800bbe8:	0a19      	lsrs	r1, r3, #8
 800bbea:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800bbee:	1222      	asrs	r2, r4, #8
 800bbf0:	4b21      	ldr	r3, [pc, #132]	; (800bc78 <BME280_compensate_P+0x1a0>)
 800bbf2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bbf6:	b21b      	sxth	r3, r3
 800bbf8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800bbfc:	69b8      	ldr	r0, [r7, #24]
 800bbfe:	fb04 f500 	mul.w	r5, r4, r0
 800bc02:	69f8      	ldr	r0, [r7, #28]
 800bc04:	fb03 f000 	mul.w	r0, r3, r0
 800bc08:	4428      	add	r0, r5
 800bc0a:	69bd      	ldr	r5, [r7, #24]
 800bc0c:	fba5 5603 	umull	r5, r6, r5, r3
 800bc10:	1983      	adds	r3, r0, r6
 800bc12:	461e      	mov	r6, r3
 800bc14:	f04f 0b00 	mov.w	fp, #0
 800bc18:	f04f 0c00 	mov.w	ip, #0
 800bc1c:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800bc20:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800bc24:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 800bc28:	eb1b 0301 	adds.w	r3, fp, r1
 800bc2c:	eb4c 0402 	adc.w	r4, ip, r2
 800bc30:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 800bc34:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bc38:	1c19      	adds	r1, r3, #0
 800bc3a:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800bc3e:	4b0e      	ldr	r3, [pc, #56]	; (800bc78 <BME280_compensate_P+0x1a0>)
 800bc40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	f04f 0400 	mov.w	r4, #0
 800bc48:	fb03 f502 	mul.w	r5, r3, r2
 800bc4c:	fb01 f004 	mul.w	r0, r1, r4
 800bc50:	4428      	add	r0, r5
 800bc52:	fba1 3403 	umull	r3, r4, r1, r3
 800bc56:	1902      	adds	r2, r0, r4
 800bc58:	4614      	mov	r4, r2
 800bc5a:	f04f 0100 	mov.w	r1, #0
 800bc5e:	f04f 0200 	mov.w	r2, #0
 800bc62:	1061      	asrs	r1, r4, #1
 800bc64:	17e2      	asrs	r2, r4, #31
 800bc66:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 800bc6a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bc6e:	4323      	orrs	r3, r4
 800bc70:	d104      	bne.n	800bc7c <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e0d7      	b.n	800be26 <BME280_compensate_P+0x34e>
 800bc76:	bf00      	nop
 800bc78:	20001a2c 	.word	0x20001a2c
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800bc82:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800bc86:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	ea4f 0963 	mov.w	r9, r3, asr #1
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800bc96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bc9a:	4645      	mov	r5, r8
 800bc9c:	464e      	mov	r6, r9
 800bc9e:	1aed      	subs	r5, r5, r3
 800bca0:	eb66 0604 	sbc.w	r6, r6, r4
 800bca4:	46a8      	mov	r8, r5
 800bca6:	46b1      	mov	r9, r6
 800bca8:	eb18 0308 	adds.w	r3, r8, r8
 800bcac:	eb49 0409 	adc.w	r4, r9, r9
 800bcb0:	4698      	mov	r8, r3
 800bcb2:	46a1      	mov	r9, r4
 800bcb4:	eb18 0805 	adds.w	r8, r8, r5
 800bcb8:	eb49 0906 	adc.w	r9, r9, r6
 800bcbc:	f04f 0100 	mov.w	r1, #0
 800bcc0:	f04f 0200 	mov.w	r2, #0
 800bcc4:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800bcc8:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 800bccc:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800bcd0:	eb18 0801 	adds.w	r8, r8, r1
 800bcd4:	eb49 0902 	adc.w	r9, r9, r2
 800bcd8:	f04f 0100 	mov.w	r1, #0
 800bcdc:	f04f 0200 	mov.w	r2, #0
 800bce0:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800bce4:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800bce8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800bcec:	4688      	mov	r8, r1
 800bcee:	4691      	mov	r9, r2
 800bcf0:	eb18 0805 	adds.w	r8, r8, r5
 800bcf4:	eb49 0906 	adc.w	r9, r9, r6
 800bcf8:	f04f 0100 	mov.w	r1, #0
 800bcfc:	f04f 0200 	mov.w	r2, #0
 800bd00:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800bd04:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800bd08:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800bd0c:	4688      	mov	r8, r1
 800bd0e:	4691      	mov	r9, r2
 800bd10:	eb18 0005 	adds.w	r0, r8, r5
 800bd14:	eb49 0106 	adc.w	r1, r9, r6
 800bd18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd1c:	f7f4 ffc4 	bl	8000ca8 <__aeabi_ldivmod>
 800bd20:	4603      	mov	r3, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 800bd28:	4b41      	ldr	r3, [pc, #260]	; (800be30 <BME280_compensate_P+0x358>)
 800bd2a:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800bd2e:	b219      	sxth	r1, r3
 800bd30:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800bd34:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800bd38:	f04f 0300 	mov.w	r3, #0
 800bd3c:	f04f 0400 	mov.w	r4, #0
 800bd40:	0b6b      	lsrs	r3, r5, #13
 800bd42:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800bd46:	1374      	asrs	r4, r6, #13
 800bd48:	fb03 f502 	mul.w	r5, r3, r2
 800bd4c:	fb01 f004 	mul.w	r0, r1, r4
 800bd50:	4428      	add	r0, r5
 800bd52:	fba1 1203 	umull	r1, r2, r1, r3
 800bd56:	1883      	adds	r3, r0, r2
 800bd58:	461a      	mov	r2, r3
 800bd5a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800bd5e:	f04f 0300 	mov.w	r3, #0
 800bd62:	f04f 0400 	mov.w	r4, #0
 800bd66:	0b6b      	lsrs	r3, r5, #13
 800bd68:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800bd6c:	1374      	asrs	r4, r6, #13
 800bd6e:	fb03 f502 	mul.w	r5, r3, r2
 800bd72:	fb01 f004 	mul.w	r0, r1, r4
 800bd76:	4428      	add	r0, r5
 800bd78:	fba1 1203 	umull	r1, r2, r1, r3
 800bd7c:	1883      	adds	r3, r0, r2
 800bd7e:	461a      	mov	r2, r3
 800bd80:	f04f 0300 	mov.w	r3, #0
 800bd84:	f04f 0400 	mov.w	r4, #0
 800bd88:	0e4b      	lsrs	r3, r1, #25
 800bd8a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800bd8e:	1654      	asrs	r4, r2, #25
 800bd90:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 800bd94:	4b26      	ldr	r3, [pc, #152]	; (800be30 <BME280_compensate_P+0x358>)
 800bd96:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800bd9a:	b21b      	sxth	r3, r3
 800bd9c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	fb04 f102 	mul.w	r1, r4, r2
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	fb03 f202 	mul.w	r2, r3, r2
 800bdac:	1888      	adds	r0, r1, r2
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	fba2 1203 	umull	r1, r2, r2, r3
 800bdb4:	1883      	adds	r3, r0, r2
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f04f 0300 	mov.w	r3, #0
 800bdbc:	f04f 0400 	mov.w	r4, #0
 800bdc0:	0ccb      	lsrs	r3, r1, #19
 800bdc2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800bdc6:	14d4      	asrs	r4, r2, #19
 800bdc8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 800bdcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bdd0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bdd4:	eb11 0803 	adds.w	r8, r1, r3
 800bdd8:	eb42 0904 	adc.w	r9, r2, r4
 800bddc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bde0:	eb13 0508 	adds.w	r5, r3, r8
 800bde4:	eb44 0609 	adc.w	r6, r4, r9
 800bde8:	f04f 0100 	mov.w	r1, #0
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	0a29      	lsrs	r1, r5, #8
 800bdf2:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800bdf6:	1232      	asrs	r2, r6, #8
 800bdf8:	4b0d      	ldr	r3, [pc, #52]	; (800be30 <BME280_compensate_P+0x358>)
 800bdfa:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800bdfe:	b21d      	sxth	r5, r3
 800be00:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800be04:	f04f 0800 	mov.w	r8, #0
 800be08:	f04f 0900 	mov.w	r9, #0
 800be0c:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800be10:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800be14:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800be18:	eb18 0301 	adds.w	r3, r8, r1
 800be1c:	eb49 0402 	adc.w	r4, r9, r2
 800be20:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 800be24:	68bb      	ldr	r3, [r7, #8]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3720      	adds	r7, #32
 800be2a:	46bd      	mov	sp, r7
 800be2c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800be30:	20001a2c 	.word	0x20001a2c

0800be34 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af04      	add	r7, sp, #16
 800be3a:	4603      	mov	r3, r0
 800be3c:	71fb      	strb	r3, [r7, #7]
 800be3e:	460b      	mov	r3, r1
 800be40:	71bb      	strb	r3, [r7, #6]
 800be42:	4613      	mov	r3, r2
 800be44:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(BME280_I2C, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 800be46:	4b09      	ldr	r3, [pc, #36]	; (800be6c <BME280_writeByte+0x38>)
 800be48:	6818      	ldr	r0, [r3, #0]
 800be4a:	79fb      	ldrb	r3, [r7, #7]
 800be4c:	b299      	uxth	r1, r3
 800be4e:	79bb      	ldrb	r3, [r7, #6]
 800be50:	b29a      	uxth	r2, r3
 800be52:	2364      	movs	r3, #100	; 0x64
 800be54:	9302      	str	r3, [sp, #8]
 800be56:	2301      	movs	r3, #1
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	1d7b      	adds	r3, r7, #5
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	2301      	movs	r3, #1
 800be60:	f7f7 fb9c 	bl	800359c <HAL_I2C_Mem_Write>
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20001a2c 	.word	0x20001a2c

0800be70 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 800be70:	b590      	push	{r4, r7, lr}
 800be72:	b087      	sub	sp, #28
 800be74:	af04      	add	r7, sp, #16
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	4603      	mov	r3, r0
 800be7a:	71fb      	strb	r3, [r7, #7]
 800be7c:	460b      	mov	r3, r1
 800be7e:	71bb      	strb	r3, [r7, #6]
 800be80:	4613      	mov	r3, r2
 800be82:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(BME280_I2C, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <BME280_readBytes+0x40>)
 800be86:	6818      	ldr	r0, [r3, #0]
 800be88:	79fb      	ldrb	r3, [r7, #7]
 800be8a:	b299      	uxth	r1, r3
 800be8c:	79bb      	ldrb	r3, [r7, #6]
 800be8e:	b29c      	uxth	r4, r3
 800be90:	797b      	ldrb	r3, [r7, #5]
 800be92:	b29b      	uxth	r3, r3
 800be94:	2264      	movs	r2, #100	; 0x64
 800be96:	9202      	str	r2, [sp, #8]
 800be98:	9301      	str	r3, [sp, #4]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	2301      	movs	r3, #1
 800bea0:	4622      	mov	r2, r4
 800bea2:	f7f7 fc75 	bl	8003790 <HAL_I2C_Mem_Read>
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd90      	pop	{r4, r7, pc}
 800beae:	bf00      	nop
 800beb0:	20001a2c 	.word	0x20001a2c

0800beb4 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
//	GPS_USART_INIT(baudrate);
	/* Set first-time variable */
//	memset(&gps, 0, sizeof(gps));
//	gps.GPS_Data.Status = TM_GPS_Result_FirstDataWaiting;
	TM_GPS_FirstTime = 1;
 800bebc:	4b42      	ldr	r3, [pc, #264]	; (800bfc8 <TM_GPS_Init+0x114>)
 800bebe:	2201      	movs	r2, #1
 800bec0:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gps.GPS_Data.CustomStatementsCount = 0;
 800bec2:	4b42      	ldr	r3, [pc, #264]	; (800bfcc <TM_GPS_Init+0x118>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gps.GPS_Data);
 800beca:	4840      	ldr	r0, [pc, #256]	; (800bfcc <TM_GPS_Init+0x118>)
 800becc:	f001 f942 	bl	800d154 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 800bed0:	4b3f      	ldr	r3, [pc, #252]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f043 0301 	orr.w	r3, r3, #1
 800bed8:	4a3d      	ldr	r2, [pc, #244]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800beda:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 800bedc:	4b3c      	ldr	r3, [pc, #240]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bee4:	4a3a      	ldr	r2, [pc, #232]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bee6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 800bee8:	4b39      	ldr	r3, [pc, #228]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f043 0302 	orr.w	r3, r3, #2
 800bef0:	4a37      	ldr	r2, [pc, #220]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bef2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 800bef4:	4b36      	ldr	r3, [pc, #216]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f043 0320 	orr.w	r3, r3, #32
 800befc:	4a34      	ldr	r2, [pc, #208]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800befe:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 800bf00:	4b33      	ldr	r3, [pc, #204]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f043 0304 	orr.w	r3, r3, #4
 800bf08:	4a31      	ldr	r2, [pc, #196]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf0a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 800bf0c:	4b30      	ldr	r3, [pc, #192]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f043 0308 	orr.w	r3, r3, #8
 800bf14:	4a2e      	ldr	r2, [pc, #184]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf16:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 800bf18:	4b2d      	ldr	r3, [pc, #180]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f043 0310 	orr.w	r3, r3, #16
 800bf20:	4a2b      	ldr	r2, [pc, #172]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf22:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 800bf24:	4b2a      	ldr	r3, [pc, #168]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf2c:	4a28      	ldr	r2, [pc, #160]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf2e:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 800bf30:	4b27      	ldr	r3, [pc, #156]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf38:	4a25      	ldr	r2, [pc, #148]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf3a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 800bf3c:	4b24      	ldr	r3, [pc, #144]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf44:	4a22      	ldr	r2, [pc, #136]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf46:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 800bf48:	4b21      	ldr	r3, [pc, #132]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf50:	4a1f      	ldr	r2, [pc, #124]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf52:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 800bf54:	4b1e      	ldr	r3, [pc, #120]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf5c:	4a1c      	ldr	r2, [pc, #112]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf5e:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 800bf60:	4b1b      	ldr	r3, [pc, #108]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf68:	4a19      	ldr	r2, [pc, #100]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf6a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 800bf6c:	4b18      	ldr	r3, [pc, #96]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf74:	4a16      	ldr	r2, [pc, #88]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf76:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 800bf78:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bf80:	4a13      	ldr	r2, [pc, #76]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf82:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 800bf84:	4b12      	ldr	r3, [pc, #72]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf8c:	4a10      	ldr	r2, [pc, #64]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf8e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 800bf90:	4b0f      	ldr	r3, [pc, #60]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf98:	4a0d      	ldr	r2, [pc, #52]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf9a:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 800bf9c:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfa4:	4a0a      	ldr	r2, [pc, #40]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bfa6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 800bfa8:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bfb0:	4a07      	ldr	r2, [pc, #28]	; (800bfd0 <TM_GPS_Init+0x11c>)
 800bfb2:	6013      	str	r3, [r2, #0]
#endif

	HAL_UART_Receive_DMA(huart, GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 800bfb4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bfb8:	4906      	ldr	r1, [pc, #24]	; (800bfd4 <TM_GPS_Init+0x120>)
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7fb fe46 	bl	8007c4c <HAL_UART_Receive_DMA>
}
 800bfc0:	bf00      	nop
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	2000034c 	.word	0x2000034c
 800bfcc:	20001b58 	.word	0x20001b58
 800bfd0:	20000228 	.word	0x20000228
 800bfd4:	20000358 	.word	0x20000358

0800bfd8 <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0

	/* Check for data in USART */
//	while (!GPS_USART_BUFFER_EMPTY) {

//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 800bfde:	2300      	movs	r3, #0
 800bfe0:	607b      	str	r3, [r7, #4]
 800bfe2:	e017      	b.n	800c014 <TM_GPS_Update+0x3c>
		TM_GPS_INT_Do(&gps.GPS_Data, (char)GPS_DmaBuf[i]);
 800bfe4:	4a17      	ldr	r2, [pc, #92]	; (800c044 <TM_GPS_Update+0x6c>)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4413      	add	r3, r2
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4619      	mov	r1, r3
 800bfee:	4816      	ldr	r0, [pc, #88]	; (800c048 <TM_GPS_Update+0x70>)
 800bff0:	f000 f842 	bl	800c078 <TM_GPS_INT_Do>
		if (gps.GPS_Data.Status == TM_GPS_Result_NewData) {
 800bff4:	4b14      	ldr	r3, [pc, #80]	; (800c048 <TM_GPS_Update+0x70>)
 800bff6:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d107      	bne.n	800c00e <TM_GPS_Update+0x36>
//			return gps.GPS_Data.Status;
			gps.hz_cnt++;
 800bffe:	4b12      	ldr	r3, [pc, #72]	; (800c048 <TM_GPS_Update+0x70>)
 800c000:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800c004:	3301      	adds	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	4b0f      	ldr	r3, [pc, #60]	; (800c048 <TM_GPS_Update+0x70>)
 800c00a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3301      	adds	r3, #1
 800c012:	607b      	str	r3, [r7, #4]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c01a:	dbe3      	blt.n	800bfe4 <TM_GPS_Update+0xc>
//			gps.GPS_Data->Status = TM_GPS_Result_OldData;
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 800c01c:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <TM_GPS_Update+0x74>)
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <TM_GPS_Update+0x58>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gps.GPS_Data, TM_GPS_Result_FirstDataWaiting);
 800c024:	4b08      	ldr	r3, [pc, #32]	; (800c048 <TM_GPS_Update+0x70>)
 800c026:	2202      	movs	r2, #2
 800c028:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800c02c:	2302      	movs	r3, #2
 800c02e:	e004      	b.n	800c03a <TM_GPS_Update+0x62>
	}
	
	/* We have old data */
	TM_GPS_INT_ReturnWithStatus(&gps.GPS_Data, TM_GPS_Result_OldData);
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <TM_GPS_Update+0x70>)
 800c032:	2201      	movs	r2, #1
 800c034:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800c038:	2301      	movs	r3, #1
//	HAL_UART_Receive_IT(&huart4, &GPS_Data->buf, 1);
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20000358 	.word	0x20000358
 800c048:	20001b58 	.word	0x20001b58
 800c04c:	2000034c 	.word	0x2000034c

0800c050 <GPS_calHz>:

void GPS_calHz(){
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0
	gps.hz = gps.hz_cnt;
 800c054:	4b07      	ldr	r3, [pc, #28]	; (800c074 <GPS_calHz+0x24>)
 800c056:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 800c05a:	4b06      	ldr	r3, [pc, #24]	; (800c074 <GPS_calHz+0x24>)
 800c05c:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
	gps.hz_cnt = 0;
 800c060:	4b04      	ldr	r3, [pc, #16]	; (800c074 <GPS_calHz+0x24>)
 800c062:	2200      	movs	r2, #0
 800c064:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
}
 800c068:	bf00      	nop
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20001b58 	.word	0x20001b58

0800c078 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 800c078:	b590      	push	{r4, r7, lr}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 f837 	bl	800d0f8 <TM_GPS_INT_FlagsOk>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 f85f 	bl	800d154 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	}
	if (c == '$') {										/* Start of string detected */
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	2b24      	cmp	r3, #36	; 0x24
 800c0a2:	d116      	bne.n	800c0d2 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 800c0a4:	4b5d      	ldr	r3, [pc, #372]	; (800c21c <TM_GPS_INT_Do+0x1a4>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 800c0aa:	4b5d      	ldr	r3, [pc, #372]	; (800c220 <TM_GPS_INT_Do+0x1a8>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 800c0b0:	4b5c      	ldr	r3, [pc, #368]	; (800c224 <TM_GPS_INT_Do+0x1ac>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 800c0b6:	4b5c      	ldr	r3, [pc, #368]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 800c0bc:	4b5a      	ldr	r3, [pc, #360]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	1c5a      	adds	r2, r3, #1
 800c0c2:	b2d1      	uxtb	r1, r2
 800c0c4:	4a58      	ldr	r2, [pc, #352]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c0c6:	7011      	strb	r1, [r2, #0]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4a58      	ldr	r2, [pc, #352]	; (800c22c <TM_GPS_INT_Do+0x1b4>)
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	5453      	strb	r3, [r2, r1]
 800c0d0:	e09b      	b.n	800c20a <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	2b2c      	cmp	r3, #44	; 0x2c
 800c0d6:	d120      	bne.n	800c11a <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 800c0d8:	4b51      	ldr	r3, [pc, #324]	; (800c220 <TM_GPS_INT_Do+0x1a8>)
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	4053      	eors	r3, r2
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	4b4f      	ldr	r3, [pc, #316]	; (800c220 <TM_GPS_INT_Do+0x1a8>)
 800c0e4:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 800c0e6:	4b50      	ldr	r3, [pc, #320]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	b2d1      	uxtb	r1, r2
 800c0ee:	4a4e      	ldr	r2, [pc, #312]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c0f0:	7011      	strb	r1, [r2, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4b4d      	ldr	r3, [pc, #308]	; (800c22c <TM_GPS_INT_Do+0x1b4>)
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f001 f84e 	bl	800d19c <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f89f 	bl	800c244 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 800c106:	4b47      	ldr	r3, [pc, #284]	; (800c224 <TM_GPS_INT_Do+0x1ac>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	3301      	adds	r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4b45      	ldr	r3, [pc, #276]	; (800c224 <TM_GPS_INT_Do+0x1ac>)
 800c110:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 800c112:	4b45      	ldr	r3, [pc, #276]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c114:	2200      	movs	r2, #0
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	e077      	b.n	800c20a <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	2b0a      	cmp	r3, #10
 800c11e:	d113      	bne.n	800c148 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 800c120:	4b40      	ldr	r3, [pc, #256]	; (800c224 <TM_GPS_INT_Do+0x1ac>)
 800c122:	2200      	movs	r2, #0
 800c124:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 800c126:	4b42      	ldr	r3, [pc, #264]	; (800c230 <TM_GPS_INT_Do+0x1b8>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b03      	cmp	r3, #3
 800c12c:	d16d      	bne.n	800c20a <TM_GPS_INT_Do+0x192>
 800c12e:	4b41      	ldr	r3, [pc, #260]	; (800c234 <TM_GPS_INT_Do+0x1bc>)
 800c130:	781a      	ldrb	r2, [r3, #0]
 800c132:	4b41      	ldr	r3, [pc, #260]	; (800c238 <TM_GPS_INT_Do+0x1c0>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d167      	bne.n	800c20a <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 800c13a:	4b40      	ldr	r3, [pc, #256]	; (800c23c <TM_GPS_INT_Do+0x1c4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c142:	4a3e      	ldr	r2, [pc, #248]	; (800c23c <TM_GPS_INT_Do+0x1c4>)
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	e060      	b.n	800c20a <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 800c148:	78fb      	ldrb	r3, [r7, #3]
 800c14a:	2b0d      	cmp	r3, #13
 800c14c:	d128      	bne.n	800c1a0 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 800c14e:	4b36      	ldr	r3, [pc, #216]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	b2d1      	uxtb	r1, r2
 800c156:	4a34      	ldr	r2, [pc, #208]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c158:	7011      	strb	r1, [r2, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	4b33      	ldr	r3, [pc, #204]	; (800c22c <TM_GPS_INT_Do+0x1b4>)
 800c15e:	2100      	movs	r1, #0
 800c160:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 800c162:	4b32      	ldr	r3, [pc, #200]	; (800c22c <TM_GPS_INT_Do+0x1b4>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	4618      	mov	r0, r3
 800c168:	f000 ff9c 	bl	800d0a4 <TM_GPS_INT_Hex2Dec>
 800c16c:	4603      	mov	r3, r0
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	b2dc      	uxtb	r4, r3
 800c172:	4b2e      	ldr	r3, [pc, #184]	; (800c22c <TM_GPS_INT_Do+0x1b4>)
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 ff94 	bl	800d0a4 <TM_GPS_INT_Hex2Dec>
 800c17c:	4603      	mov	r3, r0
 800c17e:	4423      	add	r3, r4
 800c180:	b2da      	uxtb	r2, r3
 800c182:	4b2f      	ldr	r3, [pc, #188]	; (800c240 <TM_GPS_INT_Do+0x1c8>)
 800c184:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 800c186:	4b2e      	ldr	r3, [pc, #184]	; (800c240 <TM_GPS_INT_Do+0x1c8>)
 800c188:	781a      	ldrb	r2, [r3, #0]
 800c18a:	4b25      	ldr	r3, [pc, #148]	; (800c220 <TM_GPS_INT_Do+0x1a8>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d002      	beq.n	800c198 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 ffde 	bl	800d154 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 800c198:	4b22      	ldr	r3, [pc, #136]	; (800c224 <TM_GPS_INT_Do+0x1ac>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	e034      	b.n	800c20a <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a4:	d11c      	bne.n	800c1e0 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 800c1a6:	4b1d      	ldr	r3, [pc, #116]	; (800c21c <TM_GPS_INT_Do+0x1a4>)
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 800c1ac:	4b1e      	ldr	r3, [pc, #120]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	b2d1      	uxtb	r1, r2
 800c1b4:	4a1c      	ldr	r2, [pc, #112]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c1b6:	7011      	strb	r1, [r2, #0]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	4b1c      	ldr	r3, [pc, #112]	; (800c22c <TM_GPS_INT_Do+0x1b4>)
 800c1bc:	2100      	movs	r1, #0
 800c1be:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 ffeb 	bl	800d19c <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f83c 	bl	800c244 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 800c1cc:	4b15      	ldr	r3, [pc, #84]	; (800c224 <TM_GPS_INT_Do+0x1ac>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	4b13      	ldr	r3, [pc, #76]	; (800c224 <TM_GPS_INT_Do+0x1ac>)
 800c1d6:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 800c1d8:	4b13      	ldr	r3, [pc, #76]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	e014      	b.n	800c20a <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 800c1e0:	4b0e      	ldr	r3, [pc, #56]	; (800c21c <TM_GPS_INT_Do+0x1a4>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d106      	bne.n	800c1f6 <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 800c1e8:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <TM_GPS_INT_Do+0x1a8>)
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	78fb      	ldrb	r3, [r7, #3]
 800c1ee:	4053      	eors	r3, r2
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <TM_GPS_INT_Do+0x1a8>)
 800c1f4:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 800c1f6:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	b2d1      	uxtb	r1, r2
 800c1fe:	4a0a      	ldr	r2, [pc, #40]	; (800c228 <TM_GPS_INT_Do+0x1b0>)
 800c200:	7011      	strb	r1, [r2, #0]
 800c202:	4619      	mov	r1, r3
 800c204:	4a09      	ldr	r2, [pc, #36]	; (800c22c <TM_GPS_INT_Do+0x1b4>)
 800c206:	78fb      	ldrb	r3, [r7, #3]
 800c208:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fe3a 	bl	800ce84 <TM_GPS_INT_Return>
 800c210:	4603      	mov	r3, r0
}
 800c212:	4618      	mov	r0, r3
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	bd90      	pop	{r4, r7, pc}
 800c21a:	bf00      	nop
 800c21c:	20000223 	.word	0x20000223
 800c220:	20000221 	.word	0x20000221
 800c224:	2000021f 	.word	0x2000021f
 800c228:	20000220 	.word	0x20000220
 800c22c:	20000210 	.word	0x20000210
 800c230:	20000014 	.word	0x20000014
 800c234:	20000484 	.word	0x20000484
 800c238:	20000485 	.word	0x20000485
 800c23c:	20000224 	.word	0x20000224
 800c240:	20000222 	.word	0x20000222

0800c244 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 800c244:	b5b0      	push	{r4, r5, r7, lr}
 800c246:	ed2d 8b02 	vpush	{d8}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 800c250:	4bc9      	ldr	r3, [pc, #804]	; (800c578 <TM_GPS_INT_CheckTerm+0x334>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d134      	bne.n	800c2c2 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 800c258:	49c8      	ldr	r1, [pc, #800]	; (800c57c <TM_GPS_INT_CheckTerm+0x338>)
 800c25a:	48c9      	ldr	r0, [pc, #804]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c25c:	f000 febc 	bl	800cfd8 <TM_GPS_INT_StringStartsWith>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 800c266:	4bc7      	ldr	r3, [pc, #796]	; (800c584 <TM_GPS_INT_CheckTerm+0x340>)
 800c268:	2200      	movs	r2, #0
 800c26a:	701a      	strb	r2, [r3, #0]
 800c26c:	e023      	b.n	800c2b6 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 800c26e:	49c6      	ldr	r1, [pc, #792]	; (800c588 <TM_GPS_INT_CheckTerm+0x344>)
 800c270:	48c3      	ldr	r0, [pc, #780]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c272:	f000 feb1 	bl	800cfd8 <TM_GPS_INT_StringStartsWith>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d003      	beq.n	800c284 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 800c27c:	4bc1      	ldr	r3, [pc, #772]	; (800c584 <TM_GPS_INT_CheckTerm+0x340>)
 800c27e:	2201      	movs	r2, #1
 800c280:	701a      	strb	r2, [r3, #0]
 800c282:	e018      	b.n	800c2b6 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 800c284:	49c1      	ldr	r1, [pc, #772]	; (800c58c <TM_GPS_INT_CheckTerm+0x348>)
 800c286:	48be      	ldr	r0, [pc, #760]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c288:	f000 fea6 	bl	800cfd8 <TM_GPS_INT_StringStartsWith>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d003      	beq.n	800c29a <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 800c292:	4bbc      	ldr	r3, [pc, #752]	; (800c584 <TM_GPS_INT_CheckTerm+0x340>)
 800c294:	2202      	movs	r2, #2
 800c296:	701a      	strb	r2, [r3, #0]
 800c298:	e00d      	b.n	800c2b6 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 800c29a:	49bd      	ldr	r1, [pc, #756]	; (800c590 <TM_GPS_INT_CheckTerm+0x34c>)
 800c29c:	48b8      	ldr	r0, [pc, #736]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c29e:	f000 fe9b 	bl	800cfd8 <TM_GPS_INT_StringStartsWith>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d003      	beq.n	800c2b0 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 800c2a8:	4bb6      	ldr	r3, [pc, #728]	; (800c584 <TM_GPS_INT_CheckTerm+0x340>)
 800c2aa:	2203      	movs	r2, #3
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	e002      	b.n	800c2b6 <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 800c2b0:	4bb4      	ldr	r3, [pc, #720]	; (800c584 <TM_GPS_INT_CheckTerm+0x340>)
 800c2b2:	2204      	movs	r2, #4
 800c2b4:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 800c2b6:	49b2      	ldr	r1, [pc, #712]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c2b8:	48b6      	ldr	r0, [pc, #728]	; (800c594 <TM_GPS_INT_CheckTerm+0x350>)
 800c2ba:	f006 fe0b 	bl	8012ed4 <strcpy>
 800c2be:	f000 bdc7 	b.w	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 800c2c2:	4bb0      	ldr	r3, [pc, #704]	; (800c584 <TM_GPS_INT_CheckTerm+0x340>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	015b      	lsls	r3, r3, #5
 800c2c8:	4aab      	ldr	r2, [pc, #684]	; (800c578 <TM_GPS_INT_CheckTerm+0x334>)
 800c2ca:	7812      	ldrb	r2, [r2, #0]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	2b62      	cmp	r3, #98	; 0x62
 800c2d2:	f200 8525 	bhi.w	800cd20 <TM_GPS_INT_CheckTerm+0xadc>
 800c2d6:	a201      	add	r2, pc, #4	; (adr r2, 800c2dc <TM_GPS_INT_CheckTerm+0x98>)
 800c2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2dc:	0800c875 	.word	0x0800c875
 800c2e0:	0800c469 	.word	0x0800c469
 800c2e4:	0800c551 	.word	0x0800c551
 800c2e8:	0800c5ad 	.word	0x0800c5ad
 800c2ec:	0800c695 	.word	0x0800c695
 800c2f0:	0800c6dd 	.word	0x0800c6dd
 800c2f4:	0800c6bb 	.word	0x0800c6bb
 800c2f8:	0800cd21 	.word	0x0800cd21
 800c2fc:	0800c6ff 	.word	0x0800c6ff
 800c300:	0800cd21 	.word	0x0800cd21
 800c304:	0800cd21 	.word	0x0800cd21
 800c308:	0800cd21 	.word	0x0800cd21
 800c30c:	0800cd21 	.word	0x0800cd21
 800c310:	0800cd21 	.word	0x0800cd21
 800c314:	0800cd21 	.word	0x0800cd21
 800c318:	0800cd21 	.word	0x0800cd21
 800c31c:	0800cd21 	.word	0x0800cd21
 800c320:	0800cd21 	.word	0x0800cd21
 800c324:	0800cd21 	.word	0x0800cd21
 800c328:	0800cd21 	.word	0x0800cd21
 800c32c:	0800cd21 	.word	0x0800cd21
 800c330:	0800cd21 	.word	0x0800cd21
 800c334:	0800cd21 	.word	0x0800cd21
 800c338:	0800cd21 	.word	0x0800cd21
 800c33c:	0800cd21 	.word	0x0800cd21
 800c340:	0800cd21 	.word	0x0800cd21
 800c344:	0800cd21 	.word	0x0800cd21
 800c348:	0800cd21 	.word	0x0800cd21
 800c34c:	0800cd21 	.word	0x0800cd21
 800c350:	0800cd21 	.word	0x0800cd21
 800c354:	0800cd21 	.word	0x0800cd21
 800c358:	0800cd21 	.word	0x0800cd21
 800c35c:	0800cd21 	.word	0x0800cd21
 800c360:	0800ca6b 	.word	0x0800ca6b
 800c364:	0800cd21 	.word	0x0800cd21
 800c368:	0800cd21 	.word	0x0800cd21
 800c36c:	0800cd21 	.word	0x0800cd21
 800c370:	0800cd21 	.word	0x0800cd21
 800c374:	0800c933 	.word	0x0800c933
 800c378:	0800ca8d 	.word	0x0800ca8d
 800c37c:	0800c9d1 	.word	0x0800c9d1
 800c380:	0800cd21 	.word	0x0800cd21
 800c384:	0800cd21 	.word	0x0800cd21
 800c388:	0800cd21 	.word	0x0800cd21
 800c38c:	0800cd21 	.word	0x0800cd21
 800c390:	0800cd21 	.word	0x0800cd21
 800c394:	0800cd21 	.word	0x0800cd21
 800c398:	0800cd21 	.word	0x0800cd21
 800c39c:	0800cd21 	.word	0x0800cd21
 800c3a0:	0800cd21 	.word	0x0800cd21
 800c3a4:	0800cd21 	.word	0x0800cd21
 800c3a8:	0800cd21 	.word	0x0800cd21
 800c3ac:	0800cd21 	.word	0x0800cd21
 800c3b0:	0800cd21 	.word	0x0800cd21
 800c3b4:	0800cd21 	.word	0x0800cd21
 800c3b8:	0800cd21 	.word	0x0800cd21
 800c3bc:	0800cd21 	.word	0x0800cd21
 800c3c0:	0800cd21 	.word	0x0800cd21
 800c3c4:	0800cd21 	.word	0x0800cd21
 800c3c8:	0800cd21 	.word	0x0800cd21
 800c3cc:	0800cd21 	.word	0x0800cd21
 800c3d0:	0800cd21 	.word	0x0800cd21
 800c3d4:	0800cd21 	.word	0x0800cd21
 800c3d8:	0800cd21 	.word	0x0800cd21
 800c3dc:	0800cd21 	.word	0x0800cd21
 800c3e0:	0800cc8d 	.word	0x0800cc8d
 800c3e4:	0800ccb1 	.word	0x0800ccb1
 800c3e8:	0800ccb1 	.word	0x0800ccb1
 800c3ec:	0800ccb1 	.word	0x0800ccb1
 800c3f0:	0800ccb1 	.word	0x0800ccb1
 800c3f4:	0800ccb1 	.word	0x0800ccb1
 800c3f8:	0800ccb1 	.word	0x0800ccb1
 800c3fc:	0800ccb1 	.word	0x0800ccb1
 800c400:	0800ccb1 	.word	0x0800ccb1
 800c404:	0800ccb1 	.word	0x0800ccb1
 800c408:	0800ccb1 	.word	0x0800ccb1
 800c40c:	0800ccb1 	.word	0x0800ccb1
 800c410:	0800ccb1 	.word	0x0800ccb1
 800c414:	0800cb99 	.word	0x0800cb99
 800c418:	0800cb07 	.word	0x0800cb07
 800c41c:	0800cc13 	.word	0x0800cc13
 800c420:	0800cd21 	.word	0x0800cd21
 800c424:	0800cd21 	.word	0x0800cd21
 800c428:	0800cd21 	.word	0x0800cd21
 800c42c:	0800cd21 	.word	0x0800cd21
 800c430:	0800cd21 	.word	0x0800cd21
 800c434:	0800cd21 	.word	0x0800cd21
 800c438:	0800cd21 	.word	0x0800cd21
 800c43c:	0800cd21 	.word	0x0800cd21
 800c440:	0800cd21 	.word	0x0800cd21
 800c444:	0800cd21 	.word	0x0800cd21
 800c448:	0800cd21 	.word	0x0800cd21
 800c44c:	0800cd21 	.word	0x0800cd21
 800c450:	0800cd21 	.word	0x0800cd21
 800c454:	0800cd21 	.word	0x0800cd21
 800c458:	0800cd21 	.word	0x0800cd21
 800c45c:	0800cd21 	.word	0x0800cd21
 800c460:	0800cd21 	.word	0x0800cd21
 800c464:	0800ccfd 	.word	0x0800ccfd
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	4619      	mov	r1, r3
 800c46e:	4844      	ldr	r0, [pc, #272]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c470:	f000 fdcf 	bl	800d012 <TM_GPS_INT_Atoi>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	4a47      	ldr	r2, [pc, #284]	; (800c598 <TM_GPS_INT_CheckTerm+0x354>)
 800c47c:	fba2 2303 	umull	r2, r3, r2, r3
 800c480:	095b      	lsrs	r3, r3, #5
 800c482:	ee07 3a90 	vmov	s15, r3
 800c486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c48a:	4b44      	ldr	r3, [pc, #272]	; (800c59c <TM_GPS_INT_CheckTerm+0x358>)
 800c48c:	edc3 7a00 	vstr	s15, [r3]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 800c490:	4b42      	ldr	r3, [pc, #264]	; (800c59c <TM_GPS_INT_CheckTerm+0x358>)
 800c492:	ed93 7a00 	vldr	s14, [r3]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4b3f      	ldr	r3, [pc, #252]	; (800c598 <TM_GPS_INT_CheckTerm+0x354>)
 800c49a:	fba3 1302 	umull	r1, r3, r3, r2
 800c49e:	095b      	lsrs	r3, r3, #5
 800c4a0:	2164      	movs	r1, #100	; 0x64
 800c4a2:	fb01 f303 	mul.w	r3, r1, r3
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	ee07 3a90 	vmov	s15, r3
 800c4ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4b0:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 800c5a0 <TM_GPS_INT_CheckTerm+0x35c>
 800c4b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c4b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4bc:	4b37      	ldr	r3, [pc, #220]	; (800c59c <TM_GPS_INT_CheckTerm+0x358>)
 800c4be:	edc3 7a00 	vstr	s15, [r3]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	73fb      	strb	r3, [r7, #15]
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	4a2d      	ldr	r2, [pc, #180]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f107 0208 	add.w	r2, r7, #8
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 fd9c 	bl	800d012 <TM_GPS_INT_Atoi>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7f4 f81f 	bl	8000524 <__aeabi_ui2d>
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	200a      	movs	r0, #10
 800c4f0:	f000 fdbc 	bl	800d06c <TM_GPS_INT_Pow>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7f4 f814 	bl	8000524 <__aeabi_ui2d>
 800c4fc:	f04f 0200 	mov.w	r2, #0
 800c500:	4b28      	ldr	r3, [pc, #160]	; (800c5a4 <TM_GPS_INT_CheckTerm+0x360>)
 800c502:	f7f4 f889 	bl	8000618 <__aeabi_dmul>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	4620      	mov	r0, r4
 800c50c:	4629      	mov	r1, r5
 800c50e:	f7f4 f9ad 	bl	800086c <__aeabi_ddiv>
 800c512:	4603      	mov	r3, r0
 800c514:	460c      	mov	r4, r1
 800c516:	4625      	mov	r5, r4
 800c518:	461c      	mov	r4, r3
 800c51a:	4b20      	ldr	r3, [pc, #128]	; (800c59c <TM_GPS_INT_CheckTerm+0x358>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7f4 f822 	bl	8000568 <__aeabi_f2d>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	4620      	mov	r0, r4
 800c52a:	4629      	mov	r1, r5
 800c52c:	f7f3 febe 	bl	80002ac <__adddf3>
 800c530:	4603      	mov	r3, r0
 800c532:	460c      	mov	r4, r1
 800c534:	4618      	mov	r0, r3
 800c536:	4621      	mov	r1, r4
 800c538:	f7f4 fb66 	bl	8000c08 <__aeabi_d2f>
 800c53c:	4602      	mov	r2, r0
 800c53e:	4b17      	ldr	r3, [pc, #92]	; (800c59c <TM_GPS_INT_CheckTerm+0x358>)
 800c540:	601a      	str	r2, [r3, #0]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 800c542:	4b19      	ldr	r3, [pc, #100]	; (800c5a8 <TM_GPS_INT_CheckTerm+0x364>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f043 0301 	orr.w	r3, r3, #1
 800c54a:	4a17      	ldr	r2, [pc, #92]	; (800c5a8 <TM_GPS_INT_CheckTerm+0x364>)
 800c54c:	6013      	str	r3, [r2, #0]
			break;
 800c54e:	e3ea      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 800c550:	4b0b      	ldr	r3, [pc, #44]	; (800c580 <TM_GPS_INT_CheckTerm+0x33c>)
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	2b53      	cmp	r3, #83	; 0x53
 800c556:	d107      	bne.n	800c568 <TM_GPS_INT_CheckTerm+0x324>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 800c558:	4b10      	ldr	r3, [pc, #64]	; (800c59c <TM_GPS_INT_CheckTerm+0x358>)
 800c55a:	edd3 7a00 	vldr	s15, [r3]
 800c55e:	eef1 7a67 	vneg.f32	s15, s15
 800c562:	4b0e      	ldr	r3, [pc, #56]	; (800c59c <TM_GPS_INT_CheckTerm+0x358>)
 800c564:	edc3 7a00 	vstr	s15, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 800c568:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <TM_GPS_INT_CheckTerm+0x364>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c570:	4a0d      	ldr	r2, [pc, #52]	; (800c5a8 <TM_GPS_INT_CheckTerm+0x364>)
 800c572:	6013      	str	r3, [r2, #0]
			break;
 800c574:	e3d7      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
 800c576:	bf00      	nop
 800c578:	2000021f 	.word	0x2000021f
 800c57c:	08016434 	.word	0x08016434
 800c580:	20000210 	.word	0x20000210
 800c584:	20000014 	.word	0x20000014
 800c588:	0801643c 	.word	0x0801643c
 800c58c:	08016444 	.word	0x08016444
 800c590:	0801644c 	.word	0x0801644c
 800c594:	20000350 	.word	0x20000350
 800c598:	51eb851f 	.word	0x51eb851f
 800c59c:	2000022c 	.word	0x2000022c
 800c5a0:	42700000 	.word	0x42700000
 800c5a4:	404e0000 	.word	0x404e0000
 800c5a8:	20000224 	.word	0x20000224
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c5ac:	f107 0308 	add.w	r3, r7, #8
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	48a9      	ldr	r0, [pc, #676]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c5b4:	f000 fd2d 	bl	800d012 <TM_GPS_INT_Atoi>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	4aa7      	ldr	r2, [pc, #668]	; (800c85c <TM_GPS_INT_CheckTerm+0x618>)
 800c5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c4:	095b      	lsrs	r3, r3, #5
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ce:	4ba4      	ldr	r3, [pc, #656]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c5d0:	edc3 7a01 	vstr	s15, [r3, #4]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 800c5d4:	4ba2      	ldr	r3, [pc, #648]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c5d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	4b9f      	ldr	r3, [pc, #636]	; (800c85c <TM_GPS_INT_CheckTerm+0x618>)
 800c5de:	fba3 1302 	umull	r1, r3, r3, r2
 800c5e2:	095b      	lsrs	r3, r3, #5
 800c5e4:	2164      	movs	r1, #100	; 0x64
 800c5e6:	fb01 f303 	mul.w	r3, r1, r3
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	ee07 3a90 	vmov	s15, r3
 800c5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5f4:	ed9f 6a9b 	vldr	s12, [pc, #620]	; 800c864 <TM_GPS_INT_CheckTerm+0x620>
 800c5f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c5fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c600:	4b97      	ldr	r3, [pc, #604]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c602:	edc3 7a01 	vstr	s15, [r3, #4]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	3301      	adds	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
 800c60e:	4a92      	ldr	r2, [pc, #584]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c610:	4413      	add	r3, r2
 800c612:	f107 0208 	add.w	r2, r7, #8
 800c616:	4611      	mov	r1, r2
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 fcfa 	bl	800d012 <TM_GPS_INT_Atoi>
 800c61e:	4603      	mov	r3, r0
 800c620:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	4618      	mov	r0, r3
 800c626:	f7f3 ff7d 	bl	8000524 <__aeabi_ui2d>
 800c62a:	4604      	mov	r4, r0
 800c62c:	460d      	mov	r5, r1
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	4619      	mov	r1, r3
 800c632:	200a      	movs	r0, #10
 800c634:	f000 fd1a 	bl	800d06c <TM_GPS_INT_Pow>
 800c638:	4603      	mov	r3, r0
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f3 ff72 	bl	8000524 <__aeabi_ui2d>
 800c640:	f04f 0200 	mov.w	r2, #0
 800c644:	4b88      	ldr	r3, [pc, #544]	; (800c868 <TM_GPS_INT_CheckTerm+0x624>)
 800c646:	f7f3 ffe7 	bl	8000618 <__aeabi_dmul>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f4 f90b 	bl	800086c <__aeabi_ddiv>
 800c656:	4603      	mov	r3, r0
 800c658:	460c      	mov	r4, r1
 800c65a:	4625      	mov	r5, r4
 800c65c:	461c      	mov	r4, r3
 800c65e:	4b80      	ldr	r3, [pc, #512]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	4618      	mov	r0, r3
 800c664:	f7f3 ff80 	bl	8000568 <__aeabi_f2d>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 fe1c 	bl	80002ac <__adddf3>
 800c674:	4603      	mov	r3, r0
 800c676:	460c      	mov	r4, r1
 800c678:	4618      	mov	r0, r3
 800c67a:	4621      	mov	r1, r4
 800c67c:	f7f4 fac4 	bl	8000c08 <__aeabi_d2f>
 800c680:	4602      	mov	r2, r0
 800c682:	4b77      	ldr	r3, [pc, #476]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c684:	605a      	str	r2, [r3, #4]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 800c686:	4b79      	ldr	r3, [pc, #484]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f043 0302 	orr.w	r3, r3, #2
 800c68e:	4a77      	ldr	r2, [pc, #476]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c690:	6013      	str	r3, [r2, #0]
			break;
 800c692:	e348      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 800c694:	4b70      	ldr	r3, [pc, #448]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b57      	cmp	r3, #87	; 0x57
 800c69a:	d107      	bne.n	800c6ac <TM_GPS_INT_CheckTerm+0x468>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 800c69c:	4b70      	ldr	r3, [pc, #448]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c69e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c6a2:	eef1 7a67 	vneg.f32	s15, s15
 800c6a6:	4b6e      	ldr	r3, [pc, #440]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c6a8:	edc3 7a01 	vstr	s15, [r3, #4]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 800c6ac:	4b6f      	ldr	r3, [pc, #444]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f043 0320 	orr.w	r3, r3, #32
 800c6b4:	4a6d      	ldr	r2, [pc, #436]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c6b6:	6013      	str	r3, [r2, #0]
			break;
 800c6b8:	e335      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c6ba:	f107 0308 	add.w	r3, r7, #8
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4865      	ldr	r0, [pc, #404]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c6c2:	f000 fca6 	bl	800d012 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	4b65      	ldr	r3, [pc, #404]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c6cc:	731a      	strb	r2, [r3, #12]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 800c6ce:	4b67      	ldr	r3, [pc, #412]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f043 0304 	orr.w	r3, r3, #4
 800c6d6:	4a65      	ldr	r2, [pc, #404]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c6d8:	6013      	str	r3, [r2, #0]
			break;
 800c6da:	e324      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c6dc:	f107 0308 	add.w	r3, r7, #8
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	485d      	ldr	r0, [pc, #372]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c6e4:	f000 fc95 	bl	800d012 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	4b5c      	ldr	r3, [pc, #368]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c6ee:	735a      	strb	r2, [r3, #13]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 800c6f0:	4b5e      	ldr	r3, [pc, #376]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f043 0308 	orr.w	r3, r3, #8
 800c6f8:	4a5c      	ldr	r2, [pc, #368]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c6fa:	6013      	str	r3, [r2, #0]
			break;
 800c6fc:	e313      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 800c6fe:	4b56      	ldr	r3, [pc, #344]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	2b2d      	cmp	r3, #45	; 0x2d
 800c704:	d156      	bne.n	800c7b4 <TM_GPS_INT_CheckTerm+0x570>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 800c706:	f107 0308 	add.w	r3, r7, #8
 800c70a:	4619      	mov	r1, r3
 800c70c:	4858      	ldr	r0, [pc, #352]	; (800c870 <TM_GPS_INT_CheckTerm+0x62c>)
 800c70e:	f000 fc80 	bl	800d012 <TM_GPS_INT_Atoi>
 800c712:	4603      	mov	r3, r0
 800c714:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	ee07 3a90 	vmov	s15, r3
 800c71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c720:	4b4f      	ldr	r3, [pc, #316]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c722:	edc3 7a02 	vstr	s15, [r3, #8]
				
				count++;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
 800c728:	3301      	adds	r3, #1
 800c72a:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	3301      	adds	r3, #1
 800c730:	73fb      	strb	r3, [r7, #15]
 800c732:	7bfb      	ldrb	r3, [r7, #15]
 800c734:	4a48      	ldr	r2, [pc, #288]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c736:	4413      	add	r3, r2
 800c738:	f107 0208 	add.w	r2, r7, #8
 800c73c:	4611      	mov	r1, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 fc67 	bl	800d012 <TM_GPS_INT_Atoi>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f3 feea 	bl	8000524 <__aeabi_ui2d>
 800c750:	4604      	mov	r4, r0
 800c752:	460d      	mov	r5, r1
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	4619      	mov	r1, r3
 800c758:	200a      	movs	r0, #10
 800c75a:	f000 fc87 	bl	800d06c <TM_GPS_INT_Pow>
 800c75e:	4603      	mov	r3, r0
 800c760:	4618      	mov	r0, r3
 800c762:	f7f3 fedf 	bl	8000524 <__aeabi_ui2d>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4620      	mov	r0, r4
 800c76c:	4629      	mov	r1, r5
 800c76e:	f7f4 f87d 	bl	800086c <__aeabi_ddiv>
 800c772:	4603      	mov	r3, r0
 800c774:	460c      	mov	r4, r1
 800c776:	4625      	mov	r5, r4
 800c778:	461c      	mov	r4, r3
 800c77a:	4b39      	ldr	r3, [pc, #228]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7f3 fef2 	bl	8000568 <__aeabi_f2d>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4620      	mov	r0, r4
 800c78a:	4629      	mov	r1, r5
 800c78c:	f7f3 fd8e 	bl	80002ac <__adddf3>
 800c790:	4603      	mov	r3, r0
 800c792:	460c      	mov	r4, r1
 800c794:	4618      	mov	r0, r3
 800c796:	4621      	mov	r1, r4
 800c798:	f7f4 fa36 	bl	8000c08 <__aeabi_d2f>
 800c79c:	4602      	mov	r2, r0
 800c79e:	4b30      	ldr	r3, [pc, #192]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c7a0:	609a      	str	r2, [r3, #8]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 800c7a2:	4b2f      	ldr	r3, [pc, #188]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c7a4:	edd3 7a02 	vldr	s15, [r3, #8]
 800c7a8:	eef1 7a67 	vneg.f32	s15, s15
 800c7ac:	4b2c      	ldr	r3, [pc, #176]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c7ae:	edc3 7a02 	vstr	s15, [r3, #8]
 800c7b2:	e04a      	b.n	800c84a <TM_GPS_INT_CheckTerm+0x606>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c7b4:	f107 0308 	add.w	r3, r7, #8
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4827      	ldr	r0, [pc, #156]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c7bc:	f000 fc29 	bl	800d012 <TM_GPS_INT_Atoi>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	ee07 3a90 	vmov	s15, r3
 800c7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ce:	4b24      	ldr	r3, [pc, #144]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c7d0:	edc3 7a02 	vstr	s15, [r3, #8]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	73fb      	strb	r3, [r7, #15]
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <TM_GPS_INT_CheckTerm+0x614>)
 800c7de:	4413      	add	r3, r2
 800c7e0:	f107 0208 	add.w	r2, r7, #8
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fc13 	bl	800d012 <TM_GPS_INT_Atoi>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f3 fe96 	bl	8000524 <__aeabi_ui2d>
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	4619      	mov	r1, r3
 800c800:	200a      	movs	r0, #10
 800c802:	f000 fc33 	bl	800d06c <TM_GPS_INT_Pow>
 800c806:	4603      	mov	r3, r0
 800c808:	4618      	mov	r0, r3
 800c80a:	f7f3 fe8b 	bl	8000524 <__aeabi_ui2d>
 800c80e:	4602      	mov	r2, r0
 800c810:	460b      	mov	r3, r1
 800c812:	4620      	mov	r0, r4
 800c814:	4629      	mov	r1, r5
 800c816:	f7f4 f829 	bl	800086c <__aeabi_ddiv>
 800c81a:	4603      	mov	r3, r0
 800c81c:	460c      	mov	r4, r1
 800c81e:	4625      	mov	r5, r4
 800c820:	461c      	mov	r4, r3
 800c822:	4b0f      	ldr	r3, [pc, #60]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	4618      	mov	r0, r3
 800c828:	f7f3 fe9e 	bl	8000568 <__aeabi_f2d>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	4620      	mov	r0, r4
 800c832:	4629      	mov	r1, r5
 800c834:	f7f3 fd3a 	bl	80002ac <__adddf3>
 800c838:	4603      	mov	r3, r0
 800c83a:	460c      	mov	r4, r1
 800c83c:	4618      	mov	r0, r3
 800c83e:	4621      	mov	r1, r4
 800c840:	f7f4 f9e2 	bl	8000c08 <__aeabi_d2f>
 800c844:	4602      	mov	r2, r0
 800c846:	4b06      	ldr	r3, [pc, #24]	; (800c860 <TM_GPS_INT_CheckTerm+0x61c>)
 800c848:	609a      	str	r2, [r3, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 800c84a:	4b08      	ldr	r3, [pc, #32]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f043 0310 	orr.w	r3, r3, #16
 800c852:	4a06      	ldr	r2, [pc, #24]	; (800c86c <TM_GPS_INT_CheckTerm+0x628>)
 800c854:	6013      	str	r3, [r2, #0]
			break;
 800c856:	e266      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
 800c858:	20000210 	.word	0x20000210
 800c85c:	51eb851f 	.word	0x51eb851f
 800c860:	2000022c 	.word	0x2000022c
 800c864:	42700000 	.word	0x42700000
 800c868:	404e0000 	.word	0x404e0000
 800c86c:	20000224 	.word	0x20000224
 800c870:	20000211 	.word	0x20000211
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c874:	f107 0308 	add.w	r3, r7, #8
 800c878:	4619      	mov	r1, r3
 800c87a:	48c1      	ldr	r0, [pc, #772]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800c87c:	f000 fbc9 	bl	800d012 <TM_GPS_INT_Atoi>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	4bbf      	ldr	r3, [pc, #764]	; (800cb84 <TM_GPS_INT_CheckTerm+0x940>)
 800c888:	fba3 1302 	umull	r1, r3, r3, r2
 800c88c:	095b      	lsrs	r3, r3, #5
 800c88e:	2164      	movs	r1, #100	; 0x64
 800c890:	fb01 f303 	mul.w	r3, r1, r3
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	b2da      	uxtb	r2, r3
 800c898:	4bbb      	ldr	r3, [pc, #748]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c89a:	741a      	strb	r2, [r3, #16]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	ee07 3a90 	vmov	s15, r3
 800c8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a6:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800cb8c <TM_GPS_INT_CheckTerm+0x948>
 800c8aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8b2:	ee17 2a90 	vmov	r2, s15
 800c8b6:	4bb3      	ldr	r3, [pc, #716]	; (800cb84 <TM_GPS_INT_CheckTerm+0x940>)
 800c8b8:	fb83 1302 	smull	r1, r3, r3, r2
 800c8bc:	1159      	asrs	r1, r3, #5
 800c8be:	17d3      	asrs	r3, r2, #31
 800c8c0:	1acb      	subs	r3, r1, r3
 800c8c2:	2164      	movs	r1, #100	; 0x64
 800c8c4:	fb01 f303 	mul.w	r3, r1, r3
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	4bae      	ldr	r3, [pc, #696]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c8ce:	73da      	strb	r2, [r3, #15]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	ee07 3a90 	vmov	s15, r3
 800c8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8da:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800cb90 <TM_GPS_INT_CheckTerm+0x94c>
 800c8de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8e6:	ee17 2a90 	vmov	r2, s15
 800c8ea:	4ba6      	ldr	r3, [pc, #664]	; (800cb84 <TM_GPS_INT_CheckTerm+0x940>)
 800c8ec:	fb83 1302 	smull	r1, r3, r3, r2
 800c8f0:	1159      	asrs	r1, r3, #5
 800c8f2:	17d3      	asrs	r3, r2, #31
 800c8f4:	1acb      	subs	r3, r1, r3
 800c8f6:	2164      	movs	r1, #100	; 0x64
 800c8f8:	fb01 f303 	mul.w	r3, r1, r3
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	4ba1      	ldr	r3, [pc, #644]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c902:	739a      	strb	r2, [r3, #14]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800c904:	7bfb      	ldrb	r3, [r7, #15]
 800c906:	3301      	adds	r3, #1
 800c908:	73fb      	strb	r3, [r7, #15]
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	4a9c      	ldr	r2, [pc, #624]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800c90e:	4413      	add	r3, r2
 800c910:	f107 0208 	add.w	r2, r7, #8
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fb7b 	bl	800d012 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	b29a      	uxth	r2, r3
 800c920:	4b99      	ldr	r3, [pc, #612]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c922:	825a      	strh	r2, [r3, #18]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 800c924:	4b9b      	ldr	r3, [pc, #620]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c92c:	4a99      	ldr	r2, [pc, #612]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800c92e:	6013      	str	r3, [r2, #0]
			break;
 800c930:	e1f9      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c932:	f107 0308 	add.w	r3, r7, #8
 800c936:	4619      	mov	r1, r3
 800c938:	4891      	ldr	r0, [pc, #580]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800c93a:	f000 fb6a 	bl	800d012 <TM_GPS_INT_Atoi>
 800c93e:	4603      	mov	r3, r0
 800c940:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	ee07 3a90 	vmov	s15, r3
 800c948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c94c:	4b8e      	ldr	r3, [pc, #568]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c94e:	edc3 7a06 	vstr	s15, [r3, #24]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800c952:	7bfb      	ldrb	r3, [r7, #15]
 800c954:	3301      	adds	r3, #1
 800c956:	73fb      	strb	r3, [r7, #15]
 800c958:	7bfb      	ldrb	r3, [r7, #15]
 800c95a:	4a89      	ldr	r2, [pc, #548]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800c95c:	4413      	add	r3, r2
 800c95e:	f107 0208 	add.w	r2, r7, #8
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fb54 	bl	800d012 <TM_GPS_INT_Atoi>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	ee07 3a90 	vmov	s15, r3
 800c974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c978:	ee17 0a90 	vmov	r0, s15
 800c97c:	f7f3 fdf4 	bl	8000568 <__aeabi_f2d>
 800c980:	4604      	mov	r4, r0
 800c982:	460d      	mov	r5, r1
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	4619      	mov	r1, r3
 800c988:	200a      	movs	r0, #10
 800c98a:	f000 fb6f 	bl	800d06c <TM_GPS_INT_Pow>
 800c98e:	4603      	mov	r3, r0
 800c990:	4618      	mov	r0, r3
 800c992:	f7f3 fdc7 	bl	8000524 <__aeabi_ui2d>
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	4620      	mov	r0, r4
 800c99c:	4629      	mov	r1, r5
 800c99e:	f7f3 ff65 	bl	800086c <__aeabi_ddiv>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	f7f4 f92d 	bl	8000c08 <__aeabi_d2f>
 800c9ae:	ee07 0a10 	vmov	s14, r0
 800c9b2:	4b75      	ldr	r3, [pc, #468]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c9b4:	edd3 7a06 	vldr	s15, [r3, #24]
 800c9b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9bc:	4b72      	ldr	r3, [pc, #456]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c9be:	edc3 7a06 	vstr	s15, [r3, #24]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 800c9c2:	4b74      	ldr	r3, [pc, #464]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9ca:	4a72      	ldr	r2, [pc, #456]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800c9cc:	6013      	str	r3, [r2, #0]
			break;
 800c9ce:	e1aa      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800c9d0:	f107 0308 	add.w	r3, r7, #8
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	486a      	ldr	r0, [pc, #424]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800c9d8:	f000 fb1b 	bl	800d012 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	4b69      	ldr	r3, [pc, #420]	; (800cb84 <TM_GPS_INT_CheckTerm+0x940>)
 800c9e0:	fba3 1302 	umull	r1, r3, r3, r2
 800c9e4:	095b      	lsrs	r3, r3, #5
 800c9e6:	2164      	movs	r1, #100	; 0x64
 800c9e8:	fb01 f303 	mul.w	r3, r1, r3
 800c9ec:	1ad3      	subs	r3, r2, r3
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	4b65      	ldr	r3, [pc, #404]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800c9f2:	759a      	strb	r2, [r3, #22]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fe:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800cb8c <TM_GPS_INT_CheckTerm+0x948>
 800ca02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca0a:	ee17 2a90 	vmov	r2, s15
 800ca0e:	4b5d      	ldr	r3, [pc, #372]	; (800cb84 <TM_GPS_INT_CheckTerm+0x940>)
 800ca10:	fb83 1302 	smull	r1, r3, r3, r2
 800ca14:	1159      	asrs	r1, r3, #5
 800ca16:	17d3      	asrs	r3, r2, #31
 800ca18:	1acb      	subs	r3, r1, r3
 800ca1a:	2164      	movs	r1, #100	; 0x64
 800ca1c:	fb01 f303 	mul.w	r3, r1, r3
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	4b58      	ldr	r3, [pc, #352]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800ca26:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca32:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800cb90 <TM_GPS_INT_CheckTerm+0x94c>
 800ca36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca3e:	ee17 2a90 	vmov	r2, s15
 800ca42:	4b50      	ldr	r3, [pc, #320]	; (800cb84 <TM_GPS_INT_CheckTerm+0x940>)
 800ca44:	fb83 1302 	smull	r1, r3, r3, r2
 800ca48:	1159      	asrs	r1, r3, #5
 800ca4a:	17d3      	asrs	r3, r2, #31
 800ca4c:	1acb      	subs	r3, r1, r3
 800ca4e:	2164      	movs	r1, #100	; 0x64
 800ca50:	fb01 f303 	mul.w	r3, r1, r3
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	4b4b      	ldr	r3, [pc, #300]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800ca5a:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 800ca5c:	4b4d      	ldr	r3, [pc, #308]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca64:	4a4b      	ldr	r2, [pc, #300]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800ca66:	6013      	str	r3, [r2, #0]
			break;
 800ca68:	e15d      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 800ca6a:	4b45      	ldr	r3, [pc, #276]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b41      	cmp	r3, #65	; 0x41
 800ca70:	bf0c      	ite	eq
 800ca72:	2301      	moveq	r3, #1
 800ca74:	2300      	movne	r3, #0
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	461a      	mov	r2, r3
 800ca7a:	4b43      	ldr	r3, [pc, #268]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800ca7c:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 800ca7e:	4b45      	ldr	r3, [pc, #276]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ca86:	4a43      	ldr	r2, [pc, #268]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800ca88:	6013      	str	r3, [r2, #0]
			break;
 800ca8a:	e14c      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800ca8c:	f107 0308 	add.w	r3, r7, #8
 800ca90:	4619      	mov	r1, r3
 800ca92:	483b      	ldr	r0, [pc, #236]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800ca94:	f000 fabd 	bl	800d012 <TM_GPS_INT_Atoi>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa6:	4b38      	ldr	r3, [pc, #224]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800caa8:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	3301      	adds	r3, #1
 800cab0:	73fb      	strb	r3, [r7, #15]
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
 800cab4:	4a32      	ldr	r2, [pc, #200]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800cab6:	4413      	add	r3, r2
 800cab8:	f107 0208 	add.w	r2, r7, #8
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 faa7 	bl	800d012 <TM_GPS_INT_Atoi>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	ee07 3a90 	vmov	s15, r3
 800cace:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
 800cad4:	4619      	mov	r1, r3
 800cad6:	200a      	movs	r0, #10
 800cad8:	f000 fac8 	bl	800d06c <TM_GPS_INT_Pow>
 800cadc:	ee07 0a90 	vmov	s15, r0
 800cae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae4:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800cae8:	4b27      	ldr	r3, [pc, #156]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800caea:	edd3 7a08 	vldr	s15, [r3, #32]
 800caee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800caf2:	4b25      	ldr	r3, [pc, #148]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800caf4:	edc3 7a08 	vstr	s15, [r3, #32]
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 800caf8:	4b26      	ldr	r3, [pc, #152]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb00:	4a24      	ldr	r2, [pc, #144]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800cb02:	6013      	str	r3, [r2, #0]
			break;
 800cb04:	e10f      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800cb06:	f107 0308 	add.w	r3, r7, #8
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	481c      	ldr	r0, [pc, #112]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800cb0e:	f000 fa80 	bl	800d012 <TM_GPS_INT_Atoi>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	ee07 3a90 	vmov	s15, r3
 800cb1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb20:	4b19      	ldr	r3, [pc, #100]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800cb22:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	73fb      	strb	r3, [r7, #15]
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
 800cb2e:	4a14      	ldr	r2, [pc, #80]	; (800cb80 <TM_GPS_INT_CheckTerm+0x93c>)
 800cb30:	4413      	add	r3, r2
 800cb32:	f107 0208 	add.w	r2, r7, #8
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fa6a 	bl	800d012 <TM_GPS_INT_Atoi>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	ee07 3a90 	vmov	s15, r3
 800cb48:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	200a      	movs	r0, #10
 800cb52:	f000 fa8b 	bl	800d06c <TM_GPS_INT_Pow>
 800cb56:	ee07 0a90 	vmov	s15, r0
 800cb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800cb62:	4b09      	ldr	r3, [pc, #36]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800cb64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cb68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb6c:	4b06      	ldr	r3, [pc, #24]	; (800cb88 <TM_GPS_INT_CheckTerm+0x944>)
 800cb6e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 800cb72:	4b08      	ldr	r3, [pc, #32]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cb7a:	4a06      	ldr	r2, [pc, #24]	; (800cb94 <TM_GPS_INT_CheckTerm+0x950>)
 800cb7c:	6013      	str	r3, [r2, #0]
			break;
 800cb7e:	e0d2      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
 800cb80:	20000210 	.word	0x20000210
 800cb84:	51eb851f 	.word	0x51eb851f
 800cb88:	2000022c 	.word	0x2000022c
 800cb8c:	3c23d70a 	.word	0x3c23d70a
 800cb90:	38d1b717 	.word	0x38d1b717
 800cb94:	20000224 	.word	0x20000224
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800cb98:	f107 0308 	add.w	r3, r7, #8
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	48af      	ldr	r0, [pc, #700]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cba0:	f000 fa37 	bl	800d012 <TM_GPS_INT_Atoi>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	4bab      	ldr	r3, [pc, #684]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cbb4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	73fb      	strb	r3, [r7, #15]
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
 800cbc0:	4aa6      	ldr	r2, [pc, #664]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f107 0208 	add.w	r2, r7, #8
 800cbc8:	4611      	mov	r1, r2
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 fa21 	bl	800d012 <TM_GPS_INT_Atoi>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	ee07 3a90 	vmov	s15, r3
 800cbda:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800cbde:	7bfb      	ldrb	r3, [r7, #15]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	200a      	movs	r0, #10
 800cbe4:	f000 fa42 	bl	800d06c <TM_GPS_INT_Pow>
 800cbe8:	ee07 0a90 	vmov	s15, r0
 800cbec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf0:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800cbf4:	4b9a      	ldr	r3, [pc, #616]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cbf6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cbfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbfe:	4b98      	ldr	r3, [pc, #608]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cc00:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 800cc04:	4b97      	ldr	r3, [pc, #604]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc0c:	4a95      	ldr	r2, [pc, #596]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800cc0e:	6013      	str	r3, [r2, #0]
			break;
 800cc10:	e089      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800cc12:	f107 0308 	add.w	r3, r7, #8
 800cc16:	4619      	mov	r1, r3
 800cc18:	4890      	ldr	r0, [pc, #576]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cc1a:	f000 f9fa 	bl	800d012 <TM_GPS_INT_Atoi>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2c:	4b8c      	ldr	r3, [pc, #560]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cc2e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	3301      	adds	r3, #1
 800cc36:	73fb      	strb	r3, [r7, #15]
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	4a88      	ldr	r2, [pc, #544]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f107 0208 	add.w	r2, r7, #8
 800cc42:	4611      	mov	r1, r2
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 f9e4 	bl	800d012 <TM_GPS_INT_Atoi>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	ee07 3a90 	vmov	s15, r3
 800cc54:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	200a      	movs	r0, #10
 800cc5e:	f000 fa05 	bl	800d06c <TM_GPS_INT_Pow>
 800cc62:	ee07 0a90 	vmov	s15, r0
 800cc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800cc6e:	4b7c      	ldr	r3, [pc, #496]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cc70:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800cc74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc78:	4b79      	ldr	r3, [pc, #484]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cc7a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 800cc7e:	4b79      	ldr	r3, [pc, #484]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc86:	4a77      	ldr	r2, [pc, #476]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800cc88:	6013      	str	r3, [r2, #0]
			break;
 800cc8a:	e04c      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800cc8c:	f107 0308 	add.w	r3, r7, #8
 800cc90:	4619      	mov	r1, r3
 800cc92:	4872      	ldr	r0, [pc, #456]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cc94:	f000 f9bd 	bl	800d012 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	4b70      	ldr	r3, [pc, #448]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cc9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 800cca2:	4b70      	ldr	r3, [pc, #448]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ccaa:	4a6e      	ldr	r2, [pc, #440]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800ccac:	6013      	str	r3, [r2, #0]
			break;
 800ccae:	e03a      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800ccb0:	f107 0308 	add.w	r3, r7, #8
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	4869      	ldr	r0, [pc, #420]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800ccb8:	f000 f9ab 	bl	800d012 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	4b6a      	ldr	r3, [pc, #424]	; (800ce68 <TM_GPS_INT_CheckTerm+0xc24>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	3b03      	subs	r3, #3
 800ccc4:	b2d1      	uxtb	r1, r2
 800ccc6:	4a66      	ldr	r2, [pc, #408]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800ccc8:	4413      	add	r3, r2
 800ccca:	460a      	mov	r2, r1
 800cccc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			ids_count++;							/* Increase number of satellites found */
 800ccd0:	4b66      	ldr	r3, [pc, #408]	; (800ce6c <TM_GPS_INT_CheckTerm+0xc28>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	4b64      	ldr	r3, [pc, #400]	; (800ce6c <TM_GPS_INT_CheckTerm+0xc28>)
 800ccda:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 800ccdc:	4b60      	ldr	r3, [pc, #384]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800ccde:	7b1a      	ldrb	r2, [r3, #12]
 800cce0:	4b62      	ldr	r3, [pc, #392]	; (800ce6c <TM_GPS_INT_CheckTerm+0xc28>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d11d      	bne.n	800cd24 <TM_GPS_INT_CheckTerm+0xae0>
				ids_count = 0;						/* Reset count, we have all statements */
 800cce8:	4b60      	ldr	r3, [pc, #384]	; (800ce6c <TM_GPS_INT_CheckTerm+0xc28>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 800ccee:	4b5d      	ldr	r3, [pc, #372]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccf6:	4a5b      	ldr	r2, [pc, #364]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800ccf8:	6013      	str	r3, [r2, #0]
			}
			break;
 800ccfa:	e013      	b.n	800cd24 <TM_GPS_INT_CheckTerm+0xae0>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800ccfc:	f107 0308 	add.w	r3, r7, #8
 800cd00:	4619      	mov	r1, r3
 800cd02:	4856      	ldr	r0, [pc, #344]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cd04:	f000 f985 	bl	800d012 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	4b54      	ldr	r3, [pc, #336]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cd0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 800cd12:	4b54      	ldr	r3, [pc, #336]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd1a:	4a52      	ldr	r2, [pc, #328]	; (800ce64 <TM_GPS_INT_CheckTerm+0xc20>)
 800cd1c:	6013      	str	r3, [r2, #0]
			break;
 800cd1e:	e002      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
#endif
		default: 
			break;
 800cd20:	bf00      	nop
 800cd22:	e000      	b.n	800cd26 <TM_GPS_INT_CheckTerm+0xae2>
			break;
 800cd24:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 800cd26:	4b52      	ldr	r3, [pc, #328]	; (800ce70 <TM_GPS_INT_CheckTerm+0xc2c>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	f040 8090 	bne.w	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
		if (GPS_Term_Number == 1) {
 800cd30:	4b4d      	ldr	r3, [pc, #308]	; (800ce68 <TM_GPS_INT_CheckTerm+0xc24>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d109      	bne.n	800cd4c <TM_GPS_INT_CheckTerm+0xb08>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	4847      	ldr	r0, [pc, #284]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cd40:	f000 f967 	bl	800d012 <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	4b4a      	ldr	r3, [pc, #296]	; (800ce74 <TM_GPS_INT_CheckTerm+0xc30>)
 800cd4a:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 800cd4c:	4b46      	ldr	r3, [pc, #280]	; (800ce68 <TM_GPS_INT_CheckTerm+0xc24>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d109      	bne.n	800cd68 <TM_GPS_INT_CheckTerm+0xb24>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 800cd54:	f107 0308 	add.w	r3, r7, #8
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4840      	ldr	r0, [pc, #256]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cd5c:	f000 f959 	bl	800d012 <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	b2da      	uxtb	r2, r3
 800cd64:	4b44      	ldr	r3, [pc, #272]	; (800ce78 <TM_GPS_INT_CheckTerm+0xc34>)
 800cd66:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 800cd68:	4b3f      	ldr	r3, [pc, #252]	; (800ce68 <TM_GPS_INT_CheckTerm+0xc24>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2b03      	cmp	r3, #3
 800cd6e:	d96f      	bls.n	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 800cd70:	f107 0308 	add.w	r3, r7, #8
 800cd74:	4619      	mov	r1, r3
 800cd76:	4839      	ldr	r0, [pc, #228]	; (800ce5c <TM_GPS_INT_CheckTerm+0xc18>)
 800cd78:	f000 f94b 	bl	800d012 <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 800cd7c:	4b3a      	ldr	r3, [pc, #232]	; (800ce68 <TM_GPS_INT_CheckTerm+0xc24>)
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	3b04      	subs	r3, #4
 800cd82:	b2da      	uxtb	r2, r3
 800cd84:	4b3d      	ldr	r3, [pc, #244]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800cd86:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 800cd88:	4b3c      	ldr	r3, [pc, #240]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	f003 0303 	and.w	r3, r3, #3
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	4b3b      	ldr	r3, [pc, #236]	; (800ce80 <TM_GPS_INT_CheckTerm+0xc3c>)
 800cd94:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 800cd96:	4b38      	ldr	r3, [pc, #224]	; (800ce78 <TM_GPS_INT_CheckTerm+0xc34>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	333f      	adds	r3, #63	; 0x3f
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	4b36      	ldr	r3, [pc, #216]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	089b      	lsrs	r3, r3, #2
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	4413      	add	r3, r2
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	4b33      	ldr	r3, [pc, #204]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800cdb0:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 800cdb2:	4b32      	ldr	r3, [pc, #200]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	2b17      	cmp	r3, #23
 800cdb8:	d84a      	bhi.n	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 800cdba:	4b31      	ldr	r3, [pc, #196]	; (800ce80 <TM_GPS_INT_CheckTerm+0xc3c>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10e      	bne.n	800cde0 <TM_GPS_INT_CheckTerm+0xb9c>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	4b2d      	ldr	r3, [pc, #180]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	b2d0      	uxtb	r0, r2
 800cdcc:	4a24      	ldr	r2, [pc, #144]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cdce:	460b      	mov	r3, r1
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	440b      	add	r3, r1
 800cdd4:	005b      	lsls	r3, r3, #1
 800cdd6:	4413      	add	r3, r2
 800cdd8:	333e      	adds	r3, #62	; 0x3e
 800cdda:	4602      	mov	r2, r0
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	e037      	b.n	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
				} else if (GPGSV_Term_Mod == 1) {
 800cde0:	4b27      	ldr	r3, [pc, #156]	; (800ce80 <TM_GPS_INT_CheckTerm+0xc3c>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d10e      	bne.n	800ce06 <TM_GPS_INT_CheckTerm+0xbc2>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	4619      	mov	r1, r3
 800cdf0:	b2d0      	uxtb	r0, r2
 800cdf2:	4a1b      	ldr	r2, [pc, #108]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	440b      	add	r3, r1
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	4413      	add	r3, r2
 800cdfe:	333f      	adds	r3, #63	; 0x3f
 800ce00:	4602      	mov	r2, r0
 800ce02:	701a      	strb	r2, [r3, #0]
 800ce04:	e024      	b.n	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
				} else if (GPGSV_Term_Mod == 2) {
 800ce06:	4b1e      	ldr	r3, [pc, #120]	; (800ce80 <TM_GPS_INT_CheckTerm+0xc3c>)
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d10e      	bne.n	800ce2c <TM_GPS_INT_CheckTerm+0xbe8>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	4b1a      	ldr	r3, [pc, #104]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	4619      	mov	r1, r3
 800ce16:	b290      	uxth	r0, r2
 800ce18:	4a11      	ldr	r2, [pc, #68]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	440b      	add	r3, r1
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	4413      	add	r3, r2
 800ce24:	3340      	adds	r3, #64	; 0x40
 800ce26:	4602      	mov	r2, r0
 800ce28:	801a      	strh	r2, [r3, #0]
 800ce2a:	e011      	b.n	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
				} else if (GPGSV_Term_Mod == 3) {
 800ce2c:	4b14      	ldr	r3, [pc, #80]	; (800ce80 <TM_GPS_INT_CheckTerm+0xc3c>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b03      	cmp	r3, #3
 800ce32:	d10d      	bne.n	800ce50 <TM_GPS_INT_CheckTerm+0xc0c>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	4b11      	ldr	r3, [pc, #68]	; (800ce7c <TM_GPS_INT_CheckTerm+0xc38>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	b2d0      	uxtb	r0, r2
 800ce3e:	4a08      	ldr	r2, [pc, #32]	; (800ce60 <TM_GPS_INT_CheckTerm+0xc1c>)
 800ce40:	460b      	mov	r3, r1
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	440b      	add	r3, r1
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	4413      	add	r3, r2
 800ce4a:	3342      	adds	r3, #66	; 0x42
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	ecbd 8b02 	vpop	{d8}
 800ce58:	bdb0      	pop	{r4, r5, r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20000210 	.word	0x20000210
 800ce60:	2000022c 	.word	0x2000022c
 800ce64:	20000224 	.word	0x20000224
 800ce68:	2000021f 	.word	0x2000021f
 800ce6c:	20000488 	.word	0x20000488
 800ce70:	20000014 	.word	0x20000014
 800ce74:	20000484 	.word	0x20000484
 800ce78:	20000485 	.word	0x20000485
 800ce7c:	20000486 	.word	0x20000486
 800ce80:	20000487 	.word	0x20000487

0800ce84 <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f933 	bl	800d0f8 <TM_GPS_INT_FlagsOk>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f000 8087 	beq.w	800cfa8 <TM_GPS_INT_Return+0x124>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 800ce9a:	4b4d      	ldr	r3, [pc, #308]	; (800cfd0 <TM_GPS_INT_Return+0x14c>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 800cea0:	4b4c      	ldr	r3, [pc, #304]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	601a      	str	r2, [r3, #0]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 800cea8:	4b4a      	ldr	r3, [pc, #296]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	605a      	str	r2, [r3, #4]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 800ceb0:	4b48      	ldr	r3, [pc, #288]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800ceb2:	7b1a      	ldrb	r2, [r3, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	731a      	strb	r2, [r3, #12]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 800ceb8:	4b46      	ldr	r3, [pc, #280]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800ceba:	7b5a      	ldrb	r2, [r3, #13]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	735a      	strb	r2, [r3, #13]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 800cec0:	4b44      	ldr	r3, [pc, #272]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	609a      	str	r2, [r3, #8]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a42      	ldr	r2, [pc, #264]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cecc:	330e      	adds	r3, #14
 800cece:	320e      	adds	r2, #14
 800ced0:	6811      	ldr	r1, [r2, #0]
 800ced2:	6019      	str	r1, [r3, #0]
 800ced4:	8892      	ldrh	r2, [r2, #4]
 800ced6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 800ced8:	4b3e      	ldr	r3, [pc, #248]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800ceda:	699a      	ldr	r2, [r3, #24]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	619a      	str	r2, [r3, #24]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a3c      	ldr	r2, [pc, #240]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cee4:	3314      	adds	r3, #20
 800cee6:	3214      	adds	r2, #20
 800cee8:	6812      	ldr	r2, [r2, #0]
 800ceea:	4611      	mov	r1, r2
 800ceec:	8019      	strh	r1, [r3, #0]
 800ceee:	3302      	adds	r3, #2
 800cef0:	0c12      	lsrs	r2, r2, #16
 800cef2:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 800cef4:	4b37      	ldr	r3, [pc, #220]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cef6:	7f1a      	ldrb	r2, [r3, #28]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	771a      	strb	r2, [r3, #28]
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 800cefc:	4b35      	ldr	r3, [pc, #212]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cefe:	6a1a      	ldr	r2, [r3, #32]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	621a      	str	r2, [r3, #32]
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 800cf04:	4b33      	ldr	r3, [pc, #204]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cf06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	625a      	str	r2, [r3, #36]	; 0x24
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 800cf0c:	4b31      	ldr	r3, [pc, #196]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 800cf14:	4b2f      	ldr	r3, [pc, #188]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cf16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	629a      	str	r2, [r3, #40]	; 0x28
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 800cf1c:	4b2d      	ldr	r3, [pc, #180]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cf1e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		for (i = 0; i < 12; i++) {
 800cf28:	2300      	movs	r3, #0
 800cf2a:	73fb      	strb	r3, [r7, #15]
 800cf2c:	e00d      	b.n	800cf4a <TM_GPS_INT_Return+0xc6>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 800cf2e:	7bfa      	ldrb	r2, [r7, #15]
 800cf30:	7bfb      	ldrb	r3, [r7, #15]
 800cf32:	4928      	ldr	r1, [pc, #160]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cf34:	440a      	add	r2, r1
 800cf36:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	460a      	mov	r2, r1
 800cf40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		for (i = 0; i < 12; i++) {
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
 800cf46:	3301      	adds	r3, #1
 800cf48:	73fb      	strb	r3, [r7, #15]
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
 800cf4c:	2b0b      	cmp	r3, #11
 800cf4e:	d9ee      	bls.n	800cf2e <TM_GPS_INT_Return+0xaa>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 800cf50:	4b20      	ldr	r3, [pc, #128]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cf52:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]
 800cf60:	e019      	b.n	800cf96 <TM_GPS_INT_Return+0x112>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 800cf62:	7bfa      	ldrb	r2, [r7, #15]
 800cf64:	7bf9      	ldrb	r1, [r7, #15]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	005b      	lsls	r3, r3, #1
 800cf6c:	440b      	add	r3, r1
 800cf6e:	005b      	lsls	r3, r3, #1
 800cf70:	4403      	add	r3, r0
 800cf72:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 800cf76:	4917      	ldr	r1, [pc, #92]	; (800cfd4 <TM_GPS_INT_Return+0x150>)
 800cf78:	4613      	mov	r3, r2
 800cf7a:	005b      	lsls	r3, r3, #1
 800cf7c:	4413      	add	r3, r2
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	440b      	add	r3, r1
 800cf82:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 800cf86:	4603      	mov	r3, r0
 800cf88:	6811      	ldr	r1, [r2, #0]
 800cf8a:	6019      	str	r1, [r3, #0]
 800cf8c:	8892      	ldrh	r2, [r2, #4]
 800cf8e:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	3301      	adds	r3, #1
 800cf94:	73fb      	strb	r3, [r7, #15]
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	2b17      	cmp	r3, #23
 800cf9a:	d9e2      	bls.n	800cf62 <TM_GPS_INT_Return+0xde>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	e00e      	b.n	800cfc6 <TM_GPS_INT_Return+0x142>
	}
	
	if (TM_GPS_FirstTime) {
 800cfa8:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <TM_GPS_INT_Return+0x14c>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <TM_GPS_INT_Return+0x138>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800cfb8:	2302      	movs	r3, #2
 800cfba:	e004      	b.n	800cfc6 <TM_GPS_INT_Return+0x142>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800cfc4:	2301      	movs	r3, #1
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	2000034c 	.word	0x2000034c
 800cfd4:	2000022c 	.word	0x2000022c

0800cfd8 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
	while (*str) {
 800cfe2:	e00b      	b.n	800cffc <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	603a      	str	r2, [r7, #0]
 800cfea:	781a      	ldrb	r2, [r3, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	6079      	str	r1, [r7, #4]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d001      	beq.n	800cffc <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	e004      	b.n	800d006 <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1ef      	bne.n	800cfe4 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 800d004:	2301      	movs	r3, #1
}
 800d006:	4618      	mov	r0, r3
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 800d012:	b480      	push	{r7}
 800d014:	b085      	sub	sp, #20
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2200      	movs	r2, #0
 800d024:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 800d026:	e012      	b.n	800d04e <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	4613      	mov	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	4619      	mov	r1, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	1c5a      	adds	r2, r3, #1
 800d03a:	607a      	str	r2, [r7, #4]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	440b      	add	r3, r1
 800d040:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	601a      	str	r2, [r3, #0]
		count++;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
 800d04a:	3301      	adds	r3, #1
 800d04c:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	2b2f      	cmp	r3, #47	; 0x2f
 800d054:	d903      	bls.n	800d05e <TM_GPS_INT_Atoi+0x4c>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	2b39      	cmp	r3, #57	; 0x39
 800d05c:	d9e4      	bls.n	800d028 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	4603      	mov	r3, r0
 800d074:	460a      	mov	r2, r1
 800d076:	71fb      	strb	r3, [r7, #7]
 800d078:	4613      	mov	r3, r2
 800d07a:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 800d07c:	2301      	movs	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
	while (y--) {
 800d080:	e004      	b.n	800d08c <TM_GPS_INT_Pow+0x20>
		ret *= x;
 800d082:	79fa      	ldrb	r2, [r7, #7]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	fb02 f303 	mul.w	r3, r2, r3
 800d08a:	60fb      	str	r3, [r7, #12]
	while (y--) {
 800d08c:	79bb      	ldrb	r3, [r7, #6]
 800d08e:	1e5a      	subs	r2, r3, #1
 800d090:	71ba      	strb	r2, [r7, #6]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1f5      	bne.n	800d082 <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 800d096:	68fb      	ldr	r3, [r7, #12]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3714      	adds	r7, #20
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 800d0ae:	79fb      	ldrb	r3, [r7, #7]
 800d0b0:	2b2f      	cmp	r3, #47	; 0x2f
 800d0b2:	d906      	bls.n	800d0c2 <TM_GPS_INT_Hex2Dec+0x1e>
 800d0b4:	79fb      	ldrb	r3, [r7, #7]
 800d0b6:	2b39      	cmp	r3, #57	; 0x39
 800d0b8:	d803      	bhi.n	800d0c2 <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	3b30      	subs	r3, #48	; 0x30
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	e014      	b.n	800d0ec <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	2b40      	cmp	r3, #64	; 0x40
 800d0c6:	d906      	bls.n	800d0d6 <TM_GPS_INT_Hex2Dec+0x32>
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	2b46      	cmp	r3, #70	; 0x46
 800d0cc:	d803      	bhi.n	800d0d6 <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	3b37      	subs	r3, #55	; 0x37
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	e00a      	b.n	800d0ec <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	2b60      	cmp	r3, #96	; 0x60
 800d0da:	d906      	bls.n	800d0ea <TM_GPS_INT_Hex2Dec+0x46>
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	2b66      	cmp	r3, #102	; 0x66
 800d0e0:	d803      	bhi.n	800d0ea <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 800d0e2:	79fb      	ldrb	r3, [r7, #7]
 800d0e4:	3b57      	subs	r3, #87	; 0x57
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	e000      	b.n	800d0ec <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 800d100:	4b12      	ldr	r3, [pc, #72]	; (800d14c <TM_GPS_INT_FlagsOk+0x54>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	4b12      	ldr	r3, [pc, #72]	; (800d150 <TM_GPS_INT_FlagsOk+0x58>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d118      	bne.n	800d13e <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 800d10c:	2300      	movs	r3, #0
 800d10e:	73fb      	strb	r3, [r7, #15]
 800d110:	e00d      	b.n	800d12e <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 800d112:	7bfb      	ldrb	r3, [r7, #15]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	333c      	adds	r3, #60	; 0x3c
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	7ddb      	ldrb	r3, [r3, #23]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d101      	bne.n	800d128 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 800d124:	2300      	movs	r3, #0
 800d126:	e00b      	b.n	800d140 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 800d128:	7bfb      	ldrb	r3, [r7, #15]
 800d12a:	3301      	adds	r3, #1
 800d12c:	73fb      	strb	r3, [r7, #15]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800d134:	7bfa      	ldrb	r2, [r7, #15]
 800d136:	429a      	cmp	r2, r3
 800d138:	d3eb      	bcc.n	800d112 <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	20000224 	.word	0x20000224
 800d150:	20000228 	.word	0x20000228

0800d154 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 800d15c:	4b0e      	ldr	r3, [pc, #56]	; (800d198 <TM_GPS_INT_ClearFlags+0x44>)
 800d15e:	2200      	movs	r2, #0
 800d160:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 800d162:	2300      	movs	r3, #0
 800d164:	73fb      	strb	r3, [r7, #15]
 800d166:	e00a      	b.n	800d17e <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	333c      	adds	r3, #60	; 0x3c
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	3301      	adds	r3, #1
 800d17c:	73fb      	strb	r3, [r7, #15]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800d184:	7bfa      	ldrb	r2, [r7, #15]
 800d186:	429a      	cmp	r2, r3
 800d188:	d3ee      	bcc.n	800d168 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 800d18a:	bf00      	nop
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	20000224 	.word	0x20000224

0800d19c <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 800d1a4:	4baf      	ldr	r3, [pc, #700]	; (800d464 <TM_GPS_INT_CheckEmpty+0x2c8>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	f040 8151 	bne.w	800d450 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 800d1ae:	4bae      	ldr	r3, [pc, #696]	; (800d468 <TM_GPS_INT_CheckEmpty+0x2cc>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	015b      	lsls	r3, r3, #5
 800d1b4:	4aad      	ldr	r2, [pc, #692]	; (800d46c <TM_GPS_INT_CheckEmpty+0x2d0>)
 800d1b6:	7812      	ldrb	r2, [r2, #0]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	2b62      	cmp	r3, #98	; 0x62
 800d1be:	f200 8149 	bhi.w	800d454 <TM_GPS_INT_CheckEmpty+0x2b8>
 800d1c2:	a201      	add	r2, pc, #4	; (adr r2, 800d1c8 <TM_GPS_INT_CheckEmpty+0x2c>)
 800d1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c8:	0800d3b7 	.word	0x0800d3b7
 800d1cc:	0800d355 	.word	0x0800d355
 800d1d0:	0800d363 	.word	0x0800d363
 800d1d4:	0800d371 	.word	0x0800d371
 800d1d8:	0800d37f 	.word	0x0800d37f
 800d1dc:	0800d39b 	.word	0x0800d39b
 800d1e0:	0800d38d 	.word	0x0800d38d
 800d1e4:	0800d455 	.word	0x0800d455
 800d1e8:	0800d3a9 	.word	0x0800d3a9
 800d1ec:	0800d455 	.word	0x0800d455
 800d1f0:	0800d455 	.word	0x0800d455
 800d1f4:	0800d455 	.word	0x0800d455
 800d1f8:	0800d455 	.word	0x0800d455
 800d1fc:	0800d455 	.word	0x0800d455
 800d200:	0800d455 	.word	0x0800d455
 800d204:	0800d455 	.word	0x0800d455
 800d208:	0800d455 	.word	0x0800d455
 800d20c:	0800d455 	.word	0x0800d455
 800d210:	0800d455 	.word	0x0800d455
 800d214:	0800d455 	.word	0x0800d455
 800d218:	0800d455 	.word	0x0800d455
 800d21c:	0800d455 	.word	0x0800d455
 800d220:	0800d455 	.word	0x0800d455
 800d224:	0800d455 	.word	0x0800d455
 800d228:	0800d455 	.word	0x0800d455
 800d22c:	0800d455 	.word	0x0800d455
 800d230:	0800d455 	.word	0x0800d455
 800d234:	0800d455 	.word	0x0800d455
 800d238:	0800d455 	.word	0x0800d455
 800d23c:	0800d455 	.word	0x0800d455
 800d240:	0800d455 	.word	0x0800d455
 800d244:	0800d455 	.word	0x0800d455
 800d248:	0800d455 	.word	0x0800d455
 800d24c:	0800d3e1 	.word	0x0800d3e1
 800d250:	0800d455 	.word	0x0800d455
 800d254:	0800d455 	.word	0x0800d455
 800d258:	0800d455 	.word	0x0800d455
 800d25c:	0800d455 	.word	0x0800d455
 800d260:	0800d3c5 	.word	0x0800d3c5
 800d264:	0800d3ef 	.word	0x0800d3ef
 800d268:	0800d3d3 	.word	0x0800d3d3
 800d26c:	0800d455 	.word	0x0800d455
 800d270:	0800d455 	.word	0x0800d455
 800d274:	0800d455 	.word	0x0800d455
 800d278:	0800d455 	.word	0x0800d455
 800d27c:	0800d455 	.word	0x0800d455
 800d280:	0800d455 	.word	0x0800d455
 800d284:	0800d455 	.word	0x0800d455
 800d288:	0800d455 	.word	0x0800d455
 800d28c:	0800d455 	.word	0x0800d455
 800d290:	0800d455 	.word	0x0800d455
 800d294:	0800d455 	.word	0x0800d455
 800d298:	0800d455 	.word	0x0800d455
 800d29c:	0800d455 	.word	0x0800d455
 800d2a0:	0800d455 	.word	0x0800d455
 800d2a4:	0800d455 	.word	0x0800d455
 800d2a8:	0800d455 	.word	0x0800d455
 800d2ac:	0800d455 	.word	0x0800d455
 800d2b0:	0800d455 	.word	0x0800d455
 800d2b4:	0800d455 	.word	0x0800d455
 800d2b8:	0800d455 	.word	0x0800d455
 800d2bc:	0800d455 	.word	0x0800d455
 800d2c0:	0800d455 	.word	0x0800d455
 800d2c4:	0800d455 	.word	0x0800d455
 800d2c8:	0800d455 	.word	0x0800d455
 800d2cc:	0800d427 	.word	0x0800d427
 800d2d0:	0800d435 	.word	0x0800d435
 800d2d4:	0800d435 	.word	0x0800d435
 800d2d8:	0800d435 	.word	0x0800d435
 800d2dc:	0800d435 	.word	0x0800d435
 800d2e0:	0800d435 	.word	0x0800d435
 800d2e4:	0800d435 	.word	0x0800d435
 800d2e8:	0800d435 	.word	0x0800d435
 800d2ec:	0800d435 	.word	0x0800d435
 800d2f0:	0800d435 	.word	0x0800d435
 800d2f4:	0800d435 	.word	0x0800d435
 800d2f8:	0800d435 	.word	0x0800d435
 800d2fc:	0800d435 	.word	0x0800d435
 800d300:	0800d40b 	.word	0x0800d40b
 800d304:	0800d3fd 	.word	0x0800d3fd
 800d308:	0800d419 	.word	0x0800d419
 800d30c:	0800d455 	.word	0x0800d455
 800d310:	0800d455 	.word	0x0800d455
 800d314:	0800d455 	.word	0x0800d455
 800d318:	0800d455 	.word	0x0800d455
 800d31c:	0800d455 	.word	0x0800d455
 800d320:	0800d455 	.word	0x0800d455
 800d324:	0800d455 	.word	0x0800d455
 800d328:	0800d455 	.word	0x0800d455
 800d32c:	0800d455 	.word	0x0800d455
 800d330:	0800d455 	.word	0x0800d455
 800d334:	0800d455 	.word	0x0800d455
 800d338:	0800d455 	.word	0x0800d455
 800d33c:	0800d455 	.word	0x0800d455
 800d340:	0800d455 	.word	0x0800d455
 800d344:	0800d455 	.word	0x0800d455
 800d348:	0800d455 	.word	0x0800d455
 800d34c:	0800d455 	.word	0x0800d455
 800d350:	0800d443 	.word	0x0800d443
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 800d354:	4b46      	ldr	r3, [pc, #280]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f043 0301 	orr.w	r3, r3, #1
 800d35c:	4a44      	ldr	r2, [pc, #272]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d35e:	6013      	str	r3, [r2, #0]
 800d360:	e079      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 800d362:	4b43      	ldr	r3, [pc, #268]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d36a:	4a41      	ldr	r2, [pc, #260]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	e072      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 800d370:	4b3f      	ldr	r3, [pc, #252]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f043 0302 	orr.w	r3, r3, #2
 800d378:	4a3d      	ldr	r2, [pc, #244]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	e06b      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 800d37e:	4b3c      	ldr	r3, [pc, #240]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f043 0320 	orr.w	r3, r3, #32
 800d386:	4a3a      	ldr	r2, [pc, #232]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	e064      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 800d38c:	4b38      	ldr	r3, [pc, #224]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f043 0304 	orr.w	r3, r3, #4
 800d394:	4a36      	ldr	r2, [pc, #216]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	e05d      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 800d39a:	4b35      	ldr	r3, [pc, #212]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f043 0308 	orr.w	r3, r3, #8
 800d3a2:	4a33      	ldr	r2, [pc, #204]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	e056      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 800d3a8:	4b31      	ldr	r3, [pc, #196]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f043 0310 	orr.w	r3, r3, #16
 800d3b0:	4a2f      	ldr	r2, [pc, #188]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	e04f      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 800d3b6:	4b2e      	ldr	r3, [pc, #184]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3be:	4a2c      	ldr	r2, [pc, #176]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	e048      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 800d3c4:	4b2a      	ldr	r3, [pc, #168]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3cc:	4a28      	ldr	r2, [pc, #160]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3ce:	6013      	str	r3, [r2, #0]
 800d3d0:	e041      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 800d3d2:	4b27      	ldr	r3, [pc, #156]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d3da:	4a25      	ldr	r2, [pc, #148]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	e03a      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 800d3e0:	4b23      	ldr	r3, [pc, #140]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d3e8:	4a21      	ldr	r2, [pc, #132]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	e033      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 800d3ee:	4b20      	ldr	r3, [pc, #128]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3f6:	4a1e      	ldr	r2, [pc, #120]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3f8:	6013      	str	r3, [r2, #0]
 800d3fa:	e02c      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 800d3fc:	4b1c      	ldr	r3, [pc, #112]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d404:	4a1a      	ldr	r2, [pc, #104]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d406:	6013      	str	r3, [r2, #0]
 800d408:	e025      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 800d40a:	4b19      	ldr	r3, [pc, #100]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d412:	4a17      	ldr	r2, [pc, #92]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	e01e      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 800d418:	4b15      	ldr	r3, [pc, #84]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d420:	4a13      	ldr	r2, [pc, #76]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d422:	6013      	str	r3, [r2, #0]
 800d424:	e017      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 800d426:	4b12      	ldr	r3, [pc, #72]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d42e:	4a10      	ldr	r2, [pc, #64]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	e010      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 800d434:	4b0e      	ldr	r3, [pc, #56]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d43c:	4a0c      	ldr	r2, [pc, #48]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d43e:	6013      	str	r3, [r2, #0]
				break;
 800d440:	e009      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 800d442:	4b0b      	ldr	r3, [pc, #44]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d44a:	4a09      	ldr	r2, [pc, #36]	; (800d470 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	e002      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 800d450:	bf00      	nop
 800d452:	e000      	b.n	800d456 <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 800d454:	bf00      	nop
}
 800d456:	bf00      	nop
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	20000220 	.word	0x20000220
 800d468:	20000014 	.word	0x20000014
 800d46c:	2000021f 	.word	0x2000021f
 800d470:	20000224 	.word	0x20000224

0800d474 <sbus_start>:
uint16_t sbus_errcnt = 0;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void sbus_start(UART_HandleTypeDef *huart) {
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	sbus_phuart = huart;
 800d47c:	4a05      	ldr	r2, [pc, #20]	; (800d494 <sbus_start+0x20>)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, sbus_dmaBuf, SBUS_DMA_BUF_SIZE);
 800d482:	2219      	movs	r2, #25
 800d484:	4904      	ldr	r1, [pc, #16]	; (800d498 <sbus_start+0x24>)
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7fa fbe0 	bl	8007c4c <HAL_UART_Receive_DMA>
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	2000050c 	.word	0x2000050c
 800d498:	200004a8 	.word	0x200004a8

0800d49c <sbus_decoding>:

void sbus_reset(UART_HandleTypeDef *huart){
	HAL_UART_Receive_DMA(huart, sbus_dmaBuf, SBUS_DMA_BUF_SIZE);
}

void sbus_decoding() { // input to HAL_UART_RxCpltCallback
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
	if(sbus_rxBuf[23] & SBUS_LOST_FRAME || sbus_rxBuf[23] & SBUS_FAIL_SAFE){//failsafe frame
 800d4a2:	4b09      	ldr	r3, [pc, #36]	; (800d4c8 <sbus_decoding+0x2c>)
 800d4a4:	7ddb      	ldrb	r3, [r3, #23]
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d105      	bne.n	800d4ba <sbus_decoding+0x1e>
 800d4ae:	4b06      	ldr	r3, [pc, #24]	; (800d4c8 <sbus_decoding+0x2c>)
 800d4b0:	7ddb      	ldrb	r3, [r3, #23]
 800d4b2:	f003 0308 	and.w	r3, r3, #8
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <sbus_decoding+0x34>
//		printf("fail safe\r\n");
		sbus_errcnt++;
 800d4ba:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <sbus_decoding+0x30>)
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <sbus_decoding+0x30>)
 800d4c4:	801a      	strh	r2, [r3, #0]
		return;
 800d4c6:	e170      	b.n	800d7aa <sbus_decoding+0x30e>
 800d4c8:	2000048c 	.word	0x2000048c
 800d4cc:	20000512 	.word	0x20000512
	}

	sbus_rcValue[0] = ((uint16_t)sbus_rxBuf[1] >> 0 | ((uint16_t)sbus_rxBuf[2] << 8)) & 0x07FF;
 800d4d0:	4b95      	ldr	r3, [pc, #596]	; (800d728 <sbus_decoding+0x28c>)
 800d4d2:	785b      	ldrb	r3, [r3, #1]
 800d4d4:	b21a      	sxth	r2, r3
 800d4d6:	4b94      	ldr	r3, [pc, #592]	; (800d728 <sbus_decoding+0x28c>)
 800d4d8:	789b      	ldrb	r3, [r3, #2]
 800d4da:	021b      	lsls	r3, r3, #8
 800d4dc:	b21b      	sxth	r3, r3
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	b21b      	sxth	r3, r3
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	4b90      	ldr	r3, [pc, #576]	; (800d72c <sbus_decoding+0x290>)
 800d4ec:	801a      	strh	r2, [r3, #0]
	sbus_rcValue[1] = ((uint16_t)sbus_rxBuf[2] >> 3 | ((uint16_t)sbus_rxBuf[3] << 5)) & 0x07FF;
 800d4ee:	4b8e      	ldr	r3, [pc, #568]	; (800d728 <sbus_decoding+0x28c>)
 800d4f0:	789b      	ldrb	r3, [r3, #2]
 800d4f2:	08db      	lsrs	r3, r3, #3
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	b21a      	sxth	r2, r3
 800d4f8:	4b8b      	ldr	r3, [pc, #556]	; (800d728 <sbus_decoding+0x28c>)
 800d4fa:	78db      	ldrb	r3, [r3, #3]
 800d4fc:	015b      	lsls	r3, r3, #5
 800d4fe:	b21b      	sxth	r3, r3
 800d500:	4313      	orrs	r3, r2
 800d502:	b21b      	sxth	r3, r3
 800d504:	b29b      	uxth	r3, r3
 800d506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	4b87      	ldr	r3, [pc, #540]	; (800d72c <sbus_decoding+0x290>)
 800d50e:	805a      	strh	r2, [r3, #2]
	sbus_rcValue[2] = ((uint16_t)sbus_rxBuf[3] >> 6 | ((uint16_t)sbus_rxBuf[4] << 2) | (uint16_t)sbus_rxBuf[5] << 10) & 0x07FF;
 800d510:	4b85      	ldr	r3, [pc, #532]	; (800d728 <sbus_decoding+0x28c>)
 800d512:	78db      	ldrb	r3, [r3, #3]
 800d514:	099b      	lsrs	r3, r3, #6
 800d516:	b2db      	uxtb	r3, r3
 800d518:	b21a      	sxth	r2, r3
 800d51a:	4b83      	ldr	r3, [pc, #524]	; (800d728 <sbus_decoding+0x28c>)
 800d51c:	791b      	ldrb	r3, [r3, #4]
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	b21b      	sxth	r3, r3
 800d522:	4313      	orrs	r3, r2
 800d524:	b21a      	sxth	r2, r3
 800d526:	4b80      	ldr	r3, [pc, #512]	; (800d728 <sbus_decoding+0x28c>)
 800d528:	795b      	ldrb	r3, [r3, #5]
 800d52a:	029b      	lsls	r3, r3, #10
 800d52c:	b21b      	sxth	r3, r3
 800d52e:	4313      	orrs	r3, r2
 800d530:	b21b      	sxth	r3, r3
 800d532:	b29b      	uxth	r3, r3
 800d534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d538:	b29a      	uxth	r2, r3
 800d53a:	4b7c      	ldr	r3, [pc, #496]	; (800d72c <sbus_decoding+0x290>)
 800d53c:	809a      	strh	r2, [r3, #4]
	sbus_rcValue[3] = ((uint16_t)sbus_rxBuf[5] >> 1 | ((uint16_t)sbus_rxBuf[6] << 7)) & 0x07FF;
 800d53e:	4b7a      	ldr	r3, [pc, #488]	; (800d728 <sbus_decoding+0x28c>)
 800d540:	795b      	ldrb	r3, [r3, #5]
 800d542:	085b      	lsrs	r3, r3, #1
 800d544:	b2db      	uxtb	r3, r3
 800d546:	b21a      	sxth	r2, r3
 800d548:	4b77      	ldr	r3, [pc, #476]	; (800d728 <sbus_decoding+0x28c>)
 800d54a:	799b      	ldrb	r3, [r3, #6]
 800d54c:	01db      	lsls	r3, r3, #7
 800d54e:	b21b      	sxth	r3, r3
 800d550:	4313      	orrs	r3, r2
 800d552:	b21b      	sxth	r3, r3
 800d554:	b29b      	uxth	r3, r3
 800d556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	4b73      	ldr	r3, [pc, #460]	; (800d72c <sbus_decoding+0x290>)
 800d55e:	80da      	strh	r2, [r3, #6]
	sbus_rcValue[4] = ((uint16_t)sbus_rxBuf[6] >> 4 | ((uint16_t)sbus_rxBuf[7] << 4)) & 0x07FF;
 800d560:	4b71      	ldr	r3, [pc, #452]	; (800d728 <sbus_decoding+0x28c>)
 800d562:	799b      	ldrb	r3, [r3, #6]
 800d564:	091b      	lsrs	r3, r3, #4
 800d566:	b2db      	uxtb	r3, r3
 800d568:	b21a      	sxth	r2, r3
 800d56a:	4b6f      	ldr	r3, [pc, #444]	; (800d728 <sbus_decoding+0x28c>)
 800d56c:	79db      	ldrb	r3, [r3, #7]
 800d56e:	011b      	lsls	r3, r3, #4
 800d570:	b21b      	sxth	r3, r3
 800d572:	4313      	orrs	r3, r2
 800d574:	b21b      	sxth	r3, r3
 800d576:	b29b      	uxth	r3, r3
 800d578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	4b6b      	ldr	r3, [pc, #428]	; (800d72c <sbus_decoding+0x290>)
 800d580:	811a      	strh	r2, [r3, #8]
	sbus_rcValue[5] = ((uint16_t)sbus_rxBuf[7] >> 7 | ((uint16_t)sbus_rxBuf[8] << 1) | (uint16_t)sbus_rxBuf[9] << 9) & 0x07FF;
 800d582:	4b69      	ldr	r3, [pc, #420]	; (800d728 <sbus_decoding+0x28c>)
 800d584:	79db      	ldrb	r3, [r3, #7]
 800d586:	09db      	lsrs	r3, r3, #7
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	b21a      	sxth	r2, r3
 800d58c:	4b66      	ldr	r3, [pc, #408]	; (800d728 <sbus_decoding+0x28c>)
 800d58e:	7a1b      	ldrb	r3, [r3, #8]
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	b21b      	sxth	r3, r3
 800d594:	4313      	orrs	r3, r2
 800d596:	b21a      	sxth	r2, r3
 800d598:	4b63      	ldr	r3, [pc, #396]	; (800d728 <sbus_decoding+0x28c>)
 800d59a:	7a5b      	ldrb	r3, [r3, #9]
 800d59c:	025b      	lsls	r3, r3, #9
 800d59e:	b21b      	sxth	r3, r3
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	b21b      	sxth	r3, r3
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	4b5f      	ldr	r3, [pc, #380]	; (800d72c <sbus_decoding+0x290>)
 800d5ae:	815a      	strh	r2, [r3, #10]
	sbus_rcValue[6] = ((uint16_t)sbus_rxBuf[9] >> 2 | ((uint16_t)sbus_rxBuf[10] << 6)) & 0x07FF;
 800d5b0:	4b5d      	ldr	r3, [pc, #372]	; (800d728 <sbus_decoding+0x28c>)
 800d5b2:	7a5b      	ldrb	r3, [r3, #9]
 800d5b4:	089b      	lsrs	r3, r3, #2
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	b21a      	sxth	r2, r3
 800d5ba:	4b5b      	ldr	r3, [pc, #364]	; (800d728 <sbus_decoding+0x28c>)
 800d5bc:	7a9b      	ldrb	r3, [r3, #10]
 800d5be:	019b      	lsls	r3, r3, #6
 800d5c0:	b21b      	sxth	r3, r3
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	b21b      	sxth	r3, r3
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5cc:	b29a      	uxth	r2, r3
 800d5ce:	4b57      	ldr	r3, [pc, #348]	; (800d72c <sbus_decoding+0x290>)
 800d5d0:	819a      	strh	r2, [r3, #12]
	sbus_rcValue[7] = ((uint16_t)sbus_rxBuf[10] >> 5 | ((uint16_t)sbus_rxBuf[11] << 3)) & 0x07FF;
 800d5d2:	4b55      	ldr	r3, [pc, #340]	; (800d728 <sbus_decoding+0x28c>)
 800d5d4:	7a9b      	ldrb	r3, [r3, #10]
 800d5d6:	095b      	lsrs	r3, r3, #5
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	b21a      	sxth	r2, r3
 800d5dc:	4b52      	ldr	r3, [pc, #328]	; (800d728 <sbus_decoding+0x28c>)
 800d5de:	7adb      	ldrb	r3, [r3, #11]
 800d5e0:	00db      	lsls	r3, r3, #3
 800d5e2:	b21b      	sxth	r3, r3
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	b21b      	sxth	r3, r3
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	4b4e      	ldr	r3, [pc, #312]	; (800d72c <sbus_decoding+0x290>)
 800d5f2:	81da      	strh	r2, [r3, #14]

	sbus_rcValue[8] = ((uint16_t)sbus_rxBuf[12] << 0 | ((uint16_t)sbus_rxBuf[13] << 8)) & 0x07FF;
 800d5f4:	4b4c      	ldr	r3, [pc, #304]	; (800d728 <sbus_decoding+0x28c>)
 800d5f6:	7b1b      	ldrb	r3, [r3, #12]
 800d5f8:	b21a      	sxth	r2, r3
 800d5fa:	4b4b      	ldr	r3, [pc, #300]	; (800d728 <sbus_decoding+0x28c>)
 800d5fc:	7b5b      	ldrb	r3, [r3, #13]
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	b21b      	sxth	r3, r3
 800d602:	4313      	orrs	r3, r2
 800d604:	b21b      	sxth	r3, r3
 800d606:	b29b      	uxth	r3, r3
 800d608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d60c:	b29a      	uxth	r2, r3
 800d60e:	4b47      	ldr	r3, [pc, #284]	; (800d72c <sbus_decoding+0x290>)
 800d610:	821a      	strh	r2, [r3, #16]
	sbus_rcValue[9] = ((uint16_t)sbus_rxBuf[13] >> 3 | ((uint16_t)sbus_rxBuf[14] << 5)) & 0x07FF;
 800d612:	4b45      	ldr	r3, [pc, #276]	; (800d728 <sbus_decoding+0x28c>)
 800d614:	7b5b      	ldrb	r3, [r3, #13]
 800d616:	08db      	lsrs	r3, r3, #3
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	b21a      	sxth	r2, r3
 800d61c:	4b42      	ldr	r3, [pc, #264]	; (800d728 <sbus_decoding+0x28c>)
 800d61e:	7b9b      	ldrb	r3, [r3, #14]
 800d620:	015b      	lsls	r3, r3, #5
 800d622:	b21b      	sxth	r3, r3
 800d624:	4313      	orrs	r3, r2
 800d626:	b21b      	sxth	r3, r3
 800d628:	b29b      	uxth	r3, r3
 800d62a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d62e:	b29a      	uxth	r2, r3
 800d630:	4b3e      	ldr	r3, [pc, #248]	; (800d72c <sbus_decoding+0x290>)
 800d632:	825a      	strh	r2, [r3, #18]
	sbus_rcValue[10] = ((uint16_t)sbus_rxBuf[14] >> 6 | ((uint16_t)sbus_rxBuf[15] << 2) | (uint16_t)sbus_rxBuf[16] << 10) & 0x07FF;
 800d634:	4b3c      	ldr	r3, [pc, #240]	; (800d728 <sbus_decoding+0x28c>)
 800d636:	7b9b      	ldrb	r3, [r3, #14]
 800d638:	099b      	lsrs	r3, r3, #6
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	b21a      	sxth	r2, r3
 800d63e:	4b3a      	ldr	r3, [pc, #232]	; (800d728 <sbus_decoding+0x28c>)
 800d640:	7bdb      	ldrb	r3, [r3, #15]
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	b21b      	sxth	r3, r3
 800d646:	4313      	orrs	r3, r2
 800d648:	b21a      	sxth	r2, r3
 800d64a:	4b37      	ldr	r3, [pc, #220]	; (800d728 <sbus_decoding+0x28c>)
 800d64c:	7c1b      	ldrb	r3, [r3, #16]
 800d64e:	029b      	lsls	r3, r3, #10
 800d650:	b21b      	sxth	r3, r3
 800d652:	4313      	orrs	r3, r2
 800d654:	b21b      	sxth	r3, r3
 800d656:	b29b      	uxth	r3, r3
 800d658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	4b33      	ldr	r3, [pc, #204]	; (800d72c <sbus_decoding+0x290>)
 800d660:	829a      	strh	r2, [r3, #20]
	sbus_rcValue[11] = ((uint16_t)sbus_rxBuf[16] >> 1 | ((uint16_t)sbus_rxBuf[17] << 7)) & 0x07FF;
 800d662:	4b31      	ldr	r3, [pc, #196]	; (800d728 <sbus_decoding+0x28c>)
 800d664:	7c1b      	ldrb	r3, [r3, #16]
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	b21a      	sxth	r2, r3
 800d66c:	4b2e      	ldr	r3, [pc, #184]	; (800d728 <sbus_decoding+0x28c>)
 800d66e:	7c5b      	ldrb	r3, [r3, #17]
 800d670:	01db      	lsls	r3, r3, #7
 800d672:	b21b      	sxth	r3, r3
 800d674:	4313      	orrs	r3, r2
 800d676:	b21b      	sxth	r3, r3
 800d678:	b29b      	uxth	r3, r3
 800d67a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d67e:	b29a      	uxth	r2, r3
 800d680:	4b2a      	ldr	r3, [pc, #168]	; (800d72c <sbus_decoding+0x290>)
 800d682:	82da      	strh	r2, [r3, #22]
	sbus_rcValue[12] = ((uint16_t)sbus_rxBuf[17] >> 4 | ((uint16_t)sbus_rxBuf[18] << 4)) & 0x07FF;
 800d684:	4b28      	ldr	r3, [pc, #160]	; (800d728 <sbus_decoding+0x28c>)
 800d686:	7c5b      	ldrb	r3, [r3, #17]
 800d688:	091b      	lsrs	r3, r3, #4
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	b21a      	sxth	r2, r3
 800d68e:	4b26      	ldr	r3, [pc, #152]	; (800d728 <sbus_decoding+0x28c>)
 800d690:	7c9b      	ldrb	r3, [r3, #18]
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	b21b      	sxth	r3, r3
 800d696:	4313      	orrs	r3, r2
 800d698:	b21b      	sxth	r3, r3
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	4b22      	ldr	r3, [pc, #136]	; (800d72c <sbus_decoding+0x290>)
 800d6a4:	831a      	strh	r2, [r3, #24]
	sbus_rcValue[13] = ((uint16_t)sbus_rxBuf[18] >> 7 | ((uint16_t)sbus_rxBuf[19] << 1) | (uint16_t)sbus_rxBuf[21] << 9) & 0x07FF;
 800d6a6:	4b20      	ldr	r3, [pc, #128]	; (800d728 <sbus_decoding+0x28c>)
 800d6a8:	7c9b      	ldrb	r3, [r3, #18]
 800d6aa:	09db      	lsrs	r3, r3, #7
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	b21a      	sxth	r2, r3
 800d6b0:	4b1d      	ldr	r3, [pc, #116]	; (800d728 <sbus_decoding+0x28c>)
 800d6b2:	7cdb      	ldrb	r3, [r3, #19]
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	b21b      	sxth	r3, r3
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	b21a      	sxth	r2, r3
 800d6bc:	4b1a      	ldr	r3, [pc, #104]	; (800d728 <sbus_decoding+0x28c>)
 800d6be:	7d5b      	ldrb	r3, [r3, #21]
 800d6c0:	025b      	lsls	r3, r3, #9
 800d6c2:	b21b      	sxth	r3, r3
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	b21b      	sxth	r3, r3
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	4b16      	ldr	r3, [pc, #88]	; (800d72c <sbus_decoding+0x290>)
 800d6d2:	835a      	strh	r2, [r3, #26]
	sbus_rcValue[14] = ((uint16_t)sbus_rxBuf[20] >> 2 | ((uint16_t)sbus_rxBuf[21] << 6)) & 0x07FF;
 800d6d4:	4b14      	ldr	r3, [pc, #80]	; (800d728 <sbus_decoding+0x28c>)
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	089b      	lsrs	r3, r3, #2
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	b21a      	sxth	r2, r3
 800d6de:	4b12      	ldr	r3, [pc, #72]	; (800d728 <sbus_decoding+0x28c>)
 800d6e0:	7d5b      	ldrb	r3, [r3, #21]
 800d6e2:	019b      	lsls	r3, r3, #6
 800d6e4:	b21b      	sxth	r3, r3
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	b21b      	sxth	r3, r3
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	4b0e      	ldr	r3, [pc, #56]	; (800d72c <sbus_decoding+0x290>)
 800d6f4:	839a      	strh	r2, [r3, #28]
	sbus_rcValue[15] = ((uint16_t)sbus_rxBuf[21] >> 5 | ((uint16_t)sbus_rxBuf[22] << 3)) & 0x07FF;
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <sbus_decoding+0x28c>)
 800d6f8:	7d5b      	ldrb	r3, [r3, #21]
 800d6fa:	095b      	lsrs	r3, r3, #5
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	b21a      	sxth	r2, r3
 800d700:	4b09      	ldr	r3, [pc, #36]	; (800d728 <sbus_decoding+0x28c>)
 800d702:	7d9b      	ldrb	r3, [r3, #22]
 800d704:	00db      	lsls	r3, r3, #3
 800d706:	b21b      	sxth	r3, r3
 800d708:	4313      	orrs	r3, r2
 800d70a:	b21b      	sxth	r3, r3
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d712:	b29a      	uxth	r2, r3
 800d714:	4b05      	ldr	r3, [pc, #20]	; (800d72c <sbus_decoding+0x290>)
 800d716:	83da      	strh	r2, [r3, #30]


	if (((uint16_t)sbus_rxBuf[23]) & 0x0001)       sbus_rcValue[16] = 2000; else sbus_rcValue[16] = 1000;
 800d718:	4b03      	ldr	r3, [pc, #12]	; (800d728 <sbus_decoding+0x28c>)
 800d71a:	7ddb      	ldrb	r3, [r3, #23]
 800d71c:	f003 0301 	and.w	r3, r3, #1
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00a      	beq.n	800d73a <sbus_decoding+0x29e>
 800d724:	e004      	b.n	800d730 <sbus_decoding+0x294>
 800d726:	bf00      	nop
 800d728:	2000048c 	.word	0x2000048c
 800d72c:	200004c4 	.word	0x200004c4
 800d730:	4b20      	ldr	r3, [pc, #128]	; (800d7b4 <sbus_decoding+0x318>)
 800d732:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d736:	841a      	strh	r2, [r3, #32]
 800d738:	e003      	b.n	800d742 <sbus_decoding+0x2a6>
 800d73a:	4b1e      	ldr	r3, [pc, #120]	; (800d7b4 <sbus_decoding+0x318>)
 800d73c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d740:	841a      	strh	r2, [r3, #32]
	if (((uint16_t)sbus_rxBuf[23] >> 1) & 0x0001)  sbus_rcValue[17] = 2000; else sbus_rcValue[17] = 1000;
 800d742:	4b1d      	ldr	r3, [pc, #116]	; (800d7b8 <sbus_decoding+0x31c>)
 800d744:	7ddb      	ldrb	r3, [r3, #23]
 800d746:	085b      	lsrs	r3, r3, #1
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d004      	beq.n	800d75c <sbus_decoding+0x2c0>
 800d752:	4b18      	ldr	r3, [pc, #96]	; (800d7b4 <sbus_decoding+0x318>)
 800d754:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d758:	845a      	strh	r2, [r3, #34]	; 0x22
 800d75a:	e003      	b.n	800d764 <sbus_decoding+0x2c8>
 800d75c:	4b15      	ldr	r3, [pc, #84]	; (800d7b4 <sbus_decoding+0x318>)
 800d75e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d762:	845a      	strh	r2, [r3, #34]	; 0x22

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800d764:	2300      	movs	r3, #0
 800d766:	607b      	str	r3, [r7, #4]
 800d768:	e016      	b.n	800d798 <sbus_decoding+0x2fc>
		sbus_comp_rcValue[i] = (sbus_rcValue[i]) * 5 / 8 + 880;
 800d76a:	4a12      	ldr	r2, [pc, #72]	; (800d7b4 <sbus_decoding+0x318>)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d772:	461a      	mov	r2, r3
 800d774:	4613      	mov	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	4413      	add	r3, r2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	da00      	bge.n	800d780 <sbus_decoding+0x2e4>
 800d77e:	3307      	adds	r3, #7
 800d780:	10db      	asrs	r3, r3, #3
 800d782:	b29b      	uxth	r3, r3
 800d784:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800d788:	b299      	uxth	r1, r3
 800d78a:	4a0c      	ldr	r2, [pc, #48]	; (800d7bc <sbus_decoding+0x320>)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	3301      	adds	r3, #1
 800d796:	607b      	str	r3, [r7, #4]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b11      	cmp	r3, #17
 800d79c:	dde5      	ble.n	800d76a <sbus_decoding+0x2ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe

	sbus_hzcnt++;
 800d79e:	4b08      	ldr	r3, [pc, #32]	; (800d7c0 <sbus_decoding+0x324>)
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	4b06      	ldr	r3, [pc, #24]	; (800d7c0 <sbus_decoding+0x324>)
 800d7a8:	801a      	strh	r2, [r3, #0]
}
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	200004c4 	.word	0x200004c4
 800d7b8:	2000048c 	.word	0x2000048c
 800d7bc:	200004e8 	.word	0x200004e8
 800d7c0:	20000510 	.word	0x20000510

0800d7c4 <sbus_callback>:


void sbus_callback(){
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800d7c8:	4b33      	ldr	r3, [pc, #204]	; (800d898 <sbus_callback+0xd4>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	701a      	strb	r2, [r3, #0]
 800d7ce:	e05c      	b.n	800d88a <sbus_callback+0xc6>
		_curByte = sbus_dmaBuf[i];
 800d7d0:	4b31      	ldr	r3, [pc, #196]	; (800d898 <sbus_callback+0xd4>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	4b31      	ldr	r3, [pc, #196]	; (800d89c <sbus_callback+0xd8>)
 800d7d8:	5c9a      	ldrb	r2, [r3, r2]
 800d7da:	4b31      	ldr	r3, [pc, #196]	; (800d8a0 <sbus_callback+0xdc>)
 800d7dc:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 800d7de:	4b31      	ldr	r3, [pc, #196]	; (800d8a4 <sbus_callback+0xe0>)
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d11f      	bne.n	800d826 <sbus_callback+0x62>
				if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 800d7e6:	4b2e      	ldr	r3, [pc, #184]	; (800d8a0 <sbus_callback+0xdc>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2b0f      	cmp	r3, #15
 800d7ec:	d117      	bne.n	800d81e <sbus_callback+0x5a>
 800d7ee:	4b2e      	ldr	r3, [pc, #184]	; (800d8a8 <sbus_callback+0xe4>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d005      	beq.n	800d802 <sbus_callback+0x3e>
 800d7f6:	4b2c      	ldr	r3, [pc, #176]	; (800d8a8 <sbus_callback+0xe4>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	f003 030f 	and.w	r3, r3, #15
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d10d      	bne.n	800d81e <sbus_callback+0x5a>
					sbus_rxBuf[_parserState] = _curByte;
 800d802:	4b28      	ldr	r3, [pc, #160]	; (800d8a4 <sbus_callback+0xe0>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	461a      	mov	r2, r3
 800d808:	4b25      	ldr	r3, [pc, #148]	; (800d8a0 <sbus_callback+0xdc>)
 800d80a:	7819      	ldrb	r1, [r3, #0]
 800d80c:	4b27      	ldr	r3, [pc, #156]	; (800d8ac <sbus_callback+0xe8>)
 800d80e:	5499      	strb	r1, [r3, r2]
					_parserState++;
 800d810:	4b24      	ldr	r3, [pc, #144]	; (800d8a4 <sbus_callback+0xe0>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	3301      	adds	r3, #1
 800d816:	b2da      	uxtb	r2, r3
 800d818:	4b22      	ldr	r3, [pc, #136]	; (800d8a4 <sbus_callback+0xe0>)
 800d81a:	701a      	strb	r2, [r3, #0]
 800d81c:	e02b      	b.n	800d876 <sbus_callback+0xb2>
				} else {
					_parserState = 0;
 800d81e:	4b21      	ldr	r3, [pc, #132]	; (800d8a4 <sbus_callback+0xe0>)
 800d820:	2200      	movs	r2, #0
 800d822:	701a      	strb	r2, [r3, #0]
 800d824:	e027      	b.n	800d876 <sbus_callback+0xb2>
				}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 800d826:	4b1f      	ldr	r3, [pc, #124]	; (800d8a4 <sbus_callback+0xe0>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b18      	cmp	r3, #24
 800d82c:	d80c      	bhi.n	800d848 <sbus_callback+0x84>
				sbus_rxBuf[_parserState] = _curByte;
 800d82e:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <sbus_callback+0xe0>)
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	4b1a      	ldr	r3, [pc, #104]	; (800d8a0 <sbus_callback+0xdc>)
 800d836:	7819      	ldrb	r1, [r3, #0]
 800d838:	4b1c      	ldr	r3, [pc, #112]	; (800d8ac <sbus_callback+0xe8>)
 800d83a:	5499      	strb	r1, [r3, r2]
				_parserState++;
 800d83c:	4b19      	ldr	r3, [pc, #100]	; (800d8a4 <sbus_callback+0xe0>)
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	3301      	adds	r3, #1
 800d842:	b2da      	uxtb	r2, r3
 800d844:	4b17      	ldr	r3, [pc, #92]	; (800d8a4 <sbus_callback+0xe0>)
 800d846:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 800d848:	4b16      	ldr	r3, [pc, #88]	; (800d8a4 <sbus_callback+0xe0>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b19      	cmp	r3, #25
 800d84e:	d112      	bne.n	800d876 <sbus_callback+0xb2>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 800d850:	4b13      	ldr	r3, [pc, #76]	; (800d8a0 <sbus_callback+0xdc>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <sbus_callback+0xa0>
 800d858:	4b11      	ldr	r3, [pc, #68]	; (800d8a0 <sbus_callback+0xdc>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 030f 	and.w	r3, r3, #15
 800d860:	2b00      	cmp	r3, #0
 800d862:	d105      	bne.n	800d870 <sbus_callback+0xac>
					_parserState = 0;
 800d864:	4b0f      	ldr	r3, [pc, #60]	; (800d8a4 <sbus_callback+0xe0>)
 800d866:	2200      	movs	r2, #0
 800d868:	701a      	strb	r2, [r3, #0]
					sbus_decoding();
 800d86a:	f7ff fe17 	bl	800d49c <sbus_decoding>
 800d86e:	e002      	b.n	800d876 <sbus_callback+0xb2>
				}
				else {
					_parserState = 0;
 800d870:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <sbus_callback+0xe0>)
 800d872:	2200      	movs	r2, #0
 800d874:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 800d876:	4b0a      	ldr	r3, [pc, #40]	; (800d8a0 <sbus_callback+0xdc>)
 800d878:	781a      	ldrb	r2, [r3, #0]
 800d87a:	4b0b      	ldr	r3, [pc, #44]	; (800d8a8 <sbus_callback+0xe4>)
 800d87c:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 800d87e:	4b06      	ldr	r3, [pc, #24]	; (800d898 <sbus_callback+0xd4>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	3301      	adds	r3, #1
 800d884:	b2da      	uxtb	r2, r3
 800d886:	4b04      	ldr	r3, [pc, #16]	; (800d898 <sbus_callback+0xd4>)
 800d888:	701a      	strb	r2, [r3, #0]
 800d88a:	4b03      	ldr	r3, [pc, #12]	; (800d898 <sbus_callback+0xd4>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	2b18      	cmp	r3, #24
 800d890:	d99e      	bls.n	800d7d0 <sbus_callback+0xc>
	}
}
 800d892:	bf00      	nop
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20000517 	.word	0x20000517
 800d89c:	200004a8 	.word	0x200004a8
 800d8a0:	20000515 	.word	0x20000515
 800d8a4:	20000514 	.word	0x20000514
 800d8a8:	20000516 	.word	0x20000516
 800d8ac:	2000048c 	.word	0x2000048c

0800d8b0 <_write>:
#define USE_BME280
#define USE_SBUS

//we can use printf
int _write(int file, unsigned char* p, int len) // for debug through uart3
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	230a      	movs	r3, #10
 800d8c2:	68b9      	ldr	r1, [r7, #8]
 800d8c4:	4803      	ldr	r0, [pc, #12]	; (800d8d4 <_write+0x24>)
 800d8c6:	f7fa f928 	bl	8007b1a <HAL_UART_Transmit>
	return len;
 800d8ca:	687b      	ldr	r3, [r7, #4]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	2000149c 	.word	0x2000149c

0800d8d8 <GPS_main>:

#ifdef USE_GPS
void GPS_main(){
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	af00      	add	r7, sp, #0
    TM_GPS_Init(&huart5);
 800d8dc:	4808      	ldr	r0, [pc, #32]	; (800d900 <GPS_main+0x28>)
 800d8de:	f7fe fae9 	bl	800beb4 <TM_GPS_Init>
//	HAL_UART_Receive_DMA(&huart4, &gps.dmaBuf, 1);
	while(1){
//		printf("run\r\n");
		GPS_calHz();
 800d8e2:	f7fe fbb5 	bl	800c050 <GPS_calHz>
		printf("%u\r\n", gps.hz);
 800d8e6:	4b07      	ldr	r3, [pc, #28]	; (800d904 <GPS_main+0x2c>)
 800d8e8:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4806      	ldr	r0, [pc, #24]	; (800d908 <GPS_main+0x30>)
 800d8f0:	f005 f990 	bl	8012c14 <iprintf>
		osDelay(1000);
 800d8f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d8f8:	f000 f9cc 	bl	800dc94 <osDelay>
		GPS_calHz();
 800d8fc:	e7f1      	b.n	800d8e2 <GPS_main+0xa>
 800d8fe:	bf00      	nop
 800d900:	200014dc 	.word	0x200014dc
 800d904:	20001b58 	.word	0x20001b58
 800d908:	08016460 	.word	0x08016460

0800d90c <IST8310_main>:
}
#endif


#ifdef USE_IST8310
void IST8310_main(){
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
	taskENTER_CRITICAL();
 800d910:	f002 fb74 	bl	800fffc <vPortEnterCritical>
	IST8310(&hi2c2);
 800d914:	4805      	ldr	r0, [pc, #20]	; (800d92c <IST8310_main+0x20>)
 800d916:	f7fb fb6f 	bl	8008ff8 <IST8310>
	taskEXIT_CRITICAL();
 800d91a:	f002 fb9d 	bl	8010058 <vPortExitCritical>

//	IST8310_tempBuf tempBuffer;
//	IST8310_raw rawBuf;
	while(1){

		IST8310_updataIT();
 800d91e:	f7fb fb7f 	bl	8009020 <IST8310_updataIT>

		osDelay(10);
 800d922:	200a      	movs	r0, #10
 800d924:	f000 f9b6 	bl	800dc94 <osDelay>
		IST8310_updataIT();
 800d928:	e7f9      	b.n	800d91e <IST8310_main+0x12>
 800d92a:	bf00      	nop
 800d92c:	20001268 	.word	0x20001268

0800d930 <BME280_main>:
}
#endif

float globalT, globalP, globalH;

void BME280_main(){
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af02      	add	r7, sp, #8
	taskENTER_CRITICAL();
 800d936:	f002 fb61 	bl	800fffc <vPortEnterCritical>
	BME280(&hi2c2);
 800d93a:	480a      	ldr	r0, [pc, #40]	; (800d964 <BME280_main+0x34>)
 800d93c:	f7fd feb4 	bl	800b6a8 <BME280>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 800d940:	2300      	movs	r3, #0
 800d942:	9301      	str	r3, [sp, #4]
 800d944:	2304      	movs	r3, #4
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	2303      	movs	r3, #3
 800d94a:	2201      	movs	r2, #1
 800d94c:	2101      	movs	r1, #1
 800d94e:	2003      	movs	r0, #3
 800d950:	f7fd ff86 	bl	800b860 <BME280_init>
	taskEXIT_CRITICAL();
 800d954:	f002 fb80 	bl	8010058 <vPortExitCritical>
//		comT = BME280_compensate_T(t);
//		comP = BME280_compensate_P(p);
//		comH = BME280_compensate_H(h);
//		printf("%d %u %u\r\n", comT, comP, comH);

		BME280_updateIT();
 800d958:	f7fd feb6 	bl	800b6c8 <BME280_updateIT>
//		printf("%d\r\n", bme280.countP);
//
//		globalT = comT/100.0;
//		globalP = comP/256.0/100.0;
//		globalH = comH/1024.0;
		osDelay(20);
 800d95c:	2014      	movs	r0, #20
 800d95e:	f000 f999 	bl	800dc94 <osDelay>
		BME280_updateIT();
 800d962:	e7f9      	b.n	800d958 <BME280_main+0x28>
 800d964:	20001268 	.word	0x20001268

0800d968 <userMain>:
	}
}

void userMain(){
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af02      	add	r7, sp, #8
    setvbuf(stdout, NULL, _IONBF, 0);
 800d96e:	4b1c      	ldr	r3, [pc, #112]	; (800d9e0 <userMain+0x78>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	6898      	ldr	r0, [r3, #8]
 800d974:	2300      	movs	r3, #0
 800d976:	2202      	movs	r2, #2
 800d978:	2100      	movs	r1, #0
 800d97a:	f005 f9d7 	bl	8012d2c <setvbuf>

    printf("boot complete\r\n");
 800d97e:	4819      	ldr	r0, [pc, #100]	; (800d9e4 <userMain+0x7c>)
 800d980:	f005 f9bc 	bl	8012cfc <puts>

#ifdef USE_SBUS
	sbus_start(&huart7);
 800d984:	4818      	ldr	r0, [pc, #96]	; (800d9e8 <userMain+0x80>)
 800d986:	f7ff fd75 	bl	800d474 <sbus_start>
#endif

#ifdef USE_BME280
	xTaskCreate(BME280_main,
 800d98a:	2300      	movs	r3, #0
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	2304      	movs	r3, #4
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	2300      	movs	r3, #0
 800d994:	2280      	movs	r2, #128	; 0x80
 800d996:	4915      	ldr	r1, [pc, #84]	; (800d9ec <userMain+0x84>)
 800d998:	4815      	ldr	r0, [pc, #84]	; (800d9f0 <userMain+0x88>)
 800d99a:	f000 ffbf 	bl	800e91c <xTaskCreate>
				4,
				NULL);
#endif

#ifdef USE_IST8310
	xTaskCreate(IST8310_main,
 800d99e:	2300      	movs	r3, #0
 800d9a0:	9301      	str	r3, [sp, #4]
 800d9a2:	2304      	movs	r3, #4
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2280      	movs	r2, #128	; 0x80
 800d9aa:	4912      	ldr	r1, [pc, #72]	; (800d9f4 <userMain+0x8c>)
 800d9ac:	4812      	ldr	r0, [pc, #72]	; (800d9f8 <userMain+0x90>)
 800d9ae:	f000 ffb5 	bl	800e91c <xTaskCreate>
				4,
				NULL);
#endif

#ifdef USE_GPS
	xTaskCreate(GPS_main,
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	2304      	movs	r3, #4
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	2280      	movs	r2, #128	; 0x80
 800d9be:	490f      	ldr	r1, [pc, #60]	; (800d9fc <userMain+0x94>)
 800d9c0:	480f      	ldr	r0, [pc, #60]	; (800da00 <userMain+0x98>)
 800d9c2:	f000 ffab 	bl	800e91c <xTaskCreate>
				4,
				NULL);
#endif

#ifdef USE_MPU9250
    xTaskCreate(MPU9250_main,
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	2304      	movs	r3, #4
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	2280      	movs	r2, #128	; 0x80
 800d9d2:	490c      	ldr	r1, [pc, #48]	; (800da04 <userMain+0x9c>)
 800d9d4:	480c      	ldr	r0, [pc, #48]	; (800da08 <userMain+0xa0>)
 800d9d6:	f000 ffa1 	bl	800e91c <xTaskCreate>
				configMINIMAL_STACK_SIZE,
				NULL,
				4,
				NULL);
#endif
}
 800d9da:	bf00      	nop
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	20000020 	.word	0x20000020
 800d9e4:	08016468 	.word	0x08016468
 800d9e8:	2000145c 	.word	0x2000145c
 800d9ec:	08016478 	.word	0x08016478
 800d9f0:	0800d931 	.word	0x0800d931
 800d9f4:	08016484 	.word	0x08016484
 800d9f8:	0800d90d 	.word	0x0800d90d
 800d9fc:	08016494 	.word	0x08016494
 800da00:	0800d8d9 	.word	0x0800d8d9
 800da04:	080164a0 	.word	0x080164a0
 800da08:	08009281 	.word	0x08009281

0800da0c <HAL_I2C_MemRxCpltCallback>:



//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
#ifdef USE_MPU9250
	MPU9250_rxCpltCallback(hi2c);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7fb fd51 	bl	80094bc <MPU9250_rxCpltCallback>
#endif

#ifdef USE_IST8310
	IST8310_rxCpltCallback(hi2c);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7fb fb24 	bl	8009068 <IST8310_rxCpltCallback>
#endif

#ifdef USE_BME280
	BME280_rxCpltCallback(hi2c);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7fd fe75 	bl	800b710 <BME280_rxCpltCallback>
#endif
}
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
	...

0800da30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
#ifdef USE_SBUS
	if(huart->Instance == UART7){
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a07      	ldr	r2, [pc, #28]	; (800da5c <HAL_UART_RxCpltCallback+0x2c>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d101      	bne.n	800da46 <HAL_UART_RxCpltCallback+0x16>
		sbus_callback();
 800da42:	f7ff febf 	bl	800d7c4 <sbus_callback>
#endif
	if(huart->Instance == USART2){
		// telemetry
	}
#ifdef USE_GPS
	if(huart->Instance == UART5){
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a05      	ldr	r2, [pc, #20]	; (800da60 <HAL_UART_RxCpltCallback+0x30>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d101      	bne.n	800da54 <HAL_UART_RxCpltCallback+0x24>
		TM_GPS_Update();
 800da50:	f7fe fac2 	bl	800bfd8 <TM_GPS_Update>
	}
#endif
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	40007800 	.word	0x40007800
 800da60:	40005000 	.word	0x40005000

0800da64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da64:	b480      	push	{r7}
 800da66:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800da68:	bf00      	nop
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
	...

0800da74 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da7a:	f3ef 8305 	mrs	r3, IPSR
 800da7e:	60bb      	str	r3, [r7, #8]
  return(result);
 800da80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10f      	bne.n	800daa6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da86:	f3ef 8310 	mrs	r3, PRIMASK
 800da8a:	607b      	str	r3, [r7, #4]
  return(result);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d105      	bne.n	800da9e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da92:	f3ef 8311 	mrs	r3, BASEPRI
 800da96:	603b      	str	r3, [r7, #0]
  return(result);
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d007      	beq.n	800daae <osKernelInitialize+0x3a>
 800da9e:	4b0e      	ldr	r3, [pc, #56]	; (800dad8 <osKernelInitialize+0x64>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d103      	bne.n	800daae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800daa6:	f06f 0305 	mvn.w	r3, #5
 800daaa:	60fb      	str	r3, [r7, #12]
 800daac:	e00c      	b.n	800dac8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800daae:	4b0a      	ldr	r3, [pc, #40]	; (800dad8 <osKernelInitialize+0x64>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d105      	bne.n	800dac2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dab6:	4b08      	ldr	r3, [pc, #32]	; (800dad8 <osKernelInitialize+0x64>)
 800dab8:	2201      	movs	r2, #1
 800daba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	60fb      	str	r3, [r7, #12]
 800dac0:	e002      	b.n	800dac8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dac2:	f04f 33ff 	mov.w	r3, #4294967295
 800dac6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dac8:	68fb      	ldr	r3, [r7, #12]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	20000518 	.word	0x20000518

0800dadc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dae2:	f3ef 8305 	mrs	r3, IPSR
 800dae6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dae8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10f      	bne.n	800db0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daee:	f3ef 8310 	mrs	r3, PRIMASK
 800daf2:	607b      	str	r3, [r7, #4]
  return(result);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d105      	bne.n	800db06 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dafa:	f3ef 8311 	mrs	r3, BASEPRI
 800dafe:	603b      	str	r3, [r7, #0]
  return(result);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d007      	beq.n	800db16 <osKernelStart+0x3a>
 800db06:	4b0f      	ldr	r3, [pc, #60]	; (800db44 <osKernelStart+0x68>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d103      	bne.n	800db16 <osKernelStart+0x3a>
    stat = osErrorISR;
 800db0e:	f06f 0305 	mvn.w	r3, #5
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	e010      	b.n	800db38 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800db16:	4b0b      	ldr	r3, [pc, #44]	; (800db44 <osKernelStart+0x68>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d109      	bne.n	800db32 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800db1e:	f7ff ffa1 	bl	800da64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800db22:	4b08      	ldr	r3, [pc, #32]	; (800db44 <osKernelStart+0x68>)
 800db24:	2202      	movs	r2, #2
 800db26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800db28:	f001 f8ea 	bl	800ed00 <vTaskStartScheduler>
      stat = osOK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	60fb      	str	r3, [r7, #12]
 800db30:	e002      	b.n	800db38 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800db32:	f04f 33ff 	mov.w	r3, #4294967295
 800db36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800db38:	68fb      	ldr	r3, [r7, #12]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	20000518 	.word	0x20000518

0800db48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800db48:	b580      	push	{r7, lr}
 800db4a:	b090      	sub	sp, #64	; 0x40
 800db4c:	af04      	add	r7, sp, #16
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800db54:	2300      	movs	r3, #0
 800db56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db58:	f3ef 8305 	mrs	r3, IPSR
 800db5c:	61fb      	str	r3, [r7, #28]
  return(result);
 800db5e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800db60:	2b00      	cmp	r3, #0
 800db62:	f040 808f 	bne.w	800dc84 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db66:	f3ef 8310 	mrs	r3, PRIMASK
 800db6a:	61bb      	str	r3, [r7, #24]
  return(result);
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d105      	bne.n	800db7e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db72:	f3ef 8311 	mrs	r3, BASEPRI
 800db76:	617b      	str	r3, [r7, #20]
  return(result);
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d003      	beq.n	800db86 <osThreadNew+0x3e>
 800db7e:	4b44      	ldr	r3, [pc, #272]	; (800dc90 <osThreadNew+0x148>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d07e      	beq.n	800dc84 <osThreadNew+0x13c>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d07b      	beq.n	800dc84 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800db8c:	2380      	movs	r3, #128	; 0x80
 800db8e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800db90:	2318      	movs	r3, #24
 800db92:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800db94:	2300      	movs	r3, #0
 800db96:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800db98:	f04f 33ff 	mov.w	r3, #4294967295
 800db9c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d045      	beq.n	800dc30 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <osThreadNew+0x6a>
        name = attr->name;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d002      	beq.n	800dbc0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d008      	beq.n	800dbd8 <osThreadNew+0x90>
 800dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc8:	2b38      	cmp	r3, #56	; 0x38
 800dbca:	d805      	bhi.n	800dbd8 <osThreadNew+0x90>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	f003 0301 	and.w	r3, r3, #1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <osThreadNew+0x94>
        return (NULL);
 800dbd8:	2300      	movs	r3, #0
 800dbda:	e054      	b.n	800dc86 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	089b      	lsrs	r3, r3, #2
 800dbea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00e      	beq.n	800dc12 <osThreadNew+0xca>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	2b5b      	cmp	r3, #91	; 0x5b
 800dbfa:	d90a      	bls.n	800dc12 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d006      	beq.n	800dc12 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d002      	beq.n	800dc12 <osThreadNew+0xca>
        mem = 1;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	623b      	str	r3, [r7, #32]
 800dc10:	e010      	b.n	800dc34 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10c      	bne.n	800dc34 <osThreadNew+0xec>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d108      	bne.n	800dc34 <osThreadNew+0xec>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d104      	bne.n	800dc34 <osThreadNew+0xec>
          mem = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	623b      	str	r3, [r7, #32]
 800dc2e:	e001      	b.n	800dc34 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dc34:	6a3b      	ldr	r3, [r7, #32]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d110      	bne.n	800dc5c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dc42:	9202      	str	r2, [sp, #8]
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f000 fe09 	bl	800e868 <xTaskCreateStatic>
 800dc56:	4603      	mov	r3, r0
 800dc58:	613b      	str	r3, [r7, #16]
 800dc5a:	e013      	b.n	800dc84 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800dc5c:	6a3b      	ldr	r3, [r7, #32]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d110      	bne.n	800dc84 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f000 fe51 	bl	800e91c <xTaskCreate>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d001      	beq.n	800dc84 <osThreadNew+0x13c>
          hTask = NULL;
 800dc80:	2300      	movs	r3, #0
 800dc82:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dc84:	693b      	ldr	r3, [r7, #16]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3730      	adds	r7, #48	; 0x30
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000518 	.word	0x20000518

0800dc94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc9c:	f3ef 8305 	mrs	r3, IPSR
 800dca0:	613b      	str	r3, [r7, #16]
  return(result);
 800dca2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10f      	bne.n	800dcc8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dca8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcac:	60fb      	str	r3, [r7, #12]
  return(result);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d105      	bne.n	800dcc0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcb4:	f3ef 8311 	mrs	r3, BASEPRI
 800dcb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d007      	beq.n	800dcd0 <osDelay+0x3c>
 800dcc0:	4b0a      	ldr	r3, [pc, #40]	; (800dcec <osDelay+0x58>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d103      	bne.n	800dcd0 <osDelay+0x3c>
    stat = osErrorISR;
 800dcc8:	f06f 0305 	mvn.w	r3, #5
 800dccc:	617b      	str	r3, [r7, #20]
 800dcce:	e007      	b.n	800dce0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d002      	beq.n	800dce0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 ffdc 	bl	800ec98 <vTaskDelay>
    }
  }

  return (stat);
 800dce0:	697b      	ldr	r3, [r7, #20]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3718      	adds	r7, #24
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	20000518 	.word	0x20000518

0800dcf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dcf0:	b480      	push	{r7}
 800dcf2:	b085      	sub	sp, #20
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	4a07      	ldr	r2, [pc, #28]	; (800dd1c <vApplicationGetIdleTaskMemory+0x2c>)
 800dd00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	4a06      	ldr	r2, [pc, #24]	; (800dd20 <vApplicationGetIdleTaskMemory+0x30>)
 800dd06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2280      	movs	r2, #128	; 0x80
 800dd0c:	601a      	str	r2, [r3, #0]
}
 800dd0e:	bf00      	nop
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	2000051c 	.word	0x2000051c
 800dd20:	20000578 	.word	0x20000578

0800dd24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4a07      	ldr	r2, [pc, #28]	; (800dd50 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	4a06      	ldr	r2, [pc, #24]	; (800dd54 <vApplicationGetTimerTaskMemory+0x30>)
 800dd3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd42:	601a      	str	r2, [r3, #0]
}
 800dd44:	bf00      	nop
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	20000778 	.word	0x20000778
 800dd54:	200007d4 	.word	0x200007d4

0800dd58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f103 0208 	add.w	r2, r3, #8
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f103 0208 	add.w	r2, r3, #8
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f103 0208 	add.w	r2, r3, #8
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd8c:	bf00      	nop
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dda6:	bf00      	nop
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b085      	sub	sp, #20
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	689a      	ldr	r2, [r3, #8]
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	1c5a      	adds	r2, r3, #1
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	601a      	str	r2, [r3, #0]
}
 800ddee:	bf00      	nop
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b085      	sub	sp, #20
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de10:	d103      	bne.n	800de1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	e00c      	b.n	800de34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	3308      	adds	r3, #8
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e002      	b.n	800de28 <vListInsert+0x2e>
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	429a      	cmp	r2, r3
 800de32:	d2f6      	bcs.n	800de22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	683a      	ldr	r2, [r7, #0]
 800de42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	1c5a      	adds	r2, r3, #1
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	601a      	str	r2, [r3, #0]
}
 800de60:	bf00      	nop
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	6892      	ldr	r2, [r2, #8]
 800de82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	6852      	ldr	r2, [r2, #4]
 800de8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	429a      	cmp	r2, r3
 800de96:	d103      	bne.n	800dea0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	689a      	ldr	r2, [r3, #8]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	1e5a      	subs	r2, r3, #1
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d109      	bne.n	800dee8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	60bb      	str	r3, [r7, #8]
 800dee6:	e7fe      	b.n	800dee6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800dee8:	f002 f888 	bl	800fffc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800def4:	68f9      	ldr	r1, [r7, #12]
 800def6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800def8:	fb01 f303 	mul.w	r3, r1, r3
 800defc:	441a      	add	r2, r3
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df18:	3b01      	subs	r3, #1
 800df1a:	68f9      	ldr	r1, [r7, #12]
 800df1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df1e:	fb01 f303 	mul.w	r3, r1, r3
 800df22:	441a      	add	r2, r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	22ff      	movs	r2, #255	; 0xff
 800df2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	22ff      	movs	r2, #255	; 0xff
 800df34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d114      	bne.n	800df68 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d01a      	beq.n	800df7c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3310      	adds	r3, #16
 800df4a:	4618      	mov	r0, r3
 800df4c:	f001 f958 	bl	800f200 <xTaskRemoveFromEventList>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d012      	beq.n	800df7c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df56:	4b0d      	ldr	r3, [pc, #52]	; (800df8c <xQueueGenericReset+0xcc>)
 800df58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	e009      	b.n	800df7c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	3310      	adds	r3, #16
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7ff fef3 	bl	800dd58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3324      	adds	r3, #36	; 0x24
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff feee 	bl	800dd58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df7c:	f002 f86c 	bl	8010058 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df80:	2301      	movs	r3, #1
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	e000ed04 	.word	0xe000ed04

0800df90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df90:	b580      	push	{r7, lr}
 800df92:	b08e      	sub	sp, #56	; 0x38
 800df94:	af02      	add	r7, sp, #8
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	607a      	str	r2, [r7, #4]
 800df9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d109      	bne.n	800dfb8 <xQueueGenericCreateStatic+0x28>
 800dfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa8:	f383 8811 	msr	BASEPRI, r3
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfb6:	e7fe      	b.n	800dfb6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d109      	bne.n	800dfd2 <xQueueGenericCreateStatic+0x42>
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24
 800dfd0:	e7fe      	b.n	800dfd0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <xQueueGenericCreateStatic+0x4e>
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <xQueueGenericCreateStatic+0x52>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e000      	b.n	800dfe4 <xQueueGenericCreateStatic+0x54>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d109      	bne.n	800dffc <xQueueGenericCreateStatic+0x6c>
 800dfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfec:	f383 8811 	msr	BASEPRI, r3
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	f3bf 8f4f 	dsb	sy
 800dff8:	623b      	str	r3, [r7, #32]
 800dffa:	e7fe      	b.n	800dffa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d102      	bne.n	800e008 <xQueueGenericCreateStatic+0x78>
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <xQueueGenericCreateStatic+0x7c>
 800e008:	2301      	movs	r3, #1
 800e00a:	e000      	b.n	800e00e <xQueueGenericCreateStatic+0x7e>
 800e00c:	2300      	movs	r3, #0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d109      	bne.n	800e026 <xQueueGenericCreateStatic+0x96>
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	61fb      	str	r3, [r7, #28]
 800e024:	e7fe      	b.n	800e024 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e026:	2350      	movs	r3, #80	; 0x50
 800e028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b50      	cmp	r3, #80	; 0x50
 800e02e:	d009      	beq.n	800e044 <xQueueGenericCreateStatic+0xb4>
 800e030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e034:	f383 8811 	msr	BASEPRI, r3
 800e038:	f3bf 8f6f 	isb	sy
 800e03c:	f3bf 8f4f 	dsb	sy
 800e040:	61bb      	str	r3, [r7, #24]
 800e042:	e7fe      	b.n	800e042 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e044:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00d      	beq.n	800e06c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e058:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	4613      	mov	r3, r2
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	68b9      	ldr	r1, [r7, #8]
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 f805 	bl	800e076 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e06e:	4618      	mov	r0, r3
 800e070:	3730      	adds	r7, #48	; 0x30
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b084      	sub	sp, #16
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	60f8      	str	r0, [r7, #12]
 800e07e:	60b9      	str	r1, [r7, #8]
 800e080:	607a      	str	r2, [r7, #4]
 800e082:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d103      	bne.n	800e092 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	69ba      	ldr	r2, [r7, #24]
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	e002      	b.n	800e098 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	68fa      	ldr	r2, [r7, #12]
 800e09c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e0a4:	2101      	movs	r1, #1
 800e0a6:	69b8      	ldr	r0, [r7, #24]
 800e0a8:	f7ff ff0a 	bl	800dec0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	78fa      	ldrb	r2, [r7, #3]
 800e0b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e0b4:	bf00      	nop
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08e      	sub	sp, #56	; 0x38
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
 800e0c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d109      	bne.n	800e0ec <xQueueGenericSend+0x30>
 800e0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0dc:	f383 8811 	msr	BASEPRI, r3
 800e0e0:	f3bf 8f6f 	isb	sy
 800e0e4:	f3bf 8f4f 	dsb	sy
 800e0e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0ea:	e7fe      	b.n	800e0ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d103      	bne.n	800e0fa <xQueueGenericSend+0x3e>
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d101      	bne.n	800e0fe <xQueueGenericSend+0x42>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e000      	b.n	800e100 <xQueueGenericSend+0x44>
 800e0fe:	2300      	movs	r3, #0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d109      	bne.n	800e118 <xQueueGenericSend+0x5c>
 800e104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	627b      	str	r3, [r7, #36]	; 0x24
 800e116:	e7fe      	b.n	800e116 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d103      	bne.n	800e126 <xQueueGenericSend+0x6a>
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e122:	2b01      	cmp	r3, #1
 800e124:	d101      	bne.n	800e12a <xQueueGenericSend+0x6e>
 800e126:	2301      	movs	r3, #1
 800e128:	e000      	b.n	800e12c <xQueueGenericSend+0x70>
 800e12a:	2300      	movs	r3, #0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d109      	bne.n	800e144 <xQueueGenericSend+0x88>
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	623b      	str	r3, [r7, #32]
 800e142:	e7fe      	b.n	800e142 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e144:	f001 fa12 	bl	800f56c <xTaskGetSchedulerState>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d102      	bne.n	800e154 <xQueueGenericSend+0x98>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <xQueueGenericSend+0x9c>
 800e154:	2301      	movs	r3, #1
 800e156:	e000      	b.n	800e15a <xQueueGenericSend+0x9e>
 800e158:	2300      	movs	r3, #0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d109      	bne.n	800e172 <xQueueGenericSend+0xb6>
 800e15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	e7fe      	b.n	800e170 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e172:	f001 ff43 	bl	800fffc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e17e:	429a      	cmp	r2, r3
 800e180:	d302      	bcc.n	800e188 <xQueueGenericSend+0xcc>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d129      	bne.n	800e1dc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	68b9      	ldr	r1, [r7, #8]
 800e18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e18e:	f000 f9ff 	bl	800e590 <prvCopyDataToQueue>
 800e192:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d010      	beq.n	800e1be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19e:	3324      	adds	r3, #36	; 0x24
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f001 f82d 	bl	800f200 <xTaskRemoveFromEventList>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d013      	beq.n	800e1d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e1ac:	4b3f      	ldr	r3, [pc, #252]	; (800e2ac <xQueueGenericSend+0x1f0>)
 800e1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1b2:	601a      	str	r2, [r3, #0]
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	e00a      	b.n	800e1d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e1c4:	4b39      	ldr	r3, [pc, #228]	; (800e2ac <xQueueGenericSend+0x1f0>)
 800e1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e1d4:	f001 ff40 	bl	8010058 <vPortExitCritical>
				return pdPASS;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e063      	b.n	800e2a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d103      	bne.n	800e1ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e1e2:	f001 ff39 	bl	8010058 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	e05c      	b.n	800e2a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d106      	bne.n	800e1fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1f0:	f107 0314 	add.w	r3, r7, #20
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 f865 	bl	800f2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e1fe:	f001 ff2b 	bl	8010058 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e202:	f000 fde1 	bl	800edc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e206:	f001 fef9 	bl	800fffc <vPortEnterCritical>
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e210:	b25b      	sxtb	r3, r3
 800e212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e216:	d103      	bne.n	800e220 <xQueueGenericSend+0x164>
 800e218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e226:	b25b      	sxtb	r3, r3
 800e228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22c:	d103      	bne.n	800e236 <xQueueGenericSend+0x17a>
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	2200      	movs	r2, #0
 800e232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e236:	f001 ff0f 	bl	8010058 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e23a:	1d3a      	adds	r2, r7, #4
 800e23c:	f107 0314 	add.w	r3, r7, #20
 800e240:	4611      	mov	r1, r2
 800e242:	4618      	mov	r0, r3
 800e244:	f001 f854 	bl	800f2f0 <xTaskCheckForTimeOut>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d124      	bne.n	800e298 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e24e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e250:	f000 fa96 	bl	800e780 <prvIsQueueFull>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d018      	beq.n	800e28c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	3310      	adds	r3, #16
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	4611      	mov	r1, r2
 800e262:	4618      	mov	r0, r3
 800e264:	f000 ff7e 	bl	800f164 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e26a:	f000 fa21 	bl	800e6b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e26e:	f000 fdb9 	bl	800ede4 <xTaskResumeAll>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	f47f af7c 	bne.w	800e172 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e27a:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <xQueueGenericSend+0x1f0>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	e772      	b.n	800e172 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e28e:	f000 fa0f 	bl	800e6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e292:	f000 fda7 	bl	800ede4 <xTaskResumeAll>
 800e296:	e76c      	b.n	800e172 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e29a:	f000 fa09 	bl	800e6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e29e:	f000 fda1 	bl	800ede4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e2a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3738      	adds	r7, #56	; 0x38
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	e000ed04 	.word	0xe000ed04

0800e2b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08e      	sub	sp, #56	; 0x38
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d109      	bne.n	800e2dc <xQueueGenericSendFromISR+0x2c>
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2da:	e7fe      	b.n	800e2da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d103      	bne.n	800e2ea <xQueueGenericSendFromISR+0x3a>
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <xQueueGenericSendFromISR+0x3e>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e000      	b.n	800e2f0 <xQueueGenericSendFromISR+0x40>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d109      	bne.n	800e308 <xQueueGenericSendFromISR+0x58>
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	623b      	str	r3, [r7, #32]
 800e306:	e7fe      	b.n	800e306 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d103      	bne.n	800e316 <xQueueGenericSendFromISR+0x66>
 800e30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e312:	2b01      	cmp	r3, #1
 800e314:	d101      	bne.n	800e31a <xQueueGenericSendFromISR+0x6a>
 800e316:	2301      	movs	r3, #1
 800e318:	e000      	b.n	800e31c <xQueueGenericSendFromISR+0x6c>
 800e31a:	2300      	movs	r3, #0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d109      	bne.n	800e334 <xQueueGenericSendFromISR+0x84>
 800e320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	61fb      	str	r3, [r7, #28]
 800e332:	e7fe      	b.n	800e332 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e334:	f001 ff3e 	bl	80101b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e338:	f3ef 8211 	mrs	r2, BASEPRI
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	61ba      	str	r2, [r7, #24]
 800e34e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e350:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e352:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d302      	bcc.n	800e366 <xQueueGenericSendFromISR+0xb6>
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d12c      	bne.n	800e3c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e36c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e376:	f000 f90b 	bl	800e590 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e37a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e382:	d112      	bne.n	800e3aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d016      	beq.n	800e3ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	3324      	adds	r3, #36	; 0x24
 800e390:	4618      	mov	r0, r3
 800e392:	f000 ff35 	bl	800f200 <xTaskRemoveFromEventList>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00e      	beq.n	800e3ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00b      	beq.n	800e3ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	601a      	str	r2, [r3, #0]
 800e3a8:	e007      	b.n	800e3ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e3aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	b25a      	sxtb	r2, r3
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e3be:	e001      	b.n	800e3c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3738      	adds	r7, #56	; 0x38
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08c      	sub	sp, #48	; 0x30
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d109      	bne.n	800e406 <xQueueReceive+0x2e>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	623b      	str	r3, [r7, #32]
 800e404:	e7fe      	b.n	800e404 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d103      	bne.n	800e414 <xQueueReceive+0x3c>
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e410:	2b00      	cmp	r3, #0
 800e412:	d101      	bne.n	800e418 <xQueueReceive+0x40>
 800e414:	2301      	movs	r3, #1
 800e416:	e000      	b.n	800e41a <xQueueReceive+0x42>
 800e418:	2300      	movs	r3, #0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d109      	bne.n	800e432 <xQueueReceive+0x5a>
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	61fb      	str	r3, [r7, #28]
 800e430:	e7fe      	b.n	800e430 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e432:	f001 f89b 	bl	800f56c <xTaskGetSchedulerState>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <xQueueReceive+0x6a>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <xQueueReceive+0x6e>
 800e442:	2301      	movs	r3, #1
 800e444:	e000      	b.n	800e448 <xQueueReceive+0x70>
 800e446:	2300      	movs	r3, #0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d109      	bne.n	800e460 <xQueueReceive+0x88>
 800e44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	61bb      	str	r3, [r7, #24]
 800e45e:	e7fe      	b.n	800e45e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e460:	f001 fdcc 	bl	800fffc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e468:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01f      	beq.n	800e4b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e470:	68b9      	ldr	r1, [r7, #8]
 800e472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e474:	f000 f8f6 	bl	800e664 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	1e5a      	subs	r2, r3, #1
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	691b      	ldr	r3, [r3, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00f      	beq.n	800e4a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	3310      	adds	r3, #16
 800e48c:	4618      	mov	r0, r3
 800e48e:	f000 feb7 	bl	800f200 <xTaskRemoveFromEventList>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d007      	beq.n	800e4a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e498:	4b3c      	ldr	r3, [pc, #240]	; (800e58c <xQueueReceive+0x1b4>)
 800e49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e49e:	601a      	str	r2, [r3, #0]
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e4a8:	f001 fdd6 	bl	8010058 <vPortExitCritical>
				return pdPASS;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e069      	b.n	800e584 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d103      	bne.n	800e4be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4b6:	f001 fdcf 	bl	8010058 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e062      	b.n	800e584 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4c4:	f107 0310 	add.w	r3, r7, #16
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f000 fefb 	bl	800f2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4d2:	f001 fdc1 	bl	8010058 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4d6:	f000 fc77 	bl	800edc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4da:	f001 fd8f 	bl	800fffc <vPortEnterCritical>
 800e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4e4:	b25b      	sxtb	r3, r3
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ea:	d103      	bne.n	800e4f4 <xQueueReceive+0x11c>
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4fa:	b25b      	sxtb	r3, r3
 800e4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e500:	d103      	bne.n	800e50a <xQueueReceive+0x132>
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	2200      	movs	r2, #0
 800e506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e50a:	f001 fda5 	bl	8010058 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e50e:	1d3a      	adds	r2, r7, #4
 800e510:	f107 0310 	add.w	r3, r7, #16
 800e514:	4611      	mov	r1, r2
 800e516:	4618      	mov	r0, r3
 800e518:	f000 feea 	bl	800f2f0 <xTaskCheckForTimeOut>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d123      	bne.n	800e56a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e524:	f000 f916 	bl	800e754 <prvIsQueueEmpty>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d017      	beq.n	800e55e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	3324      	adds	r3, #36	; 0x24
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	4611      	mov	r1, r2
 800e536:	4618      	mov	r0, r3
 800e538:	f000 fe14 	bl	800f164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e53e:	f000 f8b7 	bl	800e6b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e542:	f000 fc4f 	bl	800ede4 <xTaskResumeAll>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d189      	bne.n	800e460 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <xQueueReceive+0x1b4>)
 800e54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e552:	601a      	str	r2, [r3, #0]
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	f3bf 8f6f 	isb	sy
 800e55c:	e780      	b.n	800e460 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e55e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e560:	f000 f8a6 	bl	800e6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e564:	f000 fc3e 	bl	800ede4 <xTaskResumeAll>
 800e568:	e77a      	b.n	800e460 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e56c:	f000 f8a0 	bl	800e6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e570:	f000 fc38 	bl	800ede4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e576:	f000 f8ed 	bl	800e754 <prvIsQueueEmpty>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f43f af6f 	beq.w	800e460 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e582:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e584:	4618      	mov	r0, r3
 800e586:	3730      	adds	r7, #48	; 0x30
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	e000ed04 	.word	0xe000ed04

0800e590 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e59c:	2300      	movs	r3, #0
 800e59e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d10d      	bne.n	800e5ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d14d      	bne.n	800e652 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 fff4 	bl	800f5a8 <xTaskPriorityDisinherit>
 800e5c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	609a      	str	r2, [r3, #8]
 800e5c8:	e043      	b.n	800e652 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d119      	bne.n	800e604 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	6858      	ldr	r0, [r3, #4]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d8:	461a      	mov	r2, r3
 800e5da:	68b9      	ldr	r1, [r7, #8]
 800e5dc:	f003 fc20 	bl	8011e20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e8:	441a      	add	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d32b      	bcc.n	800e652 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	605a      	str	r2, [r3, #4]
 800e602:	e026      	b.n	800e652 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	68d8      	ldr	r0, [r3, #12]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60c:	461a      	mov	r2, r3
 800e60e:	68b9      	ldr	r1, [r7, #8]
 800e610:	f003 fc06 	bl	8011e20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68da      	ldr	r2, [r3, #12]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61c:	425b      	negs	r3, r3
 800e61e:	441a      	add	r2, r3
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	68da      	ldr	r2, [r3, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d207      	bcs.n	800e640 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	689a      	ldr	r2, [r3, #8]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e638:	425b      	negs	r3, r3
 800e63a:	441a      	add	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d105      	bne.n	800e652 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d002      	beq.n	800e652 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	3b01      	subs	r3, #1
 800e650:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	1c5a      	adds	r2, r3, #1
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e65a:	697b      	ldr	r3, [r7, #20]
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3718      	adds	r7, #24
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e672:	2b00      	cmp	r3, #0
 800e674:	d018      	beq.n	800e6a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68da      	ldr	r2, [r3, #12]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e67e:	441a      	add	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	68da      	ldr	r2, [r3, #12]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d303      	bcc.n	800e698 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68d9      	ldr	r1, [r3, #12]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	6838      	ldr	r0, [r7, #0]
 800e6a4:	f003 fbbc 	bl	8011e20 <memcpy>
	}
}
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e6b8:	f001 fca0 	bl	800fffc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6c4:	e011      	b.n	800e6ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d012      	beq.n	800e6f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	3324      	adds	r3, #36	; 0x24
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 fd94 	bl	800f200 <xTaskRemoveFromEventList>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e6de:	f000 fe67 	bl	800f3b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	dce9      	bgt.n	800e6c6 <prvUnlockQueue+0x16>
 800e6f2:	e000      	b.n	800e6f6 <prvUnlockQueue+0x46>
					break;
 800e6f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	22ff      	movs	r2, #255	; 0xff
 800e6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e6fe:	f001 fcab 	bl	8010058 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e702:	f001 fc7b 	bl	800fffc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e70c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e70e:	e011      	b.n	800e734 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d012      	beq.n	800e73e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	3310      	adds	r3, #16
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 fd6f 	bl	800f200 <xTaskRemoveFromEventList>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d001      	beq.n	800e72c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e728:	f000 fe42 	bl	800f3b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e72c:	7bbb      	ldrb	r3, [r7, #14]
 800e72e:	3b01      	subs	r3, #1
 800e730:	b2db      	uxtb	r3, r3
 800e732:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	dce9      	bgt.n	800e710 <prvUnlockQueue+0x60>
 800e73c:	e000      	b.n	800e740 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e73e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	22ff      	movs	r2, #255	; 0xff
 800e744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e748:	f001 fc86 	bl	8010058 <vPortExitCritical>
}
 800e74c:	bf00      	nop
 800e74e:	3710      	adds	r7, #16
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e75c:	f001 fc4e 	bl	800fffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e764:	2b00      	cmp	r3, #0
 800e766:	d102      	bne.n	800e76e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e768:	2301      	movs	r3, #1
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	e001      	b.n	800e772 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e76e:	2300      	movs	r3, #0
 800e770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e772:	f001 fc71 	bl	8010058 <vPortExitCritical>

	return xReturn;
 800e776:	68fb      	ldr	r3, [r7, #12]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e788:	f001 fc38 	bl	800fffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e794:	429a      	cmp	r2, r3
 800e796:	d102      	bne.n	800e79e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e798:	2301      	movs	r3, #1
 800e79a:	60fb      	str	r3, [r7, #12]
 800e79c:	e001      	b.n	800e7a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7a2:	f001 fc59 	bl	8010058 <vPortExitCritical>

	return xReturn;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3710      	adds	r7, #16
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	60fb      	str	r3, [r7, #12]
 800e7be:	e014      	b.n	800e7ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e7c0:	4a0e      	ldr	r2, [pc, #56]	; (800e7fc <vQueueAddToRegistry+0x4c>)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d10b      	bne.n	800e7e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e7cc:	490b      	ldr	r1, [pc, #44]	; (800e7fc <vQueueAddToRegistry+0x4c>)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	683a      	ldr	r2, [r7, #0]
 800e7d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e7d6:	4a09      	ldr	r2, [pc, #36]	; (800e7fc <vQueueAddToRegistry+0x4c>)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	4413      	add	r3, r2
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e7e2:	e005      	b.n	800e7f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	60fb      	str	r3, [r7, #12]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2b07      	cmp	r3, #7
 800e7ee:	d9e7      	bls.n	800e7c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e7f0:	bf00      	nop
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	20001c7c 	.word	0x20001c7c

0800e800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e810:	f001 fbf4 	bl	800fffc <vPortEnterCritical>
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e81a:	b25b      	sxtb	r3, r3
 800e81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e820:	d103      	bne.n	800e82a <vQueueWaitForMessageRestricted+0x2a>
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e830:	b25b      	sxtb	r3, r3
 800e832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e836:	d103      	bne.n	800e840 <vQueueWaitForMessageRestricted+0x40>
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e840:	f001 fc0a 	bl	8010058 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d106      	bne.n	800e85a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	3324      	adds	r3, #36	; 0x24
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	68b9      	ldr	r1, [r7, #8]
 800e854:	4618      	mov	r0, r3
 800e856:	f000 fca9 	bl	800f1ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e85a:	6978      	ldr	r0, [r7, #20]
 800e85c:	f7ff ff28 	bl	800e6b0 <prvUnlockQueue>
	}
 800e860:	bf00      	nop
 800e862:	3718      	adds	r7, #24
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08e      	sub	sp, #56	; 0x38
 800e86c:	af04      	add	r7, sp, #16
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d109      	bne.n	800e890 <xTaskCreateStatic+0x28>
 800e87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e880:	f383 8811 	msr	BASEPRI, r3
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	623b      	str	r3, [r7, #32]
 800e88e:	e7fe      	b.n	800e88e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	2b00      	cmp	r3, #0
 800e894:	d109      	bne.n	800e8aa <xTaskCreateStatic+0x42>
 800e896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	61fb      	str	r3, [r7, #28]
 800e8a8:	e7fe      	b.n	800e8a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e8aa:	235c      	movs	r3, #92	; 0x5c
 800e8ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	2b5c      	cmp	r3, #92	; 0x5c
 800e8b2:	d009      	beq.n	800e8c8 <xTaskCreateStatic+0x60>
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	61bb      	str	r3, [r7, #24]
 800e8c6:	e7fe      	b.n	800e8c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e8c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d01e      	beq.n	800e90e <xTaskCreateStatic+0xa6>
 800e8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d01b      	beq.n	800e90e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	9303      	str	r3, [sp, #12]
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	9302      	str	r3, [sp, #8]
 800e8f0:	f107 0314 	add.w	r3, r7, #20
 800e8f4:	9301      	str	r3, [sp, #4]
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f8:	9300      	str	r3, [sp, #0]
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	68b9      	ldr	r1, [r7, #8]
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f000 f850 	bl	800e9a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e908:	f000 f8dc 	bl	800eac4 <prvAddNewTaskToReadyList>
 800e90c:	e001      	b.n	800e912 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e912:	697b      	ldr	r3, [r7, #20]
	}
 800e914:	4618      	mov	r0, r3
 800e916:	3728      	adds	r7, #40	; 0x28
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08c      	sub	sp, #48	; 0x30
 800e920:	af04      	add	r7, sp, #16
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	603b      	str	r3, [r7, #0]
 800e928:	4613      	mov	r3, r2
 800e92a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e92c:	88fb      	ldrh	r3, [r7, #6]
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	4618      	mov	r0, r3
 800e932:	f001 fc7d 	bl	8010230 <pvPortMalloc>
 800e936:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00e      	beq.n	800e95c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e93e:	205c      	movs	r0, #92	; 0x5c
 800e940:	f001 fc76 	bl	8010230 <pvPortMalloc>
 800e944:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d003      	beq.n	800e954 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	631a      	str	r2, [r3, #48]	; 0x30
 800e952:	e005      	b.n	800e960 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e954:	6978      	ldr	r0, [r7, #20]
 800e956:	f001 fc7d 	bl	8010254 <vPortFree>
 800e95a:	e001      	b.n	800e960 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e95c:	2300      	movs	r3, #0
 800e95e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d017      	beq.n	800e996 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	2200      	movs	r2, #0
 800e96a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e96e:	88fa      	ldrh	r2, [r7, #6]
 800e970:	2300      	movs	r3, #0
 800e972:	9303      	str	r3, [sp, #12]
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	9302      	str	r3, [sp, #8]
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	9301      	str	r3, [sp, #4]
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	68b9      	ldr	r1, [r7, #8]
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f000 f80e 	bl	800e9a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e98a:	69f8      	ldr	r0, [r7, #28]
 800e98c:	f000 f89a 	bl	800eac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e990:	2301      	movs	r3, #1
 800e992:	61bb      	str	r3, [r7, #24]
 800e994:	e002      	b.n	800e99c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e996:	f04f 33ff 	mov.w	r3, #4294967295
 800e99a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e99c:	69bb      	ldr	r3, [r7, #24]
	}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3720      	adds	r7, #32
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b088      	sub	sp, #32
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	60f8      	str	r0, [r7, #12]
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	607a      	str	r2, [r7, #4]
 800e9b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	461a      	mov	r2, r3
 800e9be:	21a5      	movs	r1, #165	; 0xa5
 800e9c0:	f003 fa39 	bl	8011e36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	4413      	add	r3, r2
 800e9d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	f023 0307 	bic.w	r3, r3, #7
 800e9dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	f003 0307 	and.w	r3, r3, #7
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d009      	beq.n	800e9fc <prvInitialiseNewTask+0x56>
 800e9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ec:	f383 8811 	msr	BASEPRI, r3
 800e9f0:	f3bf 8f6f 	isb	sy
 800e9f4:	f3bf 8f4f 	dsb	sy
 800e9f8:	617b      	str	r3, [r7, #20]
 800e9fa:	e7fe      	b.n	800e9fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d01f      	beq.n	800ea42 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea02:	2300      	movs	r3, #0
 800ea04:	61fb      	str	r3, [r7, #28]
 800ea06:	e012      	b.n	800ea2e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	7819      	ldrb	r1, [r3, #0]
 800ea10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea12:	69fb      	ldr	r3, [r7, #28]
 800ea14:	4413      	add	r3, r2
 800ea16:	3334      	adds	r3, #52	; 0x34
 800ea18:	460a      	mov	r2, r1
 800ea1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	4413      	add	r3, r2
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d006      	beq.n	800ea36 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	61fb      	str	r3, [r7, #28]
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	2b0f      	cmp	r3, #15
 800ea32:	d9e9      	bls.n	800ea08 <prvInitialiseNewTask+0x62>
 800ea34:	e000      	b.n	800ea38 <prvInitialiseNewTask+0x92>
			{
				break;
 800ea36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ea40:	e003      	b.n	800ea4a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	2b37      	cmp	r3, #55	; 0x37
 800ea4e:	d901      	bls.n	800ea54 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea50:	2337      	movs	r3, #55	; 0x37
 800ea52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ea60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea62:	2200      	movs	r2, #0
 800ea64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea68:	3304      	adds	r3, #4
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff f994 	bl	800dd98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	3318      	adds	r3, #24
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7ff f98f 	bl	800dd98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea92:	2200      	movs	r2, #0
 800ea94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea9e:	683a      	ldr	r2, [r7, #0]
 800eaa0:	68f9      	ldr	r1, [r7, #12]
 800eaa2:	69b8      	ldr	r0, [r7, #24]
 800eaa4:	f001 f986 	bl	800fdb4 <pxPortInitialiseStack>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaba:	bf00      	nop
 800eabc:	3720      	adds	r7, #32
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eacc:	f001 fa96 	bl	800fffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ead0:	4b2d      	ldr	r3, [pc, #180]	; (800eb88 <prvAddNewTaskToReadyList+0xc4>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3301      	adds	r3, #1
 800ead6:	4a2c      	ldr	r2, [pc, #176]	; (800eb88 <prvAddNewTaskToReadyList+0xc4>)
 800ead8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eada:	4b2c      	ldr	r3, [pc, #176]	; (800eb8c <prvAddNewTaskToReadyList+0xc8>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d109      	bne.n	800eaf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eae2:	4a2a      	ldr	r2, [pc, #168]	; (800eb8c <prvAddNewTaskToReadyList+0xc8>)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eae8:	4b27      	ldr	r3, [pc, #156]	; (800eb88 <prvAddNewTaskToReadyList+0xc4>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d110      	bne.n	800eb12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eaf0:	f000 fc82 	bl	800f3f8 <prvInitialiseTaskLists>
 800eaf4:	e00d      	b.n	800eb12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eaf6:	4b26      	ldr	r3, [pc, #152]	; (800eb90 <prvAddNewTaskToReadyList+0xcc>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d109      	bne.n	800eb12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eafe:	4b23      	ldr	r3, [pc, #140]	; (800eb8c <prvAddNewTaskToReadyList+0xc8>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d802      	bhi.n	800eb12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eb0c:	4a1f      	ldr	r2, [pc, #124]	; (800eb8c <prvAddNewTaskToReadyList+0xc8>)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eb12:	4b20      	ldr	r3, [pc, #128]	; (800eb94 <prvAddNewTaskToReadyList+0xd0>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	3301      	adds	r3, #1
 800eb18:	4a1e      	ldr	r2, [pc, #120]	; (800eb94 <prvAddNewTaskToReadyList+0xd0>)
 800eb1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eb1c:	4b1d      	ldr	r3, [pc, #116]	; (800eb94 <prvAddNewTaskToReadyList+0xd0>)
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb28:	4b1b      	ldr	r3, [pc, #108]	; (800eb98 <prvAddNewTaskToReadyList+0xd4>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d903      	bls.n	800eb38 <prvAddNewTaskToReadyList+0x74>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb34:	4a18      	ldr	r2, [pc, #96]	; (800eb98 <prvAddNewTaskToReadyList+0xd4>)
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	4a15      	ldr	r2, [pc, #84]	; (800eb9c <prvAddNewTaskToReadyList+0xd8>)
 800eb46:	441a      	add	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3304      	adds	r3, #4
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	4610      	mov	r0, r2
 800eb50:	f7ff f92f 	bl	800ddb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eb54:	f001 fa80 	bl	8010058 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eb58:	4b0d      	ldr	r3, [pc, #52]	; (800eb90 <prvAddNewTaskToReadyList+0xcc>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00e      	beq.n	800eb7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eb60:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <prvAddNewTaskToReadyList+0xc8>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d207      	bcs.n	800eb7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eb6e:	4b0c      	ldr	r3, [pc, #48]	; (800eba0 <prvAddNewTaskToReadyList+0xdc>)
 800eb70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb74:	601a      	str	r2, [r3, #0]
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb7e:	bf00      	nop
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	200010a8 	.word	0x200010a8
 800eb8c:	20000bd4 	.word	0x20000bd4
 800eb90:	200010b4 	.word	0x200010b4
 800eb94:	200010c4 	.word	0x200010c4
 800eb98:	200010b0 	.word	0x200010b0
 800eb9c:	20000bd8 	.word	0x20000bd8
 800eba0:	e000ed04 	.word	0xe000ed04

0800eba4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b08a      	sub	sp, #40	; 0x28
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d109      	bne.n	800ebcc <vTaskDelayUntil+0x28>
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	617b      	str	r3, [r7, #20]
 800ebca:	e7fe      	b.n	800ebca <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d109      	bne.n	800ebe6 <vTaskDelayUntil+0x42>
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	f383 8811 	msr	BASEPRI, r3
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	613b      	str	r3, [r7, #16]
 800ebe4:	e7fe      	b.n	800ebe4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800ebe6:	4b29      	ldr	r3, [pc, #164]	; (800ec8c <vTaskDelayUntil+0xe8>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d009      	beq.n	800ec02 <vTaskDelayUntil+0x5e>
 800ebee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	e7fe      	b.n	800ec00 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800ec02:	f000 f8e1 	bl	800edc8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ec06:	4b22      	ldr	r3, [pc, #136]	; (800ec90 <vTaskDelayUntil+0xec>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	683a      	ldr	r2, [r7, #0]
 800ec12:	4413      	add	r3, r2
 800ec14:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	6a3a      	ldr	r2, [r7, #32]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d20b      	bcs.n	800ec38 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	69fa      	ldr	r2, [r7, #28]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d211      	bcs.n	800ec4e <vTaskDelayUntil+0xaa>
 800ec2a:	69fa      	ldr	r2, [r7, #28]
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d90d      	bls.n	800ec4e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800ec32:	2301      	movs	r3, #1
 800ec34:	627b      	str	r3, [r7, #36]	; 0x24
 800ec36:	e00a      	b.n	800ec4e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	69fa      	ldr	r2, [r7, #28]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d303      	bcc.n	800ec4a <vTaskDelayUntil+0xa6>
 800ec42:	69fa      	ldr	r2, [r7, #28]
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d901      	bls.n	800ec4e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	69fa      	ldr	r2, [r7, #28]
 800ec52:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d006      	beq.n	800ec68 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ec5a:	69fa      	ldr	r2, [r7, #28]
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	2100      	movs	r1, #0
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 fd0c 	bl	800f680 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ec68:	f000 f8bc 	bl	800ede4 <xTaskResumeAll>
 800ec6c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d107      	bne.n	800ec84 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800ec74:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <vTaskDelayUntil+0xf0>)
 800ec76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec7a:	601a      	str	r2, [r3, #0]
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec84:	bf00      	nop
 800ec86:	3728      	adds	r7, #40	; 0x28
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	200010d0 	.word	0x200010d0
 800ec90:	200010ac 	.word	0x200010ac
 800ec94:	e000ed04 	.word	0xe000ed04

0800ec98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eca0:	2300      	movs	r3, #0
 800eca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d016      	beq.n	800ecd8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ecaa:	4b13      	ldr	r3, [pc, #76]	; (800ecf8 <vTaskDelay+0x60>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d009      	beq.n	800ecc6 <vTaskDelay+0x2e>
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	60bb      	str	r3, [r7, #8]
 800ecc4:	e7fe      	b.n	800ecc4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ecc6:	f000 f87f 	bl	800edc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ecca:	2100      	movs	r1, #0
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fcd7 	bl	800f680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ecd2:	f000 f887 	bl	800ede4 <xTaskResumeAll>
 800ecd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d107      	bne.n	800ecee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ecde:	4b07      	ldr	r3, [pc, #28]	; (800ecfc <vTaskDelay+0x64>)
 800ece0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecee:	bf00      	nop
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	200010d0 	.word	0x200010d0
 800ecfc:	e000ed04 	.word	0xe000ed04

0800ed00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b08a      	sub	sp, #40	; 0x28
 800ed04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed0e:	463a      	mov	r2, r7
 800ed10:	1d39      	adds	r1, r7, #4
 800ed12:	f107 0308 	add.w	r3, r7, #8
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fe ffea 	bl	800dcf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	9202      	str	r2, [sp, #8]
 800ed24:	9301      	str	r3, [sp, #4]
 800ed26:	2300      	movs	r3, #0
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	460a      	mov	r2, r1
 800ed2e:	4920      	ldr	r1, [pc, #128]	; (800edb0 <vTaskStartScheduler+0xb0>)
 800ed30:	4820      	ldr	r0, [pc, #128]	; (800edb4 <vTaskStartScheduler+0xb4>)
 800ed32:	f7ff fd99 	bl	800e868 <xTaskCreateStatic>
 800ed36:	4602      	mov	r2, r0
 800ed38:	4b1f      	ldr	r3, [pc, #124]	; (800edb8 <vTaskStartScheduler+0xb8>)
 800ed3a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed3c:	4b1e      	ldr	r3, [pc, #120]	; (800edb8 <vTaskStartScheduler+0xb8>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed44:	2301      	movs	r3, #1
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	e001      	b.n	800ed4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d102      	bne.n	800ed5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed54:	f000 fce8 	bl	800f728 <xTimerCreateTimerTask>
 800ed58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d115      	bne.n	800ed8c <vTaskStartScheduler+0x8c>
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed72:	4b12      	ldr	r3, [pc, #72]	; (800edbc <vTaskStartScheduler+0xbc>)
 800ed74:	f04f 32ff 	mov.w	r2, #4294967295
 800ed78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed7a:	4b11      	ldr	r3, [pc, #68]	; (800edc0 <vTaskStartScheduler+0xc0>)
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed80:	4b10      	ldr	r3, [pc, #64]	; (800edc4 <vTaskStartScheduler+0xc4>)
 800ed82:	2200      	movs	r2, #0
 800ed84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed86:	f001 f89b 	bl	800fec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed8a:	e00d      	b.n	800eda8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed92:	d109      	bne.n	800eda8 <vTaskStartScheduler+0xa8>
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	60fb      	str	r3, [r7, #12]
 800eda6:	e7fe      	b.n	800eda6 <vTaskStartScheduler+0xa6>
}
 800eda8:	bf00      	nop
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	080164b0 	.word	0x080164b0
 800edb4:	0800f3c9 	.word	0x0800f3c9
 800edb8:	200010cc 	.word	0x200010cc
 800edbc:	200010c8 	.word	0x200010c8
 800edc0:	200010b4 	.word	0x200010b4
 800edc4:	200010ac 	.word	0x200010ac

0800edc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800edc8:	b480      	push	{r7}
 800edca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800edcc:	4b04      	ldr	r3, [pc, #16]	; (800ede0 <vTaskSuspendAll+0x18>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3301      	adds	r3, #1
 800edd2:	4a03      	ldr	r2, [pc, #12]	; (800ede0 <vTaskSuspendAll+0x18>)
 800edd4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800edd6:	bf00      	nop
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	200010d0 	.word	0x200010d0

0800ede4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edf2:	4b41      	ldr	r3, [pc, #260]	; (800eef8 <xTaskResumeAll+0x114>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d109      	bne.n	800ee0e <xTaskResumeAll+0x2a>
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	603b      	str	r3, [r7, #0]
 800ee0c:	e7fe      	b.n	800ee0c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee0e:	f001 f8f5 	bl	800fffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee12:	4b39      	ldr	r3, [pc, #228]	; (800eef8 <xTaskResumeAll+0x114>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	4a37      	ldr	r2, [pc, #220]	; (800eef8 <xTaskResumeAll+0x114>)
 800ee1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee1c:	4b36      	ldr	r3, [pc, #216]	; (800eef8 <xTaskResumeAll+0x114>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d162      	bne.n	800eeea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee24:	4b35      	ldr	r3, [pc, #212]	; (800eefc <xTaskResumeAll+0x118>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d05e      	beq.n	800eeea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee2c:	e02f      	b.n	800ee8e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee2e:	4b34      	ldr	r3, [pc, #208]	; (800ef00 <xTaskResumeAll+0x11c>)
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	3318      	adds	r3, #24
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7ff f816 	bl	800de6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	3304      	adds	r3, #4
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff f811 	bl	800de6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee4e:	4b2d      	ldr	r3, [pc, #180]	; (800ef04 <xTaskResumeAll+0x120>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d903      	bls.n	800ee5e <xTaskResumeAll+0x7a>
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	4a2a      	ldr	r2, [pc, #168]	; (800ef04 <xTaskResumeAll+0x120>)
 800ee5c:	6013      	str	r3, [r2, #0]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee62:	4613      	mov	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	4413      	add	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4a27      	ldr	r2, [pc, #156]	; (800ef08 <xTaskResumeAll+0x124>)
 800ee6c:	441a      	add	r2, r3
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	3304      	adds	r3, #4
 800ee72:	4619      	mov	r1, r3
 800ee74:	4610      	mov	r0, r2
 800ee76:	f7fe ff9c 	bl	800ddb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7e:	4b23      	ldr	r3, [pc, #140]	; (800ef0c <xTaskResumeAll+0x128>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d302      	bcc.n	800ee8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ee88:	4b21      	ldr	r3, [pc, #132]	; (800ef10 <xTaskResumeAll+0x12c>)
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee8e:	4b1c      	ldr	r3, [pc, #112]	; (800ef00 <xTaskResumeAll+0x11c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1cb      	bne.n	800ee2e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d001      	beq.n	800eea0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee9c:	f000 fb46 	bl	800f52c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800eea0:	4b1c      	ldr	r3, [pc, #112]	; (800ef14 <xTaskResumeAll+0x130>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d010      	beq.n	800eece <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eeac:	f000 f846 	bl	800ef3c <xTaskIncrementTick>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800eeb6:	4b16      	ldr	r3, [pc, #88]	; (800ef10 <xTaskResumeAll+0x12c>)
 800eeb8:	2201      	movs	r2, #1
 800eeba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1f1      	bne.n	800eeac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800eec8:	4b12      	ldr	r3, [pc, #72]	; (800ef14 <xTaskResumeAll+0x130>)
 800eeca:	2200      	movs	r2, #0
 800eecc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eece:	4b10      	ldr	r3, [pc, #64]	; (800ef10 <xTaskResumeAll+0x12c>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d009      	beq.n	800eeea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eed6:	2301      	movs	r3, #1
 800eed8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eeda:	4b0f      	ldr	r3, [pc, #60]	; (800ef18 <xTaskResumeAll+0x134>)
 800eedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	f3bf 8f4f 	dsb	sy
 800eee6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eeea:	f001 f8b5 	bl	8010058 <vPortExitCritical>

	return xAlreadyYielded;
 800eeee:	68bb      	ldr	r3, [r7, #8]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3710      	adds	r7, #16
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	200010d0 	.word	0x200010d0
 800eefc:	200010a8 	.word	0x200010a8
 800ef00:	20001068 	.word	0x20001068
 800ef04:	200010b0 	.word	0x200010b0
 800ef08:	20000bd8 	.word	0x20000bd8
 800ef0c:	20000bd4 	.word	0x20000bd4
 800ef10:	200010bc 	.word	0x200010bc
 800ef14:	200010b8 	.word	0x200010b8
 800ef18:	e000ed04 	.word	0xe000ed04

0800ef1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef22:	4b05      	ldr	r3, [pc, #20]	; (800ef38 <xTaskGetTickCount+0x1c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef28:	687b      	ldr	r3, [r7, #4]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	200010ac 	.word	0x200010ac

0800ef3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef42:	2300      	movs	r3, #0
 800ef44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef46:	4b4e      	ldr	r3, [pc, #312]	; (800f080 <xTaskIncrementTick+0x144>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f040 8088 	bne.w	800f060 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef50:	4b4c      	ldr	r3, [pc, #304]	; (800f084 <xTaskIncrementTick+0x148>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3301      	adds	r3, #1
 800ef56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef58:	4a4a      	ldr	r2, [pc, #296]	; (800f084 <xTaskIncrementTick+0x148>)
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d11f      	bne.n	800efa4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef64:	4b48      	ldr	r3, [pc, #288]	; (800f088 <xTaskIncrementTick+0x14c>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d009      	beq.n	800ef82 <xTaskIncrementTick+0x46>
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	e7fe      	b.n	800ef80 <xTaskIncrementTick+0x44>
 800ef82:	4b41      	ldr	r3, [pc, #260]	; (800f088 <xTaskIncrementTick+0x14c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	60fb      	str	r3, [r7, #12]
 800ef88:	4b40      	ldr	r3, [pc, #256]	; (800f08c <xTaskIncrementTick+0x150>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a3e      	ldr	r2, [pc, #248]	; (800f088 <xTaskIncrementTick+0x14c>)
 800ef8e:	6013      	str	r3, [r2, #0]
 800ef90:	4a3e      	ldr	r2, [pc, #248]	; (800f08c <xTaskIncrementTick+0x150>)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6013      	str	r3, [r2, #0]
 800ef96:	4b3e      	ldr	r3, [pc, #248]	; (800f090 <xTaskIncrementTick+0x154>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	4a3c      	ldr	r2, [pc, #240]	; (800f090 <xTaskIncrementTick+0x154>)
 800ef9e:	6013      	str	r3, [r2, #0]
 800efa0:	f000 fac4 	bl	800f52c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800efa4:	4b3b      	ldr	r3, [pc, #236]	; (800f094 <xTaskIncrementTick+0x158>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	693a      	ldr	r2, [r7, #16]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d349      	bcc.n	800f042 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efae:	4b36      	ldr	r3, [pc, #216]	; (800f088 <xTaskIncrementTick+0x14c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d104      	bne.n	800efc2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb8:	4b36      	ldr	r3, [pc, #216]	; (800f094 <xTaskIncrementTick+0x158>)
 800efba:	f04f 32ff 	mov.w	r2, #4294967295
 800efbe:	601a      	str	r2, [r3, #0]
					break;
 800efc0:	e03f      	b.n	800f042 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efc2:	4b31      	ldr	r3, [pc, #196]	; (800f088 <xTaskIncrementTick+0x14c>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800efd2:	693a      	ldr	r2, [r7, #16]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d203      	bcs.n	800efe2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800efda:	4a2e      	ldr	r2, [pc, #184]	; (800f094 <xTaskIncrementTick+0x158>)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800efe0:	e02f      	b.n	800f042 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	3304      	adds	r3, #4
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fe ff40 	bl	800de6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	3318      	adds	r3, #24
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fe ff37 	bl	800de6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f002:	4b25      	ldr	r3, [pc, #148]	; (800f098 <xTaskIncrementTick+0x15c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	429a      	cmp	r2, r3
 800f008:	d903      	bls.n	800f012 <xTaskIncrementTick+0xd6>
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f00e:	4a22      	ldr	r2, [pc, #136]	; (800f098 <xTaskIncrementTick+0x15c>)
 800f010:	6013      	str	r3, [r2, #0]
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f016:	4613      	mov	r3, r2
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4413      	add	r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4a1f      	ldr	r2, [pc, #124]	; (800f09c <xTaskIncrementTick+0x160>)
 800f020:	441a      	add	r2, r3
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	3304      	adds	r3, #4
 800f026:	4619      	mov	r1, r3
 800f028:	4610      	mov	r0, r2
 800f02a:	f7fe fec2 	bl	800ddb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f032:	4b1b      	ldr	r3, [pc, #108]	; (800f0a0 <xTaskIncrementTick+0x164>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f038:	429a      	cmp	r2, r3
 800f03a:	d3b8      	bcc.n	800efae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f03c:	2301      	movs	r3, #1
 800f03e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f040:	e7b5      	b.n	800efae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f042:	4b17      	ldr	r3, [pc, #92]	; (800f0a0 <xTaskIncrementTick+0x164>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f048:	4914      	ldr	r1, [pc, #80]	; (800f09c <xTaskIncrementTick+0x160>)
 800f04a:	4613      	mov	r3, r2
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	4413      	add	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	440b      	add	r3, r1
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d907      	bls.n	800f06a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800f05a:	2301      	movs	r3, #1
 800f05c:	617b      	str	r3, [r7, #20]
 800f05e:	e004      	b.n	800f06a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f060:	4b10      	ldr	r3, [pc, #64]	; (800f0a4 <xTaskIncrementTick+0x168>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3301      	adds	r3, #1
 800f066:	4a0f      	ldr	r2, [pc, #60]	; (800f0a4 <xTaskIncrementTick+0x168>)
 800f068:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f06a:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <xTaskIncrementTick+0x16c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800f072:	2301      	movs	r3, #1
 800f074:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f076:	697b      	ldr	r3, [r7, #20]
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3718      	adds	r7, #24
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	200010d0 	.word	0x200010d0
 800f084:	200010ac 	.word	0x200010ac
 800f088:	20001060 	.word	0x20001060
 800f08c:	20001064 	.word	0x20001064
 800f090:	200010c0 	.word	0x200010c0
 800f094:	200010c8 	.word	0x200010c8
 800f098:	200010b0 	.word	0x200010b0
 800f09c:	20000bd8 	.word	0x20000bd8
 800f0a0:	20000bd4 	.word	0x20000bd4
 800f0a4:	200010b8 	.word	0x200010b8
 800f0a8:	200010bc 	.word	0x200010bc

0800f0ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f0b2:	4b27      	ldr	r3, [pc, #156]	; (800f150 <vTaskSwitchContext+0xa4>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d003      	beq.n	800f0c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f0ba:	4b26      	ldr	r3, [pc, #152]	; (800f154 <vTaskSwitchContext+0xa8>)
 800f0bc:	2201      	movs	r2, #1
 800f0be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f0c0:	e040      	b.n	800f144 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f0c2:	4b24      	ldr	r3, [pc, #144]	; (800f154 <vTaskSwitchContext+0xa8>)
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0c8:	4b23      	ldr	r3, [pc, #140]	; (800f158 <vTaskSwitchContext+0xac>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	60fb      	str	r3, [r7, #12]
 800f0ce:	e00f      	b.n	800f0f0 <vTaskSwitchContext+0x44>
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d109      	bne.n	800f0ea <vTaskSwitchContext+0x3e>
 800f0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	607b      	str	r3, [r7, #4]
 800f0e8:	e7fe      	b.n	800f0e8 <vTaskSwitchContext+0x3c>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	491a      	ldr	r1, [pc, #104]	; (800f15c <vTaskSwitchContext+0xb0>)
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4413      	add	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	440b      	add	r3, r1
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d0e5      	beq.n	800f0d0 <vTaskSwitchContext+0x24>
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	4613      	mov	r3, r2
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4a13      	ldr	r2, [pc, #76]	; (800f15c <vTaskSwitchContext+0xb0>)
 800f110:	4413      	add	r3, r2
 800f112:	60bb      	str	r3, [r7, #8]
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	685a      	ldr	r2, [r3, #4]
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	3308      	adds	r3, #8
 800f126:	429a      	cmp	r2, r3
 800f128:	d104      	bne.n	800f134 <vTaskSwitchContext+0x88>
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	685a      	ldr	r2, [r3, #4]
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	605a      	str	r2, [r3, #4]
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	4a09      	ldr	r2, [pc, #36]	; (800f160 <vTaskSwitchContext+0xb4>)
 800f13c:	6013      	str	r3, [r2, #0]
 800f13e:	4a06      	ldr	r2, [pc, #24]	; (800f158 <vTaskSwitchContext+0xac>)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6013      	str	r3, [r2, #0]
}
 800f144:	bf00      	nop
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	200010d0 	.word	0x200010d0
 800f154:	200010bc 	.word	0x200010bc
 800f158:	200010b0 	.word	0x200010b0
 800f15c:	20000bd8 	.word	0x20000bd8
 800f160:	20000bd4 	.word	0x20000bd4

0800f164 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d109      	bne.n	800f188 <vTaskPlaceOnEventList+0x24>
 800f174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f178:	f383 8811 	msr	BASEPRI, r3
 800f17c:	f3bf 8f6f 	isb	sy
 800f180:	f3bf 8f4f 	dsb	sy
 800f184:	60fb      	str	r3, [r7, #12]
 800f186:	e7fe      	b.n	800f186 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f188:	4b07      	ldr	r3, [pc, #28]	; (800f1a8 <vTaskPlaceOnEventList+0x44>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	3318      	adds	r3, #24
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7fe fe32 	bl	800ddfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f196:	2101      	movs	r1, #1
 800f198:	6838      	ldr	r0, [r7, #0]
 800f19a:	f000 fa71 	bl	800f680 <prvAddCurrentTaskToDelayedList>
}
 800f19e:	bf00      	nop
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20000bd4 	.word	0x20000bd4

0800f1ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d109      	bne.n	800f1d2 <vTaskPlaceOnEventListRestricted+0x26>
 800f1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	617b      	str	r3, [r7, #20]
 800f1d0:	e7fe      	b.n	800f1d0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1d2:	4b0a      	ldr	r3, [pc, #40]	; (800f1fc <vTaskPlaceOnEventListRestricted+0x50>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	3318      	adds	r3, #24
 800f1d8:	4619      	mov	r1, r3
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7fe fde9 	bl	800ddb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800f1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	68b8      	ldr	r0, [r7, #8]
 800f1f0:	f000 fa46 	bl	800f680 <prvAddCurrentTaskToDelayedList>
	}
 800f1f4:	bf00      	nop
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20000bd4 	.word	0x20000bd4

0800f200 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d109      	bne.n	800f22a <xTaskRemoveFromEventList+0x2a>
 800f216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	e7fe      	b.n	800f228 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	3318      	adds	r3, #24
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fe fe1c 	bl	800de6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f234:	4b1d      	ldr	r3, [pc, #116]	; (800f2ac <xTaskRemoveFromEventList+0xac>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d11d      	bne.n	800f278 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	3304      	adds	r3, #4
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe fe13 	bl	800de6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24a:	4b19      	ldr	r3, [pc, #100]	; (800f2b0 <xTaskRemoveFromEventList+0xb0>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d903      	bls.n	800f25a <xTaskRemoveFromEventList+0x5a>
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f256:	4a16      	ldr	r2, [pc, #88]	; (800f2b0 <xTaskRemoveFromEventList+0xb0>)
 800f258:	6013      	str	r3, [r2, #0]
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f25e:	4613      	mov	r3, r2
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	4413      	add	r3, r2
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	4a13      	ldr	r2, [pc, #76]	; (800f2b4 <xTaskRemoveFromEventList+0xb4>)
 800f268:	441a      	add	r2, r3
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	3304      	adds	r3, #4
 800f26e:	4619      	mov	r1, r3
 800f270:	4610      	mov	r0, r2
 800f272:	f7fe fd9e 	bl	800ddb2 <vListInsertEnd>
 800f276:	e005      	b.n	800f284 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	3318      	adds	r3, #24
 800f27c:	4619      	mov	r1, r3
 800f27e:	480e      	ldr	r0, [pc, #56]	; (800f2b8 <xTaskRemoveFromEventList+0xb8>)
 800f280:	f7fe fd97 	bl	800ddb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f288:	4b0c      	ldr	r3, [pc, #48]	; (800f2bc <xTaskRemoveFromEventList+0xbc>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28e:	429a      	cmp	r2, r3
 800f290:	d905      	bls.n	800f29e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f292:	2301      	movs	r3, #1
 800f294:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f296:	4b0a      	ldr	r3, [pc, #40]	; (800f2c0 <xTaskRemoveFromEventList+0xc0>)
 800f298:	2201      	movs	r2, #1
 800f29a:	601a      	str	r2, [r3, #0]
 800f29c:	e001      	b.n	800f2a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f2a2:	697b      	ldr	r3, [r7, #20]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3718      	adds	r7, #24
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	200010d0 	.word	0x200010d0
 800f2b0:	200010b0 	.word	0x200010b0
 800f2b4:	20000bd8 	.word	0x20000bd8
 800f2b8:	20001068 	.word	0x20001068
 800f2bc:	20000bd4 	.word	0x20000bd4
 800f2c0:	200010bc 	.word	0x200010bc

0800f2c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f2cc:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <vTaskInternalSetTimeOutState+0x24>)
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f2d4:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <vTaskInternalSetTimeOutState+0x28>)
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	605a      	str	r2, [r3, #4]
}
 800f2dc:	bf00      	nop
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	200010c0 	.word	0x200010c0
 800f2ec:	200010ac 	.word	0x200010ac

0800f2f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b088      	sub	sp, #32
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d109      	bne.n	800f314 <xTaskCheckForTimeOut+0x24>
 800f300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f304:	f383 8811 	msr	BASEPRI, r3
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	613b      	str	r3, [r7, #16]
 800f312:	e7fe      	b.n	800f312 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d109      	bne.n	800f32e <xTaskCheckForTimeOut+0x3e>
 800f31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31e:	f383 8811 	msr	BASEPRI, r3
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	f3bf 8f4f 	dsb	sy
 800f32a:	60fb      	str	r3, [r7, #12]
 800f32c:	e7fe      	b.n	800f32c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f32e:	f000 fe65 	bl	800fffc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f332:	4b1d      	ldr	r3, [pc, #116]	; (800f3a8 <xTaskCheckForTimeOut+0xb8>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	69ba      	ldr	r2, [r7, #24]
 800f33e:	1ad3      	subs	r3, r2, r3
 800f340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34a:	d102      	bne.n	800f352 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f34c:	2300      	movs	r3, #0
 800f34e:	61fb      	str	r3, [r7, #28]
 800f350:	e023      	b.n	800f39a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	4b15      	ldr	r3, [pc, #84]	; (800f3ac <xTaskCheckForTimeOut+0xbc>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d007      	beq.n	800f36e <xTaskCheckForTimeOut+0x7e>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	69ba      	ldr	r2, [r7, #24]
 800f364:	429a      	cmp	r2, r3
 800f366:	d302      	bcc.n	800f36e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f368:	2301      	movs	r3, #1
 800f36a:	61fb      	str	r3, [r7, #28]
 800f36c:	e015      	b.n	800f39a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	429a      	cmp	r2, r3
 800f376:	d20b      	bcs.n	800f390 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	1ad2      	subs	r2, r2, r3
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff ff9d 	bl	800f2c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f38a:	2300      	movs	r3, #0
 800f38c:	61fb      	str	r3, [r7, #28]
 800f38e:	e004      	b.n	800f39a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	2200      	movs	r2, #0
 800f394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f396:	2301      	movs	r3, #1
 800f398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f39a:	f000 fe5d 	bl	8010058 <vPortExitCritical>

	return xReturn;
 800f39e:	69fb      	ldr	r3, [r7, #28]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3720      	adds	r7, #32
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	200010ac 	.word	0x200010ac
 800f3ac:	200010c0 	.word	0x200010c0

0800f3b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f3b4:	4b03      	ldr	r3, [pc, #12]	; (800f3c4 <vTaskMissedYield+0x14>)
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	601a      	str	r2, [r3, #0]
}
 800f3ba:	bf00      	nop
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr
 800f3c4:	200010bc 	.word	0x200010bc

0800f3c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f3d0:	f000 f852 	bl	800f478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3d4:	4b06      	ldr	r3, [pc, #24]	; (800f3f0 <prvIdleTask+0x28>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d9f9      	bls.n	800f3d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3dc:	4b05      	ldr	r3, [pc, #20]	; (800f3f4 <prvIdleTask+0x2c>)
 800f3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3ec:	e7f0      	b.n	800f3d0 <prvIdleTask+0x8>
 800f3ee:	bf00      	nop
 800f3f0:	20000bd8 	.word	0x20000bd8
 800f3f4:	e000ed04 	.word	0xe000ed04

0800f3f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3fe:	2300      	movs	r3, #0
 800f400:	607b      	str	r3, [r7, #4]
 800f402:	e00c      	b.n	800f41e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f404:	687a      	ldr	r2, [r7, #4]
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4a12      	ldr	r2, [pc, #72]	; (800f458 <prvInitialiseTaskLists+0x60>)
 800f410:	4413      	add	r3, r2
 800f412:	4618      	mov	r0, r3
 800f414:	f7fe fca0 	bl	800dd58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3301      	adds	r3, #1
 800f41c:	607b      	str	r3, [r7, #4]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b37      	cmp	r3, #55	; 0x37
 800f422:	d9ef      	bls.n	800f404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f424:	480d      	ldr	r0, [pc, #52]	; (800f45c <prvInitialiseTaskLists+0x64>)
 800f426:	f7fe fc97 	bl	800dd58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f42a:	480d      	ldr	r0, [pc, #52]	; (800f460 <prvInitialiseTaskLists+0x68>)
 800f42c:	f7fe fc94 	bl	800dd58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f430:	480c      	ldr	r0, [pc, #48]	; (800f464 <prvInitialiseTaskLists+0x6c>)
 800f432:	f7fe fc91 	bl	800dd58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f436:	480c      	ldr	r0, [pc, #48]	; (800f468 <prvInitialiseTaskLists+0x70>)
 800f438:	f7fe fc8e 	bl	800dd58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f43c:	480b      	ldr	r0, [pc, #44]	; (800f46c <prvInitialiseTaskLists+0x74>)
 800f43e:	f7fe fc8b 	bl	800dd58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f442:	4b0b      	ldr	r3, [pc, #44]	; (800f470 <prvInitialiseTaskLists+0x78>)
 800f444:	4a05      	ldr	r2, [pc, #20]	; (800f45c <prvInitialiseTaskLists+0x64>)
 800f446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f448:	4b0a      	ldr	r3, [pc, #40]	; (800f474 <prvInitialiseTaskLists+0x7c>)
 800f44a:	4a05      	ldr	r2, [pc, #20]	; (800f460 <prvInitialiseTaskLists+0x68>)
 800f44c:	601a      	str	r2, [r3, #0]
}
 800f44e:	bf00      	nop
 800f450:	3708      	adds	r7, #8
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20000bd8 	.word	0x20000bd8
 800f45c:	20001038 	.word	0x20001038
 800f460:	2000104c 	.word	0x2000104c
 800f464:	20001068 	.word	0x20001068
 800f468:	2000107c 	.word	0x2000107c
 800f46c:	20001094 	.word	0x20001094
 800f470:	20001060 	.word	0x20001060
 800f474:	20001064 	.word	0x20001064

0800f478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f47e:	e019      	b.n	800f4b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f480:	f000 fdbc 	bl	800fffc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f484:	4b0f      	ldr	r3, [pc, #60]	; (800f4c4 <prvCheckTasksWaitingTermination+0x4c>)
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	3304      	adds	r3, #4
 800f490:	4618      	mov	r0, r3
 800f492:	f7fe fceb 	bl	800de6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f496:	4b0c      	ldr	r3, [pc, #48]	; (800f4c8 <prvCheckTasksWaitingTermination+0x50>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	4a0a      	ldr	r2, [pc, #40]	; (800f4c8 <prvCheckTasksWaitingTermination+0x50>)
 800f49e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	; (800f4cc <prvCheckTasksWaitingTermination+0x54>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3b01      	subs	r3, #1
 800f4a6:	4a09      	ldr	r2, [pc, #36]	; (800f4cc <prvCheckTasksWaitingTermination+0x54>)
 800f4a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f4aa:	f000 fdd5 	bl	8010058 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 f80e 	bl	800f4d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f4b4:	4b05      	ldr	r3, [pc, #20]	; (800f4cc <prvCheckTasksWaitingTermination+0x54>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1e1      	bne.n	800f480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	2000107c 	.word	0x2000107c
 800f4c8:	200010a8 	.word	0x200010a8
 800f4cc:	20001090 	.word	0x20001090

0800f4d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d108      	bne.n	800f4f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 feb4 	bl	8010254 <vPortFree>
				vPortFree( pxTCB );
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 feb1 	bl	8010254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4f2:	e017      	b.n	800f524 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d103      	bne.n	800f506 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fea8 	bl	8010254 <vPortFree>
	}
 800f504:	e00e      	b.n	800f524 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f50c:	2b02      	cmp	r3, #2
 800f50e:	d009      	beq.n	800f524 <prvDeleteTCB+0x54>
 800f510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f514:	f383 8811 	msr	BASEPRI, r3
 800f518:	f3bf 8f6f 	isb	sy
 800f51c:	f3bf 8f4f 	dsb	sy
 800f520:	60fb      	str	r3, [r7, #12]
 800f522:	e7fe      	b.n	800f522 <prvDeleteTCB+0x52>
	}
 800f524:	bf00      	nop
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f532:	4b0c      	ldr	r3, [pc, #48]	; (800f564 <prvResetNextTaskUnblockTime+0x38>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d104      	bne.n	800f546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f53c:	4b0a      	ldr	r3, [pc, #40]	; (800f568 <prvResetNextTaskUnblockTime+0x3c>)
 800f53e:	f04f 32ff 	mov.w	r2, #4294967295
 800f542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f544:	e008      	b.n	800f558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f546:	4b07      	ldr	r3, [pc, #28]	; (800f564 <prvResetNextTaskUnblockTime+0x38>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	4a04      	ldr	r2, [pc, #16]	; (800f568 <prvResetNextTaskUnblockTime+0x3c>)
 800f556:	6013      	str	r3, [r2, #0]
}
 800f558:	bf00      	nop
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr
 800f564:	20001060 	.word	0x20001060
 800f568:	200010c8 	.word	0x200010c8

0800f56c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f572:	4b0b      	ldr	r3, [pc, #44]	; (800f5a0 <xTaskGetSchedulerState+0x34>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d102      	bne.n	800f580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f57a:	2301      	movs	r3, #1
 800f57c:	607b      	str	r3, [r7, #4]
 800f57e:	e008      	b.n	800f592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f580:	4b08      	ldr	r3, [pc, #32]	; (800f5a4 <xTaskGetSchedulerState+0x38>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d102      	bne.n	800f58e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f588:	2302      	movs	r3, #2
 800f58a:	607b      	str	r3, [r7, #4]
 800f58c:	e001      	b.n	800f592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f58e:	2300      	movs	r3, #0
 800f590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f592:	687b      	ldr	r3, [r7, #4]
	}
 800f594:	4618      	mov	r0, r3
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr
 800f5a0:	200010b4 	.word	0x200010b4
 800f5a4:	200010d0 	.word	0x200010d0

0800f5a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d054      	beq.n	800f668 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f5be:	4b2d      	ldr	r3, [pc, #180]	; (800f674 <xTaskPriorityDisinherit+0xcc>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	693a      	ldr	r2, [r7, #16]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d009      	beq.n	800f5dc <xTaskPriorityDisinherit+0x34>
 800f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5cc:	f383 8811 	msr	BASEPRI, r3
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	60fb      	str	r3, [r7, #12]
 800f5da:	e7fe      	b.n	800f5da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d109      	bne.n	800f5f8 <xTaskPriorityDisinherit+0x50>
 800f5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e8:	f383 8811 	msr	BASEPRI, r3
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	60bb      	str	r3, [r7, #8]
 800f5f6:	e7fe      	b.n	800f5f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5fc:	1e5a      	subs	r2, r3, #1
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d02c      	beq.n	800f668 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f612:	2b00      	cmp	r3, #0
 800f614:	d128      	bne.n	800f668 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	3304      	adds	r3, #4
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fe fc26 	bl	800de6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f638:	4b0f      	ldr	r3, [pc, #60]	; (800f678 <xTaskPriorityDisinherit+0xd0>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d903      	bls.n	800f648 <xTaskPriorityDisinherit+0xa0>
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f644:	4a0c      	ldr	r2, [pc, #48]	; (800f678 <xTaskPriorityDisinherit+0xd0>)
 800f646:	6013      	str	r3, [r2, #0]
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f64c:	4613      	mov	r3, r2
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4413      	add	r3, r2
 800f652:	009b      	lsls	r3, r3, #2
 800f654:	4a09      	ldr	r2, [pc, #36]	; (800f67c <xTaskPriorityDisinherit+0xd4>)
 800f656:	441a      	add	r2, r3
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	3304      	adds	r3, #4
 800f65c:	4619      	mov	r1, r3
 800f65e:	4610      	mov	r0, r2
 800f660:	f7fe fba7 	bl	800ddb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f664:	2301      	movs	r3, #1
 800f666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f668:	697b      	ldr	r3, [r7, #20]
	}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	20000bd4 	.word	0x20000bd4
 800f678:	200010b0 	.word	0x200010b0
 800f67c:	20000bd8 	.word	0x20000bd8

0800f680 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f68a:	4b21      	ldr	r3, [pc, #132]	; (800f710 <prvAddCurrentTaskToDelayedList+0x90>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f690:	4b20      	ldr	r3, [pc, #128]	; (800f714 <prvAddCurrentTaskToDelayedList+0x94>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3304      	adds	r3, #4
 800f696:	4618      	mov	r0, r3
 800f698:	f7fe fbe8 	bl	800de6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a2:	d10a      	bne.n	800f6ba <prvAddCurrentTaskToDelayedList+0x3a>
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d007      	beq.n	800f6ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6aa:	4b1a      	ldr	r3, [pc, #104]	; (800f714 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	4819      	ldr	r0, [pc, #100]	; (800f718 <prvAddCurrentTaskToDelayedList+0x98>)
 800f6b4:	f7fe fb7d 	bl	800ddb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f6b8:	e026      	b.n	800f708 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4413      	add	r3, r2
 800f6c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f6c2:	4b14      	ldr	r3, [pc, #80]	; (800f714 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d209      	bcs.n	800f6e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6d2:	4b12      	ldr	r3, [pc, #72]	; (800f71c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	; (800f714 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3304      	adds	r3, #4
 800f6dc:	4619      	mov	r1, r3
 800f6de:	4610      	mov	r0, r2
 800f6e0:	f7fe fb8b 	bl	800ddfa <vListInsert>
}
 800f6e4:	e010      	b.n	800f708 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6e6:	4b0e      	ldr	r3, [pc, #56]	; (800f720 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	4b0a      	ldr	r3, [pc, #40]	; (800f714 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	4610      	mov	r0, r2
 800f6f4:	f7fe fb81 	bl	800ddfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f6f8:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d202      	bcs.n	800f708 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f702:	4a08      	ldr	r2, [pc, #32]	; (800f724 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	6013      	str	r3, [r2, #0]
}
 800f708:	bf00      	nop
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	200010ac 	.word	0x200010ac
 800f714:	20000bd4 	.word	0x20000bd4
 800f718:	20001094 	.word	0x20001094
 800f71c:	20001064 	.word	0x20001064
 800f720:	20001060 	.word	0x20001060
 800f724:	200010c8 	.word	0x200010c8

0800f728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b08a      	sub	sp, #40	; 0x28
 800f72c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f72e:	2300      	movs	r3, #0
 800f730:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f732:	f000 faff 	bl	800fd34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f736:	4b1c      	ldr	r3, [pc, #112]	; (800f7a8 <xTimerCreateTimerTask+0x80>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d021      	beq.n	800f782 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f73e:	2300      	movs	r3, #0
 800f740:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f746:	1d3a      	adds	r2, r7, #4
 800f748:	f107 0108 	add.w	r1, r7, #8
 800f74c:	f107 030c 	add.w	r3, r7, #12
 800f750:	4618      	mov	r0, r3
 800f752:	f7fe fae7 	bl	800dd24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f756:	6879      	ldr	r1, [r7, #4]
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	9202      	str	r2, [sp, #8]
 800f75e:	9301      	str	r3, [sp, #4]
 800f760:	2302      	movs	r3, #2
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	2300      	movs	r3, #0
 800f766:	460a      	mov	r2, r1
 800f768:	4910      	ldr	r1, [pc, #64]	; (800f7ac <xTimerCreateTimerTask+0x84>)
 800f76a:	4811      	ldr	r0, [pc, #68]	; (800f7b0 <xTimerCreateTimerTask+0x88>)
 800f76c:	f7ff f87c 	bl	800e868 <xTaskCreateStatic>
 800f770:	4602      	mov	r2, r0
 800f772:	4b10      	ldr	r3, [pc, #64]	; (800f7b4 <xTimerCreateTimerTask+0x8c>)
 800f774:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f776:	4b0f      	ldr	r3, [pc, #60]	; (800f7b4 <xTimerCreateTimerTask+0x8c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f77e:	2301      	movs	r3, #1
 800f780:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d109      	bne.n	800f79c <xTimerCreateTimerTask+0x74>
 800f788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78c:	f383 8811 	msr	BASEPRI, r3
 800f790:	f3bf 8f6f 	isb	sy
 800f794:	f3bf 8f4f 	dsb	sy
 800f798:	613b      	str	r3, [r7, #16]
 800f79a:	e7fe      	b.n	800f79a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f79c:	697b      	ldr	r3, [r7, #20]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3718      	adds	r7, #24
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	20001104 	.word	0x20001104
 800f7ac:	080164b8 	.word	0x080164b8
 800f7b0:	0800f8e9 	.word	0x0800f8e9
 800f7b4:	20001108 	.word	0x20001108

0800f7b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08a      	sub	sp, #40	; 0x28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
 800f7c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d109      	bne.n	800f7e4 <xTimerGenericCommand+0x2c>
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	623b      	str	r3, [r7, #32]
 800f7e2:	e7fe      	b.n	800f7e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f7e4:	4b19      	ldr	r3, [pc, #100]	; (800f84c <xTimerGenericCommand+0x94>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d02a      	beq.n	800f842 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	2b05      	cmp	r3, #5
 800f7fc:	dc18      	bgt.n	800f830 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f7fe:	f7ff feb5 	bl	800f56c <xTaskGetSchedulerState>
 800f802:	4603      	mov	r3, r0
 800f804:	2b02      	cmp	r3, #2
 800f806:	d109      	bne.n	800f81c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f808:	4b10      	ldr	r3, [pc, #64]	; (800f84c <xTimerGenericCommand+0x94>)
 800f80a:	6818      	ldr	r0, [r3, #0]
 800f80c:	f107 0110 	add.w	r1, r7, #16
 800f810:	2300      	movs	r3, #0
 800f812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f814:	f7fe fc52 	bl	800e0bc <xQueueGenericSend>
 800f818:	6278      	str	r0, [r7, #36]	; 0x24
 800f81a:	e012      	b.n	800f842 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f81c:	4b0b      	ldr	r3, [pc, #44]	; (800f84c <xTimerGenericCommand+0x94>)
 800f81e:	6818      	ldr	r0, [r3, #0]
 800f820:	f107 0110 	add.w	r1, r7, #16
 800f824:	2300      	movs	r3, #0
 800f826:	2200      	movs	r2, #0
 800f828:	f7fe fc48 	bl	800e0bc <xQueueGenericSend>
 800f82c:	6278      	str	r0, [r7, #36]	; 0x24
 800f82e:	e008      	b.n	800f842 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f830:	4b06      	ldr	r3, [pc, #24]	; (800f84c <xTimerGenericCommand+0x94>)
 800f832:	6818      	ldr	r0, [r3, #0]
 800f834:	f107 0110 	add.w	r1, r7, #16
 800f838:	2300      	movs	r3, #0
 800f83a:	683a      	ldr	r2, [r7, #0]
 800f83c:	f7fe fd38 	bl	800e2b0 <xQueueGenericSendFromISR>
 800f840:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f844:	4618      	mov	r0, r3
 800f846:	3728      	adds	r7, #40	; 0x28
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	20001104 	.word	0x20001104

0800f850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b088      	sub	sp, #32
 800f854:	af02      	add	r7, sp, #8
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f85a:	4b22      	ldr	r3, [pc, #136]	; (800f8e4 <prvProcessExpiredTimer+0x94>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	3304      	adds	r3, #4
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe faff 	bl	800de6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d021      	beq.n	800f8c0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	699a      	ldr	r2, [r3, #24]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	18d1      	adds	r1, r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	6978      	ldr	r0, [r7, #20]
 800f88a:	f000 f8d1 	bl	800fa30 <prvInsertTimerInActiveList>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d01e      	beq.n	800f8d2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f894:	2300      	movs	r3, #0
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	2300      	movs	r3, #0
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	2100      	movs	r1, #0
 800f89e:	6978      	ldr	r0, [r7, #20]
 800f8a0:	f7ff ff8a 	bl	800f7b8 <xTimerGenericCommand>
 800f8a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d112      	bne.n	800f8d2 <prvProcessExpiredTimer+0x82>
 800f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	60fb      	str	r3, [r7, #12]
 800f8be:	e7fe      	b.n	800f8be <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8c6:	f023 0301 	bic.w	r3, r3, #1
 800f8ca:	b2da      	uxtb	r2, r3
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	6978      	ldr	r0, [r7, #20]
 800f8d8:	4798      	blx	r3
}
 800f8da:	bf00      	nop
 800f8dc:	3718      	adds	r7, #24
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	200010fc 	.word	0x200010fc

0800f8e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f8f0:	f107 0308 	add.w	r3, r7, #8
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f000 f857 	bl	800f9a8 <prvGetNextExpireTime>
 800f8fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	4619      	mov	r1, r3
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f000 f803 	bl	800f90c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f906:	f000 f8d5 	bl	800fab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f90a:	e7f1      	b.n	800f8f0 <prvTimerTask+0x8>

0800f90c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f916:	f7ff fa57 	bl	800edc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f91a:	f107 0308 	add.w	r3, r7, #8
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 f866 	bl	800f9f0 <prvSampleTimeNow>
 800f924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d130      	bne.n	800f98e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10a      	bne.n	800f948 <prvProcessTimerOrBlockTask+0x3c>
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	429a      	cmp	r2, r3
 800f938:	d806      	bhi.n	800f948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f93a:	f7ff fa53 	bl	800ede4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f93e:	68f9      	ldr	r1, [r7, #12]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff ff85 	bl	800f850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f946:	e024      	b.n	800f992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d008      	beq.n	800f960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f94e:	4b13      	ldr	r3, [pc, #76]	; (800f99c <prvProcessTimerOrBlockTask+0x90>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d101      	bne.n	800f95c <prvProcessTimerOrBlockTask+0x50>
 800f958:	2301      	movs	r3, #1
 800f95a:	e000      	b.n	800f95e <prvProcessTimerOrBlockTask+0x52>
 800f95c:	2300      	movs	r3, #0
 800f95e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f960:	4b0f      	ldr	r3, [pc, #60]	; (800f9a0 <prvProcessTimerOrBlockTask+0x94>)
 800f962:	6818      	ldr	r0, [r3, #0]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	683a      	ldr	r2, [r7, #0]
 800f96c:	4619      	mov	r1, r3
 800f96e:	f7fe ff47 	bl	800e800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f972:	f7ff fa37 	bl	800ede4 <xTaskResumeAll>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10a      	bne.n	800f992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f97c:	4b09      	ldr	r3, [pc, #36]	; (800f9a4 <prvProcessTimerOrBlockTask+0x98>)
 800f97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	f3bf 8f4f 	dsb	sy
 800f988:	f3bf 8f6f 	isb	sy
}
 800f98c:	e001      	b.n	800f992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f98e:	f7ff fa29 	bl	800ede4 <xTaskResumeAll>
}
 800f992:	bf00      	nop
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	20001100 	.word	0x20001100
 800f9a0:	20001104 	.word	0x20001104
 800f9a4:	e000ed04 	.word	0xe000ed04

0800f9a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b085      	sub	sp, #20
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9b0:	4b0e      	ldr	r3, [pc, #56]	; (800f9ec <prvGetNextExpireTime+0x44>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <prvGetNextExpireTime+0x16>
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	e000      	b.n	800f9c0 <prvGetNextExpireTime+0x18>
 800f9be:	2200      	movs	r2, #0
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d105      	bne.n	800f9d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9cc:	4b07      	ldr	r3, [pc, #28]	; (800f9ec <prvGetNextExpireTime+0x44>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	60fb      	str	r3, [r7, #12]
 800f9d6:	e001      	b.n	800f9dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3714      	adds	r7, #20
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	200010fc 	.word	0x200010fc

0800f9f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f9f8:	f7ff fa90 	bl	800ef1c <xTaskGetTickCount>
 800f9fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f9fe:	4b0b      	ldr	r3, [pc, #44]	; (800fa2c <prvSampleTimeNow+0x3c>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d205      	bcs.n	800fa14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fa08:	f000 f930 	bl	800fc6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	601a      	str	r2, [r3, #0]
 800fa12:	e002      	b.n	800fa1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fa1a:	4a04      	ldr	r2, [pc, #16]	; (800fa2c <prvSampleTimeNow+0x3c>)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fa20:	68fb      	ldr	r3, [r7, #12]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	2000110c 	.word	0x2000110c

0800fa30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
 800fa3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	68ba      	ldr	r2, [r7, #8]
 800fa46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d812      	bhi.n	800fa7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	1ad2      	subs	r2, r2, r3
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d302      	bcc.n	800fa6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa64:	2301      	movs	r3, #1
 800fa66:	617b      	str	r3, [r7, #20]
 800fa68:	e01b      	b.n	800faa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa6a:	4b10      	ldr	r3, [pc, #64]	; (800faac <prvInsertTimerInActiveList+0x7c>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	3304      	adds	r3, #4
 800fa72:	4619      	mov	r1, r3
 800fa74:	4610      	mov	r0, r2
 800fa76:	f7fe f9c0 	bl	800ddfa <vListInsert>
 800fa7a:	e012      	b.n	800faa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d206      	bcs.n	800fa92 <prvInsertTimerInActiveList+0x62>
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d302      	bcc.n	800fa92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	617b      	str	r3, [r7, #20]
 800fa90:	e007      	b.n	800faa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa92:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <prvInsertTimerInActiveList+0x80>)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	3304      	adds	r3, #4
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	f7fe f9ac 	bl	800ddfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800faa2:	697b      	ldr	r3, [r7, #20]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3718      	adds	r7, #24
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	20001100 	.word	0x20001100
 800fab0:	200010fc 	.word	0x200010fc

0800fab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b08e      	sub	sp, #56	; 0x38
 800fab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800faba:	e0c6      	b.n	800fc4a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	da17      	bge.n	800faf2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fac2:	1d3b      	adds	r3, r7, #4
 800fac4:	3304      	adds	r3, #4
 800fac6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faca:	2b00      	cmp	r3, #0
 800facc:	d109      	bne.n	800fae2 <prvProcessReceivedCommands+0x2e>
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	61fb      	str	r3, [r7, #28]
 800fae0:	e7fe      	b.n	800fae0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fae8:	6850      	ldr	r0, [r2, #4]
 800faea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faec:	6892      	ldr	r2, [r2, #8]
 800faee:	4611      	mov	r1, r2
 800faf0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f2c0 80a7 	blt.w	800fc48 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb00:	695b      	ldr	r3, [r3, #20]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d004      	beq.n	800fb10 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb08:	3304      	adds	r3, #4
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fe f9ae 	bl	800de6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb10:	463b      	mov	r3, r7
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff ff6c 	bl	800f9f0 <prvSampleTimeNow>
 800fb18:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b09      	cmp	r3, #9
 800fb1e:	f200 8094 	bhi.w	800fc4a <prvProcessReceivedCommands+0x196>
 800fb22:	a201      	add	r2, pc, #4	; (adr r2, 800fb28 <prvProcessReceivedCommands+0x74>)
 800fb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb28:	0800fb51 	.word	0x0800fb51
 800fb2c:	0800fb51 	.word	0x0800fb51
 800fb30:	0800fb51 	.word	0x0800fb51
 800fb34:	0800fbc3 	.word	0x0800fbc3
 800fb38:	0800fbd7 	.word	0x0800fbd7
 800fb3c:	0800fc1f 	.word	0x0800fc1f
 800fb40:	0800fb51 	.word	0x0800fb51
 800fb44:	0800fb51 	.word	0x0800fb51
 800fb48:	0800fbc3 	.word	0x0800fbc3
 800fb4c:	0800fbd7 	.word	0x0800fbd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb56:	f043 0301 	orr.w	r3, r3, #1
 800fb5a:	b2da      	uxtb	r2, r3
 800fb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb66:	699b      	ldr	r3, [r3, #24]
 800fb68:	18d1      	adds	r1, r2, r3
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb70:	f7ff ff5e 	bl	800fa30 <prvInsertTimerInActiveList>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d067      	beq.n	800fc4a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7c:	6a1b      	ldr	r3, [r3, #32]
 800fb7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb88:	f003 0304 	and.w	r3, r3, #4
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d05c      	beq.n	800fc4a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb94:	699b      	ldr	r3, [r3, #24]
 800fb96:	441a      	add	r2, r3
 800fb98:	2300      	movs	r3, #0
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	2100      	movs	r1, #0
 800fba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fba2:	f7ff fe09 	bl	800f7b8 <xTimerGenericCommand>
 800fba6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fba8:	6a3b      	ldr	r3, [r7, #32]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d14d      	bne.n	800fc4a <prvProcessReceivedCommands+0x196>
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	61bb      	str	r3, [r7, #24]
 800fbc0:	e7fe      	b.n	800fbc0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbc8:	f023 0301 	bic.w	r3, r3, #1
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fbd4:	e039      	b.n	800fc4a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbdc:	f043 0301 	orr.w	r3, r3, #1
 800fbe0:	b2da      	uxtb	r2, r3
 800fbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d109      	bne.n	800fc0a <prvProcessReceivedCommands+0x156>
 800fbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfa:	f383 8811 	msr	BASEPRI, r3
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f3bf 8f4f 	dsb	sy
 800fc06:	617b      	str	r3, [r7, #20]
 800fc08:	e7fe      	b.n	800fc08 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0c:	699a      	ldr	r2, [r3, #24]
 800fc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc10:	18d1      	adds	r1, r2, r3
 800fc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc18:	f7ff ff0a 	bl	800fa30 <prvInsertTimerInActiveList>
					break;
 800fc1c:	e015      	b.n	800fc4a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc24:	f003 0302 	and.w	r3, r3, #2
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d103      	bne.n	800fc34 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800fc2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc2e:	f000 fb11 	bl	8010254 <vPortFree>
 800fc32:	e00a      	b.n	800fc4a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc3a:	f023 0301 	bic.w	r3, r3, #1
 800fc3e:	b2da      	uxtb	r2, r3
 800fc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fc46:	e000      	b.n	800fc4a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fc48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc4a:	4b07      	ldr	r3, [pc, #28]	; (800fc68 <prvProcessReceivedCommands+0x1b4>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	1d39      	adds	r1, r7, #4
 800fc50:	2200      	movs	r2, #0
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe fbc0 	bl	800e3d8 <xQueueReceive>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	f47f af2e 	bne.w	800fabc <prvProcessReceivedCommands+0x8>
	}
}
 800fc60:	bf00      	nop
 800fc62:	3730      	adds	r7, #48	; 0x30
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	20001104 	.word	0x20001104

0800fc6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b088      	sub	sp, #32
 800fc70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc72:	e047      	b.n	800fd04 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc74:	4b2d      	ldr	r3, [pc, #180]	; (800fd2c <prvSwitchTimerLists+0xc0>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc7e:	4b2b      	ldr	r3, [pc, #172]	; (800fd2c <prvSwitchTimerLists+0xc0>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	3304      	adds	r3, #4
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7fe f8ed 	bl	800de6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6a1b      	ldr	r3, [r3, #32]
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fca0:	f003 0304 	and.w	r3, r3, #4
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d02d      	beq.n	800fd04 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	693a      	ldr	r2, [r7, #16]
 800fcae:	4413      	add	r3, r2
 800fcb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fcb2:	68ba      	ldr	r2, [r7, #8]
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d90e      	bls.n	800fcd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcc6:	4b19      	ldr	r3, [pc, #100]	; (800fd2c <prvSwitchTimerLists+0xc0>)
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3304      	adds	r3, #4
 800fcce:	4619      	mov	r1, r3
 800fcd0:	4610      	mov	r0, r2
 800fcd2:	f7fe f892 	bl	800ddfa <vListInsert>
 800fcd6:	e015      	b.n	800fd04 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fcd8:	2300      	movs	r3, #0
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	2300      	movs	r3, #0
 800fcde:	693a      	ldr	r2, [r7, #16]
 800fce0:	2100      	movs	r1, #0
 800fce2:	68f8      	ldr	r0, [r7, #12]
 800fce4:	f7ff fd68 	bl	800f7b8 <xTimerGenericCommand>
 800fce8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d109      	bne.n	800fd04 <prvSwitchTimerLists+0x98>
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	f383 8811 	msr	BASEPRI, r3
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	603b      	str	r3, [r7, #0]
 800fd02:	e7fe      	b.n	800fd02 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd04:	4b09      	ldr	r3, [pc, #36]	; (800fd2c <prvSwitchTimerLists+0xc0>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1b2      	bne.n	800fc74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fd0e:	4b07      	ldr	r3, [pc, #28]	; (800fd2c <prvSwitchTimerLists+0xc0>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fd14:	4b06      	ldr	r3, [pc, #24]	; (800fd30 <prvSwitchTimerLists+0xc4>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a04      	ldr	r2, [pc, #16]	; (800fd2c <prvSwitchTimerLists+0xc0>)
 800fd1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fd1c:	4a04      	ldr	r2, [pc, #16]	; (800fd30 <prvSwitchTimerLists+0xc4>)
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	6013      	str	r3, [r2, #0]
}
 800fd22:	bf00      	nop
 800fd24:	3718      	adds	r7, #24
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	200010fc 	.word	0x200010fc
 800fd30:	20001100 	.word	0x20001100

0800fd34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fd3a:	f000 f95f 	bl	800fffc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fd3e:	4b15      	ldr	r3, [pc, #84]	; (800fd94 <prvCheckForValidListAndQueue+0x60>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d120      	bne.n	800fd88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fd46:	4814      	ldr	r0, [pc, #80]	; (800fd98 <prvCheckForValidListAndQueue+0x64>)
 800fd48:	f7fe f806 	bl	800dd58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fd4c:	4813      	ldr	r0, [pc, #76]	; (800fd9c <prvCheckForValidListAndQueue+0x68>)
 800fd4e:	f7fe f803 	bl	800dd58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fd52:	4b13      	ldr	r3, [pc, #76]	; (800fda0 <prvCheckForValidListAndQueue+0x6c>)
 800fd54:	4a10      	ldr	r2, [pc, #64]	; (800fd98 <prvCheckForValidListAndQueue+0x64>)
 800fd56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd58:	4b12      	ldr	r3, [pc, #72]	; (800fda4 <prvCheckForValidListAndQueue+0x70>)
 800fd5a:	4a10      	ldr	r2, [pc, #64]	; (800fd9c <prvCheckForValidListAndQueue+0x68>)
 800fd5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd5e:	2300      	movs	r3, #0
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	4b11      	ldr	r3, [pc, #68]	; (800fda8 <prvCheckForValidListAndQueue+0x74>)
 800fd64:	4a11      	ldr	r2, [pc, #68]	; (800fdac <prvCheckForValidListAndQueue+0x78>)
 800fd66:	2110      	movs	r1, #16
 800fd68:	200a      	movs	r0, #10
 800fd6a:	f7fe f911 	bl	800df90 <xQueueGenericCreateStatic>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	4b08      	ldr	r3, [pc, #32]	; (800fd94 <prvCheckForValidListAndQueue+0x60>)
 800fd72:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fd74:	4b07      	ldr	r3, [pc, #28]	; (800fd94 <prvCheckForValidListAndQueue+0x60>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d005      	beq.n	800fd88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd7c:	4b05      	ldr	r3, [pc, #20]	; (800fd94 <prvCheckForValidListAndQueue+0x60>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	490b      	ldr	r1, [pc, #44]	; (800fdb0 <prvCheckForValidListAndQueue+0x7c>)
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe fd14 	bl	800e7b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd88:	f000 f966 	bl	8010058 <vPortExitCritical>
}
 800fd8c:	bf00      	nop
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	20001104 	.word	0x20001104
 800fd98:	200010d4 	.word	0x200010d4
 800fd9c:	200010e8 	.word	0x200010e8
 800fda0:	200010fc 	.word	0x200010fc
 800fda4:	20001100 	.word	0x20001100
 800fda8:	200011b0 	.word	0x200011b0
 800fdac:	20001110 	.word	0x20001110
 800fdb0:	080164c0 	.word	0x080164c0

0800fdb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	3b04      	subs	r3, #4
 800fdc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fdcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	3b04      	subs	r3, #4
 800fdd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	f023 0201 	bic.w	r2, r3, #1
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	3b04      	subs	r3, #4
 800fde2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fde4:	4a0c      	ldr	r2, [pc, #48]	; (800fe18 <pxPortInitialiseStack+0x64>)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3b14      	subs	r3, #20
 800fdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	3b04      	subs	r3, #4
 800fdfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f06f 0202 	mvn.w	r2, #2
 800fe02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3b20      	subs	r3, #32
 800fe08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3714      	adds	r7, #20
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	0800fe1d 	.word	0x0800fe1d

0800fe1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe26:	4b11      	ldr	r3, [pc, #68]	; (800fe6c <prvTaskExitError+0x50>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe2e:	d009      	beq.n	800fe44 <prvTaskExitError+0x28>
 800fe30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	60fb      	str	r3, [r7, #12]
 800fe42:	e7fe      	b.n	800fe42 <prvTaskExitError+0x26>
 800fe44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe48:	f383 8811 	msr	BASEPRI, r3
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fe56:	bf00      	nop
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d0fc      	beq.n	800fe58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fe5e:	bf00      	nop
 800fe60:	3714      	adds	r7, #20
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	20000018 	.word	0x20000018

0800fe70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fe70:	4b07      	ldr	r3, [pc, #28]	; (800fe90 <pxCurrentTCBConst2>)
 800fe72:	6819      	ldr	r1, [r3, #0]
 800fe74:	6808      	ldr	r0, [r1, #0]
 800fe76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7a:	f380 8809 	msr	PSP, r0
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f04f 0000 	mov.w	r0, #0
 800fe86:	f380 8811 	msr	BASEPRI, r0
 800fe8a:	4770      	bx	lr
 800fe8c:	f3af 8000 	nop.w

0800fe90 <pxCurrentTCBConst2>:
 800fe90:	20000bd4 	.word	0x20000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fe94:	bf00      	nop
 800fe96:	bf00      	nop

0800fe98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fe98:	4808      	ldr	r0, [pc, #32]	; (800febc <prvPortStartFirstTask+0x24>)
 800fe9a:	6800      	ldr	r0, [r0, #0]
 800fe9c:	6800      	ldr	r0, [r0, #0]
 800fe9e:	f380 8808 	msr	MSP, r0
 800fea2:	f04f 0000 	mov.w	r0, #0
 800fea6:	f380 8814 	msr	CONTROL, r0
 800feaa:	b662      	cpsie	i
 800feac:	b661      	cpsie	f
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	df00      	svc	0
 800feb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800feba:	bf00      	nop
 800febc:	e000ed08 	.word	0xe000ed08

0800fec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b086      	sub	sp, #24
 800fec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fec6:	4b44      	ldr	r3, [pc, #272]	; (800ffd8 <xPortStartScheduler+0x118>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a44      	ldr	r2, [pc, #272]	; (800ffdc <xPortStartScheduler+0x11c>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d109      	bne.n	800fee4 <xPortStartScheduler+0x24>
 800fed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed4:	f383 8811 	msr	BASEPRI, r3
 800fed8:	f3bf 8f6f 	isb	sy
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	613b      	str	r3, [r7, #16]
 800fee2:	e7fe      	b.n	800fee2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fee4:	4b3c      	ldr	r3, [pc, #240]	; (800ffd8 <xPortStartScheduler+0x118>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4a3d      	ldr	r2, [pc, #244]	; (800ffe0 <xPortStartScheduler+0x120>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d109      	bne.n	800ff02 <xPortStartScheduler+0x42>
 800feee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	e7fe      	b.n	800ff00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff02:	4b38      	ldr	r3, [pc, #224]	; (800ffe4 <xPortStartScheduler+0x124>)
 800ff04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	22ff      	movs	r2, #255	; 0xff
 800ff12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff1c:	78fb      	ldrb	r3, [r7, #3]
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	4b30      	ldr	r3, [pc, #192]	; (800ffe8 <xPortStartScheduler+0x128>)
 800ff28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff2a:	4b30      	ldr	r3, [pc, #192]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff2c:	2207      	movs	r2, #7
 800ff2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff30:	e009      	b.n	800ff46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ff32:	4b2e      	ldr	r3, [pc, #184]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	4a2c      	ldr	r2, [pc, #176]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff3c:	78fb      	ldrb	r3, [r7, #3]
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	005b      	lsls	r3, r3, #1
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff46:	78fb      	ldrb	r3, [r7, #3]
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff4e:	2b80      	cmp	r3, #128	; 0x80
 800ff50:	d0ef      	beq.n	800ff32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff52:	4b26      	ldr	r3, [pc, #152]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f1c3 0307 	rsb	r3, r3, #7
 800ff5a:	2b04      	cmp	r3, #4
 800ff5c:	d009      	beq.n	800ff72 <xPortStartScheduler+0xb2>
 800ff5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	60bb      	str	r3, [r7, #8]
 800ff70:	e7fe      	b.n	800ff70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ff72:	4b1e      	ldr	r3, [pc, #120]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	021b      	lsls	r3, r3, #8
 800ff78:	4a1c      	ldr	r2, [pc, #112]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ff7c:	4b1b      	ldr	r3, [pc, #108]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff84:	4a19      	ldr	r2, [pc, #100]	; (800ffec <xPortStartScheduler+0x12c>)
 800ff86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ff90:	4b17      	ldr	r3, [pc, #92]	; (800fff0 <xPortStartScheduler+0x130>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a16      	ldr	r2, [pc, #88]	; (800fff0 <xPortStartScheduler+0x130>)
 800ff96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ff9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ff9c:	4b14      	ldr	r3, [pc, #80]	; (800fff0 <xPortStartScheduler+0x130>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4a13      	ldr	r2, [pc, #76]	; (800fff0 <xPortStartScheduler+0x130>)
 800ffa2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ffa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ffa8:	f000 f8d6 	bl	8010158 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ffac:	4b11      	ldr	r3, [pc, #68]	; (800fff4 <xPortStartScheduler+0x134>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ffb2:	f000 f8f5 	bl	80101a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ffb6:	4b10      	ldr	r3, [pc, #64]	; (800fff8 <xPortStartScheduler+0x138>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a0f      	ldr	r2, [pc, #60]	; (800fff8 <xPortStartScheduler+0x138>)
 800ffbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ffc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ffc2:	f7ff ff69 	bl	800fe98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ffc6:	f7ff f871 	bl	800f0ac <vTaskSwitchContext>
	prvTaskExitError();
 800ffca:	f7ff ff27 	bl	800fe1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3718      	adds	r7, #24
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	e000ed00 	.word	0xe000ed00
 800ffdc:	410fc271 	.word	0x410fc271
 800ffe0:	410fc270 	.word	0x410fc270
 800ffe4:	e000e400 	.word	0xe000e400
 800ffe8:	20001200 	.word	0x20001200
 800ffec:	20001204 	.word	0x20001204
 800fff0:	e000ed20 	.word	0xe000ed20
 800fff4:	20000018 	.word	0x20000018
 800fff8:	e000ef34 	.word	0xe000ef34

0800fffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010014:	4b0e      	ldr	r3, [pc, #56]	; (8010050 <vPortEnterCritical+0x54>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	3301      	adds	r3, #1
 801001a:	4a0d      	ldr	r2, [pc, #52]	; (8010050 <vPortEnterCritical+0x54>)
 801001c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801001e:	4b0c      	ldr	r3, [pc, #48]	; (8010050 <vPortEnterCritical+0x54>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d10e      	bne.n	8010044 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010026:	4b0b      	ldr	r3, [pc, #44]	; (8010054 <vPortEnterCritical+0x58>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	b2db      	uxtb	r3, r3
 801002c:	2b00      	cmp	r3, #0
 801002e:	d009      	beq.n	8010044 <vPortEnterCritical+0x48>
 8010030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010034:	f383 8811 	msr	BASEPRI, r3
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	603b      	str	r3, [r7, #0]
 8010042:	e7fe      	b.n	8010042 <vPortEnterCritical+0x46>
	}
}
 8010044:	bf00      	nop
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	20000018 	.word	0x20000018
 8010054:	e000ed04 	.word	0xe000ed04

08010058 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801005e:	4b11      	ldr	r3, [pc, #68]	; (80100a4 <vPortExitCritical+0x4c>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d109      	bne.n	801007a <vPortExitCritical+0x22>
 8010066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	607b      	str	r3, [r7, #4]
 8010078:	e7fe      	b.n	8010078 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801007a:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <vPortExitCritical+0x4c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	3b01      	subs	r3, #1
 8010080:	4a08      	ldr	r2, [pc, #32]	; (80100a4 <vPortExitCritical+0x4c>)
 8010082:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010084:	4b07      	ldr	r3, [pc, #28]	; (80100a4 <vPortExitCritical+0x4c>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d104      	bne.n	8010096 <vPortExitCritical+0x3e>
 801008c:	2300      	movs	r3, #0
 801008e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010096:	bf00      	nop
 8010098:	370c      	adds	r7, #12
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	20000018 	.word	0x20000018
	...

080100b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80100b0:	f3ef 8009 	mrs	r0, PSP
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	4b15      	ldr	r3, [pc, #84]	; (8010110 <pxCurrentTCBConst>)
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	f01e 0f10 	tst.w	lr, #16
 80100c0:	bf08      	it	eq
 80100c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80100c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ca:	6010      	str	r0, [r2, #0]
 80100cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80100d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80100d4:	f380 8811 	msr	BASEPRI, r0
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f7fe ffe4 	bl	800f0ac <vTaskSwitchContext>
 80100e4:	f04f 0000 	mov.w	r0, #0
 80100e8:	f380 8811 	msr	BASEPRI, r0
 80100ec:	bc09      	pop	{r0, r3}
 80100ee:	6819      	ldr	r1, [r3, #0]
 80100f0:	6808      	ldr	r0, [r1, #0]
 80100f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f6:	f01e 0f10 	tst.w	lr, #16
 80100fa:	bf08      	it	eq
 80100fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010100:	f380 8809 	msr	PSP, r0
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	f3af 8000 	nop.w

08010110 <pxCurrentTCBConst>:
 8010110:	20000bd4 	.word	0x20000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010114:	bf00      	nop
 8010116:	bf00      	nop

08010118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010130:	f7fe ff04 	bl	800ef3c <xTaskIncrementTick>
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d003      	beq.n	8010142 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801013a:	4b06      	ldr	r3, [pc, #24]	; (8010154 <SysTick_Handler+0x3c>)
 801013c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010140:	601a      	str	r2, [r3, #0]
 8010142:	2300      	movs	r3, #0
 8010144:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801014c:	bf00      	nop
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	e000ed04 	.word	0xe000ed04

08010158 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010158:	b480      	push	{r7}
 801015a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801015c:	4b0b      	ldr	r3, [pc, #44]	; (801018c <vPortSetupTimerInterrupt+0x34>)
 801015e:	2200      	movs	r2, #0
 8010160:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010162:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <vPortSetupTimerInterrupt+0x38>)
 8010164:	2200      	movs	r2, #0
 8010166:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010168:	4b0a      	ldr	r3, [pc, #40]	; (8010194 <vPortSetupTimerInterrupt+0x3c>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a0a      	ldr	r2, [pc, #40]	; (8010198 <vPortSetupTimerInterrupt+0x40>)
 801016e:	fba2 2303 	umull	r2, r3, r2, r3
 8010172:	099b      	lsrs	r3, r3, #6
 8010174:	4a09      	ldr	r2, [pc, #36]	; (801019c <vPortSetupTimerInterrupt+0x44>)
 8010176:	3b01      	subs	r3, #1
 8010178:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801017a:	4b04      	ldr	r3, [pc, #16]	; (801018c <vPortSetupTimerInterrupt+0x34>)
 801017c:	2207      	movs	r2, #7
 801017e:	601a      	str	r2, [r3, #0]
}
 8010180:	bf00      	nop
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	e000e010 	.word	0xe000e010
 8010190:	e000e018 	.word	0xe000e018
 8010194:	20000000 	.word	0x20000000
 8010198:	10624dd3 	.word	0x10624dd3
 801019c:	e000e014 	.word	0xe000e014

080101a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80101a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80101b0 <vPortEnableVFP+0x10>
 80101a4:	6801      	ldr	r1, [r0, #0]
 80101a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80101aa:	6001      	str	r1, [r0, #0]
 80101ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80101ae:	bf00      	nop
 80101b0:	e000ed88 	.word	0xe000ed88

080101b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80101ba:	f3ef 8305 	mrs	r3, IPSR
 80101be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2b0f      	cmp	r3, #15
 80101c4:	d913      	bls.n	80101ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80101c6:	4a16      	ldr	r2, [pc, #88]	; (8010220 <vPortValidateInterruptPriority+0x6c>)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	4413      	add	r3, r2
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80101d0:	4b14      	ldr	r3, [pc, #80]	; (8010224 <vPortValidateInterruptPriority+0x70>)
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	7afa      	ldrb	r2, [r7, #11]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d209      	bcs.n	80101ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	607b      	str	r3, [r7, #4]
 80101ec:	e7fe      	b.n	80101ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80101ee:	4b0e      	ldr	r3, [pc, #56]	; (8010228 <vPortValidateInterruptPriority+0x74>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80101f6:	4b0d      	ldr	r3, [pc, #52]	; (801022c <vPortValidateInterruptPriority+0x78>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d909      	bls.n	8010212 <vPortValidateInterruptPriority+0x5e>
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	603b      	str	r3, [r7, #0]
 8010210:	e7fe      	b.n	8010210 <vPortValidateInterruptPriority+0x5c>
	}
 8010212:	bf00      	nop
 8010214:	3714      	adds	r7, #20
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr
 801021e:	bf00      	nop
 8010220:	e000e3f0 	.word	0xe000e3f0
 8010224:	20001200 	.word	0x20001200
 8010228:	e000ed0c 	.word	0xe000ed0c
 801022c:	20001204 	.word	0x20001204

08010230 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8010238:	f7fe fdc6 	bl	800edc8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f001 fddf 	bl	8011e00 <malloc>
 8010242:	4603      	mov	r3, r0
 8010244:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010246:	f7fe fdcd 	bl	800ede4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801024a:	68fb      	ldr	r3, [r7, #12]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
	if( pv )
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d006      	beq.n	8010270 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8010262:	f7fe fdb1 	bl	800edc8 <vTaskSuspendAll>
		{
			free( pv );
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f001 fdd2 	bl	8011e10 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 801026c:	f7fe fdba 	bl	800ede4 <xTaskResumeAll>
	}
}
 8010270:	bf00      	nop
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <asin>:
 8010278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801027a:	ed2d 8b02 	vpush	{d8}
 801027e:	4e26      	ldr	r6, [pc, #152]	; (8010318 <asin+0xa0>)
 8010280:	b08b      	sub	sp, #44	; 0x2c
 8010282:	ec55 4b10 	vmov	r4, r5, d0
 8010286:	f000 fa1b 	bl	80106c0 <__ieee754_asin>
 801028a:	f996 3000 	ldrsb.w	r3, [r6]
 801028e:	eeb0 8a40 	vmov.f32	s16, s0
 8010292:	eef0 8a60 	vmov.f32	s17, s1
 8010296:	3301      	adds	r3, #1
 8010298:	d036      	beq.n	8010308 <asin+0x90>
 801029a:	4622      	mov	r2, r4
 801029c:	462b      	mov	r3, r5
 801029e:	4620      	mov	r0, r4
 80102a0:	4629      	mov	r1, r5
 80102a2:	f7f0 fc53 	bl	8000b4c <__aeabi_dcmpun>
 80102a6:	4607      	mov	r7, r0
 80102a8:	bb70      	cbnz	r0, 8010308 <asin+0x90>
 80102aa:	ec45 4b10 	vmov	d0, r4, r5
 80102ae:	f001 fc57 	bl	8011b60 <fabs>
 80102b2:	2200      	movs	r2, #0
 80102b4:	4b19      	ldr	r3, [pc, #100]	; (801031c <asin+0xa4>)
 80102b6:	ec51 0b10 	vmov	r0, r1, d0
 80102ba:	f7f0 fc3d 	bl	8000b38 <__aeabi_dcmpgt>
 80102be:	b318      	cbz	r0, 8010308 <asin+0x90>
 80102c0:	2301      	movs	r3, #1
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	4816      	ldr	r0, [pc, #88]	; (8010320 <asin+0xa8>)
 80102c6:	4b17      	ldr	r3, [pc, #92]	; (8010324 <asin+0xac>)
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	9708      	str	r7, [sp, #32]
 80102cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80102d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80102d4:	f001 fc58 	bl	8011b88 <nan>
 80102d8:	f996 3000 	ldrsb.w	r3, [r6]
 80102dc:	2b02      	cmp	r3, #2
 80102de:	ed8d 0b06 	vstr	d0, [sp, #24]
 80102e2:	d104      	bne.n	80102ee <asin+0x76>
 80102e4:	f001 fd62 	bl	8011dac <__errno>
 80102e8:	2321      	movs	r3, #33	; 0x21
 80102ea:	6003      	str	r3, [r0, #0]
 80102ec:	e004      	b.n	80102f8 <asin+0x80>
 80102ee:	4668      	mov	r0, sp
 80102f0:	f001 fc47 	bl	8011b82 <matherr>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d0f5      	beq.n	80102e4 <asin+0x6c>
 80102f8:	9b08      	ldr	r3, [sp, #32]
 80102fa:	b11b      	cbz	r3, 8010304 <asin+0x8c>
 80102fc:	f001 fd56 	bl	8011dac <__errno>
 8010300:	9b08      	ldr	r3, [sp, #32]
 8010302:	6003      	str	r3, [r0, #0]
 8010304:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010308:	eeb0 0a48 	vmov.f32	s0, s16
 801030c:	eef0 0a68 	vmov.f32	s1, s17
 8010310:	b00b      	add	sp, #44	; 0x2c
 8010312:	ecbd 8b02 	vpop	{d8}
 8010316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010318:	2000001c 	.word	0x2000001c
 801031c:	3ff00000 	.word	0x3ff00000
 8010320:	080167b1 	.word	0x080167b1
 8010324:	0801650c 	.word	0x0801650c

08010328 <atan2>:
 8010328:	f000 bbda 	b.w	8010ae0 <__ieee754_atan2>

0801032c <pow>:
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	ed2d 8b04 	vpush	{d8-d9}
 8010334:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010608 <pow+0x2dc>
 8010338:	b08d      	sub	sp, #52	; 0x34
 801033a:	ec57 6b10 	vmov	r6, r7, d0
 801033e:	ec55 4b11 	vmov	r4, r5, d1
 8010342:	f000 fcad 	bl	8010ca0 <__ieee754_pow>
 8010346:	f999 3000 	ldrsb.w	r3, [r9]
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	3301      	adds	r3, #1
 801034e:	eeb0 8a40 	vmov.f32	s16, s0
 8010352:	eef0 8a60 	vmov.f32	s17, s1
 8010356:	46c8      	mov	r8, r9
 8010358:	d05f      	beq.n	801041a <pow+0xee>
 801035a:	4622      	mov	r2, r4
 801035c:	462b      	mov	r3, r5
 801035e:	4620      	mov	r0, r4
 8010360:	4629      	mov	r1, r5
 8010362:	f7f0 fbf3 	bl	8000b4c <__aeabi_dcmpun>
 8010366:	4683      	mov	fp, r0
 8010368:	2800      	cmp	r0, #0
 801036a:	d156      	bne.n	801041a <pow+0xee>
 801036c:	4632      	mov	r2, r6
 801036e:	463b      	mov	r3, r7
 8010370:	4630      	mov	r0, r6
 8010372:	4639      	mov	r1, r7
 8010374:	f7f0 fbea 	bl	8000b4c <__aeabi_dcmpun>
 8010378:	9001      	str	r0, [sp, #4]
 801037a:	b1e8      	cbz	r0, 80103b8 <pow+0x8c>
 801037c:	2200      	movs	r2, #0
 801037e:	2300      	movs	r3, #0
 8010380:	4620      	mov	r0, r4
 8010382:	4629      	mov	r1, r5
 8010384:	f7f0 fbb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8010388:	2800      	cmp	r0, #0
 801038a:	d046      	beq.n	801041a <pow+0xee>
 801038c:	2301      	movs	r3, #1
 801038e:	9302      	str	r3, [sp, #8]
 8010390:	4b96      	ldr	r3, [pc, #600]	; (80105ec <pow+0x2c0>)
 8010392:	9303      	str	r3, [sp, #12]
 8010394:	4b96      	ldr	r3, [pc, #600]	; (80105f0 <pow+0x2c4>)
 8010396:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801039a:	2200      	movs	r2, #0
 801039c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80103a0:	9b00      	ldr	r3, [sp, #0]
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80103a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80103ac:	d033      	beq.n	8010416 <pow+0xea>
 80103ae:	a802      	add	r0, sp, #8
 80103b0:	f001 fbe7 	bl	8011b82 <matherr>
 80103b4:	bb48      	cbnz	r0, 801040a <pow+0xde>
 80103b6:	e05d      	b.n	8010474 <pow+0x148>
 80103b8:	f04f 0a00 	mov.w	sl, #0
 80103bc:	f04f 0b00 	mov.w	fp, #0
 80103c0:	4652      	mov	r2, sl
 80103c2:	465b      	mov	r3, fp
 80103c4:	4630      	mov	r0, r6
 80103c6:	4639      	mov	r1, r7
 80103c8:	f7f0 fb8e 	bl	8000ae8 <__aeabi_dcmpeq>
 80103cc:	ec4b ab19 	vmov	d9, sl, fp
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d054      	beq.n	801047e <pow+0x152>
 80103d4:	4652      	mov	r2, sl
 80103d6:	465b      	mov	r3, fp
 80103d8:	4620      	mov	r0, r4
 80103da:	4629      	mov	r1, r5
 80103dc:	f7f0 fb84 	bl	8000ae8 <__aeabi_dcmpeq>
 80103e0:	4680      	mov	r8, r0
 80103e2:	b318      	cbz	r0, 801042c <pow+0x100>
 80103e4:	2301      	movs	r3, #1
 80103e6:	9302      	str	r3, [sp, #8]
 80103e8:	4b80      	ldr	r3, [pc, #512]	; (80105ec <pow+0x2c0>)
 80103ea:	9303      	str	r3, [sp, #12]
 80103ec:	9b01      	ldr	r3, [sp, #4]
 80103ee:	930a      	str	r3, [sp, #40]	; 0x28
 80103f0:	9b00      	ldr	r3, [sp, #0]
 80103f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80103f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80103fa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d0d5      	beq.n	80103ae <pow+0x82>
 8010402:	4b7b      	ldr	r3, [pc, #492]	; (80105f0 <pow+0x2c4>)
 8010404:	2200      	movs	r2, #0
 8010406:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801040a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801040c:	b11b      	cbz	r3, 8010416 <pow+0xea>
 801040e:	f001 fccd 	bl	8011dac <__errno>
 8010412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010414:	6003      	str	r3, [r0, #0]
 8010416:	ed9d 8b08 	vldr	d8, [sp, #32]
 801041a:	eeb0 0a48 	vmov.f32	s0, s16
 801041e:	eef0 0a68 	vmov.f32	s1, s17
 8010422:	b00d      	add	sp, #52	; 0x34
 8010424:	ecbd 8b04 	vpop	{d8-d9}
 8010428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042c:	ec45 4b10 	vmov	d0, r4, r5
 8010430:	f001 fb9f 	bl	8011b72 <finite>
 8010434:	2800      	cmp	r0, #0
 8010436:	d0f0      	beq.n	801041a <pow+0xee>
 8010438:	4652      	mov	r2, sl
 801043a:	465b      	mov	r3, fp
 801043c:	4620      	mov	r0, r4
 801043e:	4629      	mov	r1, r5
 8010440:	f7f0 fb5c 	bl	8000afc <__aeabi_dcmplt>
 8010444:	2800      	cmp	r0, #0
 8010446:	d0e8      	beq.n	801041a <pow+0xee>
 8010448:	2301      	movs	r3, #1
 801044a:	9302      	str	r3, [sp, #8]
 801044c:	4b67      	ldr	r3, [pc, #412]	; (80105ec <pow+0x2c0>)
 801044e:	9303      	str	r3, [sp, #12]
 8010450:	f999 3000 	ldrsb.w	r3, [r9]
 8010454:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010458:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801045c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010460:	b913      	cbnz	r3, 8010468 <pow+0x13c>
 8010462:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010466:	e7a2      	b.n	80103ae <pow+0x82>
 8010468:	4962      	ldr	r1, [pc, #392]	; (80105f4 <pow+0x2c8>)
 801046a:	2000      	movs	r0, #0
 801046c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010470:	2b02      	cmp	r3, #2
 8010472:	d19c      	bne.n	80103ae <pow+0x82>
 8010474:	f001 fc9a 	bl	8011dac <__errno>
 8010478:	2321      	movs	r3, #33	; 0x21
 801047a:	6003      	str	r3, [r0, #0]
 801047c:	e7c5      	b.n	801040a <pow+0xde>
 801047e:	eeb0 0a48 	vmov.f32	s0, s16
 8010482:	eef0 0a68 	vmov.f32	s1, s17
 8010486:	f001 fb74 	bl	8011b72 <finite>
 801048a:	9000      	str	r0, [sp, #0]
 801048c:	2800      	cmp	r0, #0
 801048e:	f040 8081 	bne.w	8010594 <pow+0x268>
 8010492:	ec47 6b10 	vmov	d0, r6, r7
 8010496:	f001 fb6c 	bl	8011b72 <finite>
 801049a:	2800      	cmp	r0, #0
 801049c:	d07a      	beq.n	8010594 <pow+0x268>
 801049e:	ec45 4b10 	vmov	d0, r4, r5
 80104a2:	f001 fb66 	bl	8011b72 <finite>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d074      	beq.n	8010594 <pow+0x268>
 80104aa:	ec53 2b18 	vmov	r2, r3, d8
 80104ae:	ee18 0a10 	vmov	r0, s16
 80104b2:	4619      	mov	r1, r3
 80104b4:	f7f0 fb4a 	bl	8000b4c <__aeabi_dcmpun>
 80104b8:	f999 9000 	ldrsb.w	r9, [r9]
 80104bc:	4b4b      	ldr	r3, [pc, #300]	; (80105ec <pow+0x2c0>)
 80104be:	b1b0      	cbz	r0, 80104ee <pow+0x1c2>
 80104c0:	2201      	movs	r2, #1
 80104c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	930a      	str	r3, [sp, #40]	; 0x28
 80104ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80104ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80104d2:	f1b9 0f00 	cmp.w	r9, #0
 80104d6:	d0c4      	beq.n	8010462 <pow+0x136>
 80104d8:	4652      	mov	r2, sl
 80104da:	465b      	mov	r3, fp
 80104dc:	4650      	mov	r0, sl
 80104de:	4659      	mov	r1, fp
 80104e0:	f7f0 f9c4 	bl	800086c <__aeabi_ddiv>
 80104e4:	f1b9 0f02 	cmp.w	r9, #2
 80104e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104ec:	e7c1      	b.n	8010472 <pow+0x146>
 80104ee:	2203      	movs	r2, #3
 80104f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104f4:	900a      	str	r0, [sp, #40]	; 0x28
 80104f6:	4629      	mov	r1, r5
 80104f8:	4620      	mov	r0, r4
 80104fa:	2200      	movs	r2, #0
 80104fc:	4b3e      	ldr	r3, [pc, #248]	; (80105f8 <pow+0x2cc>)
 80104fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010502:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010506:	f7f0 f887 	bl	8000618 <__aeabi_dmul>
 801050a:	4604      	mov	r4, r0
 801050c:	460d      	mov	r5, r1
 801050e:	f1b9 0f00 	cmp.w	r9, #0
 8010512:	d124      	bne.n	801055e <pow+0x232>
 8010514:	4b39      	ldr	r3, [pc, #228]	; (80105fc <pow+0x2d0>)
 8010516:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801051a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801051e:	4630      	mov	r0, r6
 8010520:	4652      	mov	r2, sl
 8010522:	465b      	mov	r3, fp
 8010524:	4639      	mov	r1, r7
 8010526:	f7f0 fae9 	bl	8000afc <__aeabi_dcmplt>
 801052a:	2800      	cmp	r0, #0
 801052c:	d056      	beq.n	80105dc <pow+0x2b0>
 801052e:	ec45 4b10 	vmov	d0, r4, r5
 8010532:	f001 fb31 	bl	8011b98 <rint>
 8010536:	4622      	mov	r2, r4
 8010538:	462b      	mov	r3, r5
 801053a:	ec51 0b10 	vmov	r0, r1, d0
 801053e:	f7f0 fad3 	bl	8000ae8 <__aeabi_dcmpeq>
 8010542:	b920      	cbnz	r0, 801054e <pow+0x222>
 8010544:	4b2e      	ldr	r3, [pc, #184]	; (8010600 <pow+0x2d4>)
 8010546:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801054a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801054e:	f998 3000 	ldrsb.w	r3, [r8]
 8010552:	2b02      	cmp	r3, #2
 8010554:	d142      	bne.n	80105dc <pow+0x2b0>
 8010556:	f001 fc29 	bl	8011dac <__errno>
 801055a:	2322      	movs	r3, #34	; 0x22
 801055c:	e78d      	b.n	801047a <pow+0x14e>
 801055e:	4b29      	ldr	r3, [pc, #164]	; (8010604 <pow+0x2d8>)
 8010560:	2200      	movs	r2, #0
 8010562:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010566:	4630      	mov	r0, r6
 8010568:	4652      	mov	r2, sl
 801056a:	465b      	mov	r3, fp
 801056c:	4639      	mov	r1, r7
 801056e:	f7f0 fac5 	bl	8000afc <__aeabi_dcmplt>
 8010572:	2800      	cmp	r0, #0
 8010574:	d0eb      	beq.n	801054e <pow+0x222>
 8010576:	ec45 4b10 	vmov	d0, r4, r5
 801057a:	f001 fb0d 	bl	8011b98 <rint>
 801057e:	4622      	mov	r2, r4
 8010580:	462b      	mov	r3, r5
 8010582:	ec51 0b10 	vmov	r0, r1, d0
 8010586:	f7f0 faaf 	bl	8000ae8 <__aeabi_dcmpeq>
 801058a:	2800      	cmp	r0, #0
 801058c:	d1df      	bne.n	801054e <pow+0x222>
 801058e:	2200      	movs	r2, #0
 8010590:	4b18      	ldr	r3, [pc, #96]	; (80105f4 <pow+0x2c8>)
 8010592:	e7da      	b.n	801054a <pow+0x21e>
 8010594:	2200      	movs	r2, #0
 8010596:	2300      	movs	r3, #0
 8010598:	ec51 0b18 	vmov	r0, r1, d8
 801059c:	f7f0 faa4 	bl	8000ae8 <__aeabi_dcmpeq>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	f43f af3a 	beq.w	801041a <pow+0xee>
 80105a6:	ec47 6b10 	vmov	d0, r6, r7
 80105aa:	f001 fae2 	bl	8011b72 <finite>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	f43f af33 	beq.w	801041a <pow+0xee>
 80105b4:	ec45 4b10 	vmov	d0, r4, r5
 80105b8:	f001 fadb 	bl	8011b72 <finite>
 80105bc:	2800      	cmp	r0, #0
 80105be:	f43f af2c 	beq.w	801041a <pow+0xee>
 80105c2:	2304      	movs	r3, #4
 80105c4:	9302      	str	r3, [sp, #8]
 80105c6:	4b09      	ldr	r3, [pc, #36]	; (80105ec <pow+0x2c0>)
 80105c8:	9303      	str	r3, [sp, #12]
 80105ca:	2300      	movs	r3, #0
 80105cc:	930a      	str	r3, [sp, #40]	; 0x28
 80105ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80105d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80105d6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80105da:	e7b8      	b.n	801054e <pow+0x222>
 80105dc:	a802      	add	r0, sp, #8
 80105de:	f001 fad0 	bl	8011b82 <matherr>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	f47f af11 	bne.w	801040a <pow+0xde>
 80105e8:	e7b5      	b.n	8010556 <pow+0x22a>
 80105ea:	bf00      	nop
 80105ec:	08016511 	.word	0x08016511
 80105f0:	3ff00000 	.word	0x3ff00000
 80105f4:	fff00000 	.word	0xfff00000
 80105f8:	3fe00000 	.word	0x3fe00000
 80105fc:	47efffff 	.word	0x47efffff
 8010600:	c7efffff 	.word	0xc7efffff
 8010604:	7ff00000 	.word	0x7ff00000
 8010608:	2000001c 	.word	0x2000001c

0801060c <sqrt>:
 801060c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010610:	ed2d 8b02 	vpush	{d8}
 8010614:	b08b      	sub	sp, #44	; 0x2c
 8010616:	ec55 4b10 	vmov	r4, r5, d0
 801061a:	f001 f84f 	bl	80116bc <__ieee754_sqrt>
 801061e:	4b26      	ldr	r3, [pc, #152]	; (80106b8 <sqrt+0xac>)
 8010620:	eeb0 8a40 	vmov.f32	s16, s0
 8010624:	eef0 8a60 	vmov.f32	s17, s1
 8010628:	f993 6000 	ldrsb.w	r6, [r3]
 801062c:	1c73      	adds	r3, r6, #1
 801062e:	d02a      	beq.n	8010686 <sqrt+0x7a>
 8010630:	4622      	mov	r2, r4
 8010632:	462b      	mov	r3, r5
 8010634:	4620      	mov	r0, r4
 8010636:	4629      	mov	r1, r5
 8010638:	f7f0 fa88 	bl	8000b4c <__aeabi_dcmpun>
 801063c:	4607      	mov	r7, r0
 801063e:	bb10      	cbnz	r0, 8010686 <sqrt+0x7a>
 8010640:	f04f 0800 	mov.w	r8, #0
 8010644:	f04f 0900 	mov.w	r9, #0
 8010648:	4642      	mov	r2, r8
 801064a:	464b      	mov	r3, r9
 801064c:	4620      	mov	r0, r4
 801064e:	4629      	mov	r1, r5
 8010650:	f7f0 fa54 	bl	8000afc <__aeabi_dcmplt>
 8010654:	b1b8      	cbz	r0, 8010686 <sqrt+0x7a>
 8010656:	2301      	movs	r3, #1
 8010658:	9300      	str	r3, [sp, #0]
 801065a:	4b18      	ldr	r3, [pc, #96]	; (80106bc <sqrt+0xb0>)
 801065c:	9301      	str	r3, [sp, #4]
 801065e:	9708      	str	r7, [sp, #32]
 8010660:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010664:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010668:	b9b6      	cbnz	r6, 8010698 <sqrt+0x8c>
 801066a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801066e:	4668      	mov	r0, sp
 8010670:	f001 fa87 	bl	8011b82 <matherr>
 8010674:	b1d0      	cbz	r0, 80106ac <sqrt+0xa0>
 8010676:	9b08      	ldr	r3, [sp, #32]
 8010678:	b11b      	cbz	r3, 8010682 <sqrt+0x76>
 801067a:	f001 fb97 	bl	8011dac <__errno>
 801067e:	9b08      	ldr	r3, [sp, #32]
 8010680:	6003      	str	r3, [r0, #0]
 8010682:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010686:	eeb0 0a48 	vmov.f32	s0, s16
 801068a:	eef0 0a68 	vmov.f32	s1, s17
 801068e:	b00b      	add	sp, #44	; 0x2c
 8010690:	ecbd 8b02 	vpop	{d8}
 8010694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010698:	4642      	mov	r2, r8
 801069a:	464b      	mov	r3, r9
 801069c:	4640      	mov	r0, r8
 801069e:	4649      	mov	r1, r9
 80106a0:	f7f0 f8e4 	bl	800086c <__aeabi_ddiv>
 80106a4:	2e02      	cmp	r6, #2
 80106a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80106aa:	d1e0      	bne.n	801066e <sqrt+0x62>
 80106ac:	f001 fb7e 	bl	8011dac <__errno>
 80106b0:	2321      	movs	r3, #33	; 0x21
 80106b2:	6003      	str	r3, [r0, #0]
 80106b4:	e7df      	b.n	8010676 <sqrt+0x6a>
 80106b6:	bf00      	nop
 80106b8:	2000001c 	.word	0x2000001c
 80106bc:	08016515 	.word	0x08016515

080106c0 <__ieee754_asin>:
 80106c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c4:	ec55 4b10 	vmov	r4, r5, d0
 80106c8:	4bcb      	ldr	r3, [pc, #812]	; (80109f8 <__ieee754_asin+0x338>)
 80106ca:	b087      	sub	sp, #28
 80106cc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80106d0:	429f      	cmp	r7, r3
 80106d2:	9501      	str	r5, [sp, #4]
 80106d4:	dd31      	ble.n	801073a <__ieee754_asin+0x7a>
 80106d6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80106da:	ee10 3a10 	vmov	r3, s0
 80106de:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80106e2:	433b      	orrs	r3, r7
 80106e4:	d117      	bne.n	8010716 <__ieee754_asin+0x56>
 80106e6:	a3aa      	add	r3, pc, #680	; (adr r3, 8010990 <__ieee754_asin+0x2d0>)
 80106e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ec:	ee10 0a10 	vmov	r0, s0
 80106f0:	4629      	mov	r1, r5
 80106f2:	f7ef ff91 	bl	8000618 <__aeabi_dmul>
 80106f6:	a3a8      	add	r3, pc, #672	; (adr r3, 8010998 <__ieee754_asin+0x2d8>)
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	4606      	mov	r6, r0
 80106fe:	460f      	mov	r7, r1
 8010700:	4620      	mov	r0, r4
 8010702:	4629      	mov	r1, r5
 8010704:	f7ef ff88 	bl	8000618 <__aeabi_dmul>
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	4630      	mov	r0, r6
 801070e:	4639      	mov	r1, r7
 8010710:	f7ef fdcc 	bl	80002ac <__adddf3>
 8010714:	e00a      	b.n	801072c <__ieee754_asin+0x6c>
 8010716:	ee10 2a10 	vmov	r2, s0
 801071a:	462b      	mov	r3, r5
 801071c:	4620      	mov	r0, r4
 801071e:	4629      	mov	r1, r5
 8010720:	f7ef fdc2 	bl	80002a8 <__aeabi_dsub>
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	f7f0 f8a0 	bl	800086c <__aeabi_ddiv>
 801072c:	4604      	mov	r4, r0
 801072e:	460d      	mov	r5, r1
 8010730:	ec45 4b10 	vmov	d0, r4, r5
 8010734:	b007      	add	sp, #28
 8010736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073a:	4bb0      	ldr	r3, [pc, #704]	; (80109fc <__ieee754_asin+0x33c>)
 801073c:	429f      	cmp	r7, r3
 801073e:	dc11      	bgt.n	8010764 <__ieee754_asin+0xa4>
 8010740:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8010744:	f280 80ae 	bge.w	80108a4 <__ieee754_asin+0x1e4>
 8010748:	a395      	add	r3, pc, #596	; (adr r3, 80109a0 <__ieee754_asin+0x2e0>)
 801074a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074e:	ee10 0a10 	vmov	r0, s0
 8010752:	4629      	mov	r1, r5
 8010754:	f7ef fdaa 	bl	80002ac <__adddf3>
 8010758:	2200      	movs	r2, #0
 801075a:	4ba9      	ldr	r3, [pc, #676]	; (8010a00 <__ieee754_asin+0x340>)
 801075c:	f7f0 f9ec 	bl	8000b38 <__aeabi_dcmpgt>
 8010760:	2800      	cmp	r0, #0
 8010762:	d1e5      	bne.n	8010730 <__ieee754_asin+0x70>
 8010764:	ec45 4b10 	vmov	d0, r4, r5
 8010768:	f001 f9fa 	bl	8011b60 <fabs>
 801076c:	2000      	movs	r0, #0
 801076e:	ec53 2b10 	vmov	r2, r3, d0
 8010772:	49a3      	ldr	r1, [pc, #652]	; (8010a00 <__ieee754_asin+0x340>)
 8010774:	f7ef fd98 	bl	80002a8 <__aeabi_dsub>
 8010778:	2200      	movs	r2, #0
 801077a:	4ba2      	ldr	r3, [pc, #648]	; (8010a04 <__ieee754_asin+0x344>)
 801077c:	f7ef ff4c 	bl	8000618 <__aeabi_dmul>
 8010780:	a389      	add	r3, pc, #548	; (adr r3, 80109a8 <__ieee754_asin+0x2e8>)
 8010782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010786:	4604      	mov	r4, r0
 8010788:	460d      	mov	r5, r1
 801078a:	f7ef ff45 	bl	8000618 <__aeabi_dmul>
 801078e:	a388      	add	r3, pc, #544	; (adr r3, 80109b0 <__ieee754_asin+0x2f0>)
 8010790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010794:	f7ef fd8a 	bl	80002ac <__adddf3>
 8010798:	4622      	mov	r2, r4
 801079a:	462b      	mov	r3, r5
 801079c:	f7ef ff3c 	bl	8000618 <__aeabi_dmul>
 80107a0:	a385      	add	r3, pc, #532	; (adr r3, 80109b8 <__ieee754_asin+0x2f8>)
 80107a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a6:	f7ef fd7f 	bl	80002a8 <__aeabi_dsub>
 80107aa:	4622      	mov	r2, r4
 80107ac:	462b      	mov	r3, r5
 80107ae:	f7ef ff33 	bl	8000618 <__aeabi_dmul>
 80107b2:	a383      	add	r3, pc, #524	; (adr r3, 80109c0 <__ieee754_asin+0x300>)
 80107b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b8:	f7ef fd78 	bl	80002ac <__adddf3>
 80107bc:	4622      	mov	r2, r4
 80107be:	462b      	mov	r3, r5
 80107c0:	f7ef ff2a 	bl	8000618 <__aeabi_dmul>
 80107c4:	a380      	add	r3, pc, #512	; (adr r3, 80109c8 <__ieee754_asin+0x308>)
 80107c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ca:	f7ef fd6d 	bl	80002a8 <__aeabi_dsub>
 80107ce:	4622      	mov	r2, r4
 80107d0:	462b      	mov	r3, r5
 80107d2:	f7ef ff21 	bl	8000618 <__aeabi_dmul>
 80107d6:	a37e      	add	r3, pc, #504	; (adr r3, 80109d0 <__ieee754_asin+0x310>)
 80107d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107dc:	f7ef fd66 	bl	80002ac <__adddf3>
 80107e0:	4622      	mov	r2, r4
 80107e2:	462b      	mov	r3, r5
 80107e4:	f7ef ff18 	bl	8000618 <__aeabi_dmul>
 80107e8:	a37b      	add	r3, pc, #492	; (adr r3, 80109d8 <__ieee754_asin+0x318>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	4680      	mov	r8, r0
 80107f0:	4689      	mov	r9, r1
 80107f2:	4620      	mov	r0, r4
 80107f4:	4629      	mov	r1, r5
 80107f6:	f7ef ff0f 	bl	8000618 <__aeabi_dmul>
 80107fa:	a379      	add	r3, pc, #484	; (adr r3, 80109e0 <__ieee754_asin+0x320>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	f7ef fd52 	bl	80002a8 <__aeabi_dsub>
 8010804:	4622      	mov	r2, r4
 8010806:	462b      	mov	r3, r5
 8010808:	f7ef ff06 	bl	8000618 <__aeabi_dmul>
 801080c:	a376      	add	r3, pc, #472	; (adr r3, 80109e8 <__ieee754_asin+0x328>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f7ef fd4b 	bl	80002ac <__adddf3>
 8010816:	4622      	mov	r2, r4
 8010818:	462b      	mov	r3, r5
 801081a:	f7ef fefd 	bl	8000618 <__aeabi_dmul>
 801081e:	a374      	add	r3, pc, #464	; (adr r3, 80109f0 <__ieee754_asin+0x330>)
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	f7ef fd40 	bl	80002a8 <__aeabi_dsub>
 8010828:	4622      	mov	r2, r4
 801082a:	462b      	mov	r3, r5
 801082c:	f7ef fef4 	bl	8000618 <__aeabi_dmul>
 8010830:	4b73      	ldr	r3, [pc, #460]	; (8010a00 <__ieee754_asin+0x340>)
 8010832:	2200      	movs	r2, #0
 8010834:	f7ef fd3a 	bl	80002ac <__adddf3>
 8010838:	ec45 4b10 	vmov	d0, r4, r5
 801083c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010840:	f000 ff3c 	bl	80116bc <__ieee754_sqrt>
 8010844:	4b70      	ldr	r3, [pc, #448]	; (8010a08 <__ieee754_asin+0x348>)
 8010846:	429f      	cmp	r7, r3
 8010848:	ec5b ab10 	vmov	sl, fp, d0
 801084c:	f340 80de 	ble.w	8010a0c <__ieee754_asin+0x34c>
 8010850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010854:	4640      	mov	r0, r8
 8010856:	4649      	mov	r1, r9
 8010858:	f7f0 f808 	bl	800086c <__aeabi_ddiv>
 801085c:	4652      	mov	r2, sl
 801085e:	465b      	mov	r3, fp
 8010860:	f7ef feda 	bl	8000618 <__aeabi_dmul>
 8010864:	4652      	mov	r2, sl
 8010866:	465b      	mov	r3, fp
 8010868:	f7ef fd20 	bl	80002ac <__adddf3>
 801086c:	4602      	mov	r2, r0
 801086e:	460b      	mov	r3, r1
 8010870:	f7ef fd1c 	bl	80002ac <__adddf3>
 8010874:	a348      	add	r3, pc, #288	; (adr r3, 8010998 <__ieee754_asin+0x2d8>)
 8010876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087a:	f7ef fd15 	bl	80002a8 <__aeabi_dsub>
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	a143      	add	r1, pc, #268	; (adr r1, 8010990 <__ieee754_asin+0x2d0>)
 8010884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010888:	f7ef fd0e 	bl	80002a8 <__aeabi_dsub>
 801088c:	9b01      	ldr	r3, [sp, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	bfdc      	itt	le
 8010892:	4602      	movle	r2, r0
 8010894:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8010898:	4604      	mov	r4, r0
 801089a:	460d      	mov	r5, r1
 801089c:	bfdc      	itt	le
 801089e:	4614      	movle	r4, r2
 80108a0:	461d      	movle	r5, r3
 80108a2:	e745      	b.n	8010730 <__ieee754_asin+0x70>
 80108a4:	ee10 2a10 	vmov	r2, s0
 80108a8:	ee10 0a10 	vmov	r0, s0
 80108ac:	462b      	mov	r3, r5
 80108ae:	4629      	mov	r1, r5
 80108b0:	f7ef feb2 	bl	8000618 <__aeabi_dmul>
 80108b4:	a33c      	add	r3, pc, #240	; (adr r3, 80109a8 <__ieee754_asin+0x2e8>)
 80108b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ba:	4606      	mov	r6, r0
 80108bc:	460f      	mov	r7, r1
 80108be:	f7ef feab 	bl	8000618 <__aeabi_dmul>
 80108c2:	a33b      	add	r3, pc, #236	; (adr r3, 80109b0 <__ieee754_asin+0x2f0>)
 80108c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c8:	f7ef fcf0 	bl	80002ac <__adddf3>
 80108cc:	4632      	mov	r2, r6
 80108ce:	463b      	mov	r3, r7
 80108d0:	f7ef fea2 	bl	8000618 <__aeabi_dmul>
 80108d4:	a338      	add	r3, pc, #224	; (adr r3, 80109b8 <__ieee754_asin+0x2f8>)
 80108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108da:	f7ef fce5 	bl	80002a8 <__aeabi_dsub>
 80108de:	4632      	mov	r2, r6
 80108e0:	463b      	mov	r3, r7
 80108e2:	f7ef fe99 	bl	8000618 <__aeabi_dmul>
 80108e6:	a336      	add	r3, pc, #216	; (adr r3, 80109c0 <__ieee754_asin+0x300>)
 80108e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ec:	f7ef fcde 	bl	80002ac <__adddf3>
 80108f0:	4632      	mov	r2, r6
 80108f2:	463b      	mov	r3, r7
 80108f4:	f7ef fe90 	bl	8000618 <__aeabi_dmul>
 80108f8:	a333      	add	r3, pc, #204	; (adr r3, 80109c8 <__ieee754_asin+0x308>)
 80108fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fe:	f7ef fcd3 	bl	80002a8 <__aeabi_dsub>
 8010902:	4632      	mov	r2, r6
 8010904:	463b      	mov	r3, r7
 8010906:	f7ef fe87 	bl	8000618 <__aeabi_dmul>
 801090a:	a331      	add	r3, pc, #196	; (adr r3, 80109d0 <__ieee754_asin+0x310>)
 801090c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010910:	f7ef fccc 	bl	80002ac <__adddf3>
 8010914:	4632      	mov	r2, r6
 8010916:	463b      	mov	r3, r7
 8010918:	f7ef fe7e 	bl	8000618 <__aeabi_dmul>
 801091c:	a32e      	add	r3, pc, #184	; (adr r3, 80109d8 <__ieee754_asin+0x318>)
 801091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010922:	4680      	mov	r8, r0
 8010924:	4689      	mov	r9, r1
 8010926:	4630      	mov	r0, r6
 8010928:	4639      	mov	r1, r7
 801092a:	f7ef fe75 	bl	8000618 <__aeabi_dmul>
 801092e:	a32c      	add	r3, pc, #176	; (adr r3, 80109e0 <__ieee754_asin+0x320>)
 8010930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010934:	f7ef fcb8 	bl	80002a8 <__aeabi_dsub>
 8010938:	4632      	mov	r2, r6
 801093a:	463b      	mov	r3, r7
 801093c:	f7ef fe6c 	bl	8000618 <__aeabi_dmul>
 8010940:	a329      	add	r3, pc, #164	; (adr r3, 80109e8 <__ieee754_asin+0x328>)
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	f7ef fcb1 	bl	80002ac <__adddf3>
 801094a:	4632      	mov	r2, r6
 801094c:	463b      	mov	r3, r7
 801094e:	f7ef fe63 	bl	8000618 <__aeabi_dmul>
 8010952:	a327      	add	r3, pc, #156	; (adr r3, 80109f0 <__ieee754_asin+0x330>)
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	f7ef fca6 	bl	80002a8 <__aeabi_dsub>
 801095c:	4632      	mov	r2, r6
 801095e:	463b      	mov	r3, r7
 8010960:	f7ef fe5a 	bl	8000618 <__aeabi_dmul>
 8010964:	2200      	movs	r2, #0
 8010966:	4b26      	ldr	r3, [pc, #152]	; (8010a00 <__ieee754_asin+0x340>)
 8010968:	f7ef fca0 	bl	80002ac <__adddf3>
 801096c:	4602      	mov	r2, r0
 801096e:	460b      	mov	r3, r1
 8010970:	4640      	mov	r0, r8
 8010972:	4649      	mov	r1, r9
 8010974:	f7ef ff7a 	bl	800086c <__aeabi_ddiv>
 8010978:	4622      	mov	r2, r4
 801097a:	462b      	mov	r3, r5
 801097c:	f7ef fe4c 	bl	8000618 <__aeabi_dmul>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	4620      	mov	r0, r4
 8010986:	4629      	mov	r1, r5
 8010988:	e6c2      	b.n	8010710 <__ieee754_asin+0x50>
 801098a:	bf00      	nop
 801098c:	f3af 8000 	nop.w
 8010990:	54442d18 	.word	0x54442d18
 8010994:	3ff921fb 	.word	0x3ff921fb
 8010998:	33145c07 	.word	0x33145c07
 801099c:	3c91a626 	.word	0x3c91a626
 80109a0:	8800759c 	.word	0x8800759c
 80109a4:	7e37e43c 	.word	0x7e37e43c
 80109a8:	0dfdf709 	.word	0x0dfdf709
 80109ac:	3f023de1 	.word	0x3f023de1
 80109b0:	7501b288 	.word	0x7501b288
 80109b4:	3f49efe0 	.word	0x3f49efe0
 80109b8:	b5688f3b 	.word	0xb5688f3b
 80109bc:	3fa48228 	.word	0x3fa48228
 80109c0:	0e884455 	.word	0x0e884455
 80109c4:	3fc9c155 	.word	0x3fc9c155
 80109c8:	03eb6f7d 	.word	0x03eb6f7d
 80109cc:	3fd4d612 	.word	0x3fd4d612
 80109d0:	55555555 	.word	0x55555555
 80109d4:	3fc55555 	.word	0x3fc55555
 80109d8:	b12e9282 	.word	0xb12e9282
 80109dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80109e0:	1b8d0159 	.word	0x1b8d0159
 80109e4:	3fe6066c 	.word	0x3fe6066c
 80109e8:	9c598ac8 	.word	0x9c598ac8
 80109ec:	40002ae5 	.word	0x40002ae5
 80109f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80109f4:	40033a27 	.word	0x40033a27
 80109f8:	3fefffff 	.word	0x3fefffff
 80109fc:	3fdfffff 	.word	0x3fdfffff
 8010a00:	3ff00000 	.word	0x3ff00000
 8010a04:	3fe00000 	.word	0x3fe00000
 8010a08:	3fef3332 	.word	0x3fef3332
 8010a0c:	ee10 2a10 	vmov	r2, s0
 8010a10:	ee10 0a10 	vmov	r0, s0
 8010a14:	465b      	mov	r3, fp
 8010a16:	4659      	mov	r1, fp
 8010a18:	f7ef fc48 	bl	80002ac <__adddf3>
 8010a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a24:	4640      	mov	r0, r8
 8010a26:	4649      	mov	r1, r9
 8010a28:	f7ef ff20 	bl	800086c <__aeabi_ddiv>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a34:	f7ef fdf0 	bl	8000618 <__aeabi_dmul>
 8010a38:	2600      	movs	r6, #0
 8010a3a:	4680      	mov	r8, r0
 8010a3c:	4689      	mov	r9, r1
 8010a3e:	4632      	mov	r2, r6
 8010a40:	465b      	mov	r3, fp
 8010a42:	4630      	mov	r0, r6
 8010a44:	4659      	mov	r1, fp
 8010a46:	f7ef fde7 	bl	8000618 <__aeabi_dmul>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	4620      	mov	r0, r4
 8010a50:	4629      	mov	r1, r5
 8010a52:	f7ef fc29 	bl	80002a8 <__aeabi_dsub>
 8010a56:	4632      	mov	r2, r6
 8010a58:	4604      	mov	r4, r0
 8010a5a:	460d      	mov	r5, r1
 8010a5c:	465b      	mov	r3, fp
 8010a5e:	4650      	mov	r0, sl
 8010a60:	4659      	mov	r1, fp
 8010a62:	f7ef fc23 	bl	80002ac <__adddf3>
 8010a66:	4602      	mov	r2, r0
 8010a68:	460b      	mov	r3, r1
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	f7ef fefd 	bl	800086c <__aeabi_ddiv>
 8010a72:	4602      	mov	r2, r0
 8010a74:	460b      	mov	r3, r1
 8010a76:	f7ef fc19 	bl	80002ac <__adddf3>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	a114      	add	r1, pc, #80	; (adr r1, 8010ad0 <__ieee754_asin+0x410>)
 8010a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a84:	f7ef fc10 	bl	80002a8 <__aeabi_dsub>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	4640      	mov	r0, r8
 8010a8e:	4649      	mov	r1, r9
 8010a90:	f7ef fc0a 	bl	80002a8 <__aeabi_dsub>
 8010a94:	465f      	mov	r7, fp
 8010a96:	4604      	mov	r4, r0
 8010a98:	460d      	mov	r5, r1
 8010a9a:	4632      	mov	r2, r6
 8010a9c:	465b      	mov	r3, fp
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7ef fc03 	bl	80002ac <__adddf3>
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	a10b      	add	r1, pc, #44	; (adr r1, 8010ad8 <__ieee754_asin+0x418>)
 8010aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ab0:	f7ef fbfa 	bl	80002a8 <__aeabi_dsub>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	4620      	mov	r0, r4
 8010aba:	4629      	mov	r1, r5
 8010abc:	f7ef fbf4 	bl	80002a8 <__aeabi_dsub>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	a104      	add	r1, pc, #16	; (adr r1, 8010ad8 <__ieee754_asin+0x418>)
 8010ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aca:	e6dd      	b.n	8010888 <__ieee754_asin+0x1c8>
 8010acc:	f3af 8000 	nop.w
 8010ad0:	33145c07 	.word	0x33145c07
 8010ad4:	3c91a626 	.word	0x3c91a626
 8010ad8:	54442d18 	.word	0x54442d18
 8010adc:	3fe921fb 	.word	0x3fe921fb

08010ae0 <__ieee754_atan2>:
 8010ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae4:	ec57 6b11 	vmov	r6, r7, d1
 8010ae8:	4273      	negs	r3, r6
 8010aea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010aee:	4333      	orrs	r3, r6
 8010af0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8010c98 <__ieee754_atan2+0x1b8>
 8010af4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010af8:	4573      	cmp	r3, lr
 8010afa:	ec51 0b10 	vmov	r0, r1, d0
 8010afe:	ee11 8a10 	vmov	r8, s2
 8010b02:	d80a      	bhi.n	8010b1a <__ieee754_atan2+0x3a>
 8010b04:	4244      	negs	r4, r0
 8010b06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b0a:	4304      	orrs	r4, r0
 8010b0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010b10:	4574      	cmp	r4, lr
 8010b12:	468c      	mov	ip, r1
 8010b14:	ee10 9a10 	vmov	r9, s0
 8010b18:	d907      	bls.n	8010b2a <__ieee754_atan2+0x4a>
 8010b1a:	4632      	mov	r2, r6
 8010b1c:	463b      	mov	r3, r7
 8010b1e:	f7ef fbc5 	bl	80002ac <__adddf3>
 8010b22:	ec41 0b10 	vmov	d0, r0, r1
 8010b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010b2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b32:	4334      	orrs	r4, r6
 8010b34:	d103      	bne.n	8010b3e <__ieee754_atan2+0x5e>
 8010b36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b3a:	f000 be71 	b.w	8011820 <atan>
 8010b3e:	17bc      	asrs	r4, r7, #30
 8010b40:	f004 0402 	and.w	r4, r4, #2
 8010b44:	ea53 0909 	orrs.w	r9, r3, r9
 8010b48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010b4c:	d107      	bne.n	8010b5e <__ieee754_atan2+0x7e>
 8010b4e:	2c02      	cmp	r4, #2
 8010b50:	d073      	beq.n	8010c3a <__ieee754_atan2+0x15a>
 8010b52:	2c03      	cmp	r4, #3
 8010b54:	d1e5      	bne.n	8010b22 <__ieee754_atan2+0x42>
 8010b56:	a13e      	add	r1, pc, #248	; (adr r1, 8010c50 <__ieee754_atan2+0x170>)
 8010b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b5c:	e7e1      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010b5e:	ea52 0808 	orrs.w	r8, r2, r8
 8010b62:	d106      	bne.n	8010b72 <__ieee754_atan2+0x92>
 8010b64:	f1bc 0f00 	cmp.w	ip, #0
 8010b68:	da6b      	bge.n	8010c42 <__ieee754_atan2+0x162>
 8010b6a:	a13b      	add	r1, pc, #236	; (adr r1, 8010c58 <__ieee754_atan2+0x178>)
 8010b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b70:	e7d7      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010b72:	4572      	cmp	r2, lr
 8010b74:	d120      	bne.n	8010bb8 <__ieee754_atan2+0xd8>
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d111      	bne.n	8010b9e <__ieee754_atan2+0xbe>
 8010b7a:	2c02      	cmp	r4, #2
 8010b7c:	d007      	beq.n	8010b8e <__ieee754_atan2+0xae>
 8010b7e:	2c03      	cmp	r4, #3
 8010b80:	d009      	beq.n	8010b96 <__ieee754_atan2+0xb6>
 8010b82:	2c01      	cmp	r4, #1
 8010b84:	d155      	bne.n	8010c32 <__ieee754_atan2+0x152>
 8010b86:	a136      	add	r1, pc, #216	; (adr r1, 8010c60 <__ieee754_atan2+0x180>)
 8010b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b8c:	e7c9      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010b8e:	a136      	add	r1, pc, #216	; (adr r1, 8010c68 <__ieee754_atan2+0x188>)
 8010b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b94:	e7c5      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010b96:	a136      	add	r1, pc, #216	; (adr r1, 8010c70 <__ieee754_atan2+0x190>)
 8010b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b9c:	e7c1      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010b9e:	2c02      	cmp	r4, #2
 8010ba0:	d04b      	beq.n	8010c3a <__ieee754_atan2+0x15a>
 8010ba2:	2c03      	cmp	r4, #3
 8010ba4:	d0d7      	beq.n	8010b56 <__ieee754_atan2+0x76>
 8010ba6:	2c01      	cmp	r4, #1
 8010ba8:	f04f 0000 	mov.w	r0, #0
 8010bac:	d102      	bne.n	8010bb4 <__ieee754_atan2+0xd4>
 8010bae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010bb2:	e7b6      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010bb4:	2100      	movs	r1, #0
 8010bb6:	e7b4      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010bb8:	4573      	cmp	r3, lr
 8010bba:	d0d3      	beq.n	8010b64 <__ieee754_atan2+0x84>
 8010bbc:	1a9b      	subs	r3, r3, r2
 8010bbe:	151b      	asrs	r3, r3, #20
 8010bc0:	2b3c      	cmp	r3, #60	; 0x3c
 8010bc2:	dc1e      	bgt.n	8010c02 <__ieee754_atan2+0x122>
 8010bc4:	2f00      	cmp	r7, #0
 8010bc6:	da01      	bge.n	8010bcc <__ieee754_atan2+0xec>
 8010bc8:	333c      	adds	r3, #60	; 0x3c
 8010bca:	db1e      	blt.n	8010c0a <__ieee754_atan2+0x12a>
 8010bcc:	4632      	mov	r2, r6
 8010bce:	463b      	mov	r3, r7
 8010bd0:	f7ef fe4c 	bl	800086c <__aeabi_ddiv>
 8010bd4:	ec41 0b10 	vmov	d0, r0, r1
 8010bd8:	f000 ffc2 	bl	8011b60 <fabs>
 8010bdc:	f000 fe20 	bl	8011820 <atan>
 8010be0:	ec51 0b10 	vmov	r0, r1, d0
 8010be4:	2c01      	cmp	r4, #1
 8010be6:	d013      	beq.n	8010c10 <__ieee754_atan2+0x130>
 8010be8:	2c02      	cmp	r4, #2
 8010bea:	d015      	beq.n	8010c18 <__ieee754_atan2+0x138>
 8010bec:	2c00      	cmp	r4, #0
 8010bee:	d098      	beq.n	8010b22 <__ieee754_atan2+0x42>
 8010bf0:	a321      	add	r3, pc, #132	; (adr r3, 8010c78 <__ieee754_atan2+0x198>)
 8010bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf6:	f7ef fb57 	bl	80002a8 <__aeabi_dsub>
 8010bfa:	a321      	add	r3, pc, #132	; (adr r3, 8010c80 <__ieee754_atan2+0x1a0>)
 8010bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c00:	e014      	b.n	8010c2c <__ieee754_atan2+0x14c>
 8010c02:	a121      	add	r1, pc, #132	; (adr r1, 8010c88 <__ieee754_atan2+0x1a8>)
 8010c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c08:	e7ec      	b.n	8010be4 <__ieee754_atan2+0x104>
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	e7e9      	b.n	8010be4 <__ieee754_atan2+0x104>
 8010c10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c14:	4619      	mov	r1, r3
 8010c16:	e784      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010c18:	a317      	add	r3, pc, #92	; (adr r3, 8010c78 <__ieee754_atan2+0x198>)
 8010c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1e:	f7ef fb43 	bl	80002a8 <__aeabi_dsub>
 8010c22:	4602      	mov	r2, r0
 8010c24:	460b      	mov	r3, r1
 8010c26:	a116      	add	r1, pc, #88	; (adr r1, 8010c80 <__ieee754_atan2+0x1a0>)
 8010c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c2c:	f7ef fb3c 	bl	80002a8 <__aeabi_dsub>
 8010c30:	e777      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010c32:	a117      	add	r1, pc, #92	; (adr r1, 8010c90 <__ieee754_atan2+0x1b0>)
 8010c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c38:	e773      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010c3a:	a111      	add	r1, pc, #68	; (adr r1, 8010c80 <__ieee754_atan2+0x1a0>)
 8010c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c40:	e76f      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010c42:	a111      	add	r1, pc, #68	; (adr r1, 8010c88 <__ieee754_atan2+0x1a8>)
 8010c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c48:	e76b      	b.n	8010b22 <__ieee754_atan2+0x42>
 8010c4a:	bf00      	nop
 8010c4c:	f3af 8000 	nop.w
 8010c50:	54442d18 	.word	0x54442d18
 8010c54:	c00921fb 	.word	0xc00921fb
 8010c58:	54442d18 	.word	0x54442d18
 8010c5c:	bff921fb 	.word	0xbff921fb
 8010c60:	54442d18 	.word	0x54442d18
 8010c64:	bfe921fb 	.word	0xbfe921fb
 8010c68:	7f3321d2 	.word	0x7f3321d2
 8010c6c:	4002d97c 	.word	0x4002d97c
 8010c70:	7f3321d2 	.word	0x7f3321d2
 8010c74:	c002d97c 	.word	0xc002d97c
 8010c78:	33145c07 	.word	0x33145c07
 8010c7c:	3ca1a626 	.word	0x3ca1a626
 8010c80:	54442d18 	.word	0x54442d18
 8010c84:	400921fb 	.word	0x400921fb
 8010c88:	54442d18 	.word	0x54442d18
 8010c8c:	3ff921fb 	.word	0x3ff921fb
 8010c90:	54442d18 	.word	0x54442d18
 8010c94:	3fe921fb 	.word	0x3fe921fb
 8010c98:	7ff00000 	.word	0x7ff00000
 8010c9c:	00000000 	.word	0x00000000

08010ca0 <__ieee754_pow>:
 8010ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca4:	b091      	sub	sp, #68	; 0x44
 8010ca6:	ed8d 1b00 	vstr	d1, [sp]
 8010caa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010cae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010cb2:	ea58 0302 	orrs.w	r3, r8, r2
 8010cb6:	ec57 6b10 	vmov	r6, r7, d0
 8010cba:	f000 84be 	beq.w	801163a <__ieee754_pow+0x99a>
 8010cbe:	4b7a      	ldr	r3, [pc, #488]	; (8010ea8 <__ieee754_pow+0x208>)
 8010cc0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010cc4:	429c      	cmp	r4, r3
 8010cc6:	463d      	mov	r5, r7
 8010cc8:	ee10 aa10 	vmov	sl, s0
 8010ccc:	dc09      	bgt.n	8010ce2 <__ieee754_pow+0x42>
 8010cce:	d103      	bne.n	8010cd8 <__ieee754_pow+0x38>
 8010cd0:	b93e      	cbnz	r6, 8010ce2 <__ieee754_pow+0x42>
 8010cd2:	45a0      	cmp	r8, r4
 8010cd4:	dc0d      	bgt.n	8010cf2 <__ieee754_pow+0x52>
 8010cd6:	e001      	b.n	8010cdc <__ieee754_pow+0x3c>
 8010cd8:	4598      	cmp	r8, r3
 8010cda:	dc02      	bgt.n	8010ce2 <__ieee754_pow+0x42>
 8010cdc:	4598      	cmp	r8, r3
 8010cde:	d10e      	bne.n	8010cfe <__ieee754_pow+0x5e>
 8010ce0:	b16a      	cbz	r2, 8010cfe <__ieee754_pow+0x5e>
 8010ce2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010ce6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010cea:	ea54 030a 	orrs.w	r3, r4, sl
 8010cee:	f000 84a4 	beq.w	801163a <__ieee754_pow+0x99a>
 8010cf2:	486e      	ldr	r0, [pc, #440]	; (8010eac <__ieee754_pow+0x20c>)
 8010cf4:	b011      	add	sp, #68	; 0x44
 8010cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cfa:	f000 bf45 	b.w	8011b88 <nan>
 8010cfe:	2d00      	cmp	r5, #0
 8010d00:	da53      	bge.n	8010daa <__ieee754_pow+0x10a>
 8010d02:	4b6b      	ldr	r3, [pc, #428]	; (8010eb0 <__ieee754_pow+0x210>)
 8010d04:	4598      	cmp	r8, r3
 8010d06:	dc4d      	bgt.n	8010da4 <__ieee754_pow+0x104>
 8010d08:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010d0c:	4598      	cmp	r8, r3
 8010d0e:	dd4c      	ble.n	8010daa <__ieee754_pow+0x10a>
 8010d10:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010d14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d18:	2b14      	cmp	r3, #20
 8010d1a:	dd26      	ble.n	8010d6a <__ieee754_pow+0xca>
 8010d1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010d20:	fa22 f103 	lsr.w	r1, r2, r3
 8010d24:	fa01 f303 	lsl.w	r3, r1, r3
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d13e      	bne.n	8010daa <__ieee754_pow+0x10a>
 8010d2c:	f001 0101 	and.w	r1, r1, #1
 8010d30:	f1c1 0b02 	rsb	fp, r1, #2
 8010d34:	2a00      	cmp	r2, #0
 8010d36:	d15b      	bne.n	8010df0 <__ieee754_pow+0x150>
 8010d38:	4b5b      	ldr	r3, [pc, #364]	; (8010ea8 <__ieee754_pow+0x208>)
 8010d3a:	4598      	cmp	r8, r3
 8010d3c:	d124      	bne.n	8010d88 <__ieee754_pow+0xe8>
 8010d3e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010d42:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010d46:	ea53 030a 	orrs.w	r3, r3, sl
 8010d4a:	f000 8476 	beq.w	801163a <__ieee754_pow+0x99a>
 8010d4e:	4b59      	ldr	r3, [pc, #356]	; (8010eb4 <__ieee754_pow+0x214>)
 8010d50:	429c      	cmp	r4, r3
 8010d52:	dd2d      	ble.n	8010db0 <__ieee754_pow+0x110>
 8010d54:	f1b9 0f00 	cmp.w	r9, #0
 8010d58:	f280 8473 	bge.w	8011642 <__ieee754_pow+0x9a2>
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	2100      	movs	r1, #0
 8010d60:	ec41 0b10 	vmov	d0, r0, r1
 8010d64:	b011      	add	sp, #68	; 0x44
 8010d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6a:	2a00      	cmp	r2, #0
 8010d6c:	d13e      	bne.n	8010dec <__ieee754_pow+0x14c>
 8010d6e:	f1c3 0314 	rsb	r3, r3, #20
 8010d72:	fa48 f103 	asr.w	r1, r8, r3
 8010d76:	fa01 f303 	lsl.w	r3, r1, r3
 8010d7a:	4543      	cmp	r3, r8
 8010d7c:	f040 8469 	bne.w	8011652 <__ieee754_pow+0x9b2>
 8010d80:	f001 0101 	and.w	r1, r1, #1
 8010d84:	f1c1 0b02 	rsb	fp, r1, #2
 8010d88:	4b4b      	ldr	r3, [pc, #300]	; (8010eb8 <__ieee754_pow+0x218>)
 8010d8a:	4598      	cmp	r8, r3
 8010d8c:	d118      	bne.n	8010dc0 <__ieee754_pow+0x120>
 8010d8e:	f1b9 0f00 	cmp.w	r9, #0
 8010d92:	f280 845a 	bge.w	801164a <__ieee754_pow+0x9aa>
 8010d96:	4948      	ldr	r1, [pc, #288]	; (8010eb8 <__ieee754_pow+0x218>)
 8010d98:	4632      	mov	r2, r6
 8010d9a:	463b      	mov	r3, r7
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	f7ef fd65 	bl	800086c <__aeabi_ddiv>
 8010da2:	e7dd      	b.n	8010d60 <__ieee754_pow+0xc0>
 8010da4:	f04f 0b02 	mov.w	fp, #2
 8010da8:	e7c4      	b.n	8010d34 <__ieee754_pow+0x94>
 8010daa:	f04f 0b00 	mov.w	fp, #0
 8010dae:	e7c1      	b.n	8010d34 <__ieee754_pow+0x94>
 8010db0:	f1b9 0f00 	cmp.w	r9, #0
 8010db4:	dad2      	bge.n	8010d5c <__ieee754_pow+0xbc>
 8010db6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010dba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010dbe:	e7cf      	b.n	8010d60 <__ieee754_pow+0xc0>
 8010dc0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010dc4:	d106      	bne.n	8010dd4 <__ieee754_pow+0x134>
 8010dc6:	4632      	mov	r2, r6
 8010dc8:	463b      	mov	r3, r7
 8010dca:	4610      	mov	r0, r2
 8010dcc:	4619      	mov	r1, r3
 8010dce:	f7ef fc23 	bl	8000618 <__aeabi_dmul>
 8010dd2:	e7c5      	b.n	8010d60 <__ieee754_pow+0xc0>
 8010dd4:	4b39      	ldr	r3, [pc, #228]	; (8010ebc <__ieee754_pow+0x21c>)
 8010dd6:	4599      	cmp	r9, r3
 8010dd8:	d10a      	bne.n	8010df0 <__ieee754_pow+0x150>
 8010dda:	2d00      	cmp	r5, #0
 8010ddc:	db08      	blt.n	8010df0 <__ieee754_pow+0x150>
 8010dde:	ec47 6b10 	vmov	d0, r6, r7
 8010de2:	b011      	add	sp, #68	; 0x44
 8010de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	f000 bc68 	b.w	80116bc <__ieee754_sqrt>
 8010dec:	f04f 0b00 	mov.w	fp, #0
 8010df0:	ec47 6b10 	vmov	d0, r6, r7
 8010df4:	f000 feb4 	bl	8011b60 <fabs>
 8010df8:	ec51 0b10 	vmov	r0, r1, d0
 8010dfc:	f1ba 0f00 	cmp.w	sl, #0
 8010e00:	d127      	bne.n	8010e52 <__ieee754_pow+0x1b2>
 8010e02:	b124      	cbz	r4, 8010e0e <__ieee754_pow+0x16e>
 8010e04:	4b2c      	ldr	r3, [pc, #176]	; (8010eb8 <__ieee754_pow+0x218>)
 8010e06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d121      	bne.n	8010e52 <__ieee754_pow+0x1b2>
 8010e0e:	f1b9 0f00 	cmp.w	r9, #0
 8010e12:	da05      	bge.n	8010e20 <__ieee754_pow+0x180>
 8010e14:	4602      	mov	r2, r0
 8010e16:	460b      	mov	r3, r1
 8010e18:	2000      	movs	r0, #0
 8010e1a:	4927      	ldr	r1, [pc, #156]	; (8010eb8 <__ieee754_pow+0x218>)
 8010e1c:	f7ef fd26 	bl	800086c <__aeabi_ddiv>
 8010e20:	2d00      	cmp	r5, #0
 8010e22:	da9d      	bge.n	8010d60 <__ieee754_pow+0xc0>
 8010e24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010e28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010e2c:	ea54 030b 	orrs.w	r3, r4, fp
 8010e30:	d108      	bne.n	8010e44 <__ieee754_pow+0x1a4>
 8010e32:	4602      	mov	r2, r0
 8010e34:	460b      	mov	r3, r1
 8010e36:	4610      	mov	r0, r2
 8010e38:	4619      	mov	r1, r3
 8010e3a:	f7ef fa35 	bl	80002a8 <__aeabi_dsub>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	e7ac      	b.n	8010d9e <__ieee754_pow+0xfe>
 8010e44:	f1bb 0f01 	cmp.w	fp, #1
 8010e48:	d18a      	bne.n	8010d60 <__ieee754_pow+0xc0>
 8010e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e4e:	4619      	mov	r1, r3
 8010e50:	e786      	b.n	8010d60 <__ieee754_pow+0xc0>
 8010e52:	0fed      	lsrs	r5, r5, #31
 8010e54:	1e6b      	subs	r3, r5, #1
 8010e56:	930d      	str	r3, [sp, #52]	; 0x34
 8010e58:	ea5b 0303 	orrs.w	r3, fp, r3
 8010e5c:	d102      	bne.n	8010e64 <__ieee754_pow+0x1c4>
 8010e5e:	4632      	mov	r2, r6
 8010e60:	463b      	mov	r3, r7
 8010e62:	e7e8      	b.n	8010e36 <__ieee754_pow+0x196>
 8010e64:	4b16      	ldr	r3, [pc, #88]	; (8010ec0 <__ieee754_pow+0x220>)
 8010e66:	4598      	cmp	r8, r3
 8010e68:	f340 80fe 	ble.w	8011068 <__ieee754_pow+0x3c8>
 8010e6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010e70:	4598      	cmp	r8, r3
 8010e72:	dd0a      	ble.n	8010e8a <__ieee754_pow+0x1ea>
 8010e74:	4b0f      	ldr	r3, [pc, #60]	; (8010eb4 <__ieee754_pow+0x214>)
 8010e76:	429c      	cmp	r4, r3
 8010e78:	dc0d      	bgt.n	8010e96 <__ieee754_pow+0x1f6>
 8010e7a:	f1b9 0f00 	cmp.w	r9, #0
 8010e7e:	f6bf af6d 	bge.w	8010d5c <__ieee754_pow+0xbc>
 8010e82:	a307      	add	r3, pc, #28	; (adr r3, 8010ea0 <__ieee754_pow+0x200>)
 8010e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e88:	e79f      	b.n	8010dca <__ieee754_pow+0x12a>
 8010e8a:	4b0e      	ldr	r3, [pc, #56]	; (8010ec4 <__ieee754_pow+0x224>)
 8010e8c:	429c      	cmp	r4, r3
 8010e8e:	ddf4      	ble.n	8010e7a <__ieee754_pow+0x1da>
 8010e90:	4b09      	ldr	r3, [pc, #36]	; (8010eb8 <__ieee754_pow+0x218>)
 8010e92:	429c      	cmp	r4, r3
 8010e94:	dd18      	ble.n	8010ec8 <__ieee754_pow+0x228>
 8010e96:	f1b9 0f00 	cmp.w	r9, #0
 8010e9a:	dcf2      	bgt.n	8010e82 <__ieee754_pow+0x1e2>
 8010e9c:	e75e      	b.n	8010d5c <__ieee754_pow+0xbc>
 8010e9e:	bf00      	nop
 8010ea0:	8800759c 	.word	0x8800759c
 8010ea4:	7e37e43c 	.word	0x7e37e43c
 8010ea8:	7ff00000 	.word	0x7ff00000
 8010eac:	080167b1 	.word	0x080167b1
 8010eb0:	433fffff 	.word	0x433fffff
 8010eb4:	3fefffff 	.word	0x3fefffff
 8010eb8:	3ff00000 	.word	0x3ff00000
 8010ebc:	3fe00000 	.word	0x3fe00000
 8010ec0:	41e00000 	.word	0x41e00000
 8010ec4:	3feffffe 	.word	0x3feffffe
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4b63      	ldr	r3, [pc, #396]	; (8011058 <__ieee754_pow+0x3b8>)
 8010ecc:	f7ef f9ec 	bl	80002a8 <__aeabi_dsub>
 8010ed0:	a355      	add	r3, pc, #340	; (adr r3, 8011028 <__ieee754_pow+0x388>)
 8010ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	460d      	mov	r5, r1
 8010eda:	f7ef fb9d 	bl	8000618 <__aeabi_dmul>
 8010ede:	a354      	add	r3, pc, #336	; (adr r3, 8011030 <__ieee754_pow+0x390>)
 8010ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	460f      	mov	r7, r1
 8010ee8:	4620      	mov	r0, r4
 8010eea:	4629      	mov	r1, r5
 8010eec:	f7ef fb94 	bl	8000618 <__aeabi_dmul>
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ef6:	4b59      	ldr	r3, [pc, #356]	; (801105c <__ieee754_pow+0x3bc>)
 8010ef8:	4620      	mov	r0, r4
 8010efa:	4629      	mov	r1, r5
 8010efc:	f7ef fb8c 	bl	8000618 <__aeabi_dmul>
 8010f00:	4602      	mov	r2, r0
 8010f02:	460b      	mov	r3, r1
 8010f04:	a14c      	add	r1, pc, #304	; (adr r1, 8011038 <__ieee754_pow+0x398>)
 8010f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f0a:	f7ef f9cd 	bl	80002a8 <__aeabi_dsub>
 8010f0e:	4622      	mov	r2, r4
 8010f10:	462b      	mov	r3, r5
 8010f12:	f7ef fb81 	bl	8000618 <__aeabi_dmul>
 8010f16:	4602      	mov	r2, r0
 8010f18:	460b      	mov	r3, r1
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	4950      	ldr	r1, [pc, #320]	; (8011060 <__ieee754_pow+0x3c0>)
 8010f1e:	f7ef f9c3 	bl	80002a8 <__aeabi_dsub>
 8010f22:	4622      	mov	r2, r4
 8010f24:	462b      	mov	r3, r5
 8010f26:	4680      	mov	r8, r0
 8010f28:	4689      	mov	r9, r1
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	4629      	mov	r1, r5
 8010f2e:	f7ef fb73 	bl	8000618 <__aeabi_dmul>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	4640      	mov	r0, r8
 8010f38:	4649      	mov	r1, r9
 8010f3a:	f7ef fb6d 	bl	8000618 <__aeabi_dmul>
 8010f3e:	a340      	add	r3, pc, #256	; (adr r3, 8011040 <__ieee754_pow+0x3a0>)
 8010f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f44:	f7ef fb68 	bl	8000618 <__aeabi_dmul>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f50:	f7ef f9aa 	bl	80002a8 <__aeabi_dsub>
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	4604      	mov	r4, r0
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	4630      	mov	r0, r6
 8010f5e:	4639      	mov	r1, r7
 8010f60:	f7ef f9a4 	bl	80002ac <__adddf3>
 8010f64:	2000      	movs	r0, #0
 8010f66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f6a:	4632      	mov	r2, r6
 8010f6c:	463b      	mov	r3, r7
 8010f6e:	f7ef f99b 	bl	80002a8 <__aeabi_dsub>
 8010f72:	4602      	mov	r2, r0
 8010f74:	460b      	mov	r3, r1
 8010f76:	4620      	mov	r0, r4
 8010f78:	4629      	mov	r1, r5
 8010f7a:	f7ef f995 	bl	80002a8 <__aeabi_dsub>
 8010f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f80:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010f84:	4313      	orrs	r3, r2
 8010f86:	4606      	mov	r6, r0
 8010f88:	460f      	mov	r7, r1
 8010f8a:	f040 81eb 	bne.w	8011364 <__ieee754_pow+0x6c4>
 8010f8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011048 <__ieee754_pow+0x3a8>
 8010f92:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010f96:	2400      	movs	r4, #0
 8010f98:	4622      	mov	r2, r4
 8010f9a:	462b      	mov	r3, r5
 8010f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010fa4:	f7ef f980 	bl	80002a8 <__aeabi_dsub>
 8010fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fac:	f7ef fb34 	bl	8000618 <__aeabi_dmul>
 8010fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fb4:	4680      	mov	r8, r0
 8010fb6:	4689      	mov	r9, r1
 8010fb8:	4630      	mov	r0, r6
 8010fba:	4639      	mov	r1, r7
 8010fbc:	f7ef fb2c 	bl	8000618 <__aeabi_dmul>
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	4640      	mov	r0, r8
 8010fc6:	4649      	mov	r1, r9
 8010fc8:	f7ef f970 	bl	80002ac <__adddf3>
 8010fcc:	4622      	mov	r2, r4
 8010fce:	462b      	mov	r3, r5
 8010fd0:	4680      	mov	r8, r0
 8010fd2:	4689      	mov	r9, r1
 8010fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fd8:	f7ef fb1e 	bl	8000618 <__aeabi_dmul>
 8010fdc:	460b      	mov	r3, r1
 8010fde:	4604      	mov	r4, r0
 8010fe0:	460d      	mov	r5, r1
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	4649      	mov	r1, r9
 8010fe6:	4640      	mov	r0, r8
 8010fe8:	e9cd 4500 	strd	r4, r5, [sp]
 8010fec:	f7ef f95e 	bl	80002ac <__adddf3>
 8010ff0:	4b1c      	ldr	r3, [pc, #112]	; (8011064 <__ieee754_pow+0x3c4>)
 8010ff2:	4299      	cmp	r1, r3
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	460f      	mov	r7, r1
 8010ff8:	468b      	mov	fp, r1
 8010ffa:	f340 82f7 	ble.w	80115ec <__ieee754_pow+0x94c>
 8010ffe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011002:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011006:	4303      	orrs	r3, r0
 8011008:	f000 81ea 	beq.w	80113e0 <__ieee754_pow+0x740>
 801100c:	a310      	add	r3, pc, #64	; (adr r3, 8011050 <__ieee754_pow+0x3b0>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011016:	f7ef faff 	bl	8000618 <__aeabi_dmul>
 801101a:	a30d      	add	r3, pc, #52	; (adr r3, 8011050 <__ieee754_pow+0x3b0>)
 801101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011020:	e6d5      	b.n	8010dce <__ieee754_pow+0x12e>
 8011022:	bf00      	nop
 8011024:	f3af 8000 	nop.w
 8011028:	60000000 	.word	0x60000000
 801102c:	3ff71547 	.word	0x3ff71547
 8011030:	f85ddf44 	.word	0xf85ddf44
 8011034:	3e54ae0b 	.word	0x3e54ae0b
 8011038:	55555555 	.word	0x55555555
 801103c:	3fd55555 	.word	0x3fd55555
 8011040:	652b82fe 	.word	0x652b82fe
 8011044:	3ff71547 	.word	0x3ff71547
 8011048:	00000000 	.word	0x00000000
 801104c:	bff00000 	.word	0xbff00000
 8011050:	8800759c 	.word	0x8800759c
 8011054:	7e37e43c 	.word	0x7e37e43c
 8011058:	3ff00000 	.word	0x3ff00000
 801105c:	3fd00000 	.word	0x3fd00000
 8011060:	3fe00000 	.word	0x3fe00000
 8011064:	408fffff 	.word	0x408fffff
 8011068:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801106c:	f04f 0200 	mov.w	r2, #0
 8011070:	da05      	bge.n	801107e <__ieee754_pow+0x3de>
 8011072:	4bd3      	ldr	r3, [pc, #844]	; (80113c0 <__ieee754_pow+0x720>)
 8011074:	f7ef fad0 	bl	8000618 <__aeabi_dmul>
 8011078:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801107c:	460c      	mov	r4, r1
 801107e:	1523      	asrs	r3, r4, #20
 8011080:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011084:	4413      	add	r3, r2
 8011086:	9309      	str	r3, [sp, #36]	; 0x24
 8011088:	4bce      	ldr	r3, [pc, #824]	; (80113c4 <__ieee754_pow+0x724>)
 801108a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801108e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011092:	429c      	cmp	r4, r3
 8011094:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011098:	dd08      	ble.n	80110ac <__ieee754_pow+0x40c>
 801109a:	4bcb      	ldr	r3, [pc, #812]	; (80113c8 <__ieee754_pow+0x728>)
 801109c:	429c      	cmp	r4, r3
 801109e:	f340 815e 	ble.w	801135e <__ieee754_pow+0x6be>
 80110a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a4:	3301      	adds	r3, #1
 80110a6:	9309      	str	r3, [sp, #36]	; 0x24
 80110a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80110ac:	f04f 0a00 	mov.w	sl, #0
 80110b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80110b4:	930c      	str	r3, [sp, #48]	; 0x30
 80110b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110b8:	4bc4      	ldr	r3, [pc, #784]	; (80113cc <__ieee754_pow+0x72c>)
 80110ba:	4413      	add	r3, r2
 80110bc:	ed93 7b00 	vldr	d7, [r3]
 80110c0:	4629      	mov	r1, r5
 80110c2:	ec53 2b17 	vmov	r2, r3, d7
 80110c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80110ce:	f7ef f8eb 	bl	80002a8 <__aeabi_dsub>
 80110d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80110d6:	4606      	mov	r6, r0
 80110d8:	460f      	mov	r7, r1
 80110da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110de:	f7ef f8e5 	bl	80002ac <__adddf3>
 80110e2:	4602      	mov	r2, r0
 80110e4:	460b      	mov	r3, r1
 80110e6:	2000      	movs	r0, #0
 80110e8:	49b9      	ldr	r1, [pc, #740]	; (80113d0 <__ieee754_pow+0x730>)
 80110ea:	f7ef fbbf 	bl	800086c <__aeabi_ddiv>
 80110ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	4630      	mov	r0, r6
 80110f8:	4639      	mov	r1, r7
 80110fa:	f7ef fa8d 	bl	8000618 <__aeabi_dmul>
 80110fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011102:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011106:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801110a:	2300      	movs	r3, #0
 801110c:	9302      	str	r3, [sp, #8]
 801110e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011112:	106d      	asrs	r5, r5, #1
 8011114:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011118:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801111c:	2200      	movs	r2, #0
 801111e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011122:	4640      	mov	r0, r8
 8011124:	4649      	mov	r1, r9
 8011126:	4614      	mov	r4, r2
 8011128:	461d      	mov	r5, r3
 801112a:	f7ef fa75 	bl	8000618 <__aeabi_dmul>
 801112e:	4602      	mov	r2, r0
 8011130:	460b      	mov	r3, r1
 8011132:	4630      	mov	r0, r6
 8011134:	4639      	mov	r1, r7
 8011136:	f7ef f8b7 	bl	80002a8 <__aeabi_dsub>
 801113a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801113e:	4606      	mov	r6, r0
 8011140:	460f      	mov	r7, r1
 8011142:	4620      	mov	r0, r4
 8011144:	4629      	mov	r1, r5
 8011146:	f7ef f8af 	bl	80002a8 <__aeabi_dsub>
 801114a:	4602      	mov	r2, r0
 801114c:	460b      	mov	r3, r1
 801114e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011152:	f7ef f8a9 	bl	80002a8 <__aeabi_dsub>
 8011156:	4642      	mov	r2, r8
 8011158:	464b      	mov	r3, r9
 801115a:	f7ef fa5d 	bl	8000618 <__aeabi_dmul>
 801115e:	4602      	mov	r2, r0
 8011160:	460b      	mov	r3, r1
 8011162:	4630      	mov	r0, r6
 8011164:	4639      	mov	r1, r7
 8011166:	f7ef f89f 	bl	80002a8 <__aeabi_dsub>
 801116a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801116e:	f7ef fa53 	bl	8000618 <__aeabi_dmul>
 8011172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801117a:	4610      	mov	r0, r2
 801117c:	4619      	mov	r1, r3
 801117e:	f7ef fa4b 	bl	8000618 <__aeabi_dmul>
 8011182:	a37b      	add	r3, pc, #492	; (adr r3, 8011370 <__ieee754_pow+0x6d0>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	4604      	mov	r4, r0
 801118a:	460d      	mov	r5, r1
 801118c:	f7ef fa44 	bl	8000618 <__aeabi_dmul>
 8011190:	a379      	add	r3, pc, #484	; (adr r3, 8011378 <__ieee754_pow+0x6d8>)
 8011192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011196:	f7ef f889 	bl	80002ac <__adddf3>
 801119a:	4622      	mov	r2, r4
 801119c:	462b      	mov	r3, r5
 801119e:	f7ef fa3b 	bl	8000618 <__aeabi_dmul>
 80111a2:	a377      	add	r3, pc, #476	; (adr r3, 8011380 <__ieee754_pow+0x6e0>)
 80111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a8:	f7ef f880 	bl	80002ac <__adddf3>
 80111ac:	4622      	mov	r2, r4
 80111ae:	462b      	mov	r3, r5
 80111b0:	f7ef fa32 	bl	8000618 <__aeabi_dmul>
 80111b4:	a374      	add	r3, pc, #464	; (adr r3, 8011388 <__ieee754_pow+0x6e8>)
 80111b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ba:	f7ef f877 	bl	80002ac <__adddf3>
 80111be:	4622      	mov	r2, r4
 80111c0:	462b      	mov	r3, r5
 80111c2:	f7ef fa29 	bl	8000618 <__aeabi_dmul>
 80111c6:	a372      	add	r3, pc, #456	; (adr r3, 8011390 <__ieee754_pow+0x6f0>)
 80111c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111cc:	f7ef f86e 	bl	80002ac <__adddf3>
 80111d0:	4622      	mov	r2, r4
 80111d2:	462b      	mov	r3, r5
 80111d4:	f7ef fa20 	bl	8000618 <__aeabi_dmul>
 80111d8:	a36f      	add	r3, pc, #444	; (adr r3, 8011398 <__ieee754_pow+0x6f8>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	f7ef f865 	bl	80002ac <__adddf3>
 80111e2:	4622      	mov	r2, r4
 80111e4:	4606      	mov	r6, r0
 80111e6:	460f      	mov	r7, r1
 80111e8:	462b      	mov	r3, r5
 80111ea:	4620      	mov	r0, r4
 80111ec:	4629      	mov	r1, r5
 80111ee:	f7ef fa13 	bl	8000618 <__aeabi_dmul>
 80111f2:	4602      	mov	r2, r0
 80111f4:	460b      	mov	r3, r1
 80111f6:	4630      	mov	r0, r6
 80111f8:	4639      	mov	r1, r7
 80111fa:	f7ef fa0d 	bl	8000618 <__aeabi_dmul>
 80111fe:	4642      	mov	r2, r8
 8011200:	4604      	mov	r4, r0
 8011202:	460d      	mov	r5, r1
 8011204:	464b      	mov	r3, r9
 8011206:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801120a:	f7ef f84f 	bl	80002ac <__adddf3>
 801120e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011212:	f7ef fa01 	bl	8000618 <__aeabi_dmul>
 8011216:	4622      	mov	r2, r4
 8011218:	462b      	mov	r3, r5
 801121a:	f7ef f847 	bl	80002ac <__adddf3>
 801121e:	4642      	mov	r2, r8
 8011220:	4606      	mov	r6, r0
 8011222:	460f      	mov	r7, r1
 8011224:	464b      	mov	r3, r9
 8011226:	4640      	mov	r0, r8
 8011228:	4649      	mov	r1, r9
 801122a:	f7ef f9f5 	bl	8000618 <__aeabi_dmul>
 801122e:	2200      	movs	r2, #0
 8011230:	4b68      	ldr	r3, [pc, #416]	; (80113d4 <__ieee754_pow+0x734>)
 8011232:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011236:	f7ef f839 	bl	80002ac <__adddf3>
 801123a:	4632      	mov	r2, r6
 801123c:	463b      	mov	r3, r7
 801123e:	f7ef f835 	bl	80002ac <__adddf3>
 8011242:	9802      	ldr	r0, [sp, #8]
 8011244:	460d      	mov	r5, r1
 8011246:	4604      	mov	r4, r0
 8011248:	4602      	mov	r2, r0
 801124a:	460b      	mov	r3, r1
 801124c:	4640      	mov	r0, r8
 801124e:	4649      	mov	r1, r9
 8011250:	f7ef f9e2 	bl	8000618 <__aeabi_dmul>
 8011254:	2200      	movs	r2, #0
 8011256:	4680      	mov	r8, r0
 8011258:	4689      	mov	r9, r1
 801125a:	4b5e      	ldr	r3, [pc, #376]	; (80113d4 <__ieee754_pow+0x734>)
 801125c:	4620      	mov	r0, r4
 801125e:	4629      	mov	r1, r5
 8011260:	f7ef f822 	bl	80002a8 <__aeabi_dsub>
 8011264:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011268:	f7ef f81e 	bl	80002a8 <__aeabi_dsub>
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	4630      	mov	r0, r6
 8011272:	4639      	mov	r1, r7
 8011274:	f7ef f818 	bl	80002a8 <__aeabi_dsub>
 8011278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801127c:	f7ef f9cc 	bl	8000618 <__aeabi_dmul>
 8011280:	4622      	mov	r2, r4
 8011282:	4606      	mov	r6, r0
 8011284:	460f      	mov	r7, r1
 8011286:	462b      	mov	r3, r5
 8011288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801128c:	f7ef f9c4 	bl	8000618 <__aeabi_dmul>
 8011290:	4602      	mov	r2, r0
 8011292:	460b      	mov	r3, r1
 8011294:	4630      	mov	r0, r6
 8011296:	4639      	mov	r1, r7
 8011298:	f7ef f808 	bl	80002ac <__adddf3>
 801129c:	4606      	mov	r6, r0
 801129e:	460f      	mov	r7, r1
 80112a0:	4602      	mov	r2, r0
 80112a2:	460b      	mov	r3, r1
 80112a4:	4640      	mov	r0, r8
 80112a6:	4649      	mov	r1, r9
 80112a8:	f7ef f800 	bl	80002ac <__adddf3>
 80112ac:	9802      	ldr	r0, [sp, #8]
 80112ae:	a33c      	add	r3, pc, #240	; (adr r3, 80113a0 <__ieee754_pow+0x700>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	4604      	mov	r4, r0
 80112b6:	460d      	mov	r5, r1
 80112b8:	f7ef f9ae 	bl	8000618 <__aeabi_dmul>
 80112bc:	4642      	mov	r2, r8
 80112be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80112c2:	464b      	mov	r3, r9
 80112c4:	4620      	mov	r0, r4
 80112c6:	4629      	mov	r1, r5
 80112c8:	f7ee ffee 	bl	80002a8 <__aeabi_dsub>
 80112cc:	4602      	mov	r2, r0
 80112ce:	460b      	mov	r3, r1
 80112d0:	4630      	mov	r0, r6
 80112d2:	4639      	mov	r1, r7
 80112d4:	f7ee ffe8 	bl	80002a8 <__aeabi_dsub>
 80112d8:	a333      	add	r3, pc, #204	; (adr r3, 80113a8 <__ieee754_pow+0x708>)
 80112da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112de:	f7ef f99b 	bl	8000618 <__aeabi_dmul>
 80112e2:	a333      	add	r3, pc, #204	; (adr r3, 80113b0 <__ieee754_pow+0x710>)
 80112e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e8:	4606      	mov	r6, r0
 80112ea:	460f      	mov	r7, r1
 80112ec:	4620      	mov	r0, r4
 80112ee:	4629      	mov	r1, r5
 80112f0:	f7ef f992 	bl	8000618 <__aeabi_dmul>
 80112f4:	4602      	mov	r2, r0
 80112f6:	460b      	mov	r3, r1
 80112f8:	4630      	mov	r0, r6
 80112fa:	4639      	mov	r1, r7
 80112fc:	f7ee ffd6 	bl	80002ac <__adddf3>
 8011300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011302:	4b35      	ldr	r3, [pc, #212]	; (80113d8 <__ieee754_pow+0x738>)
 8011304:	4413      	add	r3, r2
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	f7ee ffcf 	bl	80002ac <__adddf3>
 801130e:	4604      	mov	r4, r0
 8011310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011312:	460d      	mov	r5, r1
 8011314:	f7ef f916 	bl	8000544 <__aeabi_i2d>
 8011318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801131a:	4b30      	ldr	r3, [pc, #192]	; (80113dc <__ieee754_pow+0x73c>)
 801131c:	4413      	add	r3, r2
 801131e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011322:	4606      	mov	r6, r0
 8011324:	460f      	mov	r7, r1
 8011326:	4622      	mov	r2, r4
 8011328:	462b      	mov	r3, r5
 801132a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801132e:	f7ee ffbd 	bl	80002ac <__adddf3>
 8011332:	4642      	mov	r2, r8
 8011334:	464b      	mov	r3, r9
 8011336:	f7ee ffb9 	bl	80002ac <__adddf3>
 801133a:	4632      	mov	r2, r6
 801133c:	463b      	mov	r3, r7
 801133e:	f7ee ffb5 	bl	80002ac <__adddf3>
 8011342:	9802      	ldr	r0, [sp, #8]
 8011344:	4632      	mov	r2, r6
 8011346:	463b      	mov	r3, r7
 8011348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801134c:	f7ee ffac 	bl	80002a8 <__aeabi_dsub>
 8011350:	4642      	mov	r2, r8
 8011352:	464b      	mov	r3, r9
 8011354:	f7ee ffa8 	bl	80002a8 <__aeabi_dsub>
 8011358:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801135c:	e607      	b.n	8010f6e <__ieee754_pow+0x2ce>
 801135e:	f04f 0a01 	mov.w	sl, #1
 8011362:	e6a5      	b.n	80110b0 <__ieee754_pow+0x410>
 8011364:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80113b8 <__ieee754_pow+0x718>
 8011368:	e613      	b.n	8010f92 <__ieee754_pow+0x2f2>
 801136a:	bf00      	nop
 801136c:	f3af 8000 	nop.w
 8011370:	4a454eef 	.word	0x4a454eef
 8011374:	3fca7e28 	.word	0x3fca7e28
 8011378:	93c9db65 	.word	0x93c9db65
 801137c:	3fcd864a 	.word	0x3fcd864a
 8011380:	a91d4101 	.word	0xa91d4101
 8011384:	3fd17460 	.word	0x3fd17460
 8011388:	518f264d 	.word	0x518f264d
 801138c:	3fd55555 	.word	0x3fd55555
 8011390:	db6fabff 	.word	0xdb6fabff
 8011394:	3fdb6db6 	.word	0x3fdb6db6
 8011398:	33333303 	.word	0x33333303
 801139c:	3fe33333 	.word	0x3fe33333
 80113a0:	e0000000 	.word	0xe0000000
 80113a4:	3feec709 	.word	0x3feec709
 80113a8:	dc3a03fd 	.word	0xdc3a03fd
 80113ac:	3feec709 	.word	0x3feec709
 80113b0:	145b01f5 	.word	0x145b01f5
 80113b4:	be3e2fe0 	.word	0xbe3e2fe0
 80113b8:	00000000 	.word	0x00000000
 80113bc:	3ff00000 	.word	0x3ff00000
 80113c0:	43400000 	.word	0x43400000
 80113c4:	0003988e 	.word	0x0003988e
 80113c8:	000bb679 	.word	0x000bb679
 80113cc:	08016520 	.word	0x08016520
 80113d0:	3ff00000 	.word	0x3ff00000
 80113d4:	40080000 	.word	0x40080000
 80113d8:	08016540 	.word	0x08016540
 80113dc:	08016530 	.word	0x08016530
 80113e0:	a3b4      	add	r3, pc, #720	; (adr r3, 80116b4 <__ieee754_pow+0xa14>)
 80113e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e6:	4640      	mov	r0, r8
 80113e8:	4649      	mov	r1, r9
 80113ea:	f7ee ff5f 	bl	80002ac <__adddf3>
 80113ee:	4622      	mov	r2, r4
 80113f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80113f4:	462b      	mov	r3, r5
 80113f6:	4630      	mov	r0, r6
 80113f8:	4639      	mov	r1, r7
 80113fa:	f7ee ff55 	bl	80002a8 <__aeabi_dsub>
 80113fe:	4602      	mov	r2, r0
 8011400:	460b      	mov	r3, r1
 8011402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011406:	f7ef fb97 	bl	8000b38 <__aeabi_dcmpgt>
 801140a:	2800      	cmp	r0, #0
 801140c:	f47f adfe 	bne.w	801100c <__ieee754_pow+0x36c>
 8011410:	4aa3      	ldr	r2, [pc, #652]	; (80116a0 <__ieee754_pow+0xa00>)
 8011412:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011416:	4293      	cmp	r3, r2
 8011418:	f340 810a 	ble.w	8011630 <__ieee754_pow+0x990>
 801141c:	151b      	asrs	r3, r3, #20
 801141e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011422:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011426:	fa4a f303 	asr.w	r3, sl, r3
 801142a:	445b      	add	r3, fp
 801142c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011430:	4e9c      	ldr	r6, [pc, #624]	; (80116a4 <__ieee754_pow+0xa04>)
 8011432:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011436:	4116      	asrs	r6, r2
 8011438:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801143c:	2000      	movs	r0, #0
 801143e:	ea23 0106 	bic.w	r1, r3, r6
 8011442:	f1c2 0214 	rsb	r2, r2, #20
 8011446:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801144a:	fa4a fa02 	asr.w	sl, sl, r2
 801144e:	f1bb 0f00 	cmp.w	fp, #0
 8011452:	4602      	mov	r2, r0
 8011454:	460b      	mov	r3, r1
 8011456:	4620      	mov	r0, r4
 8011458:	4629      	mov	r1, r5
 801145a:	bfb8      	it	lt
 801145c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011460:	f7ee ff22 	bl	80002a8 <__aeabi_dsub>
 8011464:	e9cd 0100 	strd	r0, r1, [sp]
 8011468:	4642      	mov	r2, r8
 801146a:	464b      	mov	r3, r9
 801146c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011470:	f7ee ff1c 	bl	80002ac <__adddf3>
 8011474:	2000      	movs	r0, #0
 8011476:	a378      	add	r3, pc, #480	; (adr r3, 8011658 <__ieee754_pow+0x9b8>)
 8011478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147c:	4604      	mov	r4, r0
 801147e:	460d      	mov	r5, r1
 8011480:	f7ef f8ca 	bl	8000618 <__aeabi_dmul>
 8011484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011488:	4606      	mov	r6, r0
 801148a:	460f      	mov	r7, r1
 801148c:	4620      	mov	r0, r4
 801148e:	4629      	mov	r1, r5
 8011490:	f7ee ff0a 	bl	80002a8 <__aeabi_dsub>
 8011494:	4602      	mov	r2, r0
 8011496:	460b      	mov	r3, r1
 8011498:	4640      	mov	r0, r8
 801149a:	4649      	mov	r1, r9
 801149c:	f7ee ff04 	bl	80002a8 <__aeabi_dsub>
 80114a0:	a36f      	add	r3, pc, #444	; (adr r3, 8011660 <__ieee754_pow+0x9c0>)
 80114a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a6:	f7ef f8b7 	bl	8000618 <__aeabi_dmul>
 80114aa:	a36f      	add	r3, pc, #444	; (adr r3, 8011668 <__ieee754_pow+0x9c8>)
 80114ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b0:	4680      	mov	r8, r0
 80114b2:	4689      	mov	r9, r1
 80114b4:	4620      	mov	r0, r4
 80114b6:	4629      	mov	r1, r5
 80114b8:	f7ef f8ae 	bl	8000618 <__aeabi_dmul>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	4640      	mov	r0, r8
 80114c2:	4649      	mov	r1, r9
 80114c4:	f7ee fef2 	bl	80002ac <__adddf3>
 80114c8:	4604      	mov	r4, r0
 80114ca:	460d      	mov	r5, r1
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	4630      	mov	r0, r6
 80114d2:	4639      	mov	r1, r7
 80114d4:	f7ee feea 	bl	80002ac <__adddf3>
 80114d8:	4632      	mov	r2, r6
 80114da:	463b      	mov	r3, r7
 80114dc:	4680      	mov	r8, r0
 80114de:	4689      	mov	r9, r1
 80114e0:	f7ee fee2 	bl	80002a8 <__aeabi_dsub>
 80114e4:	4602      	mov	r2, r0
 80114e6:	460b      	mov	r3, r1
 80114e8:	4620      	mov	r0, r4
 80114ea:	4629      	mov	r1, r5
 80114ec:	f7ee fedc 	bl	80002a8 <__aeabi_dsub>
 80114f0:	4642      	mov	r2, r8
 80114f2:	4606      	mov	r6, r0
 80114f4:	460f      	mov	r7, r1
 80114f6:	464b      	mov	r3, r9
 80114f8:	4640      	mov	r0, r8
 80114fa:	4649      	mov	r1, r9
 80114fc:	f7ef f88c 	bl	8000618 <__aeabi_dmul>
 8011500:	a35b      	add	r3, pc, #364	; (adr r3, 8011670 <__ieee754_pow+0x9d0>)
 8011502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011506:	4604      	mov	r4, r0
 8011508:	460d      	mov	r5, r1
 801150a:	f7ef f885 	bl	8000618 <__aeabi_dmul>
 801150e:	a35a      	add	r3, pc, #360	; (adr r3, 8011678 <__ieee754_pow+0x9d8>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	f7ee fec8 	bl	80002a8 <__aeabi_dsub>
 8011518:	4622      	mov	r2, r4
 801151a:	462b      	mov	r3, r5
 801151c:	f7ef f87c 	bl	8000618 <__aeabi_dmul>
 8011520:	a357      	add	r3, pc, #348	; (adr r3, 8011680 <__ieee754_pow+0x9e0>)
 8011522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011526:	f7ee fec1 	bl	80002ac <__adddf3>
 801152a:	4622      	mov	r2, r4
 801152c:	462b      	mov	r3, r5
 801152e:	f7ef f873 	bl	8000618 <__aeabi_dmul>
 8011532:	a355      	add	r3, pc, #340	; (adr r3, 8011688 <__ieee754_pow+0x9e8>)
 8011534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011538:	f7ee feb6 	bl	80002a8 <__aeabi_dsub>
 801153c:	4622      	mov	r2, r4
 801153e:	462b      	mov	r3, r5
 8011540:	f7ef f86a 	bl	8000618 <__aeabi_dmul>
 8011544:	a352      	add	r3, pc, #328	; (adr r3, 8011690 <__ieee754_pow+0x9f0>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	f7ee feaf 	bl	80002ac <__adddf3>
 801154e:	4622      	mov	r2, r4
 8011550:	462b      	mov	r3, r5
 8011552:	f7ef f861 	bl	8000618 <__aeabi_dmul>
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	4640      	mov	r0, r8
 801155c:	4649      	mov	r1, r9
 801155e:	f7ee fea3 	bl	80002a8 <__aeabi_dsub>
 8011562:	4604      	mov	r4, r0
 8011564:	460d      	mov	r5, r1
 8011566:	4602      	mov	r2, r0
 8011568:	460b      	mov	r3, r1
 801156a:	4640      	mov	r0, r8
 801156c:	4649      	mov	r1, r9
 801156e:	f7ef f853 	bl	8000618 <__aeabi_dmul>
 8011572:	2200      	movs	r2, #0
 8011574:	e9cd 0100 	strd	r0, r1, [sp]
 8011578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801157c:	4620      	mov	r0, r4
 801157e:	4629      	mov	r1, r5
 8011580:	f7ee fe92 	bl	80002a8 <__aeabi_dsub>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	e9dd 0100 	ldrd	r0, r1, [sp]
 801158c:	f7ef f96e 	bl	800086c <__aeabi_ddiv>
 8011590:	4632      	mov	r2, r6
 8011592:	4604      	mov	r4, r0
 8011594:	460d      	mov	r5, r1
 8011596:	463b      	mov	r3, r7
 8011598:	4640      	mov	r0, r8
 801159a:	4649      	mov	r1, r9
 801159c:	f7ef f83c 	bl	8000618 <__aeabi_dmul>
 80115a0:	4632      	mov	r2, r6
 80115a2:	463b      	mov	r3, r7
 80115a4:	f7ee fe82 	bl	80002ac <__adddf3>
 80115a8:	4602      	mov	r2, r0
 80115aa:	460b      	mov	r3, r1
 80115ac:	4620      	mov	r0, r4
 80115ae:	4629      	mov	r1, r5
 80115b0:	f7ee fe7a 	bl	80002a8 <__aeabi_dsub>
 80115b4:	4642      	mov	r2, r8
 80115b6:	464b      	mov	r3, r9
 80115b8:	f7ee fe76 	bl	80002a8 <__aeabi_dsub>
 80115bc:	4602      	mov	r2, r0
 80115be:	460b      	mov	r3, r1
 80115c0:	2000      	movs	r0, #0
 80115c2:	4939      	ldr	r1, [pc, #228]	; (80116a8 <__ieee754_pow+0xa08>)
 80115c4:	f7ee fe70 	bl	80002a8 <__aeabi_dsub>
 80115c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80115cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80115d0:	4602      	mov	r2, r0
 80115d2:	460b      	mov	r3, r1
 80115d4:	da2f      	bge.n	8011636 <__ieee754_pow+0x996>
 80115d6:	4650      	mov	r0, sl
 80115d8:	ec43 2b10 	vmov	d0, r2, r3
 80115dc:	f000 fb60 	bl	8011ca0 <scalbn>
 80115e0:	ec51 0b10 	vmov	r0, r1, d0
 80115e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115e8:	f7ff bbf1 	b.w	8010dce <__ieee754_pow+0x12e>
 80115ec:	4b2f      	ldr	r3, [pc, #188]	; (80116ac <__ieee754_pow+0xa0c>)
 80115ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80115f2:	429e      	cmp	r6, r3
 80115f4:	f77f af0c 	ble.w	8011410 <__ieee754_pow+0x770>
 80115f8:	4b2d      	ldr	r3, [pc, #180]	; (80116b0 <__ieee754_pow+0xa10>)
 80115fa:	440b      	add	r3, r1
 80115fc:	4303      	orrs	r3, r0
 80115fe:	d00b      	beq.n	8011618 <__ieee754_pow+0x978>
 8011600:	a325      	add	r3, pc, #148	; (adr r3, 8011698 <__ieee754_pow+0x9f8>)
 8011602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801160a:	f7ef f805 	bl	8000618 <__aeabi_dmul>
 801160e:	a322      	add	r3, pc, #136	; (adr r3, 8011698 <__ieee754_pow+0x9f8>)
 8011610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011614:	f7ff bbdb 	b.w	8010dce <__ieee754_pow+0x12e>
 8011618:	4622      	mov	r2, r4
 801161a:	462b      	mov	r3, r5
 801161c:	f7ee fe44 	bl	80002a8 <__aeabi_dsub>
 8011620:	4642      	mov	r2, r8
 8011622:	464b      	mov	r3, r9
 8011624:	f7ef fa7e 	bl	8000b24 <__aeabi_dcmpge>
 8011628:	2800      	cmp	r0, #0
 801162a:	f43f aef1 	beq.w	8011410 <__ieee754_pow+0x770>
 801162e:	e7e7      	b.n	8011600 <__ieee754_pow+0x960>
 8011630:	f04f 0a00 	mov.w	sl, #0
 8011634:	e718      	b.n	8011468 <__ieee754_pow+0x7c8>
 8011636:	4621      	mov	r1, r4
 8011638:	e7d4      	b.n	80115e4 <__ieee754_pow+0x944>
 801163a:	2000      	movs	r0, #0
 801163c:	491a      	ldr	r1, [pc, #104]	; (80116a8 <__ieee754_pow+0xa08>)
 801163e:	f7ff bb8f 	b.w	8010d60 <__ieee754_pow+0xc0>
 8011642:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011646:	f7ff bb8b 	b.w	8010d60 <__ieee754_pow+0xc0>
 801164a:	4630      	mov	r0, r6
 801164c:	4639      	mov	r1, r7
 801164e:	f7ff bb87 	b.w	8010d60 <__ieee754_pow+0xc0>
 8011652:	4693      	mov	fp, r2
 8011654:	f7ff bb98 	b.w	8010d88 <__ieee754_pow+0xe8>
 8011658:	00000000 	.word	0x00000000
 801165c:	3fe62e43 	.word	0x3fe62e43
 8011660:	fefa39ef 	.word	0xfefa39ef
 8011664:	3fe62e42 	.word	0x3fe62e42
 8011668:	0ca86c39 	.word	0x0ca86c39
 801166c:	be205c61 	.word	0xbe205c61
 8011670:	72bea4d0 	.word	0x72bea4d0
 8011674:	3e663769 	.word	0x3e663769
 8011678:	c5d26bf1 	.word	0xc5d26bf1
 801167c:	3ebbbd41 	.word	0x3ebbbd41
 8011680:	af25de2c 	.word	0xaf25de2c
 8011684:	3f11566a 	.word	0x3f11566a
 8011688:	16bebd93 	.word	0x16bebd93
 801168c:	3f66c16c 	.word	0x3f66c16c
 8011690:	5555553e 	.word	0x5555553e
 8011694:	3fc55555 	.word	0x3fc55555
 8011698:	c2f8f359 	.word	0xc2f8f359
 801169c:	01a56e1f 	.word	0x01a56e1f
 80116a0:	3fe00000 	.word	0x3fe00000
 80116a4:	000fffff 	.word	0x000fffff
 80116a8:	3ff00000 	.word	0x3ff00000
 80116ac:	4090cbff 	.word	0x4090cbff
 80116b0:	3f6f3400 	.word	0x3f6f3400
 80116b4:	652b82fe 	.word	0x652b82fe
 80116b8:	3c971547 	.word	0x3c971547

080116bc <__ieee754_sqrt>:
 80116bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c0:	4955      	ldr	r1, [pc, #340]	; (8011818 <__ieee754_sqrt+0x15c>)
 80116c2:	ec55 4b10 	vmov	r4, r5, d0
 80116c6:	43a9      	bics	r1, r5
 80116c8:	462b      	mov	r3, r5
 80116ca:	462a      	mov	r2, r5
 80116cc:	d112      	bne.n	80116f4 <__ieee754_sqrt+0x38>
 80116ce:	ee10 2a10 	vmov	r2, s0
 80116d2:	ee10 0a10 	vmov	r0, s0
 80116d6:	4629      	mov	r1, r5
 80116d8:	f7ee ff9e 	bl	8000618 <__aeabi_dmul>
 80116dc:	4602      	mov	r2, r0
 80116de:	460b      	mov	r3, r1
 80116e0:	4620      	mov	r0, r4
 80116e2:	4629      	mov	r1, r5
 80116e4:	f7ee fde2 	bl	80002ac <__adddf3>
 80116e8:	4604      	mov	r4, r0
 80116ea:	460d      	mov	r5, r1
 80116ec:	ec45 4b10 	vmov	d0, r4, r5
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f4:	2d00      	cmp	r5, #0
 80116f6:	ee10 0a10 	vmov	r0, s0
 80116fa:	4621      	mov	r1, r4
 80116fc:	dc0f      	bgt.n	801171e <__ieee754_sqrt+0x62>
 80116fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011702:	4330      	orrs	r0, r6
 8011704:	d0f2      	beq.n	80116ec <__ieee754_sqrt+0x30>
 8011706:	b155      	cbz	r5, 801171e <__ieee754_sqrt+0x62>
 8011708:	ee10 2a10 	vmov	r2, s0
 801170c:	4620      	mov	r0, r4
 801170e:	4629      	mov	r1, r5
 8011710:	f7ee fdca 	bl	80002a8 <__aeabi_dsub>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	f7ef f8a8 	bl	800086c <__aeabi_ddiv>
 801171c:	e7e4      	b.n	80116e8 <__ieee754_sqrt+0x2c>
 801171e:	151b      	asrs	r3, r3, #20
 8011720:	d073      	beq.n	801180a <__ieee754_sqrt+0x14e>
 8011722:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011726:	07dd      	lsls	r5, r3, #31
 8011728:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801172c:	bf48      	it	mi
 801172e:	0fc8      	lsrmi	r0, r1, #31
 8011730:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011734:	bf44      	itt	mi
 8011736:	0049      	lslmi	r1, r1, #1
 8011738:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801173c:	2500      	movs	r5, #0
 801173e:	1058      	asrs	r0, r3, #1
 8011740:	0fcb      	lsrs	r3, r1, #31
 8011742:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011746:	0049      	lsls	r1, r1, #1
 8011748:	2316      	movs	r3, #22
 801174a:	462c      	mov	r4, r5
 801174c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011750:	19a7      	adds	r7, r4, r6
 8011752:	4297      	cmp	r7, r2
 8011754:	bfde      	ittt	le
 8011756:	19bc      	addle	r4, r7, r6
 8011758:	1bd2      	suble	r2, r2, r7
 801175a:	19ad      	addle	r5, r5, r6
 801175c:	0fcf      	lsrs	r7, r1, #31
 801175e:	3b01      	subs	r3, #1
 8011760:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011764:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011768:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801176c:	d1f0      	bne.n	8011750 <__ieee754_sqrt+0x94>
 801176e:	f04f 0c20 	mov.w	ip, #32
 8011772:	469e      	mov	lr, r3
 8011774:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011778:	42a2      	cmp	r2, r4
 801177a:	eb06 070e 	add.w	r7, r6, lr
 801177e:	dc02      	bgt.n	8011786 <__ieee754_sqrt+0xca>
 8011780:	d112      	bne.n	80117a8 <__ieee754_sqrt+0xec>
 8011782:	428f      	cmp	r7, r1
 8011784:	d810      	bhi.n	80117a8 <__ieee754_sqrt+0xec>
 8011786:	2f00      	cmp	r7, #0
 8011788:	eb07 0e06 	add.w	lr, r7, r6
 801178c:	da42      	bge.n	8011814 <__ieee754_sqrt+0x158>
 801178e:	f1be 0f00 	cmp.w	lr, #0
 8011792:	db3f      	blt.n	8011814 <__ieee754_sqrt+0x158>
 8011794:	f104 0801 	add.w	r8, r4, #1
 8011798:	1b12      	subs	r2, r2, r4
 801179a:	428f      	cmp	r7, r1
 801179c:	bf88      	it	hi
 801179e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80117a2:	1bc9      	subs	r1, r1, r7
 80117a4:	4433      	add	r3, r6
 80117a6:	4644      	mov	r4, r8
 80117a8:	0052      	lsls	r2, r2, #1
 80117aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80117ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80117b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80117b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80117ba:	d1dd      	bne.n	8011778 <__ieee754_sqrt+0xbc>
 80117bc:	430a      	orrs	r2, r1
 80117be:	d006      	beq.n	80117ce <__ieee754_sqrt+0x112>
 80117c0:	1c5c      	adds	r4, r3, #1
 80117c2:	bf13      	iteet	ne
 80117c4:	3301      	addne	r3, #1
 80117c6:	3501      	addeq	r5, #1
 80117c8:	4663      	moveq	r3, ip
 80117ca:	f023 0301 	bicne.w	r3, r3, #1
 80117ce:	106a      	asrs	r2, r5, #1
 80117d0:	085b      	lsrs	r3, r3, #1
 80117d2:	07e9      	lsls	r1, r5, #31
 80117d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80117d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80117dc:	bf48      	it	mi
 80117de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80117e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80117e6:	461c      	mov	r4, r3
 80117e8:	e780      	b.n	80116ec <__ieee754_sqrt+0x30>
 80117ea:	0aca      	lsrs	r2, r1, #11
 80117ec:	3815      	subs	r0, #21
 80117ee:	0549      	lsls	r1, r1, #21
 80117f0:	2a00      	cmp	r2, #0
 80117f2:	d0fa      	beq.n	80117ea <__ieee754_sqrt+0x12e>
 80117f4:	02d6      	lsls	r6, r2, #11
 80117f6:	d50a      	bpl.n	801180e <__ieee754_sqrt+0x152>
 80117f8:	f1c3 0420 	rsb	r4, r3, #32
 80117fc:	fa21 f404 	lsr.w	r4, r1, r4
 8011800:	1e5d      	subs	r5, r3, #1
 8011802:	4099      	lsls	r1, r3
 8011804:	4322      	orrs	r2, r4
 8011806:	1b43      	subs	r3, r0, r5
 8011808:	e78b      	b.n	8011722 <__ieee754_sqrt+0x66>
 801180a:	4618      	mov	r0, r3
 801180c:	e7f0      	b.n	80117f0 <__ieee754_sqrt+0x134>
 801180e:	0052      	lsls	r2, r2, #1
 8011810:	3301      	adds	r3, #1
 8011812:	e7ef      	b.n	80117f4 <__ieee754_sqrt+0x138>
 8011814:	46a0      	mov	r8, r4
 8011816:	e7bf      	b.n	8011798 <__ieee754_sqrt+0xdc>
 8011818:	7ff00000 	.word	0x7ff00000
 801181c:	00000000 	.word	0x00000000

08011820 <atan>:
 8011820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	ec55 4b10 	vmov	r4, r5, d0
 8011828:	4bc3      	ldr	r3, [pc, #780]	; (8011b38 <atan+0x318>)
 801182a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801182e:	429e      	cmp	r6, r3
 8011830:	46ab      	mov	fp, r5
 8011832:	dd18      	ble.n	8011866 <atan+0x46>
 8011834:	4bc1      	ldr	r3, [pc, #772]	; (8011b3c <atan+0x31c>)
 8011836:	429e      	cmp	r6, r3
 8011838:	dc01      	bgt.n	801183e <atan+0x1e>
 801183a:	d109      	bne.n	8011850 <atan+0x30>
 801183c:	b144      	cbz	r4, 8011850 <atan+0x30>
 801183e:	4622      	mov	r2, r4
 8011840:	462b      	mov	r3, r5
 8011842:	4620      	mov	r0, r4
 8011844:	4629      	mov	r1, r5
 8011846:	f7ee fd31 	bl	80002ac <__adddf3>
 801184a:	4604      	mov	r4, r0
 801184c:	460d      	mov	r5, r1
 801184e:	e006      	b.n	801185e <atan+0x3e>
 8011850:	f1bb 0f00 	cmp.w	fp, #0
 8011854:	f340 8131 	ble.w	8011aba <atan+0x29a>
 8011858:	a59b      	add	r5, pc, #620	; (adr r5, 8011ac8 <atan+0x2a8>)
 801185a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801185e:	ec45 4b10 	vmov	d0, r4, r5
 8011862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011866:	4bb6      	ldr	r3, [pc, #728]	; (8011b40 <atan+0x320>)
 8011868:	429e      	cmp	r6, r3
 801186a:	dc14      	bgt.n	8011896 <atan+0x76>
 801186c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011870:	429e      	cmp	r6, r3
 8011872:	dc0d      	bgt.n	8011890 <atan+0x70>
 8011874:	a396      	add	r3, pc, #600	; (adr r3, 8011ad0 <atan+0x2b0>)
 8011876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187a:	ee10 0a10 	vmov	r0, s0
 801187e:	4629      	mov	r1, r5
 8011880:	f7ee fd14 	bl	80002ac <__adddf3>
 8011884:	2200      	movs	r2, #0
 8011886:	4baf      	ldr	r3, [pc, #700]	; (8011b44 <atan+0x324>)
 8011888:	f7ef f956 	bl	8000b38 <__aeabi_dcmpgt>
 801188c:	2800      	cmp	r0, #0
 801188e:	d1e6      	bne.n	801185e <atan+0x3e>
 8011890:	f04f 3aff 	mov.w	sl, #4294967295
 8011894:	e02b      	b.n	80118ee <atan+0xce>
 8011896:	f000 f963 	bl	8011b60 <fabs>
 801189a:	4bab      	ldr	r3, [pc, #684]	; (8011b48 <atan+0x328>)
 801189c:	429e      	cmp	r6, r3
 801189e:	ec55 4b10 	vmov	r4, r5, d0
 80118a2:	f300 80bf 	bgt.w	8011a24 <atan+0x204>
 80118a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80118aa:	429e      	cmp	r6, r3
 80118ac:	f300 80a0 	bgt.w	80119f0 <atan+0x1d0>
 80118b0:	ee10 2a10 	vmov	r2, s0
 80118b4:	ee10 0a10 	vmov	r0, s0
 80118b8:	462b      	mov	r3, r5
 80118ba:	4629      	mov	r1, r5
 80118bc:	f7ee fcf6 	bl	80002ac <__adddf3>
 80118c0:	2200      	movs	r2, #0
 80118c2:	4ba0      	ldr	r3, [pc, #640]	; (8011b44 <atan+0x324>)
 80118c4:	f7ee fcf0 	bl	80002a8 <__aeabi_dsub>
 80118c8:	2200      	movs	r2, #0
 80118ca:	4606      	mov	r6, r0
 80118cc:	460f      	mov	r7, r1
 80118ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80118d2:	4620      	mov	r0, r4
 80118d4:	4629      	mov	r1, r5
 80118d6:	f7ee fce9 	bl	80002ac <__adddf3>
 80118da:	4602      	mov	r2, r0
 80118dc:	460b      	mov	r3, r1
 80118de:	4630      	mov	r0, r6
 80118e0:	4639      	mov	r1, r7
 80118e2:	f7ee ffc3 	bl	800086c <__aeabi_ddiv>
 80118e6:	f04f 0a00 	mov.w	sl, #0
 80118ea:	4604      	mov	r4, r0
 80118ec:	460d      	mov	r5, r1
 80118ee:	4622      	mov	r2, r4
 80118f0:	462b      	mov	r3, r5
 80118f2:	4620      	mov	r0, r4
 80118f4:	4629      	mov	r1, r5
 80118f6:	f7ee fe8f 	bl	8000618 <__aeabi_dmul>
 80118fa:	4602      	mov	r2, r0
 80118fc:	460b      	mov	r3, r1
 80118fe:	4680      	mov	r8, r0
 8011900:	4689      	mov	r9, r1
 8011902:	f7ee fe89 	bl	8000618 <__aeabi_dmul>
 8011906:	a374      	add	r3, pc, #464	; (adr r3, 8011ad8 <atan+0x2b8>)
 8011908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190c:	4606      	mov	r6, r0
 801190e:	460f      	mov	r7, r1
 8011910:	f7ee fe82 	bl	8000618 <__aeabi_dmul>
 8011914:	a372      	add	r3, pc, #456	; (adr r3, 8011ae0 <atan+0x2c0>)
 8011916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191a:	f7ee fcc7 	bl	80002ac <__adddf3>
 801191e:	4632      	mov	r2, r6
 8011920:	463b      	mov	r3, r7
 8011922:	f7ee fe79 	bl	8000618 <__aeabi_dmul>
 8011926:	a370      	add	r3, pc, #448	; (adr r3, 8011ae8 <atan+0x2c8>)
 8011928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192c:	f7ee fcbe 	bl	80002ac <__adddf3>
 8011930:	4632      	mov	r2, r6
 8011932:	463b      	mov	r3, r7
 8011934:	f7ee fe70 	bl	8000618 <__aeabi_dmul>
 8011938:	a36d      	add	r3, pc, #436	; (adr r3, 8011af0 <atan+0x2d0>)
 801193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193e:	f7ee fcb5 	bl	80002ac <__adddf3>
 8011942:	4632      	mov	r2, r6
 8011944:	463b      	mov	r3, r7
 8011946:	f7ee fe67 	bl	8000618 <__aeabi_dmul>
 801194a:	a36b      	add	r3, pc, #428	; (adr r3, 8011af8 <atan+0x2d8>)
 801194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011950:	f7ee fcac 	bl	80002ac <__adddf3>
 8011954:	4632      	mov	r2, r6
 8011956:	463b      	mov	r3, r7
 8011958:	f7ee fe5e 	bl	8000618 <__aeabi_dmul>
 801195c:	a368      	add	r3, pc, #416	; (adr r3, 8011b00 <atan+0x2e0>)
 801195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011962:	f7ee fca3 	bl	80002ac <__adddf3>
 8011966:	4642      	mov	r2, r8
 8011968:	464b      	mov	r3, r9
 801196a:	f7ee fe55 	bl	8000618 <__aeabi_dmul>
 801196e:	a366      	add	r3, pc, #408	; (adr r3, 8011b08 <atan+0x2e8>)
 8011970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011974:	4680      	mov	r8, r0
 8011976:	4689      	mov	r9, r1
 8011978:	4630      	mov	r0, r6
 801197a:	4639      	mov	r1, r7
 801197c:	f7ee fe4c 	bl	8000618 <__aeabi_dmul>
 8011980:	a363      	add	r3, pc, #396	; (adr r3, 8011b10 <atan+0x2f0>)
 8011982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011986:	f7ee fc8f 	bl	80002a8 <__aeabi_dsub>
 801198a:	4632      	mov	r2, r6
 801198c:	463b      	mov	r3, r7
 801198e:	f7ee fe43 	bl	8000618 <__aeabi_dmul>
 8011992:	a361      	add	r3, pc, #388	; (adr r3, 8011b18 <atan+0x2f8>)
 8011994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011998:	f7ee fc86 	bl	80002a8 <__aeabi_dsub>
 801199c:	4632      	mov	r2, r6
 801199e:	463b      	mov	r3, r7
 80119a0:	f7ee fe3a 	bl	8000618 <__aeabi_dmul>
 80119a4:	a35e      	add	r3, pc, #376	; (adr r3, 8011b20 <atan+0x300>)
 80119a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119aa:	f7ee fc7d 	bl	80002a8 <__aeabi_dsub>
 80119ae:	4632      	mov	r2, r6
 80119b0:	463b      	mov	r3, r7
 80119b2:	f7ee fe31 	bl	8000618 <__aeabi_dmul>
 80119b6:	a35c      	add	r3, pc, #368	; (adr r3, 8011b28 <atan+0x308>)
 80119b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119bc:	f7ee fc74 	bl	80002a8 <__aeabi_dsub>
 80119c0:	4632      	mov	r2, r6
 80119c2:	463b      	mov	r3, r7
 80119c4:	f7ee fe28 	bl	8000618 <__aeabi_dmul>
 80119c8:	4602      	mov	r2, r0
 80119ca:	460b      	mov	r3, r1
 80119cc:	4640      	mov	r0, r8
 80119ce:	4649      	mov	r1, r9
 80119d0:	f7ee fc6c 	bl	80002ac <__adddf3>
 80119d4:	4622      	mov	r2, r4
 80119d6:	462b      	mov	r3, r5
 80119d8:	f7ee fe1e 	bl	8000618 <__aeabi_dmul>
 80119dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80119e0:	4602      	mov	r2, r0
 80119e2:	460b      	mov	r3, r1
 80119e4:	d14b      	bne.n	8011a7e <atan+0x25e>
 80119e6:	4620      	mov	r0, r4
 80119e8:	4629      	mov	r1, r5
 80119ea:	f7ee fc5d 	bl	80002a8 <__aeabi_dsub>
 80119ee:	e72c      	b.n	801184a <atan+0x2a>
 80119f0:	ee10 0a10 	vmov	r0, s0
 80119f4:	2200      	movs	r2, #0
 80119f6:	4b53      	ldr	r3, [pc, #332]	; (8011b44 <atan+0x324>)
 80119f8:	4629      	mov	r1, r5
 80119fa:	f7ee fc55 	bl	80002a8 <__aeabi_dsub>
 80119fe:	2200      	movs	r2, #0
 8011a00:	4606      	mov	r6, r0
 8011a02:	460f      	mov	r7, r1
 8011a04:	4b4f      	ldr	r3, [pc, #316]	; (8011b44 <atan+0x324>)
 8011a06:	4620      	mov	r0, r4
 8011a08:	4629      	mov	r1, r5
 8011a0a:	f7ee fc4f 	bl	80002ac <__adddf3>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	460b      	mov	r3, r1
 8011a12:	4630      	mov	r0, r6
 8011a14:	4639      	mov	r1, r7
 8011a16:	f7ee ff29 	bl	800086c <__aeabi_ddiv>
 8011a1a:	f04f 0a01 	mov.w	sl, #1
 8011a1e:	4604      	mov	r4, r0
 8011a20:	460d      	mov	r5, r1
 8011a22:	e764      	b.n	80118ee <atan+0xce>
 8011a24:	4b49      	ldr	r3, [pc, #292]	; (8011b4c <atan+0x32c>)
 8011a26:	429e      	cmp	r6, r3
 8011a28:	dc1d      	bgt.n	8011a66 <atan+0x246>
 8011a2a:	ee10 0a10 	vmov	r0, s0
 8011a2e:	2200      	movs	r2, #0
 8011a30:	4b47      	ldr	r3, [pc, #284]	; (8011b50 <atan+0x330>)
 8011a32:	4629      	mov	r1, r5
 8011a34:	f7ee fc38 	bl	80002a8 <__aeabi_dsub>
 8011a38:	2200      	movs	r2, #0
 8011a3a:	4606      	mov	r6, r0
 8011a3c:	460f      	mov	r7, r1
 8011a3e:	4b44      	ldr	r3, [pc, #272]	; (8011b50 <atan+0x330>)
 8011a40:	4620      	mov	r0, r4
 8011a42:	4629      	mov	r1, r5
 8011a44:	f7ee fde8 	bl	8000618 <__aeabi_dmul>
 8011a48:	2200      	movs	r2, #0
 8011a4a:	4b3e      	ldr	r3, [pc, #248]	; (8011b44 <atan+0x324>)
 8011a4c:	f7ee fc2e 	bl	80002ac <__adddf3>
 8011a50:	4602      	mov	r2, r0
 8011a52:	460b      	mov	r3, r1
 8011a54:	4630      	mov	r0, r6
 8011a56:	4639      	mov	r1, r7
 8011a58:	f7ee ff08 	bl	800086c <__aeabi_ddiv>
 8011a5c:	f04f 0a02 	mov.w	sl, #2
 8011a60:	4604      	mov	r4, r0
 8011a62:	460d      	mov	r5, r1
 8011a64:	e743      	b.n	80118ee <atan+0xce>
 8011a66:	462b      	mov	r3, r5
 8011a68:	ee10 2a10 	vmov	r2, s0
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	4939      	ldr	r1, [pc, #228]	; (8011b54 <atan+0x334>)
 8011a70:	f7ee fefc 	bl	800086c <__aeabi_ddiv>
 8011a74:	f04f 0a03 	mov.w	sl, #3
 8011a78:	4604      	mov	r4, r0
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	e737      	b.n	80118ee <atan+0xce>
 8011a7e:	4b36      	ldr	r3, [pc, #216]	; (8011b58 <atan+0x338>)
 8011a80:	4e36      	ldr	r6, [pc, #216]	; (8011b5c <atan+0x33c>)
 8011a82:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011a86:	4456      	add	r6, sl
 8011a88:	449a      	add	sl, r3
 8011a8a:	e9da 2300 	ldrd	r2, r3, [sl]
 8011a8e:	f7ee fc0b 	bl	80002a8 <__aeabi_dsub>
 8011a92:	4622      	mov	r2, r4
 8011a94:	462b      	mov	r3, r5
 8011a96:	f7ee fc07 	bl	80002a8 <__aeabi_dsub>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011aa2:	f7ee fc01 	bl	80002a8 <__aeabi_dsub>
 8011aa6:	f1bb 0f00 	cmp.w	fp, #0
 8011aaa:	4604      	mov	r4, r0
 8011aac:	460d      	mov	r5, r1
 8011aae:	f6bf aed6 	bge.w	801185e <atan+0x3e>
 8011ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ab6:	461d      	mov	r5, r3
 8011ab8:	e6d1      	b.n	801185e <atan+0x3e>
 8011aba:	a51d      	add	r5, pc, #116	; (adr r5, 8011b30 <atan+0x310>)
 8011abc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011ac0:	e6cd      	b.n	801185e <atan+0x3e>
 8011ac2:	bf00      	nop
 8011ac4:	f3af 8000 	nop.w
 8011ac8:	54442d18 	.word	0x54442d18
 8011acc:	3ff921fb 	.word	0x3ff921fb
 8011ad0:	8800759c 	.word	0x8800759c
 8011ad4:	7e37e43c 	.word	0x7e37e43c
 8011ad8:	e322da11 	.word	0xe322da11
 8011adc:	3f90ad3a 	.word	0x3f90ad3a
 8011ae0:	24760deb 	.word	0x24760deb
 8011ae4:	3fa97b4b 	.word	0x3fa97b4b
 8011ae8:	a0d03d51 	.word	0xa0d03d51
 8011aec:	3fb10d66 	.word	0x3fb10d66
 8011af0:	c54c206e 	.word	0xc54c206e
 8011af4:	3fb745cd 	.word	0x3fb745cd
 8011af8:	920083ff 	.word	0x920083ff
 8011afc:	3fc24924 	.word	0x3fc24924
 8011b00:	5555550d 	.word	0x5555550d
 8011b04:	3fd55555 	.word	0x3fd55555
 8011b08:	2c6a6c2f 	.word	0x2c6a6c2f
 8011b0c:	bfa2b444 	.word	0xbfa2b444
 8011b10:	52defd9a 	.word	0x52defd9a
 8011b14:	3fadde2d 	.word	0x3fadde2d
 8011b18:	af749a6d 	.word	0xaf749a6d
 8011b1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011b20:	fe231671 	.word	0xfe231671
 8011b24:	3fbc71c6 	.word	0x3fbc71c6
 8011b28:	9998ebc4 	.word	0x9998ebc4
 8011b2c:	3fc99999 	.word	0x3fc99999
 8011b30:	54442d18 	.word	0x54442d18
 8011b34:	bff921fb 	.word	0xbff921fb
 8011b38:	440fffff 	.word	0x440fffff
 8011b3c:	7ff00000 	.word	0x7ff00000
 8011b40:	3fdbffff 	.word	0x3fdbffff
 8011b44:	3ff00000 	.word	0x3ff00000
 8011b48:	3ff2ffff 	.word	0x3ff2ffff
 8011b4c:	40037fff 	.word	0x40037fff
 8011b50:	3ff80000 	.word	0x3ff80000
 8011b54:	bff00000 	.word	0xbff00000
 8011b58:	08016570 	.word	0x08016570
 8011b5c:	08016550 	.word	0x08016550

08011b60 <fabs>:
 8011b60:	ec51 0b10 	vmov	r0, r1, d0
 8011b64:	ee10 2a10 	vmov	r2, s0
 8011b68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b6c:	ec43 2b10 	vmov	d0, r2, r3
 8011b70:	4770      	bx	lr

08011b72 <finite>:
 8011b72:	ee10 3a90 	vmov	r3, s1
 8011b76:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011b7a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011b7e:	0fc0      	lsrs	r0, r0, #31
 8011b80:	4770      	bx	lr

08011b82 <matherr>:
 8011b82:	2000      	movs	r0, #0
 8011b84:	4770      	bx	lr
	...

08011b88 <nan>:
 8011b88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011b90 <nan+0x8>
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop
 8011b90:	00000000 	.word	0x00000000
 8011b94:	7ff80000 	.word	0x7ff80000

08011b98 <rint>:
 8011b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b9a:	ec51 0b10 	vmov	r0, r1, d0
 8011b9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011ba2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011ba6:	2e13      	cmp	r6, #19
 8011ba8:	460b      	mov	r3, r1
 8011baa:	ee10 4a10 	vmov	r4, s0
 8011bae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011bb2:	dc56      	bgt.n	8011c62 <rint+0xca>
 8011bb4:	2e00      	cmp	r6, #0
 8011bb6:	da2b      	bge.n	8011c10 <rint+0x78>
 8011bb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011bbc:	4302      	orrs	r2, r0
 8011bbe:	d023      	beq.n	8011c08 <rint+0x70>
 8011bc0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011bc4:	4302      	orrs	r2, r0
 8011bc6:	4254      	negs	r4, r2
 8011bc8:	4314      	orrs	r4, r2
 8011bca:	0c4b      	lsrs	r3, r1, #17
 8011bcc:	0b24      	lsrs	r4, r4, #12
 8011bce:	045b      	lsls	r3, r3, #17
 8011bd0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011bd4:	ea44 0103 	orr.w	r1, r4, r3
 8011bd8:	460b      	mov	r3, r1
 8011bda:	492f      	ldr	r1, [pc, #188]	; (8011c98 <rint+0x100>)
 8011bdc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011be0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011be4:	4602      	mov	r2, r0
 8011be6:	4639      	mov	r1, r7
 8011be8:	4630      	mov	r0, r6
 8011bea:	f7ee fb5f 	bl	80002ac <__adddf3>
 8011bee:	e9cd 0100 	strd	r0, r1, [sp]
 8011bf2:	463b      	mov	r3, r7
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bfa:	f7ee fb55 	bl	80002a8 <__aeabi_dsub>
 8011bfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011c06:	4639      	mov	r1, r7
 8011c08:	ec41 0b10 	vmov	d0, r0, r1
 8011c0c:	b003      	add	sp, #12
 8011c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c10:	4a22      	ldr	r2, [pc, #136]	; (8011c9c <rint+0x104>)
 8011c12:	4132      	asrs	r2, r6
 8011c14:	ea01 0702 	and.w	r7, r1, r2
 8011c18:	4307      	orrs	r7, r0
 8011c1a:	d0f5      	beq.n	8011c08 <rint+0x70>
 8011c1c:	0852      	lsrs	r2, r2, #1
 8011c1e:	4011      	ands	r1, r2
 8011c20:	430c      	orrs	r4, r1
 8011c22:	d00b      	beq.n	8011c3c <rint+0xa4>
 8011c24:	ea23 0202 	bic.w	r2, r3, r2
 8011c28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011c2c:	2e13      	cmp	r6, #19
 8011c2e:	fa43 f306 	asr.w	r3, r3, r6
 8011c32:	bf0c      	ite	eq
 8011c34:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011c38:	2400      	movne	r4, #0
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	4916      	ldr	r1, [pc, #88]	; (8011c98 <rint+0x100>)
 8011c3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011c42:	4622      	mov	r2, r4
 8011c44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011c48:	4620      	mov	r0, r4
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	f7ee fb2e 	bl	80002ac <__adddf3>
 8011c50:	e9cd 0100 	strd	r0, r1, [sp]
 8011c54:	4622      	mov	r2, r4
 8011c56:	462b      	mov	r3, r5
 8011c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c5c:	f7ee fb24 	bl	80002a8 <__aeabi_dsub>
 8011c60:	e7d2      	b.n	8011c08 <rint+0x70>
 8011c62:	2e33      	cmp	r6, #51	; 0x33
 8011c64:	dd07      	ble.n	8011c76 <rint+0xde>
 8011c66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011c6a:	d1cd      	bne.n	8011c08 <rint+0x70>
 8011c6c:	ee10 2a10 	vmov	r2, s0
 8011c70:	f7ee fb1c 	bl	80002ac <__adddf3>
 8011c74:	e7c8      	b.n	8011c08 <rint+0x70>
 8011c76:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8011c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c7e:	40f2      	lsrs	r2, r6
 8011c80:	4210      	tst	r0, r2
 8011c82:	d0c1      	beq.n	8011c08 <rint+0x70>
 8011c84:	0852      	lsrs	r2, r2, #1
 8011c86:	4210      	tst	r0, r2
 8011c88:	bf1f      	itttt	ne
 8011c8a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011c8e:	ea20 0202 	bicne.w	r2, r0, r2
 8011c92:	4134      	asrne	r4, r6
 8011c94:	4314      	orrne	r4, r2
 8011c96:	e7d1      	b.n	8011c3c <rint+0xa4>
 8011c98:	08016590 	.word	0x08016590
 8011c9c:	000fffff 	.word	0x000fffff

08011ca0 <scalbn>:
 8011ca0:	b570      	push	{r4, r5, r6, lr}
 8011ca2:	ec55 4b10 	vmov	r4, r5, d0
 8011ca6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011caa:	4606      	mov	r6, r0
 8011cac:	462b      	mov	r3, r5
 8011cae:	b9aa      	cbnz	r2, 8011cdc <scalbn+0x3c>
 8011cb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011cb4:	4323      	orrs	r3, r4
 8011cb6:	d03b      	beq.n	8011d30 <scalbn+0x90>
 8011cb8:	4b31      	ldr	r3, [pc, #196]	; (8011d80 <scalbn+0xe0>)
 8011cba:	4629      	mov	r1, r5
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	ee10 0a10 	vmov	r0, s0
 8011cc2:	f7ee fca9 	bl	8000618 <__aeabi_dmul>
 8011cc6:	4b2f      	ldr	r3, [pc, #188]	; (8011d84 <scalbn+0xe4>)
 8011cc8:	429e      	cmp	r6, r3
 8011cca:	4604      	mov	r4, r0
 8011ccc:	460d      	mov	r5, r1
 8011cce:	da12      	bge.n	8011cf6 <scalbn+0x56>
 8011cd0:	a327      	add	r3, pc, #156	; (adr r3, 8011d70 <scalbn+0xd0>)
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	f7ee fc9f 	bl	8000618 <__aeabi_dmul>
 8011cda:	e009      	b.n	8011cf0 <scalbn+0x50>
 8011cdc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011ce0:	428a      	cmp	r2, r1
 8011ce2:	d10c      	bne.n	8011cfe <scalbn+0x5e>
 8011ce4:	ee10 2a10 	vmov	r2, s0
 8011ce8:	4620      	mov	r0, r4
 8011cea:	4629      	mov	r1, r5
 8011cec:	f7ee fade 	bl	80002ac <__adddf3>
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	460d      	mov	r5, r1
 8011cf4:	e01c      	b.n	8011d30 <scalbn+0x90>
 8011cf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	3a36      	subs	r2, #54	; 0x36
 8011cfe:	4432      	add	r2, r6
 8011d00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011d04:	428a      	cmp	r2, r1
 8011d06:	dd0b      	ble.n	8011d20 <scalbn+0x80>
 8011d08:	ec45 4b11 	vmov	d1, r4, r5
 8011d0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011d78 <scalbn+0xd8>
 8011d10:	f000 f83c 	bl	8011d8c <copysign>
 8011d14:	a318      	add	r3, pc, #96	; (adr r3, 8011d78 <scalbn+0xd8>)
 8011d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1a:	ec51 0b10 	vmov	r0, r1, d0
 8011d1e:	e7da      	b.n	8011cd6 <scalbn+0x36>
 8011d20:	2a00      	cmp	r2, #0
 8011d22:	dd08      	ble.n	8011d36 <scalbn+0x96>
 8011d24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011d28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011d2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d30:	ec45 4b10 	vmov	d0, r4, r5
 8011d34:	bd70      	pop	{r4, r5, r6, pc}
 8011d36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011d3a:	da0d      	bge.n	8011d58 <scalbn+0xb8>
 8011d3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011d40:	429e      	cmp	r6, r3
 8011d42:	ec45 4b11 	vmov	d1, r4, r5
 8011d46:	dce1      	bgt.n	8011d0c <scalbn+0x6c>
 8011d48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011d70 <scalbn+0xd0>
 8011d4c:	f000 f81e 	bl	8011d8c <copysign>
 8011d50:	a307      	add	r3, pc, #28	; (adr r3, 8011d70 <scalbn+0xd0>)
 8011d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d56:	e7e0      	b.n	8011d1a <scalbn+0x7a>
 8011d58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011d5c:	3236      	adds	r2, #54	; 0x36
 8011d5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011d62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d66:	4620      	mov	r0, r4
 8011d68:	4629      	mov	r1, r5
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	4b06      	ldr	r3, [pc, #24]	; (8011d88 <scalbn+0xe8>)
 8011d6e:	e7b2      	b.n	8011cd6 <scalbn+0x36>
 8011d70:	c2f8f359 	.word	0xc2f8f359
 8011d74:	01a56e1f 	.word	0x01a56e1f
 8011d78:	8800759c 	.word	0x8800759c
 8011d7c:	7e37e43c 	.word	0x7e37e43c
 8011d80:	43500000 	.word	0x43500000
 8011d84:	ffff3cb0 	.word	0xffff3cb0
 8011d88:	3c900000 	.word	0x3c900000

08011d8c <copysign>:
 8011d8c:	ec51 0b10 	vmov	r0, r1, d0
 8011d90:	ee11 0a90 	vmov	r0, s3
 8011d94:	ee10 2a10 	vmov	r2, s0
 8011d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011da0:	ea41 0300 	orr.w	r3, r1, r0
 8011da4:	ec43 2b10 	vmov	d0, r2, r3
 8011da8:	4770      	bx	lr
	...

08011dac <__errno>:
 8011dac:	4b01      	ldr	r3, [pc, #4]	; (8011db4 <__errno+0x8>)
 8011dae:	6818      	ldr	r0, [r3, #0]
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	20000020 	.word	0x20000020

08011db8 <__libc_init_array>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	4e0d      	ldr	r6, [pc, #52]	; (8011df0 <__libc_init_array+0x38>)
 8011dbc:	4c0d      	ldr	r4, [pc, #52]	; (8011df4 <__libc_init_array+0x3c>)
 8011dbe:	1ba4      	subs	r4, r4, r6
 8011dc0:	10a4      	asrs	r4, r4, #2
 8011dc2:	2500      	movs	r5, #0
 8011dc4:	42a5      	cmp	r5, r4
 8011dc6:	d109      	bne.n	8011ddc <__libc_init_array+0x24>
 8011dc8:	4e0b      	ldr	r6, [pc, #44]	; (8011df8 <__libc_init_array+0x40>)
 8011dca:	4c0c      	ldr	r4, [pc, #48]	; (8011dfc <__libc_init_array+0x44>)
 8011dcc:	f004 fb1e 	bl	801640c <_init>
 8011dd0:	1ba4      	subs	r4, r4, r6
 8011dd2:	10a4      	asrs	r4, r4, #2
 8011dd4:	2500      	movs	r5, #0
 8011dd6:	42a5      	cmp	r5, r4
 8011dd8:	d105      	bne.n	8011de6 <__libc_init_array+0x2e>
 8011dda:	bd70      	pop	{r4, r5, r6, pc}
 8011ddc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011de0:	4798      	blx	r3
 8011de2:	3501      	adds	r5, #1
 8011de4:	e7ee      	b.n	8011dc4 <__libc_init_array+0xc>
 8011de6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011dea:	4798      	blx	r3
 8011dec:	3501      	adds	r5, #1
 8011dee:	e7f2      	b.n	8011dd6 <__libc_init_array+0x1e>
 8011df0:	080168c8 	.word	0x080168c8
 8011df4:	080168c8 	.word	0x080168c8
 8011df8:	080168c8 	.word	0x080168c8
 8011dfc:	080168cc 	.word	0x080168cc

08011e00 <malloc>:
 8011e00:	4b02      	ldr	r3, [pc, #8]	; (8011e0c <malloc+0xc>)
 8011e02:	4601      	mov	r1, r0
 8011e04:	6818      	ldr	r0, [r3, #0]
 8011e06:	f000 b86d 	b.w	8011ee4 <_malloc_r>
 8011e0a:	bf00      	nop
 8011e0c:	20000020 	.word	0x20000020

08011e10 <free>:
 8011e10:	4b02      	ldr	r3, [pc, #8]	; (8011e1c <free+0xc>)
 8011e12:	4601      	mov	r1, r0
 8011e14:	6818      	ldr	r0, [r3, #0]
 8011e16:	f000 b817 	b.w	8011e48 <_free_r>
 8011e1a:	bf00      	nop
 8011e1c:	20000020 	.word	0x20000020

08011e20 <memcpy>:
 8011e20:	b510      	push	{r4, lr}
 8011e22:	1e43      	subs	r3, r0, #1
 8011e24:	440a      	add	r2, r1
 8011e26:	4291      	cmp	r1, r2
 8011e28:	d100      	bne.n	8011e2c <memcpy+0xc>
 8011e2a:	bd10      	pop	{r4, pc}
 8011e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e34:	e7f7      	b.n	8011e26 <memcpy+0x6>

08011e36 <memset>:
 8011e36:	4402      	add	r2, r0
 8011e38:	4603      	mov	r3, r0
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	d100      	bne.n	8011e40 <memset+0xa>
 8011e3e:	4770      	bx	lr
 8011e40:	f803 1b01 	strb.w	r1, [r3], #1
 8011e44:	e7f9      	b.n	8011e3a <memset+0x4>
	...

08011e48 <_free_r>:
 8011e48:	b538      	push	{r3, r4, r5, lr}
 8011e4a:	4605      	mov	r5, r0
 8011e4c:	2900      	cmp	r1, #0
 8011e4e:	d045      	beq.n	8011edc <_free_r+0x94>
 8011e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e54:	1f0c      	subs	r4, r1, #4
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	bfb8      	it	lt
 8011e5a:	18e4      	addlt	r4, r4, r3
 8011e5c:	f003 fb22 	bl	80154a4 <__malloc_lock>
 8011e60:	4a1f      	ldr	r2, [pc, #124]	; (8011ee0 <_free_r+0x98>)
 8011e62:	6813      	ldr	r3, [r2, #0]
 8011e64:	4610      	mov	r0, r2
 8011e66:	b933      	cbnz	r3, 8011e76 <_free_r+0x2e>
 8011e68:	6063      	str	r3, [r4, #4]
 8011e6a:	6014      	str	r4, [r2, #0]
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e72:	f003 bb18 	b.w	80154a6 <__malloc_unlock>
 8011e76:	42a3      	cmp	r3, r4
 8011e78:	d90c      	bls.n	8011e94 <_free_r+0x4c>
 8011e7a:	6821      	ldr	r1, [r4, #0]
 8011e7c:	1862      	adds	r2, r4, r1
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	bf04      	itt	eq
 8011e82:	681a      	ldreq	r2, [r3, #0]
 8011e84:	685b      	ldreq	r3, [r3, #4]
 8011e86:	6063      	str	r3, [r4, #4]
 8011e88:	bf04      	itt	eq
 8011e8a:	1852      	addeq	r2, r2, r1
 8011e8c:	6022      	streq	r2, [r4, #0]
 8011e8e:	6004      	str	r4, [r0, #0]
 8011e90:	e7ec      	b.n	8011e6c <_free_r+0x24>
 8011e92:	4613      	mov	r3, r2
 8011e94:	685a      	ldr	r2, [r3, #4]
 8011e96:	b10a      	cbz	r2, 8011e9c <_free_r+0x54>
 8011e98:	42a2      	cmp	r2, r4
 8011e9a:	d9fa      	bls.n	8011e92 <_free_r+0x4a>
 8011e9c:	6819      	ldr	r1, [r3, #0]
 8011e9e:	1858      	adds	r0, r3, r1
 8011ea0:	42a0      	cmp	r0, r4
 8011ea2:	d10b      	bne.n	8011ebc <_free_r+0x74>
 8011ea4:	6820      	ldr	r0, [r4, #0]
 8011ea6:	4401      	add	r1, r0
 8011ea8:	1858      	adds	r0, r3, r1
 8011eaa:	4282      	cmp	r2, r0
 8011eac:	6019      	str	r1, [r3, #0]
 8011eae:	d1dd      	bne.n	8011e6c <_free_r+0x24>
 8011eb0:	6810      	ldr	r0, [r2, #0]
 8011eb2:	6852      	ldr	r2, [r2, #4]
 8011eb4:	605a      	str	r2, [r3, #4]
 8011eb6:	4401      	add	r1, r0
 8011eb8:	6019      	str	r1, [r3, #0]
 8011eba:	e7d7      	b.n	8011e6c <_free_r+0x24>
 8011ebc:	d902      	bls.n	8011ec4 <_free_r+0x7c>
 8011ebe:	230c      	movs	r3, #12
 8011ec0:	602b      	str	r3, [r5, #0]
 8011ec2:	e7d3      	b.n	8011e6c <_free_r+0x24>
 8011ec4:	6820      	ldr	r0, [r4, #0]
 8011ec6:	1821      	adds	r1, r4, r0
 8011ec8:	428a      	cmp	r2, r1
 8011eca:	bf04      	itt	eq
 8011ecc:	6811      	ldreq	r1, [r2, #0]
 8011ece:	6852      	ldreq	r2, [r2, #4]
 8011ed0:	6062      	str	r2, [r4, #4]
 8011ed2:	bf04      	itt	eq
 8011ed4:	1809      	addeq	r1, r1, r0
 8011ed6:	6021      	streq	r1, [r4, #0]
 8011ed8:	605c      	str	r4, [r3, #4]
 8011eda:	e7c7      	b.n	8011e6c <_free_r+0x24>
 8011edc:	bd38      	pop	{r3, r4, r5, pc}
 8011ede:	bf00      	nop
 8011ee0:	20001208 	.word	0x20001208

08011ee4 <_malloc_r>:
 8011ee4:	b570      	push	{r4, r5, r6, lr}
 8011ee6:	1ccd      	adds	r5, r1, #3
 8011ee8:	f025 0503 	bic.w	r5, r5, #3
 8011eec:	3508      	adds	r5, #8
 8011eee:	2d0c      	cmp	r5, #12
 8011ef0:	bf38      	it	cc
 8011ef2:	250c      	movcc	r5, #12
 8011ef4:	2d00      	cmp	r5, #0
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	db01      	blt.n	8011efe <_malloc_r+0x1a>
 8011efa:	42a9      	cmp	r1, r5
 8011efc:	d903      	bls.n	8011f06 <_malloc_r+0x22>
 8011efe:	230c      	movs	r3, #12
 8011f00:	6033      	str	r3, [r6, #0]
 8011f02:	2000      	movs	r0, #0
 8011f04:	bd70      	pop	{r4, r5, r6, pc}
 8011f06:	f003 facd 	bl	80154a4 <__malloc_lock>
 8011f0a:	4a21      	ldr	r2, [pc, #132]	; (8011f90 <_malloc_r+0xac>)
 8011f0c:	6814      	ldr	r4, [r2, #0]
 8011f0e:	4621      	mov	r1, r4
 8011f10:	b991      	cbnz	r1, 8011f38 <_malloc_r+0x54>
 8011f12:	4c20      	ldr	r4, [pc, #128]	; (8011f94 <_malloc_r+0xb0>)
 8011f14:	6823      	ldr	r3, [r4, #0]
 8011f16:	b91b      	cbnz	r3, 8011f20 <_malloc_r+0x3c>
 8011f18:	4630      	mov	r0, r6
 8011f1a:	f000 fef7 	bl	8012d0c <_sbrk_r>
 8011f1e:	6020      	str	r0, [r4, #0]
 8011f20:	4629      	mov	r1, r5
 8011f22:	4630      	mov	r0, r6
 8011f24:	f000 fef2 	bl	8012d0c <_sbrk_r>
 8011f28:	1c43      	adds	r3, r0, #1
 8011f2a:	d124      	bne.n	8011f76 <_malloc_r+0x92>
 8011f2c:	230c      	movs	r3, #12
 8011f2e:	6033      	str	r3, [r6, #0]
 8011f30:	4630      	mov	r0, r6
 8011f32:	f003 fab8 	bl	80154a6 <__malloc_unlock>
 8011f36:	e7e4      	b.n	8011f02 <_malloc_r+0x1e>
 8011f38:	680b      	ldr	r3, [r1, #0]
 8011f3a:	1b5b      	subs	r3, r3, r5
 8011f3c:	d418      	bmi.n	8011f70 <_malloc_r+0x8c>
 8011f3e:	2b0b      	cmp	r3, #11
 8011f40:	d90f      	bls.n	8011f62 <_malloc_r+0x7e>
 8011f42:	600b      	str	r3, [r1, #0]
 8011f44:	50cd      	str	r5, [r1, r3]
 8011f46:	18cc      	adds	r4, r1, r3
 8011f48:	4630      	mov	r0, r6
 8011f4a:	f003 faac 	bl	80154a6 <__malloc_unlock>
 8011f4e:	f104 000b 	add.w	r0, r4, #11
 8011f52:	1d23      	adds	r3, r4, #4
 8011f54:	f020 0007 	bic.w	r0, r0, #7
 8011f58:	1ac3      	subs	r3, r0, r3
 8011f5a:	d0d3      	beq.n	8011f04 <_malloc_r+0x20>
 8011f5c:	425a      	negs	r2, r3
 8011f5e:	50e2      	str	r2, [r4, r3]
 8011f60:	e7d0      	b.n	8011f04 <_malloc_r+0x20>
 8011f62:	428c      	cmp	r4, r1
 8011f64:	684b      	ldr	r3, [r1, #4]
 8011f66:	bf16      	itet	ne
 8011f68:	6063      	strne	r3, [r4, #4]
 8011f6a:	6013      	streq	r3, [r2, #0]
 8011f6c:	460c      	movne	r4, r1
 8011f6e:	e7eb      	b.n	8011f48 <_malloc_r+0x64>
 8011f70:	460c      	mov	r4, r1
 8011f72:	6849      	ldr	r1, [r1, #4]
 8011f74:	e7cc      	b.n	8011f10 <_malloc_r+0x2c>
 8011f76:	1cc4      	adds	r4, r0, #3
 8011f78:	f024 0403 	bic.w	r4, r4, #3
 8011f7c:	42a0      	cmp	r0, r4
 8011f7e:	d005      	beq.n	8011f8c <_malloc_r+0xa8>
 8011f80:	1a21      	subs	r1, r4, r0
 8011f82:	4630      	mov	r0, r6
 8011f84:	f000 fec2 	bl	8012d0c <_sbrk_r>
 8011f88:	3001      	adds	r0, #1
 8011f8a:	d0cf      	beq.n	8011f2c <_malloc_r+0x48>
 8011f8c:	6025      	str	r5, [r4, #0]
 8011f8e:	e7db      	b.n	8011f48 <_malloc_r+0x64>
 8011f90:	20001208 	.word	0x20001208
 8011f94:	2000120c 	.word	0x2000120c

08011f98 <__cvt>:
 8011f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f9c:	ec55 4b10 	vmov	r4, r5, d0
 8011fa0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011fa2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011fa6:	2d00      	cmp	r5, #0
 8011fa8:	460e      	mov	r6, r1
 8011faa:	4691      	mov	r9, r2
 8011fac:	4619      	mov	r1, r3
 8011fae:	bfb8      	it	lt
 8011fb0:	4622      	movlt	r2, r4
 8011fb2:	462b      	mov	r3, r5
 8011fb4:	f027 0720 	bic.w	r7, r7, #32
 8011fb8:	bfbb      	ittet	lt
 8011fba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011fbe:	461d      	movlt	r5, r3
 8011fc0:	2300      	movge	r3, #0
 8011fc2:	232d      	movlt	r3, #45	; 0x2d
 8011fc4:	bfb8      	it	lt
 8011fc6:	4614      	movlt	r4, r2
 8011fc8:	2f46      	cmp	r7, #70	; 0x46
 8011fca:	700b      	strb	r3, [r1, #0]
 8011fcc:	d004      	beq.n	8011fd8 <__cvt+0x40>
 8011fce:	2f45      	cmp	r7, #69	; 0x45
 8011fd0:	d100      	bne.n	8011fd4 <__cvt+0x3c>
 8011fd2:	3601      	adds	r6, #1
 8011fd4:	2102      	movs	r1, #2
 8011fd6:	e000      	b.n	8011fda <__cvt+0x42>
 8011fd8:	2103      	movs	r1, #3
 8011fda:	ab03      	add	r3, sp, #12
 8011fdc:	9301      	str	r3, [sp, #4]
 8011fde:	ab02      	add	r3, sp, #8
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	4632      	mov	r2, r6
 8011fe4:	4653      	mov	r3, sl
 8011fe6:	ec45 4b10 	vmov	d0, r4, r5
 8011fea:	f001 ff79 	bl	8013ee0 <_dtoa_r>
 8011fee:	2f47      	cmp	r7, #71	; 0x47
 8011ff0:	4680      	mov	r8, r0
 8011ff2:	d102      	bne.n	8011ffa <__cvt+0x62>
 8011ff4:	f019 0f01 	tst.w	r9, #1
 8011ff8:	d026      	beq.n	8012048 <__cvt+0xb0>
 8011ffa:	2f46      	cmp	r7, #70	; 0x46
 8011ffc:	eb08 0906 	add.w	r9, r8, r6
 8012000:	d111      	bne.n	8012026 <__cvt+0x8e>
 8012002:	f898 3000 	ldrb.w	r3, [r8]
 8012006:	2b30      	cmp	r3, #48	; 0x30
 8012008:	d10a      	bne.n	8012020 <__cvt+0x88>
 801200a:	2200      	movs	r2, #0
 801200c:	2300      	movs	r3, #0
 801200e:	4620      	mov	r0, r4
 8012010:	4629      	mov	r1, r5
 8012012:	f7ee fd69 	bl	8000ae8 <__aeabi_dcmpeq>
 8012016:	b918      	cbnz	r0, 8012020 <__cvt+0x88>
 8012018:	f1c6 0601 	rsb	r6, r6, #1
 801201c:	f8ca 6000 	str.w	r6, [sl]
 8012020:	f8da 3000 	ldr.w	r3, [sl]
 8012024:	4499      	add	r9, r3
 8012026:	2200      	movs	r2, #0
 8012028:	2300      	movs	r3, #0
 801202a:	4620      	mov	r0, r4
 801202c:	4629      	mov	r1, r5
 801202e:	f7ee fd5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8012032:	b938      	cbnz	r0, 8012044 <__cvt+0xac>
 8012034:	2230      	movs	r2, #48	; 0x30
 8012036:	9b03      	ldr	r3, [sp, #12]
 8012038:	454b      	cmp	r3, r9
 801203a:	d205      	bcs.n	8012048 <__cvt+0xb0>
 801203c:	1c59      	adds	r1, r3, #1
 801203e:	9103      	str	r1, [sp, #12]
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	e7f8      	b.n	8012036 <__cvt+0x9e>
 8012044:	f8cd 900c 	str.w	r9, [sp, #12]
 8012048:	9b03      	ldr	r3, [sp, #12]
 801204a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801204c:	eba3 0308 	sub.w	r3, r3, r8
 8012050:	4640      	mov	r0, r8
 8012052:	6013      	str	r3, [r2, #0]
 8012054:	b004      	add	sp, #16
 8012056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801205a <__exponent>:
 801205a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801205c:	2900      	cmp	r1, #0
 801205e:	4604      	mov	r4, r0
 8012060:	bfba      	itte	lt
 8012062:	4249      	neglt	r1, r1
 8012064:	232d      	movlt	r3, #45	; 0x2d
 8012066:	232b      	movge	r3, #43	; 0x2b
 8012068:	2909      	cmp	r1, #9
 801206a:	f804 2b02 	strb.w	r2, [r4], #2
 801206e:	7043      	strb	r3, [r0, #1]
 8012070:	dd20      	ble.n	80120b4 <__exponent+0x5a>
 8012072:	f10d 0307 	add.w	r3, sp, #7
 8012076:	461f      	mov	r7, r3
 8012078:	260a      	movs	r6, #10
 801207a:	fb91 f5f6 	sdiv	r5, r1, r6
 801207e:	fb06 1115 	mls	r1, r6, r5, r1
 8012082:	3130      	adds	r1, #48	; 0x30
 8012084:	2d09      	cmp	r5, #9
 8012086:	f803 1c01 	strb.w	r1, [r3, #-1]
 801208a:	f103 32ff 	add.w	r2, r3, #4294967295
 801208e:	4629      	mov	r1, r5
 8012090:	dc09      	bgt.n	80120a6 <__exponent+0x4c>
 8012092:	3130      	adds	r1, #48	; 0x30
 8012094:	3b02      	subs	r3, #2
 8012096:	f802 1c01 	strb.w	r1, [r2, #-1]
 801209a:	42bb      	cmp	r3, r7
 801209c:	4622      	mov	r2, r4
 801209e:	d304      	bcc.n	80120aa <__exponent+0x50>
 80120a0:	1a10      	subs	r0, r2, r0
 80120a2:	b003      	add	sp, #12
 80120a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120a6:	4613      	mov	r3, r2
 80120a8:	e7e7      	b.n	801207a <__exponent+0x20>
 80120aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120ae:	f804 2b01 	strb.w	r2, [r4], #1
 80120b2:	e7f2      	b.n	801209a <__exponent+0x40>
 80120b4:	2330      	movs	r3, #48	; 0x30
 80120b6:	4419      	add	r1, r3
 80120b8:	7083      	strb	r3, [r0, #2]
 80120ba:	1d02      	adds	r2, r0, #4
 80120bc:	70c1      	strb	r1, [r0, #3]
 80120be:	e7ef      	b.n	80120a0 <__exponent+0x46>

080120c0 <_printf_float>:
 80120c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c4:	b08d      	sub	sp, #52	; 0x34
 80120c6:	460c      	mov	r4, r1
 80120c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80120cc:	4616      	mov	r6, r2
 80120ce:	461f      	mov	r7, r3
 80120d0:	4605      	mov	r5, r0
 80120d2:	f003 f963 	bl	801539c <_localeconv_r>
 80120d6:	6803      	ldr	r3, [r0, #0]
 80120d8:	9304      	str	r3, [sp, #16]
 80120da:	4618      	mov	r0, r3
 80120dc:	f7ee f888 	bl	80001f0 <strlen>
 80120e0:	2300      	movs	r3, #0
 80120e2:	930a      	str	r3, [sp, #40]	; 0x28
 80120e4:	f8d8 3000 	ldr.w	r3, [r8]
 80120e8:	9005      	str	r0, [sp, #20]
 80120ea:	3307      	adds	r3, #7
 80120ec:	f023 0307 	bic.w	r3, r3, #7
 80120f0:	f103 0208 	add.w	r2, r3, #8
 80120f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80120f8:	f8d4 b000 	ldr.w	fp, [r4]
 80120fc:	f8c8 2000 	str.w	r2, [r8]
 8012100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012104:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012108:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801210c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012110:	9307      	str	r3, [sp, #28]
 8012112:	f8cd 8018 	str.w	r8, [sp, #24]
 8012116:	f04f 32ff 	mov.w	r2, #4294967295
 801211a:	4ba7      	ldr	r3, [pc, #668]	; (80123b8 <_printf_float+0x2f8>)
 801211c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012120:	f7ee fd14 	bl	8000b4c <__aeabi_dcmpun>
 8012124:	bb70      	cbnz	r0, 8012184 <_printf_float+0xc4>
 8012126:	f04f 32ff 	mov.w	r2, #4294967295
 801212a:	4ba3      	ldr	r3, [pc, #652]	; (80123b8 <_printf_float+0x2f8>)
 801212c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012130:	f7ee fcee 	bl	8000b10 <__aeabi_dcmple>
 8012134:	bb30      	cbnz	r0, 8012184 <_printf_float+0xc4>
 8012136:	2200      	movs	r2, #0
 8012138:	2300      	movs	r3, #0
 801213a:	4640      	mov	r0, r8
 801213c:	4649      	mov	r1, r9
 801213e:	f7ee fcdd 	bl	8000afc <__aeabi_dcmplt>
 8012142:	b110      	cbz	r0, 801214a <_printf_float+0x8a>
 8012144:	232d      	movs	r3, #45	; 0x2d
 8012146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801214a:	4a9c      	ldr	r2, [pc, #624]	; (80123bc <_printf_float+0x2fc>)
 801214c:	4b9c      	ldr	r3, [pc, #624]	; (80123c0 <_printf_float+0x300>)
 801214e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012152:	bf8c      	ite	hi
 8012154:	4690      	movhi	r8, r2
 8012156:	4698      	movls	r8, r3
 8012158:	2303      	movs	r3, #3
 801215a:	f02b 0204 	bic.w	r2, fp, #4
 801215e:	6123      	str	r3, [r4, #16]
 8012160:	6022      	str	r2, [r4, #0]
 8012162:	f04f 0900 	mov.w	r9, #0
 8012166:	9700      	str	r7, [sp, #0]
 8012168:	4633      	mov	r3, r6
 801216a:	aa0b      	add	r2, sp, #44	; 0x2c
 801216c:	4621      	mov	r1, r4
 801216e:	4628      	mov	r0, r5
 8012170:	f000 f9e6 	bl	8012540 <_printf_common>
 8012174:	3001      	adds	r0, #1
 8012176:	f040 808d 	bne.w	8012294 <_printf_float+0x1d4>
 801217a:	f04f 30ff 	mov.w	r0, #4294967295
 801217e:	b00d      	add	sp, #52	; 0x34
 8012180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012184:	4642      	mov	r2, r8
 8012186:	464b      	mov	r3, r9
 8012188:	4640      	mov	r0, r8
 801218a:	4649      	mov	r1, r9
 801218c:	f7ee fcde 	bl	8000b4c <__aeabi_dcmpun>
 8012190:	b110      	cbz	r0, 8012198 <_printf_float+0xd8>
 8012192:	4a8c      	ldr	r2, [pc, #560]	; (80123c4 <_printf_float+0x304>)
 8012194:	4b8c      	ldr	r3, [pc, #560]	; (80123c8 <_printf_float+0x308>)
 8012196:	e7da      	b.n	801214e <_printf_float+0x8e>
 8012198:	6861      	ldr	r1, [r4, #4]
 801219a:	1c4b      	adds	r3, r1, #1
 801219c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80121a0:	a80a      	add	r0, sp, #40	; 0x28
 80121a2:	d13e      	bne.n	8012222 <_printf_float+0x162>
 80121a4:	2306      	movs	r3, #6
 80121a6:	6063      	str	r3, [r4, #4]
 80121a8:	2300      	movs	r3, #0
 80121aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80121ae:	ab09      	add	r3, sp, #36	; 0x24
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	ec49 8b10 	vmov	d0, r8, r9
 80121b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80121ba:	6022      	str	r2, [r4, #0]
 80121bc:	f8cd a004 	str.w	sl, [sp, #4]
 80121c0:	6861      	ldr	r1, [r4, #4]
 80121c2:	4628      	mov	r0, r5
 80121c4:	f7ff fee8 	bl	8011f98 <__cvt>
 80121c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80121cc:	2b47      	cmp	r3, #71	; 0x47
 80121ce:	4680      	mov	r8, r0
 80121d0:	d109      	bne.n	80121e6 <_printf_float+0x126>
 80121d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121d4:	1cd8      	adds	r0, r3, #3
 80121d6:	db02      	blt.n	80121de <_printf_float+0x11e>
 80121d8:	6862      	ldr	r2, [r4, #4]
 80121da:	4293      	cmp	r3, r2
 80121dc:	dd47      	ble.n	801226e <_printf_float+0x1ae>
 80121de:	f1aa 0a02 	sub.w	sl, sl, #2
 80121e2:	fa5f fa8a 	uxtb.w	sl, sl
 80121e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80121ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121ec:	d824      	bhi.n	8012238 <_printf_float+0x178>
 80121ee:	3901      	subs	r1, #1
 80121f0:	4652      	mov	r2, sl
 80121f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121f6:	9109      	str	r1, [sp, #36]	; 0x24
 80121f8:	f7ff ff2f 	bl	801205a <__exponent>
 80121fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121fe:	1813      	adds	r3, r2, r0
 8012200:	2a01      	cmp	r2, #1
 8012202:	4681      	mov	r9, r0
 8012204:	6123      	str	r3, [r4, #16]
 8012206:	dc02      	bgt.n	801220e <_printf_float+0x14e>
 8012208:	6822      	ldr	r2, [r4, #0]
 801220a:	07d1      	lsls	r1, r2, #31
 801220c:	d501      	bpl.n	8012212 <_printf_float+0x152>
 801220e:	3301      	adds	r3, #1
 8012210:	6123      	str	r3, [r4, #16]
 8012212:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012216:	2b00      	cmp	r3, #0
 8012218:	d0a5      	beq.n	8012166 <_printf_float+0xa6>
 801221a:	232d      	movs	r3, #45	; 0x2d
 801221c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012220:	e7a1      	b.n	8012166 <_printf_float+0xa6>
 8012222:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012226:	f000 8177 	beq.w	8012518 <_printf_float+0x458>
 801222a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801222e:	d1bb      	bne.n	80121a8 <_printf_float+0xe8>
 8012230:	2900      	cmp	r1, #0
 8012232:	d1b9      	bne.n	80121a8 <_printf_float+0xe8>
 8012234:	2301      	movs	r3, #1
 8012236:	e7b6      	b.n	80121a6 <_printf_float+0xe6>
 8012238:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801223c:	d119      	bne.n	8012272 <_printf_float+0x1b2>
 801223e:	2900      	cmp	r1, #0
 8012240:	6863      	ldr	r3, [r4, #4]
 8012242:	dd0c      	ble.n	801225e <_printf_float+0x19e>
 8012244:	6121      	str	r1, [r4, #16]
 8012246:	b913      	cbnz	r3, 801224e <_printf_float+0x18e>
 8012248:	6822      	ldr	r2, [r4, #0]
 801224a:	07d2      	lsls	r2, r2, #31
 801224c:	d502      	bpl.n	8012254 <_printf_float+0x194>
 801224e:	3301      	adds	r3, #1
 8012250:	440b      	add	r3, r1
 8012252:	6123      	str	r3, [r4, #16]
 8012254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012256:	65a3      	str	r3, [r4, #88]	; 0x58
 8012258:	f04f 0900 	mov.w	r9, #0
 801225c:	e7d9      	b.n	8012212 <_printf_float+0x152>
 801225e:	b913      	cbnz	r3, 8012266 <_printf_float+0x1a6>
 8012260:	6822      	ldr	r2, [r4, #0]
 8012262:	07d0      	lsls	r0, r2, #31
 8012264:	d501      	bpl.n	801226a <_printf_float+0x1aa>
 8012266:	3302      	adds	r3, #2
 8012268:	e7f3      	b.n	8012252 <_printf_float+0x192>
 801226a:	2301      	movs	r3, #1
 801226c:	e7f1      	b.n	8012252 <_printf_float+0x192>
 801226e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012272:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012276:	4293      	cmp	r3, r2
 8012278:	db05      	blt.n	8012286 <_printf_float+0x1c6>
 801227a:	6822      	ldr	r2, [r4, #0]
 801227c:	6123      	str	r3, [r4, #16]
 801227e:	07d1      	lsls	r1, r2, #31
 8012280:	d5e8      	bpl.n	8012254 <_printf_float+0x194>
 8012282:	3301      	adds	r3, #1
 8012284:	e7e5      	b.n	8012252 <_printf_float+0x192>
 8012286:	2b00      	cmp	r3, #0
 8012288:	bfd4      	ite	le
 801228a:	f1c3 0302 	rsble	r3, r3, #2
 801228e:	2301      	movgt	r3, #1
 8012290:	4413      	add	r3, r2
 8012292:	e7de      	b.n	8012252 <_printf_float+0x192>
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	055a      	lsls	r2, r3, #21
 8012298:	d407      	bmi.n	80122aa <_printf_float+0x1ea>
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	4642      	mov	r2, r8
 801229e:	4631      	mov	r1, r6
 80122a0:	4628      	mov	r0, r5
 80122a2:	47b8      	blx	r7
 80122a4:	3001      	adds	r0, #1
 80122a6:	d12b      	bne.n	8012300 <_printf_float+0x240>
 80122a8:	e767      	b.n	801217a <_printf_float+0xba>
 80122aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80122ae:	f240 80dc 	bls.w	801246a <_printf_float+0x3aa>
 80122b2:	2200      	movs	r2, #0
 80122b4:	2300      	movs	r3, #0
 80122b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122ba:	f7ee fc15 	bl	8000ae8 <__aeabi_dcmpeq>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d033      	beq.n	801232a <_printf_float+0x26a>
 80122c2:	2301      	movs	r3, #1
 80122c4:	4a41      	ldr	r2, [pc, #260]	; (80123cc <_printf_float+0x30c>)
 80122c6:	4631      	mov	r1, r6
 80122c8:	4628      	mov	r0, r5
 80122ca:	47b8      	blx	r7
 80122cc:	3001      	adds	r0, #1
 80122ce:	f43f af54 	beq.w	801217a <_printf_float+0xba>
 80122d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122d6:	429a      	cmp	r2, r3
 80122d8:	db02      	blt.n	80122e0 <_printf_float+0x220>
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	07d8      	lsls	r0, r3, #31
 80122de:	d50f      	bpl.n	8012300 <_printf_float+0x240>
 80122e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122e4:	4631      	mov	r1, r6
 80122e6:	4628      	mov	r0, r5
 80122e8:	47b8      	blx	r7
 80122ea:	3001      	adds	r0, #1
 80122ec:	f43f af45 	beq.w	801217a <_printf_float+0xba>
 80122f0:	f04f 0800 	mov.w	r8, #0
 80122f4:	f104 091a 	add.w	r9, r4, #26
 80122f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122fa:	3b01      	subs	r3, #1
 80122fc:	4543      	cmp	r3, r8
 80122fe:	dc09      	bgt.n	8012314 <_printf_float+0x254>
 8012300:	6823      	ldr	r3, [r4, #0]
 8012302:	079b      	lsls	r3, r3, #30
 8012304:	f100 8103 	bmi.w	801250e <_printf_float+0x44e>
 8012308:	68e0      	ldr	r0, [r4, #12]
 801230a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801230c:	4298      	cmp	r0, r3
 801230e:	bfb8      	it	lt
 8012310:	4618      	movlt	r0, r3
 8012312:	e734      	b.n	801217e <_printf_float+0xbe>
 8012314:	2301      	movs	r3, #1
 8012316:	464a      	mov	r2, r9
 8012318:	4631      	mov	r1, r6
 801231a:	4628      	mov	r0, r5
 801231c:	47b8      	blx	r7
 801231e:	3001      	adds	r0, #1
 8012320:	f43f af2b 	beq.w	801217a <_printf_float+0xba>
 8012324:	f108 0801 	add.w	r8, r8, #1
 8012328:	e7e6      	b.n	80122f8 <_printf_float+0x238>
 801232a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801232c:	2b00      	cmp	r3, #0
 801232e:	dc2b      	bgt.n	8012388 <_printf_float+0x2c8>
 8012330:	2301      	movs	r3, #1
 8012332:	4a26      	ldr	r2, [pc, #152]	; (80123cc <_printf_float+0x30c>)
 8012334:	4631      	mov	r1, r6
 8012336:	4628      	mov	r0, r5
 8012338:	47b8      	blx	r7
 801233a:	3001      	adds	r0, #1
 801233c:	f43f af1d 	beq.w	801217a <_printf_float+0xba>
 8012340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012342:	b923      	cbnz	r3, 801234e <_printf_float+0x28e>
 8012344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012346:	b913      	cbnz	r3, 801234e <_printf_float+0x28e>
 8012348:	6823      	ldr	r3, [r4, #0]
 801234a:	07d9      	lsls	r1, r3, #31
 801234c:	d5d8      	bpl.n	8012300 <_printf_float+0x240>
 801234e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012352:	4631      	mov	r1, r6
 8012354:	4628      	mov	r0, r5
 8012356:	47b8      	blx	r7
 8012358:	3001      	adds	r0, #1
 801235a:	f43f af0e 	beq.w	801217a <_printf_float+0xba>
 801235e:	f04f 0900 	mov.w	r9, #0
 8012362:	f104 0a1a 	add.w	sl, r4, #26
 8012366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012368:	425b      	negs	r3, r3
 801236a:	454b      	cmp	r3, r9
 801236c:	dc01      	bgt.n	8012372 <_printf_float+0x2b2>
 801236e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012370:	e794      	b.n	801229c <_printf_float+0x1dc>
 8012372:	2301      	movs	r3, #1
 8012374:	4652      	mov	r2, sl
 8012376:	4631      	mov	r1, r6
 8012378:	4628      	mov	r0, r5
 801237a:	47b8      	blx	r7
 801237c:	3001      	adds	r0, #1
 801237e:	f43f aefc 	beq.w	801217a <_printf_float+0xba>
 8012382:	f109 0901 	add.w	r9, r9, #1
 8012386:	e7ee      	b.n	8012366 <_printf_float+0x2a6>
 8012388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801238a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801238c:	429a      	cmp	r2, r3
 801238e:	bfa8      	it	ge
 8012390:	461a      	movge	r2, r3
 8012392:	2a00      	cmp	r2, #0
 8012394:	4691      	mov	r9, r2
 8012396:	dd07      	ble.n	80123a8 <_printf_float+0x2e8>
 8012398:	4613      	mov	r3, r2
 801239a:	4631      	mov	r1, r6
 801239c:	4642      	mov	r2, r8
 801239e:	4628      	mov	r0, r5
 80123a0:	47b8      	blx	r7
 80123a2:	3001      	adds	r0, #1
 80123a4:	f43f aee9 	beq.w	801217a <_printf_float+0xba>
 80123a8:	f104 031a 	add.w	r3, r4, #26
 80123ac:	f04f 0b00 	mov.w	fp, #0
 80123b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123b4:	9306      	str	r3, [sp, #24]
 80123b6:	e015      	b.n	80123e4 <_printf_float+0x324>
 80123b8:	7fefffff 	.word	0x7fefffff
 80123bc:	080165a8 	.word	0x080165a8
 80123c0:	080165a4 	.word	0x080165a4
 80123c4:	080165b0 	.word	0x080165b0
 80123c8:	080165ac 	.word	0x080165ac
 80123cc:	080165b4 	.word	0x080165b4
 80123d0:	2301      	movs	r3, #1
 80123d2:	9a06      	ldr	r2, [sp, #24]
 80123d4:	4631      	mov	r1, r6
 80123d6:	4628      	mov	r0, r5
 80123d8:	47b8      	blx	r7
 80123da:	3001      	adds	r0, #1
 80123dc:	f43f aecd 	beq.w	801217a <_printf_float+0xba>
 80123e0:	f10b 0b01 	add.w	fp, fp, #1
 80123e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80123e8:	ebaa 0309 	sub.w	r3, sl, r9
 80123ec:	455b      	cmp	r3, fp
 80123ee:	dcef      	bgt.n	80123d0 <_printf_float+0x310>
 80123f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123f4:	429a      	cmp	r2, r3
 80123f6:	44d0      	add	r8, sl
 80123f8:	db15      	blt.n	8012426 <_printf_float+0x366>
 80123fa:	6823      	ldr	r3, [r4, #0]
 80123fc:	07da      	lsls	r2, r3, #31
 80123fe:	d412      	bmi.n	8012426 <_printf_float+0x366>
 8012400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012404:	eba3 020a 	sub.w	r2, r3, sl
 8012408:	eba3 0a01 	sub.w	sl, r3, r1
 801240c:	4592      	cmp	sl, r2
 801240e:	bfa8      	it	ge
 8012410:	4692      	movge	sl, r2
 8012412:	f1ba 0f00 	cmp.w	sl, #0
 8012416:	dc0e      	bgt.n	8012436 <_printf_float+0x376>
 8012418:	f04f 0800 	mov.w	r8, #0
 801241c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012420:	f104 091a 	add.w	r9, r4, #26
 8012424:	e019      	b.n	801245a <_printf_float+0x39a>
 8012426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801242a:	4631      	mov	r1, r6
 801242c:	4628      	mov	r0, r5
 801242e:	47b8      	blx	r7
 8012430:	3001      	adds	r0, #1
 8012432:	d1e5      	bne.n	8012400 <_printf_float+0x340>
 8012434:	e6a1      	b.n	801217a <_printf_float+0xba>
 8012436:	4653      	mov	r3, sl
 8012438:	4642      	mov	r2, r8
 801243a:	4631      	mov	r1, r6
 801243c:	4628      	mov	r0, r5
 801243e:	47b8      	blx	r7
 8012440:	3001      	adds	r0, #1
 8012442:	d1e9      	bne.n	8012418 <_printf_float+0x358>
 8012444:	e699      	b.n	801217a <_printf_float+0xba>
 8012446:	2301      	movs	r3, #1
 8012448:	464a      	mov	r2, r9
 801244a:	4631      	mov	r1, r6
 801244c:	4628      	mov	r0, r5
 801244e:	47b8      	blx	r7
 8012450:	3001      	adds	r0, #1
 8012452:	f43f ae92 	beq.w	801217a <_printf_float+0xba>
 8012456:	f108 0801 	add.w	r8, r8, #1
 801245a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801245e:	1a9b      	subs	r3, r3, r2
 8012460:	eba3 030a 	sub.w	r3, r3, sl
 8012464:	4543      	cmp	r3, r8
 8012466:	dcee      	bgt.n	8012446 <_printf_float+0x386>
 8012468:	e74a      	b.n	8012300 <_printf_float+0x240>
 801246a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801246c:	2a01      	cmp	r2, #1
 801246e:	dc01      	bgt.n	8012474 <_printf_float+0x3b4>
 8012470:	07db      	lsls	r3, r3, #31
 8012472:	d53a      	bpl.n	80124ea <_printf_float+0x42a>
 8012474:	2301      	movs	r3, #1
 8012476:	4642      	mov	r2, r8
 8012478:	4631      	mov	r1, r6
 801247a:	4628      	mov	r0, r5
 801247c:	47b8      	blx	r7
 801247e:	3001      	adds	r0, #1
 8012480:	f43f ae7b 	beq.w	801217a <_printf_float+0xba>
 8012484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012488:	4631      	mov	r1, r6
 801248a:	4628      	mov	r0, r5
 801248c:	47b8      	blx	r7
 801248e:	3001      	adds	r0, #1
 8012490:	f108 0801 	add.w	r8, r8, #1
 8012494:	f43f ae71 	beq.w	801217a <_printf_float+0xba>
 8012498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801249a:	2200      	movs	r2, #0
 801249c:	f103 3aff 	add.w	sl, r3, #4294967295
 80124a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80124a4:	2300      	movs	r3, #0
 80124a6:	f7ee fb1f 	bl	8000ae8 <__aeabi_dcmpeq>
 80124aa:	b9c8      	cbnz	r0, 80124e0 <_printf_float+0x420>
 80124ac:	4653      	mov	r3, sl
 80124ae:	4642      	mov	r2, r8
 80124b0:	4631      	mov	r1, r6
 80124b2:	4628      	mov	r0, r5
 80124b4:	47b8      	blx	r7
 80124b6:	3001      	adds	r0, #1
 80124b8:	d10e      	bne.n	80124d8 <_printf_float+0x418>
 80124ba:	e65e      	b.n	801217a <_printf_float+0xba>
 80124bc:	2301      	movs	r3, #1
 80124be:	4652      	mov	r2, sl
 80124c0:	4631      	mov	r1, r6
 80124c2:	4628      	mov	r0, r5
 80124c4:	47b8      	blx	r7
 80124c6:	3001      	adds	r0, #1
 80124c8:	f43f ae57 	beq.w	801217a <_printf_float+0xba>
 80124cc:	f108 0801 	add.w	r8, r8, #1
 80124d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124d2:	3b01      	subs	r3, #1
 80124d4:	4543      	cmp	r3, r8
 80124d6:	dcf1      	bgt.n	80124bc <_printf_float+0x3fc>
 80124d8:	464b      	mov	r3, r9
 80124da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80124de:	e6de      	b.n	801229e <_printf_float+0x1de>
 80124e0:	f04f 0800 	mov.w	r8, #0
 80124e4:	f104 0a1a 	add.w	sl, r4, #26
 80124e8:	e7f2      	b.n	80124d0 <_printf_float+0x410>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e7df      	b.n	80124ae <_printf_float+0x3ee>
 80124ee:	2301      	movs	r3, #1
 80124f0:	464a      	mov	r2, r9
 80124f2:	4631      	mov	r1, r6
 80124f4:	4628      	mov	r0, r5
 80124f6:	47b8      	blx	r7
 80124f8:	3001      	adds	r0, #1
 80124fa:	f43f ae3e 	beq.w	801217a <_printf_float+0xba>
 80124fe:	f108 0801 	add.w	r8, r8, #1
 8012502:	68e3      	ldr	r3, [r4, #12]
 8012504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012506:	1a9b      	subs	r3, r3, r2
 8012508:	4543      	cmp	r3, r8
 801250a:	dcf0      	bgt.n	80124ee <_printf_float+0x42e>
 801250c:	e6fc      	b.n	8012308 <_printf_float+0x248>
 801250e:	f04f 0800 	mov.w	r8, #0
 8012512:	f104 0919 	add.w	r9, r4, #25
 8012516:	e7f4      	b.n	8012502 <_printf_float+0x442>
 8012518:	2900      	cmp	r1, #0
 801251a:	f43f ae8b 	beq.w	8012234 <_printf_float+0x174>
 801251e:	2300      	movs	r3, #0
 8012520:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012524:	ab09      	add	r3, sp, #36	; 0x24
 8012526:	9300      	str	r3, [sp, #0]
 8012528:	ec49 8b10 	vmov	d0, r8, r9
 801252c:	6022      	str	r2, [r4, #0]
 801252e:	f8cd a004 	str.w	sl, [sp, #4]
 8012532:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012536:	4628      	mov	r0, r5
 8012538:	f7ff fd2e 	bl	8011f98 <__cvt>
 801253c:	4680      	mov	r8, r0
 801253e:	e648      	b.n	80121d2 <_printf_float+0x112>

08012540 <_printf_common>:
 8012540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012544:	4691      	mov	r9, r2
 8012546:	461f      	mov	r7, r3
 8012548:	688a      	ldr	r2, [r1, #8]
 801254a:	690b      	ldr	r3, [r1, #16]
 801254c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012550:	4293      	cmp	r3, r2
 8012552:	bfb8      	it	lt
 8012554:	4613      	movlt	r3, r2
 8012556:	f8c9 3000 	str.w	r3, [r9]
 801255a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801255e:	4606      	mov	r6, r0
 8012560:	460c      	mov	r4, r1
 8012562:	b112      	cbz	r2, 801256a <_printf_common+0x2a>
 8012564:	3301      	adds	r3, #1
 8012566:	f8c9 3000 	str.w	r3, [r9]
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	0699      	lsls	r1, r3, #26
 801256e:	bf42      	ittt	mi
 8012570:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012574:	3302      	addmi	r3, #2
 8012576:	f8c9 3000 	strmi.w	r3, [r9]
 801257a:	6825      	ldr	r5, [r4, #0]
 801257c:	f015 0506 	ands.w	r5, r5, #6
 8012580:	d107      	bne.n	8012592 <_printf_common+0x52>
 8012582:	f104 0a19 	add.w	sl, r4, #25
 8012586:	68e3      	ldr	r3, [r4, #12]
 8012588:	f8d9 2000 	ldr.w	r2, [r9]
 801258c:	1a9b      	subs	r3, r3, r2
 801258e:	42ab      	cmp	r3, r5
 8012590:	dc28      	bgt.n	80125e4 <_printf_common+0xa4>
 8012592:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012596:	6822      	ldr	r2, [r4, #0]
 8012598:	3300      	adds	r3, #0
 801259a:	bf18      	it	ne
 801259c:	2301      	movne	r3, #1
 801259e:	0692      	lsls	r2, r2, #26
 80125a0:	d42d      	bmi.n	80125fe <_printf_common+0xbe>
 80125a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80125a6:	4639      	mov	r1, r7
 80125a8:	4630      	mov	r0, r6
 80125aa:	47c0      	blx	r8
 80125ac:	3001      	adds	r0, #1
 80125ae:	d020      	beq.n	80125f2 <_printf_common+0xb2>
 80125b0:	6823      	ldr	r3, [r4, #0]
 80125b2:	68e5      	ldr	r5, [r4, #12]
 80125b4:	f8d9 2000 	ldr.w	r2, [r9]
 80125b8:	f003 0306 	and.w	r3, r3, #6
 80125bc:	2b04      	cmp	r3, #4
 80125be:	bf08      	it	eq
 80125c0:	1aad      	subeq	r5, r5, r2
 80125c2:	68a3      	ldr	r3, [r4, #8]
 80125c4:	6922      	ldr	r2, [r4, #16]
 80125c6:	bf0c      	ite	eq
 80125c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125cc:	2500      	movne	r5, #0
 80125ce:	4293      	cmp	r3, r2
 80125d0:	bfc4      	itt	gt
 80125d2:	1a9b      	subgt	r3, r3, r2
 80125d4:	18ed      	addgt	r5, r5, r3
 80125d6:	f04f 0900 	mov.w	r9, #0
 80125da:	341a      	adds	r4, #26
 80125dc:	454d      	cmp	r5, r9
 80125de:	d11a      	bne.n	8012616 <_printf_common+0xd6>
 80125e0:	2000      	movs	r0, #0
 80125e2:	e008      	b.n	80125f6 <_printf_common+0xb6>
 80125e4:	2301      	movs	r3, #1
 80125e6:	4652      	mov	r2, sl
 80125e8:	4639      	mov	r1, r7
 80125ea:	4630      	mov	r0, r6
 80125ec:	47c0      	blx	r8
 80125ee:	3001      	adds	r0, #1
 80125f0:	d103      	bne.n	80125fa <_printf_common+0xba>
 80125f2:	f04f 30ff 	mov.w	r0, #4294967295
 80125f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125fa:	3501      	adds	r5, #1
 80125fc:	e7c3      	b.n	8012586 <_printf_common+0x46>
 80125fe:	18e1      	adds	r1, r4, r3
 8012600:	1c5a      	adds	r2, r3, #1
 8012602:	2030      	movs	r0, #48	; 0x30
 8012604:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012608:	4422      	add	r2, r4
 801260a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801260e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012612:	3302      	adds	r3, #2
 8012614:	e7c5      	b.n	80125a2 <_printf_common+0x62>
 8012616:	2301      	movs	r3, #1
 8012618:	4622      	mov	r2, r4
 801261a:	4639      	mov	r1, r7
 801261c:	4630      	mov	r0, r6
 801261e:	47c0      	blx	r8
 8012620:	3001      	adds	r0, #1
 8012622:	d0e6      	beq.n	80125f2 <_printf_common+0xb2>
 8012624:	f109 0901 	add.w	r9, r9, #1
 8012628:	e7d8      	b.n	80125dc <_printf_common+0x9c>
	...

0801262c <_printf_i>:
 801262c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012630:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012634:	460c      	mov	r4, r1
 8012636:	7e09      	ldrb	r1, [r1, #24]
 8012638:	b085      	sub	sp, #20
 801263a:	296e      	cmp	r1, #110	; 0x6e
 801263c:	4617      	mov	r7, r2
 801263e:	4606      	mov	r6, r0
 8012640:	4698      	mov	r8, r3
 8012642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012644:	f000 80b3 	beq.w	80127ae <_printf_i+0x182>
 8012648:	d822      	bhi.n	8012690 <_printf_i+0x64>
 801264a:	2963      	cmp	r1, #99	; 0x63
 801264c:	d036      	beq.n	80126bc <_printf_i+0x90>
 801264e:	d80a      	bhi.n	8012666 <_printf_i+0x3a>
 8012650:	2900      	cmp	r1, #0
 8012652:	f000 80b9 	beq.w	80127c8 <_printf_i+0x19c>
 8012656:	2958      	cmp	r1, #88	; 0x58
 8012658:	f000 8083 	beq.w	8012762 <_printf_i+0x136>
 801265c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012660:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012664:	e032      	b.n	80126cc <_printf_i+0xa0>
 8012666:	2964      	cmp	r1, #100	; 0x64
 8012668:	d001      	beq.n	801266e <_printf_i+0x42>
 801266a:	2969      	cmp	r1, #105	; 0x69
 801266c:	d1f6      	bne.n	801265c <_printf_i+0x30>
 801266e:	6820      	ldr	r0, [r4, #0]
 8012670:	6813      	ldr	r3, [r2, #0]
 8012672:	0605      	lsls	r5, r0, #24
 8012674:	f103 0104 	add.w	r1, r3, #4
 8012678:	d52a      	bpl.n	80126d0 <_printf_i+0xa4>
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6011      	str	r1, [r2, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	da03      	bge.n	801268a <_printf_i+0x5e>
 8012682:	222d      	movs	r2, #45	; 0x2d
 8012684:	425b      	negs	r3, r3
 8012686:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801268a:	486f      	ldr	r0, [pc, #444]	; (8012848 <_printf_i+0x21c>)
 801268c:	220a      	movs	r2, #10
 801268e:	e039      	b.n	8012704 <_printf_i+0xd8>
 8012690:	2973      	cmp	r1, #115	; 0x73
 8012692:	f000 809d 	beq.w	80127d0 <_printf_i+0x1a4>
 8012696:	d808      	bhi.n	80126aa <_printf_i+0x7e>
 8012698:	296f      	cmp	r1, #111	; 0x6f
 801269a:	d020      	beq.n	80126de <_printf_i+0xb2>
 801269c:	2970      	cmp	r1, #112	; 0x70
 801269e:	d1dd      	bne.n	801265c <_printf_i+0x30>
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	f043 0320 	orr.w	r3, r3, #32
 80126a6:	6023      	str	r3, [r4, #0]
 80126a8:	e003      	b.n	80126b2 <_printf_i+0x86>
 80126aa:	2975      	cmp	r1, #117	; 0x75
 80126ac:	d017      	beq.n	80126de <_printf_i+0xb2>
 80126ae:	2978      	cmp	r1, #120	; 0x78
 80126b0:	d1d4      	bne.n	801265c <_printf_i+0x30>
 80126b2:	2378      	movs	r3, #120	; 0x78
 80126b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80126b8:	4864      	ldr	r0, [pc, #400]	; (801284c <_printf_i+0x220>)
 80126ba:	e055      	b.n	8012768 <_printf_i+0x13c>
 80126bc:	6813      	ldr	r3, [r2, #0]
 80126be:	1d19      	adds	r1, r3, #4
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	6011      	str	r1, [r2, #0]
 80126c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80126cc:	2301      	movs	r3, #1
 80126ce:	e08c      	b.n	80127ea <_printf_i+0x1be>
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	6011      	str	r1, [r2, #0]
 80126d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80126d8:	bf18      	it	ne
 80126da:	b21b      	sxthne	r3, r3
 80126dc:	e7cf      	b.n	801267e <_printf_i+0x52>
 80126de:	6813      	ldr	r3, [r2, #0]
 80126e0:	6825      	ldr	r5, [r4, #0]
 80126e2:	1d18      	adds	r0, r3, #4
 80126e4:	6010      	str	r0, [r2, #0]
 80126e6:	0628      	lsls	r0, r5, #24
 80126e8:	d501      	bpl.n	80126ee <_printf_i+0xc2>
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	e002      	b.n	80126f4 <_printf_i+0xc8>
 80126ee:	0668      	lsls	r0, r5, #25
 80126f0:	d5fb      	bpl.n	80126ea <_printf_i+0xbe>
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	4854      	ldr	r0, [pc, #336]	; (8012848 <_printf_i+0x21c>)
 80126f6:	296f      	cmp	r1, #111	; 0x6f
 80126f8:	bf14      	ite	ne
 80126fa:	220a      	movne	r2, #10
 80126fc:	2208      	moveq	r2, #8
 80126fe:	2100      	movs	r1, #0
 8012700:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012704:	6865      	ldr	r5, [r4, #4]
 8012706:	60a5      	str	r5, [r4, #8]
 8012708:	2d00      	cmp	r5, #0
 801270a:	f2c0 8095 	blt.w	8012838 <_printf_i+0x20c>
 801270e:	6821      	ldr	r1, [r4, #0]
 8012710:	f021 0104 	bic.w	r1, r1, #4
 8012714:	6021      	str	r1, [r4, #0]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d13d      	bne.n	8012796 <_printf_i+0x16a>
 801271a:	2d00      	cmp	r5, #0
 801271c:	f040 808e 	bne.w	801283c <_printf_i+0x210>
 8012720:	4665      	mov	r5, ip
 8012722:	2a08      	cmp	r2, #8
 8012724:	d10b      	bne.n	801273e <_printf_i+0x112>
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	07db      	lsls	r3, r3, #31
 801272a:	d508      	bpl.n	801273e <_printf_i+0x112>
 801272c:	6923      	ldr	r3, [r4, #16]
 801272e:	6862      	ldr	r2, [r4, #4]
 8012730:	429a      	cmp	r2, r3
 8012732:	bfde      	ittt	le
 8012734:	2330      	movle	r3, #48	; 0x30
 8012736:	f805 3c01 	strble.w	r3, [r5, #-1]
 801273a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801273e:	ebac 0305 	sub.w	r3, ip, r5
 8012742:	6123      	str	r3, [r4, #16]
 8012744:	f8cd 8000 	str.w	r8, [sp]
 8012748:	463b      	mov	r3, r7
 801274a:	aa03      	add	r2, sp, #12
 801274c:	4621      	mov	r1, r4
 801274e:	4630      	mov	r0, r6
 8012750:	f7ff fef6 	bl	8012540 <_printf_common>
 8012754:	3001      	adds	r0, #1
 8012756:	d14d      	bne.n	80127f4 <_printf_i+0x1c8>
 8012758:	f04f 30ff 	mov.w	r0, #4294967295
 801275c:	b005      	add	sp, #20
 801275e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012762:	4839      	ldr	r0, [pc, #228]	; (8012848 <_printf_i+0x21c>)
 8012764:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012768:	6813      	ldr	r3, [r2, #0]
 801276a:	6821      	ldr	r1, [r4, #0]
 801276c:	1d1d      	adds	r5, r3, #4
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	6015      	str	r5, [r2, #0]
 8012772:	060a      	lsls	r2, r1, #24
 8012774:	d50b      	bpl.n	801278e <_printf_i+0x162>
 8012776:	07ca      	lsls	r2, r1, #31
 8012778:	bf44      	itt	mi
 801277a:	f041 0120 	orrmi.w	r1, r1, #32
 801277e:	6021      	strmi	r1, [r4, #0]
 8012780:	b91b      	cbnz	r3, 801278a <_printf_i+0x15e>
 8012782:	6822      	ldr	r2, [r4, #0]
 8012784:	f022 0220 	bic.w	r2, r2, #32
 8012788:	6022      	str	r2, [r4, #0]
 801278a:	2210      	movs	r2, #16
 801278c:	e7b7      	b.n	80126fe <_printf_i+0xd2>
 801278e:	064d      	lsls	r5, r1, #25
 8012790:	bf48      	it	mi
 8012792:	b29b      	uxthmi	r3, r3
 8012794:	e7ef      	b.n	8012776 <_printf_i+0x14a>
 8012796:	4665      	mov	r5, ip
 8012798:	fbb3 f1f2 	udiv	r1, r3, r2
 801279c:	fb02 3311 	mls	r3, r2, r1, r3
 80127a0:	5cc3      	ldrb	r3, [r0, r3]
 80127a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80127a6:	460b      	mov	r3, r1
 80127a8:	2900      	cmp	r1, #0
 80127aa:	d1f5      	bne.n	8012798 <_printf_i+0x16c>
 80127ac:	e7b9      	b.n	8012722 <_printf_i+0xf6>
 80127ae:	6813      	ldr	r3, [r2, #0]
 80127b0:	6825      	ldr	r5, [r4, #0]
 80127b2:	6961      	ldr	r1, [r4, #20]
 80127b4:	1d18      	adds	r0, r3, #4
 80127b6:	6010      	str	r0, [r2, #0]
 80127b8:	0628      	lsls	r0, r5, #24
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	d501      	bpl.n	80127c2 <_printf_i+0x196>
 80127be:	6019      	str	r1, [r3, #0]
 80127c0:	e002      	b.n	80127c8 <_printf_i+0x19c>
 80127c2:	066a      	lsls	r2, r5, #25
 80127c4:	d5fb      	bpl.n	80127be <_printf_i+0x192>
 80127c6:	8019      	strh	r1, [r3, #0]
 80127c8:	2300      	movs	r3, #0
 80127ca:	6123      	str	r3, [r4, #16]
 80127cc:	4665      	mov	r5, ip
 80127ce:	e7b9      	b.n	8012744 <_printf_i+0x118>
 80127d0:	6813      	ldr	r3, [r2, #0]
 80127d2:	1d19      	adds	r1, r3, #4
 80127d4:	6011      	str	r1, [r2, #0]
 80127d6:	681d      	ldr	r5, [r3, #0]
 80127d8:	6862      	ldr	r2, [r4, #4]
 80127da:	2100      	movs	r1, #0
 80127dc:	4628      	mov	r0, r5
 80127de:	f7ed fd0f 	bl	8000200 <memchr>
 80127e2:	b108      	cbz	r0, 80127e8 <_printf_i+0x1bc>
 80127e4:	1b40      	subs	r0, r0, r5
 80127e6:	6060      	str	r0, [r4, #4]
 80127e8:	6863      	ldr	r3, [r4, #4]
 80127ea:	6123      	str	r3, [r4, #16]
 80127ec:	2300      	movs	r3, #0
 80127ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127f2:	e7a7      	b.n	8012744 <_printf_i+0x118>
 80127f4:	6923      	ldr	r3, [r4, #16]
 80127f6:	462a      	mov	r2, r5
 80127f8:	4639      	mov	r1, r7
 80127fa:	4630      	mov	r0, r6
 80127fc:	47c0      	blx	r8
 80127fe:	3001      	adds	r0, #1
 8012800:	d0aa      	beq.n	8012758 <_printf_i+0x12c>
 8012802:	6823      	ldr	r3, [r4, #0]
 8012804:	079b      	lsls	r3, r3, #30
 8012806:	d413      	bmi.n	8012830 <_printf_i+0x204>
 8012808:	68e0      	ldr	r0, [r4, #12]
 801280a:	9b03      	ldr	r3, [sp, #12]
 801280c:	4298      	cmp	r0, r3
 801280e:	bfb8      	it	lt
 8012810:	4618      	movlt	r0, r3
 8012812:	e7a3      	b.n	801275c <_printf_i+0x130>
 8012814:	2301      	movs	r3, #1
 8012816:	464a      	mov	r2, r9
 8012818:	4639      	mov	r1, r7
 801281a:	4630      	mov	r0, r6
 801281c:	47c0      	blx	r8
 801281e:	3001      	adds	r0, #1
 8012820:	d09a      	beq.n	8012758 <_printf_i+0x12c>
 8012822:	3501      	adds	r5, #1
 8012824:	68e3      	ldr	r3, [r4, #12]
 8012826:	9a03      	ldr	r2, [sp, #12]
 8012828:	1a9b      	subs	r3, r3, r2
 801282a:	42ab      	cmp	r3, r5
 801282c:	dcf2      	bgt.n	8012814 <_printf_i+0x1e8>
 801282e:	e7eb      	b.n	8012808 <_printf_i+0x1dc>
 8012830:	2500      	movs	r5, #0
 8012832:	f104 0919 	add.w	r9, r4, #25
 8012836:	e7f5      	b.n	8012824 <_printf_i+0x1f8>
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1ac      	bne.n	8012796 <_printf_i+0x16a>
 801283c:	7803      	ldrb	r3, [r0, #0]
 801283e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012842:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012846:	e76c      	b.n	8012722 <_printf_i+0xf6>
 8012848:	080165b6 	.word	0x080165b6
 801284c:	080165c7 	.word	0x080165c7

08012850 <_scanf_float>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	469a      	mov	sl, r3
 8012856:	688b      	ldr	r3, [r1, #8]
 8012858:	4616      	mov	r6, r2
 801285a:	1e5a      	subs	r2, r3, #1
 801285c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012860:	b087      	sub	sp, #28
 8012862:	bf83      	ittte	hi
 8012864:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012868:	189b      	addhi	r3, r3, r2
 801286a:	9301      	strhi	r3, [sp, #4]
 801286c:	2300      	movls	r3, #0
 801286e:	bf86      	itte	hi
 8012870:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012874:	608b      	strhi	r3, [r1, #8]
 8012876:	9301      	strls	r3, [sp, #4]
 8012878:	680b      	ldr	r3, [r1, #0]
 801287a:	4688      	mov	r8, r1
 801287c:	f04f 0b00 	mov.w	fp, #0
 8012880:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012884:	f848 3b1c 	str.w	r3, [r8], #28
 8012888:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801288c:	4607      	mov	r7, r0
 801288e:	460c      	mov	r4, r1
 8012890:	4645      	mov	r5, r8
 8012892:	465a      	mov	r2, fp
 8012894:	46d9      	mov	r9, fp
 8012896:	f8cd b008 	str.w	fp, [sp, #8]
 801289a:	68a1      	ldr	r1, [r4, #8]
 801289c:	b181      	cbz	r1, 80128c0 <_scanf_float+0x70>
 801289e:	6833      	ldr	r3, [r6, #0]
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	2b49      	cmp	r3, #73	; 0x49
 80128a4:	d071      	beq.n	801298a <_scanf_float+0x13a>
 80128a6:	d84d      	bhi.n	8012944 <_scanf_float+0xf4>
 80128a8:	2b39      	cmp	r3, #57	; 0x39
 80128aa:	d840      	bhi.n	801292e <_scanf_float+0xde>
 80128ac:	2b31      	cmp	r3, #49	; 0x31
 80128ae:	f080 8088 	bcs.w	80129c2 <_scanf_float+0x172>
 80128b2:	2b2d      	cmp	r3, #45	; 0x2d
 80128b4:	f000 8090 	beq.w	80129d8 <_scanf_float+0x188>
 80128b8:	d815      	bhi.n	80128e6 <_scanf_float+0x96>
 80128ba:	2b2b      	cmp	r3, #43	; 0x2b
 80128bc:	f000 808c 	beq.w	80129d8 <_scanf_float+0x188>
 80128c0:	f1b9 0f00 	cmp.w	r9, #0
 80128c4:	d003      	beq.n	80128ce <_scanf_float+0x7e>
 80128c6:	6823      	ldr	r3, [r4, #0]
 80128c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128cc:	6023      	str	r3, [r4, #0]
 80128ce:	3a01      	subs	r2, #1
 80128d0:	2a01      	cmp	r2, #1
 80128d2:	f200 80ea 	bhi.w	8012aaa <_scanf_float+0x25a>
 80128d6:	4545      	cmp	r5, r8
 80128d8:	f200 80dc 	bhi.w	8012a94 <_scanf_float+0x244>
 80128dc:	2601      	movs	r6, #1
 80128de:	4630      	mov	r0, r6
 80128e0:	b007      	add	sp, #28
 80128e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e6:	2b2e      	cmp	r3, #46	; 0x2e
 80128e8:	f000 809f 	beq.w	8012a2a <_scanf_float+0x1da>
 80128ec:	2b30      	cmp	r3, #48	; 0x30
 80128ee:	d1e7      	bne.n	80128c0 <_scanf_float+0x70>
 80128f0:	6820      	ldr	r0, [r4, #0]
 80128f2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80128f6:	d064      	beq.n	80129c2 <_scanf_float+0x172>
 80128f8:	9b01      	ldr	r3, [sp, #4]
 80128fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80128fe:	6020      	str	r0, [r4, #0]
 8012900:	f109 0901 	add.w	r9, r9, #1
 8012904:	b11b      	cbz	r3, 801290e <_scanf_float+0xbe>
 8012906:	3b01      	subs	r3, #1
 8012908:	3101      	adds	r1, #1
 801290a:	9301      	str	r3, [sp, #4]
 801290c:	60a1      	str	r1, [r4, #8]
 801290e:	68a3      	ldr	r3, [r4, #8]
 8012910:	3b01      	subs	r3, #1
 8012912:	60a3      	str	r3, [r4, #8]
 8012914:	6923      	ldr	r3, [r4, #16]
 8012916:	3301      	adds	r3, #1
 8012918:	6123      	str	r3, [r4, #16]
 801291a:	6873      	ldr	r3, [r6, #4]
 801291c:	3b01      	subs	r3, #1
 801291e:	2b00      	cmp	r3, #0
 8012920:	6073      	str	r3, [r6, #4]
 8012922:	f340 80ac 	ble.w	8012a7e <_scanf_float+0x22e>
 8012926:	6833      	ldr	r3, [r6, #0]
 8012928:	3301      	adds	r3, #1
 801292a:	6033      	str	r3, [r6, #0]
 801292c:	e7b5      	b.n	801289a <_scanf_float+0x4a>
 801292e:	2b45      	cmp	r3, #69	; 0x45
 8012930:	f000 8085 	beq.w	8012a3e <_scanf_float+0x1ee>
 8012934:	2b46      	cmp	r3, #70	; 0x46
 8012936:	d06a      	beq.n	8012a0e <_scanf_float+0x1be>
 8012938:	2b41      	cmp	r3, #65	; 0x41
 801293a:	d1c1      	bne.n	80128c0 <_scanf_float+0x70>
 801293c:	2a01      	cmp	r2, #1
 801293e:	d1bf      	bne.n	80128c0 <_scanf_float+0x70>
 8012940:	2202      	movs	r2, #2
 8012942:	e046      	b.n	80129d2 <_scanf_float+0x182>
 8012944:	2b65      	cmp	r3, #101	; 0x65
 8012946:	d07a      	beq.n	8012a3e <_scanf_float+0x1ee>
 8012948:	d818      	bhi.n	801297c <_scanf_float+0x12c>
 801294a:	2b54      	cmp	r3, #84	; 0x54
 801294c:	d066      	beq.n	8012a1c <_scanf_float+0x1cc>
 801294e:	d811      	bhi.n	8012974 <_scanf_float+0x124>
 8012950:	2b4e      	cmp	r3, #78	; 0x4e
 8012952:	d1b5      	bne.n	80128c0 <_scanf_float+0x70>
 8012954:	2a00      	cmp	r2, #0
 8012956:	d146      	bne.n	80129e6 <_scanf_float+0x196>
 8012958:	f1b9 0f00 	cmp.w	r9, #0
 801295c:	d145      	bne.n	80129ea <_scanf_float+0x19a>
 801295e:	6821      	ldr	r1, [r4, #0]
 8012960:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012964:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012968:	d13f      	bne.n	80129ea <_scanf_float+0x19a>
 801296a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801296e:	6021      	str	r1, [r4, #0]
 8012970:	2201      	movs	r2, #1
 8012972:	e02e      	b.n	80129d2 <_scanf_float+0x182>
 8012974:	2b59      	cmp	r3, #89	; 0x59
 8012976:	d01e      	beq.n	80129b6 <_scanf_float+0x166>
 8012978:	2b61      	cmp	r3, #97	; 0x61
 801297a:	e7de      	b.n	801293a <_scanf_float+0xea>
 801297c:	2b6e      	cmp	r3, #110	; 0x6e
 801297e:	d0e9      	beq.n	8012954 <_scanf_float+0x104>
 8012980:	d815      	bhi.n	80129ae <_scanf_float+0x15e>
 8012982:	2b66      	cmp	r3, #102	; 0x66
 8012984:	d043      	beq.n	8012a0e <_scanf_float+0x1be>
 8012986:	2b69      	cmp	r3, #105	; 0x69
 8012988:	d19a      	bne.n	80128c0 <_scanf_float+0x70>
 801298a:	f1bb 0f00 	cmp.w	fp, #0
 801298e:	d138      	bne.n	8012a02 <_scanf_float+0x1b2>
 8012990:	f1b9 0f00 	cmp.w	r9, #0
 8012994:	d197      	bne.n	80128c6 <_scanf_float+0x76>
 8012996:	6821      	ldr	r1, [r4, #0]
 8012998:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801299c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80129a0:	d195      	bne.n	80128ce <_scanf_float+0x7e>
 80129a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80129a6:	6021      	str	r1, [r4, #0]
 80129a8:	f04f 0b01 	mov.w	fp, #1
 80129ac:	e011      	b.n	80129d2 <_scanf_float+0x182>
 80129ae:	2b74      	cmp	r3, #116	; 0x74
 80129b0:	d034      	beq.n	8012a1c <_scanf_float+0x1cc>
 80129b2:	2b79      	cmp	r3, #121	; 0x79
 80129b4:	d184      	bne.n	80128c0 <_scanf_float+0x70>
 80129b6:	f1bb 0f07 	cmp.w	fp, #7
 80129ba:	d181      	bne.n	80128c0 <_scanf_float+0x70>
 80129bc:	f04f 0b08 	mov.w	fp, #8
 80129c0:	e007      	b.n	80129d2 <_scanf_float+0x182>
 80129c2:	eb12 0f0b 	cmn.w	r2, fp
 80129c6:	f47f af7b 	bne.w	80128c0 <_scanf_float+0x70>
 80129ca:	6821      	ldr	r1, [r4, #0]
 80129cc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80129d0:	6021      	str	r1, [r4, #0]
 80129d2:	702b      	strb	r3, [r5, #0]
 80129d4:	3501      	adds	r5, #1
 80129d6:	e79a      	b.n	801290e <_scanf_float+0xbe>
 80129d8:	6821      	ldr	r1, [r4, #0]
 80129da:	0608      	lsls	r0, r1, #24
 80129dc:	f57f af70 	bpl.w	80128c0 <_scanf_float+0x70>
 80129e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80129e4:	e7f4      	b.n	80129d0 <_scanf_float+0x180>
 80129e6:	2a02      	cmp	r2, #2
 80129e8:	d047      	beq.n	8012a7a <_scanf_float+0x22a>
 80129ea:	f1bb 0f01 	cmp.w	fp, #1
 80129ee:	d003      	beq.n	80129f8 <_scanf_float+0x1a8>
 80129f0:	f1bb 0f04 	cmp.w	fp, #4
 80129f4:	f47f af64 	bne.w	80128c0 <_scanf_float+0x70>
 80129f8:	f10b 0b01 	add.w	fp, fp, #1
 80129fc:	fa5f fb8b 	uxtb.w	fp, fp
 8012a00:	e7e7      	b.n	80129d2 <_scanf_float+0x182>
 8012a02:	f1bb 0f03 	cmp.w	fp, #3
 8012a06:	d0f7      	beq.n	80129f8 <_scanf_float+0x1a8>
 8012a08:	f1bb 0f05 	cmp.w	fp, #5
 8012a0c:	e7f2      	b.n	80129f4 <_scanf_float+0x1a4>
 8012a0e:	f1bb 0f02 	cmp.w	fp, #2
 8012a12:	f47f af55 	bne.w	80128c0 <_scanf_float+0x70>
 8012a16:	f04f 0b03 	mov.w	fp, #3
 8012a1a:	e7da      	b.n	80129d2 <_scanf_float+0x182>
 8012a1c:	f1bb 0f06 	cmp.w	fp, #6
 8012a20:	f47f af4e 	bne.w	80128c0 <_scanf_float+0x70>
 8012a24:	f04f 0b07 	mov.w	fp, #7
 8012a28:	e7d3      	b.n	80129d2 <_scanf_float+0x182>
 8012a2a:	6821      	ldr	r1, [r4, #0]
 8012a2c:	0588      	lsls	r0, r1, #22
 8012a2e:	f57f af47 	bpl.w	80128c0 <_scanf_float+0x70>
 8012a32:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012a36:	6021      	str	r1, [r4, #0]
 8012a38:	f8cd 9008 	str.w	r9, [sp, #8]
 8012a3c:	e7c9      	b.n	80129d2 <_scanf_float+0x182>
 8012a3e:	6821      	ldr	r1, [r4, #0]
 8012a40:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012a44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012a48:	d006      	beq.n	8012a58 <_scanf_float+0x208>
 8012a4a:	0548      	lsls	r0, r1, #21
 8012a4c:	f57f af38 	bpl.w	80128c0 <_scanf_float+0x70>
 8012a50:	f1b9 0f00 	cmp.w	r9, #0
 8012a54:	f43f af3b 	beq.w	80128ce <_scanf_float+0x7e>
 8012a58:	0588      	lsls	r0, r1, #22
 8012a5a:	bf58      	it	pl
 8012a5c:	9802      	ldrpl	r0, [sp, #8]
 8012a5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012a62:	bf58      	it	pl
 8012a64:	eba9 0000 	subpl.w	r0, r9, r0
 8012a68:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012a6c:	bf58      	it	pl
 8012a6e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012a72:	6021      	str	r1, [r4, #0]
 8012a74:	f04f 0900 	mov.w	r9, #0
 8012a78:	e7ab      	b.n	80129d2 <_scanf_float+0x182>
 8012a7a:	2203      	movs	r2, #3
 8012a7c:	e7a9      	b.n	80129d2 <_scanf_float+0x182>
 8012a7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012a82:	9205      	str	r2, [sp, #20]
 8012a84:	4631      	mov	r1, r6
 8012a86:	4638      	mov	r0, r7
 8012a88:	4798      	blx	r3
 8012a8a:	9a05      	ldr	r2, [sp, #20]
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	f43f af04 	beq.w	801289a <_scanf_float+0x4a>
 8012a92:	e715      	b.n	80128c0 <_scanf_float+0x70>
 8012a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012a9c:	4632      	mov	r2, r6
 8012a9e:	4638      	mov	r0, r7
 8012aa0:	4798      	blx	r3
 8012aa2:	6923      	ldr	r3, [r4, #16]
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	6123      	str	r3, [r4, #16]
 8012aa8:	e715      	b.n	80128d6 <_scanf_float+0x86>
 8012aaa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012aae:	2b06      	cmp	r3, #6
 8012ab0:	d80a      	bhi.n	8012ac8 <_scanf_float+0x278>
 8012ab2:	f1bb 0f02 	cmp.w	fp, #2
 8012ab6:	d968      	bls.n	8012b8a <_scanf_float+0x33a>
 8012ab8:	f1ab 0b03 	sub.w	fp, fp, #3
 8012abc:	fa5f fb8b 	uxtb.w	fp, fp
 8012ac0:	eba5 0b0b 	sub.w	fp, r5, fp
 8012ac4:	455d      	cmp	r5, fp
 8012ac6:	d14b      	bne.n	8012b60 <_scanf_float+0x310>
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	05da      	lsls	r2, r3, #23
 8012acc:	d51f      	bpl.n	8012b0e <_scanf_float+0x2be>
 8012ace:	055b      	lsls	r3, r3, #21
 8012ad0:	d468      	bmi.n	8012ba4 <_scanf_float+0x354>
 8012ad2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012ad6:	6923      	ldr	r3, [r4, #16]
 8012ad8:	2965      	cmp	r1, #101	; 0x65
 8012ada:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ade:	f105 3bff 	add.w	fp, r5, #4294967295
 8012ae2:	6123      	str	r3, [r4, #16]
 8012ae4:	d00d      	beq.n	8012b02 <_scanf_float+0x2b2>
 8012ae6:	2945      	cmp	r1, #69	; 0x45
 8012ae8:	d00b      	beq.n	8012b02 <_scanf_float+0x2b2>
 8012aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012aee:	4632      	mov	r2, r6
 8012af0:	4638      	mov	r0, r7
 8012af2:	4798      	blx	r3
 8012af4:	6923      	ldr	r3, [r4, #16]
 8012af6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012afa:	3b01      	subs	r3, #1
 8012afc:	f1a5 0b02 	sub.w	fp, r5, #2
 8012b00:	6123      	str	r3, [r4, #16]
 8012b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b06:	4632      	mov	r2, r6
 8012b08:	4638      	mov	r0, r7
 8012b0a:	4798      	blx	r3
 8012b0c:	465d      	mov	r5, fp
 8012b0e:	6826      	ldr	r6, [r4, #0]
 8012b10:	f016 0610 	ands.w	r6, r6, #16
 8012b14:	d17a      	bne.n	8012c0c <_scanf_float+0x3bc>
 8012b16:	702e      	strb	r6, [r5, #0]
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b22:	d142      	bne.n	8012baa <_scanf_float+0x35a>
 8012b24:	9b02      	ldr	r3, [sp, #8]
 8012b26:	eba9 0303 	sub.w	r3, r9, r3
 8012b2a:	425a      	negs	r2, r3
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d149      	bne.n	8012bc4 <_scanf_float+0x374>
 8012b30:	2200      	movs	r2, #0
 8012b32:	4641      	mov	r1, r8
 8012b34:	4638      	mov	r0, r7
 8012b36:	f000 ffe7 	bl	8013b08 <_strtod_r>
 8012b3a:	6825      	ldr	r5, [r4, #0]
 8012b3c:	f8da 3000 	ldr.w	r3, [sl]
 8012b40:	f015 0f02 	tst.w	r5, #2
 8012b44:	f103 0204 	add.w	r2, r3, #4
 8012b48:	ec59 8b10 	vmov	r8, r9, d0
 8012b4c:	f8ca 2000 	str.w	r2, [sl]
 8012b50:	d043      	beq.n	8012bda <_scanf_float+0x38a>
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	e9c3 8900 	strd	r8, r9, [r3]
 8012b58:	68e3      	ldr	r3, [r4, #12]
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	60e3      	str	r3, [r4, #12]
 8012b5e:	e6be      	b.n	80128de <_scanf_float+0x8e>
 8012b60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012b68:	4632      	mov	r2, r6
 8012b6a:	4638      	mov	r0, r7
 8012b6c:	4798      	blx	r3
 8012b6e:	6923      	ldr	r3, [r4, #16]
 8012b70:	3b01      	subs	r3, #1
 8012b72:	6123      	str	r3, [r4, #16]
 8012b74:	e7a6      	b.n	8012ac4 <_scanf_float+0x274>
 8012b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012b7e:	4632      	mov	r2, r6
 8012b80:	4638      	mov	r0, r7
 8012b82:	4798      	blx	r3
 8012b84:	6923      	ldr	r3, [r4, #16]
 8012b86:	3b01      	subs	r3, #1
 8012b88:	6123      	str	r3, [r4, #16]
 8012b8a:	4545      	cmp	r5, r8
 8012b8c:	d8f3      	bhi.n	8012b76 <_scanf_float+0x326>
 8012b8e:	e6a5      	b.n	80128dc <_scanf_float+0x8c>
 8012b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012b98:	4632      	mov	r2, r6
 8012b9a:	4638      	mov	r0, r7
 8012b9c:	4798      	blx	r3
 8012b9e:	6923      	ldr	r3, [r4, #16]
 8012ba0:	3b01      	subs	r3, #1
 8012ba2:	6123      	str	r3, [r4, #16]
 8012ba4:	4545      	cmp	r5, r8
 8012ba6:	d8f3      	bhi.n	8012b90 <_scanf_float+0x340>
 8012ba8:	e698      	b.n	80128dc <_scanf_float+0x8c>
 8012baa:	9b03      	ldr	r3, [sp, #12]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d0bf      	beq.n	8012b30 <_scanf_float+0x2e0>
 8012bb0:	9904      	ldr	r1, [sp, #16]
 8012bb2:	230a      	movs	r3, #10
 8012bb4:	4632      	mov	r2, r6
 8012bb6:	3101      	adds	r1, #1
 8012bb8:	4638      	mov	r0, r7
 8012bba:	f001 f831 	bl	8013c20 <_strtol_r>
 8012bbe:	9b03      	ldr	r3, [sp, #12]
 8012bc0:	9d04      	ldr	r5, [sp, #16]
 8012bc2:	1ac2      	subs	r2, r0, r3
 8012bc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012bc8:	429d      	cmp	r5, r3
 8012bca:	bf28      	it	cs
 8012bcc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012bd0:	490f      	ldr	r1, [pc, #60]	; (8012c10 <_scanf_float+0x3c0>)
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	f000 f95e 	bl	8012e94 <siprintf>
 8012bd8:	e7aa      	b.n	8012b30 <_scanf_float+0x2e0>
 8012bda:	f015 0504 	ands.w	r5, r5, #4
 8012bde:	d1b8      	bne.n	8012b52 <_scanf_float+0x302>
 8012be0:	681f      	ldr	r7, [r3, #0]
 8012be2:	ee10 2a10 	vmov	r2, s0
 8012be6:	464b      	mov	r3, r9
 8012be8:	ee10 0a10 	vmov	r0, s0
 8012bec:	4649      	mov	r1, r9
 8012bee:	f7ed ffad 	bl	8000b4c <__aeabi_dcmpun>
 8012bf2:	b128      	cbz	r0, 8012c00 <_scanf_float+0x3b0>
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	f000 f947 	bl	8012e88 <nanf>
 8012bfa:	ed87 0a00 	vstr	s0, [r7]
 8012bfe:	e7ab      	b.n	8012b58 <_scanf_float+0x308>
 8012c00:	4640      	mov	r0, r8
 8012c02:	4649      	mov	r1, r9
 8012c04:	f7ee f800 	bl	8000c08 <__aeabi_d2f>
 8012c08:	6038      	str	r0, [r7, #0]
 8012c0a:	e7a5      	b.n	8012b58 <_scanf_float+0x308>
 8012c0c:	2600      	movs	r6, #0
 8012c0e:	e666      	b.n	80128de <_scanf_float+0x8e>
 8012c10:	080165d8 	.word	0x080165d8

08012c14 <iprintf>:
 8012c14:	b40f      	push	{r0, r1, r2, r3}
 8012c16:	4b0a      	ldr	r3, [pc, #40]	; (8012c40 <iprintf+0x2c>)
 8012c18:	b513      	push	{r0, r1, r4, lr}
 8012c1a:	681c      	ldr	r4, [r3, #0]
 8012c1c:	b124      	cbz	r4, 8012c28 <iprintf+0x14>
 8012c1e:	69a3      	ldr	r3, [r4, #24]
 8012c20:	b913      	cbnz	r3, 8012c28 <iprintf+0x14>
 8012c22:	4620      	mov	r0, r4
 8012c24:	f002 f804 	bl	8014c30 <__sinit>
 8012c28:	ab05      	add	r3, sp, #20
 8012c2a:	9a04      	ldr	r2, [sp, #16]
 8012c2c:	68a1      	ldr	r1, [r4, #8]
 8012c2e:	9301      	str	r3, [sp, #4]
 8012c30:	4620      	mov	r0, r4
 8012c32:	f003 f9c3 	bl	8015fbc <_vfiprintf_r>
 8012c36:	b002      	add	sp, #8
 8012c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c3c:	b004      	add	sp, #16
 8012c3e:	4770      	bx	lr
 8012c40:	20000020 	.word	0x20000020

08012c44 <_puts_r>:
 8012c44:	b570      	push	{r4, r5, r6, lr}
 8012c46:	460e      	mov	r6, r1
 8012c48:	4605      	mov	r5, r0
 8012c4a:	b118      	cbz	r0, 8012c54 <_puts_r+0x10>
 8012c4c:	6983      	ldr	r3, [r0, #24]
 8012c4e:	b90b      	cbnz	r3, 8012c54 <_puts_r+0x10>
 8012c50:	f001 ffee 	bl	8014c30 <__sinit>
 8012c54:	69ab      	ldr	r3, [r5, #24]
 8012c56:	68ac      	ldr	r4, [r5, #8]
 8012c58:	b913      	cbnz	r3, 8012c60 <_puts_r+0x1c>
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	f001 ffe8 	bl	8014c30 <__sinit>
 8012c60:	4b23      	ldr	r3, [pc, #140]	; (8012cf0 <_puts_r+0xac>)
 8012c62:	429c      	cmp	r4, r3
 8012c64:	d117      	bne.n	8012c96 <_puts_r+0x52>
 8012c66:	686c      	ldr	r4, [r5, #4]
 8012c68:	89a3      	ldrh	r3, [r4, #12]
 8012c6a:	071b      	lsls	r3, r3, #28
 8012c6c:	d51d      	bpl.n	8012caa <_puts_r+0x66>
 8012c6e:	6923      	ldr	r3, [r4, #16]
 8012c70:	b1db      	cbz	r3, 8012caa <_puts_r+0x66>
 8012c72:	3e01      	subs	r6, #1
 8012c74:	68a3      	ldr	r3, [r4, #8]
 8012c76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012c7a:	3b01      	subs	r3, #1
 8012c7c:	60a3      	str	r3, [r4, #8]
 8012c7e:	b9e9      	cbnz	r1, 8012cbc <_puts_r+0x78>
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	da2e      	bge.n	8012ce2 <_puts_r+0x9e>
 8012c84:	4622      	mov	r2, r4
 8012c86:	210a      	movs	r1, #10
 8012c88:	4628      	mov	r0, r5
 8012c8a:	f000 ffdb 	bl	8013c44 <__swbuf_r>
 8012c8e:	3001      	adds	r0, #1
 8012c90:	d011      	beq.n	8012cb6 <_puts_r+0x72>
 8012c92:	200a      	movs	r0, #10
 8012c94:	e011      	b.n	8012cba <_puts_r+0x76>
 8012c96:	4b17      	ldr	r3, [pc, #92]	; (8012cf4 <_puts_r+0xb0>)
 8012c98:	429c      	cmp	r4, r3
 8012c9a:	d101      	bne.n	8012ca0 <_puts_r+0x5c>
 8012c9c:	68ac      	ldr	r4, [r5, #8]
 8012c9e:	e7e3      	b.n	8012c68 <_puts_r+0x24>
 8012ca0:	4b15      	ldr	r3, [pc, #84]	; (8012cf8 <_puts_r+0xb4>)
 8012ca2:	429c      	cmp	r4, r3
 8012ca4:	bf08      	it	eq
 8012ca6:	68ec      	ldreq	r4, [r5, #12]
 8012ca8:	e7de      	b.n	8012c68 <_puts_r+0x24>
 8012caa:	4621      	mov	r1, r4
 8012cac:	4628      	mov	r0, r5
 8012cae:	f001 f81b 	bl	8013ce8 <__swsetup_r>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d0dd      	beq.n	8012c72 <_puts_r+0x2e>
 8012cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8012cba:	bd70      	pop	{r4, r5, r6, pc}
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	da04      	bge.n	8012cca <_puts_r+0x86>
 8012cc0:	69a2      	ldr	r2, [r4, #24]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	dc06      	bgt.n	8012cd4 <_puts_r+0x90>
 8012cc6:	290a      	cmp	r1, #10
 8012cc8:	d004      	beq.n	8012cd4 <_puts_r+0x90>
 8012cca:	6823      	ldr	r3, [r4, #0]
 8012ccc:	1c5a      	adds	r2, r3, #1
 8012cce:	6022      	str	r2, [r4, #0]
 8012cd0:	7019      	strb	r1, [r3, #0]
 8012cd2:	e7cf      	b.n	8012c74 <_puts_r+0x30>
 8012cd4:	4622      	mov	r2, r4
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f000 ffb4 	bl	8013c44 <__swbuf_r>
 8012cdc:	3001      	adds	r0, #1
 8012cde:	d1c9      	bne.n	8012c74 <_puts_r+0x30>
 8012ce0:	e7e9      	b.n	8012cb6 <_puts_r+0x72>
 8012ce2:	6823      	ldr	r3, [r4, #0]
 8012ce4:	200a      	movs	r0, #10
 8012ce6:	1c5a      	adds	r2, r3, #1
 8012ce8:	6022      	str	r2, [r4, #0]
 8012cea:	7018      	strb	r0, [r3, #0]
 8012cec:	e7e5      	b.n	8012cba <_puts_r+0x76>
 8012cee:	bf00      	nop
 8012cf0:	08016660 	.word	0x08016660
 8012cf4:	08016680 	.word	0x08016680
 8012cf8:	08016640 	.word	0x08016640

08012cfc <puts>:
 8012cfc:	4b02      	ldr	r3, [pc, #8]	; (8012d08 <puts+0xc>)
 8012cfe:	4601      	mov	r1, r0
 8012d00:	6818      	ldr	r0, [r3, #0]
 8012d02:	f7ff bf9f 	b.w	8012c44 <_puts_r>
 8012d06:	bf00      	nop
 8012d08:	20000020 	.word	0x20000020

08012d0c <_sbrk_r>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	4c06      	ldr	r4, [pc, #24]	; (8012d28 <_sbrk_r+0x1c>)
 8012d10:	2300      	movs	r3, #0
 8012d12:	4605      	mov	r5, r0
 8012d14:	4608      	mov	r0, r1
 8012d16:	6023      	str	r3, [r4, #0]
 8012d18:	f7ee fe72 	bl	8001a00 <_sbrk>
 8012d1c:	1c43      	adds	r3, r0, #1
 8012d1e:	d102      	bne.n	8012d26 <_sbrk_r+0x1a>
 8012d20:	6823      	ldr	r3, [r4, #0]
 8012d22:	b103      	cbz	r3, 8012d26 <_sbrk_r+0x1a>
 8012d24:	602b      	str	r3, [r5, #0]
 8012d26:	bd38      	pop	{r3, r4, r5, pc}
 8012d28:	20001cbc 	.word	0x20001cbc

08012d2c <setvbuf>:
 8012d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d30:	461d      	mov	r5, r3
 8012d32:	4b51      	ldr	r3, [pc, #324]	; (8012e78 <setvbuf+0x14c>)
 8012d34:	681e      	ldr	r6, [r3, #0]
 8012d36:	4604      	mov	r4, r0
 8012d38:	460f      	mov	r7, r1
 8012d3a:	4690      	mov	r8, r2
 8012d3c:	b126      	cbz	r6, 8012d48 <setvbuf+0x1c>
 8012d3e:	69b3      	ldr	r3, [r6, #24]
 8012d40:	b913      	cbnz	r3, 8012d48 <setvbuf+0x1c>
 8012d42:	4630      	mov	r0, r6
 8012d44:	f001 ff74 	bl	8014c30 <__sinit>
 8012d48:	4b4c      	ldr	r3, [pc, #304]	; (8012e7c <setvbuf+0x150>)
 8012d4a:	429c      	cmp	r4, r3
 8012d4c:	d152      	bne.n	8012df4 <setvbuf+0xc8>
 8012d4e:	6874      	ldr	r4, [r6, #4]
 8012d50:	f1b8 0f02 	cmp.w	r8, #2
 8012d54:	d006      	beq.n	8012d64 <setvbuf+0x38>
 8012d56:	f1b8 0f01 	cmp.w	r8, #1
 8012d5a:	f200 8089 	bhi.w	8012e70 <setvbuf+0x144>
 8012d5e:	2d00      	cmp	r5, #0
 8012d60:	f2c0 8086 	blt.w	8012e70 <setvbuf+0x144>
 8012d64:	4621      	mov	r1, r4
 8012d66:	4630      	mov	r0, r6
 8012d68:	f001 fef8 	bl	8014b5c <_fflush_r>
 8012d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d6e:	b141      	cbz	r1, 8012d82 <setvbuf+0x56>
 8012d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d74:	4299      	cmp	r1, r3
 8012d76:	d002      	beq.n	8012d7e <setvbuf+0x52>
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f7ff f865 	bl	8011e48 <_free_r>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	6363      	str	r3, [r4, #52]	; 0x34
 8012d82:	2300      	movs	r3, #0
 8012d84:	61a3      	str	r3, [r4, #24]
 8012d86:	6063      	str	r3, [r4, #4]
 8012d88:	89a3      	ldrh	r3, [r4, #12]
 8012d8a:	061b      	lsls	r3, r3, #24
 8012d8c:	d503      	bpl.n	8012d96 <setvbuf+0x6a>
 8012d8e:	6921      	ldr	r1, [r4, #16]
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7ff f859 	bl	8011e48 <_free_r>
 8012d96:	89a3      	ldrh	r3, [r4, #12]
 8012d98:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012d9c:	f023 0303 	bic.w	r3, r3, #3
 8012da0:	f1b8 0f02 	cmp.w	r8, #2
 8012da4:	81a3      	strh	r3, [r4, #12]
 8012da6:	d05d      	beq.n	8012e64 <setvbuf+0x138>
 8012da8:	ab01      	add	r3, sp, #4
 8012daa:	466a      	mov	r2, sp
 8012dac:	4621      	mov	r1, r4
 8012dae:	4630      	mov	r0, r6
 8012db0:	f002 fb02 	bl	80153b8 <__swhatbuf_r>
 8012db4:	89a3      	ldrh	r3, [r4, #12]
 8012db6:	4318      	orrs	r0, r3
 8012db8:	81a0      	strh	r0, [r4, #12]
 8012dba:	bb2d      	cbnz	r5, 8012e08 <setvbuf+0xdc>
 8012dbc:	9d00      	ldr	r5, [sp, #0]
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	f7ff f81e 	bl	8011e00 <malloc>
 8012dc4:	4607      	mov	r7, r0
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	d14e      	bne.n	8012e68 <setvbuf+0x13c>
 8012dca:	f8dd 9000 	ldr.w	r9, [sp]
 8012dce:	45a9      	cmp	r9, r5
 8012dd0:	d13c      	bne.n	8012e4c <setvbuf+0x120>
 8012dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd6:	89a3      	ldrh	r3, [r4, #12]
 8012dd8:	f043 0302 	orr.w	r3, r3, #2
 8012ddc:	81a3      	strh	r3, [r4, #12]
 8012dde:	2300      	movs	r3, #0
 8012de0:	60a3      	str	r3, [r4, #8]
 8012de2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012de6:	6023      	str	r3, [r4, #0]
 8012de8:	6123      	str	r3, [r4, #16]
 8012dea:	2301      	movs	r3, #1
 8012dec:	6163      	str	r3, [r4, #20]
 8012dee:	b003      	add	sp, #12
 8012df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012df4:	4b22      	ldr	r3, [pc, #136]	; (8012e80 <setvbuf+0x154>)
 8012df6:	429c      	cmp	r4, r3
 8012df8:	d101      	bne.n	8012dfe <setvbuf+0xd2>
 8012dfa:	68b4      	ldr	r4, [r6, #8]
 8012dfc:	e7a8      	b.n	8012d50 <setvbuf+0x24>
 8012dfe:	4b21      	ldr	r3, [pc, #132]	; (8012e84 <setvbuf+0x158>)
 8012e00:	429c      	cmp	r4, r3
 8012e02:	bf08      	it	eq
 8012e04:	68f4      	ldreq	r4, [r6, #12]
 8012e06:	e7a3      	b.n	8012d50 <setvbuf+0x24>
 8012e08:	2f00      	cmp	r7, #0
 8012e0a:	d0d8      	beq.n	8012dbe <setvbuf+0x92>
 8012e0c:	69b3      	ldr	r3, [r6, #24]
 8012e0e:	b913      	cbnz	r3, 8012e16 <setvbuf+0xea>
 8012e10:	4630      	mov	r0, r6
 8012e12:	f001 ff0d 	bl	8014c30 <__sinit>
 8012e16:	f1b8 0f01 	cmp.w	r8, #1
 8012e1a:	bf08      	it	eq
 8012e1c:	89a3      	ldrheq	r3, [r4, #12]
 8012e1e:	6027      	str	r7, [r4, #0]
 8012e20:	bf04      	itt	eq
 8012e22:	f043 0301 	orreq.w	r3, r3, #1
 8012e26:	81a3      	strheq	r3, [r4, #12]
 8012e28:	89a3      	ldrh	r3, [r4, #12]
 8012e2a:	f013 0008 	ands.w	r0, r3, #8
 8012e2e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8012e32:	d01b      	beq.n	8012e6c <setvbuf+0x140>
 8012e34:	f013 0001 	ands.w	r0, r3, #1
 8012e38:	bf18      	it	ne
 8012e3a:	426d      	negne	r5, r5
 8012e3c:	f04f 0300 	mov.w	r3, #0
 8012e40:	bf1d      	ittte	ne
 8012e42:	60a3      	strne	r3, [r4, #8]
 8012e44:	61a5      	strne	r5, [r4, #24]
 8012e46:	4618      	movne	r0, r3
 8012e48:	60a5      	streq	r5, [r4, #8]
 8012e4a:	e7d0      	b.n	8012dee <setvbuf+0xc2>
 8012e4c:	4648      	mov	r0, r9
 8012e4e:	f7fe ffd7 	bl	8011e00 <malloc>
 8012e52:	4607      	mov	r7, r0
 8012e54:	2800      	cmp	r0, #0
 8012e56:	d0bc      	beq.n	8012dd2 <setvbuf+0xa6>
 8012e58:	89a3      	ldrh	r3, [r4, #12]
 8012e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e5e:	81a3      	strh	r3, [r4, #12]
 8012e60:	464d      	mov	r5, r9
 8012e62:	e7d3      	b.n	8012e0c <setvbuf+0xe0>
 8012e64:	2000      	movs	r0, #0
 8012e66:	e7b6      	b.n	8012dd6 <setvbuf+0xaa>
 8012e68:	46a9      	mov	r9, r5
 8012e6a:	e7f5      	b.n	8012e58 <setvbuf+0x12c>
 8012e6c:	60a0      	str	r0, [r4, #8]
 8012e6e:	e7be      	b.n	8012dee <setvbuf+0xc2>
 8012e70:	f04f 30ff 	mov.w	r0, #4294967295
 8012e74:	e7bb      	b.n	8012dee <setvbuf+0xc2>
 8012e76:	bf00      	nop
 8012e78:	20000020 	.word	0x20000020
 8012e7c:	08016660 	.word	0x08016660
 8012e80:	08016680 	.word	0x08016680
 8012e84:	08016640 	.word	0x08016640

08012e88 <nanf>:
 8012e88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012e90 <nanf+0x8>
 8012e8c:	4770      	bx	lr
 8012e8e:	bf00      	nop
 8012e90:	7fc00000 	.word	0x7fc00000

08012e94 <siprintf>:
 8012e94:	b40e      	push	{r1, r2, r3}
 8012e96:	b500      	push	{lr}
 8012e98:	b09c      	sub	sp, #112	; 0x70
 8012e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8012e9c:	9002      	str	r0, [sp, #8]
 8012e9e:	9006      	str	r0, [sp, #24]
 8012ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ea4:	4809      	ldr	r0, [pc, #36]	; (8012ecc <siprintf+0x38>)
 8012ea6:	9107      	str	r1, [sp, #28]
 8012ea8:	9104      	str	r1, [sp, #16]
 8012eaa:	4909      	ldr	r1, [pc, #36]	; (8012ed0 <siprintf+0x3c>)
 8012eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eb0:	9105      	str	r1, [sp, #20]
 8012eb2:	6800      	ldr	r0, [r0, #0]
 8012eb4:	9301      	str	r3, [sp, #4]
 8012eb6:	a902      	add	r1, sp, #8
 8012eb8:	f002 ff5e 	bl	8015d78 <_svfiprintf_r>
 8012ebc:	9b02      	ldr	r3, [sp, #8]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	701a      	strb	r2, [r3, #0]
 8012ec2:	b01c      	add	sp, #112	; 0x70
 8012ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ec8:	b003      	add	sp, #12
 8012eca:	4770      	bx	lr
 8012ecc:	20000020 	.word	0x20000020
 8012ed0:	ffff0208 	.word	0xffff0208

08012ed4 <strcpy>:
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012eda:	f803 2b01 	strb.w	r2, [r3], #1
 8012ede:	2a00      	cmp	r2, #0
 8012ee0:	d1f9      	bne.n	8012ed6 <strcpy+0x2>
 8012ee2:	4770      	bx	lr

08012ee4 <sulp>:
 8012ee4:	b570      	push	{r4, r5, r6, lr}
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	460d      	mov	r5, r1
 8012eea:	ec45 4b10 	vmov	d0, r4, r5
 8012eee:	4616      	mov	r6, r2
 8012ef0:	f002 fda6 	bl	8015a40 <__ulp>
 8012ef4:	ec51 0b10 	vmov	r0, r1, d0
 8012ef8:	b17e      	cbz	r6, 8012f1a <sulp+0x36>
 8012efa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012efe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	dd09      	ble.n	8012f1a <sulp+0x36>
 8012f06:	051b      	lsls	r3, r3, #20
 8012f08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012f0c:	2400      	movs	r4, #0
 8012f0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012f12:	4622      	mov	r2, r4
 8012f14:	462b      	mov	r3, r5
 8012f16:	f7ed fb7f 	bl	8000618 <__aeabi_dmul>
 8012f1a:	bd70      	pop	{r4, r5, r6, pc}
 8012f1c:	0000      	movs	r0, r0
	...

08012f20 <_strtod_l>:
 8012f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f24:	461f      	mov	r7, r3
 8012f26:	b0a1      	sub	sp, #132	; 0x84
 8012f28:	2300      	movs	r3, #0
 8012f2a:	4681      	mov	r9, r0
 8012f2c:	4638      	mov	r0, r7
 8012f2e:	460e      	mov	r6, r1
 8012f30:	9217      	str	r2, [sp, #92]	; 0x5c
 8012f32:	931c      	str	r3, [sp, #112]	; 0x70
 8012f34:	f002 fa2f 	bl	8015396 <__localeconv_l>
 8012f38:	4680      	mov	r8, r0
 8012f3a:	6800      	ldr	r0, [r0, #0]
 8012f3c:	f7ed f958 	bl	80001f0 <strlen>
 8012f40:	f04f 0a00 	mov.w	sl, #0
 8012f44:	4604      	mov	r4, r0
 8012f46:	f04f 0b00 	mov.w	fp, #0
 8012f4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8012f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f4e:	781a      	ldrb	r2, [r3, #0]
 8012f50:	2a0d      	cmp	r2, #13
 8012f52:	d832      	bhi.n	8012fba <_strtod_l+0x9a>
 8012f54:	2a09      	cmp	r2, #9
 8012f56:	d236      	bcs.n	8012fc6 <_strtod_l+0xa6>
 8012f58:	2a00      	cmp	r2, #0
 8012f5a:	d03e      	beq.n	8012fda <_strtod_l+0xba>
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8012f60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012f62:	782b      	ldrb	r3, [r5, #0]
 8012f64:	2b30      	cmp	r3, #48	; 0x30
 8012f66:	f040 80ac 	bne.w	80130c2 <_strtod_l+0x1a2>
 8012f6a:	786b      	ldrb	r3, [r5, #1]
 8012f6c:	2b58      	cmp	r3, #88	; 0x58
 8012f6e:	d001      	beq.n	8012f74 <_strtod_l+0x54>
 8012f70:	2b78      	cmp	r3, #120	; 0x78
 8012f72:	d167      	bne.n	8013044 <_strtod_l+0x124>
 8012f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	ab1c      	add	r3, sp, #112	; 0x70
 8012f7a:	9300      	str	r3, [sp, #0]
 8012f7c:	9702      	str	r7, [sp, #8]
 8012f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8012f80:	4a88      	ldr	r2, [pc, #544]	; (80131a4 <_strtod_l+0x284>)
 8012f82:	a91b      	add	r1, sp, #108	; 0x6c
 8012f84:	4648      	mov	r0, r9
 8012f86:	f001 ff2c 	bl	8014de2 <__gethex>
 8012f8a:	f010 0407 	ands.w	r4, r0, #7
 8012f8e:	4606      	mov	r6, r0
 8012f90:	d005      	beq.n	8012f9e <_strtod_l+0x7e>
 8012f92:	2c06      	cmp	r4, #6
 8012f94:	d12b      	bne.n	8012fee <_strtod_l+0xce>
 8012f96:	3501      	adds	r5, #1
 8012f98:	2300      	movs	r3, #0
 8012f9a:	951b      	str	r5, [sp, #108]	; 0x6c
 8012f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8012f9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	f040 859a 	bne.w	8013ada <_strtod_l+0xbba>
 8012fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fa8:	b1e3      	cbz	r3, 8012fe4 <_strtod_l+0xc4>
 8012faa:	4652      	mov	r2, sl
 8012fac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012fb0:	ec43 2b10 	vmov	d0, r2, r3
 8012fb4:	b021      	add	sp, #132	; 0x84
 8012fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fba:	2a2b      	cmp	r2, #43	; 0x2b
 8012fbc:	d015      	beq.n	8012fea <_strtod_l+0xca>
 8012fbe:	2a2d      	cmp	r2, #45	; 0x2d
 8012fc0:	d004      	beq.n	8012fcc <_strtod_l+0xac>
 8012fc2:	2a20      	cmp	r2, #32
 8012fc4:	d1ca      	bne.n	8012f5c <_strtod_l+0x3c>
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8012fca:	e7bf      	b.n	8012f4c <_strtod_l+0x2c>
 8012fcc:	2201      	movs	r2, #1
 8012fce:	920d      	str	r2, [sp, #52]	; 0x34
 8012fd0:	1c5a      	adds	r2, r3, #1
 8012fd2:	921b      	str	r2, [sp, #108]	; 0x6c
 8012fd4:	785b      	ldrb	r3, [r3, #1]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d1c2      	bne.n	8012f60 <_strtod_l+0x40>
 8012fda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012fdc:	961b      	str	r6, [sp, #108]	; 0x6c
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	f040 8579 	bne.w	8013ad6 <_strtod_l+0xbb6>
 8012fe4:	4652      	mov	r2, sl
 8012fe6:	465b      	mov	r3, fp
 8012fe8:	e7e2      	b.n	8012fb0 <_strtod_l+0x90>
 8012fea:	2200      	movs	r2, #0
 8012fec:	e7ef      	b.n	8012fce <_strtod_l+0xae>
 8012fee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012ff0:	b13a      	cbz	r2, 8013002 <_strtod_l+0xe2>
 8012ff2:	2135      	movs	r1, #53	; 0x35
 8012ff4:	a81e      	add	r0, sp, #120	; 0x78
 8012ff6:	f002 fe1b 	bl	8015c30 <__copybits>
 8012ffa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012ffc:	4648      	mov	r0, r9
 8012ffe:	f002 fa87 	bl	8015510 <_Bfree>
 8013002:	3c01      	subs	r4, #1
 8013004:	2c04      	cmp	r4, #4
 8013006:	d806      	bhi.n	8013016 <_strtod_l+0xf6>
 8013008:	e8df f004 	tbb	[pc, r4]
 801300c:	1714030a 	.word	0x1714030a
 8013010:	0a          	.byte	0x0a
 8013011:	00          	.byte	0x00
 8013012:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013016:	0730      	lsls	r0, r6, #28
 8013018:	d5c1      	bpl.n	8012f9e <_strtod_l+0x7e>
 801301a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801301e:	e7be      	b.n	8012f9e <_strtod_l+0x7e>
 8013020:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013024:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013026:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801302a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801302e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013032:	e7f0      	b.n	8013016 <_strtod_l+0xf6>
 8013034:	f8df b170 	ldr.w	fp, [pc, #368]	; 80131a8 <_strtod_l+0x288>
 8013038:	e7ed      	b.n	8013016 <_strtod_l+0xf6>
 801303a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801303e:	f04f 3aff 	mov.w	sl, #4294967295
 8013042:	e7e8      	b.n	8013016 <_strtod_l+0xf6>
 8013044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013046:	1c5a      	adds	r2, r3, #1
 8013048:	921b      	str	r2, [sp, #108]	; 0x6c
 801304a:	785b      	ldrb	r3, [r3, #1]
 801304c:	2b30      	cmp	r3, #48	; 0x30
 801304e:	d0f9      	beq.n	8013044 <_strtod_l+0x124>
 8013050:	2b00      	cmp	r3, #0
 8013052:	d0a4      	beq.n	8012f9e <_strtod_l+0x7e>
 8013054:	2301      	movs	r3, #1
 8013056:	2500      	movs	r5, #0
 8013058:	9306      	str	r3, [sp, #24]
 801305a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801305c:	9308      	str	r3, [sp, #32]
 801305e:	9507      	str	r5, [sp, #28]
 8013060:	9505      	str	r5, [sp, #20]
 8013062:	220a      	movs	r2, #10
 8013064:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013066:	7807      	ldrb	r7, [r0, #0]
 8013068:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801306c:	b2d9      	uxtb	r1, r3
 801306e:	2909      	cmp	r1, #9
 8013070:	d929      	bls.n	80130c6 <_strtod_l+0x1a6>
 8013072:	4622      	mov	r2, r4
 8013074:	f8d8 1000 	ldr.w	r1, [r8]
 8013078:	f003 f8f9 	bl	801626e <strncmp>
 801307c:	2800      	cmp	r0, #0
 801307e:	d031      	beq.n	80130e4 <_strtod_l+0x1c4>
 8013080:	2000      	movs	r0, #0
 8013082:	9c05      	ldr	r4, [sp, #20]
 8013084:	9004      	str	r0, [sp, #16]
 8013086:	463b      	mov	r3, r7
 8013088:	4602      	mov	r2, r0
 801308a:	2b65      	cmp	r3, #101	; 0x65
 801308c:	d001      	beq.n	8013092 <_strtod_l+0x172>
 801308e:	2b45      	cmp	r3, #69	; 0x45
 8013090:	d114      	bne.n	80130bc <_strtod_l+0x19c>
 8013092:	b924      	cbnz	r4, 801309e <_strtod_l+0x17e>
 8013094:	b910      	cbnz	r0, 801309c <_strtod_l+0x17c>
 8013096:	9b06      	ldr	r3, [sp, #24]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d09e      	beq.n	8012fda <_strtod_l+0xba>
 801309c:	2400      	movs	r4, #0
 801309e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80130a0:	1c73      	adds	r3, r6, #1
 80130a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80130a4:	7873      	ldrb	r3, [r6, #1]
 80130a6:	2b2b      	cmp	r3, #43	; 0x2b
 80130a8:	d078      	beq.n	801319c <_strtod_l+0x27c>
 80130aa:	2b2d      	cmp	r3, #45	; 0x2d
 80130ac:	d070      	beq.n	8013190 <_strtod_l+0x270>
 80130ae:	f04f 0c00 	mov.w	ip, #0
 80130b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80130b6:	2f09      	cmp	r7, #9
 80130b8:	d97c      	bls.n	80131b4 <_strtod_l+0x294>
 80130ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80130bc:	f04f 0e00 	mov.w	lr, #0
 80130c0:	e09a      	b.n	80131f8 <_strtod_l+0x2d8>
 80130c2:	2300      	movs	r3, #0
 80130c4:	e7c7      	b.n	8013056 <_strtod_l+0x136>
 80130c6:	9905      	ldr	r1, [sp, #20]
 80130c8:	2908      	cmp	r1, #8
 80130ca:	bfdd      	ittte	le
 80130cc:	9907      	ldrle	r1, [sp, #28]
 80130ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80130d2:	9307      	strle	r3, [sp, #28]
 80130d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80130d8:	9b05      	ldr	r3, [sp, #20]
 80130da:	3001      	adds	r0, #1
 80130dc:	3301      	adds	r3, #1
 80130de:	9305      	str	r3, [sp, #20]
 80130e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80130e2:	e7bf      	b.n	8013064 <_strtod_l+0x144>
 80130e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130e6:	191a      	adds	r2, r3, r4
 80130e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80130ea:	9a05      	ldr	r2, [sp, #20]
 80130ec:	5d1b      	ldrb	r3, [r3, r4]
 80130ee:	2a00      	cmp	r2, #0
 80130f0:	d037      	beq.n	8013162 <_strtod_l+0x242>
 80130f2:	9c05      	ldr	r4, [sp, #20]
 80130f4:	4602      	mov	r2, r0
 80130f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80130fa:	2909      	cmp	r1, #9
 80130fc:	d913      	bls.n	8013126 <_strtod_l+0x206>
 80130fe:	2101      	movs	r1, #1
 8013100:	9104      	str	r1, [sp, #16]
 8013102:	e7c2      	b.n	801308a <_strtod_l+0x16a>
 8013104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013106:	1c5a      	adds	r2, r3, #1
 8013108:	921b      	str	r2, [sp, #108]	; 0x6c
 801310a:	785b      	ldrb	r3, [r3, #1]
 801310c:	3001      	adds	r0, #1
 801310e:	2b30      	cmp	r3, #48	; 0x30
 8013110:	d0f8      	beq.n	8013104 <_strtod_l+0x1e4>
 8013112:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013116:	2a08      	cmp	r2, #8
 8013118:	f200 84e4 	bhi.w	8013ae4 <_strtod_l+0xbc4>
 801311c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801311e:	9208      	str	r2, [sp, #32]
 8013120:	4602      	mov	r2, r0
 8013122:	2000      	movs	r0, #0
 8013124:	4604      	mov	r4, r0
 8013126:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801312a:	f100 0101 	add.w	r1, r0, #1
 801312e:	d012      	beq.n	8013156 <_strtod_l+0x236>
 8013130:	440a      	add	r2, r1
 8013132:	eb00 0c04 	add.w	ip, r0, r4
 8013136:	4621      	mov	r1, r4
 8013138:	270a      	movs	r7, #10
 801313a:	458c      	cmp	ip, r1
 801313c:	d113      	bne.n	8013166 <_strtod_l+0x246>
 801313e:	1821      	adds	r1, r4, r0
 8013140:	2908      	cmp	r1, #8
 8013142:	f104 0401 	add.w	r4, r4, #1
 8013146:	4404      	add	r4, r0
 8013148:	dc19      	bgt.n	801317e <_strtod_l+0x25e>
 801314a:	9b07      	ldr	r3, [sp, #28]
 801314c:	210a      	movs	r1, #10
 801314e:	fb01 e303 	mla	r3, r1, r3, lr
 8013152:	9307      	str	r3, [sp, #28]
 8013154:	2100      	movs	r1, #0
 8013156:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013158:	1c58      	adds	r0, r3, #1
 801315a:	901b      	str	r0, [sp, #108]	; 0x6c
 801315c:	785b      	ldrb	r3, [r3, #1]
 801315e:	4608      	mov	r0, r1
 8013160:	e7c9      	b.n	80130f6 <_strtod_l+0x1d6>
 8013162:	9805      	ldr	r0, [sp, #20]
 8013164:	e7d3      	b.n	801310e <_strtod_l+0x1ee>
 8013166:	2908      	cmp	r1, #8
 8013168:	f101 0101 	add.w	r1, r1, #1
 801316c:	dc03      	bgt.n	8013176 <_strtod_l+0x256>
 801316e:	9b07      	ldr	r3, [sp, #28]
 8013170:	437b      	muls	r3, r7
 8013172:	9307      	str	r3, [sp, #28]
 8013174:	e7e1      	b.n	801313a <_strtod_l+0x21a>
 8013176:	2910      	cmp	r1, #16
 8013178:	bfd8      	it	le
 801317a:	437d      	mulle	r5, r7
 801317c:	e7dd      	b.n	801313a <_strtod_l+0x21a>
 801317e:	2c10      	cmp	r4, #16
 8013180:	bfdc      	itt	le
 8013182:	210a      	movle	r1, #10
 8013184:	fb01 e505 	mlale	r5, r1, r5, lr
 8013188:	e7e4      	b.n	8013154 <_strtod_l+0x234>
 801318a:	2301      	movs	r3, #1
 801318c:	9304      	str	r3, [sp, #16]
 801318e:	e781      	b.n	8013094 <_strtod_l+0x174>
 8013190:	f04f 0c01 	mov.w	ip, #1
 8013194:	1cb3      	adds	r3, r6, #2
 8013196:	931b      	str	r3, [sp, #108]	; 0x6c
 8013198:	78b3      	ldrb	r3, [r6, #2]
 801319a:	e78a      	b.n	80130b2 <_strtod_l+0x192>
 801319c:	f04f 0c00 	mov.w	ip, #0
 80131a0:	e7f8      	b.n	8013194 <_strtod_l+0x274>
 80131a2:	bf00      	nop
 80131a4:	080165e0 	.word	0x080165e0
 80131a8:	7ff00000 	.word	0x7ff00000
 80131ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131ae:	1c5f      	adds	r7, r3, #1
 80131b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80131b2:	785b      	ldrb	r3, [r3, #1]
 80131b4:	2b30      	cmp	r3, #48	; 0x30
 80131b6:	d0f9      	beq.n	80131ac <_strtod_l+0x28c>
 80131b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80131bc:	2f08      	cmp	r7, #8
 80131be:	f63f af7d 	bhi.w	80130bc <_strtod_l+0x19c>
 80131c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80131c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131c8:	930a      	str	r3, [sp, #40]	; 0x28
 80131ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131cc:	1c5f      	adds	r7, r3, #1
 80131ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80131d0:	785b      	ldrb	r3, [r3, #1]
 80131d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80131d6:	f1b8 0f09 	cmp.w	r8, #9
 80131da:	d937      	bls.n	801324c <_strtod_l+0x32c>
 80131dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80131de:	1a7f      	subs	r7, r7, r1
 80131e0:	2f08      	cmp	r7, #8
 80131e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80131e6:	dc37      	bgt.n	8013258 <_strtod_l+0x338>
 80131e8:	45be      	cmp	lr, r7
 80131ea:	bfa8      	it	ge
 80131ec:	46be      	movge	lr, r7
 80131ee:	f1bc 0f00 	cmp.w	ip, #0
 80131f2:	d001      	beq.n	80131f8 <_strtod_l+0x2d8>
 80131f4:	f1ce 0e00 	rsb	lr, lr, #0
 80131f8:	2c00      	cmp	r4, #0
 80131fa:	d151      	bne.n	80132a0 <_strtod_l+0x380>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	f47f aece 	bne.w	8012f9e <_strtod_l+0x7e>
 8013202:	9a06      	ldr	r2, [sp, #24]
 8013204:	2a00      	cmp	r2, #0
 8013206:	f47f aeca 	bne.w	8012f9e <_strtod_l+0x7e>
 801320a:	9a04      	ldr	r2, [sp, #16]
 801320c:	2a00      	cmp	r2, #0
 801320e:	f47f aee4 	bne.w	8012fda <_strtod_l+0xba>
 8013212:	2b4e      	cmp	r3, #78	; 0x4e
 8013214:	d027      	beq.n	8013266 <_strtod_l+0x346>
 8013216:	dc21      	bgt.n	801325c <_strtod_l+0x33c>
 8013218:	2b49      	cmp	r3, #73	; 0x49
 801321a:	f47f aede 	bne.w	8012fda <_strtod_l+0xba>
 801321e:	49a0      	ldr	r1, [pc, #640]	; (80134a0 <_strtod_l+0x580>)
 8013220:	a81b      	add	r0, sp, #108	; 0x6c
 8013222:	f002 f811 	bl	8015248 <__match>
 8013226:	2800      	cmp	r0, #0
 8013228:	f43f aed7 	beq.w	8012fda <_strtod_l+0xba>
 801322c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801322e:	499d      	ldr	r1, [pc, #628]	; (80134a4 <_strtod_l+0x584>)
 8013230:	3b01      	subs	r3, #1
 8013232:	a81b      	add	r0, sp, #108	; 0x6c
 8013234:	931b      	str	r3, [sp, #108]	; 0x6c
 8013236:	f002 f807 	bl	8015248 <__match>
 801323a:	b910      	cbnz	r0, 8013242 <_strtod_l+0x322>
 801323c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801323e:	3301      	adds	r3, #1
 8013240:	931b      	str	r3, [sp, #108]	; 0x6c
 8013242:	f8df b274 	ldr.w	fp, [pc, #628]	; 80134b8 <_strtod_l+0x598>
 8013246:	f04f 0a00 	mov.w	sl, #0
 801324a:	e6a8      	b.n	8012f9e <_strtod_l+0x7e>
 801324c:	210a      	movs	r1, #10
 801324e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013252:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013256:	e7b8      	b.n	80131ca <_strtod_l+0x2aa>
 8013258:	46be      	mov	lr, r7
 801325a:	e7c8      	b.n	80131ee <_strtod_l+0x2ce>
 801325c:	2b69      	cmp	r3, #105	; 0x69
 801325e:	d0de      	beq.n	801321e <_strtod_l+0x2fe>
 8013260:	2b6e      	cmp	r3, #110	; 0x6e
 8013262:	f47f aeba 	bne.w	8012fda <_strtod_l+0xba>
 8013266:	4990      	ldr	r1, [pc, #576]	; (80134a8 <_strtod_l+0x588>)
 8013268:	a81b      	add	r0, sp, #108	; 0x6c
 801326a:	f001 ffed 	bl	8015248 <__match>
 801326e:	2800      	cmp	r0, #0
 8013270:	f43f aeb3 	beq.w	8012fda <_strtod_l+0xba>
 8013274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	2b28      	cmp	r3, #40	; 0x28
 801327a:	d10e      	bne.n	801329a <_strtod_l+0x37a>
 801327c:	aa1e      	add	r2, sp, #120	; 0x78
 801327e:	498b      	ldr	r1, [pc, #556]	; (80134ac <_strtod_l+0x58c>)
 8013280:	a81b      	add	r0, sp, #108	; 0x6c
 8013282:	f001 fff5 	bl	8015270 <__hexnan>
 8013286:	2805      	cmp	r0, #5
 8013288:	d107      	bne.n	801329a <_strtod_l+0x37a>
 801328a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801328c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013290:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013294:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013298:	e681      	b.n	8012f9e <_strtod_l+0x7e>
 801329a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80134c0 <_strtod_l+0x5a0>
 801329e:	e7d2      	b.n	8013246 <_strtod_l+0x326>
 80132a0:	ebae 0302 	sub.w	r3, lr, r2
 80132a4:	9306      	str	r3, [sp, #24]
 80132a6:	9b05      	ldr	r3, [sp, #20]
 80132a8:	9807      	ldr	r0, [sp, #28]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	bf08      	it	eq
 80132ae:	4623      	moveq	r3, r4
 80132b0:	2c10      	cmp	r4, #16
 80132b2:	9305      	str	r3, [sp, #20]
 80132b4:	46a0      	mov	r8, r4
 80132b6:	bfa8      	it	ge
 80132b8:	f04f 0810 	movge.w	r8, #16
 80132bc:	f7ed f932 	bl	8000524 <__aeabi_ui2d>
 80132c0:	2c09      	cmp	r4, #9
 80132c2:	4682      	mov	sl, r0
 80132c4:	468b      	mov	fp, r1
 80132c6:	dc13      	bgt.n	80132f0 <_strtod_l+0x3d0>
 80132c8:	9b06      	ldr	r3, [sp, #24]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f43f ae67 	beq.w	8012f9e <_strtod_l+0x7e>
 80132d0:	9b06      	ldr	r3, [sp, #24]
 80132d2:	dd7a      	ble.n	80133ca <_strtod_l+0x4aa>
 80132d4:	2b16      	cmp	r3, #22
 80132d6:	dc61      	bgt.n	801339c <_strtod_l+0x47c>
 80132d8:	4a75      	ldr	r2, [pc, #468]	; (80134b0 <_strtod_l+0x590>)
 80132da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80132de:	e9de 0100 	ldrd	r0, r1, [lr]
 80132e2:	4652      	mov	r2, sl
 80132e4:	465b      	mov	r3, fp
 80132e6:	f7ed f997 	bl	8000618 <__aeabi_dmul>
 80132ea:	4682      	mov	sl, r0
 80132ec:	468b      	mov	fp, r1
 80132ee:	e656      	b.n	8012f9e <_strtod_l+0x7e>
 80132f0:	4b6f      	ldr	r3, [pc, #444]	; (80134b0 <_strtod_l+0x590>)
 80132f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80132f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80132fa:	f7ed f98d 	bl	8000618 <__aeabi_dmul>
 80132fe:	4606      	mov	r6, r0
 8013300:	4628      	mov	r0, r5
 8013302:	460f      	mov	r7, r1
 8013304:	f7ed f90e 	bl	8000524 <__aeabi_ui2d>
 8013308:	4602      	mov	r2, r0
 801330a:	460b      	mov	r3, r1
 801330c:	4630      	mov	r0, r6
 801330e:	4639      	mov	r1, r7
 8013310:	f7ec ffcc 	bl	80002ac <__adddf3>
 8013314:	2c0f      	cmp	r4, #15
 8013316:	4682      	mov	sl, r0
 8013318:	468b      	mov	fp, r1
 801331a:	ddd5      	ble.n	80132c8 <_strtod_l+0x3a8>
 801331c:	9b06      	ldr	r3, [sp, #24]
 801331e:	eba4 0808 	sub.w	r8, r4, r8
 8013322:	4498      	add	r8, r3
 8013324:	f1b8 0f00 	cmp.w	r8, #0
 8013328:	f340 8096 	ble.w	8013458 <_strtod_l+0x538>
 801332c:	f018 030f 	ands.w	r3, r8, #15
 8013330:	d00a      	beq.n	8013348 <_strtod_l+0x428>
 8013332:	495f      	ldr	r1, [pc, #380]	; (80134b0 <_strtod_l+0x590>)
 8013334:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013338:	4652      	mov	r2, sl
 801333a:	465b      	mov	r3, fp
 801333c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013340:	f7ed f96a 	bl	8000618 <__aeabi_dmul>
 8013344:	4682      	mov	sl, r0
 8013346:	468b      	mov	fp, r1
 8013348:	f038 080f 	bics.w	r8, r8, #15
 801334c:	d073      	beq.n	8013436 <_strtod_l+0x516>
 801334e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013352:	dd47      	ble.n	80133e4 <_strtod_l+0x4c4>
 8013354:	2400      	movs	r4, #0
 8013356:	46a0      	mov	r8, r4
 8013358:	9407      	str	r4, [sp, #28]
 801335a:	9405      	str	r4, [sp, #20]
 801335c:	2322      	movs	r3, #34	; 0x22
 801335e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80134b8 <_strtod_l+0x598>
 8013362:	f8c9 3000 	str.w	r3, [r9]
 8013366:	f04f 0a00 	mov.w	sl, #0
 801336a:	9b07      	ldr	r3, [sp, #28]
 801336c:	2b00      	cmp	r3, #0
 801336e:	f43f ae16 	beq.w	8012f9e <_strtod_l+0x7e>
 8013372:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013374:	4648      	mov	r0, r9
 8013376:	f002 f8cb 	bl	8015510 <_Bfree>
 801337a:	9905      	ldr	r1, [sp, #20]
 801337c:	4648      	mov	r0, r9
 801337e:	f002 f8c7 	bl	8015510 <_Bfree>
 8013382:	4641      	mov	r1, r8
 8013384:	4648      	mov	r0, r9
 8013386:	f002 f8c3 	bl	8015510 <_Bfree>
 801338a:	9907      	ldr	r1, [sp, #28]
 801338c:	4648      	mov	r0, r9
 801338e:	f002 f8bf 	bl	8015510 <_Bfree>
 8013392:	4621      	mov	r1, r4
 8013394:	4648      	mov	r0, r9
 8013396:	f002 f8bb 	bl	8015510 <_Bfree>
 801339a:	e600      	b.n	8012f9e <_strtod_l+0x7e>
 801339c:	9a06      	ldr	r2, [sp, #24]
 801339e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80133a2:	4293      	cmp	r3, r2
 80133a4:	dbba      	blt.n	801331c <_strtod_l+0x3fc>
 80133a6:	4d42      	ldr	r5, [pc, #264]	; (80134b0 <_strtod_l+0x590>)
 80133a8:	f1c4 040f 	rsb	r4, r4, #15
 80133ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80133b0:	4652      	mov	r2, sl
 80133b2:	465b      	mov	r3, fp
 80133b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133b8:	f7ed f92e 	bl	8000618 <__aeabi_dmul>
 80133bc:	9b06      	ldr	r3, [sp, #24]
 80133be:	1b1c      	subs	r4, r3, r4
 80133c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80133c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80133c8:	e78d      	b.n	80132e6 <_strtod_l+0x3c6>
 80133ca:	f113 0f16 	cmn.w	r3, #22
 80133ce:	dba5      	blt.n	801331c <_strtod_l+0x3fc>
 80133d0:	4a37      	ldr	r2, [pc, #220]	; (80134b0 <_strtod_l+0x590>)
 80133d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80133d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80133da:	4650      	mov	r0, sl
 80133dc:	4659      	mov	r1, fp
 80133de:	f7ed fa45 	bl	800086c <__aeabi_ddiv>
 80133e2:	e782      	b.n	80132ea <_strtod_l+0x3ca>
 80133e4:	2300      	movs	r3, #0
 80133e6:	4e33      	ldr	r6, [pc, #204]	; (80134b4 <_strtod_l+0x594>)
 80133e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80133ec:	4650      	mov	r0, sl
 80133ee:	4659      	mov	r1, fp
 80133f0:	461d      	mov	r5, r3
 80133f2:	f1b8 0f01 	cmp.w	r8, #1
 80133f6:	dc21      	bgt.n	801343c <_strtod_l+0x51c>
 80133f8:	b10b      	cbz	r3, 80133fe <_strtod_l+0x4de>
 80133fa:	4682      	mov	sl, r0
 80133fc:	468b      	mov	fp, r1
 80133fe:	4b2d      	ldr	r3, [pc, #180]	; (80134b4 <_strtod_l+0x594>)
 8013400:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013404:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013408:	4652      	mov	r2, sl
 801340a:	465b      	mov	r3, fp
 801340c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013410:	f7ed f902 	bl	8000618 <__aeabi_dmul>
 8013414:	4b28      	ldr	r3, [pc, #160]	; (80134b8 <_strtod_l+0x598>)
 8013416:	460a      	mov	r2, r1
 8013418:	400b      	ands	r3, r1
 801341a:	4928      	ldr	r1, [pc, #160]	; (80134bc <_strtod_l+0x59c>)
 801341c:	428b      	cmp	r3, r1
 801341e:	4682      	mov	sl, r0
 8013420:	d898      	bhi.n	8013354 <_strtod_l+0x434>
 8013422:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013426:	428b      	cmp	r3, r1
 8013428:	bf86      	itte	hi
 801342a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80134c4 <_strtod_l+0x5a4>
 801342e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013432:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013436:	2300      	movs	r3, #0
 8013438:	9304      	str	r3, [sp, #16]
 801343a:	e077      	b.n	801352c <_strtod_l+0x60c>
 801343c:	f018 0f01 	tst.w	r8, #1
 8013440:	d006      	beq.n	8013450 <_strtod_l+0x530>
 8013442:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801344a:	f7ed f8e5 	bl	8000618 <__aeabi_dmul>
 801344e:	2301      	movs	r3, #1
 8013450:	3501      	adds	r5, #1
 8013452:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013456:	e7cc      	b.n	80133f2 <_strtod_l+0x4d2>
 8013458:	d0ed      	beq.n	8013436 <_strtod_l+0x516>
 801345a:	f1c8 0800 	rsb	r8, r8, #0
 801345e:	f018 020f 	ands.w	r2, r8, #15
 8013462:	d00a      	beq.n	801347a <_strtod_l+0x55a>
 8013464:	4b12      	ldr	r3, [pc, #72]	; (80134b0 <_strtod_l+0x590>)
 8013466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801346a:	4650      	mov	r0, sl
 801346c:	4659      	mov	r1, fp
 801346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013472:	f7ed f9fb 	bl	800086c <__aeabi_ddiv>
 8013476:	4682      	mov	sl, r0
 8013478:	468b      	mov	fp, r1
 801347a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801347e:	d0da      	beq.n	8013436 <_strtod_l+0x516>
 8013480:	f1b8 0f1f 	cmp.w	r8, #31
 8013484:	dd20      	ble.n	80134c8 <_strtod_l+0x5a8>
 8013486:	2400      	movs	r4, #0
 8013488:	46a0      	mov	r8, r4
 801348a:	9407      	str	r4, [sp, #28]
 801348c:	9405      	str	r4, [sp, #20]
 801348e:	2322      	movs	r3, #34	; 0x22
 8013490:	f04f 0a00 	mov.w	sl, #0
 8013494:	f04f 0b00 	mov.w	fp, #0
 8013498:	f8c9 3000 	str.w	r3, [r9]
 801349c:	e765      	b.n	801336a <_strtod_l+0x44a>
 801349e:	bf00      	nop
 80134a0:	080165a9 	.word	0x080165a9
 80134a4:	08016633 	.word	0x08016633
 80134a8:	080165b1 	.word	0x080165b1
 80134ac:	080165f4 	.word	0x080165f4
 80134b0:	080166d8 	.word	0x080166d8
 80134b4:	080166b0 	.word	0x080166b0
 80134b8:	7ff00000 	.word	0x7ff00000
 80134bc:	7ca00000 	.word	0x7ca00000
 80134c0:	fff80000 	.word	0xfff80000
 80134c4:	7fefffff 	.word	0x7fefffff
 80134c8:	f018 0310 	ands.w	r3, r8, #16
 80134cc:	bf18      	it	ne
 80134ce:	236a      	movne	r3, #106	; 0x6a
 80134d0:	4da0      	ldr	r5, [pc, #640]	; (8013754 <_strtod_l+0x834>)
 80134d2:	9304      	str	r3, [sp, #16]
 80134d4:	4650      	mov	r0, sl
 80134d6:	4659      	mov	r1, fp
 80134d8:	2300      	movs	r3, #0
 80134da:	f1b8 0f00 	cmp.w	r8, #0
 80134de:	f300 810a 	bgt.w	80136f6 <_strtod_l+0x7d6>
 80134e2:	b10b      	cbz	r3, 80134e8 <_strtod_l+0x5c8>
 80134e4:	4682      	mov	sl, r0
 80134e6:	468b      	mov	fp, r1
 80134e8:	9b04      	ldr	r3, [sp, #16]
 80134ea:	b1bb      	cbz	r3, 801351c <_strtod_l+0x5fc>
 80134ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80134f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	4659      	mov	r1, fp
 80134f8:	dd10      	ble.n	801351c <_strtod_l+0x5fc>
 80134fa:	2b1f      	cmp	r3, #31
 80134fc:	f340 8107 	ble.w	801370e <_strtod_l+0x7ee>
 8013500:	2b34      	cmp	r3, #52	; 0x34
 8013502:	bfde      	ittt	le
 8013504:	3b20      	suble	r3, #32
 8013506:	f04f 32ff 	movle.w	r2, #4294967295
 801350a:	fa02 f303 	lslle.w	r3, r2, r3
 801350e:	f04f 0a00 	mov.w	sl, #0
 8013512:	bfcc      	ite	gt
 8013514:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013518:	ea03 0b01 	andle.w	fp, r3, r1
 801351c:	2200      	movs	r2, #0
 801351e:	2300      	movs	r3, #0
 8013520:	4650      	mov	r0, sl
 8013522:	4659      	mov	r1, fp
 8013524:	f7ed fae0 	bl	8000ae8 <__aeabi_dcmpeq>
 8013528:	2800      	cmp	r0, #0
 801352a:	d1ac      	bne.n	8013486 <_strtod_l+0x566>
 801352c:	9b07      	ldr	r3, [sp, #28]
 801352e:	9300      	str	r3, [sp, #0]
 8013530:	9a05      	ldr	r2, [sp, #20]
 8013532:	9908      	ldr	r1, [sp, #32]
 8013534:	4623      	mov	r3, r4
 8013536:	4648      	mov	r0, r9
 8013538:	f002 f83c 	bl	80155b4 <__s2b>
 801353c:	9007      	str	r0, [sp, #28]
 801353e:	2800      	cmp	r0, #0
 8013540:	f43f af08 	beq.w	8013354 <_strtod_l+0x434>
 8013544:	9a06      	ldr	r2, [sp, #24]
 8013546:	9b06      	ldr	r3, [sp, #24]
 8013548:	2a00      	cmp	r2, #0
 801354a:	f1c3 0300 	rsb	r3, r3, #0
 801354e:	bfa8      	it	ge
 8013550:	2300      	movge	r3, #0
 8013552:	930e      	str	r3, [sp, #56]	; 0x38
 8013554:	2400      	movs	r4, #0
 8013556:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801355a:	9316      	str	r3, [sp, #88]	; 0x58
 801355c:	46a0      	mov	r8, r4
 801355e:	9b07      	ldr	r3, [sp, #28]
 8013560:	4648      	mov	r0, r9
 8013562:	6859      	ldr	r1, [r3, #4]
 8013564:	f001 ffa0 	bl	80154a8 <_Balloc>
 8013568:	9005      	str	r0, [sp, #20]
 801356a:	2800      	cmp	r0, #0
 801356c:	f43f aef6 	beq.w	801335c <_strtod_l+0x43c>
 8013570:	9b07      	ldr	r3, [sp, #28]
 8013572:	691a      	ldr	r2, [r3, #16]
 8013574:	3202      	adds	r2, #2
 8013576:	f103 010c 	add.w	r1, r3, #12
 801357a:	0092      	lsls	r2, r2, #2
 801357c:	300c      	adds	r0, #12
 801357e:	f7fe fc4f 	bl	8011e20 <memcpy>
 8013582:	aa1e      	add	r2, sp, #120	; 0x78
 8013584:	a91d      	add	r1, sp, #116	; 0x74
 8013586:	ec4b ab10 	vmov	d0, sl, fp
 801358a:	4648      	mov	r0, r9
 801358c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013590:	f002 facc 	bl	8015b2c <__d2b>
 8013594:	901c      	str	r0, [sp, #112]	; 0x70
 8013596:	2800      	cmp	r0, #0
 8013598:	f43f aee0 	beq.w	801335c <_strtod_l+0x43c>
 801359c:	2101      	movs	r1, #1
 801359e:	4648      	mov	r0, r9
 80135a0:	f002 f894 	bl	80156cc <__i2b>
 80135a4:	4680      	mov	r8, r0
 80135a6:	2800      	cmp	r0, #0
 80135a8:	f43f aed8 	beq.w	801335c <_strtod_l+0x43c>
 80135ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80135ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80135b0:	2e00      	cmp	r6, #0
 80135b2:	bfab      	itete	ge
 80135b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80135b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80135b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80135ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80135bc:	bfac      	ite	ge
 80135be:	18f7      	addge	r7, r6, r3
 80135c0:	1b9d      	sublt	r5, r3, r6
 80135c2:	9b04      	ldr	r3, [sp, #16]
 80135c4:	1af6      	subs	r6, r6, r3
 80135c6:	4416      	add	r6, r2
 80135c8:	4b63      	ldr	r3, [pc, #396]	; (8013758 <_strtod_l+0x838>)
 80135ca:	3e01      	subs	r6, #1
 80135cc:	429e      	cmp	r6, r3
 80135ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80135d2:	f280 80af 	bge.w	8013734 <_strtod_l+0x814>
 80135d6:	1b9b      	subs	r3, r3, r6
 80135d8:	2b1f      	cmp	r3, #31
 80135da:	eba2 0203 	sub.w	r2, r2, r3
 80135de:	f04f 0101 	mov.w	r1, #1
 80135e2:	f300 809b 	bgt.w	801371c <_strtod_l+0x7fc>
 80135e6:	fa01 f303 	lsl.w	r3, r1, r3
 80135ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80135ec:	2300      	movs	r3, #0
 80135ee:	930a      	str	r3, [sp, #40]	; 0x28
 80135f0:	18be      	adds	r6, r7, r2
 80135f2:	9b04      	ldr	r3, [sp, #16]
 80135f4:	42b7      	cmp	r7, r6
 80135f6:	4415      	add	r5, r2
 80135f8:	441d      	add	r5, r3
 80135fa:	463b      	mov	r3, r7
 80135fc:	bfa8      	it	ge
 80135fe:	4633      	movge	r3, r6
 8013600:	42ab      	cmp	r3, r5
 8013602:	bfa8      	it	ge
 8013604:	462b      	movge	r3, r5
 8013606:	2b00      	cmp	r3, #0
 8013608:	bfc2      	ittt	gt
 801360a:	1af6      	subgt	r6, r6, r3
 801360c:	1aed      	subgt	r5, r5, r3
 801360e:	1aff      	subgt	r7, r7, r3
 8013610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013612:	b1bb      	cbz	r3, 8013644 <_strtod_l+0x724>
 8013614:	4641      	mov	r1, r8
 8013616:	461a      	mov	r2, r3
 8013618:	4648      	mov	r0, r9
 801361a:	f002 f8f7 	bl	801580c <__pow5mult>
 801361e:	4680      	mov	r8, r0
 8013620:	2800      	cmp	r0, #0
 8013622:	f43f ae9b 	beq.w	801335c <_strtod_l+0x43c>
 8013626:	4601      	mov	r1, r0
 8013628:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801362a:	4648      	mov	r0, r9
 801362c:	f002 f857 	bl	80156de <__multiply>
 8013630:	900c      	str	r0, [sp, #48]	; 0x30
 8013632:	2800      	cmp	r0, #0
 8013634:	f43f ae92 	beq.w	801335c <_strtod_l+0x43c>
 8013638:	991c      	ldr	r1, [sp, #112]	; 0x70
 801363a:	4648      	mov	r0, r9
 801363c:	f001 ff68 	bl	8015510 <_Bfree>
 8013640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013642:	931c      	str	r3, [sp, #112]	; 0x70
 8013644:	2e00      	cmp	r6, #0
 8013646:	dc7a      	bgt.n	801373e <_strtod_l+0x81e>
 8013648:	9b06      	ldr	r3, [sp, #24]
 801364a:	2b00      	cmp	r3, #0
 801364c:	dd08      	ble.n	8013660 <_strtod_l+0x740>
 801364e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013650:	9905      	ldr	r1, [sp, #20]
 8013652:	4648      	mov	r0, r9
 8013654:	f002 f8da 	bl	801580c <__pow5mult>
 8013658:	9005      	str	r0, [sp, #20]
 801365a:	2800      	cmp	r0, #0
 801365c:	f43f ae7e 	beq.w	801335c <_strtod_l+0x43c>
 8013660:	2d00      	cmp	r5, #0
 8013662:	dd08      	ble.n	8013676 <_strtod_l+0x756>
 8013664:	462a      	mov	r2, r5
 8013666:	9905      	ldr	r1, [sp, #20]
 8013668:	4648      	mov	r0, r9
 801366a:	f002 f91d 	bl	80158a8 <__lshift>
 801366e:	9005      	str	r0, [sp, #20]
 8013670:	2800      	cmp	r0, #0
 8013672:	f43f ae73 	beq.w	801335c <_strtod_l+0x43c>
 8013676:	2f00      	cmp	r7, #0
 8013678:	dd08      	ble.n	801368c <_strtod_l+0x76c>
 801367a:	4641      	mov	r1, r8
 801367c:	463a      	mov	r2, r7
 801367e:	4648      	mov	r0, r9
 8013680:	f002 f912 	bl	80158a8 <__lshift>
 8013684:	4680      	mov	r8, r0
 8013686:	2800      	cmp	r0, #0
 8013688:	f43f ae68 	beq.w	801335c <_strtod_l+0x43c>
 801368c:	9a05      	ldr	r2, [sp, #20]
 801368e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013690:	4648      	mov	r0, r9
 8013692:	f002 f977 	bl	8015984 <__mdiff>
 8013696:	4604      	mov	r4, r0
 8013698:	2800      	cmp	r0, #0
 801369a:	f43f ae5f 	beq.w	801335c <_strtod_l+0x43c>
 801369e:	68c3      	ldr	r3, [r0, #12]
 80136a0:	930c      	str	r3, [sp, #48]	; 0x30
 80136a2:	2300      	movs	r3, #0
 80136a4:	60c3      	str	r3, [r0, #12]
 80136a6:	4641      	mov	r1, r8
 80136a8:	f002 f952 	bl	8015950 <__mcmp>
 80136ac:	2800      	cmp	r0, #0
 80136ae:	da55      	bge.n	801375c <_strtod_l+0x83c>
 80136b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136b2:	b9e3      	cbnz	r3, 80136ee <_strtod_l+0x7ce>
 80136b4:	f1ba 0f00 	cmp.w	sl, #0
 80136b8:	d119      	bne.n	80136ee <_strtod_l+0x7ce>
 80136ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136be:	b9b3      	cbnz	r3, 80136ee <_strtod_l+0x7ce>
 80136c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80136c4:	0d1b      	lsrs	r3, r3, #20
 80136c6:	051b      	lsls	r3, r3, #20
 80136c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80136cc:	d90f      	bls.n	80136ee <_strtod_l+0x7ce>
 80136ce:	6963      	ldr	r3, [r4, #20]
 80136d0:	b913      	cbnz	r3, 80136d8 <_strtod_l+0x7b8>
 80136d2:	6923      	ldr	r3, [r4, #16]
 80136d4:	2b01      	cmp	r3, #1
 80136d6:	dd0a      	ble.n	80136ee <_strtod_l+0x7ce>
 80136d8:	4621      	mov	r1, r4
 80136da:	2201      	movs	r2, #1
 80136dc:	4648      	mov	r0, r9
 80136de:	f002 f8e3 	bl	80158a8 <__lshift>
 80136e2:	4641      	mov	r1, r8
 80136e4:	4604      	mov	r4, r0
 80136e6:	f002 f933 	bl	8015950 <__mcmp>
 80136ea:	2800      	cmp	r0, #0
 80136ec:	dc67      	bgt.n	80137be <_strtod_l+0x89e>
 80136ee:	9b04      	ldr	r3, [sp, #16]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d171      	bne.n	80137d8 <_strtod_l+0x8b8>
 80136f4:	e63d      	b.n	8013372 <_strtod_l+0x452>
 80136f6:	f018 0f01 	tst.w	r8, #1
 80136fa:	d004      	beq.n	8013706 <_strtod_l+0x7e6>
 80136fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013700:	f7ec ff8a 	bl	8000618 <__aeabi_dmul>
 8013704:	2301      	movs	r3, #1
 8013706:	ea4f 0868 	mov.w	r8, r8, asr #1
 801370a:	3508      	adds	r5, #8
 801370c:	e6e5      	b.n	80134da <_strtod_l+0x5ba>
 801370e:	f04f 32ff 	mov.w	r2, #4294967295
 8013712:	fa02 f303 	lsl.w	r3, r2, r3
 8013716:	ea03 0a0a 	and.w	sl, r3, sl
 801371a:	e6ff      	b.n	801351c <_strtod_l+0x5fc>
 801371c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013720:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013724:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013728:	36e2      	adds	r6, #226	; 0xe2
 801372a:	fa01 f306 	lsl.w	r3, r1, r6
 801372e:	930a      	str	r3, [sp, #40]	; 0x28
 8013730:	910f      	str	r1, [sp, #60]	; 0x3c
 8013732:	e75d      	b.n	80135f0 <_strtod_l+0x6d0>
 8013734:	2300      	movs	r3, #0
 8013736:	930a      	str	r3, [sp, #40]	; 0x28
 8013738:	2301      	movs	r3, #1
 801373a:	930f      	str	r3, [sp, #60]	; 0x3c
 801373c:	e758      	b.n	80135f0 <_strtod_l+0x6d0>
 801373e:	4632      	mov	r2, r6
 8013740:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013742:	4648      	mov	r0, r9
 8013744:	f002 f8b0 	bl	80158a8 <__lshift>
 8013748:	901c      	str	r0, [sp, #112]	; 0x70
 801374a:	2800      	cmp	r0, #0
 801374c:	f47f af7c 	bne.w	8013648 <_strtod_l+0x728>
 8013750:	e604      	b.n	801335c <_strtod_l+0x43c>
 8013752:	bf00      	nop
 8013754:	08016608 	.word	0x08016608
 8013758:	fffffc02 	.word	0xfffffc02
 801375c:	465d      	mov	r5, fp
 801375e:	f040 8086 	bne.w	801386e <_strtod_l+0x94e>
 8013762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013768:	b32a      	cbz	r2, 80137b6 <_strtod_l+0x896>
 801376a:	4aaf      	ldr	r2, [pc, #700]	; (8013a28 <_strtod_l+0xb08>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d153      	bne.n	8013818 <_strtod_l+0x8f8>
 8013770:	9b04      	ldr	r3, [sp, #16]
 8013772:	4650      	mov	r0, sl
 8013774:	b1d3      	cbz	r3, 80137ac <_strtod_l+0x88c>
 8013776:	4aad      	ldr	r2, [pc, #692]	; (8013a2c <_strtod_l+0xb0c>)
 8013778:	402a      	ands	r2, r5
 801377a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801377e:	f04f 31ff 	mov.w	r1, #4294967295
 8013782:	d816      	bhi.n	80137b2 <_strtod_l+0x892>
 8013784:	0d12      	lsrs	r2, r2, #20
 8013786:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801378a:	fa01 f303 	lsl.w	r3, r1, r3
 801378e:	4298      	cmp	r0, r3
 8013790:	d142      	bne.n	8013818 <_strtod_l+0x8f8>
 8013792:	4ba7      	ldr	r3, [pc, #668]	; (8013a30 <_strtod_l+0xb10>)
 8013794:	429d      	cmp	r5, r3
 8013796:	d102      	bne.n	801379e <_strtod_l+0x87e>
 8013798:	3001      	adds	r0, #1
 801379a:	f43f addf 	beq.w	801335c <_strtod_l+0x43c>
 801379e:	4ba3      	ldr	r3, [pc, #652]	; (8013a2c <_strtod_l+0xb0c>)
 80137a0:	402b      	ands	r3, r5
 80137a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80137a6:	f04f 0a00 	mov.w	sl, #0
 80137aa:	e7a0      	b.n	80136ee <_strtod_l+0x7ce>
 80137ac:	f04f 33ff 	mov.w	r3, #4294967295
 80137b0:	e7ed      	b.n	801378e <_strtod_l+0x86e>
 80137b2:	460b      	mov	r3, r1
 80137b4:	e7eb      	b.n	801378e <_strtod_l+0x86e>
 80137b6:	bb7b      	cbnz	r3, 8013818 <_strtod_l+0x8f8>
 80137b8:	f1ba 0f00 	cmp.w	sl, #0
 80137bc:	d12c      	bne.n	8013818 <_strtod_l+0x8f8>
 80137be:	9904      	ldr	r1, [sp, #16]
 80137c0:	4a9a      	ldr	r2, [pc, #616]	; (8013a2c <_strtod_l+0xb0c>)
 80137c2:	465b      	mov	r3, fp
 80137c4:	b1f1      	cbz	r1, 8013804 <_strtod_l+0x8e4>
 80137c6:	ea02 010b 	and.w	r1, r2, fp
 80137ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80137ce:	dc19      	bgt.n	8013804 <_strtod_l+0x8e4>
 80137d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80137d4:	f77f ae5b 	ble.w	801348e <_strtod_l+0x56e>
 80137d8:	4a96      	ldr	r2, [pc, #600]	; (8013a34 <_strtod_l+0xb14>)
 80137da:	2300      	movs	r3, #0
 80137dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80137e0:	4650      	mov	r0, sl
 80137e2:	4659      	mov	r1, fp
 80137e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80137e8:	f7ec ff16 	bl	8000618 <__aeabi_dmul>
 80137ec:	4682      	mov	sl, r0
 80137ee:	468b      	mov	fp, r1
 80137f0:	2900      	cmp	r1, #0
 80137f2:	f47f adbe 	bne.w	8013372 <_strtod_l+0x452>
 80137f6:	2800      	cmp	r0, #0
 80137f8:	f47f adbb 	bne.w	8013372 <_strtod_l+0x452>
 80137fc:	2322      	movs	r3, #34	; 0x22
 80137fe:	f8c9 3000 	str.w	r3, [r9]
 8013802:	e5b6      	b.n	8013372 <_strtod_l+0x452>
 8013804:	4013      	ands	r3, r2
 8013806:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801380a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801380e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013812:	f04f 3aff 	mov.w	sl, #4294967295
 8013816:	e76a      	b.n	80136ee <_strtod_l+0x7ce>
 8013818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801381a:	b193      	cbz	r3, 8013842 <_strtod_l+0x922>
 801381c:	422b      	tst	r3, r5
 801381e:	f43f af66 	beq.w	80136ee <_strtod_l+0x7ce>
 8013822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013824:	9a04      	ldr	r2, [sp, #16]
 8013826:	4650      	mov	r0, sl
 8013828:	4659      	mov	r1, fp
 801382a:	b173      	cbz	r3, 801384a <_strtod_l+0x92a>
 801382c:	f7ff fb5a 	bl	8012ee4 <sulp>
 8013830:	4602      	mov	r2, r0
 8013832:	460b      	mov	r3, r1
 8013834:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013838:	f7ec fd38 	bl	80002ac <__adddf3>
 801383c:	4682      	mov	sl, r0
 801383e:	468b      	mov	fp, r1
 8013840:	e755      	b.n	80136ee <_strtod_l+0x7ce>
 8013842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013844:	ea13 0f0a 	tst.w	r3, sl
 8013848:	e7e9      	b.n	801381e <_strtod_l+0x8fe>
 801384a:	f7ff fb4b 	bl	8012ee4 <sulp>
 801384e:	4602      	mov	r2, r0
 8013850:	460b      	mov	r3, r1
 8013852:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013856:	f7ec fd27 	bl	80002a8 <__aeabi_dsub>
 801385a:	2200      	movs	r2, #0
 801385c:	2300      	movs	r3, #0
 801385e:	4682      	mov	sl, r0
 8013860:	468b      	mov	fp, r1
 8013862:	f7ed f941 	bl	8000ae8 <__aeabi_dcmpeq>
 8013866:	2800      	cmp	r0, #0
 8013868:	f47f ae11 	bne.w	801348e <_strtod_l+0x56e>
 801386c:	e73f      	b.n	80136ee <_strtod_l+0x7ce>
 801386e:	4641      	mov	r1, r8
 8013870:	4620      	mov	r0, r4
 8013872:	f002 f9aa 	bl	8015bca <__ratio>
 8013876:	ec57 6b10 	vmov	r6, r7, d0
 801387a:	2200      	movs	r2, #0
 801387c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013880:	ee10 0a10 	vmov	r0, s0
 8013884:	4639      	mov	r1, r7
 8013886:	f7ed f943 	bl	8000b10 <__aeabi_dcmple>
 801388a:	2800      	cmp	r0, #0
 801388c:	d077      	beq.n	801397e <_strtod_l+0xa5e>
 801388e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013890:	2b00      	cmp	r3, #0
 8013892:	d04a      	beq.n	801392a <_strtod_l+0xa0a>
 8013894:	4b68      	ldr	r3, [pc, #416]	; (8013a38 <_strtod_l+0xb18>)
 8013896:	2200      	movs	r2, #0
 8013898:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801389c:	4f66      	ldr	r7, [pc, #408]	; (8013a38 <_strtod_l+0xb18>)
 801389e:	2600      	movs	r6, #0
 80138a0:	4b62      	ldr	r3, [pc, #392]	; (8013a2c <_strtod_l+0xb0c>)
 80138a2:	402b      	ands	r3, r5
 80138a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80138a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138a8:	4b64      	ldr	r3, [pc, #400]	; (8013a3c <_strtod_l+0xb1c>)
 80138aa:	429a      	cmp	r2, r3
 80138ac:	f040 80ce 	bne.w	8013a4c <_strtod_l+0xb2c>
 80138b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80138b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80138b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80138bc:	ec4b ab10 	vmov	d0, sl, fp
 80138c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80138c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80138c8:	f002 f8ba 	bl	8015a40 <__ulp>
 80138cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80138d0:	ec53 2b10 	vmov	r2, r3, d0
 80138d4:	f7ec fea0 	bl	8000618 <__aeabi_dmul>
 80138d8:	4652      	mov	r2, sl
 80138da:	465b      	mov	r3, fp
 80138dc:	f7ec fce6 	bl	80002ac <__adddf3>
 80138e0:	460b      	mov	r3, r1
 80138e2:	4952      	ldr	r1, [pc, #328]	; (8013a2c <_strtod_l+0xb0c>)
 80138e4:	4a56      	ldr	r2, [pc, #344]	; (8013a40 <_strtod_l+0xb20>)
 80138e6:	4019      	ands	r1, r3
 80138e8:	4291      	cmp	r1, r2
 80138ea:	4682      	mov	sl, r0
 80138ec:	d95b      	bls.n	80139a6 <_strtod_l+0xa86>
 80138ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80138f4:	4293      	cmp	r3, r2
 80138f6:	d103      	bne.n	8013900 <_strtod_l+0x9e0>
 80138f8:	9b08      	ldr	r3, [sp, #32]
 80138fa:	3301      	adds	r3, #1
 80138fc:	f43f ad2e 	beq.w	801335c <_strtod_l+0x43c>
 8013900:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013a30 <_strtod_l+0xb10>
 8013904:	f04f 3aff 	mov.w	sl, #4294967295
 8013908:	991c      	ldr	r1, [sp, #112]	; 0x70
 801390a:	4648      	mov	r0, r9
 801390c:	f001 fe00 	bl	8015510 <_Bfree>
 8013910:	9905      	ldr	r1, [sp, #20]
 8013912:	4648      	mov	r0, r9
 8013914:	f001 fdfc 	bl	8015510 <_Bfree>
 8013918:	4641      	mov	r1, r8
 801391a:	4648      	mov	r0, r9
 801391c:	f001 fdf8 	bl	8015510 <_Bfree>
 8013920:	4621      	mov	r1, r4
 8013922:	4648      	mov	r0, r9
 8013924:	f001 fdf4 	bl	8015510 <_Bfree>
 8013928:	e619      	b.n	801355e <_strtod_l+0x63e>
 801392a:	f1ba 0f00 	cmp.w	sl, #0
 801392e:	d11a      	bne.n	8013966 <_strtod_l+0xa46>
 8013930:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013934:	b9eb      	cbnz	r3, 8013972 <_strtod_l+0xa52>
 8013936:	2200      	movs	r2, #0
 8013938:	4b3f      	ldr	r3, [pc, #252]	; (8013a38 <_strtod_l+0xb18>)
 801393a:	4630      	mov	r0, r6
 801393c:	4639      	mov	r1, r7
 801393e:	f7ed f8dd 	bl	8000afc <__aeabi_dcmplt>
 8013942:	b9c8      	cbnz	r0, 8013978 <_strtod_l+0xa58>
 8013944:	4630      	mov	r0, r6
 8013946:	4639      	mov	r1, r7
 8013948:	2200      	movs	r2, #0
 801394a:	4b3e      	ldr	r3, [pc, #248]	; (8013a44 <_strtod_l+0xb24>)
 801394c:	f7ec fe64 	bl	8000618 <__aeabi_dmul>
 8013950:	4606      	mov	r6, r0
 8013952:	460f      	mov	r7, r1
 8013954:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013958:	9618      	str	r6, [sp, #96]	; 0x60
 801395a:	9319      	str	r3, [sp, #100]	; 0x64
 801395c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013960:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013964:	e79c      	b.n	80138a0 <_strtod_l+0x980>
 8013966:	f1ba 0f01 	cmp.w	sl, #1
 801396a:	d102      	bne.n	8013972 <_strtod_l+0xa52>
 801396c:	2d00      	cmp	r5, #0
 801396e:	f43f ad8e 	beq.w	801348e <_strtod_l+0x56e>
 8013972:	2200      	movs	r2, #0
 8013974:	4b34      	ldr	r3, [pc, #208]	; (8013a48 <_strtod_l+0xb28>)
 8013976:	e78f      	b.n	8013898 <_strtod_l+0x978>
 8013978:	2600      	movs	r6, #0
 801397a:	4f32      	ldr	r7, [pc, #200]	; (8013a44 <_strtod_l+0xb24>)
 801397c:	e7ea      	b.n	8013954 <_strtod_l+0xa34>
 801397e:	4b31      	ldr	r3, [pc, #196]	; (8013a44 <_strtod_l+0xb24>)
 8013980:	4630      	mov	r0, r6
 8013982:	4639      	mov	r1, r7
 8013984:	2200      	movs	r2, #0
 8013986:	f7ec fe47 	bl	8000618 <__aeabi_dmul>
 801398a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801398c:	4606      	mov	r6, r0
 801398e:	460f      	mov	r7, r1
 8013990:	b933      	cbnz	r3, 80139a0 <_strtod_l+0xa80>
 8013992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013996:	9010      	str	r0, [sp, #64]	; 0x40
 8013998:	9311      	str	r3, [sp, #68]	; 0x44
 801399a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801399e:	e7df      	b.n	8013960 <_strtod_l+0xa40>
 80139a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80139a4:	e7f9      	b.n	801399a <_strtod_l+0xa7a>
 80139a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80139aa:	9b04      	ldr	r3, [sp, #16]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1ab      	bne.n	8013908 <_strtod_l+0x9e8>
 80139b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80139b4:	0d1b      	lsrs	r3, r3, #20
 80139b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139b8:	051b      	lsls	r3, r3, #20
 80139ba:	429a      	cmp	r2, r3
 80139bc:	465d      	mov	r5, fp
 80139be:	d1a3      	bne.n	8013908 <_strtod_l+0x9e8>
 80139c0:	4639      	mov	r1, r7
 80139c2:	4630      	mov	r0, r6
 80139c4:	f7ed f8d8 	bl	8000b78 <__aeabi_d2iz>
 80139c8:	f7ec fdbc 	bl	8000544 <__aeabi_i2d>
 80139cc:	460b      	mov	r3, r1
 80139ce:	4602      	mov	r2, r0
 80139d0:	4639      	mov	r1, r7
 80139d2:	4630      	mov	r0, r6
 80139d4:	f7ec fc68 	bl	80002a8 <__aeabi_dsub>
 80139d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139da:	4606      	mov	r6, r0
 80139dc:	460f      	mov	r7, r1
 80139de:	b933      	cbnz	r3, 80139ee <_strtod_l+0xace>
 80139e0:	f1ba 0f00 	cmp.w	sl, #0
 80139e4:	d103      	bne.n	80139ee <_strtod_l+0xace>
 80139e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80139ea:	2d00      	cmp	r5, #0
 80139ec:	d06d      	beq.n	8013aca <_strtod_l+0xbaa>
 80139ee:	a30a      	add	r3, pc, #40	; (adr r3, 8013a18 <_strtod_l+0xaf8>)
 80139f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f4:	4630      	mov	r0, r6
 80139f6:	4639      	mov	r1, r7
 80139f8:	f7ed f880 	bl	8000afc <__aeabi_dcmplt>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	f47f acb8 	bne.w	8013372 <_strtod_l+0x452>
 8013a02:	a307      	add	r3, pc, #28	; (adr r3, 8013a20 <_strtod_l+0xb00>)
 8013a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a08:	4630      	mov	r0, r6
 8013a0a:	4639      	mov	r1, r7
 8013a0c:	f7ed f894 	bl	8000b38 <__aeabi_dcmpgt>
 8013a10:	2800      	cmp	r0, #0
 8013a12:	f43f af79 	beq.w	8013908 <_strtod_l+0x9e8>
 8013a16:	e4ac      	b.n	8013372 <_strtod_l+0x452>
 8013a18:	94a03595 	.word	0x94a03595
 8013a1c:	3fdfffff 	.word	0x3fdfffff
 8013a20:	35afe535 	.word	0x35afe535
 8013a24:	3fe00000 	.word	0x3fe00000
 8013a28:	000fffff 	.word	0x000fffff
 8013a2c:	7ff00000 	.word	0x7ff00000
 8013a30:	7fefffff 	.word	0x7fefffff
 8013a34:	39500000 	.word	0x39500000
 8013a38:	3ff00000 	.word	0x3ff00000
 8013a3c:	7fe00000 	.word	0x7fe00000
 8013a40:	7c9fffff 	.word	0x7c9fffff
 8013a44:	3fe00000 	.word	0x3fe00000
 8013a48:	bff00000 	.word	0xbff00000
 8013a4c:	9b04      	ldr	r3, [sp, #16]
 8013a4e:	b333      	cbz	r3, 8013a9e <_strtod_l+0xb7e>
 8013a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013a56:	d822      	bhi.n	8013a9e <_strtod_l+0xb7e>
 8013a58:	a327      	add	r3, pc, #156	; (adr r3, 8013af8 <_strtod_l+0xbd8>)
 8013a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5e:	4630      	mov	r0, r6
 8013a60:	4639      	mov	r1, r7
 8013a62:	f7ed f855 	bl	8000b10 <__aeabi_dcmple>
 8013a66:	b1a0      	cbz	r0, 8013a92 <_strtod_l+0xb72>
 8013a68:	4639      	mov	r1, r7
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	f7ed f8ac 	bl	8000bc8 <__aeabi_d2uiz>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	bf08      	it	eq
 8013a74:	2001      	moveq	r0, #1
 8013a76:	f7ec fd55 	bl	8000524 <__aeabi_ui2d>
 8013a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a7c:	4606      	mov	r6, r0
 8013a7e:	460f      	mov	r7, r1
 8013a80:	bb03      	cbnz	r3, 8013ac4 <_strtod_l+0xba4>
 8013a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a86:	9012      	str	r0, [sp, #72]	; 0x48
 8013a88:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013a8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a96:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013a9a:	1a9b      	subs	r3, r3, r2
 8013a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a9e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013aa2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013aa6:	f001 ffcb 	bl	8015a40 <__ulp>
 8013aaa:	4650      	mov	r0, sl
 8013aac:	ec53 2b10 	vmov	r2, r3, d0
 8013ab0:	4659      	mov	r1, fp
 8013ab2:	f7ec fdb1 	bl	8000618 <__aeabi_dmul>
 8013ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013aba:	f7ec fbf7 	bl	80002ac <__adddf3>
 8013abe:	4682      	mov	sl, r0
 8013ac0:	468b      	mov	fp, r1
 8013ac2:	e772      	b.n	80139aa <_strtod_l+0xa8a>
 8013ac4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013ac8:	e7df      	b.n	8013a8a <_strtod_l+0xb6a>
 8013aca:	a30d      	add	r3, pc, #52	; (adr r3, 8013b00 <_strtod_l+0xbe0>)
 8013acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad0:	f7ed f814 	bl	8000afc <__aeabi_dcmplt>
 8013ad4:	e79c      	b.n	8013a10 <_strtod_l+0xaf0>
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	930d      	str	r3, [sp, #52]	; 0x34
 8013ada:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ade:	6013      	str	r3, [r2, #0]
 8013ae0:	f7ff ba61 	b.w	8012fa6 <_strtod_l+0x86>
 8013ae4:	2b65      	cmp	r3, #101	; 0x65
 8013ae6:	f04f 0200 	mov.w	r2, #0
 8013aea:	f43f ab4e 	beq.w	801318a <_strtod_l+0x26a>
 8013aee:	2101      	movs	r1, #1
 8013af0:	4614      	mov	r4, r2
 8013af2:	9104      	str	r1, [sp, #16]
 8013af4:	f7ff bacb 	b.w	801308e <_strtod_l+0x16e>
 8013af8:	ffc00000 	.word	0xffc00000
 8013afc:	41dfffff 	.word	0x41dfffff
 8013b00:	94a03595 	.word	0x94a03595
 8013b04:	3fcfffff 	.word	0x3fcfffff

08013b08 <_strtod_r>:
 8013b08:	4b05      	ldr	r3, [pc, #20]	; (8013b20 <_strtod_r+0x18>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	b410      	push	{r4}
 8013b0e:	6a1b      	ldr	r3, [r3, #32]
 8013b10:	4c04      	ldr	r4, [pc, #16]	; (8013b24 <_strtod_r+0x1c>)
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	bf08      	it	eq
 8013b16:	4623      	moveq	r3, r4
 8013b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b1c:	f7ff ba00 	b.w	8012f20 <_strtod_l>
 8013b20:	20000020 	.word	0x20000020
 8013b24:	20000084 	.word	0x20000084

08013b28 <_strtol_l.isra.0>:
 8013b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b2c:	4680      	mov	r8, r0
 8013b2e:	4689      	mov	r9, r1
 8013b30:	4692      	mov	sl, r2
 8013b32:	461e      	mov	r6, r3
 8013b34:	460f      	mov	r7, r1
 8013b36:	463d      	mov	r5, r7
 8013b38:	9808      	ldr	r0, [sp, #32]
 8013b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b3e:	f001 fc27 	bl	8015390 <__locale_ctype_ptr_l>
 8013b42:	4420      	add	r0, r4
 8013b44:	7843      	ldrb	r3, [r0, #1]
 8013b46:	f013 0308 	ands.w	r3, r3, #8
 8013b4a:	d132      	bne.n	8013bb2 <_strtol_l.isra.0+0x8a>
 8013b4c:	2c2d      	cmp	r4, #45	; 0x2d
 8013b4e:	d132      	bne.n	8013bb6 <_strtol_l.isra.0+0x8e>
 8013b50:	787c      	ldrb	r4, [r7, #1]
 8013b52:	1cbd      	adds	r5, r7, #2
 8013b54:	2201      	movs	r2, #1
 8013b56:	2e00      	cmp	r6, #0
 8013b58:	d05d      	beq.n	8013c16 <_strtol_l.isra.0+0xee>
 8013b5a:	2e10      	cmp	r6, #16
 8013b5c:	d109      	bne.n	8013b72 <_strtol_l.isra.0+0x4a>
 8013b5e:	2c30      	cmp	r4, #48	; 0x30
 8013b60:	d107      	bne.n	8013b72 <_strtol_l.isra.0+0x4a>
 8013b62:	782b      	ldrb	r3, [r5, #0]
 8013b64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013b68:	2b58      	cmp	r3, #88	; 0x58
 8013b6a:	d14f      	bne.n	8013c0c <_strtol_l.isra.0+0xe4>
 8013b6c:	786c      	ldrb	r4, [r5, #1]
 8013b6e:	2610      	movs	r6, #16
 8013b70:	3502      	adds	r5, #2
 8013b72:	2a00      	cmp	r2, #0
 8013b74:	bf14      	ite	ne
 8013b76:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013b7a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013b7e:	2700      	movs	r7, #0
 8013b80:	fbb1 fcf6 	udiv	ip, r1, r6
 8013b84:	4638      	mov	r0, r7
 8013b86:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013b8a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013b8e:	2b09      	cmp	r3, #9
 8013b90:	d817      	bhi.n	8013bc2 <_strtol_l.isra.0+0x9a>
 8013b92:	461c      	mov	r4, r3
 8013b94:	42a6      	cmp	r6, r4
 8013b96:	dd23      	ble.n	8013be0 <_strtol_l.isra.0+0xb8>
 8013b98:	1c7b      	adds	r3, r7, #1
 8013b9a:	d007      	beq.n	8013bac <_strtol_l.isra.0+0x84>
 8013b9c:	4584      	cmp	ip, r0
 8013b9e:	d31c      	bcc.n	8013bda <_strtol_l.isra.0+0xb2>
 8013ba0:	d101      	bne.n	8013ba6 <_strtol_l.isra.0+0x7e>
 8013ba2:	45a6      	cmp	lr, r4
 8013ba4:	db19      	blt.n	8013bda <_strtol_l.isra.0+0xb2>
 8013ba6:	fb00 4006 	mla	r0, r0, r6, r4
 8013baa:	2701      	movs	r7, #1
 8013bac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013bb0:	e7eb      	b.n	8013b8a <_strtol_l.isra.0+0x62>
 8013bb2:	462f      	mov	r7, r5
 8013bb4:	e7bf      	b.n	8013b36 <_strtol_l.isra.0+0xe>
 8013bb6:	2c2b      	cmp	r4, #43	; 0x2b
 8013bb8:	bf04      	itt	eq
 8013bba:	1cbd      	addeq	r5, r7, #2
 8013bbc:	787c      	ldrbeq	r4, [r7, #1]
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	e7c9      	b.n	8013b56 <_strtol_l.isra.0+0x2e>
 8013bc2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013bc6:	2b19      	cmp	r3, #25
 8013bc8:	d801      	bhi.n	8013bce <_strtol_l.isra.0+0xa6>
 8013bca:	3c37      	subs	r4, #55	; 0x37
 8013bcc:	e7e2      	b.n	8013b94 <_strtol_l.isra.0+0x6c>
 8013bce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013bd2:	2b19      	cmp	r3, #25
 8013bd4:	d804      	bhi.n	8013be0 <_strtol_l.isra.0+0xb8>
 8013bd6:	3c57      	subs	r4, #87	; 0x57
 8013bd8:	e7dc      	b.n	8013b94 <_strtol_l.isra.0+0x6c>
 8013bda:	f04f 37ff 	mov.w	r7, #4294967295
 8013bde:	e7e5      	b.n	8013bac <_strtol_l.isra.0+0x84>
 8013be0:	1c7b      	adds	r3, r7, #1
 8013be2:	d108      	bne.n	8013bf6 <_strtol_l.isra.0+0xce>
 8013be4:	2322      	movs	r3, #34	; 0x22
 8013be6:	f8c8 3000 	str.w	r3, [r8]
 8013bea:	4608      	mov	r0, r1
 8013bec:	f1ba 0f00 	cmp.w	sl, #0
 8013bf0:	d107      	bne.n	8013c02 <_strtol_l.isra.0+0xda>
 8013bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bf6:	b102      	cbz	r2, 8013bfa <_strtol_l.isra.0+0xd2>
 8013bf8:	4240      	negs	r0, r0
 8013bfa:	f1ba 0f00 	cmp.w	sl, #0
 8013bfe:	d0f8      	beq.n	8013bf2 <_strtol_l.isra.0+0xca>
 8013c00:	b10f      	cbz	r7, 8013c06 <_strtol_l.isra.0+0xde>
 8013c02:	f105 39ff 	add.w	r9, r5, #4294967295
 8013c06:	f8ca 9000 	str.w	r9, [sl]
 8013c0a:	e7f2      	b.n	8013bf2 <_strtol_l.isra.0+0xca>
 8013c0c:	2430      	movs	r4, #48	; 0x30
 8013c0e:	2e00      	cmp	r6, #0
 8013c10:	d1af      	bne.n	8013b72 <_strtol_l.isra.0+0x4a>
 8013c12:	2608      	movs	r6, #8
 8013c14:	e7ad      	b.n	8013b72 <_strtol_l.isra.0+0x4a>
 8013c16:	2c30      	cmp	r4, #48	; 0x30
 8013c18:	d0a3      	beq.n	8013b62 <_strtol_l.isra.0+0x3a>
 8013c1a:	260a      	movs	r6, #10
 8013c1c:	e7a9      	b.n	8013b72 <_strtol_l.isra.0+0x4a>
	...

08013c20 <_strtol_r>:
 8013c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c22:	4c06      	ldr	r4, [pc, #24]	; (8013c3c <_strtol_r+0x1c>)
 8013c24:	4d06      	ldr	r5, [pc, #24]	; (8013c40 <_strtol_r+0x20>)
 8013c26:	6824      	ldr	r4, [r4, #0]
 8013c28:	6a24      	ldr	r4, [r4, #32]
 8013c2a:	2c00      	cmp	r4, #0
 8013c2c:	bf08      	it	eq
 8013c2e:	462c      	moveq	r4, r5
 8013c30:	9400      	str	r4, [sp, #0]
 8013c32:	f7ff ff79 	bl	8013b28 <_strtol_l.isra.0>
 8013c36:	b003      	add	sp, #12
 8013c38:	bd30      	pop	{r4, r5, pc}
 8013c3a:	bf00      	nop
 8013c3c:	20000020 	.word	0x20000020
 8013c40:	20000084 	.word	0x20000084

08013c44 <__swbuf_r>:
 8013c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c46:	460e      	mov	r6, r1
 8013c48:	4614      	mov	r4, r2
 8013c4a:	4605      	mov	r5, r0
 8013c4c:	b118      	cbz	r0, 8013c56 <__swbuf_r+0x12>
 8013c4e:	6983      	ldr	r3, [r0, #24]
 8013c50:	b90b      	cbnz	r3, 8013c56 <__swbuf_r+0x12>
 8013c52:	f000 ffed 	bl	8014c30 <__sinit>
 8013c56:	4b21      	ldr	r3, [pc, #132]	; (8013cdc <__swbuf_r+0x98>)
 8013c58:	429c      	cmp	r4, r3
 8013c5a:	d12a      	bne.n	8013cb2 <__swbuf_r+0x6e>
 8013c5c:	686c      	ldr	r4, [r5, #4]
 8013c5e:	69a3      	ldr	r3, [r4, #24]
 8013c60:	60a3      	str	r3, [r4, #8]
 8013c62:	89a3      	ldrh	r3, [r4, #12]
 8013c64:	071a      	lsls	r2, r3, #28
 8013c66:	d52e      	bpl.n	8013cc6 <__swbuf_r+0x82>
 8013c68:	6923      	ldr	r3, [r4, #16]
 8013c6a:	b363      	cbz	r3, 8013cc6 <__swbuf_r+0x82>
 8013c6c:	6923      	ldr	r3, [r4, #16]
 8013c6e:	6820      	ldr	r0, [r4, #0]
 8013c70:	1ac0      	subs	r0, r0, r3
 8013c72:	6963      	ldr	r3, [r4, #20]
 8013c74:	b2f6      	uxtb	r6, r6
 8013c76:	4283      	cmp	r3, r0
 8013c78:	4637      	mov	r7, r6
 8013c7a:	dc04      	bgt.n	8013c86 <__swbuf_r+0x42>
 8013c7c:	4621      	mov	r1, r4
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f000 ff6c 	bl	8014b5c <_fflush_r>
 8013c84:	bb28      	cbnz	r0, 8013cd2 <__swbuf_r+0x8e>
 8013c86:	68a3      	ldr	r3, [r4, #8]
 8013c88:	3b01      	subs	r3, #1
 8013c8a:	60a3      	str	r3, [r4, #8]
 8013c8c:	6823      	ldr	r3, [r4, #0]
 8013c8e:	1c5a      	adds	r2, r3, #1
 8013c90:	6022      	str	r2, [r4, #0]
 8013c92:	701e      	strb	r6, [r3, #0]
 8013c94:	6963      	ldr	r3, [r4, #20]
 8013c96:	3001      	adds	r0, #1
 8013c98:	4283      	cmp	r3, r0
 8013c9a:	d004      	beq.n	8013ca6 <__swbuf_r+0x62>
 8013c9c:	89a3      	ldrh	r3, [r4, #12]
 8013c9e:	07db      	lsls	r3, r3, #31
 8013ca0:	d519      	bpl.n	8013cd6 <__swbuf_r+0x92>
 8013ca2:	2e0a      	cmp	r6, #10
 8013ca4:	d117      	bne.n	8013cd6 <__swbuf_r+0x92>
 8013ca6:	4621      	mov	r1, r4
 8013ca8:	4628      	mov	r0, r5
 8013caa:	f000 ff57 	bl	8014b5c <_fflush_r>
 8013cae:	b190      	cbz	r0, 8013cd6 <__swbuf_r+0x92>
 8013cb0:	e00f      	b.n	8013cd2 <__swbuf_r+0x8e>
 8013cb2:	4b0b      	ldr	r3, [pc, #44]	; (8013ce0 <__swbuf_r+0x9c>)
 8013cb4:	429c      	cmp	r4, r3
 8013cb6:	d101      	bne.n	8013cbc <__swbuf_r+0x78>
 8013cb8:	68ac      	ldr	r4, [r5, #8]
 8013cba:	e7d0      	b.n	8013c5e <__swbuf_r+0x1a>
 8013cbc:	4b09      	ldr	r3, [pc, #36]	; (8013ce4 <__swbuf_r+0xa0>)
 8013cbe:	429c      	cmp	r4, r3
 8013cc0:	bf08      	it	eq
 8013cc2:	68ec      	ldreq	r4, [r5, #12]
 8013cc4:	e7cb      	b.n	8013c5e <__swbuf_r+0x1a>
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	4628      	mov	r0, r5
 8013cca:	f000 f80d 	bl	8013ce8 <__swsetup_r>
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d0cc      	beq.n	8013c6c <__swbuf_r+0x28>
 8013cd2:	f04f 37ff 	mov.w	r7, #4294967295
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	08016660 	.word	0x08016660
 8013ce0:	08016680 	.word	0x08016680
 8013ce4:	08016640 	.word	0x08016640

08013ce8 <__swsetup_r>:
 8013ce8:	4b32      	ldr	r3, [pc, #200]	; (8013db4 <__swsetup_r+0xcc>)
 8013cea:	b570      	push	{r4, r5, r6, lr}
 8013cec:	681d      	ldr	r5, [r3, #0]
 8013cee:	4606      	mov	r6, r0
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	b125      	cbz	r5, 8013cfe <__swsetup_r+0x16>
 8013cf4:	69ab      	ldr	r3, [r5, #24]
 8013cf6:	b913      	cbnz	r3, 8013cfe <__swsetup_r+0x16>
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	f000 ff99 	bl	8014c30 <__sinit>
 8013cfe:	4b2e      	ldr	r3, [pc, #184]	; (8013db8 <__swsetup_r+0xd0>)
 8013d00:	429c      	cmp	r4, r3
 8013d02:	d10f      	bne.n	8013d24 <__swsetup_r+0x3c>
 8013d04:	686c      	ldr	r4, [r5, #4]
 8013d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d0a:	b29a      	uxth	r2, r3
 8013d0c:	0715      	lsls	r5, r2, #28
 8013d0e:	d42c      	bmi.n	8013d6a <__swsetup_r+0x82>
 8013d10:	06d0      	lsls	r0, r2, #27
 8013d12:	d411      	bmi.n	8013d38 <__swsetup_r+0x50>
 8013d14:	2209      	movs	r2, #9
 8013d16:	6032      	str	r2, [r6, #0]
 8013d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d1c:	81a3      	strh	r3, [r4, #12]
 8013d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d22:	e03e      	b.n	8013da2 <__swsetup_r+0xba>
 8013d24:	4b25      	ldr	r3, [pc, #148]	; (8013dbc <__swsetup_r+0xd4>)
 8013d26:	429c      	cmp	r4, r3
 8013d28:	d101      	bne.n	8013d2e <__swsetup_r+0x46>
 8013d2a:	68ac      	ldr	r4, [r5, #8]
 8013d2c:	e7eb      	b.n	8013d06 <__swsetup_r+0x1e>
 8013d2e:	4b24      	ldr	r3, [pc, #144]	; (8013dc0 <__swsetup_r+0xd8>)
 8013d30:	429c      	cmp	r4, r3
 8013d32:	bf08      	it	eq
 8013d34:	68ec      	ldreq	r4, [r5, #12]
 8013d36:	e7e6      	b.n	8013d06 <__swsetup_r+0x1e>
 8013d38:	0751      	lsls	r1, r2, #29
 8013d3a:	d512      	bpl.n	8013d62 <__swsetup_r+0x7a>
 8013d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d3e:	b141      	cbz	r1, 8013d52 <__swsetup_r+0x6a>
 8013d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d44:	4299      	cmp	r1, r3
 8013d46:	d002      	beq.n	8013d4e <__swsetup_r+0x66>
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f7fe f87d 	bl	8011e48 <_free_r>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	6363      	str	r3, [r4, #52]	; 0x34
 8013d52:	89a3      	ldrh	r3, [r4, #12]
 8013d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013d58:	81a3      	strh	r3, [r4, #12]
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	6063      	str	r3, [r4, #4]
 8013d5e:	6923      	ldr	r3, [r4, #16]
 8013d60:	6023      	str	r3, [r4, #0]
 8013d62:	89a3      	ldrh	r3, [r4, #12]
 8013d64:	f043 0308 	orr.w	r3, r3, #8
 8013d68:	81a3      	strh	r3, [r4, #12]
 8013d6a:	6923      	ldr	r3, [r4, #16]
 8013d6c:	b94b      	cbnz	r3, 8013d82 <__swsetup_r+0x9a>
 8013d6e:	89a3      	ldrh	r3, [r4, #12]
 8013d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d78:	d003      	beq.n	8013d82 <__swsetup_r+0x9a>
 8013d7a:	4621      	mov	r1, r4
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f001 fb3f 	bl	8015400 <__smakebuf_r>
 8013d82:	89a2      	ldrh	r2, [r4, #12]
 8013d84:	f012 0301 	ands.w	r3, r2, #1
 8013d88:	d00c      	beq.n	8013da4 <__swsetup_r+0xbc>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	60a3      	str	r3, [r4, #8]
 8013d8e:	6963      	ldr	r3, [r4, #20]
 8013d90:	425b      	negs	r3, r3
 8013d92:	61a3      	str	r3, [r4, #24]
 8013d94:	6923      	ldr	r3, [r4, #16]
 8013d96:	b953      	cbnz	r3, 8013dae <__swsetup_r+0xc6>
 8013d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013da0:	d1ba      	bne.n	8013d18 <__swsetup_r+0x30>
 8013da2:	bd70      	pop	{r4, r5, r6, pc}
 8013da4:	0792      	lsls	r2, r2, #30
 8013da6:	bf58      	it	pl
 8013da8:	6963      	ldrpl	r3, [r4, #20]
 8013daa:	60a3      	str	r3, [r4, #8]
 8013dac:	e7f2      	b.n	8013d94 <__swsetup_r+0xac>
 8013dae:	2000      	movs	r0, #0
 8013db0:	e7f7      	b.n	8013da2 <__swsetup_r+0xba>
 8013db2:	bf00      	nop
 8013db4:	20000020 	.word	0x20000020
 8013db8:	08016660 	.word	0x08016660
 8013dbc:	08016680 	.word	0x08016680
 8013dc0:	08016640 	.word	0x08016640

08013dc4 <quorem>:
 8013dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc8:	6903      	ldr	r3, [r0, #16]
 8013dca:	690c      	ldr	r4, [r1, #16]
 8013dcc:	42a3      	cmp	r3, r4
 8013dce:	4680      	mov	r8, r0
 8013dd0:	f2c0 8082 	blt.w	8013ed8 <quorem+0x114>
 8013dd4:	3c01      	subs	r4, #1
 8013dd6:	f101 0714 	add.w	r7, r1, #20
 8013dda:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013dde:	f100 0614 	add.w	r6, r0, #20
 8013de2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013de6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013dea:	eb06 030c 	add.w	r3, r6, ip
 8013dee:	3501      	adds	r5, #1
 8013df0:	eb07 090c 	add.w	r9, r7, ip
 8013df4:	9301      	str	r3, [sp, #4]
 8013df6:	fbb0 f5f5 	udiv	r5, r0, r5
 8013dfa:	b395      	cbz	r5, 8013e62 <quorem+0x9e>
 8013dfc:	f04f 0a00 	mov.w	sl, #0
 8013e00:	4638      	mov	r0, r7
 8013e02:	46b6      	mov	lr, r6
 8013e04:	46d3      	mov	fp, sl
 8013e06:	f850 2b04 	ldr.w	r2, [r0], #4
 8013e0a:	b293      	uxth	r3, r2
 8013e0c:	fb05 a303 	mla	r3, r5, r3, sl
 8013e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	ebab 0303 	sub.w	r3, fp, r3
 8013e1a:	0c12      	lsrs	r2, r2, #16
 8013e1c:	f8de b000 	ldr.w	fp, [lr]
 8013e20:	fb05 a202 	mla	r2, r5, r2, sl
 8013e24:	fa13 f38b 	uxtah	r3, r3, fp
 8013e28:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013e2c:	fa1f fb82 	uxth.w	fp, r2
 8013e30:	f8de 2000 	ldr.w	r2, [lr]
 8013e34:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013e38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e42:	4581      	cmp	r9, r0
 8013e44:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013e48:	f84e 3b04 	str.w	r3, [lr], #4
 8013e4c:	d2db      	bcs.n	8013e06 <quorem+0x42>
 8013e4e:	f856 300c 	ldr.w	r3, [r6, ip]
 8013e52:	b933      	cbnz	r3, 8013e62 <quorem+0x9e>
 8013e54:	9b01      	ldr	r3, [sp, #4]
 8013e56:	3b04      	subs	r3, #4
 8013e58:	429e      	cmp	r6, r3
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	d330      	bcc.n	8013ec0 <quorem+0xfc>
 8013e5e:	f8c8 4010 	str.w	r4, [r8, #16]
 8013e62:	4640      	mov	r0, r8
 8013e64:	f001 fd74 	bl	8015950 <__mcmp>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	db25      	blt.n	8013eb8 <quorem+0xf4>
 8013e6c:	3501      	adds	r5, #1
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f04f 0c00 	mov.w	ip, #0
 8013e74:	f857 2b04 	ldr.w	r2, [r7], #4
 8013e78:	f8d0 e000 	ldr.w	lr, [r0]
 8013e7c:	b293      	uxth	r3, r2
 8013e7e:	ebac 0303 	sub.w	r3, ip, r3
 8013e82:	0c12      	lsrs	r2, r2, #16
 8013e84:	fa13 f38e 	uxtah	r3, r3, lr
 8013e88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013e8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e90:	b29b      	uxth	r3, r3
 8013e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e96:	45b9      	cmp	r9, r7
 8013e98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e9c:	f840 3b04 	str.w	r3, [r0], #4
 8013ea0:	d2e8      	bcs.n	8013e74 <quorem+0xb0>
 8013ea2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013ea6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013eaa:	b92a      	cbnz	r2, 8013eb8 <quorem+0xf4>
 8013eac:	3b04      	subs	r3, #4
 8013eae:	429e      	cmp	r6, r3
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	d30b      	bcc.n	8013ecc <quorem+0x108>
 8013eb4:	f8c8 4010 	str.w	r4, [r8, #16]
 8013eb8:	4628      	mov	r0, r5
 8013eba:	b003      	add	sp, #12
 8013ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec0:	6812      	ldr	r2, [r2, #0]
 8013ec2:	3b04      	subs	r3, #4
 8013ec4:	2a00      	cmp	r2, #0
 8013ec6:	d1ca      	bne.n	8013e5e <quorem+0x9a>
 8013ec8:	3c01      	subs	r4, #1
 8013eca:	e7c5      	b.n	8013e58 <quorem+0x94>
 8013ecc:	6812      	ldr	r2, [r2, #0]
 8013ece:	3b04      	subs	r3, #4
 8013ed0:	2a00      	cmp	r2, #0
 8013ed2:	d1ef      	bne.n	8013eb4 <quorem+0xf0>
 8013ed4:	3c01      	subs	r4, #1
 8013ed6:	e7ea      	b.n	8013eae <quorem+0xea>
 8013ed8:	2000      	movs	r0, #0
 8013eda:	e7ee      	b.n	8013eba <quorem+0xf6>
 8013edc:	0000      	movs	r0, r0
	...

08013ee0 <_dtoa_r>:
 8013ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee4:	ec57 6b10 	vmov	r6, r7, d0
 8013ee8:	b097      	sub	sp, #92	; 0x5c
 8013eea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013eec:	9106      	str	r1, [sp, #24]
 8013eee:	4604      	mov	r4, r0
 8013ef0:	920b      	str	r2, [sp, #44]	; 0x2c
 8013ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8013ef4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013ef8:	e9cd 6700 	strd	r6, r7, [sp]
 8013efc:	b93d      	cbnz	r5, 8013f0e <_dtoa_r+0x2e>
 8013efe:	2010      	movs	r0, #16
 8013f00:	f7fd ff7e 	bl	8011e00 <malloc>
 8013f04:	6260      	str	r0, [r4, #36]	; 0x24
 8013f06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013f0a:	6005      	str	r5, [r0, #0]
 8013f0c:	60c5      	str	r5, [r0, #12]
 8013f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f10:	6819      	ldr	r1, [r3, #0]
 8013f12:	b151      	cbz	r1, 8013f2a <_dtoa_r+0x4a>
 8013f14:	685a      	ldr	r2, [r3, #4]
 8013f16:	604a      	str	r2, [r1, #4]
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4093      	lsls	r3, r2
 8013f1c:	608b      	str	r3, [r1, #8]
 8013f1e:	4620      	mov	r0, r4
 8013f20:	f001 faf6 	bl	8015510 <_Bfree>
 8013f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f26:	2200      	movs	r2, #0
 8013f28:	601a      	str	r2, [r3, #0]
 8013f2a:	1e3b      	subs	r3, r7, #0
 8013f2c:	bfbb      	ittet	lt
 8013f2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013f32:	9301      	strlt	r3, [sp, #4]
 8013f34:	2300      	movge	r3, #0
 8013f36:	2201      	movlt	r2, #1
 8013f38:	bfac      	ite	ge
 8013f3a:	f8c8 3000 	strge.w	r3, [r8]
 8013f3e:	f8c8 2000 	strlt.w	r2, [r8]
 8013f42:	4baf      	ldr	r3, [pc, #700]	; (8014200 <_dtoa_r+0x320>)
 8013f44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013f48:	ea33 0308 	bics.w	r3, r3, r8
 8013f4c:	d114      	bne.n	8013f78 <_dtoa_r+0x98>
 8013f4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f50:	f242 730f 	movw	r3, #9999	; 0x270f
 8013f54:	6013      	str	r3, [r2, #0]
 8013f56:	9b00      	ldr	r3, [sp, #0]
 8013f58:	b923      	cbnz	r3, 8013f64 <_dtoa_r+0x84>
 8013f5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013f5e:	2800      	cmp	r0, #0
 8013f60:	f000 8542 	beq.w	80149e8 <_dtoa_r+0xb08>
 8013f64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014214 <_dtoa_r+0x334>
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f000 8544 	beq.w	80149f8 <_dtoa_r+0xb18>
 8013f70:	f10b 0303 	add.w	r3, fp, #3
 8013f74:	f000 bd3e 	b.w	80149f4 <_dtoa_r+0xb14>
 8013f78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	2300      	movs	r3, #0
 8013f80:	4630      	mov	r0, r6
 8013f82:	4639      	mov	r1, r7
 8013f84:	f7ec fdb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8013f88:	4681      	mov	r9, r0
 8013f8a:	b168      	cbz	r0, 8013fa8 <_dtoa_r+0xc8>
 8013f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f8e:	2301      	movs	r3, #1
 8013f90:	6013      	str	r3, [r2, #0]
 8013f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 8524 	beq.w	80149e2 <_dtoa_r+0xb02>
 8013f9a:	4b9a      	ldr	r3, [pc, #616]	; (8014204 <_dtoa_r+0x324>)
 8013f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f9e:	f103 3bff 	add.w	fp, r3, #4294967295
 8013fa2:	6013      	str	r3, [r2, #0]
 8013fa4:	f000 bd28 	b.w	80149f8 <_dtoa_r+0xb18>
 8013fa8:	aa14      	add	r2, sp, #80	; 0x50
 8013faa:	a915      	add	r1, sp, #84	; 0x54
 8013fac:	ec47 6b10 	vmov	d0, r6, r7
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f001 fdbb 	bl	8015b2c <__d2b>
 8013fb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013fba:	9004      	str	r0, [sp, #16]
 8013fbc:	2d00      	cmp	r5, #0
 8013fbe:	d07c      	beq.n	80140ba <_dtoa_r+0x1da>
 8013fc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013fc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013fc8:	46b2      	mov	sl, r6
 8013fca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013fd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	4b8b      	ldr	r3, [pc, #556]	; (8014208 <_dtoa_r+0x328>)
 8013fda:	4650      	mov	r0, sl
 8013fdc:	4659      	mov	r1, fp
 8013fde:	f7ec f963 	bl	80002a8 <__aeabi_dsub>
 8013fe2:	a381      	add	r3, pc, #516	; (adr r3, 80141e8 <_dtoa_r+0x308>)
 8013fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe8:	f7ec fb16 	bl	8000618 <__aeabi_dmul>
 8013fec:	a380      	add	r3, pc, #512	; (adr r3, 80141f0 <_dtoa_r+0x310>)
 8013fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff2:	f7ec f95b 	bl	80002ac <__adddf3>
 8013ff6:	4606      	mov	r6, r0
 8013ff8:	4628      	mov	r0, r5
 8013ffa:	460f      	mov	r7, r1
 8013ffc:	f7ec faa2 	bl	8000544 <__aeabi_i2d>
 8014000:	a37d      	add	r3, pc, #500	; (adr r3, 80141f8 <_dtoa_r+0x318>)
 8014002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014006:	f7ec fb07 	bl	8000618 <__aeabi_dmul>
 801400a:	4602      	mov	r2, r0
 801400c:	460b      	mov	r3, r1
 801400e:	4630      	mov	r0, r6
 8014010:	4639      	mov	r1, r7
 8014012:	f7ec f94b 	bl	80002ac <__adddf3>
 8014016:	4606      	mov	r6, r0
 8014018:	460f      	mov	r7, r1
 801401a:	f7ec fdad 	bl	8000b78 <__aeabi_d2iz>
 801401e:	2200      	movs	r2, #0
 8014020:	4682      	mov	sl, r0
 8014022:	2300      	movs	r3, #0
 8014024:	4630      	mov	r0, r6
 8014026:	4639      	mov	r1, r7
 8014028:	f7ec fd68 	bl	8000afc <__aeabi_dcmplt>
 801402c:	b148      	cbz	r0, 8014042 <_dtoa_r+0x162>
 801402e:	4650      	mov	r0, sl
 8014030:	f7ec fa88 	bl	8000544 <__aeabi_i2d>
 8014034:	4632      	mov	r2, r6
 8014036:	463b      	mov	r3, r7
 8014038:	f7ec fd56 	bl	8000ae8 <__aeabi_dcmpeq>
 801403c:	b908      	cbnz	r0, 8014042 <_dtoa_r+0x162>
 801403e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014042:	f1ba 0f16 	cmp.w	sl, #22
 8014046:	d859      	bhi.n	80140fc <_dtoa_r+0x21c>
 8014048:	4970      	ldr	r1, [pc, #448]	; (801420c <_dtoa_r+0x32c>)
 801404a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801404e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014056:	f7ec fd6f 	bl	8000b38 <__aeabi_dcmpgt>
 801405a:	2800      	cmp	r0, #0
 801405c:	d050      	beq.n	8014100 <_dtoa_r+0x220>
 801405e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014062:	2300      	movs	r3, #0
 8014064:	930f      	str	r3, [sp, #60]	; 0x3c
 8014066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014068:	1b5d      	subs	r5, r3, r5
 801406a:	f1b5 0801 	subs.w	r8, r5, #1
 801406e:	bf49      	itett	mi
 8014070:	f1c5 0301 	rsbmi	r3, r5, #1
 8014074:	2300      	movpl	r3, #0
 8014076:	9305      	strmi	r3, [sp, #20]
 8014078:	f04f 0800 	movmi.w	r8, #0
 801407c:	bf58      	it	pl
 801407e:	9305      	strpl	r3, [sp, #20]
 8014080:	f1ba 0f00 	cmp.w	sl, #0
 8014084:	db3e      	blt.n	8014104 <_dtoa_r+0x224>
 8014086:	2300      	movs	r3, #0
 8014088:	44d0      	add	r8, sl
 801408a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801408e:	9307      	str	r3, [sp, #28]
 8014090:	9b06      	ldr	r3, [sp, #24]
 8014092:	2b09      	cmp	r3, #9
 8014094:	f200 8090 	bhi.w	80141b8 <_dtoa_r+0x2d8>
 8014098:	2b05      	cmp	r3, #5
 801409a:	bfc4      	itt	gt
 801409c:	3b04      	subgt	r3, #4
 801409e:	9306      	strgt	r3, [sp, #24]
 80140a0:	9b06      	ldr	r3, [sp, #24]
 80140a2:	f1a3 0302 	sub.w	r3, r3, #2
 80140a6:	bfcc      	ite	gt
 80140a8:	2500      	movgt	r5, #0
 80140aa:	2501      	movle	r5, #1
 80140ac:	2b03      	cmp	r3, #3
 80140ae:	f200 808f 	bhi.w	80141d0 <_dtoa_r+0x2f0>
 80140b2:	e8df f003 	tbb	[pc, r3]
 80140b6:	7f7d      	.short	0x7f7d
 80140b8:	7131      	.short	0x7131
 80140ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80140be:	441d      	add	r5, r3
 80140c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80140c4:	2820      	cmp	r0, #32
 80140c6:	dd13      	ble.n	80140f0 <_dtoa_r+0x210>
 80140c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80140cc:	9b00      	ldr	r3, [sp, #0]
 80140ce:	fa08 f800 	lsl.w	r8, r8, r0
 80140d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80140d6:	fa23 f000 	lsr.w	r0, r3, r0
 80140da:	ea48 0000 	orr.w	r0, r8, r0
 80140de:	f7ec fa21 	bl	8000524 <__aeabi_ui2d>
 80140e2:	2301      	movs	r3, #1
 80140e4:	4682      	mov	sl, r0
 80140e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80140ea:	3d01      	subs	r5, #1
 80140ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80140ee:	e772      	b.n	8013fd6 <_dtoa_r+0xf6>
 80140f0:	9b00      	ldr	r3, [sp, #0]
 80140f2:	f1c0 0020 	rsb	r0, r0, #32
 80140f6:	fa03 f000 	lsl.w	r0, r3, r0
 80140fa:	e7f0      	b.n	80140de <_dtoa_r+0x1fe>
 80140fc:	2301      	movs	r3, #1
 80140fe:	e7b1      	b.n	8014064 <_dtoa_r+0x184>
 8014100:	900f      	str	r0, [sp, #60]	; 0x3c
 8014102:	e7b0      	b.n	8014066 <_dtoa_r+0x186>
 8014104:	9b05      	ldr	r3, [sp, #20]
 8014106:	eba3 030a 	sub.w	r3, r3, sl
 801410a:	9305      	str	r3, [sp, #20]
 801410c:	f1ca 0300 	rsb	r3, sl, #0
 8014110:	9307      	str	r3, [sp, #28]
 8014112:	2300      	movs	r3, #0
 8014114:	930e      	str	r3, [sp, #56]	; 0x38
 8014116:	e7bb      	b.n	8014090 <_dtoa_r+0x1b0>
 8014118:	2301      	movs	r3, #1
 801411a:	930a      	str	r3, [sp, #40]	; 0x28
 801411c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801411e:	2b00      	cmp	r3, #0
 8014120:	dd59      	ble.n	80141d6 <_dtoa_r+0x2f6>
 8014122:	9302      	str	r3, [sp, #8]
 8014124:	4699      	mov	r9, r3
 8014126:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014128:	2200      	movs	r2, #0
 801412a:	6072      	str	r2, [r6, #4]
 801412c:	2204      	movs	r2, #4
 801412e:	f102 0014 	add.w	r0, r2, #20
 8014132:	4298      	cmp	r0, r3
 8014134:	6871      	ldr	r1, [r6, #4]
 8014136:	d953      	bls.n	80141e0 <_dtoa_r+0x300>
 8014138:	4620      	mov	r0, r4
 801413a:	f001 f9b5 	bl	80154a8 <_Balloc>
 801413e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014140:	6030      	str	r0, [r6, #0]
 8014142:	f1b9 0f0e 	cmp.w	r9, #14
 8014146:	f8d3 b000 	ldr.w	fp, [r3]
 801414a:	f200 80e6 	bhi.w	801431a <_dtoa_r+0x43a>
 801414e:	2d00      	cmp	r5, #0
 8014150:	f000 80e3 	beq.w	801431a <_dtoa_r+0x43a>
 8014154:	ed9d 7b00 	vldr	d7, [sp]
 8014158:	f1ba 0f00 	cmp.w	sl, #0
 801415c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014160:	dd74      	ble.n	801424c <_dtoa_r+0x36c>
 8014162:	4a2a      	ldr	r2, [pc, #168]	; (801420c <_dtoa_r+0x32c>)
 8014164:	f00a 030f 	and.w	r3, sl, #15
 8014168:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801416c:	ed93 7b00 	vldr	d7, [r3]
 8014170:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014174:	06f0      	lsls	r0, r6, #27
 8014176:	ed8d 7b08 	vstr	d7, [sp, #32]
 801417a:	d565      	bpl.n	8014248 <_dtoa_r+0x368>
 801417c:	4b24      	ldr	r3, [pc, #144]	; (8014210 <_dtoa_r+0x330>)
 801417e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014182:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014186:	f7ec fb71 	bl	800086c <__aeabi_ddiv>
 801418a:	e9cd 0100 	strd	r0, r1, [sp]
 801418e:	f006 060f 	and.w	r6, r6, #15
 8014192:	2503      	movs	r5, #3
 8014194:	4f1e      	ldr	r7, [pc, #120]	; (8014210 <_dtoa_r+0x330>)
 8014196:	e04c      	b.n	8014232 <_dtoa_r+0x352>
 8014198:	2301      	movs	r3, #1
 801419a:	930a      	str	r3, [sp, #40]	; 0x28
 801419c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801419e:	4453      	add	r3, sl
 80141a0:	f103 0901 	add.w	r9, r3, #1
 80141a4:	9302      	str	r3, [sp, #8]
 80141a6:	464b      	mov	r3, r9
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	bfb8      	it	lt
 80141ac:	2301      	movlt	r3, #1
 80141ae:	e7ba      	b.n	8014126 <_dtoa_r+0x246>
 80141b0:	2300      	movs	r3, #0
 80141b2:	e7b2      	b.n	801411a <_dtoa_r+0x23a>
 80141b4:	2300      	movs	r3, #0
 80141b6:	e7f0      	b.n	801419a <_dtoa_r+0x2ba>
 80141b8:	2501      	movs	r5, #1
 80141ba:	2300      	movs	r3, #0
 80141bc:	9306      	str	r3, [sp, #24]
 80141be:	950a      	str	r5, [sp, #40]	; 0x28
 80141c0:	f04f 33ff 	mov.w	r3, #4294967295
 80141c4:	9302      	str	r3, [sp, #8]
 80141c6:	4699      	mov	r9, r3
 80141c8:	2200      	movs	r2, #0
 80141ca:	2312      	movs	r3, #18
 80141cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80141ce:	e7aa      	b.n	8014126 <_dtoa_r+0x246>
 80141d0:	2301      	movs	r3, #1
 80141d2:	930a      	str	r3, [sp, #40]	; 0x28
 80141d4:	e7f4      	b.n	80141c0 <_dtoa_r+0x2e0>
 80141d6:	2301      	movs	r3, #1
 80141d8:	9302      	str	r3, [sp, #8]
 80141da:	4699      	mov	r9, r3
 80141dc:	461a      	mov	r2, r3
 80141de:	e7f5      	b.n	80141cc <_dtoa_r+0x2ec>
 80141e0:	3101      	adds	r1, #1
 80141e2:	6071      	str	r1, [r6, #4]
 80141e4:	0052      	lsls	r2, r2, #1
 80141e6:	e7a2      	b.n	801412e <_dtoa_r+0x24e>
 80141e8:	636f4361 	.word	0x636f4361
 80141ec:	3fd287a7 	.word	0x3fd287a7
 80141f0:	8b60c8b3 	.word	0x8b60c8b3
 80141f4:	3fc68a28 	.word	0x3fc68a28
 80141f8:	509f79fb 	.word	0x509f79fb
 80141fc:	3fd34413 	.word	0x3fd34413
 8014200:	7ff00000 	.word	0x7ff00000
 8014204:	080165b5 	.word	0x080165b5
 8014208:	3ff80000 	.word	0x3ff80000
 801420c:	080166d8 	.word	0x080166d8
 8014210:	080166b0 	.word	0x080166b0
 8014214:	08016639 	.word	0x08016639
 8014218:	07f1      	lsls	r1, r6, #31
 801421a:	d508      	bpl.n	801422e <_dtoa_r+0x34e>
 801421c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014224:	f7ec f9f8 	bl	8000618 <__aeabi_dmul>
 8014228:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801422c:	3501      	adds	r5, #1
 801422e:	1076      	asrs	r6, r6, #1
 8014230:	3708      	adds	r7, #8
 8014232:	2e00      	cmp	r6, #0
 8014234:	d1f0      	bne.n	8014218 <_dtoa_r+0x338>
 8014236:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801423a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801423e:	f7ec fb15 	bl	800086c <__aeabi_ddiv>
 8014242:	e9cd 0100 	strd	r0, r1, [sp]
 8014246:	e01a      	b.n	801427e <_dtoa_r+0x39e>
 8014248:	2502      	movs	r5, #2
 801424a:	e7a3      	b.n	8014194 <_dtoa_r+0x2b4>
 801424c:	f000 80a0 	beq.w	8014390 <_dtoa_r+0x4b0>
 8014250:	f1ca 0600 	rsb	r6, sl, #0
 8014254:	4b9f      	ldr	r3, [pc, #636]	; (80144d4 <_dtoa_r+0x5f4>)
 8014256:	4fa0      	ldr	r7, [pc, #640]	; (80144d8 <_dtoa_r+0x5f8>)
 8014258:	f006 020f 	and.w	r2, r6, #15
 801425c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014268:	f7ec f9d6 	bl	8000618 <__aeabi_dmul>
 801426c:	e9cd 0100 	strd	r0, r1, [sp]
 8014270:	1136      	asrs	r6, r6, #4
 8014272:	2300      	movs	r3, #0
 8014274:	2502      	movs	r5, #2
 8014276:	2e00      	cmp	r6, #0
 8014278:	d17f      	bne.n	801437a <_dtoa_r+0x49a>
 801427a:	2b00      	cmp	r3, #0
 801427c:	d1e1      	bne.n	8014242 <_dtoa_r+0x362>
 801427e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014280:	2b00      	cmp	r3, #0
 8014282:	f000 8087 	beq.w	8014394 <_dtoa_r+0x4b4>
 8014286:	e9dd 6700 	ldrd	r6, r7, [sp]
 801428a:	2200      	movs	r2, #0
 801428c:	4b93      	ldr	r3, [pc, #588]	; (80144dc <_dtoa_r+0x5fc>)
 801428e:	4630      	mov	r0, r6
 8014290:	4639      	mov	r1, r7
 8014292:	f7ec fc33 	bl	8000afc <__aeabi_dcmplt>
 8014296:	2800      	cmp	r0, #0
 8014298:	d07c      	beq.n	8014394 <_dtoa_r+0x4b4>
 801429a:	f1b9 0f00 	cmp.w	r9, #0
 801429e:	d079      	beq.n	8014394 <_dtoa_r+0x4b4>
 80142a0:	9b02      	ldr	r3, [sp, #8]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	dd35      	ble.n	8014312 <_dtoa_r+0x432>
 80142a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80142aa:	9308      	str	r3, [sp, #32]
 80142ac:	4639      	mov	r1, r7
 80142ae:	2200      	movs	r2, #0
 80142b0:	4b8b      	ldr	r3, [pc, #556]	; (80144e0 <_dtoa_r+0x600>)
 80142b2:	4630      	mov	r0, r6
 80142b4:	f7ec f9b0 	bl	8000618 <__aeabi_dmul>
 80142b8:	e9cd 0100 	strd	r0, r1, [sp]
 80142bc:	9f02      	ldr	r7, [sp, #8]
 80142be:	3501      	adds	r5, #1
 80142c0:	4628      	mov	r0, r5
 80142c2:	f7ec f93f 	bl	8000544 <__aeabi_i2d>
 80142c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142ca:	f7ec f9a5 	bl	8000618 <__aeabi_dmul>
 80142ce:	2200      	movs	r2, #0
 80142d0:	4b84      	ldr	r3, [pc, #528]	; (80144e4 <_dtoa_r+0x604>)
 80142d2:	f7eb ffeb 	bl	80002ac <__adddf3>
 80142d6:	4605      	mov	r5, r0
 80142d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80142dc:	2f00      	cmp	r7, #0
 80142de:	d15d      	bne.n	801439c <_dtoa_r+0x4bc>
 80142e0:	2200      	movs	r2, #0
 80142e2:	4b81      	ldr	r3, [pc, #516]	; (80144e8 <_dtoa_r+0x608>)
 80142e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142e8:	f7eb ffde 	bl	80002a8 <__aeabi_dsub>
 80142ec:	462a      	mov	r2, r5
 80142ee:	4633      	mov	r3, r6
 80142f0:	e9cd 0100 	strd	r0, r1, [sp]
 80142f4:	f7ec fc20 	bl	8000b38 <__aeabi_dcmpgt>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	f040 8288 	bne.w	801480e <_dtoa_r+0x92e>
 80142fe:	462a      	mov	r2, r5
 8014300:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014308:	f7ec fbf8 	bl	8000afc <__aeabi_dcmplt>
 801430c:	2800      	cmp	r0, #0
 801430e:	f040 827c 	bne.w	801480a <_dtoa_r+0x92a>
 8014312:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014316:	e9cd 2300 	strd	r2, r3, [sp]
 801431a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801431c:	2b00      	cmp	r3, #0
 801431e:	f2c0 8150 	blt.w	80145c2 <_dtoa_r+0x6e2>
 8014322:	f1ba 0f0e 	cmp.w	sl, #14
 8014326:	f300 814c 	bgt.w	80145c2 <_dtoa_r+0x6e2>
 801432a:	4b6a      	ldr	r3, [pc, #424]	; (80144d4 <_dtoa_r+0x5f4>)
 801432c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014330:	ed93 7b00 	vldr	d7, [r3]
 8014334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014336:	2b00      	cmp	r3, #0
 8014338:	ed8d 7b02 	vstr	d7, [sp, #8]
 801433c:	f280 80d8 	bge.w	80144f0 <_dtoa_r+0x610>
 8014340:	f1b9 0f00 	cmp.w	r9, #0
 8014344:	f300 80d4 	bgt.w	80144f0 <_dtoa_r+0x610>
 8014348:	f040 825e 	bne.w	8014808 <_dtoa_r+0x928>
 801434c:	2200      	movs	r2, #0
 801434e:	4b66      	ldr	r3, [pc, #408]	; (80144e8 <_dtoa_r+0x608>)
 8014350:	ec51 0b17 	vmov	r0, r1, d7
 8014354:	f7ec f960 	bl	8000618 <__aeabi_dmul>
 8014358:	e9dd 2300 	ldrd	r2, r3, [sp]
 801435c:	f7ec fbe2 	bl	8000b24 <__aeabi_dcmpge>
 8014360:	464f      	mov	r7, r9
 8014362:	464e      	mov	r6, r9
 8014364:	2800      	cmp	r0, #0
 8014366:	f040 8234 	bne.w	80147d2 <_dtoa_r+0x8f2>
 801436a:	2331      	movs	r3, #49	; 0x31
 801436c:	f10b 0501 	add.w	r5, fp, #1
 8014370:	f88b 3000 	strb.w	r3, [fp]
 8014374:	f10a 0a01 	add.w	sl, sl, #1
 8014378:	e22f      	b.n	80147da <_dtoa_r+0x8fa>
 801437a:	07f2      	lsls	r2, r6, #31
 801437c:	d505      	bpl.n	801438a <_dtoa_r+0x4aa>
 801437e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014382:	f7ec f949 	bl	8000618 <__aeabi_dmul>
 8014386:	3501      	adds	r5, #1
 8014388:	2301      	movs	r3, #1
 801438a:	1076      	asrs	r6, r6, #1
 801438c:	3708      	adds	r7, #8
 801438e:	e772      	b.n	8014276 <_dtoa_r+0x396>
 8014390:	2502      	movs	r5, #2
 8014392:	e774      	b.n	801427e <_dtoa_r+0x39e>
 8014394:	f8cd a020 	str.w	sl, [sp, #32]
 8014398:	464f      	mov	r7, r9
 801439a:	e791      	b.n	80142c0 <_dtoa_r+0x3e0>
 801439c:	4b4d      	ldr	r3, [pc, #308]	; (80144d4 <_dtoa_r+0x5f4>)
 801439e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80143a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80143a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d047      	beq.n	801443c <_dtoa_r+0x55c>
 80143ac:	4602      	mov	r2, r0
 80143ae:	460b      	mov	r3, r1
 80143b0:	2000      	movs	r0, #0
 80143b2:	494e      	ldr	r1, [pc, #312]	; (80144ec <_dtoa_r+0x60c>)
 80143b4:	f7ec fa5a 	bl	800086c <__aeabi_ddiv>
 80143b8:	462a      	mov	r2, r5
 80143ba:	4633      	mov	r3, r6
 80143bc:	f7eb ff74 	bl	80002a8 <__aeabi_dsub>
 80143c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80143c4:	465d      	mov	r5, fp
 80143c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143ca:	f7ec fbd5 	bl	8000b78 <__aeabi_d2iz>
 80143ce:	4606      	mov	r6, r0
 80143d0:	f7ec f8b8 	bl	8000544 <__aeabi_i2d>
 80143d4:	4602      	mov	r2, r0
 80143d6:	460b      	mov	r3, r1
 80143d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143dc:	f7eb ff64 	bl	80002a8 <__aeabi_dsub>
 80143e0:	3630      	adds	r6, #48	; 0x30
 80143e2:	f805 6b01 	strb.w	r6, [r5], #1
 80143e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80143ea:	e9cd 0100 	strd	r0, r1, [sp]
 80143ee:	f7ec fb85 	bl	8000afc <__aeabi_dcmplt>
 80143f2:	2800      	cmp	r0, #0
 80143f4:	d163      	bne.n	80144be <_dtoa_r+0x5de>
 80143f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143fa:	2000      	movs	r0, #0
 80143fc:	4937      	ldr	r1, [pc, #220]	; (80144dc <_dtoa_r+0x5fc>)
 80143fe:	f7eb ff53 	bl	80002a8 <__aeabi_dsub>
 8014402:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014406:	f7ec fb79 	bl	8000afc <__aeabi_dcmplt>
 801440a:	2800      	cmp	r0, #0
 801440c:	f040 80b7 	bne.w	801457e <_dtoa_r+0x69e>
 8014410:	eba5 030b 	sub.w	r3, r5, fp
 8014414:	429f      	cmp	r7, r3
 8014416:	f77f af7c 	ble.w	8014312 <_dtoa_r+0x432>
 801441a:	2200      	movs	r2, #0
 801441c:	4b30      	ldr	r3, [pc, #192]	; (80144e0 <_dtoa_r+0x600>)
 801441e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014422:	f7ec f8f9 	bl	8000618 <__aeabi_dmul>
 8014426:	2200      	movs	r2, #0
 8014428:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801442c:	4b2c      	ldr	r3, [pc, #176]	; (80144e0 <_dtoa_r+0x600>)
 801442e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014432:	f7ec f8f1 	bl	8000618 <__aeabi_dmul>
 8014436:	e9cd 0100 	strd	r0, r1, [sp]
 801443a:	e7c4      	b.n	80143c6 <_dtoa_r+0x4e6>
 801443c:	462a      	mov	r2, r5
 801443e:	4633      	mov	r3, r6
 8014440:	f7ec f8ea 	bl	8000618 <__aeabi_dmul>
 8014444:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014448:	eb0b 0507 	add.w	r5, fp, r7
 801444c:	465e      	mov	r6, fp
 801444e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014452:	f7ec fb91 	bl	8000b78 <__aeabi_d2iz>
 8014456:	4607      	mov	r7, r0
 8014458:	f7ec f874 	bl	8000544 <__aeabi_i2d>
 801445c:	3730      	adds	r7, #48	; 0x30
 801445e:	4602      	mov	r2, r0
 8014460:	460b      	mov	r3, r1
 8014462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014466:	f7eb ff1f 	bl	80002a8 <__aeabi_dsub>
 801446a:	f806 7b01 	strb.w	r7, [r6], #1
 801446e:	42ae      	cmp	r6, r5
 8014470:	e9cd 0100 	strd	r0, r1, [sp]
 8014474:	f04f 0200 	mov.w	r2, #0
 8014478:	d126      	bne.n	80144c8 <_dtoa_r+0x5e8>
 801447a:	4b1c      	ldr	r3, [pc, #112]	; (80144ec <_dtoa_r+0x60c>)
 801447c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014480:	f7eb ff14 	bl	80002ac <__adddf3>
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	e9dd 0100 	ldrd	r0, r1, [sp]
 801448c:	f7ec fb54 	bl	8000b38 <__aeabi_dcmpgt>
 8014490:	2800      	cmp	r0, #0
 8014492:	d174      	bne.n	801457e <_dtoa_r+0x69e>
 8014494:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014498:	2000      	movs	r0, #0
 801449a:	4914      	ldr	r1, [pc, #80]	; (80144ec <_dtoa_r+0x60c>)
 801449c:	f7eb ff04 	bl	80002a8 <__aeabi_dsub>
 80144a0:	4602      	mov	r2, r0
 80144a2:	460b      	mov	r3, r1
 80144a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80144a8:	f7ec fb28 	bl	8000afc <__aeabi_dcmplt>
 80144ac:	2800      	cmp	r0, #0
 80144ae:	f43f af30 	beq.w	8014312 <_dtoa_r+0x432>
 80144b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80144b6:	2b30      	cmp	r3, #48	; 0x30
 80144b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80144bc:	d002      	beq.n	80144c4 <_dtoa_r+0x5e4>
 80144be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80144c2:	e04a      	b.n	801455a <_dtoa_r+0x67a>
 80144c4:	4615      	mov	r5, r2
 80144c6:	e7f4      	b.n	80144b2 <_dtoa_r+0x5d2>
 80144c8:	4b05      	ldr	r3, [pc, #20]	; (80144e0 <_dtoa_r+0x600>)
 80144ca:	f7ec f8a5 	bl	8000618 <__aeabi_dmul>
 80144ce:	e9cd 0100 	strd	r0, r1, [sp]
 80144d2:	e7bc      	b.n	801444e <_dtoa_r+0x56e>
 80144d4:	080166d8 	.word	0x080166d8
 80144d8:	080166b0 	.word	0x080166b0
 80144dc:	3ff00000 	.word	0x3ff00000
 80144e0:	40240000 	.word	0x40240000
 80144e4:	401c0000 	.word	0x401c0000
 80144e8:	40140000 	.word	0x40140000
 80144ec:	3fe00000 	.word	0x3fe00000
 80144f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80144f4:	465d      	mov	r5, fp
 80144f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144fa:	4630      	mov	r0, r6
 80144fc:	4639      	mov	r1, r7
 80144fe:	f7ec f9b5 	bl	800086c <__aeabi_ddiv>
 8014502:	f7ec fb39 	bl	8000b78 <__aeabi_d2iz>
 8014506:	4680      	mov	r8, r0
 8014508:	f7ec f81c 	bl	8000544 <__aeabi_i2d>
 801450c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014510:	f7ec f882 	bl	8000618 <__aeabi_dmul>
 8014514:	4602      	mov	r2, r0
 8014516:	460b      	mov	r3, r1
 8014518:	4630      	mov	r0, r6
 801451a:	4639      	mov	r1, r7
 801451c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014520:	f7eb fec2 	bl	80002a8 <__aeabi_dsub>
 8014524:	f805 6b01 	strb.w	r6, [r5], #1
 8014528:	eba5 060b 	sub.w	r6, r5, fp
 801452c:	45b1      	cmp	r9, r6
 801452e:	4602      	mov	r2, r0
 8014530:	460b      	mov	r3, r1
 8014532:	d139      	bne.n	80145a8 <_dtoa_r+0x6c8>
 8014534:	f7eb feba 	bl	80002ac <__adddf3>
 8014538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801453c:	4606      	mov	r6, r0
 801453e:	460f      	mov	r7, r1
 8014540:	f7ec fafa 	bl	8000b38 <__aeabi_dcmpgt>
 8014544:	b9c8      	cbnz	r0, 801457a <_dtoa_r+0x69a>
 8014546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801454a:	4630      	mov	r0, r6
 801454c:	4639      	mov	r1, r7
 801454e:	f7ec facb 	bl	8000ae8 <__aeabi_dcmpeq>
 8014552:	b110      	cbz	r0, 801455a <_dtoa_r+0x67a>
 8014554:	f018 0f01 	tst.w	r8, #1
 8014558:	d10f      	bne.n	801457a <_dtoa_r+0x69a>
 801455a:	9904      	ldr	r1, [sp, #16]
 801455c:	4620      	mov	r0, r4
 801455e:	f000 ffd7 	bl	8015510 <_Bfree>
 8014562:	2300      	movs	r3, #0
 8014564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014566:	702b      	strb	r3, [r5, #0]
 8014568:	f10a 0301 	add.w	r3, sl, #1
 801456c:	6013      	str	r3, [r2, #0]
 801456e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014570:	2b00      	cmp	r3, #0
 8014572:	f000 8241 	beq.w	80149f8 <_dtoa_r+0xb18>
 8014576:	601d      	str	r5, [r3, #0]
 8014578:	e23e      	b.n	80149f8 <_dtoa_r+0xb18>
 801457a:	f8cd a020 	str.w	sl, [sp, #32]
 801457e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014582:	2a39      	cmp	r2, #57	; 0x39
 8014584:	f105 33ff 	add.w	r3, r5, #4294967295
 8014588:	d108      	bne.n	801459c <_dtoa_r+0x6bc>
 801458a:	459b      	cmp	fp, r3
 801458c:	d10a      	bne.n	80145a4 <_dtoa_r+0x6c4>
 801458e:	9b08      	ldr	r3, [sp, #32]
 8014590:	3301      	adds	r3, #1
 8014592:	9308      	str	r3, [sp, #32]
 8014594:	2330      	movs	r3, #48	; 0x30
 8014596:	f88b 3000 	strb.w	r3, [fp]
 801459a:	465b      	mov	r3, fp
 801459c:	781a      	ldrb	r2, [r3, #0]
 801459e:	3201      	adds	r2, #1
 80145a0:	701a      	strb	r2, [r3, #0]
 80145a2:	e78c      	b.n	80144be <_dtoa_r+0x5de>
 80145a4:	461d      	mov	r5, r3
 80145a6:	e7ea      	b.n	801457e <_dtoa_r+0x69e>
 80145a8:	2200      	movs	r2, #0
 80145aa:	4b9b      	ldr	r3, [pc, #620]	; (8014818 <_dtoa_r+0x938>)
 80145ac:	f7ec f834 	bl	8000618 <__aeabi_dmul>
 80145b0:	2200      	movs	r2, #0
 80145b2:	2300      	movs	r3, #0
 80145b4:	4606      	mov	r6, r0
 80145b6:	460f      	mov	r7, r1
 80145b8:	f7ec fa96 	bl	8000ae8 <__aeabi_dcmpeq>
 80145bc:	2800      	cmp	r0, #0
 80145be:	d09a      	beq.n	80144f6 <_dtoa_r+0x616>
 80145c0:	e7cb      	b.n	801455a <_dtoa_r+0x67a>
 80145c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145c4:	2a00      	cmp	r2, #0
 80145c6:	f000 808b 	beq.w	80146e0 <_dtoa_r+0x800>
 80145ca:	9a06      	ldr	r2, [sp, #24]
 80145cc:	2a01      	cmp	r2, #1
 80145ce:	dc6e      	bgt.n	80146ae <_dtoa_r+0x7ce>
 80145d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80145d2:	2a00      	cmp	r2, #0
 80145d4:	d067      	beq.n	80146a6 <_dtoa_r+0x7c6>
 80145d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80145da:	9f07      	ldr	r7, [sp, #28]
 80145dc:	9d05      	ldr	r5, [sp, #20]
 80145de:	9a05      	ldr	r2, [sp, #20]
 80145e0:	2101      	movs	r1, #1
 80145e2:	441a      	add	r2, r3
 80145e4:	4620      	mov	r0, r4
 80145e6:	9205      	str	r2, [sp, #20]
 80145e8:	4498      	add	r8, r3
 80145ea:	f001 f86f 	bl	80156cc <__i2b>
 80145ee:	4606      	mov	r6, r0
 80145f0:	2d00      	cmp	r5, #0
 80145f2:	dd0c      	ble.n	801460e <_dtoa_r+0x72e>
 80145f4:	f1b8 0f00 	cmp.w	r8, #0
 80145f8:	dd09      	ble.n	801460e <_dtoa_r+0x72e>
 80145fa:	4545      	cmp	r5, r8
 80145fc:	9a05      	ldr	r2, [sp, #20]
 80145fe:	462b      	mov	r3, r5
 8014600:	bfa8      	it	ge
 8014602:	4643      	movge	r3, r8
 8014604:	1ad2      	subs	r2, r2, r3
 8014606:	9205      	str	r2, [sp, #20]
 8014608:	1aed      	subs	r5, r5, r3
 801460a:	eba8 0803 	sub.w	r8, r8, r3
 801460e:	9b07      	ldr	r3, [sp, #28]
 8014610:	b1eb      	cbz	r3, 801464e <_dtoa_r+0x76e>
 8014612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014614:	2b00      	cmp	r3, #0
 8014616:	d067      	beq.n	80146e8 <_dtoa_r+0x808>
 8014618:	b18f      	cbz	r7, 801463e <_dtoa_r+0x75e>
 801461a:	4631      	mov	r1, r6
 801461c:	463a      	mov	r2, r7
 801461e:	4620      	mov	r0, r4
 8014620:	f001 f8f4 	bl	801580c <__pow5mult>
 8014624:	9a04      	ldr	r2, [sp, #16]
 8014626:	4601      	mov	r1, r0
 8014628:	4606      	mov	r6, r0
 801462a:	4620      	mov	r0, r4
 801462c:	f001 f857 	bl	80156de <__multiply>
 8014630:	9904      	ldr	r1, [sp, #16]
 8014632:	9008      	str	r0, [sp, #32]
 8014634:	4620      	mov	r0, r4
 8014636:	f000 ff6b 	bl	8015510 <_Bfree>
 801463a:	9b08      	ldr	r3, [sp, #32]
 801463c:	9304      	str	r3, [sp, #16]
 801463e:	9b07      	ldr	r3, [sp, #28]
 8014640:	1bda      	subs	r2, r3, r7
 8014642:	d004      	beq.n	801464e <_dtoa_r+0x76e>
 8014644:	9904      	ldr	r1, [sp, #16]
 8014646:	4620      	mov	r0, r4
 8014648:	f001 f8e0 	bl	801580c <__pow5mult>
 801464c:	9004      	str	r0, [sp, #16]
 801464e:	2101      	movs	r1, #1
 8014650:	4620      	mov	r0, r4
 8014652:	f001 f83b 	bl	80156cc <__i2b>
 8014656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014658:	4607      	mov	r7, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	f000 81d0 	beq.w	8014a00 <_dtoa_r+0xb20>
 8014660:	461a      	mov	r2, r3
 8014662:	4601      	mov	r1, r0
 8014664:	4620      	mov	r0, r4
 8014666:	f001 f8d1 	bl	801580c <__pow5mult>
 801466a:	9b06      	ldr	r3, [sp, #24]
 801466c:	2b01      	cmp	r3, #1
 801466e:	4607      	mov	r7, r0
 8014670:	dc40      	bgt.n	80146f4 <_dtoa_r+0x814>
 8014672:	9b00      	ldr	r3, [sp, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d139      	bne.n	80146ec <_dtoa_r+0x80c>
 8014678:	9b01      	ldr	r3, [sp, #4]
 801467a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801467e:	2b00      	cmp	r3, #0
 8014680:	d136      	bne.n	80146f0 <_dtoa_r+0x810>
 8014682:	9b01      	ldr	r3, [sp, #4]
 8014684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014688:	0d1b      	lsrs	r3, r3, #20
 801468a:	051b      	lsls	r3, r3, #20
 801468c:	b12b      	cbz	r3, 801469a <_dtoa_r+0x7ba>
 801468e:	9b05      	ldr	r3, [sp, #20]
 8014690:	3301      	adds	r3, #1
 8014692:	9305      	str	r3, [sp, #20]
 8014694:	f108 0801 	add.w	r8, r8, #1
 8014698:	2301      	movs	r3, #1
 801469a:	9307      	str	r3, [sp, #28]
 801469c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d12a      	bne.n	80146f8 <_dtoa_r+0x818>
 80146a2:	2001      	movs	r0, #1
 80146a4:	e030      	b.n	8014708 <_dtoa_r+0x828>
 80146a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80146a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80146ac:	e795      	b.n	80145da <_dtoa_r+0x6fa>
 80146ae:	9b07      	ldr	r3, [sp, #28]
 80146b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80146b4:	42bb      	cmp	r3, r7
 80146b6:	bfbf      	itttt	lt
 80146b8:	9b07      	ldrlt	r3, [sp, #28]
 80146ba:	9707      	strlt	r7, [sp, #28]
 80146bc:	1afa      	sublt	r2, r7, r3
 80146be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80146c0:	bfbb      	ittet	lt
 80146c2:	189b      	addlt	r3, r3, r2
 80146c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80146c6:	1bdf      	subge	r7, r3, r7
 80146c8:	2700      	movlt	r7, #0
 80146ca:	f1b9 0f00 	cmp.w	r9, #0
 80146ce:	bfb5      	itete	lt
 80146d0:	9b05      	ldrlt	r3, [sp, #20]
 80146d2:	9d05      	ldrge	r5, [sp, #20]
 80146d4:	eba3 0509 	sublt.w	r5, r3, r9
 80146d8:	464b      	movge	r3, r9
 80146da:	bfb8      	it	lt
 80146dc:	2300      	movlt	r3, #0
 80146de:	e77e      	b.n	80145de <_dtoa_r+0x6fe>
 80146e0:	9f07      	ldr	r7, [sp, #28]
 80146e2:	9d05      	ldr	r5, [sp, #20]
 80146e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80146e6:	e783      	b.n	80145f0 <_dtoa_r+0x710>
 80146e8:	9a07      	ldr	r2, [sp, #28]
 80146ea:	e7ab      	b.n	8014644 <_dtoa_r+0x764>
 80146ec:	2300      	movs	r3, #0
 80146ee:	e7d4      	b.n	801469a <_dtoa_r+0x7ba>
 80146f0:	9b00      	ldr	r3, [sp, #0]
 80146f2:	e7d2      	b.n	801469a <_dtoa_r+0x7ba>
 80146f4:	2300      	movs	r3, #0
 80146f6:	9307      	str	r3, [sp, #28]
 80146f8:	693b      	ldr	r3, [r7, #16]
 80146fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80146fe:	6918      	ldr	r0, [r3, #16]
 8014700:	f000 ff96 	bl	8015630 <__hi0bits>
 8014704:	f1c0 0020 	rsb	r0, r0, #32
 8014708:	4440      	add	r0, r8
 801470a:	f010 001f 	ands.w	r0, r0, #31
 801470e:	d047      	beq.n	80147a0 <_dtoa_r+0x8c0>
 8014710:	f1c0 0320 	rsb	r3, r0, #32
 8014714:	2b04      	cmp	r3, #4
 8014716:	dd3b      	ble.n	8014790 <_dtoa_r+0x8b0>
 8014718:	9b05      	ldr	r3, [sp, #20]
 801471a:	f1c0 001c 	rsb	r0, r0, #28
 801471e:	4403      	add	r3, r0
 8014720:	9305      	str	r3, [sp, #20]
 8014722:	4405      	add	r5, r0
 8014724:	4480      	add	r8, r0
 8014726:	9b05      	ldr	r3, [sp, #20]
 8014728:	2b00      	cmp	r3, #0
 801472a:	dd05      	ble.n	8014738 <_dtoa_r+0x858>
 801472c:	461a      	mov	r2, r3
 801472e:	9904      	ldr	r1, [sp, #16]
 8014730:	4620      	mov	r0, r4
 8014732:	f001 f8b9 	bl	80158a8 <__lshift>
 8014736:	9004      	str	r0, [sp, #16]
 8014738:	f1b8 0f00 	cmp.w	r8, #0
 801473c:	dd05      	ble.n	801474a <_dtoa_r+0x86a>
 801473e:	4639      	mov	r1, r7
 8014740:	4642      	mov	r2, r8
 8014742:	4620      	mov	r0, r4
 8014744:	f001 f8b0 	bl	80158a8 <__lshift>
 8014748:	4607      	mov	r7, r0
 801474a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801474c:	b353      	cbz	r3, 80147a4 <_dtoa_r+0x8c4>
 801474e:	4639      	mov	r1, r7
 8014750:	9804      	ldr	r0, [sp, #16]
 8014752:	f001 f8fd 	bl	8015950 <__mcmp>
 8014756:	2800      	cmp	r0, #0
 8014758:	da24      	bge.n	80147a4 <_dtoa_r+0x8c4>
 801475a:	2300      	movs	r3, #0
 801475c:	220a      	movs	r2, #10
 801475e:	9904      	ldr	r1, [sp, #16]
 8014760:	4620      	mov	r0, r4
 8014762:	f000 feec 	bl	801553e <__multadd>
 8014766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014768:	9004      	str	r0, [sp, #16]
 801476a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801476e:	2b00      	cmp	r3, #0
 8014770:	f000 814d 	beq.w	8014a0e <_dtoa_r+0xb2e>
 8014774:	2300      	movs	r3, #0
 8014776:	4631      	mov	r1, r6
 8014778:	220a      	movs	r2, #10
 801477a:	4620      	mov	r0, r4
 801477c:	f000 fedf 	bl	801553e <__multadd>
 8014780:	9b02      	ldr	r3, [sp, #8]
 8014782:	2b00      	cmp	r3, #0
 8014784:	4606      	mov	r6, r0
 8014786:	dc4f      	bgt.n	8014828 <_dtoa_r+0x948>
 8014788:	9b06      	ldr	r3, [sp, #24]
 801478a:	2b02      	cmp	r3, #2
 801478c:	dd4c      	ble.n	8014828 <_dtoa_r+0x948>
 801478e:	e011      	b.n	80147b4 <_dtoa_r+0x8d4>
 8014790:	d0c9      	beq.n	8014726 <_dtoa_r+0x846>
 8014792:	9a05      	ldr	r2, [sp, #20]
 8014794:	331c      	adds	r3, #28
 8014796:	441a      	add	r2, r3
 8014798:	9205      	str	r2, [sp, #20]
 801479a:	441d      	add	r5, r3
 801479c:	4498      	add	r8, r3
 801479e:	e7c2      	b.n	8014726 <_dtoa_r+0x846>
 80147a0:	4603      	mov	r3, r0
 80147a2:	e7f6      	b.n	8014792 <_dtoa_r+0x8b2>
 80147a4:	f1b9 0f00 	cmp.w	r9, #0
 80147a8:	dc38      	bgt.n	801481c <_dtoa_r+0x93c>
 80147aa:	9b06      	ldr	r3, [sp, #24]
 80147ac:	2b02      	cmp	r3, #2
 80147ae:	dd35      	ble.n	801481c <_dtoa_r+0x93c>
 80147b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80147b4:	9b02      	ldr	r3, [sp, #8]
 80147b6:	b963      	cbnz	r3, 80147d2 <_dtoa_r+0x8f2>
 80147b8:	4639      	mov	r1, r7
 80147ba:	2205      	movs	r2, #5
 80147bc:	4620      	mov	r0, r4
 80147be:	f000 febe 	bl	801553e <__multadd>
 80147c2:	4601      	mov	r1, r0
 80147c4:	4607      	mov	r7, r0
 80147c6:	9804      	ldr	r0, [sp, #16]
 80147c8:	f001 f8c2 	bl	8015950 <__mcmp>
 80147cc:	2800      	cmp	r0, #0
 80147ce:	f73f adcc 	bgt.w	801436a <_dtoa_r+0x48a>
 80147d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147d4:	465d      	mov	r5, fp
 80147d6:	ea6f 0a03 	mvn.w	sl, r3
 80147da:	f04f 0900 	mov.w	r9, #0
 80147de:	4639      	mov	r1, r7
 80147e0:	4620      	mov	r0, r4
 80147e2:	f000 fe95 	bl	8015510 <_Bfree>
 80147e6:	2e00      	cmp	r6, #0
 80147e8:	f43f aeb7 	beq.w	801455a <_dtoa_r+0x67a>
 80147ec:	f1b9 0f00 	cmp.w	r9, #0
 80147f0:	d005      	beq.n	80147fe <_dtoa_r+0x91e>
 80147f2:	45b1      	cmp	r9, r6
 80147f4:	d003      	beq.n	80147fe <_dtoa_r+0x91e>
 80147f6:	4649      	mov	r1, r9
 80147f8:	4620      	mov	r0, r4
 80147fa:	f000 fe89 	bl	8015510 <_Bfree>
 80147fe:	4631      	mov	r1, r6
 8014800:	4620      	mov	r0, r4
 8014802:	f000 fe85 	bl	8015510 <_Bfree>
 8014806:	e6a8      	b.n	801455a <_dtoa_r+0x67a>
 8014808:	2700      	movs	r7, #0
 801480a:	463e      	mov	r6, r7
 801480c:	e7e1      	b.n	80147d2 <_dtoa_r+0x8f2>
 801480e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014812:	463e      	mov	r6, r7
 8014814:	e5a9      	b.n	801436a <_dtoa_r+0x48a>
 8014816:	bf00      	nop
 8014818:	40240000 	.word	0x40240000
 801481c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801481e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014822:	2b00      	cmp	r3, #0
 8014824:	f000 80fa 	beq.w	8014a1c <_dtoa_r+0xb3c>
 8014828:	2d00      	cmp	r5, #0
 801482a:	dd05      	ble.n	8014838 <_dtoa_r+0x958>
 801482c:	4631      	mov	r1, r6
 801482e:	462a      	mov	r2, r5
 8014830:	4620      	mov	r0, r4
 8014832:	f001 f839 	bl	80158a8 <__lshift>
 8014836:	4606      	mov	r6, r0
 8014838:	9b07      	ldr	r3, [sp, #28]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d04c      	beq.n	80148d8 <_dtoa_r+0x9f8>
 801483e:	6871      	ldr	r1, [r6, #4]
 8014840:	4620      	mov	r0, r4
 8014842:	f000 fe31 	bl	80154a8 <_Balloc>
 8014846:	6932      	ldr	r2, [r6, #16]
 8014848:	3202      	adds	r2, #2
 801484a:	4605      	mov	r5, r0
 801484c:	0092      	lsls	r2, r2, #2
 801484e:	f106 010c 	add.w	r1, r6, #12
 8014852:	300c      	adds	r0, #12
 8014854:	f7fd fae4 	bl	8011e20 <memcpy>
 8014858:	2201      	movs	r2, #1
 801485a:	4629      	mov	r1, r5
 801485c:	4620      	mov	r0, r4
 801485e:	f001 f823 	bl	80158a8 <__lshift>
 8014862:	9b00      	ldr	r3, [sp, #0]
 8014864:	f8cd b014 	str.w	fp, [sp, #20]
 8014868:	f003 0301 	and.w	r3, r3, #1
 801486c:	46b1      	mov	r9, r6
 801486e:	9307      	str	r3, [sp, #28]
 8014870:	4606      	mov	r6, r0
 8014872:	4639      	mov	r1, r7
 8014874:	9804      	ldr	r0, [sp, #16]
 8014876:	f7ff faa5 	bl	8013dc4 <quorem>
 801487a:	4649      	mov	r1, r9
 801487c:	4605      	mov	r5, r0
 801487e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014882:	9804      	ldr	r0, [sp, #16]
 8014884:	f001 f864 	bl	8015950 <__mcmp>
 8014888:	4632      	mov	r2, r6
 801488a:	9000      	str	r0, [sp, #0]
 801488c:	4639      	mov	r1, r7
 801488e:	4620      	mov	r0, r4
 8014890:	f001 f878 	bl	8015984 <__mdiff>
 8014894:	68c3      	ldr	r3, [r0, #12]
 8014896:	4602      	mov	r2, r0
 8014898:	bb03      	cbnz	r3, 80148dc <_dtoa_r+0x9fc>
 801489a:	4601      	mov	r1, r0
 801489c:	9008      	str	r0, [sp, #32]
 801489e:	9804      	ldr	r0, [sp, #16]
 80148a0:	f001 f856 	bl	8015950 <__mcmp>
 80148a4:	9a08      	ldr	r2, [sp, #32]
 80148a6:	4603      	mov	r3, r0
 80148a8:	4611      	mov	r1, r2
 80148aa:	4620      	mov	r0, r4
 80148ac:	9308      	str	r3, [sp, #32]
 80148ae:	f000 fe2f 	bl	8015510 <_Bfree>
 80148b2:	9b08      	ldr	r3, [sp, #32]
 80148b4:	b9a3      	cbnz	r3, 80148e0 <_dtoa_r+0xa00>
 80148b6:	9a06      	ldr	r2, [sp, #24]
 80148b8:	b992      	cbnz	r2, 80148e0 <_dtoa_r+0xa00>
 80148ba:	9a07      	ldr	r2, [sp, #28]
 80148bc:	b982      	cbnz	r2, 80148e0 <_dtoa_r+0xa00>
 80148be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148c2:	d029      	beq.n	8014918 <_dtoa_r+0xa38>
 80148c4:	9b00      	ldr	r3, [sp, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	dd01      	ble.n	80148ce <_dtoa_r+0x9ee>
 80148ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80148ce:	9b05      	ldr	r3, [sp, #20]
 80148d0:	1c5d      	adds	r5, r3, #1
 80148d2:	f883 8000 	strb.w	r8, [r3]
 80148d6:	e782      	b.n	80147de <_dtoa_r+0x8fe>
 80148d8:	4630      	mov	r0, r6
 80148da:	e7c2      	b.n	8014862 <_dtoa_r+0x982>
 80148dc:	2301      	movs	r3, #1
 80148de:	e7e3      	b.n	80148a8 <_dtoa_r+0x9c8>
 80148e0:	9a00      	ldr	r2, [sp, #0]
 80148e2:	2a00      	cmp	r2, #0
 80148e4:	db04      	blt.n	80148f0 <_dtoa_r+0xa10>
 80148e6:	d125      	bne.n	8014934 <_dtoa_r+0xa54>
 80148e8:	9a06      	ldr	r2, [sp, #24]
 80148ea:	bb1a      	cbnz	r2, 8014934 <_dtoa_r+0xa54>
 80148ec:	9a07      	ldr	r2, [sp, #28]
 80148ee:	bb0a      	cbnz	r2, 8014934 <_dtoa_r+0xa54>
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	ddec      	ble.n	80148ce <_dtoa_r+0x9ee>
 80148f4:	2201      	movs	r2, #1
 80148f6:	9904      	ldr	r1, [sp, #16]
 80148f8:	4620      	mov	r0, r4
 80148fa:	f000 ffd5 	bl	80158a8 <__lshift>
 80148fe:	4639      	mov	r1, r7
 8014900:	9004      	str	r0, [sp, #16]
 8014902:	f001 f825 	bl	8015950 <__mcmp>
 8014906:	2800      	cmp	r0, #0
 8014908:	dc03      	bgt.n	8014912 <_dtoa_r+0xa32>
 801490a:	d1e0      	bne.n	80148ce <_dtoa_r+0x9ee>
 801490c:	f018 0f01 	tst.w	r8, #1
 8014910:	d0dd      	beq.n	80148ce <_dtoa_r+0x9ee>
 8014912:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014916:	d1d8      	bne.n	80148ca <_dtoa_r+0x9ea>
 8014918:	9b05      	ldr	r3, [sp, #20]
 801491a:	9a05      	ldr	r2, [sp, #20]
 801491c:	1c5d      	adds	r5, r3, #1
 801491e:	2339      	movs	r3, #57	; 0x39
 8014920:	7013      	strb	r3, [r2, #0]
 8014922:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014926:	2b39      	cmp	r3, #57	; 0x39
 8014928:	f105 32ff 	add.w	r2, r5, #4294967295
 801492c:	d04f      	beq.n	80149ce <_dtoa_r+0xaee>
 801492e:	3301      	adds	r3, #1
 8014930:	7013      	strb	r3, [r2, #0]
 8014932:	e754      	b.n	80147de <_dtoa_r+0x8fe>
 8014934:	9a05      	ldr	r2, [sp, #20]
 8014936:	2b00      	cmp	r3, #0
 8014938:	f102 0501 	add.w	r5, r2, #1
 801493c:	dd06      	ble.n	801494c <_dtoa_r+0xa6c>
 801493e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014942:	d0e9      	beq.n	8014918 <_dtoa_r+0xa38>
 8014944:	f108 0801 	add.w	r8, r8, #1
 8014948:	9b05      	ldr	r3, [sp, #20]
 801494a:	e7c2      	b.n	80148d2 <_dtoa_r+0x9f2>
 801494c:	9a02      	ldr	r2, [sp, #8]
 801494e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014952:	eba5 030b 	sub.w	r3, r5, fp
 8014956:	4293      	cmp	r3, r2
 8014958:	d021      	beq.n	801499e <_dtoa_r+0xabe>
 801495a:	2300      	movs	r3, #0
 801495c:	220a      	movs	r2, #10
 801495e:	9904      	ldr	r1, [sp, #16]
 8014960:	4620      	mov	r0, r4
 8014962:	f000 fdec 	bl	801553e <__multadd>
 8014966:	45b1      	cmp	r9, r6
 8014968:	9004      	str	r0, [sp, #16]
 801496a:	f04f 0300 	mov.w	r3, #0
 801496e:	f04f 020a 	mov.w	r2, #10
 8014972:	4649      	mov	r1, r9
 8014974:	4620      	mov	r0, r4
 8014976:	d105      	bne.n	8014984 <_dtoa_r+0xaa4>
 8014978:	f000 fde1 	bl	801553e <__multadd>
 801497c:	4681      	mov	r9, r0
 801497e:	4606      	mov	r6, r0
 8014980:	9505      	str	r5, [sp, #20]
 8014982:	e776      	b.n	8014872 <_dtoa_r+0x992>
 8014984:	f000 fddb 	bl	801553e <__multadd>
 8014988:	4631      	mov	r1, r6
 801498a:	4681      	mov	r9, r0
 801498c:	2300      	movs	r3, #0
 801498e:	220a      	movs	r2, #10
 8014990:	4620      	mov	r0, r4
 8014992:	f000 fdd4 	bl	801553e <__multadd>
 8014996:	4606      	mov	r6, r0
 8014998:	e7f2      	b.n	8014980 <_dtoa_r+0xaa0>
 801499a:	f04f 0900 	mov.w	r9, #0
 801499e:	2201      	movs	r2, #1
 80149a0:	9904      	ldr	r1, [sp, #16]
 80149a2:	4620      	mov	r0, r4
 80149a4:	f000 ff80 	bl	80158a8 <__lshift>
 80149a8:	4639      	mov	r1, r7
 80149aa:	9004      	str	r0, [sp, #16]
 80149ac:	f000 ffd0 	bl	8015950 <__mcmp>
 80149b0:	2800      	cmp	r0, #0
 80149b2:	dcb6      	bgt.n	8014922 <_dtoa_r+0xa42>
 80149b4:	d102      	bne.n	80149bc <_dtoa_r+0xadc>
 80149b6:	f018 0f01 	tst.w	r8, #1
 80149ba:	d1b2      	bne.n	8014922 <_dtoa_r+0xa42>
 80149bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80149c0:	2b30      	cmp	r3, #48	; 0x30
 80149c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80149c6:	f47f af0a 	bne.w	80147de <_dtoa_r+0x8fe>
 80149ca:	4615      	mov	r5, r2
 80149cc:	e7f6      	b.n	80149bc <_dtoa_r+0xadc>
 80149ce:	4593      	cmp	fp, r2
 80149d0:	d105      	bne.n	80149de <_dtoa_r+0xafe>
 80149d2:	2331      	movs	r3, #49	; 0x31
 80149d4:	f10a 0a01 	add.w	sl, sl, #1
 80149d8:	f88b 3000 	strb.w	r3, [fp]
 80149dc:	e6ff      	b.n	80147de <_dtoa_r+0x8fe>
 80149de:	4615      	mov	r5, r2
 80149e0:	e79f      	b.n	8014922 <_dtoa_r+0xa42>
 80149e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014a48 <_dtoa_r+0xb68>
 80149e6:	e007      	b.n	80149f8 <_dtoa_r+0xb18>
 80149e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014a4c <_dtoa_r+0xb6c>
 80149ee:	b11b      	cbz	r3, 80149f8 <_dtoa_r+0xb18>
 80149f0:	f10b 0308 	add.w	r3, fp, #8
 80149f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149f6:	6013      	str	r3, [r2, #0]
 80149f8:	4658      	mov	r0, fp
 80149fa:	b017      	add	sp, #92	; 0x5c
 80149fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a00:	9b06      	ldr	r3, [sp, #24]
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	f77f ae35 	ble.w	8014672 <_dtoa_r+0x792>
 8014a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a0a:	9307      	str	r3, [sp, #28]
 8014a0c:	e649      	b.n	80146a2 <_dtoa_r+0x7c2>
 8014a0e:	9b02      	ldr	r3, [sp, #8]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	dc03      	bgt.n	8014a1c <_dtoa_r+0xb3c>
 8014a14:	9b06      	ldr	r3, [sp, #24]
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	f73f aecc 	bgt.w	80147b4 <_dtoa_r+0x8d4>
 8014a1c:	465d      	mov	r5, fp
 8014a1e:	4639      	mov	r1, r7
 8014a20:	9804      	ldr	r0, [sp, #16]
 8014a22:	f7ff f9cf 	bl	8013dc4 <quorem>
 8014a26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014a2a:	f805 8b01 	strb.w	r8, [r5], #1
 8014a2e:	9a02      	ldr	r2, [sp, #8]
 8014a30:	eba5 030b 	sub.w	r3, r5, fp
 8014a34:	429a      	cmp	r2, r3
 8014a36:	ddb0      	ble.n	801499a <_dtoa_r+0xaba>
 8014a38:	2300      	movs	r3, #0
 8014a3a:	220a      	movs	r2, #10
 8014a3c:	9904      	ldr	r1, [sp, #16]
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f000 fd7d 	bl	801553e <__multadd>
 8014a44:	9004      	str	r0, [sp, #16]
 8014a46:	e7ea      	b.n	8014a1e <_dtoa_r+0xb3e>
 8014a48:	080165b4 	.word	0x080165b4
 8014a4c:	08016630 	.word	0x08016630

08014a50 <__sflush_r>:
 8014a50:	898a      	ldrh	r2, [r1, #12]
 8014a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a56:	4605      	mov	r5, r0
 8014a58:	0710      	lsls	r0, r2, #28
 8014a5a:	460c      	mov	r4, r1
 8014a5c:	d458      	bmi.n	8014b10 <__sflush_r+0xc0>
 8014a5e:	684b      	ldr	r3, [r1, #4]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	dc05      	bgt.n	8014a70 <__sflush_r+0x20>
 8014a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	dc02      	bgt.n	8014a70 <__sflush_r+0x20>
 8014a6a:	2000      	movs	r0, #0
 8014a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a72:	2e00      	cmp	r6, #0
 8014a74:	d0f9      	beq.n	8014a6a <__sflush_r+0x1a>
 8014a76:	2300      	movs	r3, #0
 8014a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a7c:	682f      	ldr	r7, [r5, #0]
 8014a7e:	6a21      	ldr	r1, [r4, #32]
 8014a80:	602b      	str	r3, [r5, #0]
 8014a82:	d032      	beq.n	8014aea <__sflush_r+0x9a>
 8014a84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a86:	89a3      	ldrh	r3, [r4, #12]
 8014a88:	075a      	lsls	r2, r3, #29
 8014a8a:	d505      	bpl.n	8014a98 <__sflush_r+0x48>
 8014a8c:	6863      	ldr	r3, [r4, #4]
 8014a8e:	1ac0      	subs	r0, r0, r3
 8014a90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a92:	b10b      	cbz	r3, 8014a98 <__sflush_r+0x48>
 8014a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a96:	1ac0      	subs	r0, r0, r3
 8014a98:	2300      	movs	r3, #0
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a9e:	6a21      	ldr	r1, [r4, #32]
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	47b0      	blx	r6
 8014aa4:	1c43      	adds	r3, r0, #1
 8014aa6:	89a3      	ldrh	r3, [r4, #12]
 8014aa8:	d106      	bne.n	8014ab8 <__sflush_r+0x68>
 8014aaa:	6829      	ldr	r1, [r5, #0]
 8014aac:	291d      	cmp	r1, #29
 8014aae:	d848      	bhi.n	8014b42 <__sflush_r+0xf2>
 8014ab0:	4a29      	ldr	r2, [pc, #164]	; (8014b58 <__sflush_r+0x108>)
 8014ab2:	40ca      	lsrs	r2, r1
 8014ab4:	07d6      	lsls	r6, r2, #31
 8014ab6:	d544      	bpl.n	8014b42 <__sflush_r+0xf2>
 8014ab8:	2200      	movs	r2, #0
 8014aba:	6062      	str	r2, [r4, #4]
 8014abc:	04d9      	lsls	r1, r3, #19
 8014abe:	6922      	ldr	r2, [r4, #16]
 8014ac0:	6022      	str	r2, [r4, #0]
 8014ac2:	d504      	bpl.n	8014ace <__sflush_r+0x7e>
 8014ac4:	1c42      	adds	r2, r0, #1
 8014ac6:	d101      	bne.n	8014acc <__sflush_r+0x7c>
 8014ac8:	682b      	ldr	r3, [r5, #0]
 8014aca:	b903      	cbnz	r3, 8014ace <__sflush_r+0x7e>
 8014acc:	6560      	str	r0, [r4, #84]	; 0x54
 8014ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ad0:	602f      	str	r7, [r5, #0]
 8014ad2:	2900      	cmp	r1, #0
 8014ad4:	d0c9      	beq.n	8014a6a <__sflush_r+0x1a>
 8014ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ada:	4299      	cmp	r1, r3
 8014adc:	d002      	beq.n	8014ae4 <__sflush_r+0x94>
 8014ade:	4628      	mov	r0, r5
 8014ae0:	f7fd f9b2 	bl	8011e48 <_free_r>
 8014ae4:	2000      	movs	r0, #0
 8014ae6:	6360      	str	r0, [r4, #52]	; 0x34
 8014ae8:	e7c0      	b.n	8014a6c <__sflush_r+0x1c>
 8014aea:	2301      	movs	r3, #1
 8014aec:	4628      	mov	r0, r5
 8014aee:	47b0      	blx	r6
 8014af0:	1c41      	adds	r1, r0, #1
 8014af2:	d1c8      	bne.n	8014a86 <__sflush_r+0x36>
 8014af4:	682b      	ldr	r3, [r5, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d0c5      	beq.n	8014a86 <__sflush_r+0x36>
 8014afa:	2b1d      	cmp	r3, #29
 8014afc:	d001      	beq.n	8014b02 <__sflush_r+0xb2>
 8014afe:	2b16      	cmp	r3, #22
 8014b00:	d101      	bne.n	8014b06 <__sflush_r+0xb6>
 8014b02:	602f      	str	r7, [r5, #0]
 8014b04:	e7b1      	b.n	8014a6a <__sflush_r+0x1a>
 8014b06:	89a3      	ldrh	r3, [r4, #12]
 8014b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b0c:	81a3      	strh	r3, [r4, #12]
 8014b0e:	e7ad      	b.n	8014a6c <__sflush_r+0x1c>
 8014b10:	690f      	ldr	r7, [r1, #16]
 8014b12:	2f00      	cmp	r7, #0
 8014b14:	d0a9      	beq.n	8014a6a <__sflush_r+0x1a>
 8014b16:	0793      	lsls	r3, r2, #30
 8014b18:	680e      	ldr	r6, [r1, #0]
 8014b1a:	bf08      	it	eq
 8014b1c:	694b      	ldreq	r3, [r1, #20]
 8014b1e:	600f      	str	r7, [r1, #0]
 8014b20:	bf18      	it	ne
 8014b22:	2300      	movne	r3, #0
 8014b24:	eba6 0807 	sub.w	r8, r6, r7
 8014b28:	608b      	str	r3, [r1, #8]
 8014b2a:	f1b8 0f00 	cmp.w	r8, #0
 8014b2e:	dd9c      	ble.n	8014a6a <__sflush_r+0x1a>
 8014b30:	4643      	mov	r3, r8
 8014b32:	463a      	mov	r2, r7
 8014b34:	6a21      	ldr	r1, [r4, #32]
 8014b36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014b38:	4628      	mov	r0, r5
 8014b3a:	47b0      	blx	r6
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	dc06      	bgt.n	8014b4e <__sflush_r+0xfe>
 8014b40:	89a3      	ldrh	r3, [r4, #12]
 8014b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b46:	81a3      	strh	r3, [r4, #12]
 8014b48:	f04f 30ff 	mov.w	r0, #4294967295
 8014b4c:	e78e      	b.n	8014a6c <__sflush_r+0x1c>
 8014b4e:	4407      	add	r7, r0
 8014b50:	eba8 0800 	sub.w	r8, r8, r0
 8014b54:	e7e9      	b.n	8014b2a <__sflush_r+0xda>
 8014b56:	bf00      	nop
 8014b58:	20400001 	.word	0x20400001

08014b5c <_fflush_r>:
 8014b5c:	b538      	push	{r3, r4, r5, lr}
 8014b5e:	690b      	ldr	r3, [r1, #16]
 8014b60:	4605      	mov	r5, r0
 8014b62:	460c      	mov	r4, r1
 8014b64:	b1db      	cbz	r3, 8014b9e <_fflush_r+0x42>
 8014b66:	b118      	cbz	r0, 8014b70 <_fflush_r+0x14>
 8014b68:	6983      	ldr	r3, [r0, #24]
 8014b6a:	b90b      	cbnz	r3, 8014b70 <_fflush_r+0x14>
 8014b6c:	f000 f860 	bl	8014c30 <__sinit>
 8014b70:	4b0c      	ldr	r3, [pc, #48]	; (8014ba4 <_fflush_r+0x48>)
 8014b72:	429c      	cmp	r4, r3
 8014b74:	d109      	bne.n	8014b8a <_fflush_r+0x2e>
 8014b76:	686c      	ldr	r4, [r5, #4]
 8014b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b7c:	b17b      	cbz	r3, 8014b9e <_fflush_r+0x42>
 8014b7e:	4621      	mov	r1, r4
 8014b80:	4628      	mov	r0, r5
 8014b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b86:	f7ff bf63 	b.w	8014a50 <__sflush_r>
 8014b8a:	4b07      	ldr	r3, [pc, #28]	; (8014ba8 <_fflush_r+0x4c>)
 8014b8c:	429c      	cmp	r4, r3
 8014b8e:	d101      	bne.n	8014b94 <_fflush_r+0x38>
 8014b90:	68ac      	ldr	r4, [r5, #8]
 8014b92:	e7f1      	b.n	8014b78 <_fflush_r+0x1c>
 8014b94:	4b05      	ldr	r3, [pc, #20]	; (8014bac <_fflush_r+0x50>)
 8014b96:	429c      	cmp	r4, r3
 8014b98:	bf08      	it	eq
 8014b9a:	68ec      	ldreq	r4, [r5, #12]
 8014b9c:	e7ec      	b.n	8014b78 <_fflush_r+0x1c>
 8014b9e:	2000      	movs	r0, #0
 8014ba0:	bd38      	pop	{r3, r4, r5, pc}
 8014ba2:	bf00      	nop
 8014ba4:	08016660 	.word	0x08016660
 8014ba8:	08016680 	.word	0x08016680
 8014bac:	08016640 	.word	0x08016640

08014bb0 <std>:
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	b510      	push	{r4, lr}
 8014bb4:	4604      	mov	r4, r0
 8014bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8014bba:	6083      	str	r3, [r0, #8]
 8014bbc:	8181      	strh	r1, [r0, #12]
 8014bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8014bc0:	81c2      	strh	r2, [r0, #14]
 8014bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014bc6:	6183      	str	r3, [r0, #24]
 8014bc8:	4619      	mov	r1, r3
 8014bca:	2208      	movs	r2, #8
 8014bcc:	305c      	adds	r0, #92	; 0x5c
 8014bce:	f7fd f932 	bl	8011e36 <memset>
 8014bd2:	4b05      	ldr	r3, [pc, #20]	; (8014be8 <std+0x38>)
 8014bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8014bd6:	4b05      	ldr	r3, [pc, #20]	; (8014bec <std+0x3c>)
 8014bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8014bda:	4b05      	ldr	r3, [pc, #20]	; (8014bf0 <std+0x40>)
 8014bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014bde:	4b05      	ldr	r3, [pc, #20]	; (8014bf4 <std+0x44>)
 8014be0:	6224      	str	r4, [r4, #32]
 8014be2:	6323      	str	r3, [r4, #48]	; 0x30
 8014be4:	bd10      	pop	{r4, pc}
 8014be6:	bf00      	nop
 8014be8:	080161e9 	.word	0x080161e9
 8014bec:	0801620b 	.word	0x0801620b
 8014bf0:	08016243 	.word	0x08016243
 8014bf4:	08016267 	.word	0x08016267

08014bf8 <_cleanup_r>:
 8014bf8:	4901      	ldr	r1, [pc, #4]	; (8014c00 <_cleanup_r+0x8>)
 8014bfa:	f000 b885 	b.w	8014d08 <_fwalk_reent>
 8014bfe:	bf00      	nop
 8014c00:	08014b5d 	.word	0x08014b5d

08014c04 <__sfmoreglue>:
 8014c04:	b570      	push	{r4, r5, r6, lr}
 8014c06:	1e4a      	subs	r2, r1, #1
 8014c08:	2568      	movs	r5, #104	; 0x68
 8014c0a:	4355      	muls	r5, r2
 8014c0c:	460e      	mov	r6, r1
 8014c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014c12:	f7fd f967 	bl	8011ee4 <_malloc_r>
 8014c16:	4604      	mov	r4, r0
 8014c18:	b140      	cbz	r0, 8014c2c <__sfmoreglue+0x28>
 8014c1a:	2100      	movs	r1, #0
 8014c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8014c20:	300c      	adds	r0, #12
 8014c22:	60a0      	str	r0, [r4, #8]
 8014c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014c28:	f7fd f905 	bl	8011e36 <memset>
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	bd70      	pop	{r4, r5, r6, pc}

08014c30 <__sinit>:
 8014c30:	6983      	ldr	r3, [r0, #24]
 8014c32:	b510      	push	{r4, lr}
 8014c34:	4604      	mov	r4, r0
 8014c36:	bb33      	cbnz	r3, 8014c86 <__sinit+0x56>
 8014c38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014c3c:	6503      	str	r3, [r0, #80]	; 0x50
 8014c3e:	4b12      	ldr	r3, [pc, #72]	; (8014c88 <__sinit+0x58>)
 8014c40:	4a12      	ldr	r2, [pc, #72]	; (8014c8c <__sinit+0x5c>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	6282      	str	r2, [r0, #40]	; 0x28
 8014c46:	4298      	cmp	r0, r3
 8014c48:	bf04      	itt	eq
 8014c4a:	2301      	moveq	r3, #1
 8014c4c:	6183      	streq	r3, [r0, #24]
 8014c4e:	f000 f81f 	bl	8014c90 <__sfp>
 8014c52:	6060      	str	r0, [r4, #4]
 8014c54:	4620      	mov	r0, r4
 8014c56:	f000 f81b 	bl	8014c90 <__sfp>
 8014c5a:	60a0      	str	r0, [r4, #8]
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f000 f817 	bl	8014c90 <__sfp>
 8014c62:	2200      	movs	r2, #0
 8014c64:	60e0      	str	r0, [r4, #12]
 8014c66:	2104      	movs	r1, #4
 8014c68:	6860      	ldr	r0, [r4, #4]
 8014c6a:	f7ff ffa1 	bl	8014bb0 <std>
 8014c6e:	2201      	movs	r2, #1
 8014c70:	2109      	movs	r1, #9
 8014c72:	68a0      	ldr	r0, [r4, #8]
 8014c74:	f7ff ff9c 	bl	8014bb0 <std>
 8014c78:	2202      	movs	r2, #2
 8014c7a:	2112      	movs	r1, #18
 8014c7c:	68e0      	ldr	r0, [r4, #12]
 8014c7e:	f7ff ff97 	bl	8014bb0 <std>
 8014c82:	2301      	movs	r3, #1
 8014c84:	61a3      	str	r3, [r4, #24]
 8014c86:	bd10      	pop	{r4, pc}
 8014c88:	080165a0 	.word	0x080165a0
 8014c8c:	08014bf9 	.word	0x08014bf9

08014c90 <__sfp>:
 8014c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c92:	4b1b      	ldr	r3, [pc, #108]	; (8014d00 <__sfp+0x70>)
 8014c94:	681e      	ldr	r6, [r3, #0]
 8014c96:	69b3      	ldr	r3, [r6, #24]
 8014c98:	4607      	mov	r7, r0
 8014c9a:	b913      	cbnz	r3, 8014ca2 <__sfp+0x12>
 8014c9c:	4630      	mov	r0, r6
 8014c9e:	f7ff ffc7 	bl	8014c30 <__sinit>
 8014ca2:	3648      	adds	r6, #72	; 0x48
 8014ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	d503      	bpl.n	8014cb4 <__sfp+0x24>
 8014cac:	6833      	ldr	r3, [r6, #0]
 8014cae:	b133      	cbz	r3, 8014cbe <__sfp+0x2e>
 8014cb0:	6836      	ldr	r6, [r6, #0]
 8014cb2:	e7f7      	b.n	8014ca4 <__sfp+0x14>
 8014cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014cb8:	b16d      	cbz	r5, 8014cd6 <__sfp+0x46>
 8014cba:	3468      	adds	r4, #104	; 0x68
 8014cbc:	e7f4      	b.n	8014ca8 <__sfp+0x18>
 8014cbe:	2104      	movs	r1, #4
 8014cc0:	4638      	mov	r0, r7
 8014cc2:	f7ff ff9f 	bl	8014c04 <__sfmoreglue>
 8014cc6:	6030      	str	r0, [r6, #0]
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	d1f1      	bne.n	8014cb0 <__sfp+0x20>
 8014ccc:	230c      	movs	r3, #12
 8014cce:	603b      	str	r3, [r7, #0]
 8014cd0:	4604      	mov	r4, r0
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cd6:	4b0b      	ldr	r3, [pc, #44]	; (8014d04 <__sfp+0x74>)
 8014cd8:	6665      	str	r5, [r4, #100]	; 0x64
 8014cda:	e9c4 5500 	strd	r5, r5, [r4]
 8014cde:	60a5      	str	r5, [r4, #8]
 8014ce0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014ce4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014ce8:	2208      	movs	r2, #8
 8014cea:	4629      	mov	r1, r5
 8014cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014cf0:	f7fd f8a1 	bl	8011e36 <memset>
 8014cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014cfc:	e7e9      	b.n	8014cd2 <__sfp+0x42>
 8014cfe:	bf00      	nop
 8014d00:	080165a0 	.word	0x080165a0
 8014d04:	ffff0001 	.word	0xffff0001

08014d08 <_fwalk_reent>:
 8014d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d0c:	4680      	mov	r8, r0
 8014d0e:	4689      	mov	r9, r1
 8014d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014d14:	2600      	movs	r6, #0
 8014d16:	b914      	cbnz	r4, 8014d1e <_fwalk_reent+0x16>
 8014d18:	4630      	mov	r0, r6
 8014d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014d22:	3f01      	subs	r7, #1
 8014d24:	d501      	bpl.n	8014d2a <_fwalk_reent+0x22>
 8014d26:	6824      	ldr	r4, [r4, #0]
 8014d28:	e7f5      	b.n	8014d16 <_fwalk_reent+0xe>
 8014d2a:	89ab      	ldrh	r3, [r5, #12]
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d907      	bls.n	8014d40 <_fwalk_reent+0x38>
 8014d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014d34:	3301      	adds	r3, #1
 8014d36:	d003      	beq.n	8014d40 <_fwalk_reent+0x38>
 8014d38:	4629      	mov	r1, r5
 8014d3a:	4640      	mov	r0, r8
 8014d3c:	47c8      	blx	r9
 8014d3e:	4306      	orrs	r6, r0
 8014d40:	3568      	adds	r5, #104	; 0x68
 8014d42:	e7ee      	b.n	8014d22 <_fwalk_reent+0x1a>

08014d44 <rshift>:
 8014d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d46:	6906      	ldr	r6, [r0, #16]
 8014d48:	114b      	asrs	r3, r1, #5
 8014d4a:	429e      	cmp	r6, r3
 8014d4c:	f100 0414 	add.w	r4, r0, #20
 8014d50:	dd30      	ble.n	8014db4 <rshift+0x70>
 8014d52:	f011 011f 	ands.w	r1, r1, #31
 8014d56:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014d5a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014d5e:	d108      	bne.n	8014d72 <rshift+0x2e>
 8014d60:	4621      	mov	r1, r4
 8014d62:	42b2      	cmp	r2, r6
 8014d64:	460b      	mov	r3, r1
 8014d66:	d211      	bcs.n	8014d8c <rshift+0x48>
 8014d68:	f852 3b04 	ldr.w	r3, [r2], #4
 8014d6c:	f841 3b04 	str.w	r3, [r1], #4
 8014d70:	e7f7      	b.n	8014d62 <rshift+0x1e>
 8014d72:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014d76:	f1c1 0c20 	rsb	ip, r1, #32
 8014d7a:	40cd      	lsrs	r5, r1
 8014d7c:	3204      	adds	r2, #4
 8014d7e:	4623      	mov	r3, r4
 8014d80:	42b2      	cmp	r2, r6
 8014d82:	4617      	mov	r7, r2
 8014d84:	d30c      	bcc.n	8014da0 <rshift+0x5c>
 8014d86:	601d      	str	r5, [r3, #0]
 8014d88:	b105      	cbz	r5, 8014d8c <rshift+0x48>
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	1b1a      	subs	r2, r3, r4
 8014d8e:	42a3      	cmp	r3, r4
 8014d90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014d94:	bf08      	it	eq
 8014d96:	2300      	moveq	r3, #0
 8014d98:	6102      	str	r2, [r0, #16]
 8014d9a:	bf08      	it	eq
 8014d9c:	6143      	streq	r3, [r0, #20]
 8014d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014da0:	683f      	ldr	r7, [r7, #0]
 8014da2:	fa07 f70c 	lsl.w	r7, r7, ip
 8014da6:	433d      	orrs	r5, r7
 8014da8:	f843 5b04 	str.w	r5, [r3], #4
 8014dac:	f852 5b04 	ldr.w	r5, [r2], #4
 8014db0:	40cd      	lsrs	r5, r1
 8014db2:	e7e5      	b.n	8014d80 <rshift+0x3c>
 8014db4:	4623      	mov	r3, r4
 8014db6:	e7e9      	b.n	8014d8c <rshift+0x48>

08014db8 <__hexdig_fun>:
 8014db8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014dbc:	2b09      	cmp	r3, #9
 8014dbe:	d802      	bhi.n	8014dc6 <__hexdig_fun+0xe>
 8014dc0:	3820      	subs	r0, #32
 8014dc2:	b2c0      	uxtb	r0, r0
 8014dc4:	4770      	bx	lr
 8014dc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014dca:	2b05      	cmp	r3, #5
 8014dcc:	d801      	bhi.n	8014dd2 <__hexdig_fun+0x1a>
 8014dce:	3847      	subs	r0, #71	; 0x47
 8014dd0:	e7f7      	b.n	8014dc2 <__hexdig_fun+0xa>
 8014dd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014dd6:	2b05      	cmp	r3, #5
 8014dd8:	d801      	bhi.n	8014dde <__hexdig_fun+0x26>
 8014dda:	3827      	subs	r0, #39	; 0x27
 8014ddc:	e7f1      	b.n	8014dc2 <__hexdig_fun+0xa>
 8014dde:	2000      	movs	r0, #0
 8014de0:	4770      	bx	lr

08014de2 <__gethex>:
 8014de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014de6:	b08b      	sub	sp, #44	; 0x2c
 8014de8:	468a      	mov	sl, r1
 8014dea:	9002      	str	r0, [sp, #8]
 8014dec:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014dee:	9306      	str	r3, [sp, #24]
 8014df0:	4690      	mov	r8, r2
 8014df2:	f000 fad0 	bl	8015396 <__localeconv_l>
 8014df6:	6803      	ldr	r3, [r0, #0]
 8014df8:	9303      	str	r3, [sp, #12]
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7eb f9f8 	bl	80001f0 <strlen>
 8014e00:	9b03      	ldr	r3, [sp, #12]
 8014e02:	9001      	str	r0, [sp, #4]
 8014e04:	4403      	add	r3, r0
 8014e06:	f04f 0b00 	mov.w	fp, #0
 8014e0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014e0e:	9307      	str	r3, [sp, #28]
 8014e10:	f8da 3000 	ldr.w	r3, [sl]
 8014e14:	3302      	adds	r3, #2
 8014e16:	461f      	mov	r7, r3
 8014e18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014e1c:	2830      	cmp	r0, #48	; 0x30
 8014e1e:	d06c      	beq.n	8014efa <__gethex+0x118>
 8014e20:	f7ff ffca 	bl	8014db8 <__hexdig_fun>
 8014e24:	4604      	mov	r4, r0
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d16a      	bne.n	8014f00 <__gethex+0x11e>
 8014e2a:	9a01      	ldr	r2, [sp, #4]
 8014e2c:	9903      	ldr	r1, [sp, #12]
 8014e2e:	4638      	mov	r0, r7
 8014e30:	f001 fa1d 	bl	801626e <strncmp>
 8014e34:	2800      	cmp	r0, #0
 8014e36:	d166      	bne.n	8014f06 <__gethex+0x124>
 8014e38:	9b01      	ldr	r3, [sp, #4]
 8014e3a:	5cf8      	ldrb	r0, [r7, r3]
 8014e3c:	18fe      	adds	r6, r7, r3
 8014e3e:	f7ff ffbb 	bl	8014db8 <__hexdig_fun>
 8014e42:	2800      	cmp	r0, #0
 8014e44:	d062      	beq.n	8014f0c <__gethex+0x12a>
 8014e46:	4633      	mov	r3, r6
 8014e48:	7818      	ldrb	r0, [r3, #0]
 8014e4a:	2830      	cmp	r0, #48	; 0x30
 8014e4c:	461f      	mov	r7, r3
 8014e4e:	f103 0301 	add.w	r3, r3, #1
 8014e52:	d0f9      	beq.n	8014e48 <__gethex+0x66>
 8014e54:	f7ff ffb0 	bl	8014db8 <__hexdig_fun>
 8014e58:	fab0 f580 	clz	r5, r0
 8014e5c:	096d      	lsrs	r5, r5, #5
 8014e5e:	4634      	mov	r4, r6
 8014e60:	f04f 0b01 	mov.w	fp, #1
 8014e64:	463a      	mov	r2, r7
 8014e66:	4616      	mov	r6, r2
 8014e68:	3201      	adds	r2, #1
 8014e6a:	7830      	ldrb	r0, [r6, #0]
 8014e6c:	f7ff ffa4 	bl	8014db8 <__hexdig_fun>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	d1f8      	bne.n	8014e66 <__gethex+0x84>
 8014e74:	9a01      	ldr	r2, [sp, #4]
 8014e76:	9903      	ldr	r1, [sp, #12]
 8014e78:	4630      	mov	r0, r6
 8014e7a:	f001 f9f8 	bl	801626e <strncmp>
 8014e7e:	b950      	cbnz	r0, 8014e96 <__gethex+0xb4>
 8014e80:	b954      	cbnz	r4, 8014e98 <__gethex+0xb6>
 8014e82:	9b01      	ldr	r3, [sp, #4]
 8014e84:	18f4      	adds	r4, r6, r3
 8014e86:	4622      	mov	r2, r4
 8014e88:	4616      	mov	r6, r2
 8014e8a:	3201      	adds	r2, #1
 8014e8c:	7830      	ldrb	r0, [r6, #0]
 8014e8e:	f7ff ff93 	bl	8014db8 <__hexdig_fun>
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d1f8      	bne.n	8014e88 <__gethex+0xa6>
 8014e96:	b10c      	cbz	r4, 8014e9c <__gethex+0xba>
 8014e98:	1ba4      	subs	r4, r4, r6
 8014e9a:	00a4      	lsls	r4, r4, #2
 8014e9c:	7833      	ldrb	r3, [r6, #0]
 8014e9e:	2b50      	cmp	r3, #80	; 0x50
 8014ea0:	d001      	beq.n	8014ea6 <__gethex+0xc4>
 8014ea2:	2b70      	cmp	r3, #112	; 0x70
 8014ea4:	d140      	bne.n	8014f28 <__gethex+0x146>
 8014ea6:	7873      	ldrb	r3, [r6, #1]
 8014ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8014eaa:	d031      	beq.n	8014f10 <__gethex+0x12e>
 8014eac:	2b2d      	cmp	r3, #45	; 0x2d
 8014eae:	d033      	beq.n	8014f18 <__gethex+0x136>
 8014eb0:	1c71      	adds	r1, r6, #1
 8014eb2:	f04f 0900 	mov.w	r9, #0
 8014eb6:	7808      	ldrb	r0, [r1, #0]
 8014eb8:	f7ff ff7e 	bl	8014db8 <__hexdig_fun>
 8014ebc:	1e43      	subs	r3, r0, #1
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	2b18      	cmp	r3, #24
 8014ec2:	d831      	bhi.n	8014f28 <__gethex+0x146>
 8014ec4:	f1a0 0210 	sub.w	r2, r0, #16
 8014ec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014ecc:	f7ff ff74 	bl	8014db8 <__hexdig_fun>
 8014ed0:	1e43      	subs	r3, r0, #1
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	2b18      	cmp	r3, #24
 8014ed6:	d922      	bls.n	8014f1e <__gethex+0x13c>
 8014ed8:	f1b9 0f00 	cmp.w	r9, #0
 8014edc:	d000      	beq.n	8014ee0 <__gethex+0xfe>
 8014ede:	4252      	negs	r2, r2
 8014ee0:	4414      	add	r4, r2
 8014ee2:	f8ca 1000 	str.w	r1, [sl]
 8014ee6:	b30d      	cbz	r5, 8014f2c <__gethex+0x14a>
 8014ee8:	f1bb 0f00 	cmp.w	fp, #0
 8014eec:	bf0c      	ite	eq
 8014eee:	2706      	moveq	r7, #6
 8014ef0:	2700      	movne	r7, #0
 8014ef2:	4638      	mov	r0, r7
 8014ef4:	b00b      	add	sp, #44	; 0x2c
 8014ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efa:	f10b 0b01 	add.w	fp, fp, #1
 8014efe:	e78a      	b.n	8014e16 <__gethex+0x34>
 8014f00:	2500      	movs	r5, #0
 8014f02:	462c      	mov	r4, r5
 8014f04:	e7ae      	b.n	8014e64 <__gethex+0x82>
 8014f06:	463e      	mov	r6, r7
 8014f08:	2501      	movs	r5, #1
 8014f0a:	e7c7      	b.n	8014e9c <__gethex+0xba>
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	e7fb      	b.n	8014f08 <__gethex+0x126>
 8014f10:	f04f 0900 	mov.w	r9, #0
 8014f14:	1cb1      	adds	r1, r6, #2
 8014f16:	e7ce      	b.n	8014eb6 <__gethex+0xd4>
 8014f18:	f04f 0901 	mov.w	r9, #1
 8014f1c:	e7fa      	b.n	8014f14 <__gethex+0x132>
 8014f1e:	230a      	movs	r3, #10
 8014f20:	fb03 0202 	mla	r2, r3, r2, r0
 8014f24:	3a10      	subs	r2, #16
 8014f26:	e7cf      	b.n	8014ec8 <__gethex+0xe6>
 8014f28:	4631      	mov	r1, r6
 8014f2a:	e7da      	b.n	8014ee2 <__gethex+0x100>
 8014f2c:	1bf3      	subs	r3, r6, r7
 8014f2e:	3b01      	subs	r3, #1
 8014f30:	4629      	mov	r1, r5
 8014f32:	2b07      	cmp	r3, #7
 8014f34:	dc49      	bgt.n	8014fca <__gethex+0x1e8>
 8014f36:	9802      	ldr	r0, [sp, #8]
 8014f38:	f000 fab6 	bl	80154a8 <_Balloc>
 8014f3c:	9b01      	ldr	r3, [sp, #4]
 8014f3e:	f100 0914 	add.w	r9, r0, #20
 8014f42:	f04f 0b00 	mov.w	fp, #0
 8014f46:	f1c3 0301 	rsb	r3, r3, #1
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8014f50:	46da      	mov	sl, fp
 8014f52:	9308      	str	r3, [sp, #32]
 8014f54:	42b7      	cmp	r7, r6
 8014f56:	d33b      	bcc.n	8014fd0 <__gethex+0x1ee>
 8014f58:	9804      	ldr	r0, [sp, #16]
 8014f5a:	f840 ab04 	str.w	sl, [r0], #4
 8014f5e:	eba0 0009 	sub.w	r0, r0, r9
 8014f62:	1080      	asrs	r0, r0, #2
 8014f64:	6128      	str	r0, [r5, #16]
 8014f66:	0147      	lsls	r7, r0, #5
 8014f68:	4650      	mov	r0, sl
 8014f6a:	f000 fb61 	bl	8015630 <__hi0bits>
 8014f6e:	f8d8 6000 	ldr.w	r6, [r8]
 8014f72:	1a3f      	subs	r7, r7, r0
 8014f74:	42b7      	cmp	r7, r6
 8014f76:	dd64      	ble.n	8015042 <__gethex+0x260>
 8014f78:	1bbf      	subs	r7, r7, r6
 8014f7a:	4639      	mov	r1, r7
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	f000 fe71 	bl	8015c64 <__any_on>
 8014f82:	4682      	mov	sl, r0
 8014f84:	b178      	cbz	r0, 8014fa6 <__gethex+0x1c4>
 8014f86:	1e7b      	subs	r3, r7, #1
 8014f88:	1159      	asrs	r1, r3, #5
 8014f8a:	f003 021f 	and.w	r2, r3, #31
 8014f8e:	f04f 0a01 	mov.w	sl, #1
 8014f92:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014f96:	fa0a f202 	lsl.w	r2, sl, r2
 8014f9a:	420a      	tst	r2, r1
 8014f9c:	d003      	beq.n	8014fa6 <__gethex+0x1c4>
 8014f9e:	4553      	cmp	r3, sl
 8014fa0:	dc46      	bgt.n	8015030 <__gethex+0x24e>
 8014fa2:	f04f 0a02 	mov.w	sl, #2
 8014fa6:	4639      	mov	r1, r7
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f7ff fecb 	bl	8014d44 <rshift>
 8014fae:	443c      	add	r4, r7
 8014fb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014fb4:	42a3      	cmp	r3, r4
 8014fb6:	da52      	bge.n	801505e <__gethex+0x27c>
 8014fb8:	4629      	mov	r1, r5
 8014fba:	9802      	ldr	r0, [sp, #8]
 8014fbc:	f000 faa8 	bl	8015510 <_Bfree>
 8014fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	6013      	str	r3, [r2, #0]
 8014fc6:	27a3      	movs	r7, #163	; 0xa3
 8014fc8:	e793      	b.n	8014ef2 <__gethex+0x110>
 8014fca:	3101      	adds	r1, #1
 8014fcc:	105b      	asrs	r3, r3, #1
 8014fce:	e7b0      	b.n	8014f32 <__gethex+0x150>
 8014fd0:	1e73      	subs	r3, r6, #1
 8014fd2:	9305      	str	r3, [sp, #20]
 8014fd4:	9a07      	ldr	r2, [sp, #28]
 8014fd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	d018      	beq.n	8015010 <__gethex+0x22e>
 8014fde:	f1bb 0f20 	cmp.w	fp, #32
 8014fe2:	d107      	bne.n	8014ff4 <__gethex+0x212>
 8014fe4:	9b04      	ldr	r3, [sp, #16]
 8014fe6:	f8c3 a000 	str.w	sl, [r3]
 8014fea:	3304      	adds	r3, #4
 8014fec:	f04f 0a00 	mov.w	sl, #0
 8014ff0:	9304      	str	r3, [sp, #16]
 8014ff2:	46d3      	mov	fp, sl
 8014ff4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014ff8:	f7ff fede 	bl	8014db8 <__hexdig_fun>
 8014ffc:	f000 000f 	and.w	r0, r0, #15
 8015000:	fa00 f00b 	lsl.w	r0, r0, fp
 8015004:	ea4a 0a00 	orr.w	sl, sl, r0
 8015008:	f10b 0b04 	add.w	fp, fp, #4
 801500c:	9b05      	ldr	r3, [sp, #20]
 801500e:	e00d      	b.n	801502c <__gethex+0x24a>
 8015010:	9b05      	ldr	r3, [sp, #20]
 8015012:	9a08      	ldr	r2, [sp, #32]
 8015014:	4413      	add	r3, r2
 8015016:	42bb      	cmp	r3, r7
 8015018:	d3e1      	bcc.n	8014fde <__gethex+0x1fc>
 801501a:	4618      	mov	r0, r3
 801501c:	9a01      	ldr	r2, [sp, #4]
 801501e:	9903      	ldr	r1, [sp, #12]
 8015020:	9309      	str	r3, [sp, #36]	; 0x24
 8015022:	f001 f924 	bl	801626e <strncmp>
 8015026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015028:	2800      	cmp	r0, #0
 801502a:	d1d8      	bne.n	8014fde <__gethex+0x1fc>
 801502c:	461e      	mov	r6, r3
 801502e:	e791      	b.n	8014f54 <__gethex+0x172>
 8015030:	1eb9      	subs	r1, r7, #2
 8015032:	4628      	mov	r0, r5
 8015034:	f000 fe16 	bl	8015c64 <__any_on>
 8015038:	2800      	cmp	r0, #0
 801503a:	d0b2      	beq.n	8014fa2 <__gethex+0x1c0>
 801503c:	f04f 0a03 	mov.w	sl, #3
 8015040:	e7b1      	b.n	8014fa6 <__gethex+0x1c4>
 8015042:	da09      	bge.n	8015058 <__gethex+0x276>
 8015044:	1bf7      	subs	r7, r6, r7
 8015046:	4629      	mov	r1, r5
 8015048:	463a      	mov	r2, r7
 801504a:	9802      	ldr	r0, [sp, #8]
 801504c:	f000 fc2c 	bl	80158a8 <__lshift>
 8015050:	1be4      	subs	r4, r4, r7
 8015052:	4605      	mov	r5, r0
 8015054:	f100 0914 	add.w	r9, r0, #20
 8015058:	f04f 0a00 	mov.w	sl, #0
 801505c:	e7a8      	b.n	8014fb0 <__gethex+0x1ce>
 801505e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015062:	42a0      	cmp	r0, r4
 8015064:	dd6a      	ble.n	801513c <__gethex+0x35a>
 8015066:	1b04      	subs	r4, r0, r4
 8015068:	42a6      	cmp	r6, r4
 801506a:	dc2e      	bgt.n	80150ca <__gethex+0x2e8>
 801506c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015070:	2b02      	cmp	r3, #2
 8015072:	d022      	beq.n	80150ba <__gethex+0x2d8>
 8015074:	2b03      	cmp	r3, #3
 8015076:	d024      	beq.n	80150c2 <__gethex+0x2e0>
 8015078:	2b01      	cmp	r3, #1
 801507a:	d115      	bne.n	80150a8 <__gethex+0x2c6>
 801507c:	42a6      	cmp	r6, r4
 801507e:	d113      	bne.n	80150a8 <__gethex+0x2c6>
 8015080:	2e01      	cmp	r6, #1
 8015082:	dc0b      	bgt.n	801509c <__gethex+0x2ba>
 8015084:	9a06      	ldr	r2, [sp, #24]
 8015086:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801508a:	6013      	str	r3, [r2, #0]
 801508c:	2301      	movs	r3, #1
 801508e:	612b      	str	r3, [r5, #16]
 8015090:	f8c9 3000 	str.w	r3, [r9]
 8015094:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015096:	2762      	movs	r7, #98	; 0x62
 8015098:	601d      	str	r5, [r3, #0]
 801509a:	e72a      	b.n	8014ef2 <__gethex+0x110>
 801509c:	1e71      	subs	r1, r6, #1
 801509e:	4628      	mov	r0, r5
 80150a0:	f000 fde0 	bl	8015c64 <__any_on>
 80150a4:	2800      	cmp	r0, #0
 80150a6:	d1ed      	bne.n	8015084 <__gethex+0x2a2>
 80150a8:	4629      	mov	r1, r5
 80150aa:	9802      	ldr	r0, [sp, #8]
 80150ac:	f000 fa30 	bl	8015510 <_Bfree>
 80150b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150b2:	2300      	movs	r3, #0
 80150b4:	6013      	str	r3, [r2, #0]
 80150b6:	2750      	movs	r7, #80	; 0x50
 80150b8:	e71b      	b.n	8014ef2 <__gethex+0x110>
 80150ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d0e1      	beq.n	8015084 <__gethex+0x2a2>
 80150c0:	e7f2      	b.n	80150a8 <__gethex+0x2c6>
 80150c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1dd      	bne.n	8015084 <__gethex+0x2a2>
 80150c8:	e7ee      	b.n	80150a8 <__gethex+0x2c6>
 80150ca:	1e67      	subs	r7, r4, #1
 80150cc:	f1ba 0f00 	cmp.w	sl, #0
 80150d0:	d131      	bne.n	8015136 <__gethex+0x354>
 80150d2:	b127      	cbz	r7, 80150de <__gethex+0x2fc>
 80150d4:	4639      	mov	r1, r7
 80150d6:	4628      	mov	r0, r5
 80150d8:	f000 fdc4 	bl	8015c64 <__any_on>
 80150dc:	4682      	mov	sl, r0
 80150de:	117a      	asrs	r2, r7, #5
 80150e0:	2301      	movs	r3, #1
 80150e2:	f007 071f 	and.w	r7, r7, #31
 80150e6:	fa03 f707 	lsl.w	r7, r3, r7
 80150ea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80150ee:	4621      	mov	r1, r4
 80150f0:	421f      	tst	r7, r3
 80150f2:	4628      	mov	r0, r5
 80150f4:	bf18      	it	ne
 80150f6:	f04a 0a02 	orrne.w	sl, sl, #2
 80150fa:	1b36      	subs	r6, r6, r4
 80150fc:	f7ff fe22 	bl	8014d44 <rshift>
 8015100:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015104:	2702      	movs	r7, #2
 8015106:	f1ba 0f00 	cmp.w	sl, #0
 801510a:	d048      	beq.n	801519e <__gethex+0x3bc>
 801510c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015110:	2b02      	cmp	r3, #2
 8015112:	d015      	beq.n	8015140 <__gethex+0x35e>
 8015114:	2b03      	cmp	r3, #3
 8015116:	d017      	beq.n	8015148 <__gethex+0x366>
 8015118:	2b01      	cmp	r3, #1
 801511a:	d109      	bne.n	8015130 <__gethex+0x34e>
 801511c:	f01a 0f02 	tst.w	sl, #2
 8015120:	d006      	beq.n	8015130 <__gethex+0x34e>
 8015122:	f8d9 3000 	ldr.w	r3, [r9]
 8015126:	ea4a 0a03 	orr.w	sl, sl, r3
 801512a:	f01a 0f01 	tst.w	sl, #1
 801512e:	d10e      	bne.n	801514e <__gethex+0x36c>
 8015130:	f047 0710 	orr.w	r7, r7, #16
 8015134:	e033      	b.n	801519e <__gethex+0x3bc>
 8015136:	f04f 0a01 	mov.w	sl, #1
 801513a:	e7d0      	b.n	80150de <__gethex+0x2fc>
 801513c:	2701      	movs	r7, #1
 801513e:	e7e2      	b.n	8015106 <__gethex+0x324>
 8015140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015142:	f1c3 0301 	rsb	r3, r3, #1
 8015146:	9315      	str	r3, [sp, #84]	; 0x54
 8015148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801514a:	2b00      	cmp	r3, #0
 801514c:	d0f0      	beq.n	8015130 <__gethex+0x34e>
 801514e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015152:	f105 0314 	add.w	r3, r5, #20
 8015156:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801515a:	eb03 010a 	add.w	r1, r3, sl
 801515e:	f04f 0c00 	mov.w	ip, #0
 8015162:	4618      	mov	r0, r3
 8015164:	f853 2b04 	ldr.w	r2, [r3], #4
 8015168:	f1b2 3fff 	cmp.w	r2, #4294967295
 801516c:	d01c      	beq.n	80151a8 <__gethex+0x3c6>
 801516e:	3201      	adds	r2, #1
 8015170:	6002      	str	r2, [r0, #0]
 8015172:	2f02      	cmp	r7, #2
 8015174:	f105 0314 	add.w	r3, r5, #20
 8015178:	d138      	bne.n	80151ec <__gethex+0x40a>
 801517a:	f8d8 2000 	ldr.w	r2, [r8]
 801517e:	3a01      	subs	r2, #1
 8015180:	42b2      	cmp	r2, r6
 8015182:	d10a      	bne.n	801519a <__gethex+0x3b8>
 8015184:	1171      	asrs	r1, r6, #5
 8015186:	2201      	movs	r2, #1
 8015188:	f006 061f 	and.w	r6, r6, #31
 801518c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015190:	fa02 f606 	lsl.w	r6, r2, r6
 8015194:	421e      	tst	r6, r3
 8015196:	bf18      	it	ne
 8015198:	4617      	movne	r7, r2
 801519a:	f047 0720 	orr.w	r7, r7, #32
 801519e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151a0:	601d      	str	r5, [r3, #0]
 80151a2:	9b06      	ldr	r3, [sp, #24]
 80151a4:	601c      	str	r4, [r3, #0]
 80151a6:	e6a4      	b.n	8014ef2 <__gethex+0x110>
 80151a8:	4299      	cmp	r1, r3
 80151aa:	f843 cc04 	str.w	ip, [r3, #-4]
 80151ae:	d8d8      	bhi.n	8015162 <__gethex+0x380>
 80151b0:	68ab      	ldr	r3, [r5, #8]
 80151b2:	4599      	cmp	r9, r3
 80151b4:	db12      	blt.n	80151dc <__gethex+0x3fa>
 80151b6:	6869      	ldr	r1, [r5, #4]
 80151b8:	9802      	ldr	r0, [sp, #8]
 80151ba:	3101      	adds	r1, #1
 80151bc:	f000 f974 	bl	80154a8 <_Balloc>
 80151c0:	692a      	ldr	r2, [r5, #16]
 80151c2:	3202      	adds	r2, #2
 80151c4:	f105 010c 	add.w	r1, r5, #12
 80151c8:	4683      	mov	fp, r0
 80151ca:	0092      	lsls	r2, r2, #2
 80151cc:	300c      	adds	r0, #12
 80151ce:	f7fc fe27 	bl	8011e20 <memcpy>
 80151d2:	4629      	mov	r1, r5
 80151d4:	9802      	ldr	r0, [sp, #8]
 80151d6:	f000 f99b 	bl	8015510 <_Bfree>
 80151da:	465d      	mov	r5, fp
 80151dc:	692b      	ldr	r3, [r5, #16]
 80151de:	1c5a      	adds	r2, r3, #1
 80151e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80151e4:	612a      	str	r2, [r5, #16]
 80151e6:	2201      	movs	r2, #1
 80151e8:	615a      	str	r2, [r3, #20]
 80151ea:	e7c2      	b.n	8015172 <__gethex+0x390>
 80151ec:	692a      	ldr	r2, [r5, #16]
 80151ee:	454a      	cmp	r2, r9
 80151f0:	dd0b      	ble.n	801520a <__gethex+0x428>
 80151f2:	2101      	movs	r1, #1
 80151f4:	4628      	mov	r0, r5
 80151f6:	f7ff fda5 	bl	8014d44 <rshift>
 80151fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80151fe:	3401      	adds	r4, #1
 8015200:	42a3      	cmp	r3, r4
 8015202:	f6ff aed9 	blt.w	8014fb8 <__gethex+0x1d6>
 8015206:	2701      	movs	r7, #1
 8015208:	e7c7      	b.n	801519a <__gethex+0x3b8>
 801520a:	f016 061f 	ands.w	r6, r6, #31
 801520e:	d0fa      	beq.n	8015206 <__gethex+0x424>
 8015210:	449a      	add	sl, r3
 8015212:	f1c6 0620 	rsb	r6, r6, #32
 8015216:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801521a:	f000 fa09 	bl	8015630 <__hi0bits>
 801521e:	42b0      	cmp	r0, r6
 8015220:	dbe7      	blt.n	80151f2 <__gethex+0x410>
 8015222:	e7f0      	b.n	8015206 <__gethex+0x424>

08015224 <L_shift>:
 8015224:	f1c2 0208 	rsb	r2, r2, #8
 8015228:	0092      	lsls	r2, r2, #2
 801522a:	b570      	push	{r4, r5, r6, lr}
 801522c:	f1c2 0620 	rsb	r6, r2, #32
 8015230:	6843      	ldr	r3, [r0, #4]
 8015232:	6804      	ldr	r4, [r0, #0]
 8015234:	fa03 f506 	lsl.w	r5, r3, r6
 8015238:	432c      	orrs	r4, r5
 801523a:	40d3      	lsrs	r3, r2
 801523c:	6004      	str	r4, [r0, #0]
 801523e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015242:	4288      	cmp	r0, r1
 8015244:	d3f4      	bcc.n	8015230 <L_shift+0xc>
 8015246:	bd70      	pop	{r4, r5, r6, pc}

08015248 <__match>:
 8015248:	b530      	push	{r4, r5, lr}
 801524a:	6803      	ldr	r3, [r0, #0]
 801524c:	3301      	adds	r3, #1
 801524e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015252:	b914      	cbnz	r4, 801525a <__match+0x12>
 8015254:	6003      	str	r3, [r0, #0]
 8015256:	2001      	movs	r0, #1
 8015258:	bd30      	pop	{r4, r5, pc}
 801525a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801525e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015262:	2d19      	cmp	r5, #25
 8015264:	bf98      	it	ls
 8015266:	3220      	addls	r2, #32
 8015268:	42a2      	cmp	r2, r4
 801526a:	d0f0      	beq.n	801524e <__match+0x6>
 801526c:	2000      	movs	r0, #0
 801526e:	e7f3      	b.n	8015258 <__match+0x10>

08015270 <__hexnan>:
 8015270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015274:	680b      	ldr	r3, [r1, #0]
 8015276:	6801      	ldr	r1, [r0, #0]
 8015278:	115f      	asrs	r7, r3, #5
 801527a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801527e:	f013 031f 	ands.w	r3, r3, #31
 8015282:	b087      	sub	sp, #28
 8015284:	bf18      	it	ne
 8015286:	3704      	addne	r7, #4
 8015288:	2500      	movs	r5, #0
 801528a:	1f3e      	subs	r6, r7, #4
 801528c:	4682      	mov	sl, r0
 801528e:	4690      	mov	r8, r2
 8015290:	9301      	str	r3, [sp, #4]
 8015292:	f847 5c04 	str.w	r5, [r7, #-4]
 8015296:	46b1      	mov	r9, r6
 8015298:	4634      	mov	r4, r6
 801529a:	9502      	str	r5, [sp, #8]
 801529c:	46ab      	mov	fp, r5
 801529e:	784a      	ldrb	r2, [r1, #1]
 80152a0:	1c4b      	adds	r3, r1, #1
 80152a2:	9303      	str	r3, [sp, #12]
 80152a4:	b342      	cbz	r2, 80152f8 <__hexnan+0x88>
 80152a6:	4610      	mov	r0, r2
 80152a8:	9105      	str	r1, [sp, #20]
 80152aa:	9204      	str	r2, [sp, #16]
 80152ac:	f7ff fd84 	bl	8014db8 <__hexdig_fun>
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d143      	bne.n	801533c <__hexnan+0xcc>
 80152b4:	9a04      	ldr	r2, [sp, #16]
 80152b6:	9905      	ldr	r1, [sp, #20]
 80152b8:	2a20      	cmp	r2, #32
 80152ba:	d818      	bhi.n	80152ee <__hexnan+0x7e>
 80152bc:	9b02      	ldr	r3, [sp, #8]
 80152be:	459b      	cmp	fp, r3
 80152c0:	dd13      	ble.n	80152ea <__hexnan+0x7a>
 80152c2:	454c      	cmp	r4, r9
 80152c4:	d206      	bcs.n	80152d4 <__hexnan+0x64>
 80152c6:	2d07      	cmp	r5, #7
 80152c8:	dc04      	bgt.n	80152d4 <__hexnan+0x64>
 80152ca:	462a      	mov	r2, r5
 80152cc:	4649      	mov	r1, r9
 80152ce:	4620      	mov	r0, r4
 80152d0:	f7ff ffa8 	bl	8015224 <L_shift>
 80152d4:	4544      	cmp	r4, r8
 80152d6:	d944      	bls.n	8015362 <__hexnan+0xf2>
 80152d8:	2300      	movs	r3, #0
 80152da:	f1a4 0904 	sub.w	r9, r4, #4
 80152de:	f844 3c04 	str.w	r3, [r4, #-4]
 80152e2:	f8cd b008 	str.w	fp, [sp, #8]
 80152e6:	464c      	mov	r4, r9
 80152e8:	461d      	mov	r5, r3
 80152ea:	9903      	ldr	r1, [sp, #12]
 80152ec:	e7d7      	b.n	801529e <__hexnan+0x2e>
 80152ee:	2a29      	cmp	r2, #41	; 0x29
 80152f0:	d14a      	bne.n	8015388 <__hexnan+0x118>
 80152f2:	3102      	adds	r1, #2
 80152f4:	f8ca 1000 	str.w	r1, [sl]
 80152f8:	f1bb 0f00 	cmp.w	fp, #0
 80152fc:	d044      	beq.n	8015388 <__hexnan+0x118>
 80152fe:	454c      	cmp	r4, r9
 8015300:	d206      	bcs.n	8015310 <__hexnan+0xa0>
 8015302:	2d07      	cmp	r5, #7
 8015304:	dc04      	bgt.n	8015310 <__hexnan+0xa0>
 8015306:	462a      	mov	r2, r5
 8015308:	4649      	mov	r1, r9
 801530a:	4620      	mov	r0, r4
 801530c:	f7ff ff8a 	bl	8015224 <L_shift>
 8015310:	4544      	cmp	r4, r8
 8015312:	d928      	bls.n	8015366 <__hexnan+0xf6>
 8015314:	4643      	mov	r3, r8
 8015316:	f854 2b04 	ldr.w	r2, [r4], #4
 801531a:	f843 2b04 	str.w	r2, [r3], #4
 801531e:	42a6      	cmp	r6, r4
 8015320:	d2f9      	bcs.n	8015316 <__hexnan+0xa6>
 8015322:	2200      	movs	r2, #0
 8015324:	f843 2b04 	str.w	r2, [r3], #4
 8015328:	429e      	cmp	r6, r3
 801532a:	d2fb      	bcs.n	8015324 <__hexnan+0xb4>
 801532c:	6833      	ldr	r3, [r6, #0]
 801532e:	b91b      	cbnz	r3, 8015338 <__hexnan+0xc8>
 8015330:	4546      	cmp	r6, r8
 8015332:	d127      	bne.n	8015384 <__hexnan+0x114>
 8015334:	2301      	movs	r3, #1
 8015336:	6033      	str	r3, [r6, #0]
 8015338:	2005      	movs	r0, #5
 801533a:	e026      	b.n	801538a <__hexnan+0x11a>
 801533c:	3501      	adds	r5, #1
 801533e:	2d08      	cmp	r5, #8
 8015340:	f10b 0b01 	add.w	fp, fp, #1
 8015344:	dd06      	ble.n	8015354 <__hexnan+0xe4>
 8015346:	4544      	cmp	r4, r8
 8015348:	d9cf      	bls.n	80152ea <__hexnan+0x7a>
 801534a:	2300      	movs	r3, #0
 801534c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015350:	2501      	movs	r5, #1
 8015352:	3c04      	subs	r4, #4
 8015354:	6822      	ldr	r2, [r4, #0]
 8015356:	f000 000f 	and.w	r0, r0, #15
 801535a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801535e:	6020      	str	r0, [r4, #0]
 8015360:	e7c3      	b.n	80152ea <__hexnan+0x7a>
 8015362:	2508      	movs	r5, #8
 8015364:	e7c1      	b.n	80152ea <__hexnan+0x7a>
 8015366:	9b01      	ldr	r3, [sp, #4]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d0df      	beq.n	801532c <__hexnan+0xbc>
 801536c:	f04f 32ff 	mov.w	r2, #4294967295
 8015370:	f1c3 0320 	rsb	r3, r3, #32
 8015374:	fa22 f303 	lsr.w	r3, r2, r3
 8015378:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801537c:	401a      	ands	r2, r3
 801537e:	f847 2c04 	str.w	r2, [r7, #-4]
 8015382:	e7d3      	b.n	801532c <__hexnan+0xbc>
 8015384:	3e04      	subs	r6, #4
 8015386:	e7d1      	b.n	801532c <__hexnan+0xbc>
 8015388:	2004      	movs	r0, #4
 801538a:	b007      	add	sp, #28
 801538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015390 <__locale_ctype_ptr_l>:
 8015390:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015394:	4770      	bx	lr

08015396 <__localeconv_l>:
 8015396:	30f0      	adds	r0, #240	; 0xf0
 8015398:	4770      	bx	lr
	...

0801539c <_localeconv_r>:
 801539c:	4b04      	ldr	r3, [pc, #16]	; (80153b0 <_localeconv_r+0x14>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	6a18      	ldr	r0, [r3, #32]
 80153a2:	4b04      	ldr	r3, [pc, #16]	; (80153b4 <_localeconv_r+0x18>)
 80153a4:	2800      	cmp	r0, #0
 80153a6:	bf08      	it	eq
 80153a8:	4618      	moveq	r0, r3
 80153aa:	30f0      	adds	r0, #240	; 0xf0
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop
 80153b0:	20000020 	.word	0x20000020
 80153b4:	20000084 	.word	0x20000084

080153b8 <__swhatbuf_r>:
 80153b8:	b570      	push	{r4, r5, r6, lr}
 80153ba:	460e      	mov	r6, r1
 80153bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153c0:	2900      	cmp	r1, #0
 80153c2:	b096      	sub	sp, #88	; 0x58
 80153c4:	4614      	mov	r4, r2
 80153c6:	461d      	mov	r5, r3
 80153c8:	da07      	bge.n	80153da <__swhatbuf_r+0x22>
 80153ca:	2300      	movs	r3, #0
 80153cc:	602b      	str	r3, [r5, #0]
 80153ce:	89b3      	ldrh	r3, [r6, #12]
 80153d0:	061a      	lsls	r2, r3, #24
 80153d2:	d410      	bmi.n	80153f6 <__swhatbuf_r+0x3e>
 80153d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153d8:	e00e      	b.n	80153f8 <__swhatbuf_r+0x40>
 80153da:	466a      	mov	r2, sp
 80153dc:	f000 ff88 	bl	80162f0 <_fstat_r>
 80153e0:	2800      	cmp	r0, #0
 80153e2:	dbf2      	blt.n	80153ca <__swhatbuf_r+0x12>
 80153e4:	9a01      	ldr	r2, [sp, #4]
 80153e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80153ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80153ee:	425a      	negs	r2, r3
 80153f0:	415a      	adcs	r2, r3
 80153f2:	602a      	str	r2, [r5, #0]
 80153f4:	e7ee      	b.n	80153d4 <__swhatbuf_r+0x1c>
 80153f6:	2340      	movs	r3, #64	; 0x40
 80153f8:	2000      	movs	r0, #0
 80153fa:	6023      	str	r3, [r4, #0]
 80153fc:	b016      	add	sp, #88	; 0x58
 80153fe:	bd70      	pop	{r4, r5, r6, pc}

08015400 <__smakebuf_r>:
 8015400:	898b      	ldrh	r3, [r1, #12]
 8015402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015404:	079d      	lsls	r5, r3, #30
 8015406:	4606      	mov	r6, r0
 8015408:	460c      	mov	r4, r1
 801540a:	d507      	bpl.n	801541c <__smakebuf_r+0x1c>
 801540c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015410:	6023      	str	r3, [r4, #0]
 8015412:	6123      	str	r3, [r4, #16]
 8015414:	2301      	movs	r3, #1
 8015416:	6163      	str	r3, [r4, #20]
 8015418:	b002      	add	sp, #8
 801541a:	bd70      	pop	{r4, r5, r6, pc}
 801541c:	ab01      	add	r3, sp, #4
 801541e:	466a      	mov	r2, sp
 8015420:	f7ff ffca 	bl	80153b8 <__swhatbuf_r>
 8015424:	9900      	ldr	r1, [sp, #0]
 8015426:	4605      	mov	r5, r0
 8015428:	4630      	mov	r0, r6
 801542a:	f7fc fd5b 	bl	8011ee4 <_malloc_r>
 801542e:	b948      	cbnz	r0, 8015444 <__smakebuf_r+0x44>
 8015430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015434:	059a      	lsls	r2, r3, #22
 8015436:	d4ef      	bmi.n	8015418 <__smakebuf_r+0x18>
 8015438:	f023 0303 	bic.w	r3, r3, #3
 801543c:	f043 0302 	orr.w	r3, r3, #2
 8015440:	81a3      	strh	r3, [r4, #12]
 8015442:	e7e3      	b.n	801540c <__smakebuf_r+0xc>
 8015444:	4b0d      	ldr	r3, [pc, #52]	; (801547c <__smakebuf_r+0x7c>)
 8015446:	62b3      	str	r3, [r6, #40]	; 0x28
 8015448:	89a3      	ldrh	r3, [r4, #12]
 801544a:	6020      	str	r0, [r4, #0]
 801544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015450:	81a3      	strh	r3, [r4, #12]
 8015452:	9b00      	ldr	r3, [sp, #0]
 8015454:	6163      	str	r3, [r4, #20]
 8015456:	9b01      	ldr	r3, [sp, #4]
 8015458:	6120      	str	r0, [r4, #16]
 801545a:	b15b      	cbz	r3, 8015474 <__smakebuf_r+0x74>
 801545c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015460:	4630      	mov	r0, r6
 8015462:	f000 ff57 	bl	8016314 <_isatty_r>
 8015466:	b128      	cbz	r0, 8015474 <__smakebuf_r+0x74>
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	f023 0303 	bic.w	r3, r3, #3
 801546e:	f043 0301 	orr.w	r3, r3, #1
 8015472:	81a3      	strh	r3, [r4, #12]
 8015474:	89a3      	ldrh	r3, [r4, #12]
 8015476:	431d      	orrs	r5, r3
 8015478:	81a5      	strh	r5, [r4, #12]
 801547a:	e7cd      	b.n	8015418 <__smakebuf_r+0x18>
 801547c:	08014bf9 	.word	0x08014bf9

08015480 <__ascii_mbtowc>:
 8015480:	b082      	sub	sp, #8
 8015482:	b901      	cbnz	r1, 8015486 <__ascii_mbtowc+0x6>
 8015484:	a901      	add	r1, sp, #4
 8015486:	b142      	cbz	r2, 801549a <__ascii_mbtowc+0x1a>
 8015488:	b14b      	cbz	r3, 801549e <__ascii_mbtowc+0x1e>
 801548a:	7813      	ldrb	r3, [r2, #0]
 801548c:	600b      	str	r3, [r1, #0]
 801548e:	7812      	ldrb	r2, [r2, #0]
 8015490:	1c10      	adds	r0, r2, #0
 8015492:	bf18      	it	ne
 8015494:	2001      	movne	r0, #1
 8015496:	b002      	add	sp, #8
 8015498:	4770      	bx	lr
 801549a:	4610      	mov	r0, r2
 801549c:	e7fb      	b.n	8015496 <__ascii_mbtowc+0x16>
 801549e:	f06f 0001 	mvn.w	r0, #1
 80154a2:	e7f8      	b.n	8015496 <__ascii_mbtowc+0x16>

080154a4 <__malloc_lock>:
 80154a4:	4770      	bx	lr

080154a6 <__malloc_unlock>:
 80154a6:	4770      	bx	lr

080154a8 <_Balloc>:
 80154a8:	b570      	push	{r4, r5, r6, lr}
 80154aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80154ac:	4604      	mov	r4, r0
 80154ae:	460e      	mov	r6, r1
 80154b0:	b93d      	cbnz	r5, 80154c2 <_Balloc+0x1a>
 80154b2:	2010      	movs	r0, #16
 80154b4:	f7fc fca4 	bl	8011e00 <malloc>
 80154b8:	6260      	str	r0, [r4, #36]	; 0x24
 80154ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80154be:	6005      	str	r5, [r0, #0]
 80154c0:	60c5      	str	r5, [r0, #12]
 80154c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80154c4:	68eb      	ldr	r3, [r5, #12]
 80154c6:	b183      	cbz	r3, 80154ea <_Balloc+0x42>
 80154c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154ca:	68db      	ldr	r3, [r3, #12]
 80154cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80154d0:	b9b8      	cbnz	r0, 8015502 <_Balloc+0x5a>
 80154d2:	2101      	movs	r1, #1
 80154d4:	fa01 f506 	lsl.w	r5, r1, r6
 80154d8:	1d6a      	adds	r2, r5, #5
 80154da:	0092      	lsls	r2, r2, #2
 80154dc:	4620      	mov	r0, r4
 80154de:	f000 fbe2 	bl	8015ca6 <_calloc_r>
 80154e2:	b160      	cbz	r0, 80154fe <_Balloc+0x56>
 80154e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80154e8:	e00e      	b.n	8015508 <_Balloc+0x60>
 80154ea:	2221      	movs	r2, #33	; 0x21
 80154ec:	2104      	movs	r1, #4
 80154ee:	4620      	mov	r0, r4
 80154f0:	f000 fbd9 	bl	8015ca6 <_calloc_r>
 80154f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154f6:	60e8      	str	r0, [r5, #12]
 80154f8:	68db      	ldr	r3, [r3, #12]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d1e4      	bne.n	80154c8 <_Balloc+0x20>
 80154fe:	2000      	movs	r0, #0
 8015500:	bd70      	pop	{r4, r5, r6, pc}
 8015502:	6802      	ldr	r2, [r0, #0]
 8015504:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015508:	2300      	movs	r3, #0
 801550a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801550e:	e7f7      	b.n	8015500 <_Balloc+0x58>

08015510 <_Bfree>:
 8015510:	b570      	push	{r4, r5, r6, lr}
 8015512:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015514:	4606      	mov	r6, r0
 8015516:	460d      	mov	r5, r1
 8015518:	b93c      	cbnz	r4, 801552a <_Bfree+0x1a>
 801551a:	2010      	movs	r0, #16
 801551c:	f7fc fc70 	bl	8011e00 <malloc>
 8015520:	6270      	str	r0, [r6, #36]	; 0x24
 8015522:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015526:	6004      	str	r4, [r0, #0]
 8015528:	60c4      	str	r4, [r0, #12]
 801552a:	b13d      	cbz	r5, 801553c <_Bfree+0x2c>
 801552c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801552e:	686a      	ldr	r2, [r5, #4]
 8015530:	68db      	ldr	r3, [r3, #12]
 8015532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015536:	6029      	str	r1, [r5, #0]
 8015538:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801553c:	bd70      	pop	{r4, r5, r6, pc}

0801553e <__multadd>:
 801553e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015542:	690d      	ldr	r5, [r1, #16]
 8015544:	461f      	mov	r7, r3
 8015546:	4606      	mov	r6, r0
 8015548:	460c      	mov	r4, r1
 801554a:	f101 0c14 	add.w	ip, r1, #20
 801554e:	2300      	movs	r3, #0
 8015550:	f8dc 0000 	ldr.w	r0, [ip]
 8015554:	b281      	uxth	r1, r0
 8015556:	fb02 7101 	mla	r1, r2, r1, r7
 801555a:	0c0f      	lsrs	r7, r1, #16
 801555c:	0c00      	lsrs	r0, r0, #16
 801555e:	fb02 7000 	mla	r0, r2, r0, r7
 8015562:	b289      	uxth	r1, r1
 8015564:	3301      	adds	r3, #1
 8015566:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801556a:	429d      	cmp	r5, r3
 801556c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015570:	f84c 1b04 	str.w	r1, [ip], #4
 8015574:	dcec      	bgt.n	8015550 <__multadd+0x12>
 8015576:	b1d7      	cbz	r7, 80155ae <__multadd+0x70>
 8015578:	68a3      	ldr	r3, [r4, #8]
 801557a:	42ab      	cmp	r3, r5
 801557c:	dc12      	bgt.n	80155a4 <__multadd+0x66>
 801557e:	6861      	ldr	r1, [r4, #4]
 8015580:	4630      	mov	r0, r6
 8015582:	3101      	adds	r1, #1
 8015584:	f7ff ff90 	bl	80154a8 <_Balloc>
 8015588:	6922      	ldr	r2, [r4, #16]
 801558a:	3202      	adds	r2, #2
 801558c:	f104 010c 	add.w	r1, r4, #12
 8015590:	4680      	mov	r8, r0
 8015592:	0092      	lsls	r2, r2, #2
 8015594:	300c      	adds	r0, #12
 8015596:	f7fc fc43 	bl	8011e20 <memcpy>
 801559a:	4621      	mov	r1, r4
 801559c:	4630      	mov	r0, r6
 801559e:	f7ff ffb7 	bl	8015510 <_Bfree>
 80155a2:	4644      	mov	r4, r8
 80155a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80155a8:	3501      	adds	r5, #1
 80155aa:	615f      	str	r7, [r3, #20]
 80155ac:	6125      	str	r5, [r4, #16]
 80155ae:	4620      	mov	r0, r4
 80155b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155b4 <__s2b>:
 80155b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155b8:	460c      	mov	r4, r1
 80155ba:	4615      	mov	r5, r2
 80155bc:	461f      	mov	r7, r3
 80155be:	2209      	movs	r2, #9
 80155c0:	3308      	adds	r3, #8
 80155c2:	4606      	mov	r6, r0
 80155c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80155c8:	2100      	movs	r1, #0
 80155ca:	2201      	movs	r2, #1
 80155cc:	429a      	cmp	r2, r3
 80155ce:	db20      	blt.n	8015612 <__s2b+0x5e>
 80155d0:	4630      	mov	r0, r6
 80155d2:	f7ff ff69 	bl	80154a8 <_Balloc>
 80155d6:	9b08      	ldr	r3, [sp, #32]
 80155d8:	6143      	str	r3, [r0, #20]
 80155da:	2d09      	cmp	r5, #9
 80155dc:	f04f 0301 	mov.w	r3, #1
 80155e0:	6103      	str	r3, [r0, #16]
 80155e2:	dd19      	ble.n	8015618 <__s2b+0x64>
 80155e4:	f104 0809 	add.w	r8, r4, #9
 80155e8:	46c1      	mov	r9, r8
 80155ea:	442c      	add	r4, r5
 80155ec:	f819 3b01 	ldrb.w	r3, [r9], #1
 80155f0:	4601      	mov	r1, r0
 80155f2:	3b30      	subs	r3, #48	; 0x30
 80155f4:	220a      	movs	r2, #10
 80155f6:	4630      	mov	r0, r6
 80155f8:	f7ff ffa1 	bl	801553e <__multadd>
 80155fc:	45a1      	cmp	r9, r4
 80155fe:	d1f5      	bne.n	80155ec <__s2b+0x38>
 8015600:	eb08 0405 	add.w	r4, r8, r5
 8015604:	3c08      	subs	r4, #8
 8015606:	1b2d      	subs	r5, r5, r4
 8015608:	1963      	adds	r3, r4, r5
 801560a:	42bb      	cmp	r3, r7
 801560c:	db07      	blt.n	801561e <__s2b+0x6a>
 801560e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015612:	0052      	lsls	r2, r2, #1
 8015614:	3101      	adds	r1, #1
 8015616:	e7d9      	b.n	80155cc <__s2b+0x18>
 8015618:	340a      	adds	r4, #10
 801561a:	2509      	movs	r5, #9
 801561c:	e7f3      	b.n	8015606 <__s2b+0x52>
 801561e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015622:	4601      	mov	r1, r0
 8015624:	3b30      	subs	r3, #48	; 0x30
 8015626:	220a      	movs	r2, #10
 8015628:	4630      	mov	r0, r6
 801562a:	f7ff ff88 	bl	801553e <__multadd>
 801562e:	e7eb      	b.n	8015608 <__s2b+0x54>

08015630 <__hi0bits>:
 8015630:	0c02      	lsrs	r2, r0, #16
 8015632:	0412      	lsls	r2, r2, #16
 8015634:	4603      	mov	r3, r0
 8015636:	b9b2      	cbnz	r2, 8015666 <__hi0bits+0x36>
 8015638:	0403      	lsls	r3, r0, #16
 801563a:	2010      	movs	r0, #16
 801563c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015640:	bf04      	itt	eq
 8015642:	021b      	lsleq	r3, r3, #8
 8015644:	3008      	addeq	r0, #8
 8015646:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801564a:	bf04      	itt	eq
 801564c:	011b      	lsleq	r3, r3, #4
 801564e:	3004      	addeq	r0, #4
 8015650:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015654:	bf04      	itt	eq
 8015656:	009b      	lsleq	r3, r3, #2
 8015658:	3002      	addeq	r0, #2
 801565a:	2b00      	cmp	r3, #0
 801565c:	db06      	blt.n	801566c <__hi0bits+0x3c>
 801565e:	005b      	lsls	r3, r3, #1
 8015660:	d503      	bpl.n	801566a <__hi0bits+0x3a>
 8015662:	3001      	adds	r0, #1
 8015664:	4770      	bx	lr
 8015666:	2000      	movs	r0, #0
 8015668:	e7e8      	b.n	801563c <__hi0bits+0xc>
 801566a:	2020      	movs	r0, #32
 801566c:	4770      	bx	lr

0801566e <__lo0bits>:
 801566e:	6803      	ldr	r3, [r0, #0]
 8015670:	f013 0207 	ands.w	r2, r3, #7
 8015674:	4601      	mov	r1, r0
 8015676:	d00b      	beq.n	8015690 <__lo0bits+0x22>
 8015678:	07da      	lsls	r2, r3, #31
 801567a:	d423      	bmi.n	80156c4 <__lo0bits+0x56>
 801567c:	0798      	lsls	r0, r3, #30
 801567e:	bf49      	itett	mi
 8015680:	085b      	lsrmi	r3, r3, #1
 8015682:	089b      	lsrpl	r3, r3, #2
 8015684:	2001      	movmi	r0, #1
 8015686:	600b      	strmi	r3, [r1, #0]
 8015688:	bf5c      	itt	pl
 801568a:	600b      	strpl	r3, [r1, #0]
 801568c:	2002      	movpl	r0, #2
 801568e:	4770      	bx	lr
 8015690:	b298      	uxth	r0, r3
 8015692:	b9a8      	cbnz	r0, 80156c0 <__lo0bits+0x52>
 8015694:	0c1b      	lsrs	r3, r3, #16
 8015696:	2010      	movs	r0, #16
 8015698:	f013 0fff 	tst.w	r3, #255	; 0xff
 801569c:	bf04      	itt	eq
 801569e:	0a1b      	lsreq	r3, r3, #8
 80156a0:	3008      	addeq	r0, #8
 80156a2:	071a      	lsls	r2, r3, #28
 80156a4:	bf04      	itt	eq
 80156a6:	091b      	lsreq	r3, r3, #4
 80156a8:	3004      	addeq	r0, #4
 80156aa:	079a      	lsls	r2, r3, #30
 80156ac:	bf04      	itt	eq
 80156ae:	089b      	lsreq	r3, r3, #2
 80156b0:	3002      	addeq	r0, #2
 80156b2:	07da      	lsls	r2, r3, #31
 80156b4:	d402      	bmi.n	80156bc <__lo0bits+0x4e>
 80156b6:	085b      	lsrs	r3, r3, #1
 80156b8:	d006      	beq.n	80156c8 <__lo0bits+0x5a>
 80156ba:	3001      	adds	r0, #1
 80156bc:	600b      	str	r3, [r1, #0]
 80156be:	4770      	bx	lr
 80156c0:	4610      	mov	r0, r2
 80156c2:	e7e9      	b.n	8015698 <__lo0bits+0x2a>
 80156c4:	2000      	movs	r0, #0
 80156c6:	4770      	bx	lr
 80156c8:	2020      	movs	r0, #32
 80156ca:	4770      	bx	lr

080156cc <__i2b>:
 80156cc:	b510      	push	{r4, lr}
 80156ce:	460c      	mov	r4, r1
 80156d0:	2101      	movs	r1, #1
 80156d2:	f7ff fee9 	bl	80154a8 <_Balloc>
 80156d6:	2201      	movs	r2, #1
 80156d8:	6144      	str	r4, [r0, #20]
 80156da:	6102      	str	r2, [r0, #16]
 80156dc:	bd10      	pop	{r4, pc}

080156de <__multiply>:
 80156de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e2:	4614      	mov	r4, r2
 80156e4:	690a      	ldr	r2, [r1, #16]
 80156e6:	6923      	ldr	r3, [r4, #16]
 80156e8:	429a      	cmp	r2, r3
 80156ea:	bfb8      	it	lt
 80156ec:	460b      	movlt	r3, r1
 80156ee:	4688      	mov	r8, r1
 80156f0:	bfbc      	itt	lt
 80156f2:	46a0      	movlt	r8, r4
 80156f4:	461c      	movlt	r4, r3
 80156f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80156fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80156fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015702:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015706:	eb07 0609 	add.w	r6, r7, r9
 801570a:	42b3      	cmp	r3, r6
 801570c:	bfb8      	it	lt
 801570e:	3101      	addlt	r1, #1
 8015710:	f7ff feca 	bl	80154a8 <_Balloc>
 8015714:	f100 0514 	add.w	r5, r0, #20
 8015718:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801571c:	462b      	mov	r3, r5
 801571e:	2200      	movs	r2, #0
 8015720:	4573      	cmp	r3, lr
 8015722:	d316      	bcc.n	8015752 <__multiply+0x74>
 8015724:	f104 0214 	add.w	r2, r4, #20
 8015728:	f108 0114 	add.w	r1, r8, #20
 801572c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015730:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015734:	9300      	str	r3, [sp, #0]
 8015736:	9b00      	ldr	r3, [sp, #0]
 8015738:	9201      	str	r2, [sp, #4]
 801573a:	4293      	cmp	r3, r2
 801573c:	d80c      	bhi.n	8015758 <__multiply+0x7a>
 801573e:	2e00      	cmp	r6, #0
 8015740:	dd03      	ble.n	801574a <__multiply+0x6c>
 8015742:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015746:	2b00      	cmp	r3, #0
 8015748:	d05d      	beq.n	8015806 <__multiply+0x128>
 801574a:	6106      	str	r6, [r0, #16]
 801574c:	b003      	add	sp, #12
 801574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015752:	f843 2b04 	str.w	r2, [r3], #4
 8015756:	e7e3      	b.n	8015720 <__multiply+0x42>
 8015758:	f8b2 b000 	ldrh.w	fp, [r2]
 801575c:	f1bb 0f00 	cmp.w	fp, #0
 8015760:	d023      	beq.n	80157aa <__multiply+0xcc>
 8015762:	4689      	mov	r9, r1
 8015764:	46ac      	mov	ip, r5
 8015766:	f04f 0800 	mov.w	r8, #0
 801576a:	f859 4b04 	ldr.w	r4, [r9], #4
 801576e:	f8dc a000 	ldr.w	sl, [ip]
 8015772:	b2a3      	uxth	r3, r4
 8015774:	fa1f fa8a 	uxth.w	sl, sl
 8015778:	fb0b a303 	mla	r3, fp, r3, sl
 801577c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015780:	f8dc 4000 	ldr.w	r4, [ip]
 8015784:	4443      	add	r3, r8
 8015786:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801578a:	fb0b 840a 	mla	r4, fp, sl, r8
 801578e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015792:	46e2      	mov	sl, ip
 8015794:	b29b      	uxth	r3, r3
 8015796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801579a:	454f      	cmp	r7, r9
 801579c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80157a0:	f84a 3b04 	str.w	r3, [sl], #4
 80157a4:	d82b      	bhi.n	80157fe <__multiply+0x120>
 80157a6:	f8cc 8004 	str.w	r8, [ip, #4]
 80157aa:	9b01      	ldr	r3, [sp, #4]
 80157ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80157b0:	3204      	adds	r2, #4
 80157b2:	f1ba 0f00 	cmp.w	sl, #0
 80157b6:	d020      	beq.n	80157fa <__multiply+0x11c>
 80157b8:	682b      	ldr	r3, [r5, #0]
 80157ba:	4689      	mov	r9, r1
 80157bc:	46a8      	mov	r8, r5
 80157be:	f04f 0b00 	mov.w	fp, #0
 80157c2:	f8b9 c000 	ldrh.w	ip, [r9]
 80157c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80157ca:	fb0a 440c 	mla	r4, sl, ip, r4
 80157ce:	445c      	add	r4, fp
 80157d0:	46c4      	mov	ip, r8
 80157d2:	b29b      	uxth	r3, r3
 80157d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80157d8:	f84c 3b04 	str.w	r3, [ip], #4
 80157dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80157e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80157e4:	0c1b      	lsrs	r3, r3, #16
 80157e6:	fb0a b303 	mla	r3, sl, r3, fp
 80157ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80157ee:	454f      	cmp	r7, r9
 80157f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80157f4:	d805      	bhi.n	8015802 <__multiply+0x124>
 80157f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80157fa:	3504      	adds	r5, #4
 80157fc:	e79b      	b.n	8015736 <__multiply+0x58>
 80157fe:	46d4      	mov	ip, sl
 8015800:	e7b3      	b.n	801576a <__multiply+0x8c>
 8015802:	46e0      	mov	r8, ip
 8015804:	e7dd      	b.n	80157c2 <__multiply+0xe4>
 8015806:	3e01      	subs	r6, #1
 8015808:	e799      	b.n	801573e <__multiply+0x60>
	...

0801580c <__pow5mult>:
 801580c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015810:	4615      	mov	r5, r2
 8015812:	f012 0203 	ands.w	r2, r2, #3
 8015816:	4606      	mov	r6, r0
 8015818:	460f      	mov	r7, r1
 801581a:	d007      	beq.n	801582c <__pow5mult+0x20>
 801581c:	3a01      	subs	r2, #1
 801581e:	4c21      	ldr	r4, [pc, #132]	; (80158a4 <__pow5mult+0x98>)
 8015820:	2300      	movs	r3, #0
 8015822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015826:	f7ff fe8a 	bl	801553e <__multadd>
 801582a:	4607      	mov	r7, r0
 801582c:	10ad      	asrs	r5, r5, #2
 801582e:	d035      	beq.n	801589c <__pow5mult+0x90>
 8015830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015832:	b93c      	cbnz	r4, 8015844 <__pow5mult+0x38>
 8015834:	2010      	movs	r0, #16
 8015836:	f7fc fae3 	bl	8011e00 <malloc>
 801583a:	6270      	str	r0, [r6, #36]	; 0x24
 801583c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015840:	6004      	str	r4, [r0, #0]
 8015842:	60c4      	str	r4, [r0, #12]
 8015844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801584c:	b94c      	cbnz	r4, 8015862 <__pow5mult+0x56>
 801584e:	f240 2171 	movw	r1, #625	; 0x271
 8015852:	4630      	mov	r0, r6
 8015854:	f7ff ff3a 	bl	80156cc <__i2b>
 8015858:	2300      	movs	r3, #0
 801585a:	f8c8 0008 	str.w	r0, [r8, #8]
 801585e:	4604      	mov	r4, r0
 8015860:	6003      	str	r3, [r0, #0]
 8015862:	f04f 0800 	mov.w	r8, #0
 8015866:	07eb      	lsls	r3, r5, #31
 8015868:	d50a      	bpl.n	8015880 <__pow5mult+0x74>
 801586a:	4639      	mov	r1, r7
 801586c:	4622      	mov	r2, r4
 801586e:	4630      	mov	r0, r6
 8015870:	f7ff ff35 	bl	80156de <__multiply>
 8015874:	4639      	mov	r1, r7
 8015876:	4681      	mov	r9, r0
 8015878:	4630      	mov	r0, r6
 801587a:	f7ff fe49 	bl	8015510 <_Bfree>
 801587e:	464f      	mov	r7, r9
 8015880:	106d      	asrs	r5, r5, #1
 8015882:	d00b      	beq.n	801589c <__pow5mult+0x90>
 8015884:	6820      	ldr	r0, [r4, #0]
 8015886:	b938      	cbnz	r0, 8015898 <__pow5mult+0x8c>
 8015888:	4622      	mov	r2, r4
 801588a:	4621      	mov	r1, r4
 801588c:	4630      	mov	r0, r6
 801588e:	f7ff ff26 	bl	80156de <__multiply>
 8015892:	6020      	str	r0, [r4, #0]
 8015894:	f8c0 8000 	str.w	r8, [r0]
 8015898:	4604      	mov	r4, r0
 801589a:	e7e4      	b.n	8015866 <__pow5mult+0x5a>
 801589c:	4638      	mov	r0, r7
 801589e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158a2:	bf00      	nop
 80158a4:	080167a0 	.word	0x080167a0

080158a8 <__lshift>:
 80158a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158ac:	460c      	mov	r4, r1
 80158ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80158b2:	6923      	ldr	r3, [r4, #16]
 80158b4:	6849      	ldr	r1, [r1, #4]
 80158b6:	eb0a 0903 	add.w	r9, sl, r3
 80158ba:	68a3      	ldr	r3, [r4, #8]
 80158bc:	4607      	mov	r7, r0
 80158be:	4616      	mov	r6, r2
 80158c0:	f109 0501 	add.w	r5, r9, #1
 80158c4:	42ab      	cmp	r3, r5
 80158c6:	db32      	blt.n	801592e <__lshift+0x86>
 80158c8:	4638      	mov	r0, r7
 80158ca:	f7ff fded 	bl	80154a8 <_Balloc>
 80158ce:	2300      	movs	r3, #0
 80158d0:	4680      	mov	r8, r0
 80158d2:	f100 0114 	add.w	r1, r0, #20
 80158d6:	461a      	mov	r2, r3
 80158d8:	4553      	cmp	r3, sl
 80158da:	db2b      	blt.n	8015934 <__lshift+0x8c>
 80158dc:	6920      	ldr	r0, [r4, #16]
 80158de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80158e2:	f104 0314 	add.w	r3, r4, #20
 80158e6:	f016 021f 	ands.w	r2, r6, #31
 80158ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80158ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80158f2:	d025      	beq.n	8015940 <__lshift+0x98>
 80158f4:	f1c2 0e20 	rsb	lr, r2, #32
 80158f8:	2000      	movs	r0, #0
 80158fa:	681e      	ldr	r6, [r3, #0]
 80158fc:	468a      	mov	sl, r1
 80158fe:	4096      	lsls	r6, r2
 8015900:	4330      	orrs	r0, r6
 8015902:	f84a 0b04 	str.w	r0, [sl], #4
 8015906:	f853 0b04 	ldr.w	r0, [r3], #4
 801590a:	459c      	cmp	ip, r3
 801590c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015910:	d814      	bhi.n	801593c <__lshift+0x94>
 8015912:	6048      	str	r0, [r1, #4]
 8015914:	b108      	cbz	r0, 801591a <__lshift+0x72>
 8015916:	f109 0502 	add.w	r5, r9, #2
 801591a:	3d01      	subs	r5, #1
 801591c:	4638      	mov	r0, r7
 801591e:	f8c8 5010 	str.w	r5, [r8, #16]
 8015922:	4621      	mov	r1, r4
 8015924:	f7ff fdf4 	bl	8015510 <_Bfree>
 8015928:	4640      	mov	r0, r8
 801592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801592e:	3101      	adds	r1, #1
 8015930:	005b      	lsls	r3, r3, #1
 8015932:	e7c7      	b.n	80158c4 <__lshift+0x1c>
 8015934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015938:	3301      	adds	r3, #1
 801593a:	e7cd      	b.n	80158d8 <__lshift+0x30>
 801593c:	4651      	mov	r1, sl
 801593e:	e7dc      	b.n	80158fa <__lshift+0x52>
 8015940:	3904      	subs	r1, #4
 8015942:	f853 2b04 	ldr.w	r2, [r3], #4
 8015946:	f841 2f04 	str.w	r2, [r1, #4]!
 801594a:	459c      	cmp	ip, r3
 801594c:	d8f9      	bhi.n	8015942 <__lshift+0x9a>
 801594e:	e7e4      	b.n	801591a <__lshift+0x72>

08015950 <__mcmp>:
 8015950:	6903      	ldr	r3, [r0, #16]
 8015952:	690a      	ldr	r2, [r1, #16]
 8015954:	1a9b      	subs	r3, r3, r2
 8015956:	b530      	push	{r4, r5, lr}
 8015958:	d10c      	bne.n	8015974 <__mcmp+0x24>
 801595a:	0092      	lsls	r2, r2, #2
 801595c:	3014      	adds	r0, #20
 801595e:	3114      	adds	r1, #20
 8015960:	1884      	adds	r4, r0, r2
 8015962:	4411      	add	r1, r2
 8015964:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015968:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801596c:	4295      	cmp	r5, r2
 801596e:	d003      	beq.n	8015978 <__mcmp+0x28>
 8015970:	d305      	bcc.n	801597e <__mcmp+0x2e>
 8015972:	2301      	movs	r3, #1
 8015974:	4618      	mov	r0, r3
 8015976:	bd30      	pop	{r4, r5, pc}
 8015978:	42a0      	cmp	r0, r4
 801597a:	d3f3      	bcc.n	8015964 <__mcmp+0x14>
 801597c:	e7fa      	b.n	8015974 <__mcmp+0x24>
 801597e:	f04f 33ff 	mov.w	r3, #4294967295
 8015982:	e7f7      	b.n	8015974 <__mcmp+0x24>

08015984 <__mdiff>:
 8015984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015988:	460d      	mov	r5, r1
 801598a:	4607      	mov	r7, r0
 801598c:	4611      	mov	r1, r2
 801598e:	4628      	mov	r0, r5
 8015990:	4614      	mov	r4, r2
 8015992:	f7ff ffdd 	bl	8015950 <__mcmp>
 8015996:	1e06      	subs	r6, r0, #0
 8015998:	d108      	bne.n	80159ac <__mdiff+0x28>
 801599a:	4631      	mov	r1, r6
 801599c:	4638      	mov	r0, r7
 801599e:	f7ff fd83 	bl	80154a8 <_Balloc>
 80159a2:	2301      	movs	r3, #1
 80159a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80159a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159ac:	bfa4      	itt	ge
 80159ae:	4623      	movge	r3, r4
 80159b0:	462c      	movge	r4, r5
 80159b2:	4638      	mov	r0, r7
 80159b4:	6861      	ldr	r1, [r4, #4]
 80159b6:	bfa6      	itte	ge
 80159b8:	461d      	movge	r5, r3
 80159ba:	2600      	movge	r6, #0
 80159bc:	2601      	movlt	r6, #1
 80159be:	f7ff fd73 	bl	80154a8 <_Balloc>
 80159c2:	692b      	ldr	r3, [r5, #16]
 80159c4:	60c6      	str	r6, [r0, #12]
 80159c6:	6926      	ldr	r6, [r4, #16]
 80159c8:	f105 0914 	add.w	r9, r5, #20
 80159cc:	f104 0214 	add.w	r2, r4, #20
 80159d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80159d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80159d8:	f100 0514 	add.w	r5, r0, #20
 80159dc:	f04f 0e00 	mov.w	lr, #0
 80159e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80159e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80159e8:	fa1e f18a 	uxtah	r1, lr, sl
 80159ec:	b2a3      	uxth	r3, r4
 80159ee:	1ac9      	subs	r1, r1, r3
 80159f0:	0c23      	lsrs	r3, r4, #16
 80159f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80159f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80159fa:	b289      	uxth	r1, r1
 80159fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015a00:	45c8      	cmp	r8, r9
 8015a02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015a06:	4694      	mov	ip, r2
 8015a08:	f845 3b04 	str.w	r3, [r5], #4
 8015a0c:	d8e8      	bhi.n	80159e0 <__mdiff+0x5c>
 8015a0e:	45bc      	cmp	ip, r7
 8015a10:	d304      	bcc.n	8015a1c <__mdiff+0x98>
 8015a12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015a16:	b183      	cbz	r3, 8015a3a <__mdiff+0xb6>
 8015a18:	6106      	str	r6, [r0, #16]
 8015a1a:	e7c5      	b.n	80159a8 <__mdiff+0x24>
 8015a1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015a20:	fa1e f381 	uxtah	r3, lr, r1
 8015a24:	141a      	asrs	r2, r3, #16
 8015a26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015a30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015a34:	f845 3b04 	str.w	r3, [r5], #4
 8015a38:	e7e9      	b.n	8015a0e <__mdiff+0x8a>
 8015a3a:	3e01      	subs	r6, #1
 8015a3c:	e7e9      	b.n	8015a12 <__mdiff+0x8e>
	...

08015a40 <__ulp>:
 8015a40:	4b12      	ldr	r3, [pc, #72]	; (8015a8c <__ulp+0x4c>)
 8015a42:	ee10 2a90 	vmov	r2, s1
 8015a46:	401a      	ands	r2, r3
 8015a48:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	dd04      	ble.n	8015a5a <__ulp+0x1a>
 8015a50:	2000      	movs	r0, #0
 8015a52:	4619      	mov	r1, r3
 8015a54:	ec41 0b10 	vmov	d0, r0, r1
 8015a58:	4770      	bx	lr
 8015a5a:	425b      	negs	r3, r3
 8015a5c:	151b      	asrs	r3, r3, #20
 8015a5e:	2b13      	cmp	r3, #19
 8015a60:	f04f 0000 	mov.w	r0, #0
 8015a64:	f04f 0100 	mov.w	r1, #0
 8015a68:	dc04      	bgt.n	8015a74 <__ulp+0x34>
 8015a6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015a6e:	fa42 f103 	asr.w	r1, r2, r3
 8015a72:	e7ef      	b.n	8015a54 <__ulp+0x14>
 8015a74:	3b14      	subs	r3, #20
 8015a76:	2b1e      	cmp	r3, #30
 8015a78:	f04f 0201 	mov.w	r2, #1
 8015a7c:	bfda      	itte	le
 8015a7e:	f1c3 031f 	rsble	r3, r3, #31
 8015a82:	fa02 f303 	lslle.w	r3, r2, r3
 8015a86:	4613      	movgt	r3, r2
 8015a88:	4618      	mov	r0, r3
 8015a8a:	e7e3      	b.n	8015a54 <__ulp+0x14>
 8015a8c:	7ff00000 	.word	0x7ff00000

08015a90 <__b2d>:
 8015a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a92:	6905      	ldr	r5, [r0, #16]
 8015a94:	f100 0714 	add.w	r7, r0, #20
 8015a98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015a9c:	1f2e      	subs	r6, r5, #4
 8015a9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	f7ff fdc4 	bl	8015630 <__hi0bits>
 8015aa8:	f1c0 0320 	rsb	r3, r0, #32
 8015aac:	280a      	cmp	r0, #10
 8015aae:	600b      	str	r3, [r1, #0]
 8015ab0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015b28 <__b2d+0x98>
 8015ab4:	dc14      	bgt.n	8015ae0 <__b2d+0x50>
 8015ab6:	f1c0 0e0b 	rsb	lr, r0, #11
 8015aba:	fa24 f10e 	lsr.w	r1, r4, lr
 8015abe:	42b7      	cmp	r7, r6
 8015ac0:	ea41 030c 	orr.w	r3, r1, ip
 8015ac4:	bf34      	ite	cc
 8015ac6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015aca:	2100      	movcs	r1, #0
 8015acc:	3015      	adds	r0, #21
 8015ace:	fa04 f000 	lsl.w	r0, r4, r0
 8015ad2:	fa21 f10e 	lsr.w	r1, r1, lr
 8015ad6:	ea40 0201 	orr.w	r2, r0, r1
 8015ada:	ec43 2b10 	vmov	d0, r2, r3
 8015ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ae0:	42b7      	cmp	r7, r6
 8015ae2:	bf3a      	itte	cc
 8015ae4:	f1a5 0608 	subcc.w	r6, r5, #8
 8015ae8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015aec:	2100      	movcs	r1, #0
 8015aee:	380b      	subs	r0, #11
 8015af0:	d015      	beq.n	8015b1e <__b2d+0x8e>
 8015af2:	4084      	lsls	r4, r0
 8015af4:	f1c0 0520 	rsb	r5, r0, #32
 8015af8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015afc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015b00:	42be      	cmp	r6, r7
 8015b02:	fa21 fc05 	lsr.w	ip, r1, r5
 8015b06:	ea44 030c 	orr.w	r3, r4, ip
 8015b0a:	bf8c      	ite	hi
 8015b0c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015b10:	2400      	movls	r4, #0
 8015b12:	fa01 f000 	lsl.w	r0, r1, r0
 8015b16:	40ec      	lsrs	r4, r5
 8015b18:	ea40 0204 	orr.w	r2, r0, r4
 8015b1c:	e7dd      	b.n	8015ada <__b2d+0x4a>
 8015b1e:	ea44 030c 	orr.w	r3, r4, ip
 8015b22:	460a      	mov	r2, r1
 8015b24:	e7d9      	b.n	8015ada <__b2d+0x4a>
 8015b26:	bf00      	nop
 8015b28:	3ff00000 	.word	0x3ff00000

08015b2c <__d2b>:
 8015b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015b30:	460e      	mov	r6, r1
 8015b32:	2101      	movs	r1, #1
 8015b34:	ec59 8b10 	vmov	r8, r9, d0
 8015b38:	4615      	mov	r5, r2
 8015b3a:	f7ff fcb5 	bl	80154a8 <_Balloc>
 8015b3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015b42:	4607      	mov	r7, r0
 8015b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015b48:	bb34      	cbnz	r4, 8015b98 <__d2b+0x6c>
 8015b4a:	9301      	str	r3, [sp, #4]
 8015b4c:	f1b8 0300 	subs.w	r3, r8, #0
 8015b50:	d027      	beq.n	8015ba2 <__d2b+0x76>
 8015b52:	a802      	add	r0, sp, #8
 8015b54:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015b58:	f7ff fd89 	bl	801566e <__lo0bits>
 8015b5c:	9900      	ldr	r1, [sp, #0]
 8015b5e:	b1f0      	cbz	r0, 8015b9e <__d2b+0x72>
 8015b60:	9a01      	ldr	r2, [sp, #4]
 8015b62:	f1c0 0320 	rsb	r3, r0, #32
 8015b66:	fa02 f303 	lsl.w	r3, r2, r3
 8015b6a:	430b      	orrs	r3, r1
 8015b6c:	40c2      	lsrs	r2, r0
 8015b6e:	617b      	str	r3, [r7, #20]
 8015b70:	9201      	str	r2, [sp, #4]
 8015b72:	9b01      	ldr	r3, [sp, #4]
 8015b74:	61bb      	str	r3, [r7, #24]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	bf14      	ite	ne
 8015b7a:	2102      	movne	r1, #2
 8015b7c:	2101      	moveq	r1, #1
 8015b7e:	6139      	str	r1, [r7, #16]
 8015b80:	b1c4      	cbz	r4, 8015bb4 <__d2b+0x88>
 8015b82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015b86:	4404      	add	r4, r0
 8015b88:	6034      	str	r4, [r6, #0]
 8015b8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015b8e:	6028      	str	r0, [r5, #0]
 8015b90:	4638      	mov	r0, r7
 8015b92:	b003      	add	sp, #12
 8015b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b9c:	e7d5      	b.n	8015b4a <__d2b+0x1e>
 8015b9e:	6179      	str	r1, [r7, #20]
 8015ba0:	e7e7      	b.n	8015b72 <__d2b+0x46>
 8015ba2:	a801      	add	r0, sp, #4
 8015ba4:	f7ff fd63 	bl	801566e <__lo0bits>
 8015ba8:	9b01      	ldr	r3, [sp, #4]
 8015baa:	617b      	str	r3, [r7, #20]
 8015bac:	2101      	movs	r1, #1
 8015bae:	6139      	str	r1, [r7, #16]
 8015bb0:	3020      	adds	r0, #32
 8015bb2:	e7e5      	b.n	8015b80 <__d2b+0x54>
 8015bb4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015bb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015bbc:	6030      	str	r0, [r6, #0]
 8015bbe:	6918      	ldr	r0, [r3, #16]
 8015bc0:	f7ff fd36 	bl	8015630 <__hi0bits>
 8015bc4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015bc8:	e7e1      	b.n	8015b8e <__d2b+0x62>

08015bca <__ratio>:
 8015bca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bce:	4688      	mov	r8, r1
 8015bd0:	4669      	mov	r1, sp
 8015bd2:	4681      	mov	r9, r0
 8015bd4:	f7ff ff5c 	bl	8015a90 <__b2d>
 8015bd8:	a901      	add	r1, sp, #4
 8015bda:	4640      	mov	r0, r8
 8015bdc:	ec57 6b10 	vmov	r6, r7, d0
 8015be0:	f7ff ff56 	bl	8015a90 <__b2d>
 8015be4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015be8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015bec:	eba3 0c02 	sub.w	ip, r3, r2
 8015bf0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015bf4:	1a9b      	subs	r3, r3, r2
 8015bf6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015bfa:	ec5b ab10 	vmov	sl, fp, d0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	bfce      	itee	gt
 8015c02:	463a      	movgt	r2, r7
 8015c04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015c08:	465a      	movle	r2, fp
 8015c0a:	4659      	mov	r1, fp
 8015c0c:	463d      	mov	r5, r7
 8015c0e:	bfd4      	ite	le
 8015c10:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015c14:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015c18:	4630      	mov	r0, r6
 8015c1a:	ee10 2a10 	vmov	r2, s0
 8015c1e:	460b      	mov	r3, r1
 8015c20:	4629      	mov	r1, r5
 8015c22:	f7ea fe23 	bl	800086c <__aeabi_ddiv>
 8015c26:	ec41 0b10 	vmov	d0, r0, r1
 8015c2a:	b003      	add	sp, #12
 8015c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c30 <__copybits>:
 8015c30:	3901      	subs	r1, #1
 8015c32:	b510      	push	{r4, lr}
 8015c34:	1149      	asrs	r1, r1, #5
 8015c36:	6914      	ldr	r4, [r2, #16]
 8015c38:	3101      	adds	r1, #1
 8015c3a:	f102 0314 	add.w	r3, r2, #20
 8015c3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015c42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015c46:	42a3      	cmp	r3, r4
 8015c48:	4602      	mov	r2, r0
 8015c4a:	d303      	bcc.n	8015c54 <__copybits+0x24>
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	428a      	cmp	r2, r1
 8015c50:	d305      	bcc.n	8015c5e <__copybits+0x2e>
 8015c52:	bd10      	pop	{r4, pc}
 8015c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c58:	f840 2b04 	str.w	r2, [r0], #4
 8015c5c:	e7f3      	b.n	8015c46 <__copybits+0x16>
 8015c5e:	f842 3b04 	str.w	r3, [r2], #4
 8015c62:	e7f4      	b.n	8015c4e <__copybits+0x1e>

08015c64 <__any_on>:
 8015c64:	f100 0214 	add.w	r2, r0, #20
 8015c68:	6900      	ldr	r0, [r0, #16]
 8015c6a:	114b      	asrs	r3, r1, #5
 8015c6c:	4298      	cmp	r0, r3
 8015c6e:	b510      	push	{r4, lr}
 8015c70:	db11      	blt.n	8015c96 <__any_on+0x32>
 8015c72:	dd0a      	ble.n	8015c8a <__any_on+0x26>
 8015c74:	f011 011f 	ands.w	r1, r1, #31
 8015c78:	d007      	beq.n	8015c8a <__any_on+0x26>
 8015c7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015c7e:	fa24 f001 	lsr.w	r0, r4, r1
 8015c82:	fa00 f101 	lsl.w	r1, r0, r1
 8015c86:	428c      	cmp	r4, r1
 8015c88:	d10b      	bne.n	8015ca2 <__any_on+0x3e>
 8015c8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c8e:	4293      	cmp	r3, r2
 8015c90:	d803      	bhi.n	8015c9a <__any_on+0x36>
 8015c92:	2000      	movs	r0, #0
 8015c94:	bd10      	pop	{r4, pc}
 8015c96:	4603      	mov	r3, r0
 8015c98:	e7f7      	b.n	8015c8a <__any_on+0x26>
 8015c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015c9e:	2900      	cmp	r1, #0
 8015ca0:	d0f5      	beq.n	8015c8e <__any_on+0x2a>
 8015ca2:	2001      	movs	r0, #1
 8015ca4:	e7f6      	b.n	8015c94 <__any_on+0x30>

08015ca6 <_calloc_r>:
 8015ca6:	b538      	push	{r3, r4, r5, lr}
 8015ca8:	fb02 f401 	mul.w	r4, r2, r1
 8015cac:	4621      	mov	r1, r4
 8015cae:	f7fc f919 	bl	8011ee4 <_malloc_r>
 8015cb2:	4605      	mov	r5, r0
 8015cb4:	b118      	cbz	r0, 8015cbe <_calloc_r+0x18>
 8015cb6:	4622      	mov	r2, r4
 8015cb8:	2100      	movs	r1, #0
 8015cba:	f7fc f8bc 	bl	8011e36 <memset>
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	bd38      	pop	{r3, r4, r5, pc}

08015cc2 <__ssputs_r>:
 8015cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc6:	688e      	ldr	r6, [r1, #8]
 8015cc8:	429e      	cmp	r6, r3
 8015cca:	4682      	mov	sl, r0
 8015ccc:	460c      	mov	r4, r1
 8015cce:	4690      	mov	r8, r2
 8015cd0:	4699      	mov	r9, r3
 8015cd2:	d837      	bhi.n	8015d44 <__ssputs_r+0x82>
 8015cd4:	898a      	ldrh	r2, [r1, #12]
 8015cd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cda:	d031      	beq.n	8015d40 <__ssputs_r+0x7e>
 8015cdc:	6825      	ldr	r5, [r4, #0]
 8015cde:	6909      	ldr	r1, [r1, #16]
 8015ce0:	1a6f      	subs	r7, r5, r1
 8015ce2:	6965      	ldr	r5, [r4, #20]
 8015ce4:	2302      	movs	r3, #2
 8015ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cea:	fb95 f5f3 	sdiv	r5, r5, r3
 8015cee:	f109 0301 	add.w	r3, r9, #1
 8015cf2:	443b      	add	r3, r7
 8015cf4:	429d      	cmp	r5, r3
 8015cf6:	bf38      	it	cc
 8015cf8:	461d      	movcc	r5, r3
 8015cfa:	0553      	lsls	r3, r2, #21
 8015cfc:	d530      	bpl.n	8015d60 <__ssputs_r+0x9e>
 8015cfe:	4629      	mov	r1, r5
 8015d00:	f7fc f8f0 	bl	8011ee4 <_malloc_r>
 8015d04:	4606      	mov	r6, r0
 8015d06:	b950      	cbnz	r0, 8015d1e <__ssputs_r+0x5c>
 8015d08:	230c      	movs	r3, #12
 8015d0a:	f8ca 3000 	str.w	r3, [sl]
 8015d0e:	89a3      	ldrh	r3, [r4, #12]
 8015d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d14:	81a3      	strh	r3, [r4, #12]
 8015d16:	f04f 30ff 	mov.w	r0, #4294967295
 8015d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d1e:	463a      	mov	r2, r7
 8015d20:	6921      	ldr	r1, [r4, #16]
 8015d22:	f7fc f87d 	bl	8011e20 <memcpy>
 8015d26:	89a3      	ldrh	r3, [r4, #12]
 8015d28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d30:	81a3      	strh	r3, [r4, #12]
 8015d32:	6126      	str	r6, [r4, #16]
 8015d34:	6165      	str	r5, [r4, #20]
 8015d36:	443e      	add	r6, r7
 8015d38:	1bed      	subs	r5, r5, r7
 8015d3a:	6026      	str	r6, [r4, #0]
 8015d3c:	60a5      	str	r5, [r4, #8]
 8015d3e:	464e      	mov	r6, r9
 8015d40:	454e      	cmp	r6, r9
 8015d42:	d900      	bls.n	8015d46 <__ssputs_r+0x84>
 8015d44:	464e      	mov	r6, r9
 8015d46:	4632      	mov	r2, r6
 8015d48:	4641      	mov	r1, r8
 8015d4a:	6820      	ldr	r0, [r4, #0]
 8015d4c:	f000 fb04 	bl	8016358 <memmove>
 8015d50:	68a3      	ldr	r3, [r4, #8]
 8015d52:	1b9b      	subs	r3, r3, r6
 8015d54:	60a3      	str	r3, [r4, #8]
 8015d56:	6823      	ldr	r3, [r4, #0]
 8015d58:	441e      	add	r6, r3
 8015d5a:	6026      	str	r6, [r4, #0]
 8015d5c:	2000      	movs	r0, #0
 8015d5e:	e7dc      	b.n	8015d1a <__ssputs_r+0x58>
 8015d60:	462a      	mov	r2, r5
 8015d62:	f000 fb12 	bl	801638a <_realloc_r>
 8015d66:	4606      	mov	r6, r0
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d1e2      	bne.n	8015d32 <__ssputs_r+0x70>
 8015d6c:	6921      	ldr	r1, [r4, #16]
 8015d6e:	4650      	mov	r0, sl
 8015d70:	f7fc f86a 	bl	8011e48 <_free_r>
 8015d74:	e7c8      	b.n	8015d08 <__ssputs_r+0x46>
	...

08015d78 <_svfiprintf_r>:
 8015d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d7c:	461d      	mov	r5, r3
 8015d7e:	898b      	ldrh	r3, [r1, #12]
 8015d80:	061f      	lsls	r7, r3, #24
 8015d82:	b09d      	sub	sp, #116	; 0x74
 8015d84:	4680      	mov	r8, r0
 8015d86:	460c      	mov	r4, r1
 8015d88:	4616      	mov	r6, r2
 8015d8a:	d50f      	bpl.n	8015dac <_svfiprintf_r+0x34>
 8015d8c:	690b      	ldr	r3, [r1, #16]
 8015d8e:	b96b      	cbnz	r3, 8015dac <_svfiprintf_r+0x34>
 8015d90:	2140      	movs	r1, #64	; 0x40
 8015d92:	f7fc f8a7 	bl	8011ee4 <_malloc_r>
 8015d96:	6020      	str	r0, [r4, #0]
 8015d98:	6120      	str	r0, [r4, #16]
 8015d9a:	b928      	cbnz	r0, 8015da8 <_svfiprintf_r+0x30>
 8015d9c:	230c      	movs	r3, #12
 8015d9e:	f8c8 3000 	str.w	r3, [r8]
 8015da2:	f04f 30ff 	mov.w	r0, #4294967295
 8015da6:	e0c8      	b.n	8015f3a <_svfiprintf_r+0x1c2>
 8015da8:	2340      	movs	r3, #64	; 0x40
 8015daa:	6163      	str	r3, [r4, #20]
 8015dac:	2300      	movs	r3, #0
 8015dae:	9309      	str	r3, [sp, #36]	; 0x24
 8015db0:	2320      	movs	r3, #32
 8015db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015db6:	2330      	movs	r3, #48	; 0x30
 8015db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015dbc:	9503      	str	r5, [sp, #12]
 8015dbe:	f04f 0b01 	mov.w	fp, #1
 8015dc2:	4637      	mov	r7, r6
 8015dc4:	463d      	mov	r5, r7
 8015dc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015dca:	b10b      	cbz	r3, 8015dd0 <_svfiprintf_r+0x58>
 8015dcc:	2b25      	cmp	r3, #37	; 0x25
 8015dce:	d13e      	bne.n	8015e4e <_svfiprintf_r+0xd6>
 8015dd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8015dd4:	d00b      	beq.n	8015dee <_svfiprintf_r+0x76>
 8015dd6:	4653      	mov	r3, sl
 8015dd8:	4632      	mov	r2, r6
 8015dda:	4621      	mov	r1, r4
 8015ddc:	4640      	mov	r0, r8
 8015dde:	f7ff ff70 	bl	8015cc2 <__ssputs_r>
 8015de2:	3001      	adds	r0, #1
 8015de4:	f000 80a4 	beq.w	8015f30 <_svfiprintf_r+0x1b8>
 8015de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dea:	4453      	add	r3, sl
 8015dec:	9309      	str	r3, [sp, #36]	; 0x24
 8015dee:	783b      	ldrb	r3, [r7, #0]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	f000 809d 	beq.w	8015f30 <_svfiprintf_r+0x1b8>
 8015df6:	2300      	movs	r3, #0
 8015df8:	f04f 32ff 	mov.w	r2, #4294967295
 8015dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e00:	9304      	str	r3, [sp, #16]
 8015e02:	9307      	str	r3, [sp, #28]
 8015e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e08:	931a      	str	r3, [sp, #104]	; 0x68
 8015e0a:	462f      	mov	r7, r5
 8015e0c:	2205      	movs	r2, #5
 8015e0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015e12:	4850      	ldr	r0, [pc, #320]	; (8015f54 <_svfiprintf_r+0x1dc>)
 8015e14:	f7ea f9f4 	bl	8000200 <memchr>
 8015e18:	9b04      	ldr	r3, [sp, #16]
 8015e1a:	b9d0      	cbnz	r0, 8015e52 <_svfiprintf_r+0xda>
 8015e1c:	06d9      	lsls	r1, r3, #27
 8015e1e:	bf44      	itt	mi
 8015e20:	2220      	movmi	r2, #32
 8015e22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015e26:	071a      	lsls	r2, r3, #28
 8015e28:	bf44      	itt	mi
 8015e2a:	222b      	movmi	r2, #43	; 0x2b
 8015e2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015e30:	782a      	ldrb	r2, [r5, #0]
 8015e32:	2a2a      	cmp	r2, #42	; 0x2a
 8015e34:	d015      	beq.n	8015e62 <_svfiprintf_r+0xea>
 8015e36:	9a07      	ldr	r2, [sp, #28]
 8015e38:	462f      	mov	r7, r5
 8015e3a:	2000      	movs	r0, #0
 8015e3c:	250a      	movs	r5, #10
 8015e3e:	4639      	mov	r1, r7
 8015e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e44:	3b30      	subs	r3, #48	; 0x30
 8015e46:	2b09      	cmp	r3, #9
 8015e48:	d94d      	bls.n	8015ee6 <_svfiprintf_r+0x16e>
 8015e4a:	b1b8      	cbz	r0, 8015e7c <_svfiprintf_r+0x104>
 8015e4c:	e00f      	b.n	8015e6e <_svfiprintf_r+0xf6>
 8015e4e:	462f      	mov	r7, r5
 8015e50:	e7b8      	b.n	8015dc4 <_svfiprintf_r+0x4c>
 8015e52:	4a40      	ldr	r2, [pc, #256]	; (8015f54 <_svfiprintf_r+0x1dc>)
 8015e54:	1a80      	subs	r0, r0, r2
 8015e56:	fa0b f000 	lsl.w	r0, fp, r0
 8015e5a:	4318      	orrs	r0, r3
 8015e5c:	9004      	str	r0, [sp, #16]
 8015e5e:	463d      	mov	r5, r7
 8015e60:	e7d3      	b.n	8015e0a <_svfiprintf_r+0x92>
 8015e62:	9a03      	ldr	r2, [sp, #12]
 8015e64:	1d11      	adds	r1, r2, #4
 8015e66:	6812      	ldr	r2, [r2, #0]
 8015e68:	9103      	str	r1, [sp, #12]
 8015e6a:	2a00      	cmp	r2, #0
 8015e6c:	db01      	blt.n	8015e72 <_svfiprintf_r+0xfa>
 8015e6e:	9207      	str	r2, [sp, #28]
 8015e70:	e004      	b.n	8015e7c <_svfiprintf_r+0x104>
 8015e72:	4252      	negs	r2, r2
 8015e74:	f043 0302 	orr.w	r3, r3, #2
 8015e78:	9207      	str	r2, [sp, #28]
 8015e7a:	9304      	str	r3, [sp, #16]
 8015e7c:	783b      	ldrb	r3, [r7, #0]
 8015e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8015e80:	d10c      	bne.n	8015e9c <_svfiprintf_r+0x124>
 8015e82:	787b      	ldrb	r3, [r7, #1]
 8015e84:	2b2a      	cmp	r3, #42	; 0x2a
 8015e86:	d133      	bne.n	8015ef0 <_svfiprintf_r+0x178>
 8015e88:	9b03      	ldr	r3, [sp, #12]
 8015e8a:	1d1a      	adds	r2, r3, #4
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	9203      	str	r2, [sp, #12]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	bfb8      	it	lt
 8015e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e98:	3702      	adds	r7, #2
 8015e9a:	9305      	str	r3, [sp, #20]
 8015e9c:	4d2e      	ldr	r5, [pc, #184]	; (8015f58 <_svfiprintf_r+0x1e0>)
 8015e9e:	7839      	ldrb	r1, [r7, #0]
 8015ea0:	2203      	movs	r2, #3
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	f7ea f9ac 	bl	8000200 <memchr>
 8015ea8:	b138      	cbz	r0, 8015eba <_svfiprintf_r+0x142>
 8015eaa:	2340      	movs	r3, #64	; 0x40
 8015eac:	1b40      	subs	r0, r0, r5
 8015eae:	fa03 f000 	lsl.w	r0, r3, r0
 8015eb2:	9b04      	ldr	r3, [sp, #16]
 8015eb4:	4303      	orrs	r3, r0
 8015eb6:	3701      	adds	r7, #1
 8015eb8:	9304      	str	r3, [sp, #16]
 8015eba:	7839      	ldrb	r1, [r7, #0]
 8015ebc:	4827      	ldr	r0, [pc, #156]	; (8015f5c <_svfiprintf_r+0x1e4>)
 8015ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ec2:	2206      	movs	r2, #6
 8015ec4:	1c7e      	adds	r6, r7, #1
 8015ec6:	f7ea f99b 	bl	8000200 <memchr>
 8015eca:	2800      	cmp	r0, #0
 8015ecc:	d038      	beq.n	8015f40 <_svfiprintf_r+0x1c8>
 8015ece:	4b24      	ldr	r3, [pc, #144]	; (8015f60 <_svfiprintf_r+0x1e8>)
 8015ed0:	bb13      	cbnz	r3, 8015f18 <_svfiprintf_r+0x1a0>
 8015ed2:	9b03      	ldr	r3, [sp, #12]
 8015ed4:	3307      	adds	r3, #7
 8015ed6:	f023 0307 	bic.w	r3, r3, #7
 8015eda:	3308      	adds	r3, #8
 8015edc:	9303      	str	r3, [sp, #12]
 8015ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ee0:	444b      	add	r3, r9
 8015ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ee4:	e76d      	b.n	8015dc2 <_svfiprintf_r+0x4a>
 8015ee6:	fb05 3202 	mla	r2, r5, r2, r3
 8015eea:	2001      	movs	r0, #1
 8015eec:	460f      	mov	r7, r1
 8015eee:	e7a6      	b.n	8015e3e <_svfiprintf_r+0xc6>
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	3701      	adds	r7, #1
 8015ef4:	9305      	str	r3, [sp, #20]
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	250a      	movs	r5, #10
 8015efa:	4638      	mov	r0, r7
 8015efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f00:	3a30      	subs	r2, #48	; 0x30
 8015f02:	2a09      	cmp	r2, #9
 8015f04:	d903      	bls.n	8015f0e <_svfiprintf_r+0x196>
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d0c8      	beq.n	8015e9c <_svfiprintf_r+0x124>
 8015f0a:	9105      	str	r1, [sp, #20]
 8015f0c:	e7c6      	b.n	8015e9c <_svfiprintf_r+0x124>
 8015f0e:	fb05 2101 	mla	r1, r5, r1, r2
 8015f12:	2301      	movs	r3, #1
 8015f14:	4607      	mov	r7, r0
 8015f16:	e7f0      	b.n	8015efa <_svfiprintf_r+0x182>
 8015f18:	ab03      	add	r3, sp, #12
 8015f1a:	9300      	str	r3, [sp, #0]
 8015f1c:	4622      	mov	r2, r4
 8015f1e:	4b11      	ldr	r3, [pc, #68]	; (8015f64 <_svfiprintf_r+0x1ec>)
 8015f20:	a904      	add	r1, sp, #16
 8015f22:	4640      	mov	r0, r8
 8015f24:	f7fc f8cc 	bl	80120c0 <_printf_float>
 8015f28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015f2c:	4681      	mov	r9, r0
 8015f2e:	d1d6      	bne.n	8015ede <_svfiprintf_r+0x166>
 8015f30:	89a3      	ldrh	r3, [r4, #12]
 8015f32:	065b      	lsls	r3, r3, #25
 8015f34:	f53f af35 	bmi.w	8015da2 <_svfiprintf_r+0x2a>
 8015f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f3a:	b01d      	add	sp, #116	; 0x74
 8015f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f40:	ab03      	add	r3, sp, #12
 8015f42:	9300      	str	r3, [sp, #0]
 8015f44:	4622      	mov	r2, r4
 8015f46:	4b07      	ldr	r3, [pc, #28]	; (8015f64 <_svfiprintf_r+0x1ec>)
 8015f48:	a904      	add	r1, sp, #16
 8015f4a:	4640      	mov	r0, r8
 8015f4c:	f7fc fb6e 	bl	801262c <_printf_i>
 8015f50:	e7ea      	b.n	8015f28 <_svfiprintf_r+0x1b0>
 8015f52:	bf00      	nop
 8015f54:	080167ac 	.word	0x080167ac
 8015f58:	080167b2 	.word	0x080167b2
 8015f5c:	080167b6 	.word	0x080167b6
 8015f60:	080120c1 	.word	0x080120c1
 8015f64:	08015cc3 	.word	0x08015cc3

08015f68 <__sfputc_r>:
 8015f68:	6893      	ldr	r3, [r2, #8]
 8015f6a:	3b01      	subs	r3, #1
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	b410      	push	{r4}
 8015f70:	6093      	str	r3, [r2, #8]
 8015f72:	da08      	bge.n	8015f86 <__sfputc_r+0x1e>
 8015f74:	6994      	ldr	r4, [r2, #24]
 8015f76:	42a3      	cmp	r3, r4
 8015f78:	db01      	blt.n	8015f7e <__sfputc_r+0x16>
 8015f7a:	290a      	cmp	r1, #10
 8015f7c:	d103      	bne.n	8015f86 <__sfputc_r+0x1e>
 8015f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f82:	f7fd be5f 	b.w	8013c44 <__swbuf_r>
 8015f86:	6813      	ldr	r3, [r2, #0]
 8015f88:	1c58      	adds	r0, r3, #1
 8015f8a:	6010      	str	r0, [r2, #0]
 8015f8c:	7019      	strb	r1, [r3, #0]
 8015f8e:	4608      	mov	r0, r1
 8015f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f94:	4770      	bx	lr

08015f96 <__sfputs_r>:
 8015f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f98:	4606      	mov	r6, r0
 8015f9a:	460f      	mov	r7, r1
 8015f9c:	4614      	mov	r4, r2
 8015f9e:	18d5      	adds	r5, r2, r3
 8015fa0:	42ac      	cmp	r4, r5
 8015fa2:	d101      	bne.n	8015fa8 <__sfputs_r+0x12>
 8015fa4:	2000      	movs	r0, #0
 8015fa6:	e007      	b.n	8015fb8 <__sfputs_r+0x22>
 8015fa8:	463a      	mov	r2, r7
 8015faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fae:	4630      	mov	r0, r6
 8015fb0:	f7ff ffda 	bl	8015f68 <__sfputc_r>
 8015fb4:	1c43      	adds	r3, r0, #1
 8015fb6:	d1f3      	bne.n	8015fa0 <__sfputs_r+0xa>
 8015fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015fbc <_vfiprintf_r>:
 8015fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc0:	460c      	mov	r4, r1
 8015fc2:	b09d      	sub	sp, #116	; 0x74
 8015fc4:	4617      	mov	r7, r2
 8015fc6:	461d      	mov	r5, r3
 8015fc8:	4606      	mov	r6, r0
 8015fca:	b118      	cbz	r0, 8015fd4 <_vfiprintf_r+0x18>
 8015fcc:	6983      	ldr	r3, [r0, #24]
 8015fce:	b90b      	cbnz	r3, 8015fd4 <_vfiprintf_r+0x18>
 8015fd0:	f7fe fe2e 	bl	8014c30 <__sinit>
 8015fd4:	4b7c      	ldr	r3, [pc, #496]	; (80161c8 <_vfiprintf_r+0x20c>)
 8015fd6:	429c      	cmp	r4, r3
 8015fd8:	d158      	bne.n	801608c <_vfiprintf_r+0xd0>
 8015fda:	6874      	ldr	r4, [r6, #4]
 8015fdc:	89a3      	ldrh	r3, [r4, #12]
 8015fde:	0718      	lsls	r0, r3, #28
 8015fe0:	d55e      	bpl.n	80160a0 <_vfiprintf_r+0xe4>
 8015fe2:	6923      	ldr	r3, [r4, #16]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d05b      	beq.n	80160a0 <_vfiprintf_r+0xe4>
 8015fe8:	2300      	movs	r3, #0
 8015fea:	9309      	str	r3, [sp, #36]	; 0x24
 8015fec:	2320      	movs	r3, #32
 8015fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ff2:	2330      	movs	r3, #48	; 0x30
 8015ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ff8:	9503      	str	r5, [sp, #12]
 8015ffa:	f04f 0b01 	mov.w	fp, #1
 8015ffe:	46b8      	mov	r8, r7
 8016000:	4645      	mov	r5, r8
 8016002:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016006:	b10b      	cbz	r3, 801600c <_vfiprintf_r+0x50>
 8016008:	2b25      	cmp	r3, #37	; 0x25
 801600a:	d154      	bne.n	80160b6 <_vfiprintf_r+0xfa>
 801600c:	ebb8 0a07 	subs.w	sl, r8, r7
 8016010:	d00b      	beq.n	801602a <_vfiprintf_r+0x6e>
 8016012:	4653      	mov	r3, sl
 8016014:	463a      	mov	r2, r7
 8016016:	4621      	mov	r1, r4
 8016018:	4630      	mov	r0, r6
 801601a:	f7ff ffbc 	bl	8015f96 <__sfputs_r>
 801601e:	3001      	adds	r0, #1
 8016020:	f000 80c2 	beq.w	80161a8 <_vfiprintf_r+0x1ec>
 8016024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016026:	4453      	add	r3, sl
 8016028:	9309      	str	r3, [sp, #36]	; 0x24
 801602a:	f898 3000 	ldrb.w	r3, [r8]
 801602e:	2b00      	cmp	r3, #0
 8016030:	f000 80ba 	beq.w	80161a8 <_vfiprintf_r+0x1ec>
 8016034:	2300      	movs	r3, #0
 8016036:	f04f 32ff 	mov.w	r2, #4294967295
 801603a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801603e:	9304      	str	r3, [sp, #16]
 8016040:	9307      	str	r3, [sp, #28]
 8016042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016046:	931a      	str	r3, [sp, #104]	; 0x68
 8016048:	46a8      	mov	r8, r5
 801604a:	2205      	movs	r2, #5
 801604c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016050:	485e      	ldr	r0, [pc, #376]	; (80161cc <_vfiprintf_r+0x210>)
 8016052:	f7ea f8d5 	bl	8000200 <memchr>
 8016056:	9b04      	ldr	r3, [sp, #16]
 8016058:	bb78      	cbnz	r0, 80160ba <_vfiprintf_r+0xfe>
 801605a:	06d9      	lsls	r1, r3, #27
 801605c:	bf44      	itt	mi
 801605e:	2220      	movmi	r2, #32
 8016060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016064:	071a      	lsls	r2, r3, #28
 8016066:	bf44      	itt	mi
 8016068:	222b      	movmi	r2, #43	; 0x2b
 801606a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801606e:	782a      	ldrb	r2, [r5, #0]
 8016070:	2a2a      	cmp	r2, #42	; 0x2a
 8016072:	d02a      	beq.n	80160ca <_vfiprintf_r+0x10e>
 8016074:	9a07      	ldr	r2, [sp, #28]
 8016076:	46a8      	mov	r8, r5
 8016078:	2000      	movs	r0, #0
 801607a:	250a      	movs	r5, #10
 801607c:	4641      	mov	r1, r8
 801607e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016082:	3b30      	subs	r3, #48	; 0x30
 8016084:	2b09      	cmp	r3, #9
 8016086:	d969      	bls.n	801615c <_vfiprintf_r+0x1a0>
 8016088:	b360      	cbz	r0, 80160e4 <_vfiprintf_r+0x128>
 801608a:	e024      	b.n	80160d6 <_vfiprintf_r+0x11a>
 801608c:	4b50      	ldr	r3, [pc, #320]	; (80161d0 <_vfiprintf_r+0x214>)
 801608e:	429c      	cmp	r4, r3
 8016090:	d101      	bne.n	8016096 <_vfiprintf_r+0xda>
 8016092:	68b4      	ldr	r4, [r6, #8]
 8016094:	e7a2      	b.n	8015fdc <_vfiprintf_r+0x20>
 8016096:	4b4f      	ldr	r3, [pc, #316]	; (80161d4 <_vfiprintf_r+0x218>)
 8016098:	429c      	cmp	r4, r3
 801609a:	bf08      	it	eq
 801609c:	68f4      	ldreq	r4, [r6, #12]
 801609e:	e79d      	b.n	8015fdc <_vfiprintf_r+0x20>
 80160a0:	4621      	mov	r1, r4
 80160a2:	4630      	mov	r0, r6
 80160a4:	f7fd fe20 	bl	8013ce8 <__swsetup_r>
 80160a8:	2800      	cmp	r0, #0
 80160aa:	d09d      	beq.n	8015fe8 <_vfiprintf_r+0x2c>
 80160ac:	f04f 30ff 	mov.w	r0, #4294967295
 80160b0:	b01d      	add	sp, #116	; 0x74
 80160b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b6:	46a8      	mov	r8, r5
 80160b8:	e7a2      	b.n	8016000 <_vfiprintf_r+0x44>
 80160ba:	4a44      	ldr	r2, [pc, #272]	; (80161cc <_vfiprintf_r+0x210>)
 80160bc:	1a80      	subs	r0, r0, r2
 80160be:	fa0b f000 	lsl.w	r0, fp, r0
 80160c2:	4318      	orrs	r0, r3
 80160c4:	9004      	str	r0, [sp, #16]
 80160c6:	4645      	mov	r5, r8
 80160c8:	e7be      	b.n	8016048 <_vfiprintf_r+0x8c>
 80160ca:	9a03      	ldr	r2, [sp, #12]
 80160cc:	1d11      	adds	r1, r2, #4
 80160ce:	6812      	ldr	r2, [r2, #0]
 80160d0:	9103      	str	r1, [sp, #12]
 80160d2:	2a00      	cmp	r2, #0
 80160d4:	db01      	blt.n	80160da <_vfiprintf_r+0x11e>
 80160d6:	9207      	str	r2, [sp, #28]
 80160d8:	e004      	b.n	80160e4 <_vfiprintf_r+0x128>
 80160da:	4252      	negs	r2, r2
 80160dc:	f043 0302 	orr.w	r3, r3, #2
 80160e0:	9207      	str	r2, [sp, #28]
 80160e2:	9304      	str	r3, [sp, #16]
 80160e4:	f898 3000 	ldrb.w	r3, [r8]
 80160e8:	2b2e      	cmp	r3, #46	; 0x2e
 80160ea:	d10e      	bne.n	801610a <_vfiprintf_r+0x14e>
 80160ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80160f0:	2b2a      	cmp	r3, #42	; 0x2a
 80160f2:	d138      	bne.n	8016166 <_vfiprintf_r+0x1aa>
 80160f4:	9b03      	ldr	r3, [sp, #12]
 80160f6:	1d1a      	adds	r2, r3, #4
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	9203      	str	r2, [sp, #12]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	bfb8      	it	lt
 8016100:	f04f 33ff 	movlt.w	r3, #4294967295
 8016104:	f108 0802 	add.w	r8, r8, #2
 8016108:	9305      	str	r3, [sp, #20]
 801610a:	4d33      	ldr	r5, [pc, #204]	; (80161d8 <_vfiprintf_r+0x21c>)
 801610c:	f898 1000 	ldrb.w	r1, [r8]
 8016110:	2203      	movs	r2, #3
 8016112:	4628      	mov	r0, r5
 8016114:	f7ea f874 	bl	8000200 <memchr>
 8016118:	b140      	cbz	r0, 801612c <_vfiprintf_r+0x170>
 801611a:	2340      	movs	r3, #64	; 0x40
 801611c:	1b40      	subs	r0, r0, r5
 801611e:	fa03 f000 	lsl.w	r0, r3, r0
 8016122:	9b04      	ldr	r3, [sp, #16]
 8016124:	4303      	orrs	r3, r0
 8016126:	f108 0801 	add.w	r8, r8, #1
 801612a:	9304      	str	r3, [sp, #16]
 801612c:	f898 1000 	ldrb.w	r1, [r8]
 8016130:	482a      	ldr	r0, [pc, #168]	; (80161dc <_vfiprintf_r+0x220>)
 8016132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016136:	2206      	movs	r2, #6
 8016138:	f108 0701 	add.w	r7, r8, #1
 801613c:	f7ea f860 	bl	8000200 <memchr>
 8016140:	2800      	cmp	r0, #0
 8016142:	d037      	beq.n	80161b4 <_vfiprintf_r+0x1f8>
 8016144:	4b26      	ldr	r3, [pc, #152]	; (80161e0 <_vfiprintf_r+0x224>)
 8016146:	bb1b      	cbnz	r3, 8016190 <_vfiprintf_r+0x1d4>
 8016148:	9b03      	ldr	r3, [sp, #12]
 801614a:	3307      	adds	r3, #7
 801614c:	f023 0307 	bic.w	r3, r3, #7
 8016150:	3308      	adds	r3, #8
 8016152:	9303      	str	r3, [sp, #12]
 8016154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016156:	444b      	add	r3, r9
 8016158:	9309      	str	r3, [sp, #36]	; 0x24
 801615a:	e750      	b.n	8015ffe <_vfiprintf_r+0x42>
 801615c:	fb05 3202 	mla	r2, r5, r2, r3
 8016160:	2001      	movs	r0, #1
 8016162:	4688      	mov	r8, r1
 8016164:	e78a      	b.n	801607c <_vfiprintf_r+0xc0>
 8016166:	2300      	movs	r3, #0
 8016168:	f108 0801 	add.w	r8, r8, #1
 801616c:	9305      	str	r3, [sp, #20]
 801616e:	4619      	mov	r1, r3
 8016170:	250a      	movs	r5, #10
 8016172:	4640      	mov	r0, r8
 8016174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016178:	3a30      	subs	r2, #48	; 0x30
 801617a:	2a09      	cmp	r2, #9
 801617c:	d903      	bls.n	8016186 <_vfiprintf_r+0x1ca>
 801617e:	2b00      	cmp	r3, #0
 8016180:	d0c3      	beq.n	801610a <_vfiprintf_r+0x14e>
 8016182:	9105      	str	r1, [sp, #20]
 8016184:	e7c1      	b.n	801610a <_vfiprintf_r+0x14e>
 8016186:	fb05 2101 	mla	r1, r5, r1, r2
 801618a:	2301      	movs	r3, #1
 801618c:	4680      	mov	r8, r0
 801618e:	e7f0      	b.n	8016172 <_vfiprintf_r+0x1b6>
 8016190:	ab03      	add	r3, sp, #12
 8016192:	9300      	str	r3, [sp, #0]
 8016194:	4622      	mov	r2, r4
 8016196:	4b13      	ldr	r3, [pc, #76]	; (80161e4 <_vfiprintf_r+0x228>)
 8016198:	a904      	add	r1, sp, #16
 801619a:	4630      	mov	r0, r6
 801619c:	f7fb ff90 	bl	80120c0 <_printf_float>
 80161a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80161a4:	4681      	mov	r9, r0
 80161a6:	d1d5      	bne.n	8016154 <_vfiprintf_r+0x198>
 80161a8:	89a3      	ldrh	r3, [r4, #12]
 80161aa:	065b      	lsls	r3, r3, #25
 80161ac:	f53f af7e 	bmi.w	80160ac <_vfiprintf_r+0xf0>
 80161b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161b2:	e77d      	b.n	80160b0 <_vfiprintf_r+0xf4>
 80161b4:	ab03      	add	r3, sp, #12
 80161b6:	9300      	str	r3, [sp, #0]
 80161b8:	4622      	mov	r2, r4
 80161ba:	4b0a      	ldr	r3, [pc, #40]	; (80161e4 <_vfiprintf_r+0x228>)
 80161bc:	a904      	add	r1, sp, #16
 80161be:	4630      	mov	r0, r6
 80161c0:	f7fc fa34 	bl	801262c <_printf_i>
 80161c4:	e7ec      	b.n	80161a0 <_vfiprintf_r+0x1e4>
 80161c6:	bf00      	nop
 80161c8:	08016660 	.word	0x08016660
 80161cc:	080167ac 	.word	0x080167ac
 80161d0:	08016680 	.word	0x08016680
 80161d4:	08016640 	.word	0x08016640
 80161d8:	080167b2 	.word	0x080167b2
 80161dc:	080167b6 	.word	0x080167b6
 80161e0:	080120c1 	.word	0x080120c1
 80161e4:	08015f97 	.word	0x08015f97

080161e8 <__sread>:
 80161e8:	b510      	push	{r4, lr}
 80161ea:	460c      	mov	r4, r1
 80161ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161f0:	f000 f8f2 	bl	80163d8 <_read_r>
 80161f4:	2800      	cmp	r0, #0
 80161f6:	bfab      	itete	ge
 80161f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80161fa:	89a3      	ldrhlt	r3, [r4, #12]
 80161fc:	181b      	addge	r3, r3, r0
 80161fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016202:	bfac      	ite	ge
 8016204:	6563      	strge	r3, [r4, #84]	; 0x54
 8016206:	81a3      	strhlt	r3, [r4, #12]
 8016208:	bd10      	pop	{r4, pc}

0801620a <__swrite>:
 801620a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801620e:	461f      	mov	r7, r3
 8016210:	898b      	ldrh	r3, [r1, #12]
 8016212:	05db      	lsls	r3, r3, #23
 8016214:	4605      	mov	r5, r0
 8016216:	460c      	mov	r4, r1
 8016218:	4616      	mov	r6, r2
 801621a:	d505      	bpl.n	8016228 <__swrite+0x1e>
 801621c:	2302      	movs	r3, #2
 801621e:	2200      	movs	r2, #0
 8016220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016224:	f000 f886 	bl	8016334 <_lseek_r>
 8016228:	89a3      	ldrh	r3, [r4, #12]
 801622a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801622e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016232:	81a3      	strh	r3, [r4, #12]
 8016234:	4632      	mov	r2, r6
 8016236:	463b      	mov	r3, r7
 8016238:	4628      	mov	r0, r5
 801623a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801623e:	f000 b835 	b.w	80162ac <_write_r>

08016242 <__sseek>:
 8016242:	b510      	push	{r4, lr}
 8016244:	460c      	mov	r4, r1
 8016246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801624a:	f000 f873 	bl	8016334 <_lseek_r>
 801624e:	1c43      	adds	r3, r0, #1
 8016250:	89a3      	ldrh	r3, [r4, #12]
 8016252:	bf15      	itete	ne
 8016254:	6560      	strne	r0, [r4, #84]	; 0x54
 8016256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801625a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801625e:	81a3      	strheq	r3, [r4, #12]
 8016260:	bf18      	it	ne
 8016262:	81a3      	strhne	r3, [r4, #12]
 8016264:	bd10      	pop	{r4, pc}

08016266 <__sclose>:
 8016266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801626a:	f000 b831 	b.w	80162d0 <_close_r>

0801626e <strncmp>:
 801626e:	b510      	push	{r4, lr}
 8016270:	b16a      	cbz	r2, 801628e <strncmp+0x20>
 8016272:	3901      	subs	r1, #1
 8016274:	1884      	adds	r4, r0, r2
 8016276:	f810 3b01 	ldrb.w	r3, [r0], #1
 801627a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801627e:	4293      	cmp	r3, r2
 8016280:	d103      	bne.n	801628a <strncmp+0x1c>
 8016282:	42a0      	cmp	r0, r4
 8016284:	d001      	beq.n	801628a <strncmp+0x1c>
 8016286:	2b00      	cmp	r3, #0
 8016288:	d1f5      	bne.n	8016276 <strncmp+0x8>
 801628a:	1a98      	subs	r0, r3, r2
 801628c:	bd10      	pop	{r4, pc}
 801628e:	4610      	mov	r0, r2
 8016290:	e7fc      	b.n	801628c <strncmp+0x1e>

08016292 <__ascii_wctomb>:
 8016292:	b149      	cbz	r1, 80162a8 <__ascii_wctomb+0x16>
 8016294:	2aff      	cmp	r2, #255	; 0xff
 8016296:	bf85      	ittet	hi
 8016298:	238a      	movhi	r3, #138	; 0x8a
 801629a:	6003      	strhi	r3, [r0, #0]
 801629c:	700a      	strbls	r2, [r1, #0]
 801629e:	f04f 30ff 	movhi.w	r0, #4294967295
 80162a2:	bf98      	it	ls
 80162a4:	2001      	movls	r0, #1
 80162a6:	4770      	bx	lr
 80162a8:	4608      	mov	r0, r1
 80162aa:	4770      	bx	lr

080162ac <_write_r>:
 80162ac:	b538      	push	{r3, r4, r5, lr}
 80162ae:	4c07      	ldr	r4, [pc, #28]	; (80162cc <_write_r+0x20>)
 80162b0:	4605      	mov	r5, r0
 80162b2:	4608      	mov	r0, r1
 80162b4:	4611      	mov	r1, r2
 80162b6:	2200      	movs	r2, #0
 80162b8:	6022      	str	r2, [r4, #0]
 80162ba:	461a      	mov	r2, r3
 80162bc:	f7f7 faf8 	bl	800d8b0 <_write>
 80162c0:	1c43      	adds	r3, r0, #1
 80162c2:	d102      	bne.n	80162ca <_write_r+0x1e>
 80162c4:	6823      	ldr	r3, [r4, #0]
 80162c6:	b103      	cbz	r3, 80162ca <_write_r+0x1e>
 80162c8:	602b      	str	r3, [r5, #0]
 80162ca:	bd38      	pop	{r3, r4, r5, pc}
 80162cc:	20001cbc 	.word	0x20001cbc

080162d0 <_close_r>:
 80162d0:	b538      	push	{r3, r4, r5, lr}
 80162d2:	4c06      	ldr	r4, [pc, #24]	; (80162ec <_close_r+0x1c>)
 80162d4:	2300      	movs	r3, #0
 80162d6:	4605      	mov	r5, r0
 80162d8:	4608      	mov	r0, r1
 80162da:	6023      	str	r3, [r4, #0]
 80162dc:	f7eb fb5b 	bl	8001996 <_close>
 80162e0:	1c43      	adds	r3, r0, #1
 80162e2:	d102      	bne.n	80162ea <_close_r+0x1a>
 80162e4:	6823      	ldr	r3, [r4, #0]
 80162e6:	b103      	cbz	r3, 80162ea <_close_r+0x1a>
 80162e8:	602b      	str	r3, [r5, #0]
 80162ea:	bd38      	pop	{r3, r4, r5, pc}
 80162ec:	20001cbc 	.word	0x20001cbc

080162f0 <_fstat_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	4c07      	ldr	r4, [pc, #28]	; (8016310 <_fstat_r+0x20>)
 80162f4:	2300      	movs	r3, #0
 80162f6:	4605      	mov	r5, r0
 80162f8:	4608      	mov	r0, r1
 80162fa:	4611      	mov	r1, r2
 80162fc:	6023      	str	r3, [r4, #0]
 80162fe:	f7eb fb56 	bl	80019ae <_fstat>
 8016302:	1c43      	adds	r3, r0, #1
 8016304:	d102      	bne.n	801630c <_fstat_r+0x1c>
 8016306:	6823      	ldr	r3, [r4, #0]
 8016308:	b103      	cbz	r3, 801630c <_fstat_r+0x1c>
 801630a:	602b      	str	r3, [r5, #0]
 801630c:	bd38      	pop	{r3, r4, r5, pc}
 801630e:	bf00      	nop
 8016310:	20001cbc 	.word	0x20001cbc

08016314 <_isatty_r>:
 8016314:	b538      	push	{r3, r4, r5, lr}
 8016316:	4c06      	ldr	r4, [pc, #24]	; (8016330 <_isatty_r+0x1c>)
 8016318:	2300      	movs	r3, #0
 801631a:	4605      	mov	r5, r0
 801631c:	4608      	mov	r0, r1
 801631e:	6023      	str	r3, [r4, #0]
 8016320:	f7eb fb55 	bl	80019ce <_isatty>
 8016324:	1c43      	adds	r3, r0, #1
 8016326:	d102      	bne.n	801632e <_isatty_r+0x1a>
 8016328:	6823      	ldr	r3, [r4, #0]
 801632a:	b103      	cbz	r3, 801632e <_isatty_r+0x1a>
 801632c:	602b      	str	r3, [r5, #0]
 801632e:	bd38      	pop	{r3, r4, r5, pc}
 8016330:	20001cbc 	.word	0x20001cbc

08016334 <_lseek_r>:
 8016334:	b538      	push	{r3, r4, r5, lr}
 8016336:	4c07      	ldr	r4, [pc, #28]	; (8016354 <_lseek_r+0x20>)
 8016338:	4605      	mov	r5, r0
 801633a:	4608      	mov	r0, r1
 801633c:	4611      	mov	r1, r2
 801633e:	2200      	movs	r2, #0
 8016340:	6022      	str	r2, [r4, #0]
 8016342:	461a      	mov	r2, r3
 8016344:	f7eb fb4e 	bl	80019e4 <_lseek>
 8016348:	1c43      	adds	r3, r0, #1
 801634a:	d102      	bne.n	8016352 <_lseek_r+0x1e>
 801634c:	6823      	ldr	r3, [r4, #0]
 801634e:	b103      	cbz	r3, 8016352 <_lseek_r+0x1e>
 8016350:	602b      	str	r3, [r5, #0]
 8016352:	bd38      	pop	{r3, r4, r5, pc}
 8016354:	20001cbc 	.word	0x20001cbc

08016358 <memmove>:
 8016358:	4288      	cmp	r0, r1
 801635a:	b510      	push	{r4, lr}
 801635c:	eb01 0302 	add.w	r3, r1, r2
 8016360:	d807      	bhi.n	8016372 <memmove+0x1a>
 8016362:	1e42      	subs	r2, r0, #1
 8016364:	4299      	cmp	r1, r3
 8016366:	d00a      	beq.n	801637e <memmove+0x26>
 8016368:	f811 4b01 	ldrb.w	r4, [r1], #1
 801636c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016370:	e7f8      	b.n	8016364 <memmove+0xc>
 8016372:	4283      	cmp	r3, r0
 8016374:	d9f5      	bls.n	8016362 <memmove+0xa>
 8016376:	1881      	adds	r1, r0, r2
 8016378:	1ad2      	subs	r2, r2, r3
 801637a:	42d3      	cmn	r3, r2
 801637c:	d100      	bne.n	8016380 <memmove+0x28>
 801637e:	bd10      	pop	{r4, pc}
 8016380:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016384:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016388:	e7f7      	b.n	801637a <memmove+0x22>

0801638a <_realloc_r>:
 801638a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801638c:	4607      	mov	r7, r0
 801638e:	4614      	mov	r4, r2
 8016390:	460e      	mov	r6, r1
 8016392:	b921      	cbnz	r1, 801639e <_realloc_r+0x14>
 8016394:	4611      	mov	r1, r2
 8016396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801639a:	f7fb bda3 	b.w	8011ee4 <_malloc_r>
 801639e:	b922      	cbnz	r2, 80163aa <_realloc_r+0x20>
 80163a0:	f7fb fd52 	bl	8011e48 <_free_r>
 80163a4:	4625      	mov	r5, r4
 80163a6:	4628      	mov	r0, r5
 80163a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163aa:	f000 f827 	bl	80163fc <_malloc_usable_size_r>
 80163ae:	42a0      	cmp	r0, r4
 80163b0:	d20f      	bcs.n	80163d2 <_realloc_r+0x48>
 80163b2:	4621      	mov	r1, r4
 80163b4:	4638      	mov	r0, r7
 80163b6:	f7fb fd95 	bl	8011ee4 <_malloc_r>
 80163ba:	4605      	mov	r5, r0
 80163bc:	2800      	cmp	r0, #0
 80163be:	d0f2      	beq.n	80163a6 <_realloc_r+0x1c>
 80163c0:	4631      	mov	r1, r6
 80163c2:	4622      	mov	r2, r4
 80163c4:	f7fb fd2c 	bl	8011e20 <memcpy>
 80163c8:	4631      	mov	r1, r6
 80163ca:	4638      	mov	r0, r7
 80163cc:	f7fb fd3c 	bl	8011e48 <_free_r>
 80163d0:	e7e9      	b.n	80163a6 <_realloc_r+0x1c>
 80163d2:	4635      	mov	r5, r6
 80163d4:	e7e7      	b.n	80163a6 <_realloc_r+0x1c>
	...

080163d8 <_read_r>:
 80163d8:	b538      	push	{r3, r4, r5, lr}
 80163da:	4c07      	ldr	r4, [pc, #28]	; (80163f8 <_read_r+0x20>)
 80163dc:	4605      	mov	r5, r0
 80163de:	4608      	mov	r0, r1
 80163e0:	4611      	mov	r1, r2
 80163e2:	2200      	movs	r2, #0
 80163e4:	6022      	str	r2, [r4, #0]
 80163e6:	461a      	mov	r2, r3
 80163e8:	f7eb fab8 	bl	800195c <_read>
 80163ec:	1c43      	adds	r3, r0, #1
 80163ee:	d102      	bne.n	80163f6 <_read_r+0x1e>
 80163f0:	6823      	ldr	r3, [r4, #0]
 80163f2:	b103      	cbz	r3, 80163f6 <_read_r+0x1e>
 80163f4:	602b      	str	r3, [r5, #0]
 80163f6:	bd38      	pop	{r3, r4, r5, pc}
 80163f8:	20001cbc 	.word	0x20001cbc

080163fc <_malloc_usable_size_r>:
 80163fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016400:	1f18      	subs	r0, r3, #4
 8016402:	2b00      	cmp	r3, #0
 8016404:	bfbc      	itt	lt
 8016406:	580b      	ldrlt	r3, [r1, r0]
 8016408:	18c0      	addlt	r0, r0, r3
 801640a:	4770      	bx	lr

0801640c <_init>:
 801640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801640e:	bf00      	nop
 8016410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016412:	bc08      	pop	{r3}
 8016414:	469e      	mov	lr, r3
 8016416:	4770      	bx	lr

08016418 <_fini>:
 8016418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801641a:	bf00      	nop
 801641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801641e:	bc08      	pop	{r3}
 8016420:	469e      	mov	lr, r3
 8016422:	4770      	bx	lr
