
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b808  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800b9b8  0800b9b8  0001b9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce0  0800bce0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bce0  0800bce0  0001bce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce8  0800bce8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bce8  0800bce8  0001bce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcf0  0800bcf0  0001bcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bcf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  200001dc  0800bed0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800bed0  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f968  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003eca  00000000  00000000  0003fb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001658  00000000  00000000  00043a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00045098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bf35  00000000  00000000  00046548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014097  00000000  00000000  0007247d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecfc8  00000000  00000000  00086514  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001734dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf8  00000000  00000000  00173558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b9a0 	.word	0x0800b9a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800b9a0 	.word	0x0800b9a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <_ZN6I2CdevC1EP19__I2C_HandleTypeDef>:
*/

#include "I2Cdev.h"
using namespace std;

I2Cdev::I2Cdev(I2C_HandleTypeDef* hi2c)
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
{
	I2Cdev_hi2c = hi2c;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	601a      	str	r2, [r3, #0]
	//I2Cdev::readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;
}
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_ZN6I2Cdev8readByteEhhPht>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af02      	add	r7, sp, #8
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	72fb      	strb	r3, [r7, #11]
 8000f94:	4613      	mov	r3, r2
 8000f96:	72bb      	strb	r3, [r7, #10]
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8000f98:	7aba      	ldrb	r2, [r7, #10]
 8000f9a:	7af9      	ldrb	r1, [r7, #11]
 8000f9c:	8b3b      	ldrh	r3, [r7, #24]
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f805 	bl	8000fb6 <_ZN6I2Cdev9readBytesEhhhPht>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af02      	add	r7, sp, #8
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70bb      	strb	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8000fd0:	8bbb      	ldrh	r3, [r7, #28]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <_ZN6I2Cdev9readBytesEhhhPht+0x24>
 8000fd6:	8bbb      	ldrh	r3, [r7, #28]
 8000fd8:	e001      	b.n	8000fde <_ZN6I2Cdev9readBytesEhhhPht+0x28>
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b299      	uxth	r1, r3
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	1cba      	adds	r2, r7, #2
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f003 f818 	bl	8004028 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b299      	uxth	r1, r3
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	b29a      	uxth	r2, r3
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	f003 f908 	bl	8004224 <HAL_I2C_Master_Receive>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <_ZN6I2Cdev9readBytesEhhhPht+0x72>
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	e000      	b.n	800102a <_ZN6I2Cdev9readBytesEhhhPht+0x74>
    return -1;
 8001028:	23ff      	movs	r3, #255	; 0xff
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af02      	add	r7, sp, #8
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	4608      	mov	r0, r1
 800103c:	4611      	mov	r1, r2
 800103e:	461a      	mov	r2, r3
 8001040:	4603      	mov	r3, r0
 8001042:	70fb      	strb	r3, [r7, #3]
 8001044:	460b      	mov	r3, r1
 8001046:	70bb      	strb	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
    uint8_t b;
    readByte(devAddr, regAddr, &b, I2CDEV_DEFAULT_READ_TIMEOUT);
 800104c:	f107 000f 	add.w	r0, r7, #15
 8001050:	78ba      	ldrb	r2, [r7, #2]
 8001052:	78f9      	ldrb	r1, [r7, #3]
 8001054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4603      	mov	r3, r0
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff92 	bl	8000f86 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001062:	7e3b      	ldrb	r3, [r7, #24]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00a      	beq.n	800107e <_ZN6I2Cdev8writeBitEhhhh+0x4c>
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2201      	movs	r2, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	b25a      	sxtb	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	e00b      	b.n	8001096 <_ZN6I2Cdev8writeBitEhhhh+0x64>
 800107e:	787b      	ldrb	r3, [r7, #1]
 8001080:	2201      	movs	r2, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	b25b      	sxtb	r3, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	b25a      	sxtb	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	4013      	ands	r3, r2
 8001092:	b25b      	sxtb	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	73fb      	strb	r3, [r7, #15]
    return writeByte(devAddr, regAddr, b);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	78ba      	ldrb	r2, [r7, #2]
 800109c:	78f9      	ldrb	r1, [r7, #3]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f859 	bl	8001156 <_ZN6I2Cdev9writeByteEhhh>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af02      	add	r7, sp, #8
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	4608      	mov	r0, r1
 80010b8:	4611      	mov	r1, r2
 80010ba:	461a      	mov	r2, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	70fb      	strb	r3, [r7, #3]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70bb      	strb	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b, 100) != 0)
 80010c8:	f107 000f 	add.w	r0, r7, #15
 80010cc:	78ba      	ldrb	r2, [r7, #2]
 80010ce:	78f9      	ldrb	r1, [r7, #3]
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	4603      	mov	r3, r0
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff55 	bl	8000f86 <_ZN6I2Cdev8readByteEhhPht>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02f      	beq.n	800114c <_ZN6I2Cdev9writeBitsEhhhhh+0x9e>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80010ec:	7e3b      	ldrb	r3, [r7, #24]
 80010ee:	2201      	movs	r2, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	7879      	ldrb	r1, [r7, #1]
 80010f8:	7e3b      	ldrb	r3, [r7, #24]
 80010fa:	1acb      	subs	r3, r1, r3
 80010fc:	3301      	adds	r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	73bb      	strb	r3, [r7, #14]
        data <<= (bitStart - length + 1); // shift data into correct position
 8001106:	7f3a      	ldrb	r2, [r7, #28]
 8001108:	7879      	ldrb	r1, [r7, #1]
 800110a:	7e3b      	ldrb	r3, [r7, #24]
 800110c:	1acb      	subs	r3, r1, r3
 800110e:	3301      	adds	r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	773b      	strb	r3, [r7, #28]
        data &= mask; // zero all non-important bits in data
 8001116:	7bba      	ldrb	r2, [r7, #14]
 8001118:	7f3b      	ldrb	r3, [r7, #28]
 800111a:	4013      	ands	r3, r2
 800111c:	773b      	strb	r3, [r7, #28]
        b &= ~(mask); // zero all important bits in existing byte
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	b25a      	sxtb	r2, r3
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	4013      	ands	r3, r2
 800112c:	b25b      	sxtb	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
        b |= data; // combine data with existing byte
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	7f3b      	ldrb	r3, [r7, #28]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
        return writeByte(devAddr, regAddr, b);
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	78ba      	ldrb	r2, [r7, #2]
 8001140:	78f9      	ldrb	r1, [r7, #3]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f807 	bl	8001156 <_ZN6I2Cdev9writeByteEhhh>
 8001148:	4603      	mov	r3, r0
 800114a:	e000      	b.n	800114e <_ZN6I2Cdev9writeBitsEhhhhh+0xa0>
    }
    else
    {
        return 0;
 800114c:	2300      	movs	r3, #0
    }
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_ZN6I2Cdev9writeByteEhhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af02      	add	r7, sp, #8
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	4608      	mov	r0, r1
 8001160:	4611      	mov	r1, r2
 8001162:	461a      	mov	r2, r3
 8001164:	4603      	mov	r3, r0
 8001166:	70fb      	strb	r3, [r7, #3]
 8001168:	460b      	mov	r3, r1
 800116a:	70bb      	strb	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
    return writeBytes(devAddr, regAddr, 1, &data);
 8001170:	78ba      	ldrb	r2, [r7, #2]
 8001172:	78f9      	ldrb	r1, [r7, #3]
 8001174:	1c7b      	adds	r3, r7, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f805 	bl	800118a <_ZN6I2Cdev10writeBytesEhhhPh>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t Size, uint8_t* pData)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af02      	add	r7, sp, #8
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	4608      	mov	r0, r1
 8001194:	4611      	mov	r1, r2
 8001196:	461a      	mov	r2, r3
 8001198:	4603      	mov	r3, r0
 800119a:	70fb      	strb	r3, [r7, #3]
 800119c:	460b      	mov	r3, r1
 800119e:	70bb      	strb	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
    // Creating dynamic array to store regAddr + data in one buffer
    uint8_t * dynBuffer;
    dynBuffer = (uint8_t *) malloc(sizeof(uint8_t) * (Size+1));
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 ffad 	bl	8009108 <malloc>
 80011ae:	4603      	mov	r3, r0
 80011b0:	60fb      	str	r3, [r7, #12]
    dynBuffer[0] = regAddr;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	78ba      	ldrb	r2, [r7, #2]
 80011b6:	701a      	strb	r2, [r3, #0]

    // copy array
    memcpy(dynBuffer+1, pData, sizeof(uint8_t) * Size);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	787a      	ldrb	r2, [r7, #1]
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 ffb1 	bl	8009128 <memcpy>

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, dynBuffer, Size+1, 1000);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b299      	uxth	r1, r3
 80011d2:	787b      	ldrb	r3, [r7, #1]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3301      	adds	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	f002 ff20 	bl	8004028 <HAL_I2C_Master_Transmit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	72fb      	strb	r3, [r7, #11]
    free(dynBuffer);
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f007 ff93 	bl	8009118 <free>
    return status == HAL_OK;
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b29b      	uxth	r3, r3
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001212:	ed97 0a01 	vldr	s0, [r7, #4]
 8001216:	f007 fe1b 	bl	8008e50 <atanf>
 800121a:	eef0 7a40 	vmov.f32	s15, s0
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001232:	ed97 0a01 	vldr	s0, [r7, #4]
 8001236:	f007 fee7 	bl	8009008 <sqrtf>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZN7MPU605011getMotionITEv>:
    MPU6050(I2C_HandleTypeDef *I2Cx, uint8_t address=MPU6050_DEFAULT_ADDRESS);

    void initialize();
    bool testConnection();

    inline void getMotionIT(){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
    	HAL_I2C_Mem_Read_IT(i2c.I2Cdev_hi2c, MPU6050_ADDR, MPU6050_RA_ACCEL_XOUT_H, 1, buffer, 14);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3349      	adds	r3, #73	; 0x49
 8001258:	220e      	movs	r2, #14
 800125a:	9201      	str	r2, [sp, #4]
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	223b      	movs	r2, #59	; 0x3b
 8001262:	21d0      	movs	r1, #208	; 0xd0
 8001264:	f003 fa04 	bl	8004670 <HAL_I2C_Mem_Read_IT>
    }
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZN7MPU605014updateMotionITEv>:
    inline void updateMotionIT(){
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b08f      	sub	sp, #60	; 0x3c
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    	static uint32_t lastTime = HAL_GetTick();
 8001278:	4bc7      	ldr	r3, [pc, #796]	; (8001598 <_ZN7MPU605014updateMotionITEv+0x328>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <_ZN7MPU605014updateMotionITEv+0x24>
 8001284:	f001 fdf6 	bl	8002e74 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	4bc4      	ldr	r3, [pc, #784]	; (800159c <_ZN7MPU605014updateMotionITEv+0x32c>)
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	4bc2      	ldr	r3, [pc, #776]	; (8001598 <_ZN7MPU605014updateMotionITEv+0x328>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
    	float dt = (HAL_GetTick() - lastTime)/1000.0;
 8001294:	f001 fdee 	bl	8002e74 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	4bc0      	ldr	r3, [pc, #768]	; (800159c <_ZN7MPU605014updateMotionITEv+0x32c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f93f 	bl	8000524 <__aeabi_ui2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4bbd      	ldr	r3, [pc, #756]	; (80015a0 <_ZN7MPU605014updateMotionITEv+0x330>)
 80012ac:	f7ff fade 	bl	800086c <__aeabi_ddiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4618      	mov	r0, r3
 80012b6:	4621      	mov	r1, r4
 80012b8:	f7ff fc86 	bl	8000bc8 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34

    	int16_t temp;
    	rawAx = (((int16_t)buffer[0]) << 8) | buffer[1];
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	839a      	strh	r2, [r3, #28]
    	rawAy = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	83da      	strh	r2, [r3, #30]
    	rawAz = (((int16_t)buffer[4]) << 8) | buffer[5];
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21a      	sxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	841a      	strh	r2, [r3, #32]
    	temp = (int16_t) (buffer[6] << 8 | buffer[7]);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	867b      	strh	r3, [r7, #50]	; 0x32
    	rawGx = (((int16_t)buffer[8]) << 8) | buffer[9];
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	845a      	strh	r2, [r3, #34]	; 0x22
    	rawGy = (((int16_t)buffer[10]) << 8) | buffer[11];
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21a      	sxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	849a      	strh	r2, [r3, #36]	; 0x24
    	rawGz = (((int16_t)buffer[12]) << 8) | buffer[13];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21a      	sxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	84da      	strh	r2, [r3, #38]	; 0x26

    	Ax = rawAx-baseAcX;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edc3 7a01 	vstr	s15, [r3, #4]
    	Ay = rawAy-baseAcY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a02 	vstr	s15, [r3, #8]
    	Az = rawAz-(15384-baseAcZ);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80013bc:	f5c3 5370 	rsb	r3, r3, #15360	; 0x3c00
 80013c0:	3318      	adds	r3, #24
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edc3 7a03 	vstr	s15, [r3, #12]
    	Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80013d2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013de:	eddf 6a71 	vldr	s13, [pc, #452]	; 80015a4 <_ZN7MPU605014updateMotionITEv+0x334>
 80013e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80015a8 <_ZN7MPU605014updateMotionITEv+0x338>
 80013ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    	Gx = (rawGx-baseGyX) / 131.0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f89d 	bl	8000544 <__aeabi_i2d>
 800140a:	a35f      	add	r3, pc, #380	; (adr r3, 8001588 <_ZN7MPU605014updateMotionITEv+0x318>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff fa2c 	bl	800086c <__aeabi_ddiv>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	4618      	mov	r0, r3
 800141a:	4621      	mov	r1, r4
 800141c:	f7ff fbd4 	bl	8000bc8 <__aeabi_d2f>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	611a      	str	r2, [r3, #16]
    	Gy = (rawGy-baseGyY) / 131.0;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f884 	bl	8000544 <__aeabi_i2d>
 800143c:	a352      	add	r3, pc, #328	; (adr r3, 8001588 <_ZN7MPU605014updateMotionITEv+0x318>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff fa13 	bl	800086c <__aeabi_ddiv>
 8001446:	4603      	mov	r3, r0
 8001448:	460c      	mov	r4, r1
 800144a:	4618      	mov	r0, r3
 800144c:	4621      	mov	r1, r4
 800144e:	f7ff fbbb 	bl	8000bc8 <__aeabi_d2f>
 8001452:	4602      	mov	r2, r0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	615a      	str	r2, [r3, #20]
    	Gz = (rawGz-baseGyZ) / 131.0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800145e:	461a      	mov	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f86b 	bl	8000544 <__aeabi_i2d>
 800146e:	a346      	add	r3, pc, #280	; (adr r3, 8001588 <_ZN7MPU605014updateMotionITEv+0x318>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f9fa 	bl	800086c <__aeabi_ddiv>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4618      	mov	r0, r3
 800147e:	4621      	mov	r1, r4
 8001480:	f7ff fba2 	bl	8000bc8 <__aeabi_d2f>
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
//    	printf("%d %d\r\n", rawAz, baseAcZ);

    	//cal Accel angle
		float accel_yz = sqrt(Ay*Ay + Az*Az);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a02 	vldr	s15, [r3, #8]
 8001496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 6a03 	vldr	s13, [r3, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	f7ff feb9 	bl	8001228 <_ZSt4sqrtf>
 80014b6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		float accel_xz = sqrt(Ax*Ax + Az*Az);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	f7ff fea1 	bl	8001228 <_ZSt4sqrtf>
 80014e6:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

		float aPitch = atan(-Ax / accel_yz)*RAD_TO_DEG;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80014f0:	eeb1 7a67 	vneg.f32	s14, s15
 80014f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014fc:	eeb0 0a66 	vmov.f32	s0, s13
 8001500:	f7ff fe82 	bl	8001208 <_ZSt4atanf>
 8001504:	ee10 3a10 	vmov	r3, s0
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f82d 	bl	8000568 <__aeabi_f2d>
 800150e:	a320      	add	r3, pc, #128	; (adr r3, 8001590 <_ZN7MPU605014updateMotionITEv+0x320>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f880 	bl	8000618 <__aeabi_dmul>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4618      	mov	r0, r3
 800151e:	4621      	mov	r1, r4
 8001520:	f7ff fb52 	bl	8000bc8 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
		float aRoll = atan(Ay / accel_xz)*RAD_TO_DEG;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	ed93 7a02 	vldr	s14, [r3, #8]
 800152e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001532:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001536:	eeb0 0a66 	vmov.f32	s0, s13
 800153a:	f7ff fe65 	bl	8001208 <_ZSt4atanf>
 800153e:	ee10 3a10 	vmov	r3, s0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f810 	bl	8000568 <__aeabi_f2d>
 8001548:	a311      	add	r3, pc, #68	; (adr r3, 8001590 <_ZN7MPU605014updateMotionITEv+0x320>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f863 	bl	8000618 <__aeabi_dmul>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fb35 	bl	8000bc8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	623b      	str	r3, [r7, #32]

		//karman filter
		float temp_angle_x = roll + Gx*dt;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	edd3 6a04 	vldr	s13, [r3, #16]
 800156e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	edc7 7a07 	vstr	s15, [r7, #28]
		float temp_angle_y = pitch + Gy*dt;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001584:	e012      	b.n	80015ac <_ZN7MPU605014updateMotionITEv+0x33c>
 8001586:	bf00      	nop
 8001588:	00000000 	.word	0x00000000
 800158c:	40606000 	.word	0x40606000
 8001590:	1a63c1f8 	.word	0x1a63c1f8
 8001594:	404ca5dc 	.word	0x404ca5dc
 8001598:	200001fc 	.word	0x200001fc
 800159c:	200001f8 	.word	0x200001f8
 80015a0:	408f4000 	.word	0x408f4000
 80015a4:	43aa0000 	.word	0x43aa0000
 80015a8:	42121eb8 	.word	0x42121eb8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	edd3 6a05 	vldr	s13, [r3, #20]
 80015b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	edc7 7a06 	vstr	s15, [r7, #24]
		float temp_angle_z = yaw + Gz*dt;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 6a06 	vldr	s13, [r3, #24]
 80015ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	edc7 7a05 	vstr	s15, [r7, #20]

		float curRoll = alpha*temp_angle_x + (1-alpha)*aRoll;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	edc7 7a04 	vstr	s15, [r7, #16]
		float curPitch = alpha*temp_angle_y + (1-alpha)*aPitch;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001610:	edd7 7a06 	vldr	s15, [r7, #24]
 8001614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800161e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001622:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001626:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	edc7 7a03 	vstr	s15, [r7, #12]
		float curYaw = temp_angle_z;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	60bb      	str	r3, [r7, #8]

		p = (curRoll - roll)/dt;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001640:	ed97 7a04 	vldr	s14, [r7, #16]
 8001644:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001648:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		q = (curPitch - pitch)/dt;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800165c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001660:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001664:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		r = (curYaw - yaw)/dt;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001678:	ed97 7a02 	vldr	s14, [r7, #8]
 800167c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001680:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		roll = curRoll;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
		pitch = curPitch;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
		yaw = curYaw;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	639a      	str	r2, [r3, #56]	; 0x38

		lastTime = HAL_GetTick();
 80016a0:	f001 fbe8 	bl	8002e74 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <_ZN7MPU605014updateMotionITEv+0x444>)
 80016a8:	601a      	str	r2, [r3, #0]
    }
 80016aa:	bf00      	nop
 80016ac:	373c      	adds	r7, #60	; 0x3c
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200001f8 	.word	0x200001f8

080016b8 <CppMain>:
//
//	lastTime = HAL_GetTick();
//}

void CppMain()
{
 80016b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016bc:	b08e      	sub	sp, #56	; 0x38
 80016be:	af0a      	add	r7, sp, #40	; 0x28

	//cpp main

	printf("asdf\r\n");
 80016c0:	4828      	ldr	r0, [pc, #160]	; (8001764 <CppMain+0xac>)
 80016c2:	f008 fabd 	bl	8009c40 <puts>

    /* mpu it start*/
	HAL_TIM_Base_Start_IT(&htim11);
 80016c6:	4828      	ldr	r0, [pc, #160]	; (8001768 <CppMain+0xb0>)
 80016c8:	f005 fde7 	bl	800729a <HAL_TIM_Base_Start_IT>

	mpu.initialize();
 80016cc:	4827      	ldr	r0, [pc, #156]	; (800176c <CppMain+0xb4>)
 80016ce:	f000 f8d1 	bl	8001874 <_ZN7MPU605010initializeEv>
	mpu_start = true;
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <CppMain+0xb8>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
	while(1)
	{
//		printf("%u\r\n",mpu.getDeviceID());
//		HAL_Delay(1000);
		if(mpu_set == true){ // mpu check
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <CppMain+0xbc>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0fb      	beq.n	80016d8 <CppMain+0x20>
			mpu.updateMotionIT();
 80016e0:	4822      	ldr	r0, [pc, #136]	; (800176c <CppMain+0xb4>)
 80016e2:	f7ff fdc5 	bl	8001270 <_ZN7MPU605014updateMotionITEv>
//			mpu.printFilteredData();
//			mpu.getData(&ax, &ay, &az, &gx, &gy, &gz);
//			calAccelAngle();
			printf("%f, %f, %f, %f, %f, %f\r\n", mpu.roll, mpu.pitch, mpu.yaw, mpu.p, mpu.q, mpu.r);
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <CppMain+0xb4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff3c 	bl	8000568 <__aeabi_f2d>
 80016f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <CppMain+0xb4>)
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff35 	bl	8000568 <__aeabi_f2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <CppMain+0xb4>)
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff2e 	bl	8000568 <__aeabi_f2d>
 800170c:	4680      	mov	r8, r0
 800170e:	4689      	mov	r9, r1
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <CppMain+0xb4>)
 8001712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff27 	bl	8000568 <__aeabi_f2d>
 800171a:	4682      	mov	sl, r0
 800171c:	468b      	mov	fp, r1
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <CppMain+0xb4>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff20 	bl	8000568 <__aeabi_f2d>
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <CppMain+0xb4>)
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff19 	bl	8000568 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800173e:	ed97 7b00 	vldr	d7, [r7]
 8001742:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001746:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800174a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800174e:	e9cd 4500 	strd	r4, r5, [sp]
 8001752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001756:	4808      	ldr	r0, [pc, #32]	; (8001778 <CppMain+0xc0>)
 8001758:	f008 f9fe 	bl	8009b58 <iprintf>
//			calGyroAngle();
//			calFilteredAngle();
			mpu_set = false;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <CppMain+0xbc>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
		if(mpu_set == true){ // mpu check
 8001762:	e7b9      	b.n	80016d8 <CppMain+0x20>
 8001764:	0800b9b8 	.word	0x0800b9b8
 8001768:	200003d0 	.word	0x200003d0
 800176c:	20000200 	.word	0x20000200
 8001770:	20000265 	.word	0x20000265
 8001774:	20000264 	.word	0x20000264
 8001778:	0800b9c0 	.word	0x0800b9c0

0800177c <HAL_I2C_MemRxCpltCallback>:
		}

	}
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <HAL_I2C_MemRxCpltCallback+0x24>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d102      	bne.n	8001794 <HAL_I2C_MemRxCpltCallback+0x18>
		mpu_set = true;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
	}
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40005400 	.word	0x40005400
 80017a4:	20000264 	.word	0x20000264

080017a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11){ // 1000hz
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d113      	bne.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		static uint8_t imuTime = 0;
		imuTime++;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017c4:	701a      	strb	r2, [r3, #0]
		if(imuTime>16 && mpu_start == true){// 58.8hz
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d909      	bls.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x3a>
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x3a>
			mpu.getMotionIT();
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017d8:	f7ff fd36 	bl	8001248 <_ZN7MPU605011getMotionITEv>
			imuTime = 0;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40014800 	.word	0x40014800
 80017f0:	20000266 	.word	0x20000266
 80017f4:	20000265 	.word	0x20000265
 80017f8:	20000200 	.word	0x20000200

080017fc <_Z41__static_initialization_and_destruction_0ii>:
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d109      	bne.n	8001820 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001812:	4293      	cmp	r3, r2
 8001814:	d104      	bne.n	8001820 <_Z41__static_initialization_and_destruction_0ii+0x24>
MPU6050 mpu(&hi2c1);
 8001816:	2268      	movs	r2, #104	; 0x68
 8001818:	4903      	ldr	r1, [pc, #12]	; (8001828 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800181c:	f000 f810 	bl	8001840 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200002bc 	.word	0x200002bc
 800182c:	20000200 	.word	0x20000200

08001830 <_GLOBAL__sub_I_stm_millis>:
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
 8001834:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001838:	2001      	movs	r0, #1
 800183a:	f7ff ffdf 	bl	80017fc <_Z41__static_initialization_and_destruction_0ii>
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh>:
//	y = *(float*)&i;
//	y = y * (1.5f - (halfx * y * y));
//	return y;
//}

MPU6050::MPU6050(I2C_HandleTypeDef *I2Cx, uint8_t address)
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	4613      	mov	r3, r2
 800184c:	71fb      	strb	r3, [r7, #7]
: i2c(I2Cx)
, devAddr(address)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fb88 	bl	8000f68 <_ZN6I2CdevC1EP19__I2C_HandleTypeDef>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_ZN7MPU6050C1EP19__I2C_HandleTypeDefh+0x30>)
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
{
}
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	3f75c28f 	.word	0x3f75c28f

08001874 <_ZN7MPU605010initializeEv>:

void MPU6050::initialize(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 800187c:	2101      	movs	r1, #1
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f87f 	bl	8001982 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001884:	2100      	movs	r1, #0
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f891 	bl	80019ae <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800188c:	2100      	movs	r1, #0
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8a3 	bl	80019da <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001894:	2100      	movs	r1, #0
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f8b5 	bl	8001a06 <_ZN7MPU605015setSleepEnabledEb>
    setDLPFMode(2);
 800189c:	2102      	movs	r1, #2
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f996 	bl	8001bd0 <_ZN7MPU605011setDLPFModeEh>
    setRate(7);
 80018a4:	2107      	movs	r1, #7
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f9a8 	bl	8001bfc <_ZN7MPU60507setRateEh>
	CalibAccelGyro();
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8bf 	bl	8001a30 <_ZN7MPU605014CalibAccelGyroEv>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZN7MPU605015updateRawMotionEv>:
bool MPU6050::testConnection(){
	return getDeviceID() == 0x34;
}
void MPU6050::updateRawMotion(){
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af02      	add	r7, sp, #8
 80018c0:	6078      	str	r0, [r7, #4]
    i2c.readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3349      	adds	r3, #73	; 0x49
 80018ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	230e      	movs	r3, #14
 80018d8:	223b      	movs	r2, #59	; 0x3b
 80018da:	f7ff fb6c 	bl	8000fb6 <_ZN6I2Cdev9readBytesEhhhPht>
    rawAx = (((int16_t)buffer[0]) << 8) | buffer[1];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	839a      	strh	r2, [r3, #28]
    rawAy = (((int16_t)buffer[2]) << 8) | buffer[3];
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21a      	sxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001908:	b21b      	sxth	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	b21a      	sxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	83da      	strh	r2, [r3, #30]
    rawAz = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21a      	sxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001922:	b21b      	sxth	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b21a      	sxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	841a      	strh	r2, [r3, #32]
    rawGx = (((int16_t)buffer[8]) << 8) | buffer[9];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21a      	sxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21a      	sxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	845a      	strh	r2, [r3, #34]	; 0x22
    rawGy = (((int16_t)buffer[10]) << 8) | buffer[11];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21a      	sxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001956:	b21b      	sxth	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b21a      	sxth	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	849a      	strh	r2, [r3, #36]	; 0x24
    rawGz = (((int16_t)buffer[12]) << 8) | buffer[13];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	84da      	strh	r2, [r3, #38]	; 0x26
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_ZN7MPU605014setClockSourceEh>:

// initialize function
void MPU6050::setClockSource(uint8_t source) {
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af02      	add	r7, sp, #8
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	2303      	movs	r3, #3
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2302      	movs	r3, #2
 80019a0:	226b      	movs	r2, #107	; 0x6b
 80019a2:	f7ff fb84 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_ZN7MPU605021setFullScaleGyroRangeEh>:
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af02      	add	r7, sp, #8
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	2302      	movs	r3, #2
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2304      	movs	r3, #4
 80019cc:	221b      	movs	r2, #27
 80019ce:	f7ff fb6e 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_ZN7MPU605022setFullScaleAccelRangeEh>:
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af02      	add	r7, sp, #8
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2302      	movs	r3, #2
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2304      	movs	r3, #4
 80019f8:	221c      	movs	r2, #28
 80019fa:	f7ff fb58 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZN7MPU605015setSleepEnabledEb>:
void MPU6050::setSleepEnabled(bool enabled) {
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af02      	add	r7, sp, #8
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	70fb      	strb	r3, [r7, #3]
    i2c.writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2306      	movs	r3, #6
 8001a20:	226b      	movs	r2, #107	; 0x6b
 8001a22:	f7ff fb06 	bl	8001032 <_ZN6I2Cdev8writeBitEhhhh>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <_ZN7MPU605014CalibAccelGyroEv>:

// calibration
void MPU6050::CalibAccelGyro(){
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b08b      	sub	sp, #44	; 0x2c
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	int32_t sumAcX = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t sumAcY = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
	int32_t sumAcZ = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
	int32_t sumGyX = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
	int32_t sumGyY = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
	int32_t sumGyZ = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
    for(int i=0; i<10; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b09      	cmp	r3, #9
 8001a58:	dc09      	bgt.n	8001a6e <_ZN7MPU605014CalibAccelGyroEv+0x3e>
	{
		 updateRawMotion();
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff2d 	bl	80018ba <_ZN7MPU605015updateRawMotionEv>
		 HAL_Delay(100);
 8001a60:	2064      	movs	r0, #100	; 0x64
 8001a62:	f001 fa13 	bl	8002e8c <HAL_Delay>
    for(int i=0; i<10; i++)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e7f2      	b.n	8001a54 <_ZN7MPU605014CalibAccelGyroEv+0x24>
	}
//	printf("raw : \r\n", baseGyX, baseGyY, baseGyZ);
    for(int i=0; i<10; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	dc33      	bgt.n	8001ae0 <_ZN7MPU605014CalibAccelGyroEv+0xb0>
	{
//    	printf("%d, %d, %d\r\n", rawGx, rawGy, rawGz);
		 updateRawMotion();
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff1e 	bl	80018ba <_ZN7MPU605015updateRawMotionEv>
		 sumAcX += rawAx;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001a84:	461a      	mov	r2, r3
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	4413      	add	r3, r2
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
		 sumAcY += rawAy;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a92:	461a      	mov	r2, r3
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	4413      	add	r3, r2
 8001a98:	623b      	str	r3, [r7, #32]
		 sumAcZ += rawAz;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	61fb      	str	r3, [r7, #28]
		 sumGyX += rawGx;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001aae:	461a      	mov	r2, r3
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
		 sumGyY += rawGy;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001abc:	461a      	mov	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
		 sumGyZ += rawGz;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001aca:	461a      	mov	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4413      	add	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
//		printf("%d\r\n", rawAz);
		 HAL_Delay(100);
 8001ad2:	2064      	movs	r0, #100	; 0x64
 8001ad4:	f001 f9da 	bl	8002e8c <HAL_Delay>
    for(int i=0; i<10; i++)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	e7c8      	b.n	8001a72 <_ZN7MPU605014CalibAccelGyroEv+0x42>
	}
	baseAcX = sumAcX / 10.0;
 8001ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ae2:	f7fe fd2f 	bl	8000544 <__aeabi_i2d>
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <_ZN7MPU605014CalibAccelGyroEv+0x19c>)
 8001aec:	f7fe febe 	bl	800086c <__aeabi_ddiv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	4618      	mov	r0, r3
 8001af6:	4621      	mov	r1, r4
 8001af8:	f7ff f83e 	bl	8000b78 <__aeabi_d2iz>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	baseAcY = sumAcY / 10.0;
 8001b06:	6a38      	ldr	r0, [r7, #32]
 8001b08:	f7fe fd1c 	bl	8000544 <__aeabi_i2d>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <_ZN7MPU605014CalibAccelGyroEv+0x19c>)
 8001b12:	f7fe feab 	bl	800086c <__aeabi_ddiv>
 8001b16:	4603      	mov	r3, r0
 8001b18:	460c      	mov	r4, r1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	f7ff f82b 	bl	8000b78 <__aeabi_d2iz>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	baseAcZ = sumAcZ / 10.0;
 8001b2c:	69f8      	ldr	r0, [r7, #28]
 8001b2e:	f7fe fd09 	bl	8000544 <__aeabi_i2d>
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <_ZN7MPU605014CalibAccelGyroEv+0x19c>)
 8001b38:	f7fe fe98 	bl	800086c <__aeabi_ddiv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f7ff f818 	bl	8000b78 <__aeabi_d2iz>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	baseGyX = sumGyX / 10.0;
 8001b52:	69b8      	ldr	r0, [r7, #24]
 8001b54:	f7fe fcf6 	bl	8000544 <__aeabi_i2d>
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <_ZN7MPU605014CalibAccelGyroEv+0x19c>)
 8001b5e:	f7fe fe85 	bl	800086c <__aeabi_ddiv>
 8001b62:	4603      	mov	r3, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	4618      	mov	r0, r3
 8001b68:	4621      	mov	r1, r4
 8001b6a:	f7ff f805 	bl	8000b78 <__aeabi_d2iz>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	baseGyY = sumGyY / 10.0;
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f7fe fce3 	bl	8000544 <__aeabi_i2d>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <_ZN7MPU605014CalibAccelGyroEv+0x19c>)
 8001b84:	f7fe fe72 	bl	800086c <__aeabi_ddiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4621      	mov	r1, r4
 8001b90:	f7fe fff2 	bl	8000b78 <__aeabi_d2iz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	baseGyZ = sumGyZ / 10.0;
 8001b9e:	6938      	ldr	r0, [r7, #16]
 8001ba0:	f7fe fcd0 	bl	8000544 <__aeabi_i2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_ZN7MPU605014CalibAccelGyroEv+0x19c>)
 8001baa:	f7fe fe5f 	bl	800086c <__aeabi_ddiv>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	f7fe ffdf 	bl	8000b78 <__aeabi_d2iz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
//	printf("%d\r\n", baseAcZ);
}
 8001bc4:	bf00      	nop
 8001bc6:	372c      	adds	r7, #44	; 0x2c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	40240000 	.word	0x40240000

08001bd0 <_ZN7MPU605011setDLPFModeEh>:
uint8_t MPU6050::getDLPFMode() {
    i2c.readBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, buffer);
    return buffer[0];
}

void MPU6050::setDLPFMode(uint8_t mode) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
    i2c.writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2303      	movs	r3, #3
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2302      	movs	r3, #2
 8001bee:	221a      	movs	r2, #26
 8001bf0:	f7ff fa5d 	bl	80010ae <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_ZN7MPU60507setRateEh>:

void MPU6050::setRate(uint8_t rate) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
    i2c.writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	2219      	movs	r2, #25
 8001c14:	f7ff fa9f 	bl	8001156 <_ZN6I2Cdev9writeByteEhhh>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c26:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <MX_ETH_Init+0x7c>)
 8001c28:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	22e1      	movs	r2, #225	; 0xe1
 8001c50:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	3303      	adds	r3, #3
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	3305      	adds	r3, #5
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c82:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_ETH_Init+0x78>)
 8001c86:	f001 fa65 	bl	8003154 <HAL_ETH_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001c90:	f000 fadc 	bl	800224c <Error_Handler>
  }

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000274 	.word	0x20000274
 8001c9c:	40028000 	.word	0x40028000

08001ca0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a55      	ldr	r2, [pc, #340]	; (8001e14 <HAL_ETH_MspInit+0x174>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	f040 80a4 	bne.w	8001e0c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd4:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4a4b      	ldr	r2, [pc, #300]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cee:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf0:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	4a44      	ldr	r2, [pc, #272]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0c:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6313      	str	r3, [r2, #48]	; 0x30
 8001d28:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4a36      	ldr	r2, [pc, #216]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6313      	str	r3, [r2, #48]	; 0x30
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a28      	ldr	r2, [pc, #160]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d88:	2332      	movs	r3, #50	; 0x32
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d98:	230b      	movs	r3, #11
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	481e      	ldr	r0, [pc, #120]	; (8001e1c <HAL_ETH_MspInit+0x17c>)
 8001da4:	f001 fe44 	bl	8003a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001da8:	2386      	movs	r3, #134	; 0x86
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db8:	230b      	movs	r3, #11
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4817      	ldr	r0, [pc, #92]	; (8001e20 <HAL_ETH_MspInit+0x180>)
 8001dc4:	f001 fe34 	bl	8003a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dda:	230b      	movs	r3, #11
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	4619      	mov	r1, r3
 8001de4:	480f      	ldr	r0, [pc, #60]	; (8001e24 <HAL_ETH_MspInit+0x184>)
 8001de6:	f001 fe23 	bl	8003a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dfc:	230b      	movs	r3, #11
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4808      	ldr	r0, [pc, #32]	; (8001e28 <HAL_ETH_MspInit+0x188>)
 8001e08:	f001 fe12 	bl	8003a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3738      	adds	r7, #56	; 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40028000 	.word	0x40028000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40021800 	.word	0x40021800

08001e2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a58      	ldr	r2, [pc, #352]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b56      	ldr	r3, [pc, #344]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	623b      	str	r3, [r7, #32]
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	4b52      	ldr	r3, [pc, #328]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a51      	ldr	r2, [pc, #324]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a4a      	ldr	r2, [pc, #296]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b48      	ldr	r3, [pc, #288]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	4b44      	ldr	r3, [pc, #272]	; (8001fac <MX_GPIO_Init+0x180>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a43      	ldr	r2, [pc, #268]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b41      	ldr	r3, [pc, #260]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <MX_GPIO_Init+0x180>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a3c      	ldr	r2, [pc, #240]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b36      	ldr	r3, [pc, #216]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a35      	ldr	r2, [pc, #212]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ed8:	f043 0310 	orr.w	r3, r3, #16
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b33      	ldr	r3, [pc, #204]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <MX_GPIO_Init+0x180>)
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <MX_GPIO_Init+0x180>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <MX_GPIO_Init+0x180>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <MX_GPIO_Init+0x180>)
 8001f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <MX_GPIO_Init+0x180>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f28:	4821      	ldr	r0, [pc, #132]	; (8001fb0 <MX_GPIO_Init+0x184>)
 8001f2a:	f001 ff2b 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2140      	movs	r1, #64	; 0x40
 8001f32:	4820      	ldr	r0, [pc, #128]	; (8001fb4 <MX_GPIO_Init+0x188>)
 8001f34:	f001 ff26 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <MX_GPIO_Init+0x18c>)
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <MX_GPIO_Init+0x190>)
 8001f4e:	f001 fd6f 	bl	8003a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f52:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <MX_GPIO_Init+0x184>)
 8001f6c:	f001 fd60 	bl	8003a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f70:	2340      	movs	r3, #64	; 0x40
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <MX_GPIO_Init+0x188>)
 8001f88:	f001 fd52 	bl	8003a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_GPIO_Init+0x188>)
 8001fa0:	f001 fd46 	bl	8003a30 <HAL_GPIO_Init>

}
 8001fa4:	bf00      	nop
 8001fa6:	3738      	adds	r7, #56	; 0x38
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	10110000 	.word	0x10110000
 8001fbc:	40020800 	.word	0x40020800

08001fc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <MX_I2C1_Init+0x74>)
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <MX_I2C1_Init+0x78>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_I2C1_Init+0x74>)
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <MX_I2C1_Init+0x7c>)
 8001fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <MX_I2C1_Init+0x74>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_I2C1_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_I2C1_Init+0x74>)
 8001fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_I2C1_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <MX_I2C1_Init+0x74>)
 8001ffe:	f001 fedb 	bl	8003db8 <HAL_I2C_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002008:	f000 f920 	bl	800224c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800200c:	2100      	movs	r1, #0
 800200e:	4809      	ldr	r0, [pc, #36]	; (8002034 <MX_I2C1_Init+0x74>)
 8002010:	f004 fb1d 	bl	800664e <HAL_I2CEx_ConfigAnalogFilter>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800201a:	f000 f917 	bl	800224c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_I2C1_Init+0x74>)
 8002022:	f004 fb50 	bl	80066c6 <HAL_I2CEx_ConfigDigitalFilter>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800202c:	f000 f90e 	bl	800224c <Error_Handler>
  }

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200002bc 	.word	0x200002bc
 8002038:	40005400 	.word	0x40005400
 800203c:	00061a80 	.word	0x00061a80

08002040 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_I2C_MspInit+0x84>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12c      	bne.n	80020bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800207e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002084:	2312      	movs	r3, #18
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002088:	2301      	movs	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002090:	2304      	movs	r3, #4
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <HAL_I2C_MspInit+0x8c>)
 800209c:	f001 fcc8 	bl	8003a30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400

080020d0 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, unsigned char* p, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	230a      	movs	r3, #10
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <_write+0x24>)
 80020e6:	f005 ffa6 	bl	8008036 <HAL_UART_Transmit>
	return len;
 80020ea:	687b      	ldr	r3, [r7, #4]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000450 	.word	0x20000450

080020f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fc:	f000 fe54 	bl	8002da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002100:	f000 f826 	bl	8002150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002104:	f7ff fe92 	bl	8001e2c <MX_GPIO_Init>
  MX_ETH_Init();
 8002108:	f7ff fd8a 	bl	8001c20 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800210c:	f000 fc9c 	bl	8002a48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002110:	f000 fd98 	bl	8002c44 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8002114:	f7ff ff54 	bl	8001fc0 <MX_I2C1_Init>
  MX_TIM10_Init();
 8002118:	f000 fabe 	bl	8002698 <MX_TIM10_Init>
  MX_TIM11_Init();
 800211c:	f000 fb08 	bl	8002730 <MX_TIM11_Init>
  MX_TIM3_Init();
 8002120:	f000 f9a4 	bl	800246c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002124:	f000 fa22 	bl	800256c <MX_TIM4_Init>
  MX_UART7_Init();
 8002128:	f000 fc3a 	bl	80029a0 <MX_UART7_Init>
  MX_USART2_UART_Init();
 800212c:	f000 fc62 	bl	80029f4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002130:	f000 f878 	bl	8002224 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  setvbuf(stdout, NULL, _IONBF, 0);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <main+0x54>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6898      	ldr	r0, [r3, #8]
 800213a:	2300      	movs	r3, #0
 800213c:	2202      	movs	r2, #2
 800213e:	2100      	movs	r1, #0
 8002140:	f007 fd96 	bl	8009c70 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CppMain();
 8002144:	f7ff fab8 	bl	80016b8 <CppMain>
 8002148:	e7fc      	b.n	8002144 <main+0x4c>
 800214a:	bf00      	nop
 800214c:	2000000c 	.word	0x2000000c

08002150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	; 0x50
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	2230      	movs	r2, #48	; 0x30
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f006 ffed 	bl	800913e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <SystemClock_Config+0xcc>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <SystemClock_Config+0xcc>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <SystemClock_Config+0xcc>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <SystemClock_Config+0xd0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a21      	ldr	r2, [pc, #132]	; (8002220 <SystemClock_Config+0xd0>)
 800219a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <SystemClock_Config+0xd0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ac:	2301      	movs	r3, #1
 80021ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b6:	2302      	movs	r3, #2
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021c0:	2308      	movs	r3, #8
 80021c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ca:	2302      	movs	r3, #2
 80021cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021ce:	2307      	movs	r3, #7
 80021d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fbd2 	bl	8006980 <HAL_RCC_OscConfig>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80021e2:	f000 f833 	bl	800224c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e6:	230f      	movs	r3, #15
 80021e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ea:	2302      	movs	r3, #2
 80021ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	2105      	movs	r1, #5
 8002204:	4618      	mov	r0, r3
 8002206:	f004 fe2b 	bl	8006e60 <HAL_RCC_ClockConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002210:	f000 f81c 	bl	800224c <Error_Handler>
  }
}
 8002214:	bf00      	nop
 8002216:	3750      	adds	r7, #80	; 0x50
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000

08002224 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	201f      	movs	r0, #31
 800222e:	f000 ff2a 	bl	8003086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002232:	201f      	movs	r0, #31
 8002234:	f000 ff43 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2020      	movs	r0, #32
 800223e:	f000 ff22 	bl	8003086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002242:	2020      	movs	r0, #32
 8002244:	f000 ff3b 	bl	80030be <HAL_NVIC_EnableIRQ>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_MspInit+0x4c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_MspInit+0x4c>)
 800226c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_MspInit+0x4c>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_MspInit+0x4c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_MspInit+0x4c>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_MspInit+0x4c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <MemManage_Handler+0x4>

080022c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002300:	f000 fda4 	bl	8002e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800230e:	f005 f81d 	bl	800734c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003d0 	.word	0x200003d0

0800231c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <I2C1_EV_IRQHandler+0x10>)
 8002322:	f002 fa63 	bl	80047ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200002bc 	.word	0x200002bc

08002330 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <I2C1_ER_IRQHandler+0x10>)
 8002336:	f002 fbbf 	bl	8004ab8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200002bc 	.word	0x200002bc

08002344 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e00a      	b.n	800236c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002356:	f3af 8000 	nop.w
 800235a:	4601      	mov	r1, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	60ba      	str	r2, [r7, #8]
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbf0      	blt.n	8002356 <_read+0x12>
	}

return len;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_close>:
	}
	return len;
}

int _close(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a6:	605a      	str	r2, [r3, #4]
	return 0;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_isatty>:

int _isatty(int file)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
	return 1;
 80023be:	2301      	movs	r3, #1
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <_sbrk+0x50>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x16>
		heap_end = &end;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <_sbrk+0x50>)
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <_sbrk+0x54>)
 80023fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <_sbrk+0x50>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <_sbrk+0x50>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	466a      	mov	r2, sp
 800240e:	4293      	cmp	r3, r2
 8002410:	d907      	bls.n	8002422 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002412:	f006 fe4f 	bl	80090b4 <__errno>
 8002416:	4602      	mov	r2, r0
 8002418:	230c      	movs	r3, #12
 800241a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	e006      	b.n	8002430 <_sbrk+0x48>
	}

	heap_end += incr;
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <_sbrk+0x50>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a03      	ldr	r2, [pc, #12]	; (8002438 <_sbrk+0x50>)
 800242c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000268 	.word	0x20000268
 800243c:	200008e0 	.word	0x200008e0

08002440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <SystemInit+0x28>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <SystemInit+0x28>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SystemInit+0x28>)
 8002456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800245a:	609a      	str	r2, [r3, #8]
#endif
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 0320 	add.w	r3, r7, #32
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
 8002498:	615a      	str	r2, [r3, #20]
 800249a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <MX_TIM3_Init+0xf8>)
 800249e:	4a32      	ldr	r2, [pc, #200]	; (8002568 <MX_TIM3_Init+0xfc>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024a2:	4b30      	ldr	r3, [pc, #192]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80024ae:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024c0:	4828      	ldr	r0, [pc, #160]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024c2:	f004 febf 	bl	8007244 <HAL_TIM_Base_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80024cc:	f7ff febe 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	4619      	mov	r1, r3
 80024dc:	4821      	ldr	r0, [pc, #132]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024de:	f005 f903 	bl	80076e8 <HAL_TIM_ConfigClockSource>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80024e8:	f7ff feb0 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ec:	481d      	ldr	r0, [pc, #116]	; (8002564 <MX_TIM3_Init+0xf8>)
 80024ee:	f004 fef8 	bl	80072e2 <HAL_TIM_PWM_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80024f8:	f7ff fea8 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	4619      	mov	r1, r3
 800250a:	4816      	ldr	r0, [pc, #88]	; (8002564 <MX_TIM3_Init+0xf8>)
 800250c:	f005 fcb6 	bl	8007e7c <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002516:	f7ff fe99 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251a:	2360      	movs	r3, #96	; 0x60
 800251c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2200      	movs	r2, #0
 800252e:	4619      	mov	r1, r3
 8002530:	480c      	ldr	r0, [pc, #48]	; (8002564 <MX_TIM3_Init+0xf8>)
 8002532:	f005 f813 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800253c:	f7ff fe86 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2204      	movs	r2, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4807      	ldr	r0, [pc, #28]	; (8002564 <MX_TIM3_Init+0xf8>)
 8002548:	f005 f808 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002552:	f7ff fe7b 	bl	800224c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002556:	4803      	ldr	r0, [pc, #12]	; (8002564 <MX_TIM3_Init+0xf8>)
 8002558:	f000 f978 	bl	800284c <HAL_TIM_MspPostInit>

}
 800255c:	bf00      	nop
 800255e:	3738      	adds	r7, #56	; 0x38
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000390 	.word	0x20000390
 8002568:	40000400 	.word	0x40000400

0800256c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	f107 0320 	add.w	r3, r7, #32
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	615a      	str	r2, [r3, #20]
 800259a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800259c:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <MX_TIM4_Init+0x124>)
 800259e:	4a3d      	ldr	r2, [pc, #244]	; (8002694 <MX_TIM4_Init+0x128>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <MX_TIM4_Init+0x124>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <MX_TIM4_Init+0x124>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <MX_TIM4_Init+0x124>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <MX_TIM4_Init+0x124>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ba:	4b35      	ldr	r3, [pc, #212]	; (8002690 <MX_TIM4_Init+0x124>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025c0:	4833      	ldr	r0, [pc, #204]	; (8002690 <MX_TIM4_Init+0x124>)
 80025c2:	f004 fe3f 	bl	8007244 <HAL_TIM_Base_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80025cc:	f7ff fe3e 	bl	800224c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025da:	4619      	mov	r1, r3
 80025dc:	482c      	ldr	r0, [pc, #176]	; (8002690 <MX_TIM4_Init+0x124>)
 80025de:	f005 f883 	bl	80076e8 <HAL_TIM_ConfigClockSource>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80025e8:	f7ff fe30 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025ec:	4828      	ldr	r0, [pc, #160]	; (8002690 <MX_TIM4_Init+0x124>)
 80025ee:	f004 fe78 	bl	80072e2 <HAL_TIM_PWM_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80025f8:	f7ff fe28 	bl	800224c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002604:	f107 0320 	add.w	r3, r7, #32
 8002608:	4619      	mov	r1, r3
 800260a:	4821      	ldr	r0, [pc, #132]	; (8002690 <MX_TIM4_Init+0x124>)
 800260c:	f005 fc36 	bl	8007e7c <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002616:	f7ff fe19 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261a:	2360      	movs	r3, #96	; 0x60
 800261c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2200      	movs	r2, #0
 800262e:	4619      	mov	r1, r3
 8002630:	4817      	ldr	r0, [pc, #92]	; (8002690 <MX_TIM4_Init+0x124>)
 8002632:	f004 ff93 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800263c:	f7ff fe06 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2204      	movs	r2, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4812      	ldr	r0, [pc, #72]	; (8002690 <MX_TIM4_Init+0x124>)
 8002648:	f004 ff88 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8002652:	f7ff fdfb 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2208      	movs	r2, #8
 800265a:	4619      	mov	r1, r3
 800265c:	480c      	ldr	r0, [pc, #48]	; (8002690 <MX_TIM4_Init+0x124>)
 800265e:	f004 ff7d 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002668:	f7ff fdf0 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	220c      	movs	r2, #12
 8002670:	4619      	mov	r1, r3
 8002672:	4807      	ldr	r0, [pc, #28]	; (8002690 <MX_TIM4_Init+0x124>)
 8002674:	f004 ff72 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 800267e:	f7ff fde5 	bl	800224c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002682:	4803      	ldr	r0, [pc, #12]	; (8002690 <MX_TIM4_Init+0x124>)
 8002684:	f000 f8e2 	bl	800284c <HAL_TIM_MspPostInit>

}
 8002688:	bf00      	nop
 800268a:	3738      	adds	r7, #56	; 0x38
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000310 	.word	0x20000310
 8002694:	40000800 	.word	0x40000800

08002698 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	615a      	str	r2, [r3, #20]
 80026ae:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <MX_TIM10_Init+0x90>)
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <MX_TIM10_Init+0x94>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <MX_TIM10_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_TIM10_Init+0x90>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <MX_TIM10_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_TIM10_Init+0x90>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_TIM10_Init+0x90>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026d4:	4814      	ldr	r0, [pc, #80]	; (8002728 <MX_TIM10_Init+0x90>)
 80026d6:	f004 fdb5 	bl	8007244 <HAL_TIM_Base_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80026e0:	f7ff fdb4 	bl	800224c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80026e4:	4810      	ldr	r0, [pc, #64]	; (8002728 <MX_TIM10_Init+0x90>)
 80026e6:	f004 fdfc 	bl	80072e2 <HAL_TIM_PWM_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80026f0:	f7ff fdac 	bl	800224c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f4:	2360      	movs	r3, #96	; 0x60
 80026f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	4807      	ldr	r0, [pc, #28]	; (8002728 <MX_TIM10_Init+0x90>)
 800270c:	f004 ff26 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8002716:	f7ff fd99 	bl	800224c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <MX_TIM10_Init+0x90>)
 800271c:	f000 f896 	bl	800284c <HAL_TIM_MspPostInit>

}
 8002720:	bf00      	nop
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000350 	.word	0x20000350
 800272c:	40014400 	.word	0x40014400

08002730 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_TIM11_Init+0x40>)
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <MX_TIM11_Init+0x44>)
 8002738:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <MX_TIM11_Init+0x40>)
 800273c:	22a7      	movs	r2, #167	; 0xa7
 800273e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_TIM11_Init+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <MX_TIM11_Init+0x40>)
 8002748:	f240 32e7 	movw	r2, #999	; 0x3e7
 800274c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_TIM11_Init+0x40>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_TIM11_Init+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_TIM11_Init+0x40>)
 800275c:	f004 fd72 	bl	8007244 <HAL_TIM_Base_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002766:	f7ff fd71 	bl	800224c <Error_Handler>
  }

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200003d0 	.word	0x200003d0
 8002774:	40014800 	.word	0x40014800

08002778 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <HAL_TIM_Base_MspInit+0xc0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80027a6:	e042      	b.n	800282e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <HAL_TIM_Base_MspInit+0xc8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
}
 80027ce:	e02e      	b.n	800282e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_TIM_Base_MspInit+0xcc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	e01a      	b.n	800282e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_TIM_Base_MspInit+0xd0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d115      	bne.n	800282e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_TIM_Base_MspInit+0xc4>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	201a      	movs	r0, #26
 8002824:	f000 fc2f 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002828:	201a      	movs	r0, #26
 800282a:	f000 fc48 	bl	80030be <HAL_NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40000400 	.word	0x40000400
 800283c:	40023800 	.word	0x40023800
 8002840:	40000800 	.word	0x40000800
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800

0800284c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a45      	ldr	r2, [pc, #276]	; (8002980 <HAL_TIM_MspPostInit+0x134>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d13c      	bne.n	80028e8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a43      	ldr	r2, [pc, #268]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a3c      	ldr	r2, [pc, #240]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028b6:	2302      	movs	r3, #2
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	4831      	ldr	r0, [pc, #196]	; (8002988 <HAL_TIM_MspPostInit+0x13c>)
 80028c2:	f001 f8b5 	bl	8003a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028d6:	2302      	movs	r3, #2
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	482a      	ldr	r0, [pc, #168]	; (800298c <HAL_TIM_MspPostInit+0x140>)
 80028e2:	f001 f8a5 	bl	8003a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80028e6:	e047      	b.n	8002978 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_TIM_MspPostInit+0x144>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d11f      	bne.n	8002932 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a22      	ldr	r2, [pc, #136]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800290e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002920:	2302      	movs	r3, #2
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	481a      	ldr	r0, [pc, #104]	; (8002994 <HAL_TIM_MspPostInit+0x148>)
 800292c:	f001 f880 	bl	8003a30 <HAL_GPIO_Init>
}
 8002930:	e022      	b.n	8002978 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM10)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a18      	ldr	r2, [pc, #96]	; (8002998 <HAL_TIM_MspPostInit+0x14c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d11d      	bne.n	8002978 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 8002946:	f043 0320 	orr.w	r3, r3, #32
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_TIM_MspPostInit+0x138>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002958:	2340      	movs	r3, #64	; 0x40
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002968:	2303      	movs	r3, #3
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	4619      	mov	r1, r3
 8002972:	480a      	ldr	r0, [pc, #40]	; (800299c <HAL_TIM_MspPostInit+0x150>)
 8002974:	f001 f85c 	bl	8003a30 <HAL_GPIO_Init>
}
 8002978:	bf00      	nop
 800297a:	3730      	adds	r7, #48	; 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40000400 	.word	0x40000400
 8002984:	40023800 	.word	0x40023800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020800 	.word	0x40020800
 8002990:	40000800 	.word	0x40000800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40014400 	.word	0x40014400
 800299c:	40021400 	.word	0x40021400

080029a0 <MX_UART7_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_UART7_Init+0x4c>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <MX_UART7_Init+0x50>)
 80029a8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <MX_UART7_Init+0x4c>)
 80029ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_UART7_Init+0x4c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_UART7_Init+0x4c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_UART7_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_UART7_Init+0x4c>)
 80029c6:	220c      	movs	r2, #12
 80029c8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_UART7_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_UART7_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_UART7_Init+0x4c>)
 80029d8:	f005 fae0 	bl	8007f9c <HAL_UART_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80029e2:	f7ff fc33 	bl	800224c <Error_Handler>
  }

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000410 	.word	0x20000410
 80029f0:	40007800 	.word	0x40007800

080029f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <MX_USART2_UART_Init+0x50>)
 80029fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a24:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a2c:	4804      	ldr	r0, [pc, #16]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a2e:	f005 fab5 	bl	8007f9c <HAL_UART_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002a38:	f7ff fc08 	bl	800224c <Error_Handler>
  }

}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000490 	.word	0x20000490
 8002a44:	40004400 	.word	0x40004400

08002a48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <MX_USART3_UART_Init+0x50>)
 8002a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a6e:	220c      	movs	r2, #12
 8002a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_USART3_UART_Init+0x4c>)
 8002a80:	f005 fa8c 	bl	8007f9c <HAL_UART_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a8a:	f7ff fbdf 	bl	800224c <Error_Handler>
  }

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000450 	.word	0x20000450
 8002a98:	40004800 	.word	0x40004800

08002a9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5b      	ldr	r2, [pc, #364]	; (8002c28 <HAL_UART_MspInit+0x18c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d12d      	bne.n	8002b1a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	4b5a      	ldr	r3, [pc, #360]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a59      	ldr	r2, [pc, #356]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b57      	ldr	r3, [pc, #348]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002ae4:	f043 0310 	orr.w	r3, r3, #16
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002af6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002b08:	2308      	movs	r3, #8
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	4619      	mov	r1, r3
 8002b12:	4847      	ldr	r0, [pc, #284]	; (8002c30 <HAL_UART_MspInit+0x194>)
 8002b14:	f000 ff8c 	bl	8003a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b18:	e081      	b.n	8002c1e <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a45      	ldr	r2, [pc, #276]	; (8002c34 <HAL_UART_MspInit+0x198>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d14a      	bne.n	8002bba <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	4b40      	ldr	r3, [pc, #256]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	4a3f      	ldr	r2, [pc, #252]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b32:	6413      	str	r3, [r2, #64]	; 0x40
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b50:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b88:	2307      	movs	r3, #7
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	4619      	mov	r1, r3
 8002b92:	4829      	ldr	r0, [pc, #164]	; (8002c38 <HAL_UART_MspInit+0x19c>)
 8002b94:	f000 ff4c 	bl	8003a30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b98:	2370      	movs	r3, #112	; 0x70
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ba8:	2307      	movs	r3, #7
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4822      	ldr	r0, [pc, #136]	; (8002c3c <HAL_UART_MspInit+0x1a0>)
 8002bb4:	f000 ff3c 	bl	8003a30 <HAL_GPIO_Init>
}
 8002bb8:	e031      	b.n	8002c1e <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <HAL_UART_MspInit+0x1a4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d12c      	bne.n	8002c1e <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_UART_MspInit+0x190>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002bfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c0e:	2307      	movs	r3, #7
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	4808      	ldr	r0, [pc, #32]	; (8002c3c <HAL_UART_MspInit+0x1a0>)
 8002c1a:	f000 ff09 	bl	8003a30 <HAL_GPIO_Init>
}
 8002c1e:	bf00      	nop
 8002c20:	3738      	adds	r7, #56	; 0x38
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40007800 	.word	0x40007800
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40004400 	.word	0x40004400
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40004800 	.word	0x40004800

08002c44 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002c50:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c52:	2204      	movs	r2, #4
 8002c54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c58:	2202      	movs	r2, #2
 8002c5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c64:	2202      	movs	r2, #2
 8002c66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c88:	f003 fd5c 	bl	8006744 <HAL_PCD_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002c92:	f7ff fadb 	bl	800224c <Error_Handler>
  }

}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200004d0 	.word	0x200004d0

08002ca0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc0:	d13f      	bne.n	8002d42 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002cde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cf0:	230a      	movs	r3, #10
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4815      	ldr	r0, [pc, #84]	; (8002d50 <HAL_PCD_MspInit+0xb0>)
 8002cfc:	f000 fe98 	bl	8003a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	480e      	ldr	r0, [pc, #56]	; (8002d50 <HAL_PCD_MspInit+0xb0>)
 8002d16:	f000 fe8b 	bl	8003a30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d24:	6353      	str	r3, [r2, #52]	; 0x34
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002d42:	bf00      	nop
 8002d44:	3728      	adds	r7, #40	; 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020000 	.word	0x40020000

08002d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d8c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d5a:	e003      	b.n	8002d64 <LoopCopyDataInit>

08002d5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d62:	3104      	adds	r1, #4

08002d64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d64:	480b      	ldr	r0, [pc, #44]	; (8002d94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d6c:	d3f6      	bcc.n	8002d5c <CopyDataInit>
  ldr  r2, =_sbss
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d70:	e002      	b.n	8002d78 <LoopFillZerobss>

08002d72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d74:	f842 3b04 	str.w	r3, [r2], #4

08002d78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d7c:	d3f9      	bcc.n	8002d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d7e:	f7ff fb5f 	bl	8002440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d82:	f006 f99d 	bl	80090c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d86:	f7ff f9b7 	bl	80020f8 <main>
  bx  lr    
 8002d8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d8c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002d90:	0800bcf4 	.word	0x0800bcf4
  ldr  r0, =_sdata
 8002d94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d98:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002d9c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002da0:	200008e0 	.word	0x200008e0

08002da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002da4:	e7fe      	b.n	8002da4 <ADC_IRQHandler>
	...

08002da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_Init+0x40>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <HAL_Init+0x40>)
 8002db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <HAL_Init+0x40>)
 8002dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_Init+0x40>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f000 f94d 	bl	8003070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f000 f808 	bl	8002dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ddc:	f7ff fa3e 	bl	800225c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023c00 	.word	0x40023c00

08002dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_InitTick+0x54>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_InitTick+0x58>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f965 	bl	80030da <HAL_SYSTICK_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00e      	b.n	8002e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b0f      	cmp	r3, #15
 8002e1e:	d80a      	bhi.n	8002e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e20:	2200      	movs	r2, #0
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f000 f92d 	bl	8003086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e2c:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <HAL_InitTick+0x5c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000008 	.word	0x20000008
 8002e48:	20000004 	.word	0x20000004

08002e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x20>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_IncTick+0x24>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_IncTick+0x24>)
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	200008d8 	.word	0x200008d8

08002e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return uwTick;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_GetTick+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	200008d8 	.word	0x200008d8

08002e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff ffee 	bl	8002e74 <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d005      	beq.n	8002eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_Delay+0x40>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eb2:	bf00      	nop
 8002eb4:	f7ff ffde 	bl	8002e74 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d8f7      	bhi.n	8002eb4 <HAL_Delay+0x28>
  {
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000008 	.word	0x20000008

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f02:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60d3      	str	r3, [r2, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <__NVIC_EnableIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800303c:	d301      	bcc.n	8003042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <SysTick_Config+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	f7ff ff8e 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <SysTick_Config+0x40>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <SysTick_Config+0x40>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff29 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003098:	f7ff ff3e 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 800309c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff8e 	bl	8002fc4 <NVIC_EncodePriority>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	bf00      	nop
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff31 	bl	8002f34 <__NVIC_EnableIRQ>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffa2 	bl	800302c <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d004      	beq.n	8003110 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e00c      	b.n	800312a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2205      	movs	r2, #5
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003144:	b2db      	uxtb	r3, r3
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003164:	4baa      	ldr	r3, [pc, #680]	; (8003410 <HAL_ETH_Init+0x2bc>)
 8003166:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e185      	b.n	8003486 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fd86 	bl	8001ca0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	4b9e      	ldr	r3, [pc, #632]	; (8003414 <HAL_ETH_Init+0x2c0>)
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	4a9d      	ldr	r2, [pc, #628]	; (8003414 <HAL_ETH_Init+0x2c0>)
 800319e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a2:	6453      	str	r3, [r2, #68]	; 0x44
 80031a4:	4b9b      	ldr	r3, [pc, #620]	; (8003414 <HAL_ETH_Init+0x2c0>)
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80031b0:	4b99      	ldr	r3, [pc, #612]	; (8003418 <HAL_ETH_Init+0x2c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a98      	ldr	r2, [pc, #608]	; (8003418 <HAL_ETH_Init+0x2c4>)
 80031b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031ba:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80031bc:	4b96      	ldr	r3, [pc, #600]	; (8003418 <HAL_ETH_Init+0x2c4>)
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4994      	ldr	r1, [pc, #592]	; (8003418 <HAL_ETH_Init+0x2c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80031e2:	f7ff fe47 	bl	8002e74 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80031e8:	e011      	b.n	800320e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80031ea:	f7ff fe43 	bl	8002e74 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031f8:	d909      	bls.n	800320e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e13b      	b.n	8003486 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e4      	bne.n	80031ea <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f023 031c 	bic.w	r3, r3, #28
 800322e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003230:	f003 ffd4 	bl	80071dc <HAL_RCC_GetHCLKFreq>
 8003234:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4a78      	ldr	r2, [pc, #480]	; (800341c <HAL_ETH_Init+0x2c8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d908      	bls.n	8003250 <HAL_ETH_Init+0xfc>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4a77      	ldr	r2, [pc, #476]	; (8003420 <HAL_ETH_Init+0x2cc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d804      	bhi.n	8003250 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e027      	b.n	80032a0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_ETH_Init+0x2cc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d908      	bls.n	800326a <HAL_ETH_Init+0x116>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4a72      	ldr	r2, [pc, #456]	; (8003424 <HAL_ETH_Init+0x2d0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d804      	bhi.n	800326a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f043 030c 	orr.w	r3, r3, #12
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	e01a      	b.n	80032a0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4a6d      	ldr	r2, [pc, #436]	; (8003424 <HAL_ETH_Init+0x2d0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d903      	bls.n	800327a <HAL_ETH_Init+0x126>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4a6c      	ldr	r2, [pc, #432]	; (8003428 <HAL_ETH_Init+0x2d4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d911      	bls.n	800329e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_ETH_Init+0x2d4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d908      	bls.n	8003294 <HAL_ETH_Init+0x140>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4a69      	ldr	r2, [pc, #420]	; (800342c <HAL_ETH_Init+0x2d8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d804      	bhi.n	8003294 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e005      	b.n	80032a0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	e000      	b.n	80032a0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800329e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80032a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032ac:	2100      	movs	r1, #0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f956 	bl	8003560 <HAL_ETH_WritePHYRegister>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80032be:	6939      	ldr	r1, [r7, #16]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f9b3 	bl	800362c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0d9      	b.n	8003486 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80032d2:	20ff      	movs	r0, #255	; 0xff
 80032d4:	f7ff fdda 	bl	8002e8c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80a7 	beq.w	8003430 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80032e2:	f7ff fdc7 	bl	8002e74 <HAL_GetTick>
 80032e6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	461a      	mov	r2, r3
 80032ee:	2101      	movs	r1, #1
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8cd 	bl	8003490 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80032f6:	f7ff fdbd 	bl	8002e74 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d90f      	bls.n	8003328 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800330c:	6939      	ldr	r1, [r7, #16]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f98c 	bl	800362c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0ae      	b.n	8003486 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0da      	beq.n	80032e8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003336:	2100      	movs	r1, #0
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f911 	bl	8003560 <HAL_ETH_WritePHYRegister>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003348:	6939      	ldr	r1, [r7, #16]
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f96e 	bl	800362c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003358:	2301      	movs	r3, #1
 800335a:	e094      	b.n	8003486 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800335c:	f7ff fd8a 	bl	8002e74 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	461a      	mov	r2, r3
 8003368:	2101      	movs	r1, #1
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f890 	bl	8003490 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003370:	f7ff fd80 	bl	8002e74 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d90f      	bls.n	80033a2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003386:	6939      	ldr	r1, [r7, #16]
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f94f 	bl	800362c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e071      	b.n	8003486 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0da      	beq.n	8003362 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	461a      	mov	r2, r3
 80033b2:	211f      	movs	r1, #31
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f86b 	bl	8003490 <HAL_ETH_ReadPHYRegister>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80033c4:	6939      	ldr	r1, [r7, #16]
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f930 	bl	800362c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80033d4:	2301      	movs	r3, #1
 80033d6:	e056      	b.n	8003486 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	e002      	b.n	80033f2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	e037      	b.n	8003474 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	e032      	b.n	8003474 <HAL_ETH_Init+0x320>
 800340e:	bf00      	nop
 8003410:	03938700 	.word	0x03938700
 8003414:	40023800 	.word	0x40023800
 8003418:	40013800 	.word	0x40013800
 800341c:	01312cff 	.word	0x01312cff
 8003420:	02160ebf 	.word	0x02160ebf
 8003424:	039386ff 	.word	0x039386ff
 8003428:	05f5e0ff 	.word	0x05f5e0ff
 800342c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	08db      	lsrs	r3, r3, #3
 8003436:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003440:	4313      	orrs	r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	2100      	movs	r1, #0
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f889 	bl	8003560 <HAL_ETH_WritePHYRegister>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003458:	6939      	ldr	r1, [r7, #16]
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8e6 	bl	800362c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e00c      	b.n	8003486 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800346c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003470:	f7ff fd0c 	bl	8002e8c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003474:	6939      	ldr	r1, [r7, #16]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8d8 	bl	800362c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop

08003490 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	460b      	mov	r3, r1
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b82      	cmp	r3, #130	; 0x82
 80034b0:	d101      	bne.n	80034b6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	e050      	b.n	8003558 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2282      	movs	r2, #130	; 0x82
 80034ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 031c 	and.w	r3, r3, #28
 80034cc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8a1b      	ldrh	r3, [r3, #16]
 80034d2:	02db      	lsls	r3, r3, #11
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80034dc:	897b      	ldrh	r3, [r7, #10]
 80034de:	019b      	lsls	r3, r3, #6
 80034e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 0302 	bic.w	r3, r3, #2
 80034f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003502:	f7ff fcb7 	bl	8002e74 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003508:	e015      	b.n	8003536 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800350a:	f7ff fcb3 	bl	8002e74 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d309      	bcc.n	800352e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e014      	b.n	8003558 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e4      	bne.n	800350a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	b29b      	uxth	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	460b      	mov	r3, r1
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b42      	cmp	r3, #66	; 0x42
 8003580:	d101      	bne.n	8003586 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003582:	2302      	movs	r3, #2
 8003584:	e04e      	b.n	8003624 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2242      	movs	r2, #66	; 0x42
 800358a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 031c 	and.w	r3, r3, #28
 800359c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8a1b      	ldrh	r3, [r3, #16]
 80035a2:	02db      	lsls	r3, r3, #11
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80035ac:	897b      	ldrh	r3, [r7, #10]
 80035ae:	019b      	lsls	r3, r3, #6
 80035b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80035dc:	f7ff fc4a 	bl	8002e74 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035e2:	e015      	b.n	8003610 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80035e4:	f7ff fc46 	bl	8002e74 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f2:	d309      	bcc.n	8003608 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e00d      	b.n	8003624 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e4      	bne.n	80035e4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0b0      	sub	sp, #192	; 0xc0
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003648:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003650:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003652:	2300      	movs	r3, #0
 8003654:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800365a:	2300      	movs	r3, #0
 800365c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003676:	663b      	str	r3, [r7, #96]	; 0x60
 8003678:	e001      	b.n	800367e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800367e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003682:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003688:	2300      	movs	r3, #0
 800368a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800368c:	2300      	movs	r3, #0
 800368e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003700:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003704:	4bac      	ldr	r3, [pc, #688]	; (80039b8 <ETH_MACDMAConfig+0x38c>)
 8003706:	4013      	ands	r3, r2
 8003708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800370c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003710:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003714:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003718:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800371e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003722:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003726:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800372c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800372e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003730:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003734:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003738:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800373a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800373c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800373e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003740:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003742:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003754:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003760:	2001      	movs	r0, #1
 8003762:	f7ff fb93 	bl	8002e8c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800376e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003770:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003774:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003778:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800377a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800377e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003784:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800378a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800378c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003790:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003794:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800379c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800379e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80037aa:	2001      	movs	r0, #1
 80037ac:	f7ff fb6e 	bl	8002e8c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80037d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80037e0:	4013      	ands	r3, r2
 80037e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80037e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80037ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80037f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80037f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80037f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80037f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80037fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80037fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003802:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003804:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003808:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800380a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800381c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003828:	2001      	movs	r0, #1
 800382a:	f7ff fb2f 	bl	8002e8c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003836:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003838:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800383c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003852:	2001      	movs	r0, #1
 8003854:	f7ff fb1a 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003860:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003870:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003874:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003886:	2304      	movs	r3, #4
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800388a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800389c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80038aa:	2300      	movs	r3, #0
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b6:	3318      	adds	r3, #24
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80038be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <ETH_MACDMAConfig+0x390>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80038ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80038cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80038ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80038d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80038d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80038d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80038d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80038d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80038da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80038dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80038de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80038e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80038e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80038e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80038ea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80038ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fe:	3318      	adds	r3, #24
 8003900:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003904:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390e:	3318      	adds	r3, #24
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003916:	2001      	movs	r0, #1
 8003918:	f7ff fab8 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003924:	3318      	adds	r3, #24
 8003926:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800392a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800392c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003930:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003934:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003938:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800393c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800393e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003940:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003942:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003946:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003954:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff fa91 	bl	8002e8c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003976:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10f      	bne.n	80039a0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003988:	331c      	adds	r3, #28
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800399c:	331c      	adds	r3, #28
 800399e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	461a      	mov	r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f809 	bl	80039c0 <ETH_MACAddressConfig>
}
 80039ae:	bf00      	nop
 80039b0:	37c0      	adds	r7, #192	; 0xc0
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	ff20810f 	.word	0xff20810f
 80039bc:	f8de3f23 	.word	0xf8de3f23

080039c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3305      	adds	r3, #5
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	3204      	adds	r2, #4
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <ETH_MACAddressConfig+0x68>)
 80039e2:	4413      	add	r3, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3303      	adds	r3, #3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	061a      	lsls	r2, r3, #24
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3302      	adds	r3, #2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3301      	adds	r3, #1
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	4313      	orrs	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <ETH_MACAddressConfig+0x6c>)
 8003a12:	4413      	add	r3, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	6013      	str	r3, [r2, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40028040 	.word	0x40028040
 8003a2c:	40028044 	.word	0x40028044

08003a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e177      	b.n	8003d3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f040 8166 	bne.w	8003d36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d00b      	beq.n	8003a8a <HAL_GPIO_Init+0x5a>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d007      	beq.n	8003a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a7e:	2b11      	cmp	r3, #17
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b12      	cmp	r3, #18
 8003a88:	d130      	bne.n	8003aec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	2203      	movs	r2, #3
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 0201 	and.w	r2, r3, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d003      	beq.n	8003b2c <HAL_GPIO_Init+0xfc>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b12      	cmp	r3, #18
 8003b2a:	d123      	bne.n	8003b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	220f      	movs	r2, #15
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	08da      	lsrs	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3208      	adds	r2, #8
 8003b6e:	69b9      	ldr	r1, [r7, #24]
 8003b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0203 	and.w	r2, r3, #3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80c0 	beq.w	8003d36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_GPIO_Init+0x320>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	4a64      	ldr	r2, [pc, #400]	; (8003d50 <HAL_GPIO_Init+0x320>)
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc6:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <HAL_GPIO_Init+0x320>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bd2:	4a60      	ldr	r2, [pc, #384]	; (8003d54 <HAL_GPIO_Init+0x324>)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a57      	ldr	r2, [pc, #348]	; (8003d58 <HAL_GPIO_Init+0x328>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d037      	beq.n	8003c6e <HAL_GPIO_Init+0x23e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a56      	ldr	r2, [pc, #344]	; (8003d5c <HAL_GPIO_Init+0x32c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d031      	beq.n	8003c6a <HAL_GPIO_Init+0x23a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a55      	ldr	r2, [pc, #340]	; (8003d60 <HAL_GPIO_Init+0x330>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02b      	beq.n	8003c66 <HAL_GPIO_Init+0x236>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a54      	ldr	r2, [pc, #336]	; (8003d64 <HAL_GPIO_Init+0x334>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d025      	beq.n	8003c62 <HAL_GPIO_Init+0x232>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a53      	ldr	r2, [pc, #332]	; (8003d68 <HAL_GPIO_Init+0x338>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01f      	beq.n	8003c5e <HAL_GPIO_Init+0x22e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a52      	ldr	r2, [pc, #328]	; (8003d6c <HAL_GPIO_Init+0x33c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d019      	beq.n	8003c5a <HAL_GPIO_Init+0x22a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a51      	ldr	r2, [pc, #324]	; (8003d70 <HAL_GPIO_Init+0x340>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_GPIO_Init+0x226>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a50      	ldr	r2, [pc, #320]	; (8003d74 <HAL_GPIO_Init+0x344>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00d      	beq.n	8003c52 <HAL_GPIO_Init+0x222>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4f      	ldr	r2, [pc, #316]	; (8003d78 <HAL_GPIO_Init+0x348>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <HAL_GPIO_Init+0x21e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4e      	ldr	r2, [pc, #312]	; (8003d7c <HAL_GPIO_Init+0x34c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_GPIO_Init+0x21a>
 8003c46:	2309      	movs	r3, #9
 8003c48:	e012      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c4a:	230a      	movs	r3, #10
 8003c4c:	e010      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	e00e      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c52:	2307      	movs	r3, #7
 8003c54:	e00c      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c56:	2306      	movs	r3, #6
 8003c58:	e00a      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c5a:	2305      	movs	r3, #5
 8003c5c:	e008      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c5e:	2304      	movs	r3, #4
 8003c60:	e006      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c62:	2303      	movs	r3, #3
 8003c64:	e004      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e002      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <HAL_GPIO_Init+0x240>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f002 0203 	and.w	r2, r2, #3
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	4093      	lsls	r3, r2
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c80:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_GPIO_Init+0x324>)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	3302      	adds	r3, #2
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c8e:	4b3c      	ldr	r3, [pc, #240]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cb8:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_GPIO_Init+0x350>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b0f      	cmp	r3, #15
 8003d40:	f67f ae84 	bls.w	8003a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d44:	bf00      	nop
 8003d46:	3724      	adds	r7, #36	; 0x24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40022400 	.word	0x40022400
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
 8003d90:	4613      	mov	r3, r2
 8003d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d94:	787b      	ldrb	r3, [r7, #1]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003da0:	e003      	b.n	8003daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	041a      	lsls	r2, r3, #16
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	619a      	str	r2, [r3, #24]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e11f      	b.n	800400a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fe f92e 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f003 f9ea 	bl	80071f4 <HAL_RCC_GetPCLK1Freq>
 8003e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4a7b      	ldr	r2, [pc, #492]	; (8004014 <HAL_I2C_Init+0x25c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d807      	bhi.n	8003e3c <HAL_I2C_Init+0x84>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a7a      	ldr	r2, [pc, #488]	; (8004018 <HAL_I2C_Init+0x260>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e006      	b.n	8003e4a <HAL_I2C_Init+0x92>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a77      	ldr	r2, [pc, #476]	; (800401c <HAL_I2C_Init+0x264>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bf94      	ite	ls
 8003e44:	2301      	movls	r3, #1
 8003e46:	2300      	movhi	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0db      	b.n	800400a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a72      	ldr	r2, [pc, #456]	; (8004020 <HAL_I2C_Init+0x268>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0c9b      	lsrs	r3, r3, #18
 8003e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a64      	ldr	r2, [pc, #400]	; (8004014 <HAL_I2C_Init+0x25c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d802      	bhi.n	8003e8c <HAL_I2C_Init+0xd4>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	e009      	b.n	8003ea0 <HAL_I2C_Init+0xe8>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4a63      	ldr	r2, [pc, #396]	; (8004024 <HAL_I2C_Init+0x26c>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4956      	ldr	r1, [pc, #344]	; (8004014 <HAL_I2C_Init+0x25c>)
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	d80d      	bhi.n	8003edc <HAL_I2C_Init+0x124>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e59      	subs	r1, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	bf38      	it	cc
 8003ed8:	2304      	movcc	r3, #4
 8003eda:	e04f      	b.n	8003f7c <HAL_I2C_Init+0x1c4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <HAL_I2C_Init+0x150>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e012      	b.n	8003f2e <HAL_I2C_Init+0x176>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e58      	subs	r0, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	0099      	lsls	r1, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Init+0x17e>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e022      	b.n	8003f7c <HAL_I2C_Init+0x1c4>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_I2C_Init+0x1a4>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1e58      	subs	r0, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	440b      	add	r3, r1
 8003f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5a:	e00f      	b.n	8003f7c <HAL_I2C_Init+0x1c4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	6809      	ldr	r1, [r1, #0]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6911      	ldr	r1, [r2, #16]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	000186a0 	.word	0x000186a0
 8004018:	001e847f 	.word	0x001e847f
 800401c:	003d08ff 	.word	0x003d08ff
 8004020:	431bde83 	.word	0x431bde83
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
 8004038:	4613      	mov	r3, r2
 800403a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7fe ff1a 	bl	8002e74 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	f040 80e0 	bne.w	8004210 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2319      	movs	r3, #25
 8004056:	2201      	movs	r2, #1
 8004058:	4970      	ldr	r1, [pc, #448]	; (800421c <HAL_I2C_Master_Transmit+0x1f4>)
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f002 f8ff 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
 8004068:	e0d3      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Master_Transmit+0x50>
 8004074:	2302      	movs	r3, #2
 8004076:	e0cc      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d007      	beq.n	800409e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	; 0x21
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2210      	movs	r2, #16
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	893a      	ldrh	r2, [r7, #8]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a50      	ldr	r2, [pc, #320]	; (8004220 <HAL_I2C_Master_Transmit+0x1f8>)
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f001 feec 	bl	8005ec4 <I2C_MasterRequestWrite>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e08d      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800410c:	e066      	b.n	80041dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f002 f979 	bl	800640a <I2C_WaitOnTXEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b04      	cmp	r3, #4
 8004124:	d107      	bne.n	8004136 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004134:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b04      	cmp	r3, #4
 8004176:	d11b      	bne.n	80041b0 <HAL_I2C_Master_Transmit+0x188>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	6a39      	ldr	r1, [r7, #32]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f002 f969 	bl	800648c <I2C_WaitOnBTFFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d107      	bne.n	80041d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e01a      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d194      	bne.n	800410e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00100002 	.word	0x00100002
 8004220:	ffff0000 	.word	0xffff0000

08004224 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	; 0x30
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	460b      	mov	r3, r1
 8004232:	817b      	strh	r3, [r7, #10]
 8004234:	4613      	mov	r3, r2
 8004236:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004238:	f7fe fe1c 	bl	8002e74 <HAL_GetTick>
 800423c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b20      	cmp	r3, #32
 8004248:	f040 820b 	bne.w	8004662 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2319      	movs	r3, #25
 8004252:	2201      	movs	r2, #1
 8004254:	497c      	ldr	r1, [pc, #496]	; (8004448 <HAL_I2C_Master_Receive+0x224>)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f002 f801 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
 8004264:	e1fe      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_I2C_Master_Receive+0x50>
 8004270:	2302      	movs	r3, #2
 8004272:	e1f7      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d007      	beq.n	800429a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2222      	movs	r2, #34	; 0x22
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2210      	movs	r2, #16
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	893a      	ldrh	r2, [r7, #8]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a5c      	ldr	r2, [pc, #368]	; (800444c <HAL_I2C_Master_Receive+0x228>)
 80042da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042dc:	8979      	ldrh	r1, [r7, #10]
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f001 fe70 	bl	8005fc8 <I2C_MasterRequestRead>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1b8      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d113      	bne.n	8004322 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e18c      	b.n	800463c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b01      	cmp	r3, #1
 8004328:	d11b      	bne.n	8004362 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e16c      	b.n	800463c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	2b02      	cmp	r3, #2
 8004368:	d11b      	bne.n	80043a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	e14c      	b.n	800463c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043c8:	e138      	b.n	800463c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	f200 80f1 	bhi.w	80045b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d123      	bne.n	8004424 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f002 f894 	bl	800650e <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e139      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004422:	e10b      	b.n	800463c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	2b02      	cmp	r3, #2
 800442a:	d14e      	bne.n	80044ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	2200      	movs	r2, #0
 8004434:	4906      	ldr	r1, [pc, #24]	; (8004450 <HAL_I2C_Master_Receive+0x22c>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f001 ff11 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e10e      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
 8004446:	bf00      	nop
 8004448:	00100002 	.word	0x00100002
 800444c:	ffff0000 	.word	0xffff0000
 8004450:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044c8:	e0b8      	b.n	800463c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2200      	movs	r2, #0
 80044d2:	4966      	ldr	r1, [pc, #408]	; (800466c <HAL_I2C_Master_Receive+0x448>)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f001 fec2 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0bf      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	2200      	movs	r2, #0
 800452e:	494f      	ldr	r1, [pc, #316]	; (800466c <HAL_I2C_Master_Receive+0x448>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 fe94 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e091      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b4:	e042      	b.n	800463c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f001 ffa7 	bl	800650e <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e04c      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d118      	bne.n	800463c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	f47f aec2 	bne.w	80043ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	3728      	adds	r7, #40	; 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	00010004 	.word	0x00010004

08004670 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	461a      	mov	r2, r3
 800467e:	4603      	mov	r3, r0
 8004680:	817b      	strh	r3, [r7, #10]
 8004682:	460b      	mov	r3, r1
 8004684:	813b      	strh	r3, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b20      	cmp	r3, #32
 8004698:	f040 809a 	bne.w	80047d0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_I2C_Mem_Read_IT+0x170>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	4a50      	ldr	r2, [pc, #320]	; (80047e4 <HAL_I2C_Mem_Read_IT+0x174>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	0a1a      	lsrs	r2, r3, #8
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009a      	lsls	r2, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d116      	bne.n	80046f0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f043 0220 	orr.w	r2, r3, #32
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e070      	b.n	80047d2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d0db      	beq.n	80046b6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_I2C_Mem_Read_IT+0x9c>
 8004708:	2302      	movs	r3, #2
 800470a:	e062      	b.n	80047d2 <HAL_I2C_Mem_Read_IT+0x162>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b01      	cmp	r3, #1
 8004720:	d007      	beq.n	8004732 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004740:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2222      	movs	r2, #34	; 0x22
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_I2C_Mem_Read_IT+0x178>)
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004774:	897a      	ldrh	r2, [r7, #10]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800477a:	893a      	ldrh	r2, [r7, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800479a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80047ca:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000000 	.word	0x20000000
 80047e4:	14f8b589 	.word	0x14f8b589
 80047e8:	ffff0000 	.word	0xffff0000

080047ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d003      	beq.n	8004824 <HAL_I2C_EV_IRQHandler+0x38>
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	f040 80b6 	bne.w	8004990 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10d      	bne.n	800485a <HAL_I2C_EV_IRQHandler+0x6e>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004844:	d003      	beq.n	800484e <HAL_I2C_EV_IRQHandler+0x62>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800484c:	d101      	bne.n	8004852 <HAL_I2C_EV_IRQHandler+0x66>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_I2C_EV_IRQHandler+0x68>
 8004852:	2300      	movs	r3, #0
 8004854:	2b01      	cmp	r3, #1
 8004856:	f000 8127 	beq.w	8004aa8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <HAL_I2C_EV_IRQHandler+0x92>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	0a5b      	lsrs	r3, r3, #9
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f001 fed1 	bl	8006618 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fd12 	bl	80052a0 <I2C_Master_SB>
 800487c:	e087      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_I2C_EV_IRQHandler+0xb2>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	0a5b      	lsrs	r3, r3, #9
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fd88 	bl	80053ac <I2C_Master_ADD10>
 800489c:	e077      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0xd2>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	0a5b      	lsrs	r3, r3, #9
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fda2 	bl	8005400 <I2C_Master_ADDR>
 80048bc:	e067      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d030      	beq.n	800492c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d8:	f000 80e8 	beq.w	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	09db      	lsrs	r3, r3, #7
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00f      	beq.n	8004908 <HAL_I2C_EV_IRQHandler+0x11c>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	0a9b      	lsrs	r3, r3, #10
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <HAL_I2C_EV_IRQHandler+0x11c>
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	089b      	lsrs	r3, r3, #2
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f9de 	bl	8004cc2 <I2C_MasterTransmit_TXE>
 8004906:	e042      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80cb 	beq.w	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	0a5b      	lsrs	r3, r3, #9
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80c4 	beq.w	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa68 	bl	8004dfa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492a:	e0bf      	b.n	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493a:	f000 80b7 	beq.w	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00f      	beq.n	800496a <HAL_I2C_EV_IRQHandler+0x17e>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	0a9b      	lsrs	r3, r3, #10
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_I2C_EV_IRQHandler+0x17e>
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fb30 	bl	8004fc8 <I2C_MasterReceive_RXNE>
 8004968:	e011      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 809a 	beq.w	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	0a5b      	lsrs	r3, r3, #9
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8093 	beq.w	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fba0 	bl	80050cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800498c:	e08e      	b.n	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
 800498e:	e08d      	b.n	8004aac <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	e007      	b.n	80049b2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d012      	beq.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1f8>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	0a5b      	lsrs	r3, r3, #9
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80049da:	69b9      	ldr	r1, [r7, #24]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 ff5e 	bl	800589e <I2C_Slave_ADDR>
 80049e2:	e066      	b.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x218>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	0a5b      	lsrs	r3, r3, #9
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 ff93 	bl	8005928 <I2C_Slave_STOPF>
 8004a02:	e056      	b.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	2b21      	cmp	r3, #33	; 0x21
 8004a08:	d002      	beq.n	8004a10 <HAL_I2C_EV_IRQHandler+0x224>
 8004a0a:	7bbb      	ldrb	r3, [r7, #14]
 8004a0c:	2b29      	cmp	r3, #41	; 0x29
 8004a0e:	d125      	bne.n	8004a5c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	09db      	lsrs	r3, r3, #7
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00f      	beq.n	8004a3c <HAL_I2C_EV_IRQHandler+0x250>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	0a9b      	lsrs	r3, r3, #10
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_I2C_EV_IRQHandler+0x250>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fe74 	bl	8005722 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a3a:	e039      	b.n	8004ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d033      	beq.n	8004ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	0a5b      	lsrs	r3, r3, #9
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02d      	beq.n	8004ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fea1 	bl	800579c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a5a:	e029      	b.n	8004ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00f      	beq.n	8004a88 <HAL_I2C_EV_IRQHandler+0x29c>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0a9b      	lsrs	r3, r3, #10
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d009      	beq.n	8004a88 <HAL_I2C_EV_IRQHandler+0x29c>
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	089b      	lsrs	r3, r3, #2
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 feac 	bl	80057de <I2C_SlaveReceive_RXNE>
 8004a86:	e014      	b.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	0a5b      	lsrs	r3, r3, #9
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 feda 	bl	800585a <I2C_SlaveReceive_BTF>
 8004aa6:	e004      	b.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004aa8:	bf00      	nop
 8004aaa:	e002      	b.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ab0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ab2:	3720      	adds	r7, #32
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <HAL_I2C_ER_IRQHandler+0x4e>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	0a5b      	lsrs	r3, r3, #9
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_I2C_ER_IRQHandler+0x78>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004b2e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	0a9b      	lsrs	r3, r3, #10
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d03f      	beq.n	8004bbc <HAL_I2C_ER_IRQHandler+0x104>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d039      	beq.n	8004bbc <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004b48:	7efb      	ldrb	r3, [r7, #27]
 8004b4a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b62:	7ebb      	ldrb	r3, [r7, #26]
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d112      	bne.n	8004b8e <HAL_I2C_ER_IRQHandler+0xd6>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10f      	bne.n	8004b8e <HAL_I2C_ER_IRQHandler+0xd6>
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b21      	cmp	r3, #33	; 0x21
 8004b72:	d008      	beq.n	8004b86 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	2b29      	cmp	r3, #41	; 0x29
 8004b78:	d005      	beq.n	8004b86 <HAL_I2C_ER_IRQHandler+0xce>
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	2b28      	cmp	r3, #40	; 0x28
 8004b7e:	d106      	bne.n	8004b8e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b21      	cmp	r3, #33	; 0x21
 8004b84:	d103      	bne.n	8004b8e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fffe 	bl	8005b88 <I2C_Slave_AF>
 8004b8c:	e016      	b.n	8004bbc <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b96:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ba0:	7efb      	ldrb	r3, [r7, #27]
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d002      	beq.n	8004bac <HAL_I2C_ER_IRQHandler+0xf4>
 8004ba6:	7efb      	ldrb	r3, [r7, #27]
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d107      	bne.n	8004bbc <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bba:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	0adb      	lsrs	r3, r3, #11
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00e      	beq.n	8004be6 <HAL_I2C_ER_IRQHandler+0x12e>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f043 0308 	orr.w	r3, r3, #8
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004be4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f001 f835 	bl	8005c68 <I2C_ITError>
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
 8004c62:	4613      	mov	r3, r2
 8004c64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d150      	bne.n	8004d8a <I2C_MasterTransmit_TXE+0xc8>
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b21      	cmp	r3, #33	; 0x21
 8004cec:	d14d      	bne.n	8004d8a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d01d      	beq.n	8004d30 <I2C_MasterTransmit_TXE+0x6e>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d01a      	beq.n	8004d30 <I2C_MasterTransmit_TXE+0x6e>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d00:	d016      	beq.n	8004d30 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d10:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2211      	movs	r2, #17
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff ff6c 	bl	8004c06 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d2e:	e060      	b.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d3e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d107      	bne.n	8004d7a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff87 	bl	8004c86 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d78:	e03b      	b.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff3f 	bl	8004c06 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d88:	e033      	b.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b21      	cmp	r3, #33	; 0x21
 8004d8e:	d005      	beq.n	8004d9c <I2C_MasterTransmit_TXE+0xda>
 8004d90:	7bbb      	ldrb	r3, [r7, #14]
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d12d      	bne.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b22      	cmp	r3, #34	; 0x22
 8004d9a:	d12a      	bne.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004db6:	e01c      	b.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d103      	bne.n	8004dcc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f898 	bl	8004efa <I2C_MemoryTransmit_TXE_BTF>
}
 8004dca:	e012      	b.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004df0:	e7ff      	b.n	8004df2 <I2C_MasterTransmit_TXE+0x130>
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b21      	cmp	r3, #33	; 0x21
 8004e12:	d165      	bne.n	8004ee0 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d012      	beq.n	8004e44 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e42:	e056      	b.n	8004ef2 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d01d      	beq.n	8004e86 <I2C_MasterTransmit_BTF+0x8c>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d01a      	beq.n	8004e86 <I2C_MasterTransmit_BTF+0x8c>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e56:	d016      	beq.n	8004e86 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e66:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2211      	movs	r2, #17
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fec1 	bl	8004c06 <HAL_I2C_MasterTxCpltCallback>
}
 8004e84:	e035      	b.n	8004ef2 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e94:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d107      	bne.n	8004ed0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fedc 	bl	8004c86 <HAL_I2C_MemTxCpltCallback>
}
 8004ece:	e010      	b.n	8004ef2 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fe94 	bl	8004c06 <HAL_I2C_MasterTxCpltCallback>
}
 8004ede:	e008      	b.n	8004ef2 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d102      	bne.n	8004ef2 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f804 	bl	8004efa <I2C_MemoryTransmit_TXE_BTF>
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11d      	bne.n	8004f46 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10b      	bne.n	8004f2a <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f22:	1c9a      	adds	r2, r3, #2
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004f28:	e048      	b.n	8004fbc <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	121b      	asrs	r3, r3, #8
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f44:	e03a      	b.n	8004fbc <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10b      	bne.n	8004f66 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f64:	e02a      	b.n	8004fbc <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d126      	bne.n	8004fbc <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b22      	cmp	r3, #34	; 0x22
 8004f78:	d108      	bne.n	8004f8c <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	e017      	b.n	8004fbc <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b21      	cmp	r3, #33	; 0x21
 8004f96:	d111      	bne.n	8004fbc <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b22      	cmp	r3, #34	; 0x22
 8004fda:	d173      	bne.n	80050c4 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d920      	bls.n	800502c <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b03      	cmp	r3, #3
 8005018:	d154      	bne.n	80050c4 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005028:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800502a:	e04b      	b.n	80050c4 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	2b02      	cmp	r3, #2
 8005032:	d047      	beq.n	80050c4 <I2C_MasterReceive_RXNE+0xfc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d002      	beq.n	8005040 <I2C_MasterReceive_RXNE+0x78>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d141      	bne.n	80050c4 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800505e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d10a      	bne.n	80050b0 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fc fb67 	bl	800177c <HAL_I2C_MemRxCpltCallback>
}
 80050ae:	e009      	b.n	80050c4 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2212      	movs	r2, #18
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fdab 	bl	8004c1a <HAL_I2C_MasterRxCpltCallback>
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d11b      	bne.n	800511c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800511a:	e0bd      	b.n	8005298 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b03      	cmp	r3, #3
 8005124:	d129      	bne.n	800517a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d00a      	beq.n	8005152 <I2C_MasterReceive_BTF+0x86>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d007      	beq.n	8005152 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005150:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005178:	e08e      	b.n	8005298 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d176      	bne.n	8005272 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d002      	beq.n	8005190 <I2C_MasterReceive_BTF+0xc4>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b10      	cmp	r3, #16
 800518e:	d108      	bne.n	80051a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e019      	b.n	80051d6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d002      	beq.n	80051ae <I2C_MasterReceive_BTF+0xe2>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d108      	bne.n	80051c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e00a      	b.n	80051d6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d007      	beq.n	80051d6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005230:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d10a      	bne.n	800525c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fc fa91 	bl	800177c <HAL_I2C_MemRxCpltCallback>
}
 800525a:	e01d      	b.n	8005298 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2212      	movs	r2, #18
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fcd5 	bl	8004c1a <HAL_I2C_MasterRxCpltCallback>
}
 8005270:	e012      	b.n	8005298 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d117      	bne.n	80052e4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052cc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052ce:	e067      	b.n	80053a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	611a      	str	r2, [r3, #16]
}
 80052e2:	e05d      	b.n	80053a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ec:	d133      	bne.n	8005356 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b21      	cmp	r3, #33	; 0x21
 80052f8:	d109      	bne.n	800530e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800530a:	611a      	str	r2, [r3, #16]
 800530c:	e008      	b.n	8005320 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	b2da      	uxtb	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <I2C_Master_SB+0x92>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d032      	beq.n	80053a0 <I2C_Master_SB+0x100>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02d      	beq.n	80053a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005352:	605a      	str	r2, [r3, #4]
}
 8005354:	e024      	b.n	80053a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10e      	bne.n	800537c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	b29b      	uxth	r3, r3
 8005364:	11db      	asrs	r3, r3, #7
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0306 	and.w	r3, r3, #6
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f063 030f 	orn	r3, r3, #15
 8005372:	b2da      	uxtb	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	611a      	str	r2, [r3, #16]
}
 800537a:	e011      	b.n	80053a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10d      	bne.n	80053a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	b29b      	uxth	r3, r3
 800538a:	11db      	asrs	r3, r3, #7
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 0306 	and.w	r3, r3, #6
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f063 030e 	orn	r3, r3, #14
 8005398:	b2da      	uxtb	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <I2C_Master_ADD10+0x24>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d011      	beq.n	80053f4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <I2C_Master_ADD10+0x38>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005400:	b480      	push	{r7}
 8005402:	b091      	sub	sp, #68	; 0x44
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800540e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b22      	cmp	r3, #34	; 0x22
 8005428:	f040 8169 	bne.w	80056fe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10f      	bne.n	8005454 <I2C_Master_ADDR+0x54>
 8005434:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d10b      	bne.n	8005454 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543c:	2300      	movs	r3, #0
 800543e:	633b      	str	r3, [r7, #48]	; 0x30
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	e160      	b.n	8005716 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11d      	bne.n	8005498 <I2C_Master_ADDR+0x98>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005464:	d118      	bne.n	8005498 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	651a      	str	r2, [r3, #80]	; 0x50
 8005496:	e13e      	b.n	8005716 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a2:	2300      	movs	r3, #0
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e115      	b.n	80056f6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	f040 808a 	bne.w	80055ea <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054dc:	d137      	bne.n	800554e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ec:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fc:	d113      	bne.n	8005526 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	e0e7      	b.n	80056f6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	623b      	str	r3, [r7, #32]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e0d3      	b.n	80056f6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b08      	cmp	r3, #8
 8005552:	d02e      	beq.n	80055b2 <I2C_Master_ADDR+0x1b2>
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	2b20      	cmp	r3, #32
 8005558:	d02b      	beq.n	80055b2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	2b12      	cmp	r3, #18
 800555e:	d102      	bne.n	8005566 <I2C_Master_ADDR+0x166>
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	2b01      	cmp	r3, #1
 8005564:	d125      	bne.n	80055b2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	2b04      	cmp	r3, #4
 800556a:	d00e      	beq.n	800558a <I2C_Master_ADDR+0x18a>
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2b02      	cmp	r3, #2
 8005570:	d00b      	beq.n	800558a <I2C_Master_ADDR+0x18a>
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b10      	cmp	r3, #16
 8005576:	d008      	beq.n	800558a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e007      	b.n	800559a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	e0a1      	b.n	80056f6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e085      	b.n	80056f6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d14d      	bne.n	8005690 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d016      	beq.n	8005628 <I2C_Master_ADDR+0x228>
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d013      	beq.n	8005628 <I2C_Master_ADDR+0x228>
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	2b10      	cmp	r3, #16
 8005604:	d010      	beq.n	8005628 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e007      	b.n	8005638 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005636:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005646:	d117      	bne.n	8005678 <I2C_Master_ADDR+0x278>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800564e:	d00b      	beq.n	8005668 <I2C_Master_ADDR+0x268>
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2b01      	cmp	r3, #1
 8005654:	d008      	beq.n	8005668 <I2C_Master_ADDR+0x268>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b08      	cmp	r3, #8
 800565a:	d005      	beq.n	8005668 <I2C_Master_ADDR+0x268>
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2b10      	cmp	r3, #16
 8005660:	d002      	beq.n	8005668 <I2C_Master_ADDR+0x268>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b20      	cmp	r3, #32
 8005666:	d107      	bne.n	8005678 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005676:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	e032      	b.n	80056f6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d117      	bne.n	80056e0 <I2C_Master_ADDR+0x2e0>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b6:	d00b      	beq.n	80056d0 <I2C_Master_ADDR+0x2d0>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d008      	beq.n	80056d0 <I2C_Master_ADDR+0x2d0>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d005      	beq.n	80056d0 <I2C_Master_ADDR+0x2d0>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d002      	beq.n	80056d0 <I2C_Master_ADDR+0x2d0>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d107      	bne.n	80056e0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056fc:	e00b      	b.n	8005716 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	e7ff      	b.n	8005716 <I2C_Master_ADDR+0x316>
 8005716:	bf00      	nop
 8005718:	3744      	adds	r7, #68	; 0x44
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d02b      	beq.n	8005794 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d114      	bne.n	8005794 <I2C_SlaveTransmit_TXE+0x72>
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b29      	cmp	r3, #41	; 0x29
 800576e:	d111      	bne.n	8005794 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2221      	movs	r2, #33	; 0x21
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2228      	movs	r2, #40	; 0x28
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fa4d 	bl	8004c2e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d011      	beq.n	80057d2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02c      	beq.n	8005852 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d114      	bne.n	8005852 <I2C_SlaveReceive_RXNE+0x74>
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b2a      	cmp	r3, #42	; 0x2a
 800582c:	d111      	bne.n	8005852 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2222      	movs	r2, #34	; 0x22
 8005842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2228      	movs	r2, #40	; 0x28
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff f9f8 	bl	8004c42 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d012      	beq.n	8005892 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058b8:	2b28      	cmp	r3, #40	; 0x28
 80058ba:	d127      	bne.n	800590c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ca:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	09db      	lsrs	r3, r3, #7
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	81bb      	strh	r3, [r7, #12]
 80058ee:	e002      	b.n	80058f6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058fe:	89ba      	ldrh	r2, [r7, #12]
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff f9a6 	bl	8004c56 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800590a:	e008      	b.n	800591e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0202 	mvn.w	r2, #2
 8005914:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005936:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005946:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005948:	2300      	movs	r3, #0
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005974:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005984:	d172      	bne.n	8005a6c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b22      	cmp	r3, #34	; 0x22
 800598a:	d002      	beq.n	8005992 <I2C_Slave_STOPF+0x6a>
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b2a      	cmp	r3, #42	; 0x2a
 8005990:	d135      	bne.n	80059fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0204 	orr.w	r2, r3, #4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fd fbb3 	bl	8003136 <HAL_DMA_GetState>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d049      	beq.n	8005a6a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	4a69      	ldr	r2, [pc, #420]	; (8005b80 <I2C_Slave_STOPF+0x258>)
 80059dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd fb85 	bl	80030f2 <HAL_DMA_Abort_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d03d      	beq.n	8005a6a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059fc:	e035      	b.n	8005a6a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fd fb7d 	bl	8003136 <HAL_DMA_GetState>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d014      	beq.n	8005a6c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	4a4e      	ldr	r2, [pc, #312]	; (8005b80 <I2C_Slave_STOPF+0x258>)
 8005a48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fd fb4f 	bl	80030f2 <HAL_DMA_Abort_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
 8005a68:	e000      	b.n	8005a6c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a6a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03e      	beq.n	8005af4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d112      	bne.n	8005aaa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d112      	bne.n	8005ade <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f043 0204 	orr.w	r2, r3, #4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f8b3 	bl	8005c68 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b02:	e039      	b.n	8005b78 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b2a      	cmp	r3, #42	; 0x2a
 8005b08:	d109      	bne.n	8005b1e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2228      	movs	r2, #40	; 0x28
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff f892 	bl	8004c42 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b28      	cmp	r3, #40	; 0x28
 8005b28:	d111      	bne.n	8005b4e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <I2C_Slave_STOPF+0x25c>)
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff f893 	bl	8004c72 <HAL_I2C_ListenCpltCallback>
}
 8005b4c:	e014      	b.n	8005b78 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	2b22      	cmp	r3, #34	; 0x22
 8005b54:	d002      	beq.n	8005b5c <I2C_Slave_STOPF+0x234>
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b22      	cmp	r3, #34	; 0x22
 8005b5a:	d10d      	bne.n	8005b78 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff f865 	bl	8004c42 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	08006161 	.word	0x08006161
 8005b84:	ffff0000 	.word	0xffff0000

08005b88 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b96:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d002      	beq.n	8005baa <I2C_Slave_AF+0x22>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d129      	bne.n	8005bfe <I2C_Slave_AF+0x76>
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b28      	cmp	r3, #40	; 0x28
 8005bae:	d126      	bne.n	8005bfe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2c      	ldr	r2, [pc, #176]	; (8005c64 <I2C_Slave_AF+0xdc>)
 8005bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bc4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bde:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff f83b 	bl	8004c72 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bfc:	e02e      	b.n	8005c5c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b21      	cmp	r3, #33	; 0x21
 8005c02:	d126      	bne.n	8005c52 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <I2C_Slave_AF+0xdc>)
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2221      	movs	r2, #33	; 0x21
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c2e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c38:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c48:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fe ffef 	bl	8004c2e <HAL_I2C_SlaveTxCpltCallback>
}
 8005c50:	e004      	b.n	8005c5c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c5a:	615a      	str	r2, [r3, #20]
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	ffff0000 	.word	0xffff0000

08005c68 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d10a      	bne.n	8005c9a <I2C_ITError+0x32>
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b22      	cmp	r3, #34	; 0x22
 8005c88:	d107      	bne.n	8005c9a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ca0:	2b28      	cmp	r3, #40	; 0x28
 8005ca2:	d107      	bne.n	8005cb4 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2228      	movs	r2, #40	; 0x28
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cb2:	e015      	b.n	8005ce0 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc2:	d006      	beq.n	8005cd2 <I2C_ITError+0x6a>
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b60      	cmp	r3, #96	; 0x60
 8005cc8:	d003      	beq.n	8005cd2 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cee:	d162      	bne.n	8005db6 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d020      	beq.n	8005d50 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	4a6a      	ldr	r2, [pc, #424]	; (8005ebc <I2C_ITError+0x254>)
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fd f9e9 	bl	80030f2 <HAL_DMA_Abort_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8089 	beq.w	8005e3a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4798      	blx	r3
 8005d4e:	e074      	b.n	8005e3a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	4a59      	ldr	r2, [pc, #356]	; (8005ebc <I2C_ITError+0x254>)
 8005d56:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd f9c8 	bl	80030f2 <HAL_DMA_Abort_IT>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d068      	beq.n	8005e3a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d10b      	bne.n	8005d8e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	e041      	b.n	8005e3a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b60      	cmp	r3, #96	; 0x60
 8005dc0:	d125      	bne.n	8005e0e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d10b      	bne.n	8005df6 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fe ff51 	bl	8004cae <HAL_I2C_AbortCpltCallback>
 8005e0c:	e015      	b.n	8005e3a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d10b      	bne.n	8005e34 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fe ff30 	bl	8004c9a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d113      	bne.n	8005eb4 <I2C_ITError+0x24c>
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b28      	cmp	r3, #40	; 0x28
 8005e90:	d110      	bne.n	8005eb4 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <I2C_ITError+0x258>)
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fe fedf 	bl	8004c72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	08006161 	.word	0x08006161
 8005ec0:	ffff0000 	.word	0xffff0000

08005ec4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d006      	beq.n	8005eee <I2C_MasterRequestWrite+0x2a>
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d003      	beq.n	8005eee <I2C_MasterRequestWrite+0x2a>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eec:	d108      	bne.n	8005f00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e00b      	b.n	8005f18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	2b12      	cmp	r3, #18
 8005f06:	d107      	bne.n	8005f18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f99a 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00c      	beq.n	8005f4a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e035      	b.n	8005fb6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f52:	d108      	bne.n	8005f66 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f54:	897b      	ldrh	r3, [r7, #10]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f62:	611a      	str	r2, [r3, #16]
 8005f64:	e01b      	b.n	8005f9e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f66:	897b      	ldrh	r3, [r7, #10]
 8005f68:	11db      	asrs	r3, r3, #7
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0306 	and.w	r3, r3, #6
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f063 030f 	orn	r3, r3, #15
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	490f      	ldr	r1, [pc, #60]	; (8005fc0 <I2C_MasterRequestWrite+0xfc>)
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f9c1 	bl	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e010      	b.n	8005fb6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f94:	897b      	ldrh	r3, [r7, #10]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4908      	ldr	r1, [pc, #32]	; (8005fc4 <I2C_MasterRequestWrite+0x100>)
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f9b1 	bl	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	00010008 	.word	0x00010008
 8005fc4:	00010002 	.word	0x00010002

08005fc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d006      	beq.n	8006002 <I2C_MasterRequestRead+0x3a>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d003      	beq.n	8006002 <I2C_MasterRequestRead+0x3a>
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006000:	d108      	bne.n	8006014 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e00b      	b.n	800602c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	2b11      	cmp	r3, #17
 800601a:	d107      	bne.n	800602c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f910 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00c      	beq.n	800605e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e078      	b.n	8006150 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006066:	d108      	bne.n	800607a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006068:	897b      	ldrh	r3, [r7, #10]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	611a      	str	r2, [r3, #16]
 8006078:	e05e      	b.n	8006138 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800607a:	897b      	ldrh	r3, [r7, #10]
 800607c:	11db      	asrs	r3, r3, #7
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 0306 	and.w	r3, r3, #6
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f063 030f 	orn	r3, r3, #15
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4930      	ldr	r1, [pc, #192]	; (8006158 <I2C_MasterRequestRead+0x190>)
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f937 	bl	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e053      	b.n	8006150 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060a8:	897b      	ldrh	r3, [r7, #10]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4929      	ldr	r1, [pc, #164]	; (800615c <I2C_MasterRequestRead+0x194>)
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f927 	bl	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e043      	b.n	8006150 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ec:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f8af 	bl	800625e <I2C_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800611a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e017      	b.n	8006150 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006120:	897b      	ldrh	r3, [r7, #10]
 8006122:	11db      	asrs	r3, r3, #7
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0306 	and.w	r3, r3, #6
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f063 030e 	orn	r3, r3, #14
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4907      	ldr	r1, [pc, #28]	; (800615c <I2C_MasterRequestRead+0x194>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f8e4 	bl	800630c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	00010008 	.word	0x00010008
 800615c:	00010002 	.word	0x00010002

08006160 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	2200      	movs	r2, #0
 8006184:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	2200      	movs	r2, #0
 8006194:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b8:	2200      	movs	r2, #0
 80061ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	2200      	movs	r2, #0
 80061ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b60      	cmp	r3, #96	; 0x60
 80061e6:	d10e      	bne.n	8006206 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7fe fd55 	bl	8004cae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006204:	e027      	b.n	8006256 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006206:	7afb      	ldrb	r3, [r7, #11]
 8006208:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800620c:	2b28      	cmp	r3, #40	; 0x28
 800620e:	d117      	bne.n	8006240 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800622e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2228      	movs	r2, #40	; 0x28
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800623e:	e007      	b.n	8006250 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7fe fd22 	bl	8004c9a <HAL_I2C_ErrorCallback>
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800626e:	e025      	b.n	80062bc <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d021      	beq.n	80062bc <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006278:	f7fc fdfc 	bl	8002e74 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d302      	bcc.n	800628e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d116      	bne.n	80062bc <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	f043 0220 	orr.w	r2, r3, #32
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e023      	b.n	8006304 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	0c1b      	lsrs	r3, r3, #16
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d10d      	bne.n	80062e2 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	43da      	mvns	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	e00c      	b.n	80062fc <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	43da      	mvns	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d0b6      	beq.n	8006270 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800631a:	e051      	b.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632a:	d123      	bne.n	8006374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	f043 0204 	orr.w	r2, r3, #4
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e046      	b.n	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637a:	d021      	beq.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637c:	f7fc fd7a 	bl	8002e74 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d116      	bne.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e020      	b.n	8006402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10c      	bne.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	43da      	mvns	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	e00b      	b.n	80063fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d18d      	bne.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006416:	e02d      	b.n	8006474 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f8ce 	bl	80065ba <I2C_IsAcknowledgeFailed>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e02d      	b.n	8006484 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642e:	d021      	beq.n	8006474 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006430:	f7fc fd20 	bl	8002e74 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	d302      	bcc.n	8006446 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d116      	bne.n	8006474 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	f043 0220 	orr.w	r2, r3, #32
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e007      	b.n	8006484 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d1ca      	bne.n	8006418 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006498:	e02d      	b.n	80064f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f88d 	bl	80065ba <I2C_IsAcknowledgeFailed>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e02d      	b.n	8006506 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d021      	beq.n	80064f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b2:	f7fc fcdf 	bl	8002e74 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d302      	bcc.n	80064c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d116      	bne.n	80064f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e007      	b.n	8006506 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b04      	cmp	r3, #4
 8006502:	d1ca      	bne.n	800649a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800651a:	e042      	b.n	80065a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b10      	cmp	r3, #16
 8006528:	d119      	bne.n	800655e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f06f 0210 	mvn.w	r2, #16
 8006532:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e029      	b.n	80065b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fc fc89 	bl	8002e74 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d116      	bne.n	80065a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0220 	orr.w	r2, r3, #32
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e007      	b.n	80065b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d1b5      	bne.n	800651c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d11b      	bne.n	800660a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f043 0204 	orr.w	r2, r3, #4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006628:	d103      	bne.n	8006632 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006630:	e007      	b.n	8006642 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800663a:	d102      	bne.n	8006642 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2208      	movs	r2, #8
 8006640:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b20      	cmp	r3, #32
 8006662:	d129      	bne.n	80066b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2224      	movs	r2, #36	; 0x24
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0201 	bic.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0210 	bic.w	r2, r2, #16
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d12a      	bne.n	8006736 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2224      	movs	r2, #36	; 0x24
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	f023 030f 	bic.w	r3, r3, #15
 8006706:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	b29a      	uxth	r2, r3
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	4313      	orrs	r3, r2
 8006710:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	89fa      	ldrh	r2, [r7, #14]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e000      	b.n	8006738 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006736:	2302      	movs	r3, #2
  }
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006746:	b08f      	sub	sp, #60	; 0x3c
 8006748:	af0a      	add	r7, sp, #40	; 0x28
 800674a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e10f      	b.n	8006976 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7fc fa95 	bl	8002ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2203      	movs	r2, #3
 800677a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f002 f90e 	bl	80089b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	687e      	ldr	r6, [r7, #4]
 80067a2:	466d      	mov	r5, sp
 80067a4:	f106 0410 	add.w	r4, r6, #16
 80067a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80067b8:	1d33      	adds	r3, r6, #4
 80067ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067bc:	6838      	ldr	r0, [r7, #0]
 80067be:	f002 f899 	bl	80088f4 <USB_CoreInit>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0d0      	b.n	8006976 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f002 f8fc 	bl	80089d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067e0:	2300      	movs	r3, #0
 80067e2:	73fb      	strb	r3, [r7, #15]
 80067e4:	e04a      	b.n	800687c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067e6:	7bfa      	ldrb	r2, [r7, #15]
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4613      	mov	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	333d      	adds	r3, #61	; 0x3d
 80067f6:	2201      	movs	r2, #1
 80067f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067fa:	7bfa      	ldrb	r2, [r7, #15]
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	333c      	adds	r3, #60	; 0x3c
 800680a:	7bfa      	ldrb	r2, [r7, #15]
 800680c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800680e:	7bfa      	ldrb	r2, [r7, #15]
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	b298      	uxth	r0, r3
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3342      	adds	r3, #66	; 0x42
 8006822:	4602      	mov	r2, r0
 8006824:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006826:	7bfa      	ldrb	r2, [r7, #15]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	333f      	adds	r3, #63	; 0x3f
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800683a:	7bfa      	ldrb	r2, [r7, #15]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	3344      	adds	r3, #68	; 0x44
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800684e:	7bfa      	ldrb	r2, [r7, #15]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	3348      	adds	r3, #72	; 0x48
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006862:	7bfa      	ldrb	r2, [r7, #15]
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	3350      	adds	r3, #80	; 0x50
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	3301      	adds	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
 800687c:	7bfa      	ldrb	r2, [r7, #15]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d3af      	bcc.n	80067e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
 800688a:	e044      	b.n	8006916 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800688c:	7bfa      	ldrb	r2, [r7, #15]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80068b4:	7bfa      	ldrb	r2, [r7, #15]
 80068b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068b8:	7bfa      	ldrb	r2, [r7, #15]
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068ce:	7bfa      	ldrb	r2, [r7, #15]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068e4:	7bfa      	ldrb	r2, [r7, #15]
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	1a9b      	subs	r3, r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	3301      	adds	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
 8006916:	7bfa      	ldrb	r2, [r7, #15]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d3b5      	bcc.n	800688c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	687e      	ldr	r6, [r7, #4]
 8006928:	466d      	mov	r5, sp
 800692a:	f106 0410 	add.w	r4, r6, #16
 800692e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006936:	e894 0003 	ldmia.w	r4, {r0, r1}
 800693a:	e885 0003 	stmia.w	r5, {r0, r1}
 800693e:	1d33      	adds	r3, r6, #4
 8006940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006942:	6838      	ldr	r0, [r7, #0]
 8006944:	f002 f872 	bl	8008a2c <USB_DevInit>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e00d      	b.n	8006976 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f002 fa21 	bl	8008db6 <USB_DevDisconnect>

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e25b      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d075      	beq.n	8006a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800699e:	4ba3      	ldr	r3, [pc, #652]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 030c 	and.w	r3, r3, #12
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d00c      	beq.n	80069c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069aa:	4ba0      	ldr	r3, [pc, #640]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d112      	bne.n	80069dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069b6:	4b9d      	ldr	r3, [pc, #628]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c2:	d10b      	bne.n	80069dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c4:	4b99      	ldr	r3, [pc, #612]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d05b      	beq.n	8006a88 <HAL_RCC_OscConfig+0x108>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d157      	bne.n	8006a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e236      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e4:	d106      	bne.n	80069f4 <HAL_RCC_OscConfig+0x74>
 80069e6:	4b91      	ldr	r3, [pc, #580]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a90      	ldr	r2, [pc, #576]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	e01d      	b.n	8006a30 <HAL_RCC_OscConfig+0xb0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069fc:	d10c      	bne.n	8006a18 <HAL_RCC_OscConfig+0x98>
 80069fe:	4b8b      	ldr	r3, [pc, #556]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a8a      	ldr	r2, [pc, #552]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	4b88      	ldr	r3, [pc, #544]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a87      	ldr	r2, [pc, #540]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e00b      	b.n	8006a30 <HAL_RCC_OscConfig+0xb0>
 8006a18:	4b84      	ldr	r3, [pc, #528]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a83      	ldr	r2, [pc, #524]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	4b81      	ldr	r3, [pc, #516]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a80      	ldr	r2, [pc, #512]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d013      	beq.n	8006a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7fc fa1c 	bl	8002e74 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a40:	f7fc fa18 	bl	8002e74 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e1fb      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a52:	4b76      	ldr	r3, [pc, #472]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0xc0>
 8006a5e:	e014      	b.n	8006a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a60:	f7fc fa08 	bl	8002e74 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a68:	f7fc fa04 	bl	8002e74 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b64      	cmp	r3, #100	; 0x64
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e1e7      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7a:	4b6c      	ldr	r3, [pc, #432]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f0      	bne.n	8006a68 <HAL_RCC_OscConfig+0xe8>
 8006a86:	e000      	b.n	8006a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d063      	beq.n	8006b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a96:	4b65      	ldr	r3, [pc, #404]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aa2:	4b62      	ldr	r3, [pc, #392]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d11c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aae:	4b5f      	ldr	r3, [pc, #380]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d116      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aba:	4b5c      	ldr	r3, [pc, #368]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x152>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d001      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e1bb      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad2:	4b56      	ldr	r3, [pc, #344]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4952      	ldr	r1, [pc, #328]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae6:	e03a      	b.n	8006b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d020      	beq.n	8006b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af0:	4b4f      	ldr	r3, [pc, #316]	; (8006c30 <HAL_RCC_OscConfig+0x2b0>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af6:	f7fc f9bd 	bl	8002e74 <HAL_GetTick>
 8006afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006afe:	f7fc f9b9 	bl	8002e74 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e19c      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b10:	4b46      	ldr	r3, [pc, #280]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0f0      	beq.n	8006afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1c:	4b43      	ldr	r3, [pc, #268]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	4940      	ldr	r1, [pc, #256]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	600b      	str	r3, [r1, #0]
 8006b30:	e015      	b.n	8006b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b32:	4b3f      	ldr	r3, [pc, #252]	; (8006c30 <HAL_RCC_OscConfig+0x2b0>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b38:	f7fc f99c 	bl	8002e74 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b40:	f7fc f998 	bl	8002e74 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e17b      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b52:	4b36      	ldr	r3, [pc, #216]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d030      	beq.n	8006bcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b72:	4b30      	ldr	r3, [pc, #192]	; (8006c34 <HAL_RCC_OscConfig+0x2b4>)
 8006b74:	2201      	movs	r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b78:	f7fc f97c 	bl	8002e74 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b80:	f7fc f978 	bl	8002e74 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e15b      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b92:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f0      	beq.n	8006b80 <HAL_RCC_OscConfig+0x200>
 8006b9e:	e015      	b.n	8006bcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba0:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <HAL_RCC_OscConfig+0x2b4>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ba6:	f7fc f965 	bl	8002e74 <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bae:	f7fc f961 	bl	8002e74 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e144      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f0      	bne.n	8006bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80a0 	beq.w	8006d1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10f      	bne.n	8006c0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bfa:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c02:	60bb      	str	r3, [r7, #8]
 8006c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c06:	2301      	movs	r3, #1
 8006c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCC_OscConfig+0x2b8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d121      	bne.n	8006c5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c16:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <HAL_RCC_OscConfig+0x2b8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <HAL_RCC_OscConfig+0x2b8>)
 8006c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c22:	f7fc f927 	bl	8002e74 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c28:	e011      	b.n	8006c4e <HAL_RCC_OscConfig+0x2ce>
 8006c2a:	bf00      	nop
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	42470000 	.word	0x42470000
 8006c34:	42470e80 	.word	0x42470e80
 8006c38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3c:	f7fc f91a 	bl	8002e74 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e0fd      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4e:	4b81      	ldr	r3, [pc, #516]	; (8006e54 <HAL_RCC_OscConfig+0x4d4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d106      	bne.n	8006c70 <HAL_RCC_OscConfig+0x2f0>
 8006c62:	4b7d      	ldr	r3, [pc, #500]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	4a7c      	ldr	r2, [pc, #496]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6e:	e01c      	b.n	8006caa <HAL_RCC_OscConfig+0x32a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d10c      	bne.n	8006c92 <HAL_RCC_OscConfig+0x312>
 8006c78:	4b77      	ldr	r3, [pc, #476]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	4a76      	ldr	r2, [pc, #472]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c7e:	f043 0304 	orr.w	r3, r3, #4
 8006c82:	6713      	str	r3, [r2, #112]	; 0x70
 8006c84:	4b74      	ldr	r3, [pc, #464]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	4a73      	ldr	r2, [pc, #460]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c90:	e00b      	b.n	8006caa <HAL_RCC_OscConfig+0x32a>
 8006c92:	4b71      	ldr	r3, [pc, #452]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	4a70      	ldr	r2, [pc, #448]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9e:	4b6e      	ldr	r3, [pc, #440]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	4a6d      	ldr	r2, [pc, #436]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006ca4:	f023 0304 	bic.w	r3, r3, #4
 8006ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d015      	beq.n	8006cde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb2:	f7fc f8df 	bl	8002e74 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cba:	f7fc f8db 	bl	8002e74 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0bc      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd0:	4b61      	ldr	r3, [pc, #388]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0ee      	beq.n	8006cba <HAL_RCC_OscConfig+0x33a>
 8006cdc:	e014      	b.n	8006d08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cde:	f7fc f8c9 	bl	8002e74 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce4:	e00a      	b.n	8006cfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce6:	f7fc f8c5 	bl	8002e74 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e0a6      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfc:	4b56      	ldr	r3, [pc, #344]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1ee      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d105      	bne.n	8006d1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0e:	4b52      	ldr	r3, [pc, #328]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	4a51      	ldr	r2, [pc, #324]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8092 	beq.w	8006e48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d24:	4b4c      	ldr	r3, [pc, #304]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 030c 	and.w	r3, r3, #12
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d05c      	beq.n	8006dea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d141      	bne.n	8006dbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d38:	4b48      	ldr	r3, [pc, #288]	; (8006e5c <HAL_RCC_OscConfig+0x4dc>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d3e:	f7fc f899 	bl	8002e74 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d46:	f7fc f895 	bl	8002e74 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e078      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d58:	4b3f      	ldr	r3, [pc, #252]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f0      	bne.n	8006d46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	019b      	lsls	r3, r3, #6
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	061b      	lsls	r3, r3, #24
 8006d88:	4933      	ldr	r1, [pc, #204]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d8e:	4b33      	ldr	r3, [pc, #204]	; (8006e5c <HAL_RCC_OscConfig+0x4dc>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d94:	f7fc f86e 	bl	8002e74 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fc f86a 	bl	8002e74 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e04d      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dae:	4b2a      	ldr	r3, [pc, #168]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0x41c>
 8006dba:	e045      	b.n	8006e48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <HAL_RCC_OscConfig+0x4dc>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc2:	f7fc f857 	bl	8002e74 <HAL_GetTick>
 8006dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dca:	f7fc f853 	bl	8002e74 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e036      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ddc:	4b1e      	ldr	r3, [pc, #120]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f0      	bne.n	8006dca <HAL_RCC_OscConfig+0x44a>
 8006de8:	e02e      	b.n	8006e48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e029      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006df6:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <HAL_RCC_OscConfig+0x4d8>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d11c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d115      	bne.n	8006e44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e1e:	4013      	ands	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d10d      	bne.n	8006e44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d106      	bne.n	8006e44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d001      	beq.n	8006e48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40007000 	.word	0x40007000
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	42470060 	.word	0x42470060

08006e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0cc      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e74:	4b68      	ldr	r3, [pc, #416]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d90c      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e82:	4b65      	ldr	r3, [pc, #404]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b63      	ldr	r3, [pc, #396]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0b8      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb4:	4b59      	ldr	r3, [pc, #356]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4a58      	ldr	r2, [pc, #352]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ecc:	4b53      	ldr	r3, [pc, #332]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4a52      	ldr	r2, [pc, #328]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed8:	4b50      	ldr	r3, [pc, #320]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	494d      	ldr	r1, [pc, #308]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d044      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b47      	ldr	r3, [pc, #284]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d119      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d003      	beq.n	8006f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1e:	4b3f      	ldr	r3, [pc, #252]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e06f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f2e:	4b3b      	ldr	r3, [pc, #236]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e067      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f3e:	4b37      	ldr	r3, [pc, #220]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f023 0203 	bic.w	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4934      	ldr	r1, [pc, #208]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f50:	f7fb ff90 	bl	8002e74 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f56:	e00a      	b.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f58:	f7fb ff8c 	bl	8002e74 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e04f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6e:	4b2b      	ldr	r3, [pc, #172]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 020c 	and.w	r2, r3, #12
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d1eb      	bne.n	8006f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f80:	4b25      	ldr	r3, [pc, #148]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d20c      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b22      	ldr	r3, [pc, #136]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b20      	ldr	r3, [pc, #128]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e032      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4916      	ldr	r1, [pc, #88]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	490e      	ldr	r1, [pc, #56]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fe6:	f000 f821 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8006fea:	4601      	mov	r1, r0
 8006fec:	4b0b      	ldr	r3, [pc, #44]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	4a0a      	ldr	r2, [pc, #40]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff8:	5cd3      	ldrb	r3, [r2, r3]
 8006ffa:	fa21 f303 	lsr.w	r3, r1, r3
 8006ffe:	4a09      	ldr	r2, [pc, #36]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <HAL_RCC_ClockConfig+0x1c8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fb fef0 	bl	8002dec <HAL_InitTick>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40023c00 	.word	0x40023c00
 800701c:	40023800 	.word	0x40023800
 8007020:	0800b9dc 	.word	0x0800b9dc
 8007024:	20000000 	.word	0x20000000
 8007028:	20000004 	.word	0x20000004

0800702c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800702c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	2300      	movs	r3, #0
 800703c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007042:	4b63      	ldr	r3, [pc, #396]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b04      	cmp	r3, #4
 800704c:	d007      	beq.n	800705e <HAL_RCC_GetSysClockFreq+0x32>
 800704e:	2b08      	cmp	r3, #8
 8007050:	d008      	beq.n	8007064 <HAL_RCC_GetSysClockFreq+0x38>
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80b4 	bne.w	80071c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007058:	4b5e      	ldr	r3, [pc, #376]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800705a:	60bb      	str	r3, [r7, #8]
       break;
 800705c:	e0b3      	b.n	80071c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800705e:	4b5e      	ldr	r3, [pc, #376]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007060:	60bb      	str	r3, [r7, #8]
      break;
 8007062:	e0b0      	b.n	80071c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007064:	4b5a      	ldr	r3, [pc, #360]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800706c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800706e:	4b58      	ldr	r3, [pc, #352]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d04a      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800707a:	4b55      	ldr	r3, [pc, #340]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	099b      	lsrs	r3, r3, #6
 8007080:	f04f 0400 	mov.w	r4, #0
 8007084:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	ea03 0501 	and.w	r5, r3, r1
 8007090:	ea04 0602 	and.w	r6, r4, r2
 8007094:	4629      	mov	r1, r5
 8007096:	4632      	mov	r2, r6
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	f04f 0400 	mov.w	r4, #0
 80070a0:	0154      	lsls	r4, r2, #5
 80070a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80070a6:	014b      	lsls	r3, r1, #5
 80070a8:	4619      	mov	r1, r3
 80070aa:	4622      	mov	r2, r4
 80070ac:	1b49      	subs	r1, r1, r5
 80070ae:	eb62 0206 	sbc.w	r2, r2, r6
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	f04f 0400 	mov.w	r4, #0
 80070ba:	0194      	lsls	r4, r2, #6
 80070bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80070c0:	018b      	lsls	r3, r1, #6
 80070c2:	1a5b      	subs	r3, r3, r1
 80070c4:	eb64 0402 	sbc.w	r4, r4, r2
 80070c8:	f04f 0100 	mov.w	r1, #0
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	00e2      	lsls	r2, r4, #3
 80070d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80070d6:	00d9      	lsls	r1, r3, #3
 80070d8:	460b      	mov	r3, r1
 80070da:	4614      	mov	r4, r2
 80070dc:	195b      	adds	r3, r3, r5
 80070de:	eb44 0406 	adc.w	r4, r4, r6
 80070e2:	f04f 0100 	mov.w	r1, #0
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	0262      	lsls	r2, r4, #9
 80070ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80070f0:	0259      	lsls	r1, r3, #9
 80070f2:	460b      	mov	r3, r1
 80070f4:	4614      	mov	r4, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	4621      	mov	r1, r4
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f04f 0400 	mov.w	r4, #0
 8007100:	461a      	mov	r2, r3
 8007102:	4623      	mov	r3, r4
 8007104:	f7f9 fdb0 	bl	8000c68 <__aeabi_uldivmod>
 8007108:	4603      	mov	r3, r0
 800710a:	460c      	mov	r4, r1
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	e049      	b.n	80071a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007110:	4b2f      	ldr	r3, [pc, #188]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	099b      	lsrs	r3, r3, #6
 8007116:	f04f 0400 	mov.w	r4, #0
 800711a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	ea03 0501 	and.w	r5, r3, r1
 8007126:	ea04 0602 	and.w	r6, r4, r2
 800712a:	4629      	mov	r1, r5
 800712c:	4632      	mov	r2, r6
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	f04f 0400 	mov.w	r4, #0
 8007136:	0154      	lsls	r4, r2, #5
 8007138:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800713c:	014b      	lsls	r3, r1, #5
 800713e:	4619      	mov	r1, r3
 8007140:	4622      	mov	r2, r4
 8007142:	1b49      	subs	r1, r1, r5
 8007144:	eb62 0206 	sbc.w	r2, r2, r6
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	f04f 0400 	mov.w	r4, #0
 8007150:	0194      	lsls	r4, r2, #6
 8007152:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007156:	018b      	lsls	r3, r1, #6
 8007158:	1a5b      	subs	r3, r3, r1
 800715a:	eb64 0402 	sbc.w	r4, r4, r2
 800715e:	f04f 0100 	mov.w	r1, #0
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	00e2      	lsls	r2, r4, #3
 8007168:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800716c:	00d9      	lsls	r1, r3, #3
 800716e:	460b      	mov	r3, r1
 8007170:	4614      	mov	r4, r2
 8007172:	195b      	adds	r3, r3, r5
 8007174:	eb44 0406 	adc.w	r4, r4, r6
 8007178:	f04f 0100 	mov.w	r1, #0
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	02a2      	lsls	r2, r4, #10
 8007182:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007186:	0299      	lsls	r1, r3, #10
 8007188:	460b      	mov	r3, r1
 800718a:	4614      	mov	r4, r2
 800718c:	4618      	mov	r0, r3
 800718e:	4621      	mov	r1, r4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f04f 0400 	mov.w	r4, #0
 8007196:	461a      	mov	r2, r3
 8007198:	4623      	mov	r3, r4
 800719a:	f7f9 fd65 	bl	8000c68 <__aeabi_uldivmod>
 800719e:	4603      	mov	r3, r0
 80071a0:	460c      	mov	r4, r1
 80071a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071a4:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	3301      	adds	r3, #1
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071bc:	60bb      	str	r3, [r7, #8]
      break;
 80071be:	e002      	b.n	80071c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071c2:	60bb      	str	r3, [r7, #8]
      break;
 80071c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071c6:	68bb      	ldr	r3, [r7, #8]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d0:	40023800 	.word	0x40023800
 80071d4:	00f42400 	.word	0x00f42400
 80071d8:	007a1200 	.word	0x007a1200

080071dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071e2:	681b      	ldr	r3, [r3, #0]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000000 	.word	0x20000000

080071f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071f8:	f7ff fff0 	bl	80071dc <HAL_RCC_GetHCLKFreq>
 80071fc:	4601      	mov	r1, r0
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	0a9b      	lsrs	r3, r3, #10
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	4a03      	ldr	r2, [pc, #12]	; (8007218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800720a:	5cd3      	ldrb	r3, [r2, r3]
 800720c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007210:	4618      	mov	r0, r3
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40023800 	.word	0x40023800
 8007218:	0800b9ec 	.word	0x0800b9ec

0800721c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007220:	f7ff ffdc 	bl	80071dc <HAL_RCC_GetHCLKFreq>
 8007224:	4601      	mov	r1, r0
 8007226:	4b05      	ldr	r3, [pc, #20]	; (800723c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	0b5b      	lsrs	r3, r3, #13
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	4a03      	ldr	r2, [pc, #12]	; (8007240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007232:	5cd3      	ldrb	r3, [r2, r3]
 8007234:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40023800 	.word	0x40023800
 8007240:	0800b9ec 	.word	0x0800b9ec

08007244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e01d      	b.n	8007292 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7fb fa84 	bl	8002778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f000 fb10 	bl	80078a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d007      	beq.n	80072d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e01d      	b.n	8007330 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f815 	bl	8007338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f000 fac1 	bl	80078a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b02      	cmp	r3, #2
 8007360:	d122      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b02      	cmp	r3, #2
 800736e:	d11b      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0202 	mvn.w	r2, #2
 8007378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa6b 	bl	800786a <HAL_TIM_IC_CaptureCallback>
 8007394:	e005      	b.n	80073a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa5d 	bl	8007856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fa6e 	bl	800787e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d122      	bne.n	80073fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d11b      	bne.n	80073fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f06f 0204 	mvn.w	r2, #4
 80073cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2202      	movs	r2, #2
 80073d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa41 	bl	800786a <HAL_TIM_IC_CaptureCallback>
 80073e8:	e005      	b.n	80073f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa33 	bl	8007856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa44 	bl	800787e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b08      	cmp	r3, #8
 8007408:	d122      	bne.n	8007450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b08      	cmp	r3, #8
 8007416:	d11b      	bne.n	8007450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0208 	mvn.w	r2, #8
 8007420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2204      	movs	r2, #4
 8007426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa17 	bl	800786a <HAL_TIM_IC_CaptureCallback>
 800743c:	e005      	b.n	800744a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa09 	bl	8007856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa1a 	bl	800787e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0310 	and.w	r3, r3, #16
 800745a:	2b10      	cmp	r3, #16
 800745c:	d122      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b10      	cmp	r3, #16
 800746a:	d11b      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0210 	mvn.w	r2, #16
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2208      	movs	r2, #8
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9ed 	bl	800786a <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9df 	bl	8007856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f9f0 	bl	800787e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d10e      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d107      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0201 	mvn.w	r2, #1
 80074c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fa f96c 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074da:	2b80      	cmp	r3, #128	; 0x80
 80074dc:	d10e      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	2b80      	cmp	r3, #128	; 0x80
 80074ea:	d107      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fd46 	bl	8007f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	d10e      	bne.n	8007528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d107      	bne.n	8007528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f9b5 	bl	8007892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b20      	cmp	r3, #32
 8007534:	d10e      	bne.n	8007554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b20      	cmp	r3, #32
 8007542:	d107      	bne.n	8007554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0220 	mvn.w	r2, #32
 800754c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fd10 	bl	8007f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007572:	2302      	movs	r3, #2
 8007574:	e0b4      	b.n	80076e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b0c      	cmp	r3, #12
 800758a:	f200 809f 	bhi.w	80076cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800758e:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075c9 	.word	0x080075c9
 8007598:	080076cd 	.word	0x080076cd
 800759c:	080076cd 	.word	0x080076cd
 80075a0:	080076cd 	.word	0x080076cd
 80075a4:	08007609 	.word	0x08007609
 80075a8:	080076cd 	.word	0x080076cd
 80075ac:	080076cd 	.word	0x080076cd
 80075b0:	080076cd 	.word	0x080076cd
 80075b4:	0800764b 	.word	0x0800764b
 80075b8:	080076cd 	.word	0x080076cd
 80075bc:	080076cd 	.word	0x080076cd
 80075c0:	080076cd 	.word	0x080076cd
 80075c4:	0800768b 	.word	0x0800768b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fa0a 	bl	80079e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6999      	ldr	r1, [r3, #24]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	619a      	str	r2, [r3, #24]
      break;
 8007606:	e062      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fa5a 	bl	8007ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6999      	ldr	r1, [r3, #24]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	619a      	str	r2, [r3, #24]
      break;
 8007648:	e041      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 faaf 	bl	8007bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0208 	orr.w	r2, r2, #8
 8007664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69da      	ldr	r2, [r3, #28]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0204 	bic.w	r2, r2, #4
 8007674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69d9      	ldr	r1, [r3, #28]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	61da      	str	r2, [r3, #28]
      break;
 8007688:	e021      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fb03 	bl	8007c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69d9      	ldr	r1, [r3, #28]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	021a      	lsls	r2, r3, #8
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	61da      	str	r2, [r3, #28]
      break;
 80076ca:	e000      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80076cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_TIM_ConfigClockSource+0x18>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e0a6      	b.n	800784e <HAL_TIM_ConfigClockSource+0x166>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800771e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d067      	beq.n	8007808 <HAL_TIM_ConfigClockSource+0x120>
 8007738:	2b40      	cmp	r3, #64	; 0x40
 800773a:	d80b      	bhi.n	8007754 <HAL_TIM_ConfigClockSource+0x6c>
 800773c:	2b10      	cmp	r3, #16
 800773e:	d073      	beq.n	8007828 <HAL_TIM_ConfigClockSource+0x140>
 8007740:	2b10      	cmp	r3, #16
 8007742:	d802      	bhi.n	800774a <HAL_TIM_ConfigClockSource+0x62>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d06f      	beq.n	8007828 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007748:	e078      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800774a:	2b20      	cmp	r3, #32
 800774c:	d06c      	beq.n	8007828 <HAL_TIM_ConfigClockSource+0x140>
 800774e:	2b30      	cmp	r3, #48	; 0x30
 8007750:	d06a      	beq.n	8007828 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007752:	e073      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007754:	2b70      	cmp	r3, #112	; 0x70
 8007756:	d00d      	beq.n	8007774 <HAL_TIM_ConfigClockSource+0x8c>
 8007758:	2b70      	cmp	r3, #112	; 0x70
 800775a:	d804      	bhi.n	8007766 <HAL_TIM_ConfigClockSource+0x7e>
 800775c:	2b50      	cmp	r3, #80	; 0x50
 800775e:	d033      	beq.n	80077c8 <HAL_TIM_ConfigClockSource+0xe0>
 8007760:	2b60      	cmp	r3, #96	; 0x60
 8007762:	d041      	beq.n	80077e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007764:	e06a      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	d066      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x152>
 800776c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007770:	d017      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007772:	e063      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	6899      	ldr	r1, [r3, #8]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f000 fb5a 	bl	8007e3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007796:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	609a      	str	r2, [r3, #8]
      break;
 80077a0:	e04c      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6899      	ldr	r1, [r3, #8]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f000 fb43 	bl	8007e3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077c4:	609a      	str	r2, [r3, #8]
      break;
 80077c6:	e039      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	6859      	ldr	r1, [r3, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	461a      	mov	r2, r3
 80077d6:	f000 fab7 	bl	8007d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2150      	movs	r1, #80	; 0x50
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fb10 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 80077e6:	e029      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	6859      	ldr	r1, [r3, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	461a      	mov	r2, r3
 80077f6:	f000 fad6 	bl	8007da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2160      	movs	r1, #96	; 0x60
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fb00 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 8007806:	e019      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	6859      	ldr	r1, [r3, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	461a      	mov	r2, r3
 8007816:	f000 fa97 	bl	8007d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2140      	movs	r1, #64	; 0x40
 8007820:	4618      	mov	r0, r3
 8007822:	f000 faf0 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 8007826:	e009      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f000 fae7 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 8007838:	e000      	b.n	800783c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800783a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
	...

080078a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a40      	ldr	r2, [pc, #256]	; (80079bc <TIM_Base_SetConfig+0x114>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d013      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c6:	d00f      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a3d      	ldr	r2, [pc, #244]	; (80079c0 <TIM_Base_SetConfig+0x118>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <TIM_Base_SetConfig+0x11c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d007      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a3b      	ldr	r2, [pc, #236]	; (80079c8 <TIM_Base_SetConfig+0x120>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a3a      	ldr	r2, [pc, #232]	; (80079cc <TIM_Base_SetConfig+0x124>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d108      	bne.n	80078fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2f      	ldr	r2, [pc, #188]	; (80079bc <TIM_Base_SetConfig+0x114>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d02b      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007908:	d027      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a2c      	ldr	r2, [pc, #176]	; (80079c0 <TIM_Base_SetConfig+0x118>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d023      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a2b      	ldr	r2, [pc, #172]	; (80079c4 <TIM_Base_SetConfig+0x11c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d01f      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a2a      	ldr	r2, [pc, #168]	; (80079c8 <TIM_Base_SetConfig+0x120>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01b      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a29      	ldr	r2, [pc, #164]	; (80079cc <TIM_Base_SetConfig+0x124>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d017      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a28      	ldr	r2, [pc, #160]	; (80079d0 <TIM_Base_SetConfig+0x128>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a27      	ldr	r2, [pc, #156]	; (80079d4 <TIM_Base_SetConfig+0x12c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00f      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a26      	ldr	r2, [pc, #152]	; (80079d8 <TIM_Base_SetConfig+0x130>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00b      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a25      	ldr	r2, [pc, #148]	; (80079dc <TIM_Base_SetConfig+0x134>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a24      	ldr	r2, [pc, #144]	; (80079e0 <TIM_Base_SetConfig+0x138>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a23      	ldr	r2, [pc, #140]	; (80079e4 <TIM_Base_SetConfig+0x13c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d108      	bne.n	800796c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <TIM_Base_SetConfig+0x114>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_Base_SetConfig+0xf8>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a0c      	ldr	r2, [pc, #48]	; (80079cc <TIM_Base_SetConfig+0x124>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d103      	bne.n	80079a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	615a      	str	r2, [r3, #20]
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	40010000 	.word	0x40010000
 80079c0:	40000400 	.word	0x40000400
 80079c4:	40000800 	.word	0x40000800
 80079c8:	40000c00 	.word	0x40000c00
 80079cc:	40010400 	.word	0x40010400
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400
 80079d8:	40014800 	.word	0x40014800
 80079dc:	40001800 	.word	0x40001800
 80079e0:	40001c00 	.word	0x40001c00
 80079e4:	40002000 	.word	0x40002000

080079e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	f023 0201 	bic.w	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 0302 	bic.w	r3, r3, #2
 8007a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <TIM_OC1_SetConfig+0xd8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d003      	beq.n	8007a4c <TIM_OC1_SetConfig+0x64>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a1f      	ldr	r2, [pc, #124]	; (8007ac4 <TIM_OC1_SetConfig+0xdc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d10c      	bne.n	8007a66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 0308 	bic.w	r3, r3, #8
 8007a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f023 0304 	bic.w	r3, r3, #4
 8007a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <TIM_OC1_SetConfig+0xd8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC1_SetConfig+0x8e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <TIM_OC1_SetConfig+0xdc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d111      	bne.n	8007a9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	621a      	str	r2, [r3, #32]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40010400 	.word	0x40010400

08007ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f023 0210 	bic.w	r2, r3, #16
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f023 0320 	bic.w	r3, r3, #32
 8007b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a22      	ldr	r2, [pc, #136]	; (8007bac <TIM_OC2_SetConfig+0xe4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d003      	beq.n	8007b30 <TIM_OC2_SetConfig+0x68>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a21      	ldr	r2, [pc, #132]	; (8007bb0 <TIM_OC2_SetConfig+0xe8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10d      	bne.n	8007b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a17      	ldr	r2, [pc, #92]	; (8007bac <TIM_OC2_SetConfig+0xe4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d003      	beq.n	8007b5c <TIM_OC2_SetConfig+0x94>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a16      	ldr	r2, [pc, #88]	; (8007bb0 <TIM_OC2_SetConfig+0xe8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d113      	bne.n	8007b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40010400 	.word	0x40010400

08007bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a21      	ldr	r2, [pc, #132]	; (8007c94 <TIM_OC3_SetConfig+0xe0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC3_SetConfig+0x66>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <TIM_OC3_SetConfig+0xe4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a16      	ldr	r2, [pc, #88]	; (8007c94 <TIM_OC3_SetConfig+0xe0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d003      	beq.n	8007c46 <TIM_OC3_SetConfig+0x92>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <TIM_OC3_SetConfig+0xe4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d113      	bne.n	8007c6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	621a      	str	r2, [r3, #32]
}
 8007c88:	bf00      	nop
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	40010000 	.word	0x40010000
 8007c98:	40010400 	.word	0x40010400

08007c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	031b      	lsls	r3, r3, #12
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <TIM_OC4_SetConfig+0xa4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_OC4_SetConfig+0x68>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <TIM_OC4_SetConfig+0xa8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d109      	bne.n	8007d18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	019b      	lsls	r3, r3, #6
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	621a      	str	r2, [r3, #32]
}
 8007d32:	bf00      	nop
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40010400 	.word	0x40010400

08007d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f023 0201 	bic.w	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f023 030a 	bic.w	r3, r3, #10
 8007d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f023 0210 	bic.w	r2, r3, #16
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	031b      	lsls	r3, r3, #12
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	621a      	str	r2, [r3, #32]
}
 8007dfa:	bf00      	nop
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f043 0307 	orr.w	r3, r3, #7
 8007e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	609a      	str	r2, [r3, #8]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	609a      	str	r2, [r3, #8]
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e05a      	b.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a21      	ldr	r2, [pc, #132]	; (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d022      	beq.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee0:	d01d      	beq.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1d      	ldr	r2, [pc, #116]	; (8007f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d018      	beq.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d013      	beq.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1a      	ldr	r2, [pc, #104]	; (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00e      	beq.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d009      	beq.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a17      	ldr	r2, [pc, #92]	; (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d004      	beq.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d10c      	bne.n	8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	40010000 	.word	0x40010000
 8007f5c:	40000400 	.word	0x40000400
 8007f60:	40000800 	.word	0x40000800
 8007f64:	40000c00 	.word	0x40000c00
 8007f68:	40010400 	.word	0x40010400
 8007f6c:	40014000 	.word	0x40014000
 8007f70:	40001800 	.word	0x40001800

08007f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e03f      	b.n	800802e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7fa fd6a 	bl	8002a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2224      	movs	r2, #36	; 0x24
 8007fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f90b 	bl	80081fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691a      	ldr	r2, [r3, #16]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695a      	ldr	r2, [r3, #20]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b088      	sub	sp, #32
 800803a:	af02      	add	r7, sp, #8
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b20      	cmp	r3, #32
 8008054:	f040 8083 	bne.w	800815e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_UART_Transmit+0x2e>
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e07b      	b.n	8008160 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_UART_Transmit+0x40>
 8008072:	2302      	movs	r3, #2
 8008074:	e074      	b.n	8008160 <HAL_UART_Transmit+0x12a>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2221      	movs	r2, #33	; 0x21
 8008088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800808c:	f7fa fef2 	bl	8002e74 <HAL_GetTick>
 8008090:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80080a6:	e042      	b.n	800812e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080be:	d122      	bne.n	8008106 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2200      	movs	r2, #0
 80080c8:	2180      	movs	r1, #128	; 0x80
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f84c 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e042      	b.n	8008160 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	3302      	adds	r3, #2
 80080fa:	60bb      	str	r3, [r7, #8]
 80080fc:	e017      	b.n	800812e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	3301      	adds	r3, #1
 8008102:	60bb      	str	r3, [r7, #8]
 8008104:	e013      	b.n	800812e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2200      	movs	r2, #0
 800810e:	2180      	movs	r1, #128	; 0x80
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f829 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e01f      	b.n	8008160 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	60ba      	str	r2, [r7, #8]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1b7      	bne.n	80080a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2200      	movs	r2, #0
 8008140:	2140      	movs	r1, #64	; 0x40
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 f810 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e006      	b.n	8008160 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e000      	b.n	8008160 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800815e:	2302      	movs	r3, #2
  }
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008178:	e02c      	b.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d028      	beq.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <UART_WaitOnFlagUntilTimeout+0x30>
 8008188:	f7fa fe74 	bl	8002e74 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	429a      	cmp	r2, r3
 8008196:	d21d      	bcs.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0201 	bic.w	r2, r2, #1
 80081b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e00f      	b.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	4013      	ands	r3, r2
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d0c3      	beq.n	800817a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	431a      	orrs	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800823e:	f023 030c 	bic.w	r3, r3, #12
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	430b      	orrs	r3, r1
 800824a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826a:	f040 818b 	bne.w	8008584 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4ac1      	ldr	r2, [pc, #772]	; (8008578 <UART_SetConfig+0x37c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d005      	beq.n	8008284 <UART_SetConfig+0x88>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4abf      	ldr	r2, [pc, #764]	; (800857c <UART_SetConfig+0x380>)
 800827e:	4293      	cmp	r3, r2
 8008280:	f040 80bd 	bne.w	80083fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008284:	f7fe ffca 	bl	800721c <HAL_RCC_GetPCLK2Freq>
 8008288:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	461d      	mov	r5, r3
 800828e:	f04f 0600 	mov.w	r6, #0
 8008292:	46a8      	mov	r8, r5
 8008294:	46b1      	mov	r9, r6
 8008296:	eb18 0308 	adds.w	r3, r8, r8
 800829a:	eb49 0409 	adc.w	r4, r9, r9
 800829e:	4698      	mov	r8, r3
 80082a0:	46a1      	mov	r9, r4
 80082a2:	eb18 0805 	adds.w	r8, r8, r5
 80082a6:	eb49 0906 	adc.w	r9, r9, r6
 80082aa:	f04f 0100 	mov.w	r1, #0
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082be:	4688      	mov	r8, r1
 80082c0:	4691      	mov	r9, r2
 80082c2:	eb18 0005 	adds.w	r0, r8, r5
 80082c6:	eb49 0106 	adc.w	r1, r9, r6
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	461d      	mov	r5, r3
 80082d0:	f04f 0600 	mov.w	r6, #0
 80082d4:	196b      	adds	r3, r5, r5
 80082d6:	eb46 0406 	adc.w	r4, r6, r6
 80082da:	461a      	mov	r2, r3
 80082dc:	4623      	mov	r3, r4
 80082de:	f7f8 fcc3 	bl	8000c68 <__aeabi_uldivmod>
 80082e2:	4603      	mov	r3, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	461a      	mov	r2, r3
 80082e8:	4ba5      	ldr	r3, [pc, #660]	; (8008580 <UART_SetConfig+0x384>)
 80082ea:	fba3 2302 	umull	r2, r3, r3, r2
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	461d      	mov	r5, r3
 80082f8:	f04f 0600 	mov.w	r6, #0
 80082fc:	46a9      	mov	r9, r5
 80082fe:	46b2      	mov	sl, r6
 8008300:	eb19 0309 	adds.w	r3, r9, r9
 8008304:	eb4a 040a 	adc.w	r4, sl, sl
 8008308:	4699      	mov	r9, r3
 800830a:	46a2      	mov	sl, r4
 800830c:	eb19 0905 	adds.w	r9, r9, r5
 8008310:	eb4a 0a06 	adc.w	sl, sl, r6
 8008314:	f04f 0100 	mov.w	r1, #0
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008320:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008324:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008328:	4689      	mov	r9, r1
 800832a:	4692      	mov	sl, r2
 800832c:	eb19 0005 	adds.w	r0, r9, r5
 8008330:	eb4a 0106 	adc.w	r1, sl, r6
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	461d      	mov	r5, r3
 800833a:	f04f 0600 	mov.w	r6, #0
 800833e:	196b      	adds	r3, r5, r5
 8008340:	eb46 0406 	adc.w	r4, r6, r6
 8008344:	461a      	mov	r2, r3
 8008346:	4623      	mov	r3, r4
 8008348:	f7f8 fc8e 	bl	8000c68 <__aeabi_uldivmod>
 800834c:	4603      	mov	r3, r0
 800834e:	460c      	mov	r4, r1
 8008350:	461a      	mov	r2, r3
 8008352:	4b8b      	ldr	r3, [pc, #556]	; (8008580 <UART_SetConfig+0x384>)
 8008354:	fba3 1302 	umull	r1, r3, r3, r2
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	2164      	movs	r1, #100	; 0x64
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	3332      	adds	r3, #50	; 0x32
 8008366:	4a86      	ldr	r2, [pc, #536]	; (8008580 <UART_SetConfig+0x384>)
 8008368:	fba2 2303 	umull	r2, r3, r2, r3
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008374:	4498      	add	r8, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	461d      	mov	r5, r3
 800837a:	f04f 0600 	mov.w	r6, #0
 800837e:	46a9      	mov	r9, r5
 8008380:	46b2      	mov	sl, r6
 8008382:	eb19 0309 	adds.w	r3, r9, r9
 8008386:	eb4a 040a 	adc.w	r4, sl, sl
 800838a:	4699      	mov	r9, r3
 800838c:	46a2      	mov	sl, r4
 800838e:	eb19 0905 	adds.w	r9, r9, r5
 8008392:	eb4a 0a06 	adc.w	sl, sl, r6
 8008396:	f04f 0100 	mov.w	r1, #0
 800839a:	f04f 0200 	mov.w	r2, #0
 800839e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083aa:	4689      	mov	r9, r1
 80083ac:	4692      	mov	sl, r2
 80083ae:	eb19 0005 	adds.w	r0, r9, r5
 80083b2:	eb4a 0106 	adc.w	r1, sl, r6
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	461d      	mov	r5, r3
 80083bc:	f04f 0600 	mov.w	r6, #0
 80083c0:	196b      	adds	r3, r5, r5
 80083c2:	eb46 0406 	adc.w	r4, r6, r6
 80083c6:	461a      	mov	r2, r3
 80083c8:	4623      	mov	r3, r4
 80083ca:	f7f8 fc4d 	bl	8000c68 <__aeabi_uldivmod>
 80083ce:	4603      	mov	r3, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	461a      	mov	r2, r3
 80083d4:	4b6a      	ldr	r3, [pc, #424]	; (8008580 <UART_SetConfig+0x384>)
 80083d6:	fba3 1302 	umull	r1, r3, r3, r2
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	2164      	movs	r1, #100	; 0x64
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	3332      	adds	r3, #50	; 0x32
 80083e8:	4a65      	ldr	r2, [pc, #404]	; (8008580 <UART_SetConfig+0x384>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f003 0207 	and.w	r2, r3, #7
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4442      	add	r2, r8
 80083fa:	609a      	str	r2, [r3, #8]
 80083fc:	e26f      	b.n	80088de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083fe:	f7fe fef9 	bl	80071f4 <HAL_RCC_GetPCLK1Freq>
 8008402:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	461d      	mov	r5, r3
 8008408:	f04f 0600 	mov.w	r6, #0
 800840c:	46a8      	mov	r8, r5
 800840e:	46b1      	mov	r9, r6
 8008410:	eb18 0308 	adds.w	r3, r8, r8
 8008414:	eb49 0409 	adc.w	r4, r9, r9
 8008418:	4698      	mov	r8, r3
 800841a:	46a1      	mov	r9, r4
 800841c:	eb18 0805 	adds.w	r8, r8, r5
 8008420:	eb49 0906 	adc.w	r9, r9, r6
 8008424:	f04f 0100 	mov.w	r1, #0
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008430:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008434:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008438:	4688      	mov	r8, r1
 800843a:	4691      	mov	r9, r2
 800843c:	eb18 0005 	adds.w	r0, r8, r5
 8008440:	eb49 0106 	adc.w	r1, r9, r6
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	461d      	mov	r5, r3
 800844a:	f04f 0600 	mov.w	r6, #0
 800844e:	196b      	adds	r3, r5, r5
 8008450:	eb46 0406 	adc.w	r4, r6, r6
 8008454:	461a      	mov	r2, r3
 8008456:	4623      	mov	r3, r4
 8008458:	f7f8 fc06 	bl	8000c68 <__aeabi_uldivmod>
 800845c:	4603      	mov	r3, r0
 800845e:	460c      	mov	r4, r1
 8008460:	461a      	mov	r2, r3
 8008462:	4b47      	ldr	r3, [pc, #284]	; (8008580 <UART_SetConfig+0x384>)
 8008464:	fba3 2302 	umull	r2, r3, r3, r2
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	461d      	mov	r5, r3
 8008472:	f04f 0600 	mov.w	r6, #0
 8008476:	46a9      	mov	r9, r5
 8008478:	46b2      	mov	sl, r6
 800847a:	eb19 0309 	adds.w	r3, r9, r9
 800847e:	eb4a 040a 	adc.w	r4, sl, sl
 8008482:	4699      	mov	r9, r3
 8008484:	46a2      	mov	sl, r4
 8008486:	eb19 0905 	adds.w	r9, r9, r5
 800848a:	eb4a 0a06 	adc.w	sl, sl, r6
 800848e:	f04f 0100 	mov.w	r1, #0
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800849a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800849e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084a2:	4689      	mov	r9, r1
 80084a4:	4692      	mov	sl, r2
 80084a6:	eb19 0005 	adds.w	r0, r9, r5
 80084aa:	eb4a 0106 	adc.w	r1, sl, r6
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	461d      	mov	r5, r3
 80084b4:	f04f 0600 	mov.w	r6, #0
 80084b8:	196b      	adds	r3, r5, r5
 80084ba:	eb46 0406 	adc.w	r4, r6, r6
 80084be:	461a      	mov	r2, r3
 80084c0:	4623      	mov	r3, r4
 80084c2:	f7f8 fbd1 	bl	8000c68 <__aeabi_uldivmod>
 80084c6:	4603      	mov	r3, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	461a      	mov	r2, r3
 80084cc:	4b2c      	ldr	r3, [pc, #176]	; (8008580 <UART_SetConfig+0x384>)
 80084ce:	fba3 1302 	umull	r1, r3, r3, r2
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	2164      	movs	r1, #100	; 0x64
 80084d6:	fb01 f303 	mul.w	r3, r1, r3
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	3332      	adds	r3, #50	; 0x32
 80084e0:	4a27      	ldr	r2, [pc, #156]	; (8008580 <UART_SetConfig+0x384>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	095b      	lsrs	r3, r3, #5
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084ee:	4498      	add	r8, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	461d      	mov	r5, r3
 80084f4:	f04f 0600 	mov.w	r6, #0
 80084f8:	46a9      	mov	r9, r5
 80084fa:	46b2      	mov	sl, r6
 80084fc:	eb19 0309 	adds.w	r3, r9, r9
 8008500:	eb4a 040a 	adc.w	r4, sl, sl
 8008504:	4699      	mov	r9, r3
 8008506:	46a2      	mov	sl, r4
 8008508:	eb19 0905 	adds.w	r9, r9, r5
 800850c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008510:	f04f 0100 	mov.w	r1, #0
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800851c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008520:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008524:	4689      	mov	r9, r1
 8008526:	4692      	mov	sl, r2
 8008528:	eb19 0005 	adds.w	r0, r9, r5
 800852c:	eb4a 0106 	adc.w	r1, sl, r6
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	461d      	mov	r5, r3
 8008536:	f04f 0600 	mov.w	r6, #0
 800853a:	196b      	adds	r3, r5, r5
 800853c:	eb46 0406 	adc.w	r4, r6, r6
 8008540:	461a      	mov	r2, r3
 8008542:	4623      	mov	r3, r4
 8008544:	f7f8 fb90 	bl	8000c68 <__aeabi_uldivmod>
 8008548:	4603      	mov	r3, r0
 800854a:	460c      	mov	r4, r1
 800854c:	461a      	mov	r2, r3
 800854e:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <UART_SetConfig+0x384>)
 8008550:	fba3 1302 	umull	r1, r3, r3, r2
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	2164      	movs	r1, #100	; 0x64
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	3332      	adds	r3, #50	; 0x32
 8008562:	4a07      	ldr	r2, [pc, #28]	; (8008580 <UART_SetConfig+0x384>)
 8008564:	fba2 2303 	umull	r2, r3, r2, r3
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	f003 0207 	and.w	r2, r3, #7
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4442      	add	r2, r8
 8008574:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008576:	e1b2      	b.n	80088de <UART_SetConfig+0x6e2>
 8008578:	40011000 	.word	0x40011000
 800857c:	40011400 	.word	0x40011400
 8008580:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4ad7      	ldr	r2, [pc, #860]	; (80088e8 <UART_SetConfig+0x6ec>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d005      	beq.n	800859a <UART_SetConfig+0x39e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4ad6      	ldr	r2, [pc, #856]	; (80088ec <UART_SetConfig+0x6f0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	f040 80d1 	bne.w	800873c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800859a:	f7fe fe3f 	bl	800721c <HAL_RCC_GetPCLK2Freq>
 800859e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	469a      	mov	sl, r3
 80085a4:	f04f 0b00 	mov.w	fp, #0
 80085a8:	46d0      	mov	r8, sl
 80085aa:	46d9      	mov	r9, fp
 80085ac:	eb18 0308 	adds.w	r3, r8, r8
 80085b0:	eb49 0409 	adc.w	r4, r9, r9
 80085b4:	4698      	mov	r8, r3
 80085b6:	46a1      	mov	r9, r4
 80085b8:	eb18 080a 	adds.w	r8, r8, sl
 80085bc:	eb49 090b 	adc.w	r9, r9, fp
 80085c0:	f04f 0100 	mov.w	r1, #0
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085d4:	4688      	mov	r8, r1
 80085d6:	4691      	mov	r9, r2
 80085d8:	eb1a 0508 	adds.w	r5, sl, r8
 80085dc:	eb4b 0609 	adc.w	r6, fp, r9
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4619      	mov	r1, r3
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	f04f 0300 	mov.w	r3, #0
 80085ee:	f04f 0400 	mov.w	r4, #0
 80085f2:	0094      	lsls	r4, r2, #2
 80085f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085f8:	008b      	lsls	r3, r1, #2
 80085fa:	461a      	mov	r2, r3
 80085fc:	4623      	mov	r3, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	4631      	mov	r1, r6
 8008602:	f7f8 fb31 	bl	8000c68 <__aeabi_uldivmod>
 8008606:	4603      	mov	r3, r0
 8008608:	460c      	mov	r4, r1
 800860a:	461a      	mov	r2, r3
 800860c:	4bb8      	ldr	r3, [pc, #736]	; (80088f0 <UART_SetConfig+0x6f4>)
 800860e:	fba3 2302 	umull	r2, r3, r3, r2
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	469b      	mov	fp, r3
 800861c:	f04f 0c00 	mov.w	ip, #0
 8008620:	46d9      	mov	r9, fp
 8008622:	46e2      	mov	sl, ip
 8008624:	eb19 0309 	adds.w	r3, r9, r9
 8008628:	eb4a 040a 	adc.w	r4, sl, sl
 800862c:	4699      	mov	r9, r3
 800862e:	46a2      	mov	sl, r4
 8008630:	eb19 090b 	adds.w	r9, r9, fp
 8008634:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008638:	f04f 0100 	mov.w	r1, #0
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008644:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008648:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800864c:	4689      	mov	r9, r1
 800864e:	4692      	mov	sl, r2
 8008650:	eb1b 0509 	adds.w	r5, fp, r9
 8008654:	eb4c 060a 	adc.w	r6, ip, sl
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4619      	mov	r1, r3
 800865e:	f04f 0200 	mov.w	r2, #0
 8008662:	f04f 0300 	mov.w	r3, #0
 8008666:	f04f 0400 	mov.w	r4, #0
 800866a:	0094      	lsls	r4, r2, #2
 800866c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008670:	008b      	lsls	r3, r1, #2
 8008672:	461a      	mov	r2, r3
 8008674:	4623      	mov	r3, r4
 8008676:	4628      	mov	r0, r5
 8008678:	4631      	mov	r1, r6
 800867a:	f7f8 faf5 	bl	8000c68 <__aeabi_uldivmod>
 800867e:	4603      	mov	r3, r0
 8008680:	460c      	mov	r4, r1
 8008682:	461a      	mov	r2, r3
 8008684:	4b9a      	ldr	r3, [pc, #616]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008686:	fba3 1302 	umull	r1, r3, r3, r2
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	2164      	movs	r1, #100	; 0x64
 800868e:	fb01 f303 	mul.w	r3, r1, r3
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	3332      	adds	r3, #50	; 0x32
 8008698:	4a95      	ldr	r2, [pc, #596]	; (80088f0 <UART_SetConfig+0x6f4>)
 800869a:	fba2 2303 	umull	r2, r3, r2, r3
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086a4:	4498      	add	r8, r3
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	469b      	mov	fp, r3
 80086aa:	f04f 0c00 	mov.w	ip, #0
 80086ae:	46d9      	mov	r9, fp
 80086b0:	46e2      	mov	sl, ip
 80086b2:	eb19 0309 	adds.w	r3, r9, r9
 80086b6:	eb4a 040a 	adc.w	r4, sl, sl
 80086ba:	4699      	mov	r9, r3
 80086bc:	46a2      	mov	sl, r4
 80086be:	eb19 090b 	adds.w	r9, r9, fp
 80086c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086c6:	f04f 0100 	mov.w	r1, #0
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086da:	4689      	mov	r9, r1
 80086dc:	4692      	mov	sl, r2
 80086de:	eb1b 0509 	adds.w	r5, fp, r9
 80086e2:	eb4c 060a 	adc.w	r6, ip, sl
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4619      	mov	r1, r3
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	f04f 0400 	mov.w	r4, #0
 80086f8:	0094      	lsls	r4, r2, #2
 80086fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086fe:	008b      	lsls	r3, r1, #2
 8008700:	461a      	mov	r2, r3
 8008702:	4623      	mov	r3, r4
 8008704:	4628      	mov	r0, r5
 8008706:	4631      	mov	r1, r6
 8008708:	f7f8 faae 	bl	8000c68 <__aeabi_uldivmod>
 800870c:	4603      	mov	r3, r0
 800870e:	460c      	mov	r4, r1
 8008710:	461a      	mov	r2, r3
 8008712:	4b77      	ldr	r3, [pc, #476]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008714:	fba3 1302 	umull	r1, r3, r3, r2
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	2164      	movs	r1, #100	; 0x64
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	3332      	adds	r3, #50	; 0x32
 8008726:	4a72      	ldr	r2, [pc, #456]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008728:	fba2 2303 	umull	r2, r3, r2, r3
 800872c:	095b      	lsrs	r3, r3, #5
 800872e:	f003 020f 	and.w	r2, r3, #15
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4442      	add	r2, r8
 8008738:	609a      	str	r2, [r3, #8]
 800873a:	e0d0      	b.n	80088de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800873c:	f7fe fd5a 	bl	80071f4 <HAL_RCC_GetPCLK1Freq>
 8008740:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	469a      	mov	sl, r3
 8008746:	f04f 0b00 	mov.w	fp, #0
 800874a:	46d0      	mov	r8, sl
 800874c:	46d9      	mov	r9, fp
 800874e:	eb18 0308 	adds.w	r3, r8, r8
 8008752:	eb49 0409 	adc.w	r4, r9, r9
 8008756:	4698      	mov	r8, r3
 8008758:	46a1      	mov	r9, r4
 800875a:	eb18 080a 	adds.w	r8, r8, sl
 800875e:	eb49 090b 	adc.w	r9, r9, fp
 8008762:	f04f 0100 	mov.w	r1, #0
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800876e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008772:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008776:	4688      	mov	r8, r1
 8008778:	4691      	mov	r9, r2
 800877a:	eb1a 0508 	adds.w	r5, sl, r8
 800877e:	eb4b 0609 	adc.w	r6, fp, r9
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	4619      	mov	r1, r3
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	f04f 0400 	mov.w	r4, #0
 8008794:	0094      	lsls	r4, r2, #2
 8008796:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800879a:	008b      	lsls	r3, r1, #2
 800879c:	461a      	mov	r2, r3
 800879e:	4623      	mov	r3, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	4631      	mov	r1, r6
 80087a4:	f7f8 fa60 	bl	8000c68 <__aeabi_uldivmod>
 80087a8:	4603      	mov	r3, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b50      	ldr	r3, [pc, #320]	; (80088f0 <UART_SetConfig+0x6f4>)
 80087b0:	fba3 2302 	umull	r2, r3, r3, r2
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	469b      	mov	fp, r3
 80087be:	f04f 0c00 	mov.w	ip, #0
 80087c2:	46d9      	mov	r9, fp
 80087c4:	46e2      	mov	sl, ip
 80087c6:	eb19 0309 	adds.w	r3, r9, r9
 80087ca:	eb4a 040a 	adc.w	r4, sl, sl
 80087ce:	4699      	mov	r9, r3
 80087d0:	46a2      	mov	sl, r4
 80087d2:	eb19 090b 	adds.w	r9, r9, fp
 80087d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087da:	f04f 0100 	mov.w	r1, #0
 80087de:	f04f 0200 	mov.w	r2, #0
 80087e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087ee:	4689      	mov	r9, r1
 80087f0:	4692      	mov	sl, r2
 80087f2:	eb1b 0509 	adds.w	r5, fp, r9
 80087f6:	eb4c 060a 	adc.w	r6, ip, sl
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4619      	mov	r1, r3
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	f04f 0400 	mov.w	r4, #0
 800880c:	0094      	lsls	r4, r2, #2
 800880e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008812:	008b      	lsls	r3, r1, #2
 8008814:	461a      	mov	r2, r3
 8008816:	4623      	mov	r3, r4
 8008818:	4628      	mov	r0, r5
 800881a:	4631      	mov	r1, r6
 800881c:	f7f8 fa24 	bl	8000c68 <__aeabi_uldivmod>
 8008820:	4603      	mov	r3, r0
 8008822:	460c      	mov	r4, r1
 8008824:	461a      	mov	r2, r3
 8008826:	4b32      	ldr	r3, [pc, #200]	; (80088f0 <UART_SetConfig+0x6f4>)
 8008828:	fba3 1302 	umull	r1, r3, r3, r2
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	2164      	movs	r1, #100	; 0x64
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	3332      	adds	r3, #50	; 0x32
 800883a:	4a2d      	ldr	r2, [pc, #180]	; (80088f0 <UART_SetConfig+0x6f4>)
 800883c:	fba2 2303 	umull	r2, r3, r2, r3
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008846:	4498      	add	r8, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	469b      	mov	fp, r3
 800884c:	f04f 0c00 	mov.w	ip, #0
 8008850:	46d9      	mov	r9, fp
 8008852:	46e2      	mov	sl, ip
 8008854:	eb19 0309 	adds.w	r3, r9, r9
 8008858:	eb4a 040a 	adc.w	r4, sl, sl
 800885c:	4699      	mov	r9, r3
 800885e:	46a2      	mov	sl, r4
 8008860:	eb19 090b 	adds.w	r9, r9, fp
 8008864:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008868:	f04f 0100 	mov.w	r1, #0
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008874:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008878:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800887c:	4689      	mov	r9, r1
 800887e:	4692      	mov	sl, r2
 8008880:	eb1b 0509 	adds.w	r5, fp, r9
 8008884:	eb4c 060a 	adc.w	r6, ip, sl
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	4619      	mov	r1, r3
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	f04f 0400 	mov.w	r4, #0
 800889a:	0094      	lsls	r4, r2, #2
 800889c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088a0:	008b      	lsls	r3, r1, #2
 80088a2:	461a      	mov	r2, r3
 80088a4:	4623      	mov	r3, r4
 80088a6:	4628      	mov	r0, r5
 80088a8:	4631      	mov	r1, r6
 80088aa:	f7f8 f9dd 	bl	8000c68 <__aeabi_uldivmod>
 80088ae:	4603      	mov	r3, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	461a      	mov	r2, r3
 80088b4:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <UART_SetConfig+0x6f4>)
 80088b6:	fba3 1302 	umull	r1, r3, r3, r2
 80088ba:	095b      	lsrs	r3, r3, #5
 80088bc:	2164      	movs	r1, #100	; 0x64
 80088be:	fb01 f303 	mul.w	r3, r1, r3
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	3332      	adds	r3, #50	; 0x32
 80088c8:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <UART_SetConfig+0x6f4>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	095b      	lsrs	r3, r3, #5
 80088d0:	f003 020f 	and.w	r2, r3, #15
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4442      	add	r2, r8
 80088da:	609a      	str	r2, [r3, #8]
}
 80088dc:	e7ff      	b.n	80088de <UART_SetConfig+0x6e2>
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	40011000 	.word	0x40011000
 80088ec:	40011400 	.word	0x40011400
 80088f0:	51eb851f 	.word	0x51eb851f

080088f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088f4:	b084      	sub	sp, #16
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	f107 001c 	add.w	r0, r7, #28
 8008902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	2b01      	cmp	r3, #1
 800890a:	d122      	bne.n	8008952 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008936:	2b01      	cmp	r3, #1
 8008938:	d105      	bne.n	8008946 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa4e 	bl	8008de8 <USB_CoreReset>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]
 8008950:	e01a      	b.n	8008988 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa42 	bl	8008de8 <USB_CoreReset>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	639a      	str	r2, [r3, #56]	; 0x38
 800897a:	e005      	b.n	8008988 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	2b01      	cmp	r3, #1
 800898c:	d10b      	bne.n	80089a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f043 0206 	orr.w	r2, r3, #6
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f043 0220 	orr.w	r2, r3, #32
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089b2:	b004      	add	sp, #16
 80089b4:	4770      	bx	lr

080089b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f023 0201 	bic.w	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d106      	bne.n	8008a04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60da      	str	r2, [r3, #12]
 8008a02:	e00b      	b.n	8008a1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60da      	str	r2, [r3, #12]
 8008a16:	e001      	b.n	8008a1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e003      	b.n	8008a24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008a1c:	2032      	movs	r0, #50	; 0x32
 8008a1e:	f7fa fa35 	bl	8002e8c <HAL_Delay>

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b086      	sub	sp, #24
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a46:	2300      	movs	r3, #0
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	e009      	b.n	8008a60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	3340      	adds	r3, #64	; 0x40
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	2200      	movs	r2, #0
 8008a58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	2b0e      	cmp	r3, #14
 8008a64:	d9f2      	bls.n	8008a4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d11c      	bne.n	8008aa6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a7a:	f043 0302 	orr.w	r3, r3, #2
 8008a7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8008aa4:	e00b      	b.n	8008abe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad8:	461a      	mov	r2, r3
 8008ada:	680b      	ldr	r3, [r1, #0]
 8008adc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d10c      	bne.n	8008afe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008aea:	2100      	movs	r1, #0
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f949 	bl	8008d84 <USB_SetDevSpeed>
 8008af2:	e008      	b.n	8008b06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008af4:	2101      	movs	r1, #1
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f944 	bl	8008d84 <USB_SetDevSpeed>
 8008afc:	e003      	b.n	8008b06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008afe:	2103      	movs	r1, #3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f93f 	bl	8008d84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b06:	2110      	movs	r1, #16
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f8f3 	bl	8008cf4 <USB_FlushTxFifo>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f911 	bl	8008d40 <USB_FlushRxFifo>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2e:	461a      	mov	r2, r3
 8008b30:	2300      	movs	r3, #0
 8008b32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b46:	461a      	mov	r2, r3
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	613b      	str	r3, [r7, #16]
 8008b50:	e043      	b.n	8008bda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b68:	d118      	bne.n	8008b9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	e013      	b.n	8008bae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	461a      	mov	r2, r3
 8008b94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	e008      	b.n	8008bae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba8:	461a      	mov	r2, r3
 8008baa:	2300      	movs	r3, #0
 8008bac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bcc:	461a      	mov	r2, r3
 8008bce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d3b7      	bcc.n	8008b52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008be2:	2300      	movs	r3, #0
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	e043      	b.n	8008c70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bfe:	d118      	bne.n	8008c32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c12:	461a      	mov	r2, r3
 8008c14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e013      	b.n	8008c44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	e008      	b.n	8008c44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3e:	461a      	mov	r2, r3
 8008c40:	2300      	movs	r3, #0
 8008c42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	461a      	mov	r2, r3
 8008c52:	2300      	movs	r3, #0
 8008c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	461a      	mov	r2, r3
 8008c64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3b7      	bcc.n	8008be8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d105      	bne.n	8008cac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f043 0210 	orr.w	r2, r3, #16
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <USB_DevInit+0x2c4>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	f043 0208 	orr.w	r2, r3, #8
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d107      	bne.n	8008ce0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cd8:	f043 0304 	orr.w	r3, r3, #4
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cec:	b004      	add	sp, #16
 8008cee:	4770      	bx	lr
 8008cf0:	803c3800 	.word	0x803c3800

08008cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	019b      	lsls	r3, r3, #6
 8008d06:	f043 0220 	orr.w	r2, r3, #32
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <USB_FlushTxFifo+0x48>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d901      	bls.n	8008d20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e006      	b.n	8008d2e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f003 0320 	and.w	r3, r3, #32
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d0f0      	beq.n	8008d0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	00030d40 	.word	0x00030d40

08008d40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2210      	movs	r2, #16
 8008d50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <USB_FlushRxFifo+0x40>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d901      	bls.n	8008d64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e006      	b.n	8008d72 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d0f0      	beq.n	8008d52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	00030d40 	.word	0x00030d40

08008d84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008da4:	4313      	orrs	r3, r2
 8008da6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd0:	f043 0302 	orr.w	r3, r3, #2
 8008dd4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008dd6:	2003      	movs	r0, #3
 8008dd8:	f7fa f858 	bl	8002e8c <HAL_Delay>

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a13      	ldr	r2, [pc, #76]	; (8008e4c <USB_CoreReset+0x64>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d901      	bls.n	8008e06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e01b      	b.n	8008e3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	daf2      	bge.n	8008df4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f043 0201 	orr.w	r2, r3, #1
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4a09      	ldr	r2, [pc, #36]	; (8008e4c <USB_CoreReset+0x64>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d901      	bls.n	8008e30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e006      	b.n	8008e3e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d0f0      	beq.n	8008e1e <USB_CoreReset+0x36>

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	00030d40 	.word	0x00030d40

08008e50 <atanf>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	ee10 5a10 	vmov	r5, s0
 8008e56:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008e5a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008e5e:	eef0 7a40 	vmov.f32	s15, s0
 8008e62:	db10      	blt.n	8008e86 <atanf+0x36>
 8008e64:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008e68:	dd04      	ble.n	8008e74 <atanf+0x24>
 8008e6a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008fac <atanf+0x15c>
 8008e78:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008fb0 <atanf+0x160>
 8008e7c:	2d00      	cmp	r5, #0
 8008e7e:	bfd8      	it	le
 8008e80:	eef0 7a47 	vmovle.f32	s15, s14
 8008e84:	e7f3      	b.n	8008e6e <atanf+0x1e>
 8008e86:	4b4b      	ldr	r3, [pc, #300]	; (8008fb4 <atanf+0x164>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	dc10      	bgt.n	8008eae <atanf+0x5e>
 8008e8c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008e90:	da0a      	bge.n	8008ea8 <atanf+0x58>
 8008e92:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008fb8 <atanf+0x168>
 8008e96:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea6:	dce2      	bgt.n	8008e6e <atanf+0x1e>
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eac:	e013      	b.n	8008ed6 <atanf+0x86>
 8008eae:	f000 f8a3 	bl	8008ff8 <fabsf>
 8008eb2:	4b42      	ldr	r3, [pc, #264]	; (8008fbc <atanf+0x16c>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	dc4f      	bgt.n	8008f58 <atanf+0x108>
 8008eb8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008ebc:	429c      	cmp	r4, r3
 8008ebe:	dc41      	bgt.n	8008f44 <atanf+0xf4>
 8008ec0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008ec4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008ec8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008ecc:	2300      	movs	r3, #0
 8008ece:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ed2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008edc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008fc0 <atanf+0x170>
 8008ee0:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008fc4 <atanf+0x174>
 8008ee4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008fc8 <atanf+0x178>
 8008ee8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008eec:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008ef0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008fcc <atanf+0x17c>
 8008ef4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008ef8:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008fd0 <atanf+0x180>
 8008efc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008f00:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008fd4 <atanf+0x184>
 8008f04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008f08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fd8 <atanf+0x188>
 8008f0c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008f10:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008fdc <atanf+0x18c>
 8008f14:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008f18:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008fe0 <atanf+0x190>
 8008f1c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008f20:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008fe4 <atanf+0x194>
 8008f24:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008f28:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008fe8 <atanf+0x198>
 8008f2c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008f30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008f34:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f3c:	d121      	bne.n	8008f82 <atanf+0x132>
 8008f3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f42:	e794      	b.n	8008e6e <atanf+0x1e>
 8008f44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f48:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008f4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f50:	2301      	movs	r3, #1
 8008f52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f56:	e7be      	b.n	8008ed6 <atanf+0x86>
 8008f58:	4b24      	ldr	r3, [pc, #144]	; (8008fec <atanf+0x19c>)
 8008f5a:	429c      	cmp	r4, r3
 8008f5c:	dc0b      	bgt.n	8008f76 <atanf+0x126>
 8008f5e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f66:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f74:	e7af      	b.n	8008ed6 <atanf+0x86>
 8008f76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e7a9      	b.n	8008ed6 <atanf+0x86>
 8008f82:	4a1b      	ldr	r2, [pc, #108]	; (8008ff0 <atanf+0x1a0>)
 8008f84:	491b      	ldr	r1, [pc, #108]	; (8008ff4 <atanf+0x1a4>)
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	441a      	add	r2, r3
 8008f8a:	440b      	add	r3, r1
 8008f8c:	edd3 6a00 	vldr	s13, [r3]
 8008f90:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f9a:	ed92 7a00 	vldr	s14, [r2]
 8008f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fa2:	bfb8      	it	lt
 8008fa4:	eef1 7a67 	vneglt.f32	s15, s15
 8008fa8:	e761      	b.n	8008e6e <atanf+0x1e>
 8008faa:	bf00      	nop
 8008fac:	bfc90fdb 	.word	0xbfc90fdb
 8008fb0:	3fc90fdb 	.word	0x3fc90fdb
 8008fb4:	3edfffff 	.word	0x3edfffff
 8008fb8:	7149f2ca 	.word	0x7149f2ca
 8008fbc:	3f97ffff 	.word	0x3f97ffff
 8008fc0:	3c8569d7 	.word	0x3c8569d7
 8008fc4:	3d4bda59 	.word	0x3d4bda59
 8008fc8:	bd6ef16b 	.word	0xbd6ef16b
 8008fcc:	3d886b35 	.word	0x3d886b35
 8008fd0:	3dba2e6e 	.word	0x3dba2e6e
 8008fd4:	3e124925 	.word	0x3e124925
 8008fd8:	3eaaaaab 	.word	0x3eaaaaab
 8008fdc:	bd15a221 	.word	0xbd15a221
 8008fe0:	bd9d8795 	.word	0xbd9d8795
 8008fe4:	bde38e38 	.word	0xbde38e38
 8008fe8:	be4ccccd 	.word	0xbe4ccccd
 8008fec:	401bffff 	.word	0x401bffff
 8008ff0:	0800b9f4 	.word	0x0800b9f4
 8008ff4:	0800ba04 	.word	0x0800ba04

08008ff8 <fabsf>:
 8008ff8:	ee10 3a10 	vmov	r3, s0
 8008ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009000:	ee00 3a10 	vmov	s0, r3
 8009004:	4770      	bx	lr
	...

08009008 <sqrtf>:
 8009008:	b510      	push	{r4, lr}
 800900a:	ed2d 8b02 	vpush	{d8}
 800900e:	b08a      	sub	sp, #40	; 0x28
 8009010:	eeb0 8a40 	vmov.f32	s16, s0
 8009014:	f000 f848 	bl	80090a8 <__ieee754_sqrtf>
 8009018:	4b21      	ldr	r3, [pc, #132]	; (80090a0 <sqrtf+0x98>)
 800901a:	f993 4000 	ldrsb.w	r4, [r3]
 800901e:	1c63      	adds	r3, r4, #1
 8009020:	d02c      	beq.n	800907c <sqrtf+0x74>
 8009022:	eeb4 8a48 	vcmp.f32	s16, s16
 8009026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902a:	d627      	bvs.n	800907c <sqrtf+0x74>
 800902c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009034:	d522      	bpl.n	800907c <sqrtf+0x74>
 8009036:	2301      	movs	r3, #1
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	4b1a      	ldr	r3, [pc, #104]	; (80090a4 <sqrtf+0x9c>)
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	ee18 0a10 	vmov	r0, s16
 8009042:	2300      	movs	r3, #0
 8009044:	9308      	str	r3, [sp, #32]
 8009046:	f7f7 fa8f 	bl	8000568 <__aeabi_f2d>
 800904a:	2200      	movs	r2, #0
 800904c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009054:	2300      	movs	r3, #0
 8009056:	b9ac      	cbnz	r4, 8009084 <sqrtf+0x7c>
 8009058:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800905c:	4668      	mov	r0, sp
 800905e:	f000 f826 	bl	80090ae <matherr>
 8009062:	b1b8      	cbz	r0, 8009094 <sqrtf+0x8c>
 8009064:	9b08      	ldr	r3, [sp, #32]
 8009066:	b11b      	cbz	r3, 8009070 <sqrtf+0x68>
 8009068:	f000 f824 	bl	80090b4 <__errno>
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	6003      	str	r3, [r0, #0]
 8009070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009074:	f7f7 fda8 	bl	8000bc8 <__aeabi_d2f>
 8009078:	ee00 0a10 	vmov	s0, r0
 800907c:	b00a      	add	sp, #40	; 0x28
 800907e:	ecbd 8b02 	vpop	{d8}
 8009082:	bd10      	pop	{r4, pc}
 8009084:	4610      	mov	r0, r2
 8009086:	4619      	mov	r1, r3
 8009088:	f7f7 fbf0 	bl	800086c <__aeabi_ddiv>
 800908c:	2c02      	cmp	r4, #2
 800908e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009092:	d1e3      	bne.n	800905c <sqrtf+0x54>
 8009094:	f000 f80e 	bl	80090b4 <__errno>
 8009098:	2321      	movs	r3, #33	; 0x21
 800909a:	6003      	str	r3, [r0, #0]
 800909c:	e7e2      	b.n	8009064 <sqrtf+0x5c>
 800909e:	bf00      	nop
 80090a0:	20000009 	.word	0x20000009
 80090a4:	0800ba14 	.word	0x0800ba14

080090a8 <__ieee754_sqrtf>:
 80090a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80090ac:	4770      	bx	lr

080090ae <matherr>:
 80090ae:	2000      	movs	r0, #0
 80090b0:	4770      	bx	lr
	...

080090b4 <__errno>:
 80090b4:	4b01      	ldr	r3, [pc, #4]	; (80090bc <__errno+0x8>)
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	2000000c 	.word	0x2000000c

080090c0 <__libc_init_array>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	4e0d      	ldr	r6, [pc, #52]	; (80090f8 <__libc_init_array+0x38>)
 80090c4:	4c0d      	ldr	r4, [pc, #52]	; (80090fc <__libc_init_array+0x3c>)
 80090c6:	1ba4      	subs	r4, r4, r6
 80090c8:	10a4      	asrs	r4, r4, #2
 80090ca:	2500      	movs	r5, #0
 80090cc:	42a5      	cmp	r5, r4
 80090ce:	d109      	bne.n	80090e4 <__libc_init_array+0x24>
 80090d0:	4e0b      	ldr	r6, [pc, #44]	; (8009100 <__libc_init_array+0x40>)
 80090d2:	4c0c      	ldr	r4, [pc, #48]	; (8009104 <__libc_init_array+0x44>)
 80090d4:	f002 fc64 	bl	800b9a0 <_init>
 80090d8:	1ba4      	subs	r4, r4, r6
 80090da:	10a4      	asrs	r4, r4, #2
 80090dc:	2500      	movs	r5, #0
 80090de:	42a5      	cmp	r5, r4
 80090e0:	d105      	bne.n	80090ee <__libc_init_array+0x2e>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090e8:	4798      	blx	r3
 80090ea:	3501      	adds	r5, #1
 80090ec:	e7ee      	b.n	80090cc <__libc_init_array+0xc>
 80090ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090f2:	4798      	blx	r3
 80090f4:	3501      	adds	r5, #1
 80090f6:	e7f2      	b.n	80090de <__libc_init_array+0x1e>
 80090f8:	0800bce8 	.word	0x0800bce8
 80090fc:	0800bce8 	.word	0x0800bce8
 8009100:	0800bce8 	.word	0x0800bce8
 8009104:	0800bcf0 	.word	0x0800bcf0

08009108 <malloc>:
 8009108:	4b02      	ldr	r3, [pc, #8]	; (8009114 <malloc+0xc>)
 800910a:	4601      	mov	r1, r0
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	f000 b86d 	b.w	80091ec <_malloc_r>
 8009112:	bf00      	nop
 8009114:	2000000c 	.word	0x2000000c

08009118 <free>:
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <free+0xc>)
 800911a:	4601      	mov	r1, r0
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f000 b817 	b.w	8009150 <_free_r>
 8009122:	bf00      	nop
 8009124:	2000000c 	.word	0x2000000c

08009128 <memcpy>:
 8009128:	b510      	push	{r4, lr}
 800912a:	1e43      	subs	r3, r0, #1
 800912c:	440a      	add	r2, r1
 800912e:	4291      	cmp	r1, r2
 8009130:	d100      	bne.n	8009134 <memcpy+0xc>
 8009132:	bd10      	pop	{r4, pc}
 8009134:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800913c:	e7f7      	b.n	800912e <memcpy+0x6>

0800913e <memset>:
 800913e:	4402      	add	r2, r0
 8009140:	4603      	mov	r3, r0
 8009142:	4293      	cmp	r3, r2
 8009144:	d100      	bne.n	8009148 <memset+0xa>
 8009146:	4770      	bx	lr
 8009148:	f803 1b01 	strb.w	r1, [r3], #1
 800914c:	e7f9      	b.n	8009142 <memset+0x4>
	...

08009150 <_free_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4605      	mov	r5, r0
 8009154:	2900      	cmp	r1, #0
 8009156:	d045      	beq.n	80091e4 <_free_r+0x94>
 8009158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915c:	1f0c      	subs	r4, r1, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	bfb8      	it	lt
 8009162:	18e4      	addlt	r4, r4, r3
 8009164:	f001 ff24 	bl	800afb0 <__malloc_lock>
 8009168:	4a1f      	ldr	r2, [pc, #124]	; (80091e8 <_free_r+0x98>)
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	4610      	mov	r0, r2
 800916e:	b933      	cbnz	r3, 800917e <_free_r+0x2e>
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	6014      	str	r4, [r2, #0]
 8009174:	4628      	mov	r0, r5
 8009176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800917a:	f001 bf1a 	b.w	800afb2 <__malloc_unlock>
 800917e:	42a3      	cmp	r3, r4
 8009180:	d90c      	bls.n	800919c <_free_r+0x4c>
 8009182:	6821      	ldr	r1, [r4, #0]
 8009184:	1862      	adds	r2, r4, r1
 8009186:	4293      	cmp	r3, r2
 8009188:	bf04      	itt	eq
 800918a:	681a      	ldreq	r2, [r3, #0]
 800918c:	685b      	ldreq	r3, [r3, #4]
 800918e:	6063      	str	r3, [r4, #4]
 8009190:	bf04      	itt	eq
 8009192:	1852      	addeq	r2, r2, r1
 8009194:	6022      	streq	r2, [r4, #0]
 8009196:	6004      	str	r4, [r0, #0]
 8009198:	e7ec      	b.n	8009174 <_free_r+0x24>
 800919a:	4613      	mov	r3, r2
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	b10a      	cbz	r2, 80091a4 <_free_r+0x54>
 80091a0:	42a2      	cmp	r2, r4
 80091a2:	d9fa      	bls.n	800919a <_free_r+0x4a>
 80091a4:	6819      	ldr	r1, [r3, #0]
 80091a6:	1858      	adds	r0, r3, r1
 80091a8:	42a0      	cmp	r0, r4
 80091aa:	d10b      	bne.n	80091c4 <_free_r+0x74>
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	4401      	add	r1, r0
 80091b0:	1858      	adds	r0, r3, r1
 80091b2:	4282      	cmp	r2, r0
 80091b4:	6019      	str	r1, [r3, #0]
 80091b6:	d1dd      	bne.n	8009174 <_free_r+0x24>
 80091b8:	6810      	ldr	r0, [r2, #0]
 80091ba:	6852      	ldr	r2, [r2, #4]
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	4401      	add	r1, r0
 80091c0:	6019      	str	r1, [r3, #0]
 80091c2:	e7d7      	b.n	8009174 <_free_r+0x24>
 80091c4:	d902      	bls.n	80091cc <_free_r+0x7c>
 80091c6:	230c      	movs	r3, #12
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	e7d3      	b.n	8009174 <_free_r+0x24>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	1821      	adds	r1, r4, r0
 80091d0:	428a      	cmp	r2, r1
 80091d2:	bf04      	itt	eq
 80091d4:	6811      	ldreq	r1, [r2, #0]
 80091d6:	6852      	ldreq	r2, [r2, #4]
 80091d8:	6062      	str	r2, [r4, #4]
 80091da:	bf04      	itt	eq
 80091dc:	1809      	addeq	r1, r1, r0
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	605c      	str	r4, [r3, #4]
 80091e2:	e7c7      	b.n	8009174 <_free_r+0x24>
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	2000026c 	.word	0x2000026c

080091ec <_malloc_r>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	1ccd      	adds	r5, r1, #3
 80091f0:	f025 0503 	bic.w	r5, r5, #3
 80091f4:	3508      	adds	r5, #8
 80091f6:	2d0c      	cmp	r5, #12
 80091f8:	bf38      	it	cc
 80091fa:	250c      	movcc	r5, #12
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	4606      	mov	r6, r0
 8009200:	db01      	blt.n	8009206 <_malloc_r+0x1a>
 8009202:	42a9      	cmp	r1, r5
 8009204:	d903      	bls.n	800920e <_malloc_r+0x22>
 8009206:	230c      	movs	r3, #12
 8009208:	6033      	str	r3, [r6, #0]
 800920a:	2000      	movs	r0, #0
 800920c:	bd70      	pop	{r4, r5, r6, pc}
 800920e:	f001 fecf 	bl	800afb0 <__malloc_lock>
 8009212:	4a21      	ldr	r2, [pc, #132]	; (8009298 <_malloc_r+0xac>)
 8009214:	6814      	ldr	r4, [r2, #0]
 8009216:	4621      	mov	r1, r4
 8009218:	b991      	cbnz	r1, 8009240 <_malloc_r+0x54>
 800921a:	4c20      	ldr	r4, [pc, #128]	; (800929c <_malloc_r+0xb0>)
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	b91b      	cbnz	r3, 8009228 <_malloc_r+0x3c>
 8009220:	4630      	mov	r0, r6
 8009222:	f000 fd15 	bl	8009c50 <_sbrk_r>
 8009226:	6020      	str	r0, [r4, #0]
 8009228:	4629      	mov	r1, r5
 800922a:	4630      	mov	r0, r6
 800922c:	f000 fd10 	bl	8009c50 <_sbrk_r>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d124      	bne.n	800927e <_malloc_r+0x92>
 8009234:	230c      	movs	r3, #12
 8009236:	6033      	str	r3, [r6, #0]
 8009238:	4630      	mov	r0, r6
 800923a:	f001 feba 	bl	800afb2 <__malloc_unlock>
 800923e:	e7e4      	b.n	800920a <_malloc_r+0x1e>
 8009240:	680b      	ldr	r3, [r1, #0]
 8009242:	1b5b      	subs	r3, r3, r5
 8009244:	d418      	bmi.n	8009278 <_malloc_r+0x8c>
 8009246:	2b0b      	cmp	r3, #11
 8009248:	d90f      	bls.n	800926a <_malloc_r+0x7e>
 800924a:	600b      	str	r3, [r1, #0]
 800924c:	50cd      	str	r5, [r1, r3]
 800924e:	18cc      	adds	r4, r1, r3
 8009250:	4630      	mov	r0, r6
 8009252:	f001 feae 	bl	800afb2 <__malloc_unlock>
 8009256:	f104 000b 	add.w	r0, r4, #11
 800925a:	1d23      	adds	r3, r4, #4
 800925c:	f020 0007 	bic.w	r0, r0, #7
 8009260:	1ac3      	subs	r3, r0, r3
 8009262:	d0d3      	beq.n	800920c <_malloc_r+0x20>
 8009264:	425a      	negs	r2, r3
 8009266:	50e2      	str	r2, [r4, r3]
 8009268:	e7d0      	b.n	800920c <_malloc_r+0x20>
 800926a:	428c      	cmp	r4, r1
 800926c:	684b      	ldr	r3, [r1, #4]
 800926e:	bf16      	itet	ne
 8009270:	6063      	strne	r3, [r4, #4]
 8009272:	6013      	streq	r3, [r2, #0]
 8009274:	460c      	movne	r4, r1
 8009276:	e7eb      	b.n	8009250 <_malloc_r+0x64>
 8009278:	460c      	mov	r4, r1
 800927a:	6849      	ldr	r1, [r1, #4]
 800927c:	e7cc      	b.n	8009218 <_malloc_r+0x2c>
 800927e:	1cc4      	adds	r4, r0, #3
 8009280:	f024 0403 	bic.w	r4, r4, #3
 8009284:	42a0      	cmp	r0, r4
 8009286:	d005      	beq.n	8009294 <_malloc_r+0xa8>
 8009288:	1a21      	subs	r1, r4, r0
 800928a:	4630      	mov	r0, r6
 800928c:	f000 fce0 	bl	8009c50 <_sbrk_r>
 8009290:	3001      	adds	r0, #1
 8009292:	d0cf      	beq.n	8009234 <_malloc_r+0x48>
 8009294:	6025      	str	r5, [r4, #0]
 8009296:	e7db      	b.n	8009250 <_malloc_r+0x64>
 8009298:	2000026c 	.word	0x2000026c
 800929c:	20000270 	.word	0x20000270

080092a0 <__cvt>:
 80092a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	ec55 4b10 	vmov	r4, r5, d0
 80092a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80092aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	460e      	mov	r6, r1
 80092b2:	4691      	mov	r9, r2
 80092b4:	4619      	mov	r1, r3
 80092b6:	bfb8      	it	lt
 80092b8:	4622      	movlt	r2, r4
 80092ba:	462b      	mov	r3, r5
 80092bc:	f027 0720 	bic.w	r7, r7, #32
 80092c0:	bfbb      	ittet	lt
 80092c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092c6:	461d      	movlt	r5, r3
 80092c8:	2300      	movge	r3, #0
 80092ca:	232d      	movlt	r3, #45	; 0x2d
 80092cc:	bfb8      	it	lt
 80092ce:	4614      	movlt	r4, r2
 80092d0:	2f46      	cmp	r7, #70	; 0x46
 80092d2:	700b      	strb	r3, [r1, #0]
 80092d4:	d004      	beq.n	80092e0 <__cvt+0x40>
 80092d6:	2f45      	cmp	r7, #69	; 0x45
 80092d8:	d100      	bne.n	80092dc <__cvt+0x3c>
 80092da:	3601      	adds	r6, #1
 80092dc:	2102      	movs	r1, #2
 80092de:	e000      	b.n	80092e2 <__cvt+0x42>
 80092e0:	2103      	movs	r1, #3
 80092e2:	ab03      	add	r3, sp, #12
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	ab02      	add	r3, sp, #8
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4632      	mov	r2, r6
 80092ec:	4653      	mov	r3, sl
 80092ee:	ec45 4b10 	vmov	d0, r4, r5
 80092f2:	f000 feb9 	bl	800a068 <_dtoa_r>
 80092f6:	2f47      	cmp	r7, #71	; 0x47
 80092f8:	4680      	mov	r8, r0
 80092fa:	d102      	bne.n	8009302 <__cvt+0x62>
 80092fc:	f019 0f01 	tst.w	r9, #1
 8009300:	d026      	beq.n	8009350 <__cvt+0xb0>
 8009302:	2f46      	cmp	r7, #70	; 0x46
 8009304:	eb08 0906 	add.w	r9, r8, r6
 8009308:	d111      	bne.n	800932e <__cvt+0x8e>
 800930a:	f898 3000 	ldrb.w	r3, [r8]
 800930e:	2b30      	cmp	r3, #48	; 0x30
 8009310:	d10a      	bne.n	8009328 <__cvt+0x88>
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f7 fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 800931e:	b918      	cbnz	r0, 8009328 <__cvt+0x88>
 8009320:	f1c6 0601 	rsb	r6, r6, #1
 8009324:	f8ca 6000 	str.w	r6, [sl]
 8009328:	f8da 3000 	ldr.w	r3, [sl]
 800932c:	4499      	add	r9, r3
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f7 fbd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800933a:	b938      	cbnz	r0, 800934c <__cvt+0xac>
 800933c:	2230      	movs	r2, #48	; 0x30
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	454b      	cmp	r3, r9
 8009342:	d205      	bcs.n	8009350 <__cvt+0xb0>
 8009344:	1c59      	adds	r1, r3, #1
 8009346:	9103      	str	r1, [sp, #12]
 8009348:	701a      	strb	r2, [r3, #0]
 800934a:	e7f8      	b.n	800933e <__cvt+0x9e>
 800934c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009354:	eba3 0308 	sub.w	r3, r3, r8
 8009358:	4640      	mov	r0, r8
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	b004      	add	sp, #16
 800935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009362 <__exponent>:
 8009362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009364:	2900      	cmp	r1, #0
 8009366:	4604      	mov	r4, r0
 8009368:	bfba      	itte	lt
 800936a:	4249      	neglt	r1, r1
 800936c:	232d      	movlt	r3, #45	; 0x2d
 800936e:	232b      	movge	r3, #43	; 0x2b
 8009370:	2909      	cmp	r1, #9
 8009372:	f804 2b02 	strb.w	r2, [r4], #2
 8009376:	7043      	strb	r3, [r0, #1]
 8009378:	dd20      	ble.n	80093bc <__exponent+0x5a>
 800937a:	f10d 0307 	add.w	r3, sp, #7
 800937e:	461f      	mov	r7, r3
 8009380:	260a      	movs	r6, #10
 8009382:	fb91 f5f6 	sdiv	r5, r1, r6
 8009386:	fb06 1115 	mls	r1, r6, r5, r1
 800938a:	3130      	adds	r1, #48	; 0x30
 800938c:	2d09      	cmp	r5, #9
 800938e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009392:	f103 32ff 	add.w	r2, r3, #4294967295
 8009396:	4629      	mov	r1, r5
 8009398:	dc09      	bgt.n	80093ae <__exponent+0x4c>
 800939a:	3130      	adds	r1, #48	; 0x30
 800939c:	3b02      	subs	r3, #2
 800939e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80093a2:	42bb      	cmp	r3, r7
 80093a4:	4622      	mov	r2, r4
 80093a6:	d304      	bcc.n	80093b2 <__exponent+0x50>
 80093a8:	1a10      	subs	r0, r2, r0
 80093aa:	b003      	add	sp, #12
 80093ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ae:	4613      	mov	r3, r2
 80093b0:	e7e7      	b.n	8009382 <__exponent+0x20>
 80093b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b6:	f804 2b01 	strb.w	r2, [r4], #1
 80093ba:	e7f2      	b.n	80093a2 <__exponent+0x40>
 80093bc:	2330      	movs	r3, #48	; 0x30
 80093be:	4419      	add	r1, r3
 80093c0:	7083      	strb	r3, [r0, #2]
 80093c2:	1d02      	adds	r2, r0, #4
 80093c4:	70c1      	strb	r1, [r0, #3]
 80093c6:	e7ef      	b.n	80093a8 <__exponent+0x46>

080093c8 <_printf_float>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	b08d      	sub	sp, #52	; 0x34
 80093ce:	460c      	mov	r4, r1
 80093d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80093d4:	4616      	mov	r6, r2
 80093d6:	461f      	mov	r7, r3
 80093d8:	4605      	mov	r5, r0
 80093da:	f001 fd77 	bl	800aecc <_localeconv_r>
 80093de:	6803      	ldr	r3, [r0, #0]
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f6 ff04 	bl	80001f0 <strlen>
 80093e8:	2300      	movs	r3, #0
 80093ea:	930a      	str	r3, [sp, #40]	; 0x28
 80093ec:	f8d8 3000 	ldr.w	r3, [r8]
 80093f0:	9005      	str	r0, [sp, #20]
 80093f2:	3307      	adds	r3, #7
 80093f4:	f023 0307 	bic.w	r3, r3, #7
 80093f8:	f103 0208 	add.w	r2, r3, #8
 80093fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009400:	f8d4 b000 	ldr.w	fp, [r4]
 8009404:	f8c8 2000 	str.w	r2, [r8]
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009410:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009414:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	f8cd 8018 	str.w	r8, [sp, #24]
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	4ba7      	ldr	r3, [pc, #668]	; (80096c0 <_printf_float+0x2f8>)
 8009424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009428:	f7f7 fb90 	bl	8000b4c <__aeabi_dcmpun>
 800942c:	bb70      	cbnz	r0, 800948c <_printf_float+0xc4>
 800942e:	f04f 32ff 	mov.w	r2, #4294967295
 8009432:	4ba3      	ldr	r3, [pc, #652]	; (80096c0 <_printf_float+0x2f8>)
 8009434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009438:	f7f7 fb6a 	bl	8000b10 <__aeabi_dcmple>
 800943c:	bb30      	cbnz	r0, 800948c <_printf_float+0xc4>
 800943e:	2200      	movs	r2, #0
 8009440:	2300      	movs	r3, #0
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f7f7 fb59 	bl	8000afc <__aeabi_dcmplt>
 800944a:	b110      	cbz	r0, 8009452 <_printf_float+0x8a>
 800944c:	232d      	movs	r3, #45	; 0x2d
 800944e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009452:	4a9c      	ldr	r2, [pc, #624]	; (80096c4 <_printf_float+0x2fc>)
 8009454:	4b9c      	ldr	r3, [pc, #624]	; (80096c8 <_printf_float+0x300>)
 8009456:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800945a:	bf8c      	ite	hi
 800945c:	4690      	movhi	r8, r2
 800945e:	4698      	movls	r8, r3
 8009460:	2303      	movs	r3, #3
 8009462:	f02b 0204 	bic.w	r2, fp, #4
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	6022      	str	r2, [r4, #0]
 800946a:	f04f 0900 	mov.w	r9, #0
 800946e:	9700      	str	r7, [sp, #0]
 8009470:	4633      	mov	r3, r6
 8009472:	aa0b      	add	r2, sp, #44	; 0x2c
 8009474:	4621      	mov	r1, r4
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f9e6 	bl	8009848 <_printf_common>
 800947c:	3001      	adds	r0, #1
 800947e:	f040 808d 	bne.w	800959c <_printf_float+0x1d4>
 8009482:	f04f 30ff 	mov.w	r0, #4294967295
 8009486:	b00d      	add	sp, #52	; 0x34
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	f7f7 fb5a 	bl	8000b4c <__aeabi_dcmpun>
 8009498:	b110      	cbz	r0, 80094a0 <_printf_float+0xd8>
 800949a:	4a8c      	ldr	r2, [pc, #560]	; (80096cc <_printf_float+0x304>)
 800949c:	4b8c      	ldr	r3, [pc, #560]	; (80096d0 <_printf_float+0x308>)
 800949e:	e7da      	b.n	8009456 <_printf_float+0x8e>
 80094a0:	6861      	ldr	r1, [r4, #4]
 80094a2:	1c4b      	adds	r3, r1, #1
 80094a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80094a8:	a80a      	add	r0, sp, #40	; 0x28
 80094aa:	d13e      	bne.n	800952a <_printf_float+0x162>
 80094ac:	2306      	movs	r3, #6
 80094ae:	6063      	str	r3, [r4, #4]
 80094b0:	2300      	movs	r3, #0
 80094b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80094b6:	ab09      	add	r3, sp, #36	; 0x24
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	ec49 8b10 	vmov	d0, r8, r9
 80094be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094c2:	6022      	str	r2, [r4, #0]
 80094c4:	f8cd a004 	str.w	sl, [sp, #4]
 80094c8:	6861      	ldr	r1, [r4, #4]
 80094ca:	4628      	mov	r0, r5
 80094cc:	f7ff fee8 	bl	80092a0 <__cvt>
 80094d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80094d4:	2b47      	cmp	r3, #71	; 0x47
 80094d6:	4680      	mov	r8, r0
 80094d8:	d109      	bne.n	80094ee <_printf_float+0x126>
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	1cd8      	adds	r0, r3, #3
 80094de:	db02      	blt.n	80094e6 <_printf_float+0x11e>
 80094e0:	6862      	ldr	r2, [r4, #4]
 80094e2:	4293      	cmp	r3, r2
 80094e4:	dd47      	ble.n	8009576 <_printf_float+0x1ae>
 80094e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80094ea:	fa5f fa8a 	uxtb.w	sl, sl
 80094ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80094f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f4:	d824      	bhi.n	8009540 <_printf_float+0x178>
 80094f6:	3901      	subs	r1, #1
 80094f8:	4652      	mov	r2, sl
 80094fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094fe:	9109      	str	r1, [sp, #36]	; 0x24
 8009500:	f7ff ff2f 	bl	8009362 <__exponent>
 8009504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009506:	1813      	adds	r3, r2, r0
 8009508:	2a01      	cmp	r2, #1
 800950a:	4681      	mov	r9, r0
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	dc02      	bgt.n	8009516 <_printf_float+0x14e>
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	07d1      	lsls	r1, r2, #31
 8009514:	d501      	bpl.n	800951a <_printf_float+0x152>
 8009516:	3301      	adds	r3, #1
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0a5      	beq.n	800946e <_printf_float+0xa6>
 8009522:	232d      	movs	r3, #45	; 0x2d
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009528:	e7a1      	b.n	800946e <_printf_float+0xa6>
 800952a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800952e:	f000 8177 	beq.w	8009820 <_printf_float+0x458>
 8009532:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009536:	d1bb      	bne.n	80094b0 <_printf_float+0xe8>
 8009538:	2900      	cmp	r1, #0
 800953a:	d1b9      	bne.n	80094b0 <_printf_float+0xe8>
 800953c:	2301      	movs	r3, #1
 800953e:	e7b6      	b.n	80094ae <_printf_float+0xe6>
 8009540:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009544:	d119      	bne.n	800957a <_printf_float+0x1b2>
 8009546:	2900      	cmp	r1, #0
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	dd0c      	ble.n	8009566 <_printf_float+0x19e>
 800954c:	6121      	str	r1, [r4, #16]
 800954e:	b913      	cbnz	r3, 8009556 <_printf_float+0x18e>
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	07d2      	lsls	r2, r2, #31
 8009554:	d502      	bpl.n	800955c <_printf_float+0x194>
 8009556:	3301      	adds	r3, #1
 8009558:	440b      	add	r3, r1
 800955a:	6123      	str	r3, [r4, #16]
 800955c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009560:	f04f 0900 	mov.w	r9, #0
 8009564:	e7d9      	b.n	800951a <_printf_float+0x152>
 8009566:	b913      	cbnz	r3, 800956e <_printf_float+0x1a6>
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	07d0      	lsls	r0, r2, #31
 800956c:	d501      	bpl.n	8009572 <_printf_float+0x1aa>
 800956e:	3302      	adds	r3, #2
 8009570:	e7f3      	b.n	800955a <_printf_float+0x192>
 8009572:	2301      	movs	r3, #1
 8009574:	e7f1      	b.n	800955a <_printf_float+0x192>
 8009576:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800957a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800957e:	4293      	cmp	r3, r2
 8009580:	db05      	blt.n	800958e <_printf_float+0x1c6>
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	07d1      	lsls	r1, r2, #31
 8009588:	d5e8      	bpl.n	800955c <_printf_float+0x194>
 800958a:	3301      	adds	r3, #1
 800958c:	e7e5      	b.n	800955a <_printf_float+0x192>
 800958e:	2b00      	cmp	r3, #0
 8009590:	bfd4      	ite	le
 8009592:	f1c3 0302 	rsble	r3, r3, #2
 8009596:	2301      	movgt	r3, #1
 8009598:	4413      	add	r3, r2
 800959a:	e7de      	b.n	800955a <_printf_float+0x192>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	055a      	lsls	r2, r3, #21
 80095a0:	d407      	bmi.n	80095b2 <_printf_float+0x1ea>
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	4642      	mov	r2, r8
 80095a6:	4631      	mov	r1, r6
 80095a8:	4628      	mov	r0, r5
 80095aa:	47b8      	blx	r7
 80095ac:	3001      	adds	r0, #1
 80095ae:	d12b      	bne.n	8009608 <_printf_float+0x240>
 80095b0:	e767      	b.n	8009482 <_printf_float+0xba>
 80095b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80095b6:	f240 80dc 	bls.w	8009772 <_printf_float+0x3aa>
 80095ba:	2200      	movs	r2, #0
 80095bc:	2300      	movs	r3, #0
 80095be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095c2:	f7f7 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d033      	beq.n	8009632 <_printf_float+0x26a>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4a41      	ldr	r2, [pc, #260]	; (80096d4 <_printf_float+0x30c>)
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b8      	blx	r7
 80095d4:	3001      	adds	r0, #1
 80095d6:	f43f af54 	beq.w	8009482 <_printf_float+0xba>
 80095da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095de:	429a      	cmp	r2, r3
 80095e0:	db02      	blt.n	80095e8 <_printf_float+0x220>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	07d8      	lsls	r0, r3, #31
 80095e6:	d50f      	bpl.n	8009608 <_printf_float+0x240>
 80095e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f af45 	beq.w	8009482 <_printf_float+0xba>
 80095f8:	f04f 0800 	mov.w	r8, #0
 80095fc:	f104 091a 	add.w	r9, r4, #26
 8009600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009602:	3b01      	subs	r3, #1
 8009604:	4543      	cmp	r3, r8
 8009606:	dc09      	bgt.n	800961c <_printf_float+0x254>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	079b      	lsls	r3, r3, #30
 800960c:	f100 8103 	bmi.w	8009816 <_printf_float+0x44e>
 8009610:	68e0      	ldr	r0, [r4, #12]
 8009612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009614:	4298      	cmp	r0, r3
 8009616:	bfb8      	it	lt
 8009618:	4618      	movlt	r0, r3
 800961a:	e734      	b.n	8009486 <_printf_float+0xbe>
 800961c:	2301      	movs	r3, #1
 800961e:	464a      	mov	r2, r9
 8009620:	4631      	mov	r1, r6
 8009622:	4628      	mov	r0, r5
 8009624:	47b8      	blx	r7
 8009626:	3001      	adds	r0, #1
 8009628:	f43f af2b 	beq.w	8009482 <_printf_float+0xba>
 800962c:	f108 0801 	add.w	r8, r8, #1
 8009630:	e7e6      	b.n	8009600 <_printf_float+0x238>
 8009632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	dc2b      	bgt.n	8009690 <_printf_float+0x2c8>
 8009638:	2301      	movs	r3, #1
 800963a:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <_printf_float+0x30c>)
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f af1d 	beq.w	8009482 <_printf_float+0xba>
 8009648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964a:	b923      	cbnz	r3, 8009656 <_printf_float+0x28e>
 800964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964e:	b913      	cbnz	r3, 8009656 <_printf_float+0x28e>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07d9      	lsls	r1, r3, #31
 8009654:	d5d8      	bpl.n	8009608 <_printf_float+0x240>
 8009656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f af0e 	beq.w	8009482 <_printf_float+0xba>
 8009666:	f04f 0900 	mov.w	r9, #0
 800966a:	f104 0a1a 	add.w	sl, r4, #26
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	425b      	negs	r3, r3
 8009672:	454b      	cmp	r3, r9
 8009674:	dc01      	bgt.n	800967a <_printf_float+0x2b2>
 8009676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009678:	e794      	b.n	80095a4 <_printf_float+0x1dc>
 800967a:	2301      	movs	r3, #1
 800967c:	4652      	mov	r2, sl
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	f43f aefc 	beq.w	8009482 <_printf_float+0xba>
 800968a:	f109 0901 	add.w	r9, r9, #1
 800968e:	e7ee      	b.n	800966e <_printf_float+0x2a6>
 8009690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009694:	429a      	cmp	r2, r3
 8009696:	bfa8      	it	ge
 8009698:	461a      	movge	r2, r3
 800969a:	2a00      	cmp	r2, #0
 800969c:	4691      	mov	r9, r2
 800969e:	dd07      	ble.n	80096b0 <_printf_float+0x2e8>
 80096a0:	4613      	mov	r3, r2
 80096a2:	4631      	mov	r1, r6
 80096a4:	4642      	mov	r2, r8
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b8      	blx	r7
 80096aa:	3001      	adds	r0, #1
 80096ac:	f43f aee9 	beq.w	8009482 <_printf_float+0xba>
 80096b0:	f104 031a 	add.w	r3, r4, #26
 80096b4:	f04f 0b00 	mov.w	fp, #0
 80096b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096bc:	9306      	str	r3, [sp, #24]
 80096be:	e015      	b.n	80096ec <_printf_float+0x324>
 80096c0:	7fefffff 	.word	0x7fefffff
 80096c4:	0800ba24 	.word	0x0800ba24
 80096c8:	0800ba20 	.word	0x0800ba20
 80096cc:	0800ba2c 	.word	0x0800ba2c
 80096d0:	0800ba28 	.word	0x0800ba28
 80096d4:	0800ba30 	.word	0x0800ba30
 80096d8:	2301      	movs	r3, #1
 80096da:	9a06      	ldr	r2, [sp, #24]
 80096dc:	4631      	mov	r1, r6
 80096de:	4628      	mov	r0, r5
 80096e0:	47b8      	blx	r7
 80096e2:	3001      	adds	r0, #1
 80096e4:	f43f aecd 	beq.w	8009482 <_printf_float+0xba>
 80096e8:	f10b 0b01 	add.w	fp, fp, #1
 80096ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80096f0:	ebaa 0309 	sub.w	r3, sl, r9
 80096f4:	455b      	cmp	r3, fp
 80096f6:	dcef      	bgt.n	80096d8 <_printf_float+0x310>
 80096f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096fc:	429a      	cmp	r2, r3
 80096fe:	44d0      	add	r8, sl
 8009700:	db15      	blt.n	800972e <_printf_float+0x366>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	07da      	lsls	r2, r3, #31
 8009706:	d412      	bmi.n	800972e <_printf_float+0x366>
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800970c:	eba3 020a 	sub.w	r2, r3, sl
 8009710:	eba3 0a01 	sub.w	sl, r3, r1
 8009714:	4592      	cmp	sl, r2
 8009716:	bfa8      	it	ge
 8009718:	4692      	movge	sl, r2
 800971a:	f1ba 0f00 	cmp.w	sl, #0
 800971e:	dc0e      	bgt.n	800973e <_printf_float+0x376>
 8009720:	f04f 0800 	mov.w	r8, #0
 8009724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009728:	f104 091a 	add.w	r9, r4, #26
 800972c:	e019      	b.n	8009762 <_printf_float+0x39a>
 800972e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	47b8      	blx	r7
 8009738:	3001      	adds	r0, #1
 800973a:	d1e5      	bne.n	8009708 <_printf_float+0x340>
 800973c:	e6a1      	b.n	8009482 <_printf_float+0xba>
 800973e:	4653      	mov	r3, sl
 8009740:	4642      	mov	r2, r8
 8009742:	4631      	mov	r1, r6
 8009744:	4628      	mov	r0, r5
 8009746:	47b8      	blx	r7
 8009748:	3001      	adds	r0, #1
 800974a:	d1e9      	bne.n	8009720 <_printf_float+0x358>
 800974c:	e699      	b.n	8009482 <_printf_float+0xba>
 800974e:	2301      	movs	r3, #1
 8009750:	464a      	mov	r2, r9
 8009752:	4631      	mov	r1, r6
 8009754:	4628      	mov	r0, r5
 8009756:	47b8      	blx	r7
 8009758:	3001      	adds	r0, #1
 800975a:	f43f ae92 	beq.w	8009482 <_printf_float+0xba>
 800975e:	f108 0801 	add.w	r8, r8, #1
 8009762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009766:	1a9b      	subs	r3, r3, r2
 8009768:	eba3 030a 	sub.w	r3, r3, sl
 800976c:	4543      	cmp	r3, r8
 800976e:	dcee      	bgt.n	800974e <_printf_float+0x386>
 8009770:	e74a      	b.n	8009608 <_printf_float+0x240>
 8009772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009774:	2a01      	cmp	r2, #1
 8009776:	dc01      	bgt.n	800977c <_printf_float+0x3b4>
 8009778:	07db      	lsls	r3, r3, #31
 800977a:	d53a      	bpl.n	80097f2 <_printf_float+0x42a>
 800977c:	2301      	movs	r3, #1
 800977e:	4642      	mov	r2, r8
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f ae7b 	beq.w	8009482 <_printf_float+0xba>
 800978c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	47b8      	blx	r7
 8009796:	3001      	adds	r0, #1
 8009798:	f108 0801 	add.w	r8, r8, #1
 800979c:	f43f ae71 	beq.w	8009482 <_printf_float+0xba>
 80097a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a2:	2200      	movs	r2, #0
 80097a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80097a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097ac:	2300      	movs	r3, #0
 80097ae:	f7f7 f99b 	bl	8000ae8 <__aeabi_dcmpeq>
 80097b2:	b9c8      	cbnz	r0, 80097e8 <_printf_float+0x420>
 80097b4:	4653      	mov	r3, sl
 80097b6:	4642      	mov	r2, r8
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	d10e      	bne.n	80097e0 <_printf_float+0x418>
 80097c2:	e65e      	b.n	8009482 <_printf_float+0xba>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4652      	mov	r2, sl
 80097c8:	4631      	mov	r1, r6
 80097ca:	4628      	mov	r0, r5
 80097cc:	47b8      	blx	r7
 80097ce:	3001      	adds	r0, #1
 80097d0:	f43f ae57 	beq.w	8009482 <_printf_float+0xba>
 80097d4:	f108 0801 	add.w	r8, r8, #1
 80097d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097da:	3b01      	subs	r3, #1
 80097dc:	4543      	cmp	r3, r8
 80097de:	dcf1      	bgt.n	80097c4 <_printf_float+0x3fc>
 80097e0:	464b      	mov	r3, r9
 80097e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097e6:	e6de      	b.n	80095a6 <_printf_float+0x1de>
 80097e8:	f04f 0800 	mov.w	r8, #0
 80097ec:	f104 0a1a 	add.w	sl, r4, #26
 80097f0:	e7f2      	b.n	80097d8 <_printf_float+0x410>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7df      	b.n	80097b6 <_printf_float+0x3ee>
 80097f6:	2301      	movs	r3, #1
 80097f8:	464a      	mov	r2, r9
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b8      	blx	r7
 8009800:	3001      	adds	r0, #1
 8009802:	f43f ae3e 	beq.w	8009482 <_printf_float+0xba>
 8009806:	f108 0801 	add.w	r8, r8, #1
 800980a:	68e3      	ldr	r3, [r4, #12]
 800980c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	4543      	cmp	r3, r8
 8009812:	dcf0      	bgt.n	80097f6 <_printf_float+0x42e>
 8009814:	e6fc      	b.n	8009610 <_printf_float+0x248>
 8009816:	f04f 0800 	mov.w	r8, #0
 800981a:	f104 0919 	add.w	r9, r4, #25
 800981e:	e7f4      	b.n	800980a <_printf_float+0x442>
 8009820:	2900      	cmp	r1, #0
 8009822:	f43f ae8b 	beq.w	800953c <_printf_float+0x174>
 8009826:	2300      	movs	r3, #0
 8009828:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800982c:	ab09      	add	r3, sp, #36	; 0x24
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	ec49 8b10 	vmov	d0, r8, r9
 8009834:	6022      	str	r2, [r4, #0]
 8009836:	f8cd a004 	str.w	sl, [sp, #4]
 800983a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800983e:	4628      	mov	r0, r5
 8009840:	f7ff fd2e 	bl	80092a0 <__cvt>
 8009844:	4680      	mov	r8, r0
 8009846:	e648      	b.n	80094da <_printf_float+0x112>

08009848 <_printf_common>:
 8009848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800984c:	4691      	mov	r9, r2
 800984e:	461f      	mov	r7, r3
 8009850:	688a      	ldr	r2, [r1, #8]
 8009852:	690b      	ldr	r3, [r1, #16]
 8009854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009858:	4293      	cmp	r3, r2
 800985a:	bfb8      	it	lt
 800985c:	4613      	movlt	r3, r2
 800985e:	f8c9 3000 	str.w	r3, [r9]
 8009862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009866:	4606      	mov	r6, r0
 8009868:	460c      	mov	r4, r1
 800986a:	b112      	cbz	r2, 8009872 <_printf_common+0x2a>
 800986c:	3301      	adds	r3, #1
 800986e:	f8c9 3000 	str.w	r3, [r9]
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	0699      	lsls	r1, r3, #26
 8009876:	bf42      	ittt	mi
 8009878:	f8d9 3000 	ldrmi.w	r3, [r9]
 800987c:	3302      	addmi	r3, #2
 800987e:	f8c9 3000 	strmi.w	r3, [r9]
 8009882:	6825      	ldr	r5, [r4, #0]
 8009884:	f015 0506 	ands.w	r5, r5, #6
 8009888:	d107      	bne.n	800989a <_printf_common+0x52>
 800988a:	f104 0a19 	add.w	sl, r4, #25
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	f8d9 2000 	ldr.w	r2, [r9]
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	42ab      	cmp	r3, r5
 8009898:	dc28      	bgt.n	80098ec <_printf_common+0xa4>
 800989a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	3300      	adds	r3, #0
 80098a2:	bf18      	it	ne
 80098a4:	2301      	movne	r3, #1
 80098a6:	0692      	lsls	r2, r2, #26
 80098a8:	d42d      	bmi.n	8009906 <_printf_common+0xbe>
 80098aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ae:	4639      	mov	r1, r7
 80098b0:	4630      	mov	r0, r6
 80098b2:	47c0      	blx	r8
 80098b4:	3001      	adds	r0, #1
 80098b6:	d020      	beq.n	80098fa <_printf_common+0xb2>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	68e5      	ldr	r5, [r4, #12]
 80098bc:	f8d9 2000 	ldr.w	r2, [r9]
 80098c0:	f003 0306 	and.w	r3, r3, #6
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	bf08      	it	eq
 80098c8:	1aad      	subeq	r5, r5, r2
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	6922      	ldr	r2, [r4, #16]
 80098ce:	bf0c      	ite	eq
 80098d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098d4:	2500      	movne	r5, #0
 80098d6:	4293      	cmp	r3, r2
 80098d8:	bfc4      	itt	gt
 80098da:	1a9b      	subgt	r3, r3, r2
 80098dc:	18ed      	addgt	r5, r5, r3
 80098de:	f04f 0900 	mov.w	r9, #0
 80098e2:	341a      	adds	r4, #26
 80098e4:	454d      	cmp	r5, r9
 80098e6:	d11a      	bne.n	800991e <_printf_common+0xd6>
 80098e8:	2000      	movs	r0, #0
 80098ea:	e008      	b.n	80098fe <_printf_common+0xb6>
 80098ec:	2301      	movs	r3, #1
 80098ee:	4652      	mov	r2, sl
 80098f0:	4639      	mov	r1, r7
 80098f2:	4630      	mov	r0, r6
 80098f4:	47c0      	blx	r8
 80098f6:	3001      	adds	r0, #1
 80098f8:	d103      	bne.n	8009902 <_printf_common+0xba>
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009902:	3501      	adds	r5, #1
 8009904:	e7c3      	b.n	800988e <_printf_common+0x46>
 8009906:	18e1      	adds	r1, r4, r3
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	2030      	movs	r0, #48	; 0x30
 800990c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009910:	4422      	add	r2, r4
 8009912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009916:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800991a:	3302      	adds	r3, #2
 800991c:	e7c5      	b.n	80098aa <_printf_common+0x62>
 800991e:	2301      	movs	r3, #1
 8009920:	4622      	mov	r2, r4
 8009922:	4639      	mov	r1, r7
 8009924:	4630      	mov	r0, r6
 8009926:	47c0      	blx	r8
 8009928:	3001      	adds	r0, #1
 800992a:	d0e6      	beq.n	80098fa <_printf_common+0xb2>
 800992c:	f109 0901 	add.w	r9, r9, #1
 8009930:	e7d8      	b.n	80098e4 <_printf_common+0x9c>
	...

08009934 <_printf_i>:
 8009934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009938:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800993c:	460c      	mov	r4, r1
 800993e:	7e09      	ldrb	r1, [r1, #24]
 8009940:	b085      	sub	sp, #20
 8009942:	296e      	cmp	r1, #110	; 0x6e
 8009944:	4617      	mov	r7, r2
 8009946:	4606      	mov	r6, r0
 8009948:	4698      	mov	r8, r3
 800994a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800994c:	f000 80b3 	beq.w	8009ab6 <_printf_i+0x182>
 8009950:	d822      	bhi.n	8009998 <_printf_i+0x64>
 8009952:	2963      	cmp	r1, #99	; 0x63
 8009954:	d036      	beq.n	80099c4 <_printf_i+0x90>
 8009956:	d80a      	bhi.n	800996e <_printf_i+0x3a>
 8009958:	2900      	cmp	r1, #0
 800995a:	f000 80b9 	beq.w	8009ad0 <_printf_i+0x19c>
 800995e:	2958      	cmp	r1, #88	; 0x58
 8009960:	f000 8083 	beq.w	8009a6a <_printf_i+0x136>
 8009964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009968:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800996c:	e032      	b.n	80099d4 <_printf_i+0xa0>
 800996e:	2964      	cmp	r1, #100	; 0x64
 8009970:	d001      	beq.n	8009976 <_printf_i+0x42>
 8009972:	2969      	cmp	r1, #105	; 0x69
 8009974:	d1f6      	bne.n	8009964 <_printf_i+0x30>
 8009976:	6820      	ldr	r0, [r4, #0]
 8009978:	6813      	ldr	r3, [r2, #0]
 800997a:	0605      	lsls	r5, r0, #24
 800997c:	f103 0104 	add.w	r1, r3, #4
 8009980:	d52a      	bpl.n	80099d8 <_printf_i+0xa4>
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6011      	str	r1, [r2, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	da03      	bge.n	8009992 <_printf_i+0x5e>
 800998a:	222d      	movs	r2, #45	; 0x2d
 800998c:	425b      	negs	r3, r3
 800998e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009992:	486f      	ldr	r0, [pc, #444]	; (8009b50 <_printf_i+0x21c>)
 8009994:	220a      	movs	r2, #10
 8009996:	e039      	b.n	8009a0c <_printf_i+0xd8>
 8009998:	2973      	cmp	r1, #115	; 0x73
 800999a:	f000 809d 	beq.w	8009ad8 <_printf_i+0x1a4>
 800999e:	d808      	bhi.n	80099b2 <_printf_i+0x7e>
 80099a0:	296f      	cmp	r1, #111	; 0x6f
 80099a2:	d020      	beq.n	80099e6 <_printf_i+0xb2>
 80099a4:	2970      	cmp	r1, #112	; 0x70
 80099a6:	d1dd      	bne.n	8009964 <_printf_i+0x30>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	f043 0320 	orr.w	r3, r3, #32
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	e003      	b.n	80099ba <_printf_i+0x86>
 80099b2:	2975      	cmp	r1, #117	; 0x75
 80099b4:	d017      	beq.n	80099e6 <_printf_i+0xb2>
 80099b6:	2978      	cmp	r1, #120	; 0x78
 80099b8:	d1d4      	bne.n	8009964 <_printf_i+0x30>
 80099ba:	2378      	movs	r3, #120	; 0x78
 80099bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099c0:	4864      	ldr	r0, [pc, #400]	; (8009b54 <_printf_i+0x220>)
 80099c2:	e055      	b.n	8009a70 <_printf_i+0x13c>
 80099c4:	6813      	ldr	r3, [r2, #0]
 80099c6:	1d19      	adds	r1, r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6011      	str	r1, [r2, #0]
 80099cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099d4:	2301      	movs	r3, #1
 80099d6:	e08c      	b.n	8009af2 <_printf_i+0x1be>
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6011      	str	r1, [r2, #0]
 80099dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099e0:	bf18      	it	ne
 80099e2:	b21b      	sxthne	r3, r3
 80099e4:	e7cf      	b.n	8009986 <_printf_i+0x52>
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	6825      	ldr	r5, [r4, #0]
 80099ea:	1d18      	adds	r0, r3, #4
 80099ec:	6010      	str	r0, [r2, #0]
 80099ee:	0628      	lsls	r0, r5, #24
 80099f0:	d501      	bpl.n	80099f6 <_printf_i+0xc2>
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	e002      	b.n	80099fc <_printf_i+0xc8>
 80099f6:	0668      	lsls	r0, r5, #25
 80099f8:	d5fb      	bpl.n	80099f2 <_printf_i+0xbe>
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	4854      	ldr	r0, [pc, #336]	; (8009b50 <_printf_i+0x21c>)
 80099fe:	296f      	cmp	r1, #111	; 0x6f
 8009a00:	bf14      	ite	ne
 8009a02:	220a      	movne	r2, #10
 8009a04:	2208      	moveq	r2, #8
 8009a06:	2100      	movs	r1, #0
 8009a08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a0c:	6865      	ldr	r5, [r4, #4]
 8009a0e:	60a5      	str	r5, [r4, #8]
 8009a10:	2d00      	cmp	r5, #0
 8009a12:	f2c0 8095 	blt.w	8009b40 <_printf_i+0x20c>
 8009a16:	6821      	ldr	r1, [r4, #0]
 8009a18:	f021 0104 	bic.w	r1, r1, #4
 8009a1c:	6021      	str	r1, [r4, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d13d      	bne.n	8009a9e <_printf_i+0x16a>
 8009a22:	2d00      	cmp	r5, #0
 8009a24:	f040 808e 	bne.w	8009b44 <_printf_i+0x210>
 8009a28:	4665      	mov	r5, ip
 8009a2a:	2a08      	cmp	r2, #8
 8009a2c:	d10b      	bne.n	8009a46 <_printf_i+0x112>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	07db      	lsls	r3, r3, #31
 8009a32:	d508      	bpl.n	8009a46 <_printf_i+0x112>
 8009a34:	6923      	ldr	r3, [r4, #16]
 8009a36:	6862      	ldr	r2, [r4, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	bfde      	ittt	le
 8009a3c:	2330      	movle	r3, #48	; 0x30
 8009a3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a46:	ebac 0305 	sub.w	r3, ip, r5
 8009a4a:	6123      	str	r3, [r4, #16]
 8009a4c:	f8cd 8000 	str.w	r8, [sp]
 8009a50:	463b      	mov	r3, r7
 8009a52:	aa03      	add	r2, sp, #12
 8009a54:	4621      	mov	r1, r4
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff fef6 	bl	8009848 <_printf_common>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d14d      	bne.n	8009afc <_printf_i+0x1c8>
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	b005      	add	sp, #20
 8009a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a6a:	4839      	ldr	r0, [pc, #228]	; (8009b50 <_printf_i+0x21c>)
 8009a6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009a70:	6813      	ldr	r3, [r2, #0]
 8009a72:	6821      	ldr	r1, [r4, #0]
 8009a74:	1d1d      	adds	r5, r3, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6015      	str	r5, [r2, #0]
 8009a7a:	060a      	lsls	r2, r1, #24
 8009a7c:	d50b      	bpl.n	8009a96 <_printf_i+0x162>
 8009a7e:	07ca      	lsls	r2, r1, #31
 8009a80:	bf44      	itt	mi
 8009a82:	f041 0120 	orrmi.w	r1, r1, #32
 8009a86:	6021      	strmi	r1, [r4, #0]
 8009a88:	b91b      	cbnz	r3, 8009a92 <_printf_i+0x15e>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	f022 0220 	bic.w	r2, r2, #32
 8009a90:	6022      	str	r2, [r4, #0]
 8009a92:	2210      	movs	r2, #16
 8009a94:	e7b7      	b.n	8009a06 <_printf_i+0xd2>
 8009a96:	064d      	lsls	r5, r1, #25
 8009a98:	bf48      	it	mi
 8009a9a:	b29b      	uxthmi	r3, r3
 8009a9c:	e7ef      	b.n	8009a7e <_printf_i+0x14a>
 8009a9e:	4665      	mov	r5, ip
 8009aa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009aa4:	fb02 3311 	mls	r3, r2, r1, r3
 8009aa8:	5cc3      	ldrb	r3, [r0, r3]
 8009aaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009aae:	460b      	mov	r3, r1
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d1f5      	bne.n	8009aa0 <_printf_i+0x16c>
 8009ab4:	e7b9      	b.n	8009a2a <_printf_i+0xf6>
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	6825      	ldr	r5, [r4, #0]
 8009aba:	6961      	ldr	r1, [r4, #20]
 8009abc:	1d18      	adds	r0, r3, #4
 8009abe:	6010      	str	r0, [r2, #0]
 8009ac0:	0628      	lsls	r0, r5, #24
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	d501      	bpl.n	8009aca <_printf_i+0x196>
 8009ac6:	6019      	str	r1, [r3, #0]
 8009ac8:	e002      	b.n	8009ad0 <_printf_i+0x19c>
 8009aca:	066a      	lsls	r2, r5, #25
 8009acc:	d5fb      	bpl.n	8009ac6 <_printf_i+0x192>
 8009ace:	8019      	strh	r1, [r3, #0]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	4665      	mov	r5, ip
 8009ad6:	e7b9      	b.n	8009a4c <_printf_i+0x118>
 8009ad8:	6813      	ldr	r3, [r2, #0]
 8009ada:	1d19      	adds	r1, r3, #4
 8009adc:	6011      	str	r1, [r2, #0]
 8009ade:	681d      	ldr	r5, [r3, #0]
 8009ae0:	6862      	ldr	r2, [r4, #4]
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f7f6 fb8b 	bl	8000200 <memchr>
 8009aea:	b108      	cbz	r0, 8009af0 <_printf_i+0x1bc>
 8009aec:	1b40      	subs	r0, r0, r5
 8009aee:	6060      	str	r0, [r4, #4]
 8009af0:	6863      	ldr	r3, [r4, #4]
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	2300      	movs	r3, #0
 8009af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009afa:	e7a7      	b.n	8009a4c <_printf_i+0x118>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	462a      	mov	r2, r5
 8009b00:	4639      	mov	r1, r7
 8009b02:	4630      	mov	r0, r6
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0aa      	beq.n	8009a60 <_printf_i+0x12c>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	079b      	lsls	r3, r3, #30
 8009b0e:	d413      	bmi.n	8009b38 <_printf_i+0x204>
 8009b10:	68e0      	ldr	r0, [r4, #12]
 8009b12:	9b03      	ldr	r3, [sp, #12]
 8009b14:	4298      	cmp	r0, r3
 8009b16:	bfb8      	it	lt
 8009b18:	4618      	movlt	r0, r3
 8009b1a:	e7a3      	b.n	8009a64 <_printf_i+0x130>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	464a      	mov	r2, r9
 8009b20:	4639      	mov	r1, r7
 8009b22:	4630      	mov	r0, r6
 8009b24:	47c0      	blx	r8
 8009b26:	3001      	adds	r0, #1
 8009b28:	d09a      	beq.n	8009a60 <_printf_i+0x12c>
 8009b2a:	3501      	adds	r5, #1
 8009b2c:	68e3      	ldr	r3, [r4, #12]
 8009b2e:	9a03      	ldr	r2, [sp, #12]
 8009b30:	1a9b      	subs	r3, r3, r2
 8009b32:	42ab      	cmp	r3, r5
 8009b34:	dcf2      	bgt.n	8009b1c <_printf_i+0x1e8>
 8009b36:	e7eb      	b.n	8009b10 <_printf_i+0x1dc>
 8009b38:	2500      	movs	r5, #0
 8009b3a:	f104 0919 	add.w	r9, r4, #25
 8009b3e:	e7f5      	b.n	8009b2c <_printf_i+0x1f8>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1ac      	bne.n	8009a9e <_printf_i+0x16a>
 8009b44:	7803      	ldrb	r3, [r0, #0]
 8009b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b4e:	e76c      	b.n	8009a2a <_printf_i+0xf6>
 8009b50:	0800ba32 	.word	0x0800ba32
 8009b54:	0800ba43 	.word	0x0800ba43

08009b58 <iprintf>:
 8009b58:	b40f      	push	{r0, r1, r2, r3}
 8009b5a:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <iprintf+0x2c>)
 8009b5c:	b513      	push	{r0, r1, r4, lr}
 8009b5e:	681c      	ldr	r4, [r3, #0]
 8009b60:	b124      	cbz	r4, 8009b6c <iprintf+0x14>
 8009b62:	69a3      	ldr	r3, [r4, #24]
 8009b64:	b913      	cbnz	r3, 8009b6c <iprintf+0x14>
 8009b66:	4620      	mov	r0, r4
 8009b68:	f001 f926 	bl	800adb8 <__sinit>
 8009b6c:	ab05      	add	r3, sp, #20
 8009b6e:	9a04      	ldr	r2, [sp, #16]
 8009b70:	68a1      	ldr	r1, [r4, #8]
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	4620      	mov	r0, r4
 8009b76:	f001 fd31 	bl	800b5dc <_vfiprintf_r>
 8009b7a:	b002      	add	sp, #8
 8009b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b80:	b004      	add	sp, #16
 8009b82:	4770      	bx	lr
 8009b84:	2000000c 	.word	0x2000000c

08009b88 <_puts_r>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	460e      	mov	r6, r1
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	b118      	cbz	r0, 8009b98 <_puts_r+0x10>
 8009b90:	6983      	ldr	r3, [r0, #24]
 8009b92:	b90b      	cbnz	r3, 8009b98 <_puts_r+0x10>
 8009b94:	f001 f910 	bl	800adb8 <__sinit>
 8009b98:	69ab      	ldr	r3, [r5, #24]
 8009b9a:	68ac      	ldr	r4, [r5, #8]
 8009b9c:	b913      	cbnz	r3, 8009ba4 <_puts_r+0x1c>
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f001 f90a 	bl	800adb8 <__sinit>
 8009ba4:	4b23      	ldr	r3, [pc, #140]	; (8009c34 <_puts_r+0xac>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	d117      	bne.n	8009bda <_puts_r+0x52>
 8009baa:	686c      	ldr	r4, [r5, #4]
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	071b      	lsls	r3, r3, #28
 8009bb0:	d51d      	bpl.n	8009bee <_puts_r+0x66>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	b1db      	cbz	r3, 8009bee <_puts_r+0x66>
 8009bb6:	3e01      	subs	r6, #1
 8009bb8:	68a3      	ldr	r3, [r4, #8]
 8009bba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	60a3      	str	r3, [r4, #8]
 8009bc2:	b9e9      	cbnz	r1, 8009c00 <_puts_r+0x78>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	da2e      	bge.n	8009c26 <_puts_r+0x9e>
 8009bc8:	4622      	mov	r2, r4
 8009bca:	210a      	movs	r1, #10
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 f8fd 	bl	8009dcc <__swbuf_r>
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	d011      	beq.n	8009bfa <_puts_r+0x72>
 8009bd6:	200a      	movs	r0, #10
 8009bd8:	e011      	b.n	8009bfe <_puts_r+0x76>
 8009bda:	4b17      	ldr	r3, [pc, #92]	; (8009c38 <_puts_r+0xb0>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	d101      	bne.n	8009be4 <_puts_r+0x5c>
 8009be0:	68ac      	ldr	r4, [r5, #8]
 8009be2:	e7e3      	b.n	8009bac <_puts_r+0x24>
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <_puts_r+0xb4>)
 8009be6:	429c      	cmp	r4, r3
 8009be8:	bf08      	it	eq
 8009bea:	68ec      	ldreq	r4, [r5, #12]
 8009bec:	e7de      	b.n	8009bac <_puts_r+0x24>
 8009bee:	4621      	mov	r1, r4
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	f000 f93d 	bl	8009e70 <__swsetup_r>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d0dd      	beq.n	8009bb6 <_puts_r+0x2e>
 8009bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da04      	bge.n	8009c0e <_puts_r+0x86>
 8009c04:	69a2      	ldr	r2, [r4, #24]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	dc06      	bgt.n	8009c18 <_puts_r+0x90>
 8009c0a:	290a      	cmp	r1, #10
 8009c0c:	d004      	beq.n	8009c18 <_puts_r+0x90>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	6022      	str	r2, [r4, #0]
 8009c14:	7019      	strb	r1, [r3, #0]
 8009c16:	e7cf      	b.n	8009bb8 <_puts_r+0x30>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 f8d6 	bl	8009dcc <__swbuf_r>
 8009c20:	3001      	adds	r0, #1
 8009c22:	d1c9      	bne.n	8009bb8 <_puts_r+0x30>
 8009c24:	e7e9      	b.n	8009bfa <_puts_r+0x72>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	200a      	movs	r0, #10
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	6022      	str	r2, [r4, #0]
 8009c2e:	7018      	strb	r0, [r3, #0]
 8009c30:	e7e5      	b.n	8009bfe <_puts_r+0x76>
 8009c32:	bf00      	nop
 8009c34:	0800ba84 	.word	0x0800ba84
 8009c38:	0800baa4 	.word	0x0800baa4
 8009c3c:	0800ba64 	.word	0x0800ba64

08009c40 <puts>:
 8009c40:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <puts+0xc>)
 8009c42:	4601      	mov	r1, r0
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	f7ff bf9f 	b.w	8009b88 <_puts_r>
 8009c4a:	bf00      	nop
 8009c4c:	2000000c 	.word	0x2000000c

08009c50 <_sbrk_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4c06      	ldr	r4, [pc, #24]	; (8009c6c <_sbrk_r+0x1c>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4605      	mov	r5, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	f7f8 fbc4 	bl	80023e8 <_sbrk>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_sbrk_r+0x1a>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_sbrk_r+0x1a>
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	200008dc 	.word	0x200008dc

08009c70 <setvbuf>:
 8009c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	461d      	mov	r5, r3
 8009c76:	4b51      	ldr	r3, [pc, #324]	; (8009dbc <setvbuf+0x14c>)
 8009c78:	681e      	ldr	r6, [r3, #0]
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	4690      	mov	r8, r2
 8009c80:	b126      	cbz	r6, 8009c8c <setvbuf+0x1c>
 8009c82:	69b3      	ldr	r3, [r6, #24]
 8009c84:	b913      	cbnz	r3, 8009c8c <setvbuf+0x1c>
 8009c86:	4630      	mov	r0, r6
 8009c88:	f001 f896 	bl	800adb8 <__sinit>
 8009c8c:	4b4c      	ldr	r3, [pc, #304]	; (8009dc0 <setvbuf+0x150>)
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d152      	bne.n	8009d38 <setvbuf+0xc8>
 8009c92:	6874      	ldr	r4, [r6, #4]
 8009c94:	f1b8 0f02 	cmp.w	r8, #2
 8009c98:	d006      	beq.n	8009ca8 <setvbuf+0x38>
 8009c9a:	f1b8 0f01 	cmp.w	r8, #1
 8009c9e:	f200 8089 	bhi.w	8009db4 <setvbuf+0x144>
 8009ca2:	2d00      	cmp	r5, #0
 8009ca4:	f2c0 8086 	blt.w	8009db4 <setvbuf+0x144>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4630      	mov	r0, r6
 8009cac:	f001 f81a 	bl	800ace4 <_fflush_r>
 8009cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cb2:	b141      	cbz	r1, 8009cc6 <setvbuf+0x56>
 8009cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb8:	4299      	cmp	r1, r3
 8009cba:	d002      	beq.n	8009cc2 <setvbuf+0x52>
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7ff fa47 	bl	8009150 <_free_r>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61a3      	str	r3, [r4, #24]
 8009cca:	6063      	str	r3, [r4, #4]
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	061b      	lsls	r3, r3, #24
 8009cd0:	d503      	bpl.n	8009cda <setvbuf+0x6a>
 8009cd2:	6921      	ldr	r1, [r4, #16]
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7ff fa3b 	bl	8009150 <_free_r>
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	f1b8 0f02 	cmp.w	r8, #2
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	d05d      	beq.n	8009da8 <setvbuf+0x138>
 8009cec:	ab01      	add	r3, sp, #4
 8009cee:	466a      	mov	r2, sp
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f001 f8f8 	bl	800aee8 <__swhatbuf_r>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	4318      	orrs	r0, r3
 8009cfc:	81a0      	strh	r0, [r4, #12]
 8009cfe:	bb2d      	cbnz	r5, 8009d4c <setvbuf+0xdc>
 8009d00:	9d00      	ldr	r5, [sp, #0]
 8009d02:	4628      	mov	r0, r5
 8009d04:	f7ff fa00 	bl	8009108 <malloc>
 8009d08:	4607      	mov	r7, r0
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d14e      	bne.n	8009dac <setvbuf+0x13c>
 8009d0e:	f8dd 9000 	ldr.w	r9, [sp]
 8009d12:	45a9      	cmp	r9, r5
 8009d14:	d13c      	bne.n	8009d90 <setvbuf+0x120>
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0302 	orr.w	r3, r3, #2
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	2300      	movs	r3, #0
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	6123      	str	r3, [r4, #16]
 8009d2e:	2301      	movs	r3, #1
 8009d30:	6163      	str	r3, [r4, #20]
 8009d32:	b003      	add	sp, #12
 8009d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d38:	4b22      	ldr	r3, [pc, #136]	; (8009dc4 <setvbuf+0x154>)
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	d101      	bne.n	8009d42 <setvbuf+0xd2>
 8009d3e:	68b4      	ldr	r4, [r6, #8]
 8009d40:	e7a8      	b.n	8009c94 <setvbuf+0x24>
 8009d42:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <setvbuf+0x158>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	bf08      	it	eq
 8009d48:	68f4      	ldreq	r4, [r6, #12]
 8009d4a:	e7a3      	b.n	8009c94 <setvbuf+0x24>
 8009d4c:	2f00      	cmp	r7, #0
 8009d4e:	d0d8      	beq.n	8009d02 <setvbuf+0x92>
 8009d50:	69b3      	ldr	r3, [r6, #24]
 8009d52:	b913      	cbnz	r3, 8009d5a <setvbuf+0xea>
 8009d54:	4630      	mov	r0, r6
 8009d56:	f001 f82f 	bl	800adb8 <__sinit>
 8009d5a:	f1b8 0f01 	cmp.w	r8, #1
 8009d5e:	bf08      	it	eq
 8009d60:	89a3      	ldrheq	r3, [r4, #12]
 8009d62:	6027      	str	r7, [r4, #0]
 8009d64:	bf04      	itt	eq
 8009d66:	f043 0301 	orreq.w	r3, r3, #1
 8009d6a:	81a3      	strheq	r3, [r4, #12]
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f013 0008 	ands.w	r0, r3, #8
 8009d72:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8009d76:	d01b      	beq.n	8009db0 <setvbuf+0x140>
 8009d78:	f013 0001 	ands.w	r0, r3, #1
 8009d7c:	bf18      	it	ne
 8009d7e:	426d      	negne	r5, r5
 8009d80:	f04f 0300 	mov.w	r3, #0
 8009d84:	bf1d      	ittte	ne
 8009d86:	60a3      	strne	r3, [r4, #8]
 8009d88:	61a5      	strne	r5, [r4, #24]
 8009d8a:	4618      	movne	r0, r3
 8009d8c:	60a5      	streq	r5, [r4, #8]
 8009d8e:	e7d0      	b.n	8009d32 <setvbuf+0xc2>
 8009d90:	4648      	mov	r0, r9
 8009d92:	f7ff f9b9 	bl	8009108 <malloc>
 8009d96:	4607      	mov	r7, r0
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d0bc      	beq.n	8009d16 <setvbuf+0xa6>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	464d      	mov	r5, r9
 8009da6:	e7d3      	b.n	8009d50 <setvbuf+0xe0>
 8009da8:	2000      	movs	r0, #0
 8009daa:	e7b6      	b.n	8009d1a <setvbuf+0xaa>
 8009dac:	46a9      	mov	r9, r5
 8009dae:	e7f5      	b.n	8009d9c <setvbuf+0x12c>
 8009db0:	60a0      	str	r0, [r4, #8]
 8009db2:	e7be      	b.n	8009d32 <setvbuf+0xc2>
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	e7bb      	b.n	8009d32 <setvbuf+0xc2>
 8009dba:	bf00      	nop
 8009dbc:	2000000c 	.word	0x2000000c
 8009dc0:	0800ba84 	.word	0x0800ba84
 8009dc4:	0800baa4 	.word	0x0800baa4
 8009dc8:	0800ba64 	.word	0x0800ba64

08009dcc <__swbuf_r>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	460e      	mov	r6, r1
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	b118      	cbz	r0, 8009dde <__swbuf_r+0x12>
 8009dd6:	6983      	ldr	r3, [r0, #24]
 8009dd8:	b90b      	cbnz	r3, 8009dde <__swbuf_r+0x12>
 8009dda:	f000 ffed 	bl	800adb8 <__sinit>
 8009dde:	4b21      	ldr	r3, [pc, #132]	; (8009e64 <__swbuf_r+0x98>)
 8009de0:	429c      	cmp	r4, r3
 8009de2:	d12a      	bne.n	8009e3a <__swbuf_r+0x6e>
 8009de4:	686c      	ldr	r4, [r5, #4]
 8009de6:	69a3      	ldr	r3, [r4, #24]
 8009de8:	60a3      	str	r3, [r4, #8]
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	071a      	lsls	r2, r3, #28
 8009dee:	d52e      	bpl.n	8009e4e <__swbuf_r+0x82>
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	b363      	cbz	r3, 8009e4e <__swbuf_r+0x82>
 8009df4:	6923      	ldr	r3, [r4, #16]
 8009df6:	6820      	ldr	r0, [r4, #0]
 8009df8:	1ac0      	subs	r0, r0, r3
 8009dfa:	6963      	ldr	r3, [r4, #20]
 8009dfc:	b2f6      	uxtb	r6, r6
 8009dfe:	4283      	cmp	r3, r0
 8009e00:	4637      	mov	r7, r6
 8009e02:	dc04      	bgt.n	8009e0e <__swbuf_r+0x42>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 ff6c 	bl	800ace4 <_fflush_r>
 8009e0c:	bb28      	cbnz	r0, 8009e5a <__swbuf_r+0x8e>
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	60a3      	str	r3, [r4, #8]
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	6022      	str	r2, [r4, #0]
 8009e1a:	701e      	strb	r6, [r3, #0]
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	3001      	adds	r0, #1
 8009e20:	4283      	cmp	r3, r0
 8009e22:	d004      	beq.n	8009e2e <__swbuf_r+0x62>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	07db      	lsls	r3, r3, #31
 8009e28:	d519      	bpl.n	8009e5e <__swbuf_r+0x92>
 8009e2a:	2e0a      	cmp	r6, #10
 8009e2c:	d117      	bne.n	8009e5e <__swbuf_r+0x92>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4628      	mov	r0, r5
 8009e32:	f000 ff57 	bl	800ace4 <_fflush_r>
 8009e36:	b190      	cbz	r0, 8009e5e <__swbuf_r+0x92>
 8009e38:	e00f      	b.n	8009e5a <__swbuf_r+0x8e>
 8009e3a:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <__swbuf_r+0x9c>)
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	d101      	bne.n	8009e44 <__swbuf_r+0x78>
 8009e40:	68ac      	ldr	r4, [r5, #8]
 8009e42:	e7d0      	b.n	8009de6 <__swbuf_r+0x1a>
 8009e44:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <__swbuf_r+0xa0>)
 8009e46:	429c      	cmp	r4, r3
 8009e48:	bf08      	it	eq
 8009e4a:	68ec      	ldreq	r4, [r5, #12]
 8009e4c:	e7cb      	b.n	8009de6 <__swbuf_r+0x1a>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4628      	mov	r0, r5
 8009e52:	f000 f80d 	bl	8009e70 <__swsetup_r>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0cc      	beq.n	8009df4 <__swbuf_r+0x28>
 8009e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e5e:	4638      	mov	r0, r7
 8009e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e62:	bf00      	nop
 8009e64:	0800ba84 	.word	0x0800ba84
 8009e68:	0800baa4 	.word	0x0800baa4
 8009e6c:	0800ba64 	.word	0x0800ba64

08009e70 <__swsetup_r>:
 8009e70:	4b32      	ldr	r3, [pc, #200]	; (8009f3c <__swsetup_r+0xcc>)
 8009e72:	b570      	push	{r4, r5, r6, lr}
 8009e74:	681d      	ldr	r5, [r3, #0]
 8009e76:	4606      	mov	r6, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	b125      	cbz	r5, 8009e86 <__swsetup_r+0x16>
 8009e7c:	69ab      	ldr	r3, [r5, #24]
 8009e7e:	b913      	cbnz	r3, 8009e86 <__swsetup_r+0x16>
 8009e80:	4628      	mov	r0, r5
 8009e82:	f000 ff99 	bl	800adb8 <__sinit>
 8009e86:	4b2e      	ldr	r3, [pc, #184]	; (8009f40 <__swsetup_r+0xd0>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d10f      	bne.n	8009eac <__swsetup_r+0x3c>
 8009e8c:	686c      	ldr	r4, [r5, #4]
 8009e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	0715      	lsls	r5, r2, #28
 8009e96:	d42c      	bmi.n	8009ef2 <__swsetup_r+0x82>
 8009e98:	06d0      	lsls	r0, r2, #27
 8009e9a:	d411      	bmi.n	8009ec0 <__swsetup_r+0x50>
 8009e9c:	2209      	movs	r2, #9
 8009e9e:	6032      	str	r2, [r6, #0]
 8009ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea4:	81a3      	strh	r3, [r4, #12]
 8009ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eaa:	e03e      	b.n	8009f2a <__swsetup_r+0xba>
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <__swsetup_r+0xd4>)
 8009eae:	429c      	cmp	r4, r3
 8009eb0:	d101      	bne.n	8009eb6 <__swsetup_r+0x46>
 8009eb2:	68ac      	ldr	r4, [r5, #8]
 8009eb4:	e7eb      	b.n	8009e8e <__swsetup_r+0x1e>
 8009eb6:	4b24      	ldr	r3, [pc, #144]	; (8009f48 <__swsetup_r+0xd8>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	bf08      	it	eq
 8009ebc:	68ec      	ldreq	r4, [r5, #12]
 8009ebe:	e7e6      	b.n	8009e8e <__swsetup_r+0x1e>
 8009ec0:	0751      	lsls	r1, r2, #29
 8009ec2:	d512      	bpl.n	8009eea <__swsetup_r+0x7a>
 8009ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec6:	b141      	cbz	r1, 8009eda <__swsetup_r+0x6a>
 8009ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	d002      	beq.n	8009ed6 <__swsetup_r+0x66>
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff f93d 	bl	8009150 <_free_r>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6063      	str	r3, [r4, #4]
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	f043 0308 	orr.w	r3, r3, #8
 8009ef0:	81a3      	strh	r3, [r4, #12]
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	b94b      	cbnz	r3, 8009f0a <__swsetup_r+0x9a>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f00:	d003      	beq.n	8009f0a <__swsetup_r+0x9a>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4630      	mov	r0, r6
 8009f06:	f001 f813 	bl	800af30 <__smakebuf_r>
 8009f0a:	89a2      	ldrh	r2, [r4, #12]
 8009f0c:	f012 0301 	ands.w	r3, r2, #1
 8009f10:	d00c      	beq.n	8009f2c <__swsetup_r+0xbc>
 8009f12:	2300      	movs	r3, #0
 8009f14:	60a3      	str	r3, [r4, #8]
 8009f16:	6963      	ldr	r3, [r4, #20]
 8009f18:	425b      	negs	r3, r3
 8009f1a:	61a3      	str	r3, [r4, #24]
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	b953      	cbnz	r3, 8009f36 <__swsetup_r+0xc6>
 8009f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009f28:	d1ba      	bne.n	8009ea0 <__swsetup_r+0x30>
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	0792      	lsls	r2, r2, #30
 8009f2e:	bf58      	it	pl
 8009f30:	6963      	ldrpl	r3, [r4, #20]
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	e7f2      	b.n	8009f1c <__swsetup_r+0xac>
 8009f36:	2000      	movs	r0, #0
 8009f38:	e7f7      	b.n	8009f2a <__swsetup_r+0xba>
 8009f3a:	bf00      	nop
 8009f3c:	2000000c 	.word	0x2000000c
 8009f40:	0800ba84 	.word	0x0800ba84
 8009f44:	0800baa4 	.word	0x0800baa4
 8009f48:	0800ba64 	.word	0x0800ba64

08009f4c <quorem>:
 8009f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f50:	6903      	ldr	r3, [r0, #16]
 8009f52:	690c      	ldr	r4, [r1, #16]
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	4680      	mov	r8, r0
 8009f58:	f2c0 8082 	blt.w	800a060 <quorem+0x114>
 8009f5c:	3c01      	subs	r4, #1
 8009f5e:	f101 0714 	add.w	r7, r1, #20
 8009f62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009f66:	f100 0614 	add.w	r6, r0, #20
 8009f6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009f6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009f72:	eb06 030c 	add.w	r3, r6, ip
 8009f76:	3501      	adds	r5, #1
 8009f78:	eb07 090c 	add.w	r9, r7, ip
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f82:	b395      	cbz	r5, 8009fea <quorem+0x9e>
 8009f84:	f04f 0a00 	mov.w	sl, #0
 8009f88:	4638      	mov	r0, r7
 8009f8a:	46b6      	mov	lr, r6
 8009f8c:	46d3      	mov	fp, sl
 8009f8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f92:	b293      	uxth	r3, r2
 8009f94:	fb05 a303 	mla	r3, r5, r3, sl
 8009f98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	ebab 0303 	sub.w	r3, fp, r3
 8009fa2:	0c12      	lsrs	r2, r2, #16
 8009fa4:	f8de b000 	ldr.w	fp, [lr]
 8009fa8:	fb05 a202 	mla	r2, r5, r2, sl
 8009fac:	fa13 f38b 	uxtah	r3, r3, fp
 8009fb0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009fb4:	fa1f fb82 	uxth.w	fp, r2
 8009fb8:	f8de 2000 	ldr.w	r2, [lr]
 8009fbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fca:	4581      	cmp	r9, r0
 8009fcc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009fd0:	f84e 3b04 	str.w	r3, [lr], #4
 8009fd4:	d2db      	bcs.n	8009f8e <quorem+0x42>
 8009fd6:	f856 300c 	ldr.w	r3, [r6, ip]
 8009fda:	b933      	cbnz	r3, 8009fea <quorem+0x9e>
 8009fdc:	9b01      	ldr	r3, [sp, #4]
 8009fde:	3b04      	subs	r3, #4
 8009fe0:	429e      	cmp	r6, r3
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	d330      	bcc.n	800a048 <quorem+0xfc>
 8009fe6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009fea:	4640      	mov	r0, r8
 8009fec:	f001 f9f8 	bl	800b3e0 <__mcmp>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	db25      	blt.n	800a040 <quorem+0xf4>
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f04f 0c00 	mov.w	ip, #0
 8009ffc:	f857 2b04 	ldr.w	r2, [r7], #4
 800a000:	f8d0 e000 	ldr.w	lr, [r0]
 800a004:	b293      	uxth	r3, r2
 800a006:	ebac 0303 	sub.w	r3, ip, r3
 800a00a:	0c12      	lsrs	r2, r2, #16
 800a00c:	fa13 f38e 	uxtah	r3, r3, lr
 800a010:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a018:	b29b      	uxth	r3, r3
 800a01a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a01e:	45b9      	cmp	r9, r7
 800a020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a024:	f840 3b04 	str.w	r3, [r0], #4
 800a028:	d2e8      	bcs.n	8009ffc <quorem+0xb0>
 800a02a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a02e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a032:	b92a      	cbnz	r2, 800a040 <quorem+0xf4>
 800a034:	3b04      	subs	r3, #4
 800a036:	429e      	cmp	r6, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	d30b      	bcc.n	800a054 <quorem+0x108>
 800a03c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a040:	4628      	mov	r0, r5
 800a042:	b003      	add	sp, #12
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	6812      	ldr	r2, [r2, #0]
 800a04a:	3b04      	subs	r3, #4
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	d1ca      	bne.n	8009fe6 <quorem+0x9a>
 800a050:	3c01      	subs	r4, #1
 800a052:	e7c5      	b.n	8009fe0 <quorem+0x94>
 800a054:	6812      	ldr	r2, [r2, #0]
 800a056:	3b04      	subs	r3, #4
 800a058:	2a00      	cmp	r2, #0
 800a05a:	d1ef      	bne.n	800a03c <quorem+0xf0>
 800a05c:	3c01      	subs	r4, #1
 800a05e:	e7ea      	b.n	800a036 <quorem+0xea>
 800a060:	2000      	movs	r0, #0
 800a062:	e7ee      	b.n	800a042 <quorem+0xf6>
 800a064:	0000      	movs	r0, r0
	...

0800a068 <_dtoa_r>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	ec57 6b10 	vmov	r6, r7, d0
 800a070:	b097      	sub	sp, #92	; 0x5c
 800a072:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a074:	9106      	str	r1, [sp, #24]
 800a076:	4604      	mov	r4, r0
 800a078:	920b      	str	r2, [sp, #44]	; 0x2c
 800a07a:	9312      	str	r3, [sp, #72]	; 0x48
 800a07c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a080:	e9cd 6700 	strd	r6, r7, [sp]
 800a084:	b93d      	cbnz	r5, 800a096 <_dtoa_r+0x2e>
 800a086:	2010      	movs	r0, #16
 800a088:	f7ff f83e 	bl	8009108 <malloc>
 800a08c:	6260      	str	r0, [r4, #36]	; 0x24
 800a08e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a092:	6005      	str	r5, [r0, #0]
 800a094:	60c5      	str	r5, [r0, #12]
 800a096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	b151      	cbz	r1, 800a0b2 <_dtoa_r+0x4a>
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	604a      	str	r2, [r1, #4]
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4093      	lsls	r3, r2
 800a0a4:	608b      	str	r3, [r1, #8]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 ffb8 	bl	800b01c <_Bfree>
 800a0ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	1e3b      	subs	r3, r7, #0
 800a0b4:	bfbb      	ittet	lt
 800a0b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0ba:	9301      	strlt	r3, [sp, #4]
 800a0bc:	2300      	movge	r3, #0
 800a0be:	2201      	movlt	r2, #1
 800a0c0:	bfac      	ite	ge
 800a0c2:	f8c8 3000 	strge.w	r3, [r8]
 800a0c6:	f8c8 2000 	strlt.w	r2, [r8]
 800a0ca:	4baf      	ldr	r3, [pc, #700]	; (800a388 <_dtoa_r+0x320>)
 800a0cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0d0:	ea33 0308 	bics.w	r3, r3, r8
 800a0d4:	d114      	bne.n	800a100 <_dtoa_r+0x98>
 800a0d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	9b00      	ldr	r3, [sp, #0]
 800a0e0:	b923      	cbnz	r3, 800a0ec <_dtoa_r+0x84>
 800a0e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f000 8542 	beq.w	800ab70 <_dtoa_r+0xb08>
 800a0ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a39c <_dtoa_r+0x334>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 8544 	beq.w	800ab80 <_dtoa_r+0xb18>
 800a0f8:	f10b 0303 	add.w	r3, fp, #3
 800a0fc:	f000 bd3e 	b.w	800ab7c <_dtoa_r+0xb14>
 800a100:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 800a110:	4681      	mov	r9, r0
 800a112:	b168      	cbz	r0, 800a130 <_dtoa_r+0xc8>
 800a114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a116:	2301      	movs	r3, #1
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8524 	beq.w	800ab6a <_dtoa_r+0xb02>
 800a122:	4b9a      	ldr	r3, [pc, #616]	; (800a38c <_dtoa_r+0x324>)
 800a124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a126:	f103 3bff 	add.w	fp, r3, #4294967295
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	f000 bd28 	b.w	800ab80 <_dtoa_r+0xb18>
 800a130:	aa14      	add	r2, sp, #80	; 0x50
 800a132:	a915      	add	r1, sp, #84	; 0x54
 800a134:	ec47 6b10 	vmov	d0, r6, r7
 800a138:	4620      	mov	r0, r4
 800a13a:	f001 f9c8 	bl	800b4ce <__d2b>
 800a13e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a142:	9004      	str	r0, [sp, #16]
 800a144:	2d00      	cmp	r5, #0
 800a146:	d07c      	beq.n	800a242 <_dtoa_r+0x1da>
 800a148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a14c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a150:	46b2      	mov	sl, r6
 800a152:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a15a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a15e:	2200      	movs	r2, #0
 800a160:	4b8b      	ldr	r3, [pc, #556]	; (800a390 <_dtoa_r+0x328>)
 800a162:	4650      	mov	r0, sl
 800a164:	4659      	mov	r1, fp
 800a166:	f7f6 f89f 	bl	80002a8 <__aeabi_dsub>
 800a16a:	a381      	add	r3, pc, #516	; (adr r3, 800a370 <_dtoa_r+0x308>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f7f6 fa52 	bl	8000618 <__aeabi_dmul>
 800a174:	a380      	add	r3, pc, #512	; (adr r3, 800a378 <_dtoa_r+0x310>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f7f6 f897 	bl	80002ac <__adddf3>
 800a17e:	4606      	mov	r6, r0
 800a180:	4628      	mov	r0, r5
 800a182:	460f      	mov	r7, r1
 800a184:	f7f6 f9de 	bl	8000544 <__aeabi_i2d>
 800a188:	a37d      	add	r3, pc, #500	; (adr r3, 800a380 <_dtoa_r+0x318>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 fa43 	bl	8000618 <__aeabi_dmul>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 f887 	bl	80002ac <__adddf3>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	f7f6 fce9 	bl	8000b78 <__aeabi_d2iz>
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	f7f6 fca4 	bl	8000afc <__aeabi_dcmplt>
 800a1b4:	b148      	cbz	r0, 800a1ca <_dtoa_r+0x162>
 800a1b6:	4650      	mov	r0, sl
 800a1b8:	f7f6 f9c4 	bl	8000544 <__aeabi_i2d>
 800a1bc:	4632      	mov	r2, r6
 800a1be:	463b      	mov	r3, r7
 800a1c0:	f7f6 fc92 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1c4:	b908      	cbnz	r0, 800a1ca <_dtoa_r+0x162>
 800a1c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ca:	f1ba 0f16 	cmp.w	sl, #22
 800a1ce:	d859      	bhi.n	800a284 <_dtoa_r+0x21c>
 800a1d0:	4970      	ldr	r1, [pc, #448]	; (800a394 <_dtoa_r+0x32c>)
 800a1d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a1d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1de:	f7f6 fcab 	bl	8000b38 <__aeabi_dcmpgt>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d050      	beq.n	800a288 <_dtoa_r+0x220>
 800a1e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1f0:	1b5d      	subs	r5, r3, r5
 800a1f2:	f1b5 0801 	subs.w	r8, r5, #1
 800a1f6:	bf49      	itett	mi
 800a1f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a1fc:	2300      	movpl	r3, #0
 800a1fe:	9305      	strmi	r3, [sp, #20]
 800a200:	f04f 0800 	movmi.w	r8, #0
 800a204:	bf58      	it	pl
 800a206:	9305      	strpl	r3, [sp, #20]
 800a208:	f1ba 0f00 	cmp.w	sl, #0
 800a20c:	db3e      	blt.n	800a28c <_dtoa_r+0x224>
 800a20e:	2300      	movs	r3, #0
 800a210:	44d0      	add	r8, sl
 800a212:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a216:	9307      	str	r3, [sp, #28]
 800a218:	9b06      	ldr	r3, [sp, #24]
 800a21a:	2b09      	cmp	r3, #9
 800a21c:	f200 8090 	bhi.w	800a340 <_dtoa_r+0x2d8>
 800a220:	2b05      	cmp	r3, #5
 800a222:	bfc4      	itt	gt
 800a224:	3b04      	subgt	r3, #4
 800a226:	9306      	strgt	r3, [sp, #24]
 800a228:	9b06      	ldr	r3, [sp, #24]
 800a22a:	f1a3 0302 	sub.w	r3, r3, #2
 800a22e:	bfcc      	ite	gt
 800a230:	2500      	movgt	r5, #0
 800a232:	2501      	movle	r5, #1
 800a234:	2b03      	cmp	r3, #3
 800a236:	f200 808f 	bhi.w	800a358 <_dtoa_r+0x2f0>
 800a23a:	e8df f003 	tbb	[pc, r3]
 800a23e:	7f7d      	.short	0x7f7d
 800a240:	7131      	.short	0x7131
 800a242:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a246:	441d      	add	r5, r3
 800a248:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a24c:	2820      	cmp	r0, #32
 800a24e:	dd13      	ble.n	800a278 <_dtoa_r+0x210>
 800a250:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	fa08 f800 	lsl.w	r8, r8, r0
 800a25a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a25e:	fa23 f000 	lsr.w	r0, r3, r0
 800a262:	ea48 0000 	orr.w	r0, r8, r0
 800a266:	f7f6 f95d 	bl	8000524 <__aeabi_ui2d>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4682      	mov	sl, r0
 800a26e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a272:	3d01      	subs	r5, #1
 800a274:	9313      	str	r3, [sp, #76]	; 0x4c
 800a276:	e772      	b.n	800a15e <_dtoa_r+0xf6>
 800a278:	9b00      	ldr	r3, [sp, #0]
 800a27a:	f1c0 0020 	rsb	r0, r0, #32
 800a27e:	fa03 f000 	lsl.w	r0, r3, r0
 800a282:	e7f0      	b.n	800a266 <_dtoa_r+0x1fe>
 800a284:	2301      	movs	r3, #1
 800a286:	e7b1      	b.n	800a1ec <_dtoa_r+0x184>
 800a288:	900f      	str	r0, [sp, #60]	; 0x3c
 800a28a:	e7b0      	b.n	800a1ee <_dtoa_r+0x186>
 800a28c:	9b05      	ldr	r3, [sp, #20]
 800a28e:	eba3 030a 	sub.w	r3, r3, sl
 800a292:	9305      	str	r3, [sp, #20]
 800a294:	f1ca 0300 	rsb	r3, sl, #0
 800a298:	9307      	str	r3, [sp, #28]
 800a29a:	2300      	movs	r3, #0
 800a29c:	930e      	str	r3, [sp, #56]	; 0x38
 800a29e:	e7bb      	b.n	800a218 <_dtoa_r+0x1b0>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	dd59      	ble.n	800a35e <_dtoa_r+0x2f6>
 800a2aa:	9302      	str	r3, [sp, #8]
 800a2ac:	4699      	mov	r9, r3
 800a2ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	6072      	str	r2, [r6, #4]
 800a2b4:	2204      	movs	r2, #4
 800a2b6:	f102 0014 	add.w	r0, r2, #20
 800a2ba:	4298      	cmp	r0, r3
 800a2bc:	6871      	ldr	r1, [r6, #4]
 800a2be:	d953      	bls.n	800a368 <_dtoa_r+0x300>
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 fe77 	bl	800afb4 <_Balloc>
 800a2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c8:	6030      	str	r0, [r6, #0]
 800a2ca:	f1b9 0f0e 	cmp.w	r9, #14
 800a2ce:	f8d3 b000 	ldr.w	fp, [r3]
 800a2d2:	f200 80e6 	bhi.w	800a4a2 <_dtoa_r+0x43a>
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	f000 80e3 	beq.w	800a4a2 <_dtoa_r+0x43a>
 800a2dc:	ed9d 7b00 	vldr	d7, [sp]
 800a2e0:	f1ba 0f00 	cmp.w	sl, #0
 800a2e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a2e8:	dd74      	ble.n	800a3d4 <_dtoa_r+0x36c>
 800a2ea:	4a2a      	ldr	r2, [pc, #168]	; (800a394 <_dtoa_r+0x32c>)
 800a2ec:	f00a 030f 	and.w	r3, sl, #15
 800a2f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2f4:	ed93 7b00 	vldr	d7, [r3]
 800a2f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a2fc:	06f0      	lsls	r0, r6, #27
 800a2fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a302:	d565      	bpl.n	800a3d0 <_dtoa_r+0x368>
 800a304:	4b24      	ldr	r3, [pc, #144]	; (800a398 <_dtoa_r+0x330>)
 800a306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a30a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a30e:	f7f6 faad 	bl	800086c <__aeabi_ddiv>
 800a312:	e9cd 0100 	strd	r0, r1, [sp]
 800a316:	f006 060f 	and.w	r6, r6, #15
 800a31a:	2503      	movs	r5, #3
 800a31c:	4f1e      	ldr	r7, [pc, #120]	; (800a398 <_dtoa_r+0x330>)
 800a31e:	e04c      	b.n	800a3ba <_dtoa_r+0x352>
 800a320:	2301      	movs	r3, #1
 800a322:	930a      	str	r3, [sp, #40]	; 0x28
 800a324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a326:	4453      	add	r3, sl
 800a328:	f103 0901 	add.w	r9, r3, #1
 800a32c:	9302      	str	r3, [sp, #8]
 800a32e:	464b      	mov	r3, r9
 800a330:	2b01      	cmp	r3, #1
 800a332:	bfb8      	it	lt
 800a334:	2301      	movlt	r3, #1
 800a336:	e7ba      	b.n	800a2ae <_dtoa_r+0x246>
 800a338:	2300      	movs	r3, #0
 800a33a:	e7b2      	b.n	800a2a2 <_dtoa_r+0x23a>
 800a33c:	2300      	movs	r3, #0
 800a33e:	e7f0      	b.n	800a322 <_dtoa_r+0x2ba>
 800a340:	2501      	movs	r5, #1
 800a342:	2300      	movs	r3, #0
 800a344:	9306      	str	r3, [sp, #24]
 800a346:	950a      	str	r5, [sp, #40]	; 0x28
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	4699      	mov	r9, r3
 800a350:	2200      	movs	r2, #0
 800a352:	2312      	movs	r3, #18
 800a354:	920b      	str	r2, [sp, #44]	; 0x2c
 800a356:	e7aa      	b.n	800a2ae <_dtoa_r+0x246>
 800a358:	2301      	movs	r3, #1
 800a35a:	930a      	str	r3, [sp, #40]	; 0x28
 800a35c:	e7f4      	b.n	800a348 <_dtoa_r+0x2e0>
 800a35e:	2301      	movs	r3, #1
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	4699      	mov	r9, r3
 800a364:	461a      	mov	r2, r3
 800a366:	e7f5      	b.n	800a354 <_dtoa_r+0x2ec>
 800a368:	3101      	adds	r1, #1
 800a36a:	6071      	str	r1, [r6, #4]
 800a36c:	0052      	lsls	r2, r2, #1
 800a36e:	e7a2      	b.n	800a2b6 <_dtoa_r+0x24e>
 800a370:	636f4361 	.word	0x636f4361
 800a374:	3fd287a7 	.word	0x3fd287a7
 800a378:	8b60c8b3 	.word	0x8b60c8b3
 800a37c:	3fc68a28 	.word	0x3fc68a28
 800a380:	509f79fb 	.word	0x509f79fb
 800a384:	3fd34413 	.word	0x3fd34413
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	0800ba31 	.word	0x0800ba31
 800a390:	3ff80000 	.word	0x3ff80000
 800a394:	0800baf0 	.word	0x0800baf0
 800a398:	0800bac8 	.word	0x0800bac8
 800a39c:	0800ba5d 	.word	0x0800ba5d
 800a3a0:	07f1      	lsls	r1, r6, #31
 800a3a2:	d508      	bpl.n	800a3b6 <_dtoa_r+0x34e>
 800a3a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ac:	f7f6 f934 	bl	8000618 <__aeabi_dmul>
 800a3b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	1076      	asrs	r6, r6, #1
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	d1f0      	bne.n	800a3a0 <_dtoa_r+0x338>
 800a3be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3c6:	f7f6 fa51 	bl	800086c <__aeabi_ddiv>
 800a3ca:	e9cd 0100 	strd	r0, r1, [sp]
 800a3ce:	e01a      	b.n	800a406 <_dtoa_r+0x39e>
 800a3d0:	2502      	movs	r5, #2
 800a3d2:	e7a3      	b.n	800a31c <_dtoa_r+0x2b4>
 800a3d4:	f000 80a0 	beq.w	800a518 <_dtoa_r+0x4b0>
 800a3d8:	f1ca 0600 	rsb	r6, sl, #0
 800a3dc:	4b9f      	ldr	r3, [pc, #636]	; (800a65c <_dtoa_r+0x5f4>)
 800a3de:	4fa0      	ldr	r7, [pc, #640]	; (800a660 <_dtoa_r+0x5f8>)
 800a3e0:	f006 020f 	and.w	r2, r6, #15
 800a3e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3f0:	f7f6 f912 	bl	8000618 <__aeabi_dmul>
 800a3f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a3f8:	1136      	asrs	r6, r6, #4
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	2502      	movs	r5, #2
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	d17f      	bne.n	800a502 <_dtoa_r+0x49a>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1e1      	bne.n	800a3ca <_dtoa_r+0x362>
 800a406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8087 	beq.w	800a51c <_dtoa_r+0x4b4>
 800a40e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a412:	2200      	movs	r2, #0
 800a414:	4b93      	ldr	r3, [pc, #588]	; (800a664 <_dtoa_r+0x5fc>)
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d07c      	beq.n	800a51c <_dtoa_r+0x4b4>
 800a422:	f1b9 0f00 	cmp.w	r9, #0
 800a426:	d079      	beq.n	800a51c <_dtoa_r+0x4b4>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd35      	ble.n	800a49a <_dtoa_r+0x432>
 800a42e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a432:	9308      	str	r3, [sp, #32]
 800a434:	4639      	mov	r1, r7
 800a436:	2200      	movs	r2, #0
 800a438:	4b8b      	ldr	r3, [pc, #556]	; (800a668 <_dtoa_r+0x600>)
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7f6 f8ec 	bl	8000618 <__aeabi_dmul>
 800a440:	e9cd 0100 	strd	r0, r1, [sp]
 800a444:	9f02      	ldr	r7, [sp, #8]
 800a446:	3501      	adds	r5, #1
 800a448:	4628      	mov	r0, r5
 800a44a:	f7f6 f87b 	bl	8000544 <__aeabi_i2d>
 800a44e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a452:	f7f6 f8e1 	bl	8000618 <__aeabi_dmul>
 800a456:	2200      	movs	r2, #0
 800a458:	4b84      	ldr	r3, [pc, #528]	; (800a66c <_dtoa_r+0x604>)
 800a45a:	f7f5 ff27 	bl	80002ac <__adddf3>
 800a45e:	4605      	mov	r5, r0
 800a460:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a464:	2f00      	cmp	r7, #0
 800a466:	d15d      	bne.n	800a524 <_dtoa_r+0x4bc>
 800a468:	2200      	movs	r2, #0
 800a46a:	4b81      	ldr	r3, [pc, #516]	; (800a670 <_dtoa_r+0x608>)
 800a46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a470:	f7f5 ff1a 	bl	80002a8 <__aeabi_dsub>
 800a474:	462a      	mov	r2, r5
 800a476:	4633      	mov	r3, r6
 800a478:	e9cd 0100 	strd	r0, r1, [sp]
 800a47c:	f7f6 fb5c 	bl	8000b38 <__aeabi_dcmpgt>
 800a480:	2800      	cmp	r0, #0
 800a482:	f040 8288 	bne.w	800a996 <_dtoa_r+0x92e>
 800a486:	462a      	mov	r2, r5
 800a488:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a48c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a490:	f7f6 fb34 	bl	8000afc <__aeabi_dcmplt>
 800a494:	2800      	cmp	r0, #0
 800a496:	f040 827c 	bne.w	800a992 <_dtoa_r+0x92a>
 800a49a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a49e:	e9cd 2300 	strd	r2, r3, [sp]
 800a4a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f2c0 8150 	blt.w	800a74a <_dtoa_r+0x6e2>
 800a4aa:	f1ba 0f0e 	cmp.w	sl, #14
 800a4ae:	f300 814c 	bgt.w	800a74a <_dtoa_r+0x6e2>
 800a4b2:	4b6a      	ldr	r3, [pc, #424]	; (800a65c <_dtoa_r+0x5f4>)
 800a4b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4b8:	ed93 7b00 	vldr	d7, [r3]
 800a4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4c4:	f280 80d8 	bge.w	800a678 <_dtoa_r+0x610>
 800a4c8:	f1b9 0f00 	cmp.w	r9, #0
 800a4cc:	f300 80d4 	bgt.w	800a678 <_dtoa_r+0x610>
 800a4d0:	f040 825e 	bne.w	800a990 <_dtoa_r+0x928>
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4b66      	ldr	r3, [pc, #408]	; (800a670 <_dtoa_r+0x608>)
 800a4d8:	ec51 0b17 	vmov	r0, r1, d7
 800a4dc:	f7f6 f89c 	bl	8000618 <__aeabi_dmul>
 800a4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4e4:	f7f6 fb1e 	bl	8000b24 <__aeabi_dcmpge>
 800a4e8:	464f      	mov	r7, r9
 800a4ea:	464e      	mov	r6, r9
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f040 8234 	bne.w	800a95a <_dtoa_r+0x8f2>
 800a4f2:	2331      	movs	r3, #49	; 0x31
 800a4f4:	f10b 0501 	add.w	r5, fp, #1
 800a4f8:	f88b 3000 	strb.w	r3, [fp]
 800a4fc:	f10a 0a01 	add.w	sl, sl, #1
 800a500:	e22f      	b.n	800a962 <_dtoa_r+0x8fa>
 800a502:	07f2      	lsls	r2, r6, #31
 800a504:	d505      	bpl.n	800a512 <_dtoa_r+0x4aa>
 800a506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50a:	f7f6 f885 	bl	8000618 <__aeabi_dmul>
 800a50e:	3501      	adds	r5, #1
 800a510:	2301      	movs	r3, #1
 800a512:	1076      	asrs	r6, r6, #1
 800a514:	3708      	adds	r7, #8
 800a516:	e772      	b.n	800a3fe <_dtoa_r+0x396>
 800a518:	2502      	movs	r5, #2
 800a51a:	e774      	b.n	800a406 <_dtoa_r+0x39e>
 800a51c:	f8cd a020 	str.w	sl, [sp, #32]
 800a520:	464f      	mov	r7, r9
 800a522:	e791      	b.n	800a448 <_dtoa_r+0x3e0>
 800a524:	4b4d      	ldr	r3, [pc, #308]	; (800a65c <_dtoa_r+0x5f4>)
 800a526:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a52a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a530:	2b00      	cmp	r3, #0
 800a532:	d047      	beq.n	800a5c4 <_dtoa_r+0x55c>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	2000      	movs	r0, #0
 800a53a:	494e      	ldr	r1, [pc, #312]	; (800a674 <_dtoa_r+0x60c>)
 800a53c:	f7f6 f996 	bl	800086c <__aeabi_ddiv>
 800a540:	462a      	mov	r2, r5
 800a542:	4633      	mov	r3, r6
 800a544:	f7f5 feb0 	bl	80002a8 <__aeabi_dsub>
 800a548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a54c:	465d      	mov	r5, fp
 800a54e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a552:	f7f6 fb11 	bl	8000b78 <__aeabi_d2iz>
 800a556:	4606      	mov	r6, r0
 800a558:	f7f5 fff4 	bl	8000544 <__aeabi_i2d>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a564:	f7f5 fea0 	bl	80002a8 <__aeabi_dsub>
 800a568:	3630      	adds	r6, #48	; 0x30
 800a56a:	f805 6b01 	strb.w	r6, [r5], #1
 800a56e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a572:	e9cd 0100 	strd	r0, r1, [sp]
 800a576:	f7f6 fac1 	bl	8000afc <__aeabi_dcmplt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d163      	bne.n	800a646 <_dtoa_r+0x5de>
 800a57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a582:	2000      	movs	r0, #0
 800a584:	4937      	ldr	r1, [pc, #220]	; (800a664 <_dtoa_r+0x5fc>)
 800a586:	f7f5 fe8f 	bl	80002a8 <__aeabi_dsub>
 800a58a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a58e:	f7f6 fab5 	bl	8000afc <__aeabi_dcmplt>
 800a592:	2800      	cmp	r0, #0
 800a594:	f040 80b7 	bne.w	800a706 <_dtoa_r+0x69e>
 800a598:	eba5 030b 	sub.w	r3, r5, fp
 800a59c:	429f      	cmp	r7, r3
 800a59e:	f77f af7c 	ble.w	800a49a <_dtoa_r+0x432>
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	4b30      	ldr	r3, [pc, #192]	; (800a668 <_dtoa_r+0x600>)
 800a5a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5aa:	f7f6 f835 	bl	8000618 <__aeabi_dmul>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5b4:	4b2c      	ldr	r3, [pc, #176]	; (800a668 <_dtoa_r+0x600>)
 800a5b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ba:	f7f6 f82d 	bl	8000618 <__aeabi_dmul>
 800a5be:	e9cd 0100 	strd	r0, r1, [sp]
 800a5c2:	e7c4      	b.n	800a54e <_dtoa_r+0x4e6>
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4633      	mov	r3, r6
 800a5c8:	f7f6 f826 	bl	8000618 <__aeabi_dmul>
 800a5cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5d0:	eb0b 0507 	add.w	r5, fp, r7
 800a5d4:	465e      	mov	r6, fp
 800a5d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5da:	f7f6 facd 	bl	8000b78 <__aeabi_d2iz>
 800a5de:	4607      	mov	r7, r0
 800a5e0:	f7f5 ffb0 	bl	8000544 <__aeabi_i2d>
 800a5e4:	3730      	adds	r7, #48	; 0x30
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ee:	f7f5 fe5b 	bl	80002a8 <__aeabi_dsub>
 800a5f2:	f806 7b01 	strb.w	r7, [r6], #1
 800a5f6:	42ae      	cmp	r6, r5
 800a5f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5fc:	f04f 0200 	mov.w	r2, #0
 800a600:	d126      	bne.n	800a650 <_dtoa_r+0x5e8>
 800a602:	4b1c      	ldr	r3, [pc, #112]	; (800a674 <_dtoa_r+0x60c>)
 800a604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a608:	f7f5 fe50 	bl	80002ac <__adddf3>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a614:	f7f6 fa90 	bl	8000b38 <__aeabi_dcmpgt>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d174      	bne.n	800a706 <_dtoa_r+0x69e>
 800a61c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a620:	2000      	movs	r0, #0
 800a622:	4914      	ldr	r1, [pc, #80]	; (800a674 <_dtoa_r+0x60c>)
 800a624:	f7f5 fe40 	bl	80002a8 <__aeabi_dsub>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a630:	f7f6 fa64 	bl	8000afc <__aeabi_dcmplt>
 800a634:	2800      	cmp	r0, #0
 800a636:	f43f af30 	beq.w	800a49a <_dtoa_r+0x432>
 800a63a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a63e:	2b30      	cmp	r3, #48	; 0x30
 800a640:	f105 32ff 	add.w	r2, r5, #4294967295
 800a644:	d002      	beq.n	800a64c <_dtoa_r+0x5e4>
 800a646:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a64a:	e04a      	b.n	800a6e2 <_dtoa_r+0x67a>
 800a64c:	4615      	mov	r5, r2
 800a64e:	e7f4      	b.n	800a63a <_dtoa_r+0x5d2>
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <_dtoa_r+0x600>)
 800a652:	f7f5 ffe1 	bl	8000618 <__aeabi_dmul>
 800a656:	e9cd 0100 	strd	r0, r1, [sp]
 800a65a:	e7bc      	b.n	800a5d6 <_dtoa_r+0x56e>
 800a65c:	0800baf0 	.word	0x0800baf0
 800a660:	0800bac8 	.word	0x0800bac8
 800a664:	3ff00000 	.word	0x3ff00000
 800a668:	40240000 	.word	0x40240000
 800a66c:	401c0000 	.word	0x401c0000
 800a670:	40140000 	.word	0x40140000
 800a674:	3fe00000 	.word	0x3fe00000
 800a678:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a67c:	465d      	mov	r5, fp
 800a67e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a682:	4630      	mov	r0, r6
 800a684:	4639      	mov	r1, r7
 800a686:	f7f6 f8f1 	bl	800086c <__aeabi_ddiv>
 800a68a:	f7f6 fa75 	bl	8000b78 <__aeabi_d2iz>
 800a68e:	4680      	mov	r8, r0
 800a690:	f7f5 ff58 	bl	8000544 <__aeabi_i2d>
 800a694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a698:	f7f5 ffbe 	bl	8000618 <__aeabi_dmul>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	4639      	mov	r1, r7
 800a6a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a6a8:	f7f5 fdfe 	bl	80002a8 <__aeabi_dsub>
 800a6ac:	f805 6b01 	strb.w	r6, [r5], #1
 800a6b0:	eba5 060b 	sub.w	r6, r5, fp
 800a6b4:	45b1      	cmp	r9, r6
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	d139      	bne.n	800a730 <_dtoa_r+0x6c8>
 800a6bc:	f7f5 fdf6 	bl	80002ac <__adddf3>
 800a6c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	f7f6 fa36 	bl	8000b38 <__aeabi_dcmpgt>
 800a6cc:	b9c8      	cbnz	r0, 800a702 <_dtoa_r+0x69a>
 800a6ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	f7f6 fa07 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6da:	b110      	cbz	r0, 800a6e2 <_dtoa_r+0x67a>
 800a6dc:	f018 0f01 	tst.w	r8, #1
 800a6e0:	d10f      	bne.n	800a702 <_dtoa_r+0x69a>
 800a6e2:	9904      	ldr	r1, [sp, #16]
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 fc99 	bl	800b01c <_Bfree>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6ee:	702b      	strb	r3, [r5, #0]
 800a6f0:	f10a 0301 	add.w	r3, sl, #1
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 8241 	beq.w	800ab80 <_dtoa_r+0xb18>
 800a6fe:	601d      	str	r5, [r3, #0]
 800a700:	e23e      	b.n	800ab80 <_dtoa_r+0xb18>
 800a702:	f8cd a020 	str.w	sl, [sp, #32]
 800a706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a70a:	2a39      	cmp	r2, #57	; 0x39
 800a70c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a710:	d108      	bne.n	800a724 <_dtoa_r+0x6bc>
 800a712:	459b      	cmp	fp, r3
 800a714:	d10a      	bne.n	800a72c <_dtoa_r+0x6c4>
 800a716:	9b08      	ldr	r3, [sp, #32]
 800a718:	3301      	adds	r3, #1
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	2330      	movs	r3, #48	; 0x30
 800a71e:	f88b 3000 	strb.w	r3, [fp]
 800a722:	465b      	mov	r3, fp
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	3201      	adds	r2, #1
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	e78c      	b.n	800a646 <_dtoa_r+0x5de>
 800a72c:	461d      	mov	r5, r3
 800a72e:	e7ea      	b.n	800a706 <_dtoa_r+0x69e>
 800a730:	2200      	movs	r2, #0
 800a732:	4b9b      	ldr	r3, [pc, #620]	; (800a9a0 <_dtoa_r+0x938>)
 800a734:	f7f5 ff70 	bl	8000618 <__aeabi_dmul>
 800a738:	2200      	movs	r2, #0
 800a73a:	2300      	movs	r3, #0
 800a73c:	4606      	mov	r6, r0
 800a73e:	460f      	mov	r7, r1
 800a740:	f7f6 f9d2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a744:	2800      	cmp	r0, #0
 800a746:	d09a      	beq.n	800a67e <_dtoa_r+0x616>
 800a748:	e7cb      	b.n	800a6e2 <_dtoa_r+0x67a>
 800a74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a74c:	2a00      	cmp	r2, #0
 800a74e:	f000 808b 	beq.w	800a868 <_dtoa_r+0x800>
 800a752:	9a06      	ldr	r2, [sp, #24]
 800a754:	2a01      	cmp	r2, #1
 800a756:	dc6e      	bgt.n	800a836 <_dtoa_r+0x7ce>
 800a758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a75a:	2a00      	cmp	r2, #0
 800a75c:	d067      	beq.n	800a82e <_dtoa_r+0x7c6>
 800a75e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a762:	9f07      	ldr	r7, [sp, #28]
 800a764:	9d05      	ldr	r5, [sp, #20]
 800a766:	9a05      	ldr	r2, [sp, #20]
 800a768:	2101      	movs	r1, #1
 800a76a:	441a      	add	r2, r3
 800a76c:	4620      	mov	r0, r4
 800a76e:	9205      	str	r2, [sp, #20]
 800a770:	4498      	add	r8, r3
 800a772:	f000 fcf3 	bl	800b15c <__i2b>
 800a776:	4606      	mov	r6, r0
 800a778:	2d00      	cmp	r5, #0
 800a77a:	dd0c      	ble.n	800a796 <_dtoa_r+0x72e>
 800a77c:	f1b8 0f00 	cmp.w	r8, #0
 800a780:	dd09      	ble.n	800a796 <_dtoa_r+0x72e>
 800a782:	4545      	cmp	r5, r8
 800a784:	9a05      	ldr	r2, [sp, #20]
 800a786:	462b      	mov	r3, r5
 800a788:	bfa8      	it	ge
 800a78a:	4643      	movge	r3, r8
 800a78c:	1ad2      	subs	r2, r2, r3
 800a78e:	9205      	str	r2, [sp, #20]
 800a790:	1aed      	subs	r5, r5, r3
 800a792:	eba8 0803 	sub.w	r8, r8, r3
 800a796:	9b07      	ldr	r3, [sp, #28]
 800a798:	b1eb      	cbz	r3, 800a7d6 <_dtoa_r+0x76e>
 800a79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d067      	beq.n	800a870 <_dtoa_r+0x808>
 800a7a0:	b18f      	cbz	r7, 800a7c6 <_dtoa_r+0x75e>
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	463a      	mov	r2, r7
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fd78 	bl	800b29c <__pow5mult>
 800a7ac:	9a04      	ldr	r2, [sp, #16]
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fcdb 	bl	800b16e <__multiply>
 800a7b8:	9904      	ldr	r1, [sp, #16]
 800a7ba:	9008      	str	r0, [sp, #32]
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fc2d 	bl	800b01c <_Bfree>
 800a7c2:	9b08      	ldr	r3, [sp, #32]
 800a7c4:	9304      	str	r3, [sp, #16]
 800a7c6:	9b07      	ldr	r3, [sp, #28]
 800a7c8:	1bda      	subs	r2, r3, r7
 800a7ca:	d004      	beq.n	800a7d6 <_dtoa_r+0x76e>
 800a7cc:	9904      	ldr	r1, [sp, #16]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fd64 	bl	800b29c <__pow5mult>
 800a7d4:	9004      	str	r0, [sp, #16]
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fcbf 	bl	800b15c <__i2b>
 800a7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 81d0 	beq.w	800ab88 <_dtoa_r+0xb20>
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fd55 	bl	800b29c <__pow5mult>
 800a7f2:	9b06      	ldr	r3, [sp, #24]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	dc40      	bgt.n	800a87c <_dtoa_r+0x814>
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d139      	bne.n	800a874 <_dtoa_r+0x80c>
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a806:	2b00      	cmp	r3, #0
 800a808:	d136      	bne.n	800a878 <_dtoa_r+0x810>
 800a80a:	9b01      	ldr	r3, [sp, #4]
 800a80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a810:	0d1b      	lsrs	r3, r3, #20
 800a812:	051b      	lsls	r3, r3, #20
 800a814:	b12b      	cbz	r3, 800a822 <_dtoa_r+0x7ba>
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	3301      	adds	r3, #1
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	f108 0801 	add.w	r8, r8, #1
 800a820:	2301      	movs	r3, #1
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a826:	2b00      	cmp	r3, #0
 800a828:	d12a      	bne.n	800a880 <_dtoa_r+0x818>
 800a82a:	2001      	movs	r0, #1
 800a82c:	e030      	b.n	800a890 <_dtoa_r+0x828>
 800a82e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a830:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a834:	e795      	b.n	800a762 <_dtoa_r+0x6fa>
 800a836:	9b07      	ldr	r3, [sp, #28]
 800a838:	f109 37ff 	add.w	r7, r9, #4294967295
 800a83c:	42bb      	cmp	r3, r7
 800a83e:	bfbf      	itttt	lt
 800a840:	9b07      	ldrlt	r3, [sp, #28]
 800a842:	9707      	strlt	r7, [sp, #28]
 800a844:	1afa      	sublt	r2, r7, r3
 800a846:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a848:	bfbb      	ittet	lt
 800a84a:	189b      	addlt	r3, r3, r2
 800a84c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a84e:	1bdf      	subge	r7, r3, r7
 800a850:	2700      	movlt	r7, #0
 800a852:	f1b9 0f00 	cmp.w	r9, #0
 800a856:	bfb5      	itete	lt
 800a858:	9b05      	ldrlt	r3, [sp, #20]
 800a85a:	9d05      	ldrge	r5, [sp, #20]
 800a85c:	eba3 0509 	sublt.w	r5, r3, r9
 800a860:	464b      	movge	r3, r9
 800a862:	bfb8      	it	lt
 800a864:	2300      	movlt	r3, #0
 800a866:	e77e      	b.n	800a766 <_dtoa_r+0x6fe>
 800a868:	9f07      	ldr	r7, [sp, #28]
 800a86a:	9d05      	ldr	r5, [sp, #20]
 800a86c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a86e:	e783      	b.n	800a778 <_dtoa_r+0x710>
 800a870:	9a07      	ldr	r2, [sp, #28]
 800a872:	e7ab      	b.n	800a7cc <_dtoa_r+0x764>
 800a874:	2300      	movs	r3, #0
 800a876:	e7d4      	b.n	800a822 <_dtoa_r+0x7ba>
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	e7d2      	b.n	800a822 <_dtoa_r+0x7ba>
 800a87c:	2300      	movs	r3, #0
 800a87e:	9307      	str	r3, [sp, #28]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a886:	6918      	ldr	r0, [r3, #16]
 800a888:	f000 fc1a 	bl	800b0c0 <__hi0bits>
 800a88c:	f1c0 0020 	rsb	r0, r0, #32
 800a890:	4440      	add	r0, r8
 800a892:	f010 001f 	ands.w	r0, r0, #31
 800a896:	d047      	beq.n	800a928 <_dtoa_r+0x8c0>
 800a898:	f1c0 0320 	rsb	r3, r0, #32
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	dd3b      	ble.n	800a918 <_dtoa_r+0x8b0>
 800a8a0:	9b05      	ldr	r3, [sp, #20]
 800a8a2:	f1c0 001c 	rsb	r0, r0, #28
 800a8a6:	4403      	add	r3, r0
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	4405      	add	r5, r0
 800a8ac:	4480      	add	r8, r0
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dd05      	ble.n	800a8c0 <_dtoa_r+0x858>
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	9904      	ldr	r1, [sp, #16]
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f000 fd3d 	bl	800b338 <__lshift>
 800a8be:	9004      	str	r0, [sp, #16]
 800a8c0:	f1b8 0f00 	cmp.w	r8, #0
 800a8c4:	dd05      	ble.n	800a8d2 <_dtoa_r+0x86a>
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fd34 	bl	800b338 <__lshift>
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8d4:	b353      	cbz	r3, 800a92c <_dtoa_r+0x8c4>
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	9804      	ldr	r0, [sp, #16]
 800a8da:	f000 fd81 	bl	800b3e0 <__mcmp>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	da24      	bge.n	800a92c <_dtoa_r+0x8c4>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	220a      	movs	r2, #10
 800a8e6:	9904      	ldr	r1, [sp, #16]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fbae 	bl	800b04a <__multadd>
 800a8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f0:	9004      	str	r0, [sp, #16]
 800a8f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 814d 	beq.w	800ab96 <_dtoa_r+0xb2e>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4631      	mov	r1, r6
 800a900:	220a      	movs	r2, #10
 800a902:	4620      	mov	r0, r4
 800a904:	f000 fba1 	bl	800b04a <__multadd>
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	4606      	mov	r6, r0
 800a90e:	dc4f      	bgt.n	800a9b0 <_dtoa_r+0x948>
 800a910:	9b06      	ldr	r3, [sp, #24]
 800a912:	2b02      	cmp	r3, #2
 800a914:	dd4c      	ble.n	800a9b0 <_dtoa_r+0x948>
 800a916:	e011      	b.n	800a93c <_dtoa_r+0x8d4>
 800a918:	d0c9      	beq.n	800a8ae <_dtoa_r+0x846>
 800a91a:	9a05      	ldr	r2, [sp, #20]
 800a91c:	331c      	adds	r3, #28
 800a91e:	441a      	add	r2, r3
 800a920:	9205      	str	r2, [sp, #20]
 800a922:	441d      	add	r5, r3
 800a924:	4498      	add	r8, r3
 800a926:	e7c2      	b.n	800a8ae <_dtoa_r+0x846>
 800a928:	4603      	mov	r3, r0
 800a92a:	e7f6      	b.n	800a91a <_dtoa_r+0x8b2>
 800a92c:	f1b9 0f00 	cmp.w	r9, #0
 800a930:	dc38      	bgt.n	800a9a4 <_dtoa_r+0x93c>
 800a932:	9b06      	ldr	r3, [sp, #24]
 800a934:	2b02      	cmp	r3, #2
 800a936:	dd35      	ble.n	800a9a4 <_dtoa_r+0x93c>
 800a938:	f8cd 9008 	str.w	r9, [sp, #8]
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	b963      	cbnz	r3, 800a95a <_dtoa_r+0x8f2>
 800a940:	4639      	mov	r1, r7
 800a942:	2205      	movs	r2, #5
 800a944:	4620      	mov	r0, r4
 800a946:	f000 fb80 	bl	800b04a <__multadd>
 800a94a:	4601      	mov	r1, r0
 800a94c:	4607      	mov	r7, r0
 800a94e:	9804      	ldr	r0, [sp, #16]
 800a950:	f000 fd46 	bl	800b3e0 <__mcmp>
 800a954:	2800      	cmp	r0, #0
 800a956:	f73f adcc 	bgt.w	800a4f2 <_dtoa_r+0x48a>
 800a95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a95c:	465d      	mov	r5, fp
 800a95e:	ea6f 0a03 	mvn.w	sl, r3
 800a962:	f04f 0900 	mov.w	r9, #0
 800a966:	4639      	mov	r1, r7
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fb57 	bl	800b01c <_Bfree>
 800a96e:	2e00      	cmp	r6, #0
 800a970:	f43f aeb7 	beq.w	800a6e2 <_dtoa_r+0x67a>
 800a974:	f1b9 0f00 	cmp.w	r9, #0
 800a978:	d005      	beq.n	800a986 <_dtoa_r+0x91e>
 800a97a:	45b1      	cmp	r9, r6
 800a97c:	d003      	beq.n	800a986 <_dtoa_r+0x91e>
 800a97e:	4649      	mov	r1, r9
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fb4b 	bl	800b01c <_Bfree>
 800a986:	4631      	mov	r1, r6
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fb47 	bl	800b01c <_Bfree>
 800a98e:	e6a8      	b.n	800a6e2 <_dtoa_r+0x67a>
 800a990:	2700      	movs	r7, #0
 800a992:	463e      	mov	r6, r7
 800a994:	e7e1      	b.n	800a95a <_dtoa_r+0x8f2>
 800a996:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a99a:	463e      	mov	r6, r7
 800a99c:	e5a9      	b.n	800a4f2 <_dtoa_r+0x48a>
 800a99e:	bf00      	nop
 800a9a0:	40240000 	.word	0x40240000
 800a9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80fa 	beq.w	800aba4 <_dtoa_r+0xb3c>
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	dd05      	ble.n	800a9c0 <_dtoa_r+0x958>
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fcbd 	bl	800b338 <__lshift>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	9b07      	ldr	r3, [sp, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d04c      	beq.n	800aa60 <_dtoa_r+0x9f8>
 800a9c6:	6871      	ldr	r1, [r6, #4]
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 faf3 	bl	800afb4 <_Balloc>
 800a9ce:	6932      	ldr	r2, [r6, #16]
 800a9d0:	3202      	adds	r2, #2
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	0092      	lsls	r2, r2, #2
 800a9d6:	f106 010c 	add.w	r1, r6, #12
 800a9da:	300c      	adds	r0, #12
 800a9dc:	f7fe fba4 	bl	8009128 <memcpy>
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 fca7 	bl	800b338 <__lshift>
 800a9ea:	9b00      	ldr	r3, [sp, #0]
 800a9ec:	f8cd b014 	str.w	fp, [sp, #20]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	46b1      	mov	r9, r6
 800a9f6:	9307      	str	r3, [sp, #28]
 800a9f8:	4606      	mov	r6, r0
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	9804      	ldr	r0, [sp, #16]
 800a9fe:	f7ff faa5 	bl	8009f4c <quorem>
 800aa02:	4649      	mov	r1, r9
 800aa04:	4605      	mov	r5, r0
 800aa06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aa0a:	9804      	ldr	r0, [sp, #16]
 800aa0c:	f000 fce8 	bl	800b3e0 <__mcmp>
 800aa10:	4632      	mov	r2, r6
 800aa12:	9000      	str	r0, [sp, #0]
 800aa14:	4639      	mov	r1, r7
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fcfc 	bl	800b414 <__mdiff>
 800aa1c:	68c3      	ldr	r3, [r0, #12]
 800aa1e:	4602      	mov	r2, r0
 800aa20:	bb03      	cbnz	r3, 800aa64 <_dtoa_r+0x9fc>
 800aa22:	4601      	mov	r1, r0
 800aa24:	9008      	str	r0, [sp, #32]
 800aa26:	9804      	ldr	r0, [sp, #16]
 800aa28:	f000 fcda 	bl	800b3e0 <__mcmp>
 800aa2c:	9a08      	ldr	r2, [sp, #32]
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4611      	mov	r1, r2
 800aa32:	4620      	mov	r0, r4
 800aa34:	9308      	str	r3, [sp, #32]
 800aa36:	f000 faf1 	bl	800b01c <_Bfree>
 800aa3a:	9b08      	ldr	r3, [sp, #32]
 800aa3c:	b9a3      	cbnz	r3, 800aa68 <_dtoa_r+0xa00>
 800aa3e:	9a06      	ldr	r2, [sp, #24]
 800aa40:	b992      	cbnz	r2, 800aa68 <_dtoa_r+0xa00>
 800aa42:	9a07      	ldr	r2, [sp, #28]
 800aa44:	b982      	cbnz	r2, 800aa68 <_dtoa_r+0xa00>
 800aa46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa4a:	d029      	beq.n	800aaa0 <_dtoa_r+0xa38>
 800aa4c:	9b00      	ldr	r3, [sp, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dd01      	ble.n	800aa56 <_dtoa_r+0x9ee>
 800aa52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aa56:	9b05      	ldr	r3, [sp, #20]
 800aa58:	1c5d      	adds	r5, r3, #1
 800aa5a:	f883 8000 	strb.w	r8, [r3]
 800aa5e:	e782      	b.n	800a966 <_dtoa_r+0x8fe>
 800aa60:	4630      	mov	r0, r6
 800aa62:	e7c2      	b.n	800a9ea <_dtoa_r+0x982>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e7e3      	b.n	800aa30 <_dtoa_r+0x9c8>
 800aa68:	9a00      	ldr	r2, [sp, #0]
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	db04      	blt.n	800aa78 <_dtoa_r+0xa10>
 800aa6e:	d125      	bne.n	800aabc <_dtoa_r+0xa54>
 800aa70:	9a06      	ldr	r2, [sp, #24]
 800aa72:	bb1a      	cbnz	r2, 800aabc <_dtoa_r+0xa54>
 800aa74:	9a07      	ldr	r2, [sp, #28]
 800aa76:	bb0a      	cbnz	r2, 800aabc <_dtoa_r+0xa54>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	ddec      	ble.n	800aa56 <_dtoa_r+0x9ee>
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	9904      	ldr	r1, [sp, #16]
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 fc59 	bl	800b338 <__lshift>
 800aa86:	4639      	mov	r1, r7
 800aa88:	9004      	str	r0, [sp, #16]
 800aa8a:	f000 fca9 	bl	800b3e0 <__mcmp>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	dc03      	bgt.n	800aa9a <_dtoa_r+0xa32>
 800aa92:	d1e0      	bne.n	800aa56 <_dtoa_r+0x9ee>
 800aa94:	f018 0f01 	tst.w	r8, #1
 800aa98:	d0dd      	beq.n	800aa56 <_dtoa_r+0x9ee>
 800aa9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa9e:	d1d8      	bne.n	800aa52 <_dtoa_r+0x9ea>
 800aaa0:	9b05      	ldr	r3, [sp, #20]
 800aaa2:	9a05      	ldr	r2, [sp, #20]
 800aaa4:	1c5d      	adds	r5, r3, #1
 800aaa6:	2339      	movs	r3, #57	; 0x39
 800aaa8:	7013      	strb	r3, [r2, #0]
 800aaaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aaae:	2b39      	cmp	r3, #57	; 0x39
 800aab0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aab4:	d04f      	beq.n	800ab56 <_dtoa_r+0xaee>
 800aab6:	3301      	adds	r3, #1
 800aab8:	7013      	strb	r3, [r2, #0]
 800aaba:	e754      	b.n	800a966 <_dtoa_r+0x8fe>
 800aabc:	9a05      	ldr	r2, [sp, #20]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f102 0501 	add.w	r5, r2, #1
 800aac4:	dd06      	ble.n	800aad4 <_dtoa_r+0xa6c>
 800aac6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aaca:	d0e9      	beq.n	800aaa0 <_dtoa_r+0xa38>
 800aacc:	f108 0801 	add.w	r8, r8, #1
 800aad0:	9b05      	ldr	r3, [sp, #20]
 800aad2:	e7c2      	b.n	800aa5a <_dtoa_r+0x9f2>
 800aad4:	9a02      	ldr	r2, [sp, #8]
 800aad6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aada:	eba5 030b 	sub.w	r3, r5, fp
 800aade:	4293      	cmp	r3, r2
 800aae0:	d021      	beq.n	800ab26 <_dtoa_r+0xabe>
 800aae2:	2300      	movs	r3, #0
 800aae4:	220a      	movs	r2, #10
 800aae6:	9904      	ldr	r1, [sp, #16]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 faae 	bl	800b04a <__multadd>
 800aaee:	45b1      	cmp	r9, r6
 800aaf0:	9004      	str	r0, [sp, #16]
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	f04f 020a 	mov.w	r2, #10
 800aafa:	4649      	mov	r1, r9
 800aafc:	4620      	mov	r0, r4
 800aafe:	d105      	bne.n	800ab0c <_dtoa_r+0xaa4>
 800ab00:	f000 faa3 	bl	800b04a <__multadd>
 800ab04:	4681      	mov	r9, r0
 800ab06:	4606      	mov	r6, r0
 800ab08:	9505      	str	r5, [sp, #20]
 800ab0a:	e776      	b.n	800a9fa <_dtoa_r+0x992>
 800ab0c:	f000 fa9d 	bl	800b04a <__multadd>
 800ab10:	4631      	mov	r1, r6
 800ab12:	4681      	mov	r9, r0
 800ab14:	2300      	movs	r3, #0
 800ab16:	220a      	movs	r2, #10
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fa96 	bl	800b04a <__multadd>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	e7f2      	b.n	800ab08 <_dtoa_r+0xaa0>
 800ab22:	f04f 0900 	mov.w	r9, #0
 800ab26:	2201      	movs	r2, #1
 800ab28:	9904      	ldr	r1, [sp, #16]
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fc04 	bl	800b338 <__lshift>
 800ab30:	4639      	mov	r1, r7
 800ab32:	9004      	str	r0, [sp, #16]
 800ab34:	f000 fc54 	bl	800b3e0 <__mcmp>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	dcb6      	bgt.n	800aaaa <_dtoa_r+0xa42>
 800ab3c:	d102      	bne.n	800ab44 <_dtoa_r+0xadc>
 800ab3e:	f018 0f01 	tst.w	r8, #1
 800ab42:	d1b2      	bne.n	800aaaa <_dtoa_r+0xa42>
 800ab44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab48:	2b30      	cmp	r3, #48	; 0x30
 800ab4a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab4e:	f47f af0a 	bne.w	800a966 <_dtoa_r+0x8fe>
 800ab52:	4615      	mov	r5, r2
 800ab54:	e7f6      	b.n	800ab44 <_dtoa_r+0xadc>
 800ab56:	4593      	cmp	fp, r2
 800ab58:	d105      	bne.n	800ab66 <_dtoa_r+0xafe>
 800ab5a:	2331      	movs	r3, #49	; 0x31
 800ab5c:	f10a 0a01 	add.w	sl, sl, #1
 800ab60:	f88b 3000 	strb.w	r3, [fp]
 800ab64:	e6ff      	b.n	800a966 <_dtoa_r+0x8fe>
 800ab66:	4615      	mov	r5, r2
 800ab68:	e79f      	b.n	800aaaa <_dtoa_r+0xa42>
 800ab6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800abd0 <_dtoa_r+0xb68>
 800ab6e:	e007      	b.n	800ab80 <_dtoa_r+0xb18>
 800ab70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab72:	f8df b060 	ldr.w	fp, [pc, #96]	; 800abd4 <_dtoa_r+0xb6c>
 800ab76:	b11b      	cbz	r3, 800ab80 <_dtoa_r+0xb18>
 800ab78:	f10b 0308 	add.w	r3, fp, #8
 800ab7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	4658      	mov	r0, fp
 800ab82:	b017      	add	sp, #92	; 0x5c
 800ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab88:	9b06      	ldr	r3, [sp, #24]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	f77f ae35 	ble.w	800a7fa <_dtoa_r+0x792>
 800ab90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	e649      	b.n	800a82a <_dtoa_r+0x7c2>
 800ab96:	9b02      	ldr	r3, [sp, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dc03      	bgt.n	800aba4 <_dtoa_r+0xb3c>
 800ab9c:	9b06      	ldr	r3, [sp, #24]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	f73f aecc 	bgt.w	800a93c <_dtoa_r+0x8d4>
 800aba4:	465d      	mov	r5, fp
 800aba6:	4639      	mov	r1, r7
 800aba8:	9804      	ldr	r0, [sp, #16]
 800abaa:	f7ff f9cf 	bl	8009f4c <quorem>
 800abae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800abb2:	f805 8b01 	strb.w	r8, [r5], #1
 800abb6:	9a02      	ldr	r2, [sp, #8]
 800abb8:	eba5 030b 	sub.w	r3, r5, fp
 800abbc:	429a      	cmp	r2, r3
 800abbe:	ddb0      	ble.n	800ab22 <_dtoa_r+0xaba>
 800abc0:	2300      	movs	r3, #0
 800abc2:	220a      	movs	r2, #10
 800abc4:	9904      	ldr	r1, [sp, #16]
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 fa3f 	bl	800b04a <__multadd>
 800abcc:	9004      	str	r0, [sp, #16]
 800abce:	e7ea      	b.n	800aba6 <_dtoa_r+0xb3e>
 800abd0:	0800ba30 	.word	0x0800ba30
 800abd4:	0800ba54 	.word	0x0800ba54

0800abd8 <__sflush_r>:
 800abd8:	898a      	ldrh	r2, [r1, #12]
 800abda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abde:	4605      	mov	r5, r0
 800abe0:	0710      	lsls	r0, r2, #28
 800abe2:	460c      	mov	r4, r1
 800abe4:	d458      	bmi.n	800ac98 <__sflush_r+0xc0>
 800abe6:	684b      	ldr	r3, [r1, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	dc05      	bgt.n	800abf8 <__sflush_r+0x20>
 800abec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dc02      	bgt.n	800abf8 <__sflush_r+0x20>
 800abf2:	2000      	movs	r0, #0
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abfa:	2e00      	cmp	r6, #0
 800abfc:	d0f9      	beq.n	800abf2 <__sflush_r+0x1a>
 800abfe:	2300      	movs	r3, #0
 800ac00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac04:	682f      	ldr	r7, [r5, #0]
 800ac06:	6a21      	ldr	r1, [r4, #32]
 800ac08:	602b      	str	r3, [r5, #0]
 800ac0a:	d032      	beq.n	800ac72 <__sflush_r+0x9a>
 800ac0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	075a      	lsls	r2, r3, #29
 800ac12:	d505      	bpl.n	800ac20 <__sflush_r+0x48>
 800ac14:	6863      	ldr	r3, [r4, #4]
 800ac16:	1ac0      	subs	r0, r0, r3
 800ac18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac1a:	b10b      	cbz	r3, 800ac20 <__sflush_r+0x48>
 800ac1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac1e:	1ac0      	subs	r0, r0, r3
 800ac20:	2300      	movs	r3, #0
 800ac22:	4602      	mov	r2, r0
 800ac24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	d106      	bne.n	800ac40 <__sflush_r+0x68>
 800ac32:	6829      	ldr	r1, [r5, #0]
 800ac34:	291d      	cmp	r1, #29
 800ac36:	d848      	bhi.n	800acca <__sflush_r+0xf2>
 800ac38:	4a29      	ldr	r2, [pc, #164]	; (800ace0 <__sflush_r+0x108>)
 800ac3a:	40ca      	lsrs	r2, r1
 800ac3c:	07d6      	lsls	r6, r2, #31
 800ac3e:	d544      	bpl.n	800acca <__sflush_r+0xf2>
 800ac40:	2200      	movs	r2, #0
 800ac42:	6062      	str	r2, [r4, #4]
 800ac44:	04d9      	lsls	r1, r3, #19
 800ac46:	6922      	ldr	r2, [r4, #16]
 800ac48:	6022      	str	r2, [r4, #0]
 800ac4a:	d504      	bpl.n	800ac56 <__sflush_r+0x7e>
 800ac4c:	1c42      	adds	r2, r0, #1
 800ac4e:	d101      	bne.n	800ac54 <__sflush_r+0x7c>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	b903      	cbnz	r3, 800ac56 <__sflush_r+0x7e>
 800ac54:	6560      	str	r0, [r4, #84]	; 0x54
 800ac56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac58:	602f      	str	r7, [r5, #0]
 800ac5a:	2900      	cmp	r1, #0
 800ac5c:	d0c9      	beq.n	800abf2 <__sflush_r+0x1a>
 800ac5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac62:	4299      	cmp	r1, r3
 800ac64:	d002      	beq.n	800ac6c <__sflush_r+0x94>
 800ac66:	4628      	mov	r0, r5
 800ac68:	f7fe fa72 	bl	8009150 <_free_r>
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	6360      	str	r0, [r4, #52]	; 0x34
 800ac70:	e7c0      	b.n	800abf4 <__sflush_r+0x1c>
 800ac72:	2301      	movs	r3, #1
 800ac74:	4628      	mov	r0, r5
 800ac76:	47b0      	blx	r6
 800ac78:	1c41      	adds	r1, r0, #1
 800ac7a:	d1c8      	bne.n	800ac0e <__sflush_r+0x36>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0c5      	beq.n	800ac0e <__sflush_r+0x36>
 800ac82:	2b1d      	cmp	r3, #29
 800ac84:	d001      	beq.n	800ac8a <__sflush_r+0xb2>
 800ac86:	2b16      	cmp	r3, #22
 800ac88:	d101      	bne.n	800ac8e <__sflush_r+0xb6>
 800ac8a:	602f      	str	r7, [r5, #0]
 800ac8c:	e7b1      	b.n	800abf2 <__sflush_r+0x1a>
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	e7ad      	b.n	800abf4 <__sflush_r+0x1c>
 800ac98:	690f      	ldr	r7, [r1, #16]
 800ac9a:	2f00      	cmp	r7, #0
 800ac9c:	d0a9      	beq.n	800abf2 <__sflush_r+0x1a>
 800ac9e:	0793      	lsls	r3, r2, #30
 800aca0:	680e      	ldr	r6, [r1, #0]
 800aca2:	bf08      	it	eq
 800aca4:	694b      	ldreq	r3, [r1, #20]
 800aca6:	600f      	str	r7, [r1, #0]
 800aca8:	bf18      	it	ne
 800acaa:	2300      	movne	r3, #0
 800acac:	eba6 0807 	sub.w	r8, r6, r7
 800acb0:	608b      	str	r3, [r1, #8]
 800acb2:	f1b8 0f00 	cmp.w	r8, #0
 800acb6:	dd9c      	ble.n	800abf2 <__sflush_r+0x1a>
 800acb8:	4643      	mov	r3, r8
 800acba:	463a      	mov	r2, r7
 800acbc:	6a21      	ldr	r1, [r4, #32]
 800acbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b0      	blx	r6
 800acc4:	2800      	cmp	r0, #0
 800acc6:	dc06      	bgt.n	800acd6 <__sflush_r+0xfe>
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	e78e      	b.n	800abf4 <__sflush_r+0x1c>
 800acd6:	4407      	add	r7, r0
 800acd8:	eba8 0800 	sub.w	r8, r8, r0
 800acdc:	e7e9      	b.n	800acb2 <__sflush_r+0xda>
 800acde:	bf00      	nop
 800ace0:	20400001 	.word	0x20400001

0800ace4 <_fflush_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	690b      	ldr	r3, [r1, #16]
 800ace8:	4605      	mov	r5, r0
 800acea:	460c      	mov	r4, r1
 800acec:	b1db      	cbz	r3, 800ad26 <_fflush_r+0x42>
 800acee:	b118      	cbz	r0, 800acf8 <_fflush_r+0x14>
 800acf0:	6983      	ldr	r3, [r0, #24]
 800acf2:	b90b      	cbnz	r3, 800acf8 <_fflush_r+0x14>
 800acf4:	f000 f860 	bl	800adb8 <__sinit>
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <_fflush_r+0x48>)
 800acfa:	429c      	cmp	r4, r3
 800acfc:	d109      	bne.n	800ad12 <_fflush_r+0x2e>
 800acfe:	686c      	ldr	r4, [r5, #4]
 800ad00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad04:	b17b      	cbz	r3, 800ad26 <_fflush_r+0x42>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0e:	f7ff bf63 	b.w	800abd8 <__sflush_r>
 800ad12:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <_fflush_r+0x4c>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	d101      	bne.n	800ad1c <_fflush_r+0x38>
 800ad18:	68ac      	ldr	r4, [r5, #8]
 800ad1a:	e7f1      	b.n	800ad00 <_fflush_r+0x1c>
 800ad1c:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <_fflush_r+0x50>)
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	bf08      	it	eq
 800ad22:	68ec      	ldreq	r4, [r5, #12]
 800ad24:	e7ec      	b.n	800ad00 <_fflush_r+0x1c>
 800ad26:	2000      	movs	r0, #0
 800ad28:	bd38      	pop	{r3, r4, r5, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800ba84 	.word	0x0800ba84
 800ad30:	0800baa4 	.word	0x0800baa4
 800ad34:	0800ba64 	.word	0x0800ba64

0800ad38 <std>:
 800ad38:	2300      	movs	r3, #0
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad42:	6083      	str	r3, [r0, #8]
 800ad44:	8181      	strh	r1, [r0, #12]
 800ad46:	6643      	str	r3, [r0, #100]	; 0x64
 800ad48:	81c2      	strh	r2, [r0, #14]
 800ad4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad4e:	6183      	str	r3, [r0, #24]
 800ad50:	4619      	mov	r1, r3
 800ad52:	2208      	movs	r2, #8
 800ad54:	305c      	adds	r0, #92	; 0x5c
 800ad56:	f7fe f9f2 	bl	800913e <memset>
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <std+0x38>)
 800ad5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <std+0x3c>)
 800ad60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <std+0x40>)
 800ad64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad66:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <std+0x44>)
 800ad68:	6224      	str	r4, [r4, #32]
 800ad6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad6c:	bd10      	pop	{r4, pc}
 800ad6e:	bf00      	nop
 800ad70:	0800b809 	.word	0x0800b809
 800ad74:	0800b82b 	.word	0x0800b82b
 800ad78:	0800b863 	.word	0x0800b863
 800ad7c:	0800b887 	.word	0x0800b887

0800ad80 <_cleanup_r>:
 800ad80:	4901      	ldr	r1, [pc, #4]	; (800ad88 <_cleanup_r+0x8>)
 800ad82:	f000 b885 	b.w	800ae90 <_fwalk_reent>
 800ad86:	bf00      	nop
 800ad88:	0800ace5 	.word	0x0800ace5

0800ad8c <__sfmoreglue>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	1e4a      	subs	r2, r1, #1
 800ad90:	2568      	movs	r5, #104	; 0x68
 800ad92:	4355      	muls	r5, r2
 800ad94:	460e      	mov	r6, r1
 800ad96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad9a:	f7fe fa27 	bl	80091ec <_malloc_r>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	b140      	cbz	r0, 800adb4 <__sfmoreglue+0x28>
 800ada2:	2100      	movs	r1, #0
 800ada4:	e9c0 1600 	strd	r1, r6, [r0]
 800ada8:	300c      	adds	r0, #12
 800adaa:	60a0      	str	r0, [r4, #8]
 800adac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adb0:	f7fe f9c5 	bl	800913e <memset>
 800adb4:	4620      	mov	r0, r4
 800adb6:	bd70      	pop	{r4, r5, r6, pc}

0800adb8 <__sinit>:
 800adb8:	6983      	ldr	r3, [r0, #24]
 800adba:	b510      	push	{r4, lr}
 800adbc:	4604      	mov	r4, r0
 800adbe:	bb33      	cbnz	r3, 800ae0e <__sinit+0x56>
 800adc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800adc4:	6503      	str	r3, [r0, #80]	; 0x50
 800adc6:	4b12      	ldr	r3, [pc, #72]	; (800ae10 <__sinit+0x58>)
 800adc8:	4a12      	ldr	r2, [pc, #72]	; (800ae14 <__sinit+0x5c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6282      	str	r2, [r0, #40]	; 0x28
 800adce:	4298      	cmp	r0, r3
 800add0:	bf04      	itt	eq
 800add2:	2301      	moveq	r3, #1
 800add4:	6183      	streq	r3, [r0, #24]
 800add6:	f000 f81f 	bl	800ae18 <__sfp>
 800adda:	6060      	str	r0, [r4, #4]
 800addc:	4620      	mov	r0, r4
 800adde:	f000 f81b 	bl	800ae18 <__sfp>
 800ade2:	60a0      	str	r0, [r4, #8]
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 f817 	bl	800ae18 <__sfp>
 800adea:	2200      	movs	r2, #0
 800adec:	60e0      	str	r0, [r4, #12]
 800adee:	2104      	movs	r1, #4
 800adf0:	6860      	ldr	r0, [r4, #4]
 800adf2:	f7ff ffa1 	bl	800ad38 <std>
 800adf6:	2201      	movs	r2, #1
 800adf8:	2109      	movs	r1, #9
 800adfa:	68a0      	ldr	r0, [r4, #8]
 800adfc:	f7ff ff9c 	bl	800ad38 <std>
 800ae00:	2202      	movs	r2, #2
 800ae02:	2112      	movs	r1, #18
 800ae04:	68e0      	ldr	r0, [r4, #12]
 800ae06:	f7ff ff97 	bl	800ad38 <std>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	61a3      	str	r3, [r4, #24]
 800ae0e:	bd10      	pop	{r4, pc}
 800ae10:	0800ba1c 	.word	0x0800ba1c
 800ae14:	0800ad81 	.word	0x0800ad81

0800ae18 <__sfp>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <__sfp+0x70>)
 800ae1c:	681e      	ldr	r6, [r3, #0]
 800ae1e:	69b3      	ldr	r3, [r6, #24]
 800ae20:	4607      	mov	r7, r0
 800ae22:	b913      	cbnz	r3, 800ae2a <__sfp+0x12>
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7ff ffc7 	bl	800adb8 <__sinit>
 800ae2a:	3648      	adds	r6, #72	; 0x48
 800ae2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	d503      	bpl.n	800ae3c <__sfp+0x24>
 800ae34:	6833      	ldr	r3, [r6, #0]
 800ae36:	b133      	cbz	r3, 800ae46 <__sfp+0x2e>
 800ae38:	6836      	ldr	r6, [r6, #0]
 800ae3a:	e7f7      	b.n	800ae2c <__sfp+0x14>
 800ae3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae40:	b16d      	cbz	r5, 800ae5e <__sfp+0x46>
 800ae42:	3468      	adds	r4, #104	; 0x68
 800ae44:	e7f4      	b.n	800ae30 <__sfp+0x18>
 800ae46:	2104      	movs	r1, #4
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff ff9f 	bl	800ad8c <__sfmoreglue>
 800ae4e:	6030      	str	r0, [r6, #0]
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d1f1      	bne.n	800ae38 <__sfp+0x20>
 800ae54:	230c      	movs	r3, #12
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	4604      	mov	r4, r0
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae5e:	4b0b      	ldr	r3, [pc, #44]	; (800ae8c <__sfp+0x74>)
 800ae60:	6665      	str	r5, [r4, #100]	; 0x64
 800ae62:	e9c4 5500 	strd	r5, r5, [r4]
 800ae66:	60a5      	str	r5, [r4, #8]
 800ae68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ae6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ae70:	2208      	movs	r2, #8
 800ae72:	4629      	mov	r1, r5
 800ae74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae78:	f7fe f961 	bl	800913e <memset>
 800ae7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae84:	e7e9      	b.n	800ae5a <__sfp+0x42>
 800ae86:	bf00      	nop
 800ae88:	0800ba1c 	.word	0x0800ba1c
 800ae8c:	ffff0001 	.word	0xffff0001

0800ae90 <_fwalk_reent>:
 800ae90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae94:	4680      	mov	r8, r0
 800ae96:	4689      	mov	r9, r1
 800ae98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae9c:	2600      	movs	r6, #0
 800ae9e:	b914      	cbnz	r4, 800aea6 <_fwalk_reent+0x16>
 800aea0:	4630      	mov	r0, r6
 800aea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800aeaa:	3f01      	subs	r7, #1
 800aeac:	d501      	bpl.n	800aeb2 <_fwalk_reent+0x22>
 800aeae:	6824      	ldr	r4, [r4, #0]
 800aeb0:	e7f5      	b.n	800ae9e <_fwalk_reent+0xe>
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d907      	bls.n	800aec8 <_fwalk_reent+0x38>
 800aeb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aebc:	3301      	adds	r3, #1
 800aebe:	d003      	beq.n	800aec8 <_fwalk_reent+0x38>
 800aec0:	4629      	mov	r1, r5
 800aec2:	4640      	mov	r0, r8
 800aec4:	47c8      	blx	r9
 800aec6:	4306      	orrs	r6, r0
 800aec8:	3568      	adds	r5, #104	; 0x68
 800aeca:	e7ee      	b.n	800aeaa <_fwalk_reent+0x1a>

0800aecc <_localeconv_r>:
 800aecc:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <_localeconv_r+0x14>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6a18      	ldr	r0, [r3, #32]
 800aed2:	4b04      	ldr	r3, [pc, #16]	; (800aee4 <_localeconv_r+0x18>)
 800aed4:	2800      	cmp	r0, #0
 800aed6:	bf08      	it	eq
 800aed8:	4618      	moveq	r0, r3
 800aeda:	30f0      	adds	r0, #240	; 0xf0
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	2000000c 	.word	0x2000000c
 800aee4:	20000070 	.word	0x20000070

0800aee8 <__swhatbuf_r>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	460e      	mov	r6, r1
 800aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef0:	2900      	cmp	r1, #0
 800aef2:	b096      	sub	sp, #88	; 0x58
 800aef4:	4614      	mov	r4, r2
 800aef6:	461d      	mov	r5, r3
 800aef8:	da07      	bge.n	800af0a <__swhatbuf_r+0x22>
 800aefa:	2300      	movs	r3, #0
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	89b3      	ldrh	r3, [r6, #12]
 800af00:	061a      	lsls	r2, r3, #24
 800af02:	d410      	bmi.n	800af26 <__swhatbuf_r+0x3e>
 800af04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af08:	e00e      	b.n	800af28 <__swhatbuf_r+0x40>
 800af0a:	466a      	mov	r2, sp
 800af0c:	f000 fce2 	bl	800b8d4 <_fstat_r>
 800af10:	2800      	cmp	r0, #0
 800af12:	dbf2      	blt.n	800aefa <__swhatbuf_r+0x12>
 800af14:	9a01      	ldr	r2, [sp, #4]
 800af16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af1e:	425a      	negs	r2, r3
 800af20:	415a      	adcs	r2, r3
 800af22:	602a      	str	r2, [r5, #0]
 800af24:	e7ee      	b.n	800af04 <__swhatbuf_r+0x1c>
 800af26:	2340      	movs	r3, #64	; 0x40
 800af28:	2000      	movs	r0, #0
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	b016      	add	sp, #88	; 0x58
 800af2e:	bd70      	pop	{r4, r5, r6, pc}

0800af30 <__smakebuf_r>:
 800af30:	898b      	ldrh	r3, [r1, #12]
 800af32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af34:	079d      	lsls	r5, r3, #30
 800af36:	4606      	mov	r6, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	d507      	bpl.n	800af4c <__smakebuf_r+0x1c>
 800af3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	6123      	str	r3, [r4, #16]
 800af44:	2301      	movs	r3, #1
 800af46:	6163      	str	r3, [r4, #20]
 800af48:	b002      	add	sp, #8
 800af4a:	bd70      	pop	{r4, r5, r6, pc}
 800af4c:	ab01      	add	r3, sp, #4
 800af4e:	466a      	mov	r2, sp
 800af50:	f7ff ffca 	bl	800aee8 <__swhatbuf_r>
 800af54:	9900      	ldr	r1, [sp, #0]
 800af56:	4605      	mov	r5, r0
 800af58:	4630      	mov	r0, r6
 800af5a:	f7fe f947 	bl	80091ec <_malloc_r>
 800af5e:	b948      	cbnz	r0, 800af74 <__smakebuf_r+0x44>
 800af60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af64:	059a      	lsls	r2, r3, #22
 800af66:	d4ef      	bmi.n	800af48 <__smakebuf_r+0x18>
 800af68:	f023 0303 	bic.w	r3, r3, #3
 800af6c:	f043 0302 	orr.w	r3, r3, #2
 800af70:	81a3      	strh	r3, [r4, #12]
 800af72:	e7e3      	b.n	800af3c <__smakebuf_r+0xc>
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <__smakebuf_r+0x7c>)
 800af76:	62b3      	str	r3, [r6, #40]	; 0x28
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	6020      	str	r0, [r4, #0]
 800af7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	6163      	str	r3, [r4, #20]
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	6120      	str	r0, [r4, #16]
 800af8a:	b15b      	cbz	r3, 800afa4 <__smakebuf_r+0x74>
 800af8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af90:	4630      	mov	r0, r6
 800af92:	f000 fcb1 	bl	800b8f8 <_isatty_r>
 800af96:	b128      	cbz	r0, 800afa4 <__smakebuf_r+0x74>
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	f023 0303 	bic.w	r3, r3, #3
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	431d      	orrs	r5, r3
 800afa8:	81a5      	strh	r5, [r4, #12]
 800afaa:	e7cd      	b.n	800af48 <__smakebuf_r+0x18>
 800afac:	0800ad81 	.word	0x0800ad81

0800afb0 <__malloc_lock>:
 800afb0:	4770      	bx	lr

0800afb2 <__malloc_unlock>:
 800afb2:	4770      	bx	lr

0800afb4 <_Balloc>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afb8:	4604      	mov	r4, r0
 800afba:	460e      	mov	r6, r1
 800afbc:	b93d      	cbnz	r5, 800afce <_Balloc+0x1a>
 800afbe:	2010      	movs	r0, #16
 800afc0:	f7fe f8a2 	bl	8009108 <malloc>
 800afc4:	6260      	str	r0, [r4, #36]	; 0x24
 800afc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afca:	6005      	str	r5, [r0, #0]
 800afcc:	60c5      	str	r5, [r0, #12]
 800afce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800afd0:	68eb      	ldr	r3, [r5, #12]
 800afd2:	b183      	cbz	r3, 800aff6 <_Balloc+0x42>
 800afd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afdc:	b9b8      	cbnz	r0, 800b00e <_Balloc+0x5a>
 800afde:	2101      	movs	r1, #1
 800afe0:	fa01 f506 	lsl.w	r5, r1, r6
 800afe4:	1d6a      	adds	r2, r5, #5
 800afe6:	0092      	lsls	r2, r2, #2
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 fabf 	bl	800b56c <_calloc_r>
 800afee:	b160      	cbz	r0, 800b00a <_Balloc+0x56>
 800aff0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aff4:	e00e      	b.n	800b014 <_Balloc+0x60>
 800aff6:	2221      	movs	r2, #33	; 0x21
 800aff8:	2104      	movs	r1, #4
 800affa:	4620      	mov	r0, r4
 800affc:	f000 fab6 	bl	800b56c <_calloc_r>
 800b000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b002:	60e8      	str	r0, [r5, #12]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e4      	bne.n	800afd4 <_Balloc+0x20>
 800b00a:	2000      	movs	r0, #0
 800b00c:	bd70      	pop	{r4, r5, r6, pc}
 800b00e:	6802      	ldr	r2, [r0, #0]
 800b010:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b014:	2300      	movs	r3, #0
 800b016:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b01a:	e7f7      	b.n	800b00c <_Balloc+0x58>

0800b01c <_Bfree>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b020:	4606      	mov	r6, r0
 800b022:	460d      	mov	r5, r1
 800b024:	b93c      	cbnz	r4, 800b036 <_Bfree+0x1a>
 800b026:	2010      	movs	r0, #16
 800b028:	f7fe f86e 	bl	8009108 <malloc>
 800b02c:	6270      	str	r0, [r6, #36]	; 0x24
 800b02e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b032:	6004      	str	r4, [r0, #0]
 800b034:	60c4      	str	r4, [r0, #12]
 800b036:	b13d      	cbz	r5, 800b048 <_Bfree+0x2c>
 800b038:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b03a:	686a      	ldr	r2, [r5, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b042:	6029      	str	r1, [r5, #0]
 800b044:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b048:	bd70      	pop	{r4, r5, r6, pc}

0800b04a <__multadd>:
 800b04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04e:	690d      	ldr	r5, [r1, #16]
 800b050:	461f      	mov	r7, r3
 800b052:	4606      	mov	r6, r0
 800b054:	460c      	mov	r4, r1
 800b056:	f101 0c14 	add.w	ip, r1, #20
 800b05a:	2300      	movs	r3, #0
 800b05c:	f8dc 0000 	ldr.w	r0, [ip]
 800b060:	b281      	uxth	r1, r0
 800b062:	fb02 7101 	mla	r1, r2, r1, r7
 800b066:	0c0f      	lsrs	r7, r1, #16
 800b068:	0c00      	lsrs	r0, r0, #16
 800b06a:	fb02 7000 	mla	r0, r2, r0, r7
 800b06e:	b289      	uxth	r1, r1
 800b070:	3301      	adds	r3, #1
 800b072:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b076:	429d      	cmp	r5, r3
 800b078:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b07c:	f84c 1b04 	str.w	r1, [ip], #4
 800b080:	dcec      	bgt.n	800b05c <__multadd+0x12>
 800b082:	b1d7      	cbz	r7, 800b0ba <__multadd+0x70>
 800b084:	68a3      	ldr	r3, [r4, #8]
 800b086:	42ab      	cmp	r3, r5
 800b088:	dc12      	bgt.n	800b0b0 <__multadd+0x66>
 800b08a:	6861      	ldr	r1, [r4, #4]
 800b08c:	4630      	mov	r0, r6
 800b08e:	3101      	adds	r1, #1
 800b090:	f7ff ff90 	bl	800afb4 <_Balloc>
 800b094:	6922      	ldr	r2, [r4, #16]
 800b096:	3202      	adds	r2, #2
 800b098:	f104 010c 	add.w	r1, r4, #12
 800b09c:	4680      	mov	r8, r0
 800b09e:	0092      	lsls	r2, r2, #2
 800b0a0:	300c      	adds	r0, #12
 800b0a2:	f7fe f841 	bl	8009128 <memcpy>
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ffb7 	bl	800b01c <_Bfree>
 800b0ae:	4644      	mov	r4, r8
 800b0b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0b4:	3501      	adds	r5, #1
 800b0b6:	615f      	str	r7, [r3, #20]
 800b0b8:	6125      	str	r5, [r4, #16]
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0c0 <__hi0bits>:
 800b0c0:	0c02      	lsrs	r2, r0, #16
 800b0c2:	0412      	lsls	r2, r2, #16
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	b9b2      	cbnz	r2, 800b0f6 <__hi0bits+0x36>
 800b0c8:	0403      	lsls	r3, r0, #16
 800b0ca:	2010      	movs	r0, #16
 800b0cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b0d0:	bf04      	itt	eq
 800b0d2:	021b      	lsleq	r3, r3, #8
 800b0d4:	3008      	addeq	r0, #8
 800b0d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b0da:	bf04      	itt	eq
 800b0dc:	011b      	lsleq	r3, r3, #4
 800b0de:	3004      	addeq	r0, #4
 800b0e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0e4:	bf04      	itt	eq
 800b0e6:	009b      	lsleq	r3, r3, #2
 800b0e8:	3002      	addeq	r0, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	db06      	blt.n	800b0fc <__hi0bits+0x3c>
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	d503      	bpl.n	800b0fa <__hi0bits+0x3a>
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	4770      	bx	lr
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e7e8      	b.n	800b0cc <__hi0bits+0xc>
 800b0fa:	2020      	movs	r0, #32
 800b0fc:	4770      	bx	lr

0800b0fe <__lo0bits>:
 800b0fe:	6803      	ldr	r3, [r0, #0]
 800b100:	f013 0207 	ands.w	r2, r3, #7
 800b104:	4601      	mov	r1, r0
 800b106:	d00b      	beq.n	800b120 <__lo0bits+0x22>
 800b108:	07da      	lsls	r2, r3, #31
 800b10a:	d423      	bmi.n	800b154 <__lo0bits+0x56>
 800b10c:	0798      	lsls	r0, r3, #30
 800b10e:	bf49      	itett	mi
 800b110:	085b      	lsrmi	r3, r3, #1
 800b112:	089b      	lsrpl	r3, r3, #2
 800b114:	2001      	movmi	r0, #1
 800b116:	600b      	strmi	r3, [r1, #0]
 800b118:	bf5c      	itt	pl
 800b11a:	600b      	strpl	r3, [r1, #0]
 800b11c:	2002      	movpl	r0, #2
 800b11e:	4770      	bx	lr
 800b120:	b298      	uxth	r0, r3
 800b122:	b9a8      	cbnz	r0, 800b150 <__lo0bits+0x52>
 800b124:	0c1b      	lsrs	r3, r3, #16
 800b126:	2010      	movs	r0, #16
 800b128:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b12c:	bf04      	itt	eq
 800b12e:	0a1b      	lsreq	r3, r3, #8
 800b130:	3008      	addeq	r0, #8
 800b132:	071a      	lsls	r2, r3, #28
 800b134:	bf04      	itt	eq
 800b136:	091b      	lsreq	r3, r3, #4
 800b138:	3004      	addeq	r0, #4
 800b13a:	079a      	lsls	r2, r3, #30
 800b13c:	bf04      	itt	eq
 800b13e:	089b      	lsreq	r3, r3, #2
 800b140:	3002      	addeq	r0, #2
 800b142:	07da      	lsls	r2, r3, #31
 800b144:	d402      	bmi.n	800b14c <__lo0bits+0x4e>
 800b146:	085b      	lsrs	r3, r3, #1
 800b148:	d006      	beq.n	800b158 <__lo0bits+0x5a>
 800b14a:	3001      	adds	r0, #1
 800b14c:	600b      	str	r3, [r1, #0]
 800b14e:	4770      	bx	lr
 800b150:	4610      	mov	r0, r2
 800b152:	e7e9      	b.n	800b128 <__lo0bits+0x2a>
 800b154:	2000      	movs	r0, #0
 800b156:	4770      	bx	lr
 800b158:	2020      	movs	r0, #32
 800b15a:	4770      	bx	lr

0800b15c <__i2b>:
 800b15c:	b510      	push	{r4, lr}
 800b15e:	460c      	mov	r4, r1
 800b160:	2101      	movs	r1, #1
 800b162:	f7ff ff27 	bl	800afb4 <_Balloc>
 800b166:	2201      	movs	r2, #1
 800b168:	6144      	str	r4, [r0, #20]
 800b16a:	6102      	str	r2, [r0, #16]
 800b16c:	bd10      	pop	{r4, pc}

0800b16e <__multiply>:
 800b16e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b172:	4614      	mov	r4, r2
 800b174:	690a      	ldr	r2, [r1, #16]
 800b176:	6923      	ldr	r3, [r4, #16]
 800b178:	429a      	cmp	r2, r3
 800b17a:	bfb8      	it	lt
 800b17c:	460b      	movlt	r3, r1
 800b17e:	4688      	mov	r8, r1
 800b180:	bfbc      	itt	lt
 800b182:	46a0      	movlt	r8, r4
 800b184:	461c      	movlt	r4, r3
 800b186:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b18a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b18e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b192:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b196:	eb07 0609 	add.w	r6, r7, r9
 800b19a:	42b3      	cmp	r3, r6
 800b19c:	bfb8      	it	lt
 800b19e:	3101      	addlt	r1, #1
 800b1a0:	f7ff ff08 	bl	800afb4 <_Balloc>
 800b1a4:	f100 0514 	add.w	r5, r0, #20
 800b1a8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	4573      	cmp	r3, lr
 800b1b2:	d316      	bcc.n	800b1e2 <__multiply+0x74>
 800b1b4:	f104 0214 	add.w	r2, r4, #20
 800b1b8:	f108 0114 	add.w	r1, r8, #20
 800b1bc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b1c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	9201      	str	r2, [sp, #4]
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d80c      	bhi.n	800b1e8 <__multiply+0x7a>
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	dd03      	ble.n	800b1da <__multiply+0x6c>
 800b1d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d05d      	beq.n	800b296 <__multiply+0x128>
 800b1da:	6106      	str	r6, [r0, #16]
 800b1dc:	b003      	add	sp, #12
 800b1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e2:	f843 2b04 	str.w	r2, [r3], #4
 800b1e6:	e7e3      	b.n	800b1b0 <__multiply+0x42>
 800b1e8:	f8b2 b000 	ldrh.w	fp, [r2]
 800b1ec:	f1bb 0f00 	cmp.w	fp, #0
 800b1f0:	d023      	beq.n	800b23a <__multiply+0xcc>
 800b1f2:	4689      	mov	r9, r1
 800b1f4:	46ac      	mov	ip, r5
 800b1f6:	f04f 0800 	mov.w	r8, #0
 800b1fa:	f859 4b04 	ldr.w	r4, [r9], #4
 800b1fe:	f8dc a000 	ldr.w	sl, [ip]
 800b202:	b2a3      	uxth	r3, r4
 800b204:	fa1f fa8a 	uxth.w	sl, sl
 800b208:	fb0b a303 	mla	r3, fp, r3, sl
 800b20c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b210:	f8dc 4000 	ldr.w	r4, [ip]
 800b214:	4443      	add	r3, r8
 800b216:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b21a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b21e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b222:	46e2      	mov	sl, ip
 800b224:	b29b      	uxth	r3, r3
 800b226:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b22a:	454f      	cmp	r7, r9
 800b22c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b230:	f84a 3b04 	str.w	r3, [sl], #4
 800b234:	d82b      	bhi.n	800b28e <__multiply+0x120>
 800b236:	f8cc 8004 	str.w	r8, [ip, #4]
 800b23a:	9b01      	ldr	r3, [sp, #4]
 800b23c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b240:	3204      	adds	r2, #4
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	d020      	beq.n	800b28a <__multiply+0x11c>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	4689      	mov	r9, r1
 800b24c:	46a8      	mov	r8, r5
 800b24e:	f04f 0b00 	mov.w	fp, #0
 800b252:	f8b9 c000 	ldrh.w	ip, [r9]
 800b256:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b25a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b25e:	445c      	add	r4, fp
 800b260:	46c4      	mov	ip, r8
 800b262:	b29b      	uxth	r3, r3
 800b264:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b268:	f84c 3b04 	str.w	r3, [ip], #4
 800b26c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b270:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b274:	0c1b      	lsrs	r3, r3, #16
 800b276:	fb0a b303 	mla	r3, sl, r3, fp
 800b27a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b27e:	454f      	cmp	r7, r9
 800b280:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b284:	d805      	bhi.n	800b292 <__multiply+0x124>
 800b286:	f8c8 3004 	str.w	r3, [r8, #4]
 800b28a:	3504      	adds	r5, #4
 800b28c:	e79b      	b.n	800b1c6 <__multiply+0x58>
 800b28e:	46d4      	mov	ip, sl
 800b290:	e7b3      	b.n	800b1fa <__multiply+0x8c>
 800b292:	46e0      	mov	r8, ip
 800b294:	e7dd      	b.n	800b252 <__multiply+0xe4>
 800b296:	3e01      	subs	r6, #1
 800b298:	e799      	b.n	800b1ce <__multiply+0x60>
	...

0800b29c <__pow5mult>:
 800b29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a0:	4615      	mov	r5, r2
 800b2a2:	f012 0203 	ands.w	r2, r2, #3
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460f      	mov	r7, r1
 800b2aa:	d007      	beq.n	800b2bc <__pow5mult+0x20>
 800b2ac:	3a01      	subs	r2, #1
 800b2ae:	4c21      	ldr	r4, [pc, #132]	; (800b334 <__pow5mult+0x98>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2b6:	f7ff fec8 	bl	800b04a <__multadd>
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	10ad      	asrs	r5, r5, #2
 800b2be:	d035      	beq.n	800b32c <__pow5mult+0x90>
 800b2c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2c2:	b93c      	cbnz	r4, 800b2d4 <__pow5mult+0x38>
 800b2c4:	2010      	movs	r0, #16
 800b2c6:	f7fd ff1f 	bl	8009108 <malloc>
 800b2ca:	6270      	str	r0, [r6, #36]	; 0x24
 800b2cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d0:	6004      	str	r4, [r0, #0]
 800b2d2:	60c4      	str	r4, [r0, #12]
 800b2d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2dc:	b94c      	cbnz	r4, 800b2f2 <__pow5mult+0x56>
 800b2de:	f240 2171 	movw	r1, #625	; 0x271
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff3a 	bl	800b15c <__i2b>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	6003      	str	r3, [r0, #0]
 800b2f2:	f04f 0800 	mov.w	r8, #0
 800b2f6:	07eb      	lsls	r3, r5, #31
 800b2f8:	d50a      	bpl.n	800b310 <__pow5mult+0x74>
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4630      	mov	r0, r6
 800b300:	f7ff ff35 	bl	800b16e <__multiply>
 800b304:	4639      	mov	r1, r7
 800b306:	4681      	mov	r9, r0
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff fe87 	bl	800b01c <_Bfree>
 800b30e:	464f      	mov	r7, r9
 800b310:	106d      	asrs	r5, r5, #1
 800b312:	d00b      	beq.n	800b32c <__pow5mult+0x90>
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	b938      	cbnz	r0, 800b328 <__pow5mult+0x8c>
 800b318:	4622      	mov	r2, r4
 800b31a:	4621      	mov	r1, r4
 800b31c:	4630      	mov	r0, r6
 800b31e:	f7ff ff26 	bl	800b16e <__multiply>
 800b322:	6020      	str	r0, [r4, #0]
 800b324:	f8c0 8000 	str.w	r8, [r0]
 800b328:	4604      	mov	r4, r0
 800b32a:	e7e4      	b.n	800b2f6 <__pow5mult+0x5a>
 800b32c:	4638      	mov	r0, r7
 800b32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b332:	bf00      	nop
 800b334:	0800bbb8 	.word	0x0800bbb8

0800b338 <__lshift>:
 800b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	460c      	mov	r4, r1
 800b33e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	6849      	ldr	r1, [r1, #4]
 800b346:	eb0a 0903 	add.w	r9, sl, r3
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	4607      	mov	r7, r0
 800b34e:	4616      	mov	r6, r2
 800b350:	f109 0501 	add.w	r5, r9, #1
 800b354:	42ab      	cmp	r3, r5
 800b356:	db32      	blt.n	800b3be <__lshift+0x86>
 800b358:	4638      	mov	r0, r7
 800b35a:	f7ff fe2b 	bl	800afb4 <_Balloc>
 800b35e:	2300      	movs	r3, #0
 800b360:	4680      	mov	r8, r0
 800b362:	f100 0114 	add.w	r1, r0, #20
 800b366:	461a      	mov	r2, r3
 800b368:	4553      	cmp	r3, sl
 800b36a:	db2b      	blt.n	800b3c4 <__lshift+0x8c>
 800b36c:	6920      	ldr	r0, [r4, #16]
 800b36e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b372:	f104 0314 	add.w	r3, r4, #20
 800b376:	f016 021f 	ands.w	r2, r6, #31
 800b37a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b37e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b382:	d025      	beq.n	800b3d0 <__lshift+0x98>
 800b384:	f1c2 0e20 	rsb	lr, r2, #32
 800b388:	2000      	movs	r0, #0
 800b38a:	681e      	ldr	r6, [r3, #0]
 800b38c:	468a      	mov	sl, r1
 800b38e:	4096      	lsls	r6, r2
 800b390:	4330      	orrs	r0, r6
 800b392:	f84a 0b04 	str.w	r0, [sl], #4
 800b396:	f853 0b04 	ldr.w	r0, [r3], #4
 800b39a:	459c      	cmp	ip, r3
 800b39c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b3a0:	d814      	bhi.n	800b3cc <__lshift+0x94>
 800b3a2:	6048      	str	r0, [r1, #4]
 800b3a4:	b108      	cbz	r0, 800b3aa <__lshift+0x72>
 800b3a6:	f109 0502 	add.w	r5, r9, #2
 800b3aa:	3d01      	subs	r5, #1
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	f7ff fe32 	bl	800b01c <_Bfree>
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3be:	3101      	adds	r1, #1
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	e7c7      	b.n	800b354 <__lshift+0x1c>
 800b3c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	e7cd      	b.n	800b368 <__lshift+0x30>
 800b3cc:	4651      	mov	r1, sl
 800b3ce:	e7dc      	b.n	800b38a <__lshift+0x52>
 800b3d0:	3904      	subs	r1, #4
 800b3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3da:	459c      	cmp	ip, r3
 800b3dc:	d8f9      	bhi.n	800b3d2 <__lshift+0x9a>
 800b3de:	e7e4      	b.n	800b3aa <__lshift+0x72>

0800b3e0 <__mcmp>:
 800b3e0:	6903      	ldr	r3, [r0, #16]
 800b3e2:	690a      	ldr	r2, [r1, #16]
 800b3e4:	1a9b      	subs	r3, r3, r2
 800b3e6:	b530      	push	{r4, r5, lr}
 800b3e8:	d10c      	bne.n	800b404 <__mcmp+0x24>
 800b3ea:	0092      	lsls	r2, r2, #2
 800b3ec:	3014      	adds	r0, #20
 800b3ee:	3114      	adds	r1, #20
 800b3f0:	1884      	adds	r4, r0, r2
 800b3f2:	4411      	add	r1, r2
 800b3f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3fc:	4295      	cmp	r5, r2
 800b3fe:	d003      	beq.n	800b408 <__mcmp+0x28>
 800b400:	d305      	bcc.n	800b40e <__mcmp+0x2e>
 800b402:	2301      	movs	r3, #1
 800b404:	4618      	mov	r0, r3
 800b406:	bd30      	pop	{r4, r5, pc}
 800b408:	42a0      	cmp	r0, r4
 800b40a:	d3f3      	bcc.n	800b3f4 <__mcmp+0x14>
 800b40c:	e7fa      	b.n	800b404 <__mcmp+0x24>
 800b40e:	f04f 33ff 	mov.w	r3, #4294967295
 800b412:	e7f7      	b.n	800b404 <__mcmp+0x24>

0800b414 <__mdiff>:
 800b414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b418:	460d      	mov	r5, r1
 800b41a:	4607      	mov	r7, r0
 800b41c:	4611      	mov	r1, r2
 800b41e:	4628      	mov	r0, r5
 800b420:	4614      	mov	r4, r2
 800b422:	f7ff ffdd 	bl	800b3e0 <__mcmp>
 800b426:	1e06      	subs	r6, r0, #0
 800b428:	d108      	bne.n	800b43c <__mdiff+0x28>
 800b42a:	4631      	mov	r1, r6
 800b42c:	4638      	mov	r0, r7
 800b42e:	f7ff fdc1 	bl	800afb4 <_Balloc>
 800b432:	2301      	movs	r3, #1
 800b434:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43c:	bfa4      	itt	ge
 800b43e:	4623      	movge	r3, r4
 800b440:	462c      	movge	r4, r5
 800b442:	4638      	mov	r0, r7
 800b444:	6861      	ldr	r1, [r4, #4]
 800b446:	bfa6      	itte	ge
 800b448:	461d      	movge	r5, r3
 800b44a:	2600      	movge	r6, #0
 800b44c:	2601      	movlt	r6, #1
 800b44e:	f7ff fdb1 	bl	800afb4 <_Balloc>
 800b452:	692b      	ldr	r3, [r5, #16]
 800b454:	60c6      	str	r6, [r0, #12]
 800b456:	6926      	ldr	r6, [r4, #16]
 800b458:	f105 0914 	add.w	r9, r5, #20
 800b45c:	f104 0214 	add.w	r2, r4, #20
 800b460:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b464:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b468:	f100 0514 	add.w	r5, r0, #20
 800b46c:	f04f 0e00 	mov.w	lr, #0
 800b470:	f852 ab04 	ldr.w	sl, [r2], #4
 800b474:	f859 4b04 	ldr.w	r4, [r9], #4
 800b478:	fa1e f18a 	uxtah	r1, lr, sl
 800b47c:	b2a3      	uxth	r3, r4
 800b47e:	1ac9      	subs	r1, r1, r3
 800b480:	0c23      	lsrs	r3, r4, #16
 800b482:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b486:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b48a:	b289      	uxth	r1, r1
 800b48c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b490:	45c8      	cmp	r8, r9
 800b492:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b496:	4694      	mov	ip, r2
 800b498:	f845 3b04 	str.w	r3, [r5], #4
 800b49c:	d8e8      	bhi.n	800b470 <__mdiff+0x5c>
 800b49e:	45bc      	cmp	ip, r7
 800b4a0:	d304      	bcc.n	800b4ac <__mdiff+0x98>
 800b4a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b4a6:	b183      	cbz	r3, 800b4ca <__mdiff+0xb6>
 800b4a8:	6106      	str	r6, [r0, #16]
 800b4aa:	e7c5      	b.n	800b438 <__mdiff+0x24>
 800b4ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b4b0:	fa1e f381 	uxtah	r3, lr, r1
 800b4b4:	141a      	asrs	r2, r3, #16
 800b4b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b4c4:	f845 3b04 	str.w	r3, [r5], #4
 800b4c8:	e7e9      	b.n	800b49e <__mdiff+0x8a>
 800b4ca:	3e01      	subs	r6, #1
 800b4cc:	e7e9      	b.n	800b4a2 <__mdiff+0x8e>

0800b4ce <__d2b>:
 800b4ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4d2:	460e      	mov	r6, r1
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	ec59 8b10 	vmov	r8, r9, d0
 800b4da:	4615      	mov	r5, r2
 800b4dc:	f7ff fd6a 	bl	800afb4 <_Balloc>
 800b4e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b4e4:	4607      	mov	r7, r0
 800b4e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4ea:	bb34      	cbnz	r4, 800b53a <__d2b+0x6c>
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	f1b8 0300 	subs.w	r3, r8, #0
 800b4f2:	d027      	beq.n	800b544 <__d2b+0x76>
 800b4f4:	a802      	add	r0, sp, #8
 800b4f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b4fa:	f7ff fe00 	bl	800b0fe <__lo0bits>
 800b4fe:	9900      	ldr	r1, [sp, #0]
 800b500:	b1f0      	cbz	r0, 800b540 <__d2b+0x72>
 800b502:	9a01      	ldr	r2, [sp, #4]
 800b504:	f1c0 0320 	rsb	r3, r0, #32
 800b508:	fa02 f303 	lsl.w	r3, r2, r3
 800b50c:	430b      	orrs	r3, r1
 800b50e:	40c2      	lsrs	r2, r0
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	9201      	str	r2, [sp, #4]
 800b514:	9b01      	ldr	r3, [sp, #4]
 800b516:	61bb      	str	r3, [r7, #24]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bf14      	ite	ne
 800b51c:	2102      	movne	r1, #2
 800b51e:	2101      	moveq	r1, #1
 800b520:	6139      	str	r1, [r7, #16]
 800b522:	b1c4      	cbz	r4, 800b556 <__d2b+0x88>
 800b524:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b528:	4404      	add	r4, r0
 800b52a:	6034      	str	r4, [r6, #0]
 800b52c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b530:	6028      	str	r0, [r5, #0]
 800b532:	4638      	mov	r0, r7
 800b534:	b003      	add	sp, #12
 800b536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b53e:	e7d5      	b.n	800b4ec <__d2b+0x1e>
 800b540:	6179      	str	r1, [r7, #20]
 800b542:	e7e7      	b.n	800b514 <__d2b+0x46>
 800b544:	a801      	add	r0, sp, #4
 800b546:	f7ff fdda 	bl	800b0fe <__lo0bits>
 800b54a:	9b01      	ldr	r3, [sp, #4]
 800b54c:	617b      	str	r3, [r7, #20]
 800b54e:	2101      	movs	r1, #1
 800b550:	6139      	str	r1, [r7, #16]
 800b552:	3020      	adds	r0, #32
 800b554:	e7e5      	b.n	800b522 <__d2b+0x54>
 800b556:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b55a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b55e:	6030      	str	r0, [r6, #0]
 800b560:	6918      	ldr	r0, [r3, #16]
 800b562:	f7ff fdad 	bl	800b0c0 <__hi0bits>
 800b566:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b56a:	e7e1      	b.n	800b530 <__d2b+0x62>

0800b56c <_calloc_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	fb02 f401 	mul.w	r4, r2, r1
 800b572:	4621      	mov	r1, r4
 800b574:	f7fd fe3a 	bl	80091ec <_malloc_r>
 800b578:	4605      	mov	r5, r0
 800b57a:	b118      	cbz	r0, 800b584 <_calloc_r+0x18>
 800b57c:	4622      	mov	r2, r4
 800b57e:	2100      	movs	r1, #0
 800b580:	f7fd fddd 	bl	800913e <memset>
 800b584:	4628      	mov	r0, r5
 800b586:	bd38      	pop	{r3, r4, r5, pc}

0800b588 <__sfputc_r>:
 800b588:	6893      	ldr	r3, [r2, #8]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	b410      	push	{r4}
 800b590:	6093      	str	r3, [r2, #8]
 800b592:	da08      	bge.n	800b5a6 <__sfputc_r+0x1e>
 800b594:	6994      	ldr	r4, [r2, #24]
 800b596:	42a3      	cmp	r3, r4
 800b598:	db01      	blt.n	800b59e <__sfputc_r+0x16>
 800b59a:	290a      	cmp	r1, #10
 800b59c:	d103      	bne.n	800b5a6 <__sfputc_r+0x1e>
 800b59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5a2:	f7fe bc13 	b.w	8009dcc <__swbuf_r>
 800b5a6:	6813      	ldr	r3, [r2, #0]
 800b5a8:	1c58      	adds	r0, r3, #1
 800b5aa:	6010      	str	r0, [r2, #0]
 800b5ac:	7019      	strb	r1, [r3, #0]
 800b5ae:	4608      	mov	r0, r1
 800b5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <__sfputs_r>:
 800b5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	460f      	mov	r7, r1
 800b5bc:	4614      	mov	r4, r2
 800b5be:	18d5      	adds	r5, r2, r3
 800b5c0:	42ac      	cmp	r4, r5
 800b5c2:	d101      	bne.n	800b5c8 <__sfputs_r+0x12>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	e007      	b.n	800b5d8 <__sfputs_r+0x22>
 800b5c8:	463a      	mov	r2, r7
 800b5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7ff ffda 	bl	800b588 <__sfputc_r>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d1f3      	bne.n	800b5c0 <__sfputs_r+0xa>
 800b5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5dc <_vfiprintf_r>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	b09d      	sub	sp, #116	; 0x74
 800b5e4:	4617      	mov	r7, r2
 800b5e6:	461d      	mov	r5, r3
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	b118      	cbz	r0, 800b5f4 <_vfiprintf_r+0x18>
 800b5ec:	6983      	ldr	r3, [r0, #24]
 800b5ee:	b90b      	cbnz	r3, 800b5f4 <_vfiprintf_r+0x18>
 800b5f0:	f7ff fbe2 	bl	800adb8 <__sinit>
 800b5f4:	4b7c      	ldr	r3, [pc, #496]	; (800b7e8 <_vfiprintf_r+0x20c>)
 800b5f6:	429c      	cmp	r4, r3
 800b5f8:	d158      	bne.n	800b6ac <_vfiprintf_r+0xd0>
 800b5fa:	6874      	ldr	r4, [r6, #4]
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	0718      	lsls	r0, r3, #28
 800b600:	d55e      	bpl.n	800b6c0 <_vfiprintf_r+0xe4>
 800b602:	6923      	ldr	r3, [r4, #16]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d05b      	beq.n	800b6c0 <_vfiprintf_r+0xe4>
 800b608:	2300      	movs	r3, #0
 800b60a:	9309      	str	r3, [sp, #36]	; 0x24
 800b60c:	2320      	movs	r3, #32
 800b60e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b612:	2330      	movs	r3, #48	; 0x30
 800b614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b618:	9503      	str	r5, [sp, #12]
 800b61a:	f04f 0b01 	mov.w	fp, #1
 800b61e:	46b8      	mov	r8, r7
 800b620:	4645      	mov	r5, r8
 800b622:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b626:	b10b      	cbz	r3, 800b62c <_vfiprintf_r+0x50>
 800b628:	2b25      	cmp	r3, #37	; 0x25
 800b62a:	d154      	bne.n	800b6d6 <_vfiprintf_r+0xfa>
 800b62c:	ebb8 0a07 	subs.w	sl, r8, r7
 800b630:	d00b      	beq.n	800b64a <_vfiprintf_r+0x6e>
 800b632:	4653      	mov	r3, sl
 800b634:	463a      	mov	r2, r7
 800b636:	4621      	mov	r1, r4
 800b638:	4630      	mov	r0, r6
 800b63a:	f7ff ffbc 	bl	800b5b6 <__sfputs_r>
 800b63e:	3001      	adds	r0, #1
 800b640:	f000 80c2 	beq.w	800b7c8 <_vfiprintf_r+0x1ec>
 800b644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b646:	4453      	add	r3, sl
 800b648:	9309      	str	r3, [sp, #36]	; 0x24
 800b64a:	f898 3000 	ldrb.w	r3, [r8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 80ba 	beq.w	800b7c8 <_vfiprintf_r+0x1ec>
 800b654:	2300      	movs	r3, #0
 800b656:	f04f 32ff 	mov.w	r2, #4294967295
 800b65a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b65e:	9304      	str	r3, [sp, #16]
 800b660:	9307      	str	r3, [sp, #28]
 800b662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b666:	931a      	str	r3, [sp, #104]	; 0x68
 800b668:	46a8      	mov	r8, r5
 800b66a:	2205      	movs	r2, #5
 800b66c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b670:	485e      	ldr	r0, [pc, #376]	; (800b7ec <_vfiprintf_r+0x210>)
 800b672:	f7f4 fdc5 	bl	8000200 <memchr>
 800b676:	9b04      	ldr	r3, [sp, #16]
 800b678:	bb78      	cbnz	r0, 800b6da <_vfiprintf_r+0xfe>
 800b67a:	06d9      	lsls	r1, r3, #27
 800b67c:	bf44      	itt	mi
 800b67e:	2220      	movmi	r2, #32
 800b680:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b684:	071a      	lsls	r2, r3, #28
 800b686:	bf44      	itt	mi
 800b688:	222b      	movmi	r2, #43	; 0x2b
 800b68a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b68e:	782a      	ldrb	r2, [r5, #0]
 800b690:	2a2a      	cmp	r2, #42	; 0x2a
 800b692:	d02a      	beq.n	800b6ea <_vfiprintf_r+0x10e>
 800b694:	9a07      	ldr	r2, [sp, #28]
 800b696:	46a8      	mov	r8, r5
 800b698:	2000      	movs	r0, #0
 800b69a:	250a      	movs	r5, #10
 800b69c:	4641      	mov	r1, r8
 800b69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6a2:	3b30      	subs	r3, #48	; 0x30
 800b6a4:	2b09      	cmp	r3, #9
 800b6a6:	d969      	bls.n	800b77c <_vfiprintf_r+0x1a0>
 800b6a8:	b360      	cbz	r0, 800b704 <_vfiprintf_r+0x128>
 800b6aa:	e024      	b.n	800b6f6 <_vfiprintf_r+0x11a>
 800b6ac:	4b50      	ldr	r3, [pc, #320]	; (800b7f0 <_vfiprintf_r+0x214>)
 800b6ae:	429c      	cmp	r4, r3
 800b6b0:	d101      	bne.n	800b6b6 <_vfiprintf_r+0xda>
 800b6b2:	68b4      	ldr	r4, [r6, #8]
 800b6b4:	e7a2      	b.n	800b5fc <_vfiprintf_r+0x20>
 800b6b6:	4b4f      	ldr	r3, [pc, #316]	; (800b7f4 <_vfiprintf_r+0x218>)
 800b6b8:	429c      	cmp	r4, r3
 800b6ba:	bf08      	it	eq
 800b6bc:	68f4      	ldreq	r4, [r6, #12]
 800b6be:	e79d      	b.n	800b5fc <_vfiprintf_r+0x20>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f7fe fbd4 	bl	8009e70 <__swsetup_r>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d09d      	beq.n	800b608 <_vfiprintf_r+0x2c>
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	b01d      	add	sp, #116	; 0x74
 800b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	46a8      	mov	r8, r5
 800b6d8:	e7a2      	b.n	800b620 <_vfiprintf_r+0x44>
 800b6da:	4a44      	ldr	r2, [pc, #272]	; (800b7ec <_vfiprintf_r+0x210>)
 800b6dc:	1a80      	subs	r0, r0, r2
 800b6de:	fa0b f000 	lsl.w	r0, fp, r0
 800b6e2:	4318      	orrs	r0, r3
 800b6e4:	9004      	str	r0, [sp, #16]
 800b6e6:	4645      	mov	r5, r8
 800b6e8:	e7be      	b.n	800b668 <_vfiprintf_r+0x8c>
 800b6ea:	9a03      	ldr	r2, [sp, #12]
 800b6ec:	1d11      	adds	r1, r2, #4
 800b6ee:	6812      	ldr	r2, [r2, #0]
 800b6f0:	9103      	str	r1, [sp, #12]
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	db01      	blt.n	800b6fa <_vfiprintf_r+0x11e>
 800b6f6:	9207      	str	r2, [sp, #28]
 800b6f8:	e004      	b.n	800b704 <_vfiprintf_r+0x128>
 800b6fa:	4252      	negs	r2, r2
 800b6fc:	f043 0302 	orr.w	r3, r3, #2
 800b700:	9207      	str	r2, [sp, #28]
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	f898 3000 	ldrb.w	r3, [r8]
 800b708:	2b2e      	cmp	r3, #46	; 0x2e
 800b70a:	d10e      	bne.n	800b72a <_vfiprintf_r+0x14e>
 800b70c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b710:	2b2a      	cmp	r3, #42	; 0x2a
 800b712:	d138      	bne.n	800b786 <_vfiprintf_r+0x1aa>
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	9203      	str	r2, [sp, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfb8      	it	lt
 800b720:	f04f 33ff 	movlt.w	r3, #4294967295
 800b724:	f108 0802 	add.w	r8, r8, #2
 800b728:	9305      	str	r3, [sp, #20]
 800b72a:	4d33      	ldr	r5, [pc, #204]	; (800b7f8 <_vfiprintf_r+0x21c>)
 800b72c:	f898 1000 	ldrb.w	r1, [r8]
 800b730:	2203      	movs	r2, #3
 800b732:	4628      	mov	r0, r5
 800b734:	f7f4 fd64 	bl	8000200 <memchr>
 800b738:	b140      	cbz	r0, 800b74c <_vfiprintf_r+0x170>
 800b73a:	2340      	movs	r3, #64	; 0x40
 800b73c:	1b40      	subs	r0, r0, r5
 800b73e:	fa03 f000 	lsl.w	r0, r3, r0
 800b742:	9b04      	ldr	r3, [sp, #16]
 800b744:	4303      	orrs	r3, r0
 800b746:	f108 0801 	add.w	r8, r8, #1
 800b74a:	9304      	str	r3, [sp, #16]
 800b74c:	f898 1000 	ldrb.w	r1, [r8]
 800b750:	482a      	ldr	r0, [pc, #168]	; (800b7fc <_vfiprintf_r+0x220>)
 800b752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b756:	2206      	movs	r2, #6
 800b758:	f108 0701 	add.w	r7, r8, #1
 800b75c:	f7f4 fd50 	bl	8000200 <memchr>
 800b760:	2800      	cmp	r0, #0
 800b762:	d037      	beq.n	800b7d4 <_vfiprintf_r+0x1f8>
 800b764:	4b26      	ldr	r3, [pc, #152]	; (800b800 <_vfiprintf_r+0x224>)
 800b766:	bb1b      	cbnz	r3, 800b7b0 <_vfiprintf_r+0x1d4>
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	3307      	adds	r3, #7
 800b76c:	f023 0307 	bic.w	r3, r3, #7
 800b770:	3308      	adds	r3, #8
 800b772:	9303      	str	r3, [sp, #12]
 800b774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b776:	444b      	add	r3, r9
 800b778:	9309      	str	r3, [sp, #36]	; 0x24
 800b77a:	e750      	b.n	800b61e <_vfiprintf_r+0x42>
 800b77c:	fb05 3202 	mla	r2, r5, r2, r3
 800b780:	2001      	movs	r0, #1
 800b782:	4688      	mov	r8, r1
 800b784:	e78a      	b.n	800b69c <_vfiprintf_r+0xc0>
 800b786:	2300      	movs	r3, #0
 800b788:	f108 0801 	add.w	r8, r8, #1
 800b78c:	9305      	str	r3, [sp, #20]
 800b78e:	4619      	mov	r1, r3
 800b790:	250a      	movs	r5, #10
 800b792:	4640      	mov	r0, r8
 800b794:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b798:	3a30      	subs	r2, #48	; 0x30
 800b79a:	2a09      	cmp	r2, #9
 800b79c:	d903      	bls.n	800b7a6 <_vfiprintf_r+0x1ca>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d0c3      	beq.n	800b72a <_vfiprintf_r+0x14e>
 800b7a2:	9105      	str	r1, [sp, #20]
 800b7a4:	e7c1      	b.n	800b72a <_vfiprintf_r+0x14e>
 800b7a6:	fb05 2101 	mla	r1, r5, r1, r2
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	e7f0      	b.n	800b792 <_vfiprintf_r+0x1b6>
 800b7b0:	ab03      	add	r3, sp, #12
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4b13      	ldr	r3, [pc, #76]	; (800b804 <_vfiprintf_r+0x228>)
 800b7b8:	a904      	add	r1, sp, #16
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f7fd fe04 	bl	80093c8 <_printf_float>
 800b7c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7c4:	4681      	mov	r9, r0
 800b7c6:	d1d5      	bne.n	800b774 <_vfiprintf_r+0x198>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	065b      	lsls	r3, r3, #25
 800b7cc:	f53f af7e 	bmi.w	800b6cc <_vfiprintf_r+0xf0>
 800b7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7d2:	e77d      	b.n	800b6d0 <_vfiprintf_r+0xf4>
 800b7d4:	ab03      	add	r3, sp, #12
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <_vfiprintf_r+0x228>)
 800b7dc:	a904      	add	r1, sp, #16
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7fe f8a8 	bl	8009934 <_printf_i>
 800b7e4:	e7ec      	b.n	800b7c0 <_vfiprintf_r+0x1e4>
 800b7e6:	bf00      	nop
 800b7e8:	0800ba84 	.word	0x0800ba84
 800b7ec:	0800bbc4 	.word	0x0800bbc4
 800b7f0:	0800baa4 	.word	0x0800baa4
 800b7f4:	0800ba64 	.word	0x0800ba64
 800b7f8:	0800bbca 	.word	0x0800bbca
 800b7fc:	0800bbce 	.word	0x0800bbce
 800b800:	080093c9 	.word	0x080093c9
 800b804:	0800b5b7 	.word	0x0800b5b7

0800b808 <__sread>:
 800b808:	b510      	push	{r4, lr}
 800b80a:	460c      	mov	r4, r1
 800b80c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b810:	f000 f8a6 	bl	800b960 <_read_r>
 800b814:	2800      	cmp	r0, #0
 800b816:	bfab      	itete	ge
 800b818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b81a:	89a3      	ldrhlt	r3, [r4, #12]
 800b81c:	181b      	addge	r3, r3, r0
 800b81e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b822:	bfac      	ite	ge
 800b824:	6563      	strge	r3, [r4, #84]	; 0x54
 800b826:	81a3      	strhlt	r3, [r4, #12]
 800b828:	bd10      	pop	{r4, pc}

0800b82a <__swrite>:
 800b82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82e:	461f      	mov	r7, r3
 800b830:	898b      	ldrh	r3, [r1, #12]
 800b832:	05db      	lsls	r3, r3, #23
 800b834:	4605      	mov	r5, r0
 800b836:	460c      	mov	r4, r1
 800b838:	4616      	mov	r6, r2
 800b83a:	d505      	bpl.n	800b848 <__swrite+0x1e>
 800b83c:	2302      	movs	r3, #2
 800b83e:	2200      	movs	r2, #0
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	f000 f868 	bl	800b918 <_lseek_r>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b84e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	4632      	mov	r2, r6
 800b856:	463b      	mov	r3, r7
 800b858:	4628      	mov	r0, r5
 800b85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b85e:	f000 b817 	b.w	800b890 <_write_r>

0800b862 <__sseek>:
 800b862:	b510      	push	{r4, lr}
 800b864:	460c      	mov	r4, r1
 800b866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b86a:	f000 f855 	bl	800b918 <_lseek_r>
 800b86e:	1c43      	adds	r3, r0, #1
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	bf15      	itete	ne
 800b874:	6560      	strne	r0, [r4, #84]	; 0x54
 800b876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b87a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b87e:	81a3      	strheq	r3, [r4, #12]
 800b880:	bf18      	it	ne
 800b882:	81a3      	strhne	r3, [r4, #12]
 800b884:	bd10      	pop	{r4, pc}

0800b886 <__sclose>:
 800b886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88a:	f000 b813 	b.w	800b8b4 <_close_r>
	...

0800b890 <_write_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4c07      	ldr	r4, [pc, #28]	; (800b8b0 <_write_r+0x20>)
 800b894:	4605      	mov	r5, r0
 800b896:	4608      	mov	r0, r1
 800b898:	4611      	mov	r1, r2
 800b89a:	2200      	movs	r2, #0
 800b89c:	6022      	str	r2, [r4, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f7f6 fc16 	bl	80020d0 <_write>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_write_r+0x1e>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_write_r+0x1e>
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	200008dc 	.word	0x200008dc

0800b8b4 <_close_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4c06      	ldr	r4, [pc, #24]	; (800b8d0 <_close_r+0x1c>)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	4608      	mov	r0, r1
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	f7f6 fd5d 	bl	800237e <_close>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_close_r+0x1a>
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_close_r+0x1a>
 800b8cc:	602b      	str	r3, [r5, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	200008dc 	.word	0x200008dc

0800b8d4 <_fstat_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4c07      	ldr	r4, [pc, #28]	; (800b8f4 <_fstat_r+0x20>)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4605      	mov	r5, r0
 800b8dc:	4608      	mov	r0, r1
 800b8de:	4611      	mov	r1, r2
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	f7f6 fd58 	bl	8002396 <_fstat>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d102      	bne.n	800b8f0 <_fstat_r+0x1c>
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	b103      	cbz	r3, 800b8f0 <_fstat_r+0x1c>
 800b8ee:	602b      	str	r3, [r5, #0]
 800b8f0:	bd38      	pop	{r3, r4, r5, pc}
 800b8f2:	bf00      	nop
 800b8f4:	200008dc 	.word	0x200008dc

0800b8f8 <_isatty_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4c06      	ldr	r4, [pc, #24]	; (800b914 <_isatty_r+0x1c>)
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4605      	mov	r5, r0
 800b900:	4608      	mov	r0, r1
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	f7f6 fd57 	bl	80023b6 <_isatty>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_isatty_r+0x1a>
 800b90c:	6823      	ldr	r3, [r4, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_isatty_r+0x1a>
 800b910:	602b      	str	r3, [r5, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	200008dc 	.word	0x200008dc

0800b918 <_lseek_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4c07      	ldr	r4, [pc, #28]	; (800b938 <_lseek_r+0x20>)
 800b91c:	4605      	mov	r5, r0
 800b91e:	4608      	mov	r0, r1
 800b920:	4611      	mov	r1, r2
 800b922:	2200      	movs	r2, #0
 800b924:	6022      	str	r2, [r4, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	f7f6 fd50 	bl	80023cc <_lseek>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_lseek_r+0x1e>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	b103      	cbz	r3, 800b936 <_lseek_r+0x1e>
 800b934:	602b      	str	r3, [r5, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	200008dc 	.word	0x200008dc

0800b93c <__ascii_mbtowc>:
 800b93c:	b082      	sub	sp, #8
 800b93e:	b901      	cbnz	r1, 800b942 <__ascii_mbtowc+0x6>
 800b940:	a901      	add	r1, sp, #4
 800b942:	b142      	cbz	r2, 800b956 <__ascii_mbtowc+0x1a>
 800b944:	b14b      	cbz	r3, 800b95a <__ascii_mbtowc+0x1e>
 800b946:	7813      	ldrb	r3, [r2, #0]
 800b948:	600b      	str	r3, [r1, #0]
 800b94a:	7812      	ldrb	r2, [r2, #0]
 800b94c:	1c10      	adds	r0, r2, #0
 800b94e:	bf18      	it	ne
 800b950:	2001      	movne	r0, #1
 800b952:	b002      	add	sp, #8
 800b954:	4770      	bx	lr
 800b956:	4610      	mov	r0, r2
 800b958:	e7fb      	b.n	800b952 <__ascii_mbtowc+0x16>
 800b95a:	f06f 0001 	mvn.w	r0, #1
 800b95e:	e7f8      	b.n	800b952 <__ascii_mbtowc+0x16>

0800b960 <_read_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4c07      	ldr	r4, [pc, #28]	; (800b980 <_read_r+0x20>)
 800b964:	4605      	mov	r5, r0
 800b966:	4608      	mov	r0, r1
 800b968:	4611      	mov	r1, r2
 800b96a:	2200      	movs	r2, #0
 800b96c:	6022      	str	r2, [r4, #0]
 800b96e:	461a      	mov	r2, r3
 800b970:	f7f6 fce8 	bl	8002344 <_read>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_read_r+0x1e>
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_read_r+0x1e>
 800b97c:	602b      	str	r3, [r5, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	200008dc 	.word	0x200008dc

0800b984 <__ascii_wctomb>:
 800b984:	b149      	cbz	r1, 800b99a <__ascii_wctomb+0x16>
 800b986:	2aff      	cmp	r2, #255	; 0xff
 800b988:	bf85      	ittet	hi
 800b98a:	238a      	movhi	r3, #138	; 0x8a
 800b98c:	6003      	strhi	r3, [r0, #0]
 800b98e:	700a      	strbls	r2, [r1, #0]
 800b990:	f04f 30ff 	movhi.w	r0, #4294967295
 800b994:	bf98      	it	ls
 800b996:	2001      	movls	r0, #1
 800b998:	4770      	bx	lr
 800b99a:	4608      	mov	r0, r1
 800b99c:	4770      	bx	lr
	...

0800b9a0 <_init>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr

0800b9ac <_fini>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	bf00      	nop
 800b9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b2:	bc08      	pop	{r3}
 800b9b4:	469e      	mov	lr, r3
 800b9b6:	4770      	bx	lr
