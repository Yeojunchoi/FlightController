
CPPTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021c50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001068  08021e00  08021e00  00031e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022e68  08022e68  000402b0  2**0
                  CONTENTS
  4 .ARM          00000008  08022e68  08022e68  00032e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022e70  08022e70  000402b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08022e70  08022e70  00032e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022e80  08022e80  00032e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08022e84  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ef78  200002b0  08023134  000402b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000f228  08023134  0004f228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b1b9  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000093e7  00000000  00000000  0008b499  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002db8  00000000  00000000  00094880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000029e8  00000000  00000000  00097638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034bb1  00000000  00000000  0009a020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ea56  00000000  00000000  000cebd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104558  00000000  00000000  000fd627  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00201b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d70c  00000000  00000000  00201bfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021de8 	.word	0x08021de8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b4 	.word	0x200002b4
 80001ec:	08021de8 	.word	0x08021de8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d64:	f1a2 0201 	sub.w	r2, r2, #1
 8000d68:	d1ed      	bne.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_ldivmod>:
 8000ec4:	b97b      	cbnz	r3, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec6:	b972      	cbnz	r2, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bfbe      	ittt	lt
 8000ecc:	2000      	movlt	r0, #0
 8000ece:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ed2:	e006      	blt.n	8000ee2 <__aeabi_ldivmod+0x1e>
 8000ed4:	bf08      	it	eq
 8000ed6:	2800      	cmpeq	r0, #0
 8000ed8:	bf1c      	itt	ne
 8000eda:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ede:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee2:	f000 b9bd 	b.w	8001260 <__aeabi_idiv0>
 8000ee6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eee:	2900      	cmp	r1, #0
 8000ef0:	db09      	blt.n	8000f06 <__aeabi_ldivmod+0x42>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db1a      	blt.n	8000f2c <__aeabi_ldivmod+0x68>
 8000ef6:	f000 f84d 	bl	8000f94 <__udivmoddi4>
 8000efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f02:	b004      	add	sp, #16
 8000f04:	4770      	bx	lr
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db1b      	blt.n	8000f48 <__aeabi_ldivmod+0x84>
 8000f10:	f000 f840 	bl	8000f94 <__udivmoddi4>
 8000f14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1c:	b004      	add	sp, #16
 8000f1e:	4240      	negs	r0, r0
 8000f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f24:	4252      	negs	r2, r2
 8000f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2a:	4770      	bx	lr
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f32:	f000 f82f 	bl	8000f94 <__udivmoddi4>
 8000f36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3e:	b004      	add	sp, #16
 8000f40:	4240      	negs	r0, r0
 8000f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f46:	4770      	bx	lr
 8000f48:	4252      	negs	r2, r2
 8000f4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4e:	f000 f821 	bl	8000f94 <__udivmoddi4>
 8000f52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5a:	b004      	add	sp, #16
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_uldivmod>:
 8000f64:	b953      	cbnz	r3, 8000f7c <__aeabi_uldivmod+0x18>
 8000f66:	b94a      	cbnz	r2, 8000f7c <__aeabi_uldivmod+0x18>
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	bf08      	it	eq
 8000f6c:	2800      	cmpeq	r0, #0
 8000f6e:	bf1c      	itt	ne
 8000f70:	f04f 31ff 	movne.w	r1, #4294967295
 8000f74:	f04f 30ff 	movne.w	r0, #4294967295
 8000f78:	f000 b972 	b.w	8001260 <__aeabi_idiv0>
 8000f7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f84:	f000 f806 	bl	8000f94 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <__udivmoddi4>:
 8000f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	9e08      	ldr	r6, [sp, #32]
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4688      	mov	r8, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d14b      	bne.n	800103a <__udivmoddi4+0xa6>
 8000fa2:	428a      	cmp	r2, r1
 8000fa4:	4615      	mov	r5, r2
 8000fa6:	d967      	bls.n	8001078 <__udivmoddi4+0xe4>
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	b14a      	cbz	r2, 8000fc2 <__udivmoddi4+0x2e>
 8000fae:	f1c2 0720 	rsb	r7, r2, #32
 8000fb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000fb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000fba:	4095      	lsls	r5, r2
 8000fbc:	ea47 0803 	orr.w	r8, r7, r3
 8000fc0:	4094      	lsls	r4, r2
 8000fc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fc6:	0c23      	lsrs	r3, r4, #16
 8000fc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000fcc:	fa1f fc85 	uxth.w	ip, r5
 8000fd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000fd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000fdc:	4299      	cmp	r1, r3
 8000fde:	d909      	bls.n	8000ff4 <__udivmoddi4+0x60>
 8000fe0:	18eb      	adds	r3, r5, r3
 8000fe2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000fe6:	f080 811b 	bcs.w	8001220 <__udivmoddi4+0x28c>
 8000fea:	4299      	cmp	r1, r3
 8000fec:	f240 8118 	bls.w	8001220 <__udivmoddi4+0x28c>
 8000ff0:	3f02      	subs	r7, #2
 8000ff2:	442b      	add	r3, r5
 8000ff4:	1a5b      	subs	r3, r3, r1
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ffc:	fb0e 3310 	mls	r3, lr, r0, r3
 8001000:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001004:	fb00 fc0c 	mul.w	ip, r0, ip
 8001008:	45a4      	cmp	ip, r4
 800100a:	d909      	bls.n	8001020 <__udivmoddi4+0x8c>
 800100c:	192c      	adds	r4, r5, r4
 800100e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001012:	f080 8107 	bcs.w	8001224 <__udivmoddi4+0x290>
 8001016:	45a4      	cmp	ip, r4
 8001018:	f240 8104 	bls.w	8001224 <__udivmoddi4+0x290>
 800101c:	3802      	subs	r0, #2
 800101e:	442c      	add	r4, r5
 8001020:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001024:	eba4 040c 	sub.w	r4, r4, ip
 8001028:	2700      	movs	r7, #0
 800102a:	b11e      	cbz	r6, 8001034 <__udivmoddi4+0xa0>
 800102c:	40d4      	lsrs	r4, r2
 800102e:	2300      	movs	r3, #0
 8001030:	e9c6 4300 	strd	r4, r3, [r6]
 8001034:	4639      	mov	r1, r7
 8001036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103a:	428b      	cmp	r3, r1
 800103c:	d909      	bls.n	8001052 <__udivmoddi4+0xbe>
 800103e:	2e00      	cmp	r6, #0
 8001040:	f000 80eb 	beq.w	800121a <__udivmoddi4+0x286>
 8001044:	2700      	movs	r7, #0
 8001046:	e9c6 0100 	strd	r0, r1, [r6]
 800104a:	4638      	mov	r0, r7
 800104c:	4639      	mov	r1, r7
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	fab3 f783 	clz	r7, r3
 8001056:	2f00      	cmp	r7, #0
 8001058:	d147      	bne.n	80010ea <__udivmoddi4+0x156>
 800105a:	428b      	cmp	r3, r1
 800105c:	d302      	bcc.n	8001064 <__udivmoddi4+0xd0>
 800105e:	4282      	cmp	r2, r0
 8001060:	f200 80fa 	bhi.w	8001258 <__udivmoddi4+0x2c4>
 8001064:	1a84      	subs	r4, r0, r2
 8001066:	eb61 0303 	sbc.w	r3, r1, r3
 800106a:	2001      	movs	r0, #1
 800106c:	4698      	mov	r8, r3
 800106e:	2e00      	cmp	r6, #0
 8001070:	d0e0      	beq.n	8001034 <__udivmoddi4+0xa0>
 8001072:	e9c6 4800 	strd	r4, r8, [r6]
 8001076:	e7dd      	b.n	8001034 <__udivmoddi4+0xa0>
 8001078:	b902      	cbnz	r2, 800107c <__udivmoddi4+0xe8>
 800107a:	deff      	udf	#255	; 0xff
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	2a00      	cmp	r2, #0
 8001082:	f040 808f 	bne.w	80011a4 <__udivmoddi4+0x210>
 8001086:	1b49      	subs	r1, r1, r5
 8001088:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800108c:	fa1f f885 	uxth.w	r8, r5
 8001090:	2701      	movs	r7, #1
 8001092:	fbb1 fcfe 	udiv	ip, r1, lr
 8001096:	0c23      	lsrs	r3, r4, #16
 8001098:	fb0e 111c 	mls	r1, lr, ip, r1
 800109c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a0:	fb08 f10c 	mul.w	r1, r8, ip
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d907      	bls.n	80010b8 <__udivmoddi4+0x124>
 80010a8:	18eb      	adds	r3, r5, r3
 80010aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010ae:	d202      	bcs.n	80010b6 <__udivmoddi4+0x122>
 80010b0:	4299      	cmp	r1, r3
 80010b2:	f200 80cd 	bhi.w	8001250 <__udivmoddi4+0x2bc>
 80010b6:	4684      	mov	ip, r0
 80010b8:	1a59      	subs	r1, r3, r1
 80010ba:	b2a3      	uxth	r3, r4
 80010bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80010c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80010c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010c8:	fb08 f800 	mul.w	r8, r8, r0
 80010cc:	45a0      	cmp	r8, r4
 80010ce:	d907      	bls.n	80010e0 <__udivmoddi4+0x14c>
 80010d0:	192c      	adds	r4, r5, r4
 80010d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x14a>
 80010d8:	45a0      	cmp	r8, r4
 80010da:	f200 80b6 	bhi.w	800124a <__udivmoddi4+0x2b6>
 80010de:	4618      	mov	r0, r3
 80010e0:	eba4 0408 	sub.w	r4, r4, r8
 80010e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010e8:	e79f      	b.n	800102a <__udivmoddi4+0x96>
 80010ea:	f1c7 0c20 	rsb	ip, r7, #32
 80010ee:	40bb      	lsls	r3, r7
 80010f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80010f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80010f8:	fa01 f407 	lsl.w	r4, r1, r7
 80010fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8001100:	fa21 f30c 	lsr.w	r3, r1, ip
 8001104:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001108:	4325      	orrs	r5, r4
 800110a:	fbb3 f9f8 	udiv	r9, r3, r8
 800110e:	0c2c      	lsrs	r4, r5, #16
 8001110:	fb08 3319 	mls	r3, r8, r9, r3
 8001114:	fa1f fa8e 	uxth.w	sl, lr
 8001118:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800111c:	fb09 f40a 	mul.w	r4, r9, sl
 8001120:	429c      	cmp	r4, r3
 8001122:	fa02 f207 	lsl.w	r2, r2, r7
 8001126:	fa00 f107 	lsl.w	r1, r0, r7
 800112a:	d90b      	bls.n	8001144 <__udivmoddi4+0x1b0>
 800112c:	eb1e 0303 	adds.w	r3, lr, r3
 8001130:	f109 30ff 	add.w	r0, r9, #4294967295
 8001134:	f080 8087 	bcs.w	8001246 <__udivmoddi4+0x2b2>
 8001138:	429c      	cmp	r4, r3
 800113a:	f240 8084 	bls.w	8001246 <__udivmoddi4+0x2b2>
 800113e:	f1a9 0902 	sub.w	r9, r9, #2
 8001142:	4473      	add	r3, lr
 8001144:	1b1b      	subs	r3, r3, r4
 8001146:	b2ad      	uxth	r5, r5
 8001148:	fbb3 f0f8 	udiv	r0, r3, r8
 800114c:	fb08 3310 	mls	r3, r8, r0, r3
 8001150:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001154:	fb00 fa0a 	mul.w	sl, r0, sl
 8001158:	45a2      	cmp	sl, r4
 800115a:	d908      	bls.n	800116e <__udivmoddi4+0x1da>
 800115c:	eb1e 0404 	adds.w	r4, lr, r4
 8001160:	f100 33ff 	add.w	r3, r0, #4294967295
 8001164:	d26b      	bcs.n	800123e <__udivmoddi4+0x2aa>
 8001166:	45a2      	cmp	sl, r4
 8001168:	d969      	bls.n	800123e <__udivmoddi4+0x2aa>
 800116a:	3802      	subs	r0, #2
 800116c:	4474      	add	r4, lr
 800116e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001172:	fba0 8902 	umull	r8, r9, r0, r2
 8001176:	eba4 040a 	sub.w	r4, r4, sl
 800117a:	454c      	cmp	r4, r9
 800117c:	46c2      	mov	sl, r8
 800117e:	464b      	mov	r3, r9
 8001180:	d354      	bcc.n	800122c <__udivmoddi4+0x298>
 8001182:	d051      	beq.n	8001228 <__udivmoddi4+0x294>
 8001184:	2e00      	cmp	r6, #0
 8001186:	d069      	beq.n	800125c <__udivmoddi4+0x2c8>
 8001188:	ebb1 050a 	subs.w	r5, r1, sl
 800118c:	eb64 0403 	sbc.w	r4, r4, r3
 8001190:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001194:	40fd      	lsrs	r5, r7
 8001196:	40fc      	lsrs	r4, r7
 8001198:	ea4c 0505 	orr.w	r5, ip, r5
 800119c:	e9c6 5400 	strd	r5, r4, [r6]
 80011a0:	2700      	movs	r7, #0
 80011a2:	e747      	b.n	8001034 <__udivmoddi4+0xa0>
 80011a4:	f1c2 0320 	rsb	r3, r2, #32
 80011a8:	fa20 f703 	lsr.w	r7, r0, r3
 80011ac:	4095      	lsls	r5, r2
 80011ae:	fa01 f002 	lsl.w	r0, r1, r2
 80011b2:	fa21 f303 	lsr.w	r3, r1, r3
 80011b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ba:	4338      	orrs	r0, r7
 80011bc:	0c01      	lsrs	r1, r0, #16
 80011be:	fbb3 f7fe 	udiv	r7, r3, lr
 80011c2:	fa1f f885 	uxth.w	r8, r5
 80011c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80011ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ce:	fb07 f308 	mul.w	r3, r7, r8
 80011d2:	428b      	cmp	r3, r1
 80011d4:	fa04 f402 	lsl.w	r4, r4, r2
 80011d8:	d907      	bls.n	80011ea <__udivmoddi4+0x256>
 80011da:	1869      	adds	r1, r5, r1
 80011dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80011e0:	d22f      	bcs.n	8001242 <__udivmoddi4+0x2ae>
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d92d      	bls.n	8001242 <__udivmoddi4+0x2ae>
 80011e6:	3f02      	subs	r7, #2
 80011e8:	4429      	add	r1, r5
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	b281      	uxth	r1, r0
 80011ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80011f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80011f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011fa:	fb00 f308 	mul.w	r3, r0, r8
 80011fe:	428b      	cmp	r3, r1
 8001200:	d907      	bls.n	8001212 <__udivmoddi4+0x27e>
 8001202:	1869      	adds	r1, r5, r1
 8001204:	f100 3cff 	add.w	ip, r0, #4294967295
 8001208:	d217      	bcs.n	800123a <__udivmoddi4+0x2a6>
 800120a:	428b      	cmp	r3, r1
 800120c:	d915      	bls.n	800123a <__udivmoddi4+0x2a6>
 800120e:	3802      	subs	r0, #2
 8001210:	4429      	add	r1, r5
 8001212:	1ac9      	subs	r1, r1, r3
 8001214:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001218:	e73b      	b.n	8001092 <__udivmoddi4+0xfe>
 800121a:	4637      	mov	r7, r6
 800121c:	4630      	mov	r0, r6
 800121e:	e709      	b.n	8001034 <__udivmoddi4+0xa0>
 8001220:	4607      	mov	r7, r0
 8001222:	e6e7      	b.n	8000ff4 <__udivmoddi4+0x60>
 8001224:	4618      	mov	r0, r3
 8001226:	e6fb      	b.n	8001020 <__udivmoddi4+0x8c>
 8001228:	4541      	cmp	r1, r8
 800122a:	d2ab      	bcs.n	8001184 <__udivmoddi4+0x1f0>
 800122c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001230:	eb69 020e 	sbc.w	r2, r9, lr
 8001234:	3801      	subs	r0, #1
 8001236:	4613      	mov	r3, r2
 8001238:	e7a4      	b.n	8001184 <__udivmoddi4+0x1f0>
 800123a:	4660      	mov	r0, ip
 800123c:	e7e9      	b.n	8001212 <__udivmoddi4+0x27e>
 800123e:	4618      	mov	r0, r3
 8001240:	e795      	b.n	800116e <__udivmoddi4+0x1da>
 8001242:	4667      	mov	r7, ip
 8001244:	e7d1      	b.n	80011ea <__udivmoddi4+0x256>
 8001246:	4681      	mov	r9, r0
 8001248:	e77c      	b.n	8001144 <__udivmoddi4+0x1b0>
 800124a:	3802      	subs	r0, #2
 800124c:	442c      	add	r4, r5
 800124e:	e747      	b.n	80010e0 <__udivmoddi4+0x14c>
 8001250:	f1ac 0c02 	sub.w	ip, ip, #2
 8001254:	442b      	add	r3, r5
 8001256:	e72f      	b.n	80010b8 <__udivmoddi4+0x124>
 8001258:	4638      	mov	r0, r7
 800125a:	e708      	b.n	800106e <__udivmoddi4+0xda>
 800125c:	4637      	mov	r7, r6
 800125e:	e6e9      	b.n	8001034 <__udivmoddi4+0xa0>

08001260 <__aeabi_idiv0>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>:
Motor m3(&htim4, TIM_CHANNEL_3);
Motor m4(&htim4, TIM_CHANNEL_4);
Motor m5(&htim3, TIM_CHANNEL_1);
Motor m6(&htim3, TIM_CHANNEL_2);

Motor::Motor(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	: htim(htim)
	, Channel(Channel)
	, pwm(1000)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001282:	811a      	strh	r2, [r3, #8]
{ }
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZN2FC5Motor6setPWMEt>:

void Motor::stop(){
	HAL_TIMEx_PWMN_Stop(htim, Channel);
}

void Motor::setPWM(uint16_t pwm){
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]
	if(pwm < MIN_PWM) 			pwm = MIN_PWM;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a4:	d203      	bcs.n	80012ae <_ZN2FC5Motor6setPWMEt+0x1c>
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	e006      	b.n	80012bc <_ZN2FC5Motor6setPWMEt+0x2a>
	else if(pwm > MAX_PWM)		pwm = MAX_PWM;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012b4:	d902      	bls.n	80012bc <_ZN2FC5Motor6setPWMEt+0x2a>
 80012b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ba:	807b      	strh	r3, [r7, #2]

	this->pwm = pwm;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	811a      	strh	r2, [r3, #8]

	/*
	 *  pwm(1000 ~ 2000) scale to CCR register value(10500 ~ 21000);
	 */
	uint16_t output = (pwm - MIN_PWM) * ((MAX_CCR - MIN_CCR) / (MAX_PWM - MIN_PWM)) + MIN_CCR;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <_ZN2FC5Motor6setPWMEt+0x4c>
 80012d2:	89fa      	ldrh	r2, [r7, #14]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012dc:	e018      	b.n	8001310 <_ZN2FC5Motor6setPWMEt+0x7e>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d105      	bne.n	80012f2 <_ZN2FC5Motor6setPWMEt+0x60>
 80012e6:	89fa      	ldrh	r2, [r7, #14]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012f0:	e00e      	b.n	8001310 <_ZN2FC5Motor6setPWMEt+0x7e>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d105      	bne.n	8001306 <_ZN2FC5Motor6setPWMEt+0x74>
 80012fa:	89fa      	ldrh	r2, [r7, #14]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001304:	e004      	b.n	8001310 <_ZN2FC5Motor6setPWMEt+0x7e>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8001306:	89fa      	ldrh	r2, [r7, #14]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace FC */
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d122      	bne.n	8001372 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001332:	4293      	cmp	r3, r2
 8001334:	d11d      	bne.n	8001372 <_Z41__static_initialization_and_destruction_0ii+0x56>
Motor m1(&htim4, TIM_CHANNEL_1);
 8001336:	2200      	movs	r2, #0
 8001338:	4910      	ldr	r1, [pc, #64]	; (800137c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800133c:	f7ff ff92 	bl	8001264 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m2(&htim4, TIM_CHANNEL_2);
 8001340:	2204      	movs	r2, #4
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001346:	f7ff ff8d 	bl	8001264 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m3(&htim4, TIM_CHANNEL_3);
 800134a:	2208      	movs	r2, #8
 800134c:	490b      	ldr	r1, [pc, #44]	; (800137c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001350:	f7ff ff88 	bl	8001264 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m4(&htim4, TIM_CHANNEL_4);
 8001354:	220c      	movs	r2, #12
 8001356:	4909      	ldr	r1, [pc, #36]	; (800137c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800135a:	f7ff ff83 	bl	8001264 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m5(&htim3, TIM_CHANNEL_1);
 800135e:	2200      	movs	r2, #0
 8001360:	490b      	ldr	r1, [pc, #44]	; (8001390 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001364:	f7ff ff7e 	bl	8001264 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m6(&htim3, TIM_CHANNEL_2);
 8001368:	2204      	movs	r2, #4
 800136a:	4909      	ldr	r1, [pc, #36]	; (8001390 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800136e:	f7ff ff79 	bl	8001264 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
} /* namespace FC */
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000c9e8 	.word	0x2000c9e8
 8001380:	200002cc 	.word	0x200002cc
 8001384:	200002d8 	.word	0x200002d8
 8001388:	200002e4 	.word	0x200002e4
 800138c:	200002f0 	.word	0x200002f0
 8001390:	2000ca68 	.word	0x2000ca68
 8001394:	200002fc 	.word	0x200002fc
 8001398:	20000308 	.word	0x20000308

0800139c <_GLOBAL__sub_I__ZN2FC2m1E>:
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
 80013a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff ffb9 	bl	800131c <_Z41__static_initialization_and_destruction_0ii>
 80013aa:	bd80      	pop	{r7, pc}

080013ac <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <IST8310+0x24>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 80013ba:	f000 f915 	bl	80015e8 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 80013be:	210b      	movs	r1, #11
 80013c0:	200a      	movs	r0, #10
 80013c2:	f000 f8ff 	bl	80015c4 <IST8310_write_reg>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000a50 	.word	0x20000a50

080013d4 <IST8310_updataIT>:

/*
 *  150hz gogo
 */
void IST8310_updataIT(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af02      	add	r7, sp, #8
	if(bm_i2cFlag != bm_i2cIdle) return;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <IST8310_updataIT+0x34>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10e      	bne.n	8001400 <IST8310_updataIT+0x2c>

	HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <IST8310_updataIT+0x38>)
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	2306      	movs	r3, #6
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <IST8310_updataIT+0x3c>)
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	211c      	movs	r1, #28
 80013f4:	f00c f8f6 	bl	800d5e4 <HAL_I2C_Mem_Read_IT>
	bm_i2cFlag = bm_i2cIST8310;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <IST8310_updataIT+0x34>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	e000      	b.n	8001402 <IST8310_updataIT+0x2e>
	if(bm_i2cFlag != bm_i2cIdle) return;
 8001400:	bf00      	nop

}
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000a6c 	.word	0x20000a6c
 800140c:	20000a50 	.word	0x20000a50
 8001410:	20000a54 	.word	0x20000a54
 8001414:	00000000 	.word	0x00000000

08001418 <IST8310_i2cRxCpltCallback>:
uint8_t IST8310_i2cRxCpltCallback(){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return 0;
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <IST8310_i2cRxCpltCallback+0x168>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d001      	beq.n	8001428 <IST8310_i2cRxCpltCallback+0x10>
 8001424:	2300      	movs	r3, #0
 8001426:	e098      	b.n	800155a <IST8310_i2cRxCpltCallback+0x142>

	bm_i2cFlag = bm_i2cIdle;
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <IST8310_i2cRxCpltCallback+0x168>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001430:	795b      	ldrb	r3, [r3, #5]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b53      	ldr	r3, [pc, #332]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001442:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001446:	79db      	ldrb	r3, [r3, #7]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 800144e:	799b      	ldrb	r3, [r3, #6]
 8001450:	b21b      	sxth	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b21a      	sxth	r2, r3
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001458:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	4b48      	ldr	r3, [pc, #288]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001464:	7a1b      	ldrb	r3, [r3, #8]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 800146e:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001472:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f864 	bl	8000544 <__aeabi_i2d>
 800147c:	a338      	add	r3, pc, #224	; (adr r3, 8001560 <IST8310_i2cRxCpltCallback+0x148>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff fb59 	bl	8000b38 <__aeabi_dcmpgt>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d145      	bne.n	8001518 <IST8310_i2cRxCpltCallback+0x100>
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 800148e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f856 	bl	8000544 <__aeabi_i2d>
 8001498:	a333      	add	r3, pc, #204	; (adr r3, 8001568 <IST8310_i2cRxCpltCallback+0x150>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff fb2d 	bl	8000afc <__aeabi_dcmplt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d137      	bne.n	8001518 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 80014aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f848 	bl	8000544 <__aeabi_i2d>
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 80014b4:	a32a      	add	r3, pc, #168	; (adr r3, 8001560 <IST8310_i2cRxCpltCallback+0x148>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff fb3d 	bl	8000b38 <__aeabi_dcmpgt>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d129      	bne.n	8001518 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 80014c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f83a 	bl	8000544 <__aeabi_i2d>
 80014d0:	a325      	add	r3, pc, #148	; (adr r3, 8001568 <IST8310_i2cRxCpltCallback+0x150>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff fb11 	bl	8000afc <__aeabi_dcmplt>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11b      	bne.n	8001518 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 80014e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f82c 	bl	8000544 <__aeabi_i2d>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 80014ec:	a320      	add	r3, pc, #128	; (adr r3, 8001570 <IST8310_i2cRxCpltCallback+0x158>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff fb21 	bl	8000b38 <__aeabi_dcmpgt>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10d      	bne.n	8001518 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 80014fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f81e 	bl	8000544 <__aeabi_i2d>
 8001508:	a31b      	add	r3, pc, #108	; (adr r3, 8001578 <IST8310_i2cRxCpltCallback+0x160>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff faf5 	bl	8000afc <__aeabi_dcmplt>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <IST8310_i2cRxCpltCallback+0x104>
	{
		return 0;
 8001518:	2300      	movs	r3, #0
 800151a:	e01e      	b.n	800155a <IST8310_i2cRxCpltCallback+0x142>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 800151e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 800152c:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001532:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001536:	ee07 3a90 	vmov	s15, r3
 800153a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001540:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001546:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <IST8310_i2cRxCpltCallback+0x16c>)
 8001554:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	55555556 	.word	0x55555556
 8001564:	40b4d655 	.word	0x40b4d655
 8001568:	55555556 	.word	0x55555556
 800156c:	c0b4d655 	.word	0xc0b4d655
 8001570:	aaaaaaab 	.word	0xaaaaaaab
 8001574:	40c0472a 	.word	0x40c0472a
 8001578:	aaaaaaab 	.word	0xaaaaaaab
 800157c:	c0c0472a 	.word	0xc0c0472a
 8001580:	20000a6c 	.word	0x20000a6c
 8001584:	20000a50 	.word	0x20000a50

08001588 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af04      	add	r7, sp, #16
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <IST8310_write+0x38>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	b299      	uxth	r1, r3
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2264      	movs	r2, #100	; 0x64
 80015a6:	9202      	str	r2, [sp, #8]
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2301      	movs	r3, #1
 80015b0:	460a      	mov	r2, r1
 80015b2:	211c      	movs	r1, #28
 80015b4:	f00b fcf6 	bl	800cfa4 <HAL_I2C_Mem_Write>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000a50 	.word	0x20000a50

080015c4 <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 80015d4:	1db9      	adds	r1, r7, #6
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2201      	movs	r2, #1
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ffd4 	bl	8001588 <IST8310_write>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 80015ec:	2101      	movs	r1, #1
 80015ee:	200b      	movs	r0, #11
 80015f0:	f7ff ffe8 	bl	80015c4 <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 80015f4:	2124      	movs	r1, #36	; 0x24
 80015f6:	2041      	movs	r0, #65	; 0x41
 80015f8:	f7ff ffe4 	bl	80015c4 <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 80015fc:	21c0      	movs	r1, #192	; 0xc0
 80015fe:	2042      	movs	r0, #66	; 0x42
 8001600:	f7ff ffe0 	bl	80015c4 <IST8310_write_reg>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <Lidar1D_CaptureCallback>:
	if(HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
	return HAL_OK;
}


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <Lidar1D_CaptureCallback+0x4c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d116      	bne.n	800164c <Lidar1D_CaptureCallback+0x44>

	if(htim->Channel == lidar1D.activeChannel1){
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7f1a      	ldrb	r2, [r3, #28]
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <Lidar1D_CaptureCallback+0x4c>)
 8001624:	7b1b      	ldrb	r3, [r3, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	d102      	bne.n	8001630 <Lidar1D_CaptureCallback+0x28>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		TIM9->CNT = 0;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <Lidar1D_CaptureCallback+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7f1a      	ldrb	r2, [r3, #28]
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <Lidar1D_CaptureCallback+0x4c>)
 8001636:	7b5b      	ldrb	r3, [r3, #13]
 8001638:	429a      	cmp	r2, r3
 800163a:	d108      	bne.n	800164e <Lidar1D_CaptureCallback+0x46>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800163c:	2104      	movs	r1, #4
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f011 f8cc 	bl	80127dc <HAL_TIM_ReadCapturedValue>
 8001644:	4602      	mov	r2, r0
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <Lidar1D_CaptureCallback+0x4c>)
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	e000      	b.n	800164e <Lidar1D_CaptureCallback+0x46>
	if(htim->Instance != lidar1D.htim->Instance) return;
 800164c:	bf00      	nop
	}
}
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000314 	.word	0x20000314
 8001658:	40014000 	.word	0x40014000

0800165c <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <MPU9250+0xec>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <MPU9250+0xec>)
 800166c:	2202      	movs	r2, #2
 800166e:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <MPU9250+0xec>)
 8001672:	2203      	movs	r2, #3
 8001674:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <MPU9250+0xec>)
 8001678:	2200      	movs	r2, #0
 800167a:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <MPU9250+0xec>)
 800167e:	2206      	movs	r2, #6
 8001680:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <MPU9250+0xec>)
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <MPU9250+0xec>)
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <MPU9250+0xec>)
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 800169a:	2206      	movs	r2, #6
 800169c:	2100      	movs	r1, #0
 800169e:	482b      	ldr	r0, [pc, #172]	; (800174c <MPU9250+0xf0>)
 80016a0:	f01c f87f 	bl	801d7a2 <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 80016a4:	2206      	movs	r2, #6
 80016a6:	2100      	movs	r1, #0
 80016a8:	4829      	ldr	r0, [pc, #164]	; (8001750 <MPU9250+0xf4>)
 80016aa:	f01c f87a 	bl	801d7a2 <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 80016ae:	2206      	movs	r2, #6
 80016b0:	2100      	movs	r1, #0
 80016b2:	4828      	ldr	r0, [pc, #160]	; (8001754 <MPU9250+0xf8>)
 80016b4:	f01c f875 	bl	801d7a2 <memset>
	mpu9250.tmpCount = 0;
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <MPU9250+0xec>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 80016be:	220c      	movs	r2, #12
 80016c0:	2100      	movs	r1, #0
 80016c2:	4825      	ldr	r0, [pc, #148]	; (8001758 <MPU9250+0xfc>)
 80016c4:	f01c f86d 	bl	801d7a2 <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 80016c8:	220c      	movs	r2, #12
 80016ca:	2100      	movs	r1, #0
 80016cc:	4823      	ldr	r0, [pc, #140]	; (800175c <MPU9250+0x100>)
 80016ce:	f01c f868 	bl	801d7a2 <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 80016d2:	220c      	movs	r2, #12
 80016d4:	2100      	movs	r1, #0
 80016d6:	4822      	ldr	r0, [pc, #136]	; (8001760 <MPU9250+0x104>)
 80016d8:	f01c f863 	bl	801d7a2 <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 80016dc:	220c      	movs	r2, #12
 80016de:	2100      	movs	r1, #0
 80016e0:	4820      	ldr	r0, [pc, #128]	; (8001764 <MPU9250+0x108>)
 80016e2:	f01c f85e 	bl	801d7a2 <memset>
	mpu9250.tmp = 0;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MPU9250+0xec>)
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 80016ee:	220e      	movs	r2, #14
 80016f0:	2100      	movs	r1, #0
 80016f2:	481d      	ldr	r0, [pc, #116]	; (8001768 <MPU9250+0x10c>)
 80016f4:	f01c f855 	bl	801d7a2 <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 80016f8:	2207      	movs	r2, #7
 80016fa:	2100      	movs	r1, #0
 80016fc:	481b      	ldr	r0, [pc, #108]	; (800176c <MPU9250+0x110>)
 80016fe:	f01c f850 	bl	801d7a2 <memset>
	mpu9250.AK8963_lastUpdate = 0;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MPU9250+0xec>)
 8001704:	2200      	movs	r2, #0
 8001706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MPU9250+0xec>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <MPU9250+0xec>)
 8001714:	4a16      	ldr	r2, [pc, #88]	; (8001770 <MPU9250+0x114>)
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MPU9250+0xec>)
 800171a:	4a16      	ldr	r2, [pc, #88]	; (8001774 <MPU9250+0x118>)
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MPU9250+0xec>)
 8001720:	4a15      	ldr	r2, [pc, #84]	; (8001778 <MPU9250+0x11c>)
 8001722:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8001724:	f000 fa22 	bl	8001b6c <MPU9250_getMres>
	MPU9250_getGres();
 8001728:	f000 fa3c 	bl	8001ba4 <MPU9250_getGres>
	MPU9250_getAres();
 800172c:	f000 fa6c 	bl	8001c08 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8001730:	f000 fa98 	bl	8001c64 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8001734:	f000 fb84 	bl	8001e40 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 8001738:	f000 fb0e 	bl	8001d58 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 800173c:	f000 fa9e 	bl	8001c7c <MPU9250_initAK8963>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200006d8 	.word	0x200006d8
 800174c:	200006ec 	.word	0x200006ec
 8001750:	200006f2 	.word	0x200006f2
 8001754:	200006f8 	.word	0x200006f8
 8001758:	20000700 	.word	0x20000700
 800175c:	20000718 	.word	0x20000718
 8001760:	20000724 	.word	0x20000724
 8001764:	20000730 	.word	0x20000730
 8001768:	20000740 	.word	0x20000740
 800176c:	2000074e 	.word	0x2000074e
 8001770:	438c0000 	.word	0x438c0000
 8001774:	438e8000 	.word	0x438e8000
 8001778:	43a50000 	.word	0x43a50000

0800177c <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MPU9250_updateDMA+0x38>)
 8001784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10f      	bne.n	80017ac <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MPU9250_updateDMA+0x38>)
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MPU9250_updateDMA+0x38>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	230e      	movs	r3, #14
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MPU9250_updateDMA+0x3c>)
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2301      	movs	r3, #1
 80017a2:	223b      	movs	r2, #59	; 0x3b
 80017a4:	21d0      	movs	r1, #208	; 0xd0
 80017a6:	f00b ffdb 	bl	800d760 <HAL_I2C_Mem_Read_DMA>
 80017aa:	e000      	b.n	80017ae <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 80017ac:	bf00      	nop
}
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200006d8 	.word	0x200006d8
 80017b8:	20000740 	.word	0x20000740

080017bc <MPU9250_i2cRxCpltCallback>:

uint8_t MPU9250_i2cRxCpltCallback(){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af02      	add	r7, sp, #8
	static uint8_t res = 0;
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <MPU9250_i2cRxCpltCallback+0x98>)
 80017c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d12a      	bne.n	8001822 <MPU9250_i2cRxCpltCallback+0x66>
		if(MPU9250_calRawData() != MPU9250_Fail){
 80017cc:	f000 f848 	bl	8001860 <MPU9250_calRawData>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <MPU9250_i2cRxCpltCallback+0x24>
			MPU9250_calCalibValue();
 80017d6:	f000 f8c5 	bl	8001964 <MPU9250_calCalibValue>
			res = 1;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MPU9250_i2cRxCpltCallback+0x9c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 80017e0:	f018 fd4c 	bl	801a27c <xTaskGetTickCount>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MPU9250_i2cRxCpltCallback+0x98>)
 80017e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b0a      	cmp	r3, #10
 80017f0:	d926      	bls.n	8001840 <MPU9250_i2cRxCpltCallback+0x84>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MPU9250_i2cRxCpltCallback+0x98>)
 80017f4:	2202      	movs	r2, #2
 80017f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MPU9250_i2cRxCpltCallback+0x98>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	2307      	movs	r3, #7
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MPU9250_i2cRxCpltCallback+0xa0>)
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	2118      	movs	r1, #24
 800180c:	f00b ffa8 	bl	800d760 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 8001810:	f018 fd34 	bl	801a27c <xTaskGetTickCount>
 8001814:	4602      	mov	r2, r0
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MPU9250_i2cRxCpltCallback+0x98>)
 8001818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return res;
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MPU9250_i2cRxCpltCallback+0x9c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	e014      	b.n	800184c <MPU9250_i2cRxCpltCallback+0x90>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MPU9250_i2cRxCpltCallback+0x98>)
 8001824:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001828:	2b02      	cmp	r3, #2
 800182a:	d109      	bne.n	8001840 <MPU9250_i2cRxCpltCallback+0x84>
		if(AK8963_calRawData() == MPU9250_Success){
 800182c:	f000 f90c 	bl	8001a48 <AK8963_calRawData>
 8001830:	4603      	mov	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d104      	bne.n	8001840 <MPU9250_i2cRxCpltCallback+0x84>
			AK8963_calCalibValue();
 8001836:	f000 f945 	bl	8001ac4 <AK8963_calCalibValue>
			res = 2;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MPU9250_i2cRxCpltCallback+0x9c>)
 800183c:	2202      	movs	r2, #2
 800183e:	701a      	strb	r2, [r3, #0]
		}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <MPU9250_i2cRxCpltCallback+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return res;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <MPU9250_i2cRxCpltCallback+0x9c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200006d8 	.word	0x200006d8
 8001858:	20000328 	.word	0x20000328
 800185c:	2000074e 	.word	0x2000074e

08001860 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <MPU9250_calRawData+0x100>)
 8001866:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21a      	sxth	r2, r3
 800186e:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <MPU9250_calRawData+0x100>)
 8001870:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	425b      	negs	r3, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21a      	sxth	r2, r3
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <MPU9250_calRawData+0x100>)
 8001884:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <MPU9250_calRawData+0x100>)
 8001888:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <MPU9250_calRawData+0x100>)
 8001892:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001896:	b21b      	sxth	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	b21b      	sxth	r3, r3
 800189c:	b29b      	uxth	r3, r3
 800189e:	425b      	negs	r3, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <MPU9250_calRawData+0x100>)
 80018a6:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <MPU9250_calRawData+0x100>)
 80018aa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <MPU9250_calRawData+0x100>)
 80018b4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b21b      	sxth	r3, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	425b      	negs	r3, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <MPU9250_calRawData+0x100>)
 80018c8:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <MPU9250_calRawData+0x100>)
 80018cc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <MPU9250_calRawData+0x100>)
 80018d6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b21a      	sxth	r2, r3
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MPU9250_calRawData+0x100>)
 80018e2:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <MPU9250_calRawData+0x100>)
 80018e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MPU9250_calRawData+0x100>)
 80018f0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MPU9250_calRawData+0x100>)
 80018fc:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MPU9250_calRawData+0x100>)
 8001900:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	b21a      	sxth	r2, r3
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MPU9250_calRawData+0x100>)
 800190a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800190e:	b21b      	sxth	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b21a      	sxth	r2, r3
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MPU9250_calRawData+0x100>)
 8001916:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MPU9250_calRawData+0x100>)
 800191a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MPU9250_calRawData+0x100>)
 8001924:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MPU9250_calRawData+0x100>)
 8001930:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MPU9250_calRawData+0x100>)
 8001934:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10b      	bne.n	8001954 <MPU9250_calRawData+0xf4>
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MPU9250_calRawData+0x100>)
 800193e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <MPU9250_calRawData+0xf4>
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MPU9250_calRawData+0x100>)
 8001948:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <MPU9250_calRawData+0xf4>
 8001950:	2300      	movs	r3, #0
 8001952:	e000      	b.n	8001956 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	200006d8 	.word	0x200006d8

08001964 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 800196a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001978:	edd3 7a02 	vldr	s15, [r3, #8]
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001982:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001988:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001996:	edd3 7a02 	vldr	s15, [r3, #8]
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019a0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019a6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019be:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019c4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019da:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a44 <MPU9250_calCalibValue+0xe0>
 80019de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019e4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019ea:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 80019f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a44 <MPU9250_calCalibValue+0xe0>
 8001a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001a0a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001a10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a26:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a44 <MPU9250_calCalibValue+0xe0>
 8001a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <MPU9250_calCalibValue+0xdc>)
 8001a30:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200006d8 	.word	0x200006d8
 8001a44:	3c8efa35 	.word	0x3c8efa35

08001a48 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <AK8963_calRawData+0x16>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e02b      	b.n	8001ab6 <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a60:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a6a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a76:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a7a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a84:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a90:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a94:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001a9e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	425b      	negs	r3, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <AK8963_calRawData+0x78>)
 8001ab2:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	200006d8 	.word	0x200006d8

08001ac4 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001aca:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001ad8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001ae2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001aec:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001af6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001afc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b14:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b1e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b28:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b2e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b46:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b50:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <AK8963_calCalibValue+0xa4>)
 8001b5a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	200006d8 	.word	0x200006d8

08001b6c <MPU9250_getMres>:

void MPU9250_getMres() {
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MPU9250_getMres+0x2c>)
 8001b72:	799b      	ldrb	r3, [r3, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <MPU9250_getMres+0x12>
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d004      	beq.n	8001b86 <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 8001b7c:	e007      	b.n	8001b8e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MPU9250_getMres+0x2c>)
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <MPU9250_getMres+0x30>)
 8001b82:	611a      	str	r2, [r3, #16]
		  break;
 8001b84:	e003      	b.n	8001b8e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <MPU9250_getMres+0x2c>)
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <MPU9250_getMres+0x34>)
 8001b8a:	611a      	str	r2, [r3, #16]
		  break;
 8001b8c:	bf00      	nop
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	200006d8 	.word	0x200006d8
 8001b9c:	40bfebff 	.word	0x40bfebff
 8001ba0:	3fbfebff 	.word	0x3fbfebff

08001ba4 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MPU9250_getGres+0x50>)
 8001baa:	795b      	ldrb	r3, [r3, #5]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d81b      	bhi.n	8001be8 <MPU9250_getGres+0x44>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <MPU9250_getGres+0x14>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bd1 	.word	0x08001bd1
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001be1 	.word	0x08001be1
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <MPU9250_getGres+0x50>)
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <MPU9250_getGres+0x54>)
 8001bcc:	60da      	str	r2, [r3, #12]
          break;
 8001bce:	e00b      	b.n	8001be8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MPU9250_getGres+0x50>)
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <MPU9250_getGres+0x58>)
 8001bd4:	60da      	str	r2, [r3, #12]
          break;
 8001bd6:	e007      	b.n	8001be8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MPU9250_getGres+0x50>)
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <MPU9250_getGres+0x5c>)
 8001bdc:	60da      	str	r2, [r3, #12]
          break;
 8001bde:	e003      	b.n	8001be8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <MPU9250_getGres+0x50>)
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <MPU9250_getGres+0x60>)
 8001be4:	60da      	str	r2, [r3, #12]
          break;
 8001be6:	bf00      	nop
  }
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200006d8 	.word	0x200006d8
 8001bf8:	3bfa0000 	.word	0x3bfa0000
 8001bfc:	3c7a0000 	.word	0x3c7a0000
 8001c00:	3cfa0000 	.word	0x3cfa0000
 8001c04:	3d7a0000 	.word	0x3d7a0000

08001c08 <MPU9250_getAres>:


void MPU9250_getAres() {
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MPU9250_getAres+0x58>)
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d81f      	bhi.n	8001c54 <MPU9250_getAres+0x4c>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <MPU9250_getAres+0x14>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c37 	.word	0x08001c37
 8001c24:	08001c41 	.word	0x08001c41
 8001c28:	08001c4b 	.word	0x08001c4b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MPU9250_getAres+0x58>)
 8001c2e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001c32:	609a      	str	r2, [r3, #8]
          break;
 8001c34:	e00e      	b.n	8001c54 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MPU9250_getAres+0x58>)
 8001c38:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001c3c:	609a      	str	r2, [r3, #8]
          break;
 8001c3e:	e009      	b.n	8001c54 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <MPU9250_getAres+0x58>)
 8001c42:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001c46:	609a      	str	r2, [r3, #8]
          break;
 8001c48:	e004      	b.n	8001c54 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <MPU9250_getAres+0x58>)
 8001c4c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001c50:	609a      	str	r2, [r3, #8]
          break;
 8001c52:	bf00      	nop
  }
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	200006d8 	.word	0x200006d8

08001c64 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	216b      	movs	r1, #107	; 0x6b
 8001c6c:	20d0      	movs	r0, #208	; 0xd0
 8001c6e:	f000 fb69 	bl	8002344 <MPU9250_writeByte>
    HAL_Delay(10);
 8001c72:	200a      	movs	r0, #10
 8001c74:	f009 ff62 	bl	800bb3c <HAL_Delay>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001c82:	2200      	movs	r2, #0
 8001c84:	210a      	movs	r1, #10
 8001c86:	2018      	movs	r0, #24
 8001c88:	f000 fb5c 	bl	8002344 <MPU9250_writeByte>
	HAL_Delay(10);
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f009 ff55 	bl	800bb3c <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001c92:	220f      	movs	r2, #15
 8001c94:	210a      	movs	r1, #10
 8001c96:	2018      	movs	r0, #24
 8001c98:	f000 fb54 	bl	8002344 <MPU9250_writeByte>
	HAL_Delay(10);
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f009 ff4d 	bl	800bb3c <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	2018      	movs	r0, #24
 8001caa:	f000 fb69 	bl	8002380 <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001cae:	793b      	ldrb	r3, [r7, #4]
 8001cb0:	3b80      	subs	r3, #128	; 0x80
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cba:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001d50 <MPU9250_initAK8963+0xd4>
 8001cbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <MPU9250_initAK8963+0xd8>)
 8001ccc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001cd0:	797b      	ldrb	r3, [r7, #5]
 8001cd2:	3b80      	subs	r3, #128	; 0x80
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cdc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001d50 <MPU9250_initAK8963+0xd4>
 8001ce0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MPU9250_initAK8963+0xd8>)
 8001cee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	3b80      	subs	r3, #128	; 0x80
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cfe:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d50 <MPU9250_initAK8963+0xd4>
 8001d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MPU9250_initAK8963+0xd8>)
 8001d10:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001d14:	2200      	movs	r2, #0
 8001d16:	210a      	movs	r1, #10
 8001d18:	2018      	movs	r0, #24
 8001d1a:	f000 fb13 	bl	8002344 <MPU9250_writeByte>
	HAL_Delay(10);
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f009 ff0c 	bl	800bb3c <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MPU9250_initAK8963+0xd8>)
 8001d26:	799b      	ldrb	r3, [r3, #6]
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	b25a      	sxtb	r2, r3
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MPU9250_initAK8963+0xd8>)
 8001d2e:	79db      	ldrb	r3, [r3, #7]
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	4313      	orrs	r3, r2
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	210a      	movs	r1, #10
 8001d3c:	2018      	movs	r0, #24
 8001d3e:	f000 fb01 	bl	8002344 <MPU9250_writeByte>
	HAL_Delay(10);
 8001d42:	200a      	movs	r0, #10
 8001d44:	f009 fefa 	bl	800bb3c <HAL_Delay>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	43800000 	.word	0x43800000
 8001d54:	200006d8 	.word	0x200006d8

08001d58 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001d5e:	2200      	movs	r2, #0
 8001d60:	216b      	movs	r1, #107	; 0x6b
 8001d62:	20d0      	movs	r0, #208	; 0xd0
 8001d64:	f000 faee 	bl	8002344 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	f009 fee7 	bl	800bb3c <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001d6e:	2201      	movs	r2, #1
 8001d70:	216b      	movs	r1, #107	; 0x6b
 8001d72:	20d0      	movs	r0, #208	; 0xd0
 8001d74:	f000 fae6 	bl	8002344 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001d78:	2203      	movs	r2, #3
 8001d7a:	211a      	movs	r1, #26
 8001d7c:	20d0      	movs	r0, #208	; 0xd0
 8001d7e:	f000 fae1 	bl	8002344 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001d82:	2204      	movs	r2, #4
 8001d84:	2119      	movs	r1, #25
 8001d86:	20d0      	movs	r0, #208	; 0xd0
 8001d88:	f000 fadc 	bl	8002344 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001d8c:	211b      	movs	r1, #27
 8001d8e:	20d0      	movs	r0, #208	; 0xd0
 8001d90:	f000 fb18 	bl	80023c4 <MPU9250_readByte>
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f023 0318 	bic.w	r3, r3, #24
 8001da6:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MPU9250_initMPU9250+0xe4>)
 8001daa:	795b      	ldrb	r3, [r3, #5]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	b25a      	sxtb	r2, r3
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	211b      	movs	r1, #27
 8001dc0:	20d0      	movs	r0, #208	; 0xd0
 8001dc2:	f000 fabf 	bl	8002344 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8001dc6:	211c      	movs	r1, #28
 8001dc8:	20d0      	movs	r0, #208	; 0xd0
 8001dca:	f000 fafb 	bl	80023c4 <MPU9250_readByte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f023 0318 	bic.w	r3, r3, #24
 8001dd8:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <MPU9250_initMPU9250+0xe4>)
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	461a      	mov	r2, r3
 8001df0:	211c      	movs	r1, #28
 8001df2:	20d0      	movs	r0, #208	; 0xd0
 8001df4:	f000 faa6 	bl	8002344 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8001df8:	211d      	movs	r1, #29
 8001dfa:	20d0      	movs	r0, #208	; 0xd0
 8001dfc:	f000 fae2 	bl	80023c4 <MPU9250_readByte>
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f023 030f 	bic.w	r3, r3, #15
 8001e0a:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f043 0303 	orr.w	r3, r3, #3
 8001e12:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	461a      	mov	r2, r3
 8001e18:	211d      	movs	r1, #29
 8001e1a:	20d0      	movs	r0, #208	; 0xd0
 8001e1c:	f000 fa92 	bl	8002344 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001e20:	2222      	movs	r2, #34	; 0x22
 8001e22:	2137      	movs	r1, #55	; 0x37
 8001e24:	20d0      	movs	r0, #208	; 0xd0
 8001e26:	f000 fa8d 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2138      	movs	r1, #56	; 0x38
 8001e2e:	20d0      	movs	r0, #208	; 0xd0
 8001e30:	f000 fa88 	bl	8002344 <MPU9250_writeByte>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200006d8 	.word	0x200006d8

08001e40 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b094      	sub	sp, #80	; 0x50
 8001e44:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	216b      	movs	r1, #107	; 0x6b
 8001e62:	20d0      	movs	r0, #208	; 0xd0
 8001e64:	f000 fa6e 	bl	8002344 <MPU9250_writeByte>
  HAL_Delay(100);
 8001e68:	2064      	movs	r0, #100	; 0x64
 8001e6a:	f009 fe67 	bl	800bb3c <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	216b      	movs	r1, #107	; 0x6b
 8001e72:	20d0      	movs	r0, #208	; 0xd0
 8001e74:	f000 fa66 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	216c      	movs	r1, #108	; 0x6c
 8001e7c:	20d0      	movs	r0, #208	; 0xd0
 8001e7e:	f000 fa61 	bl	8002344 <MPU9250_writeByte>
  HAL_Delay(200);
 8001e82:	20c8      	movs	r0, #200	; 0xc8
 8001e84:	f009 fe5a 	bl	800bb3c <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2138      	movs	r1, #56	; 0x38
 8001e8c:	20d0      	movs	r0, #208	; 0xd0
 8001e8e:	f000 fa59 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001e92:	2200      	movs	r2, #0
 8001e94:	2123      	movs	r1, #35	; 0x23
 8001e96:	20d0      	movs	r0, #208	; 0xd0
 8001e98:	f000 fa54 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	216b      	movs	r1, #107	; 0x6b
 8001ea0:	20d0      	movs	r0, #208	; 0xd0
 8001ea2:	f000 fa4f 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2124      	movs	r1, #36	; 0x24
 8001eaa:	20d0      	movs	r0, #208	; 0xd0
 8001eac:	f000 fa4a 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	216a      	movs	r1, #106	; 0x6a
 8001eb4:	20d0      	movs	r0, #208	; 0xd0
 8001eb6:	f000 fa45 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001eba:	220c      	movs	r2, #12
 8001ebc:	216a      	movs	r1, #106	; 0x6a
 8001ebe:	20d0      	movs	r0, #208	; 0xd0
 8001ec0:	f000 fa40 	bl	8002344 <MPU9250_writeByte>
  HAL_Delay(15);
 8001ec4:	200f      	movs	r0, #15
 8001ec6:	f009 fe39 	bl	800bb3c <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001eca:	2201      	movs	r2, #1
 8001ecc:	211a      	movs	r1, #26
 8001ece:	20d0      	movs	r0, #208	; 0xd0
 8001ed0:	f000 fa38 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2119      	movs	r1, #25
 8001ed8:	20d0      	movs	r0, #208	; 0xd0
 8001eda:	f000 fa33 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001ede:	2200      	movs	r2, #0
 8001ee0:	211b      	movs	r1, #27
 8001ee2:	20d0      	movs	r0, #208	; 0xd0
 8001ee4:	f000 fa2e 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001ee8:	2200      	movs	r2, #0
 8001eea:	211c      	movs	r1, #28
 8001eec:	20d0      	movs	r0, #208	; 0xd0
 8001eee:	f000 fa29 	bl	8002344 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	216a      	movs	r1, #106	; 0x6a
 8001ef6:	20d0      	movs	r0, #208	; 0xd0
 8001ef8:	f000 fa24 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001efc:	2278      	movs	r2, #120	; 0x78
 8001efe:	2123      	movs	r1, #35	; 0x23
 8001f00:	20d0      	movs	r0, #208	; 0xd0
 8001f02:	f000 fa1f 	bl	8002344 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001f06:	2028      	movs	r0, #40	; 0x28
 8001f08:	f009 fe18 	bl	800bb3c <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2123      	movs	r1, #35	; 0x23
 8001f10:	20d0      	movs	r0, #208	; 0xd0
 8001f12:	f000 fa17 	bl	8002344 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001f16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	2172      	movs	r1, #114	; 0x72
 8001f1e:	20d0      	movs	r0, #208	; 0xd0
 8001f20:	f000 fa2e 	bl	8002380 <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001f24:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001f3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f3e:	4ab3      	ldr	r2, [pc, #716]	; (800220c <MPU9250_calibrateMPU9250+0x3cc>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f50:	e071      	b.n	8002036 <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001f52:	2300      	movs	r3, #0
 8001f54:	813b      	strh	r3, [r7, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	81bb      	strh	r3, [r7, #12]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	803b      	strh	r3, [r7, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	807b      	strh	r3, [r7, #2]
 8001f66:	2300      	movs	r3, #0
 8001f68:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8001f6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f6e:	220c      	movs	r2, #12
 8001f70:	2174      	movs	r1, #116	; 0x74
 8001f72:	20d0      	movs	r0, #208	; 0xd0
 8001f74:	f000 fa04 	bl	8002380 <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001f78:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001f8c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001fa0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001fb4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001fc8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001fdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002000:	4413      	add	r3, r2
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002014:	4413      	add	r3, r2
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800201e:	4413      	add	r3, r2
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 800202c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002030:	3301      	adds	r3, #1
 8002032:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002036:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800203a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800203e:	429a      	cmp	r2, r3
 8002040:	d387      	bcc.n	8001f52 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002048:	fb92 f3f3 	sdiv	r3, r2, r3
 800204c:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002054:	fb92 f3f3 	sdiv	r3, r2, r3
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 800205a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800205c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002060:	fb92 f3f3 	sdiv	r3, r2, r3
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 8002066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002068:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800206c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 8002072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002074:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002078:	fb92 f3f3 	sdiv	r3, r2, r3
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 800207e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002080:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002084:	fb92 f3f3 	sdiv	r3, r2, r3
 8002088:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <MPU9250_calibrateMPU9250+0x3d0>)
 800208c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209c:	ee17 3a90 	vmov	r3, s15
 80020a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	dd05      	ble.n	80020b6 <MPU9250_calibrateMPU9250+0x276>
 80020aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b4:	e004      	b.n	80020c0 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80020b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020bc:	4413      	add	r3, r2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	425b      	negs	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da00      	bge.n	80020ca <MPU9250_calibrateMPU9250+0x28a>
 80020c8:	3303      	adds	r3, #3
 80020ca:	109b      	asrs	r3, r3, #2
 80020cc:	121b      	asrs	r3, r3, #8
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	425b      	negs	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da00      	bge.n	80020de <MPU9250_calibrateMPU9250+0x29e>
 80020dc:	3303      	adds	r3, #3
 80020de:	109b      	asrs	r3, r3, #2
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	425b      	negs	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da00      	bge.n	80020f0 <MPU9250_calibrateMPU9250+0x2b0>
 80020ee:	3303      	adds	r3, #3
 80020f0:	109b      	asrs	r3, r3, #2
 80020f2:	121b      	asrs	r3, r3, #8
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	425b      	negs	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da00      	bge.n	8002104 <MPU9250_calibrateMPU9250+0x2c4>
 8002102:	3303      	adds	r3, #3
 8002104:	109b      	asrs	r3, r3, #2
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	425b      	negs	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	da00      	bge.n	8002116 <MPU9250_calibrateMPU9250+0x2d6>
 8002114:	3303      	adds	r3, #3
 8002116:	109b      	asrs	r3, r3, #2
 8002118:	121b      	asrs	r3, r3, #8
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	425b      	negs	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	da00      	bge.n	800212a <MPU9250_calibrateMPU9250+0x2ea>
 8002128:	3303      	adds	r3, #3
 800212a:	109b      	asrs	r3, r3, #2
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8002132:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002136:	461a      	mov	r2, r3
 8002138:	2113      	movs	r1, #19
 800213a:	20d0      	movs	r0, #208	; 0xd0
 800213c:	f000 f902 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8002140:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002144:	461a      	mov	r2, r3
 8002146:	2114      	movs	r1, #20
 8002148:	20d0      	movs	r0, #208	; 0xd0
 800214a:	f000 f8fb 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 800214e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002152:	461a      	mov	r2, r3
 8002154:	2115      	movs	r1, #21
 8002156:	20d0      	movs	r0, #208	; 0xd0
 8002158:	f000 f8f4 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 800215c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002160:	461a      	mov	r2, r3
 8002162:	2116      	movs	r1, #22
 8002164:	20d0      	movs	r0, #208	; 0xd0
 8002166:	f000 f8ed 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 800216a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800216e:	461a      	mov	r2, r3
 8002170:	2117      	movs	r1, #23
 8002172:	20d0      	movs	r0, #208	; 0xd0
 8002174:	f000 f8e6 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8002178:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800217c:	461a      	mov	r2, r3
 800217e:	2118      	movs	r1, #24
 8002180:	20d0      	movs	r0, #208	; 0xd0
 8002182:	f000 f8df 	bl	8002344 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8002192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002196:	2202      	movs	r2, #2
 8002198:	2177      	movs	r1, #119	; 0x77
 800219a:	20d0      	movs	r0, #208	; 0xd0
 800219c:	f000 f8f0 	bl	8002380 <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80021a0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80021b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b6:	2202      	movs	r2, #2
 80021b8:	217a      	movs	r1, #122	; 0x7a
 80021ba:	20d0      	movs	r0, #208	; 0xd0
 80021bc:	f000 f8e0 	bl	8002380 <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80021c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80021d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d6:	2202      	movs	r2, #2
 80021d8:	217d      	movs	r1, #125	; 0x7d
 80021da:	20d0      	movs	r0, #208	; 0xd0
 80021dc:	f000 f8d0 	bl	8002380 <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80021e0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80021f2:	2301      	movs	r3, #1
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80021f6:	2300      	movs	r3, #0
 80021f8:	743b      	strb	r3, [r7, #16]
 80021fa:	2300      	movs	r3, #0
 80021fc:	747b      	strb	r3, [r7, #17]
 80021fe:	2300      	movs	r3, #0
 8002200:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 8002202:	2300      	movs	r3, #0
 8002204:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002208:	e01e      	b.n	8002248 <MPU9250_calibrateMPU9250+0x408>
 800220a:	bf00      	nop
 800220c:	aaaaaaab 	.word	0xaaaaaaab
 8002210:	200006d8 	.word	0x200006d8
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8002214:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800221e:	4413      	add	r3, r2
 8002220:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002224:	461a      	mov	r2, r3
 8002226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <MPU9250_calibrateMPU9250+0x3fe>
 800222e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002232:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002236:	4413      	add	r3, r2
 8002238:	2201      	movs	r2, #1
 800223a:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 800223e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002242:	3301      	adds	r3, #1
 8002244:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002248:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800224c:	2b02      	cmp	r3, #2
 800224e:	d9e1      	bls.n	8002214 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	da00      	bge.n	800225a <MPU9250_calibrateMPU9250+0x41a>
 8002258:	3307      	adds	r3, #7
 800225a:	10db      	asrs	r3, r3, #3
 800225c:	425b      	negs	r3, r3
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	da00      	bge.n	800226c <MPU9250_calibrateMPU9250+0x42c>
 800226a:	3307      	adds	r3, #7
 800226c:	10db      	asrs	r3, r3, #3
 800226e:	425b      	negs	r3, r3
 8002270:	4413      	add	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	da00      	bge.n	800227e <MPU9250_calibrateMPU9250+0x43e>
 800227c:	3307      	adds	r3, #7
 800227e:	10db      	asrs	r3, r3, #3
 8002280:	425b      	negs	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	121b      	asrs	r3, r3, #8
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002298:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800229c:	7c3b      	ldrb	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	121b      	asrs	r3, r3, #8
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80022b8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80022bc:	7c7b      	ldrb	r3, [r7, #17]
 80022be:	4313      	orrs	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	121b      	asrs	r3, r3, #8
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80022d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80022dc:	7cbb      	ldrb	r3, [r7, #18]
 80022de:	4313      	orrs	r3, r2
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Apparently this is not working for the acceleration biases in the MPU-9250
// Are we handling the temperature correction bit properly?
// Push accelerometer biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
 80022e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022ea:	461a      	mov	r2, r3
 80022ec:	2177      	movs	r1, #119	; 0x77
 80022ee:	20d0      	movs	r0, #208	; 0xd0
 80022f0:	f000 f828 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
 80022f4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80022f8:	461a      	mov	r2, r3
 80022fa:	2178      	movs	r1, #120	; 0x78
 80022fc:	20d0      	movs	r0, #208	; 0xd0
 80022fe:	f000 f821 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
 8002302:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002306:	461a      	mov	r2, r3
 8002308:	217a      	movs	r1, #122	; 0x7a
 800230a:	20d0      	movs	r0, #208	; 0xd0
 800230c:	f000 f81a 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
 8002310:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002314:	461a      	mov	r2, r3
 8002316:	217b      	movs	r1, #123	; 0x7b
 8002318:	20d0      	movs	r0, #208	; 0xd0
 800231a:	f000 f813 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
 800231e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002322:	461a      	mov	r2, r3
 8002324:	217d      	movs	r1, #125	; 0x7d
 8002326:	20d0      	movs	r0, #208	; 0xd0
 8002328:	f000 f80c 	bl	8002344 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
 800232c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002330:	461a      	mov	r2, r3
 8002332:	217e      	movs	r1, #126	; 0x7e
 8002334:	20d0      	movs	r0, #208	; 0xd0
 8002336:	f000 f805 	bl	8002344 <MPU9250_writeByte>

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 800233a:	bf00      	nop
 800233c:	3750      	adds	r7, #80	; 0x50
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop

08002344 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af04      	add	r7, sp, #16
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
 800234e:	460b      	mov	r3, r1
 8002350:	71bb      	strb	r3, [r7, #6]
 8002352:	4613      	mov	r3, r2
 8002354:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <MPU9250_writeByte+0x38>)
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	b299      	uxth	r1, r3
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	b29a      	uxth	r2, r3
 8002362:	2364      	movs	r3, #100	; 0x64
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	2301      	movs	r3, #1
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	1d7b      	adds	r3, r7, #5
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	f00a fe18 	bl	800cfa4 <HAL_I2C_Mem_Write>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200006d8 	.word	0x200006d8

08002380 <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b087      	sub	sp, #28
 8002384:	af04      	add	r7, sp, #16
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	460b      	mov	r3, r1
 800238e:	71bb      	strb	r3, [r7, #6]
 8002390:	4613      	mov	r3, r2
 8002392:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <MPU9250_readBytes+0x40>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	b299      	uxth	r1, r3
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	b29c      	uxth	r4, r3
 80023a0:	797b      	ldrb	r3, [r7, #5]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2264      	movs	r2, #100	; 0x64
 80023a6:	9202      	str	r2, [sp, #8]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	4622      	mov	r2, r4
 80023b2:	f00a fef1 	bl	800d198 <HAL_I2C_Mem_Read>
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	bf00      	nop
 80023c0:	200006d8 	.word	0x200006d8

080023c4 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	460a      	mov	r2, r1
 80023ce:	71fb      	strb	r3, [r7, #7]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 80023d4:	f107 030f 	add.w	r3, r7, #15
 80023d8:	79b9      	ldrb	r1, [r7, #6]
 80023da:	79f8      	ldrb	r0, [r7, #7]
 80023dc:	2201      	movs	r2, #1
 80023de:	f7ff ffcf 	bl	8002380 <MPU9250_readBytes>
	return data;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	70fb      	strb	r3, [r7, #3]
 80023fe:	460b      	mov	r3, r1
 8002400:	70bb      	strb	r3, [r7, #2]
 8002402:	4613      	mov	r3, r2
 8002404:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 8002406:	4a6f      	ldr	r2, [pc, #444]	; (80025c4 <BME280_init+0x1d8>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6013      	str	r3, [r2, #0]
	BME280_reset();
 800240c:	f000 f95c 	bl	80026c8 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 8002410:	78bb      	ldrb	r3, [r7, #2]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	21f2      	movs	r1, #242	; 0xf2
 800241c:	20ec      	movs	r0, #236	; 0xec
 800241e:	f000 fb47 	bl	8002ab0 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 8002422:	787b      	ldrb	r3, [r7, #1]
 8002424:	015b      	lsls	r3, r3, #5
 8002426:	b25a      	sxtb	r2, r3
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	b25b      	sxtb	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b25a      	sxtb	r2, r3
 8002432:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002436:	4313      	orrs	r3, r2
 8002438:	b25b      	sxtb	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	21f4      	movs	r1, #244	; 0xf4
 8002440:	20ec      	movs	r0, #236	; 0xec
 8002442:	f000 fb35 	bl	8002ab0 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 8002446:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800244a:	015b      	lsls	r3, r3, #5
 800244c:	b25a      	sxtb	r2, r3
 800244e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	b25b      	sxtb	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	b25b      	sxtb	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	21f5      	movs	r1, #245	; 0xf5
 8002460:	20ec      	movs	r0, #236	; 0xec
 8002462:	f000 fb25 	bl	8002ab0 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 8002466:	2032      	movs	r0, #50	; 0x32
 8002468:	f009 fb68 	bl	800bb3c <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	221a      	movs	r2, #26
 8002472:	2188      	movs	r1, #136	; 0x88
 8002474:	20ec      	movs	r0, #236	; 0xec
 8002476:	f000 fb39 	bl	8002aec <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 800247a:	7b7b      	ldrb	r3, [r7, #13]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b21a      	sxth	r2, r3
 8002480:	7b3b      	ldrb	r3, [r7, #12]
 8002482:	b21b      	sxth	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b21b      	sxth	r3, r3
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <BME280_init+0x1d8>)
 800248c:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21a      	sxth	r2, r3
 8002494:	7bbb      	ldrb	r3, [r7, #14]
 8002496:	b21b      	sxth	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b21a      	sxth	r2, r3
 800249c:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <BME280_init+0x1d8>)
 800249e:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 80024a0:	7c7b      	ldrb	r3, [r7, #17]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	7c3b      	ldrb	r3, [r7, #16]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <BME280_init+0x1d8>)
 80024b0:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	7cbb      	ldrb	r3, [r7, #18]
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <BME280_init+0x1d8>)
 80024c4:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 80024c6:	7d7b      	ldrb	r3, [r7, #21]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	7d3b      	ldrb	r3, [r7, #20]
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <BME280_init+0x1d8>)
 80024d6:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	b21a      	sxth	r2, r3
 80024de:	7dbb      	ldrb	r3, [r7, #22]
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <BME280_init+0x1d8>)
 80024e8:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 80024ea:	7e7b      	ldrb	r3, [r7, #25]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	7e3b      	ldrb	r3, [r7, #24]
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b21a      	sxth	r2, r3
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <BME280_init+0x1d8>)
 80024fa:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 80024fc:	7efb      	ldrb	r3, [r7, #27]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	b21a      	sxth	r2, r3
 8002502:	7ebb      	ldrb	r3, [r7, #26]
 8002504:	b21b      	sxth	r3, r3
 8002506:	4313      	orrs	r3, r2
 8002508:	b21a      	sxth	r2, r3
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <BME280_init+0x1d8>)
 800250c:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 800250e:	7f7b      	ldrb	r3, [r7, #29]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	b21a      	sxth	r2, r3
 8002514:	7f3b      	ldrb	r3, [r7, #28]
 8002516:	b21b      	sxth	r3, r3
 8002518:	4313      	orrs	r3, r2
 800251a:	b21a      	sxth	r2, r3
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <BME280_init+0x1d8>)
 800251e:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 8002520:	7ffb      	ldrb	r3, [r7, #31]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	b21a      	sxth	r2, r3
 8002526:	7fbb      	ldrb	r3, [r7, #30]
 8002528:	b21b      	sxth	r3, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	b21a      	sxth	r2, r3
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <BME280_init+0x1d8>)
 8002530:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 8002532:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	b21a      	sxth	r2, r3
 800253a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800253e:	b21b      	sxth	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b21a      	sxth	r2, r3
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <BME280_init+0x1d8>)
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 8002548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	b21a      	sxth	r2, r3
 8002550:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002554:	b21b      	sxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b21a      	sxth	r2, r3
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <BME280_init+0x1d8>)
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 800255e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <BME280_init+0x1d8>)
 8002564:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	2207      	movs	r2, #7
 800256c:	21e1      	movs	r1, #225	; 0xe1
 800256e:	20ec      	movs	r0, #236	; 0xec
 8002570:	f000 fabc 	bl	8002aec <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 8002574:	7b7b      	ldrb	r3, [r7, #13]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	b21a      	sxth	r2, r3
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	b21b      	sxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b21a      	sxth	r2, r3
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <BME280_init+0x1d8>)
 8002584:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 8002586:	7bba      	ldrb	r2, [r7, #14]
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <BME280_init+0x1d8>)
 800258a:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	021a      	lsls	r2, r3, #8
 8002590:	7c3b      	ldrb	r3, [r7, #16]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4313      	orrs	r3, r2
 8002598:	111b      	asrs	r3, r3, #4
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <BME280_init+0x1d8>)
 800259e:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 80025a0:	7c7b      	ldrb	r3, [r7, #17]
 80025a2:	021a      	lsls	r2, r3, #8
 80025a4:	7c3b      	ldrb	r3, [r7, #16]
 80025a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025aa:	4313      	orrs	r3, r2
 80025ac:	111b      	asrs	r3, r3, #4
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <BME280_init+0x1d8>)
 80025b2:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 80025b4:	7cba      	ldrb	r2, [r7, #18]
 80025b6:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <BME280_init+0x1d8>)
 80025b8:	73da      	strb	r2, [r3, #15]
}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	; 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000032c 	.word	0x2000032c

080025c8 <BME280_readIT>:

void BME280_readIT(){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <BME280_readIT+0x30>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10e      	bne.n	80025f4 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <BME280_readIT+0x34>)
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	2306      	movs	r3, #6
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <BME280_readIT+0x38>)
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2301      	movs	r3, #1
 80025e4:	22f7      	movs	r2, #247	; 0xf7
 80025e6:	21ec      	movs	r1, #236	; 0xec
 80025e8:	f00a fffc 	bl	800d5e4 <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 80025ec:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <BME280_readIT+0x30>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		return;
 80025f2:	bf00      	nop
	}
}
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000a6c 	.word	0x20000a6c
 80025fc:	2000032c 	.word	0x2000032c
 8002600:	20000330 	.word	0x20000330

08002604 <BME280_i2cRxCpltCallback>:

uint8_t BME280_i2cRxCpltCallback(){
 8002604:	b598      	push	{r3, r4, r7, lr}
 8002606:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return 0;
 8002608:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <BME280_i2cRxCpltCallback+0xb4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d001      	beq.n	8002614 <BME280_i2cRxCpltCallback+0x10>
 8002610:	2300      	movs	r3, #0
 8002612:	e04e      	b.n	80026b2 <BME280_i2cRxCpltCallback+0xae>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 8002616:	791b      	ldrb	r3, [r3, #4]
 8002618:	061a      	lsls	r2, r3, #24
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 800261c:	795b      	ldrb	r3, [r3, #5]
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 8002624:	799b      	ldrb	r3, [r3, #6]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	4313      	orrs	r3, r2
 800262a:	131b      	asrs	r3, r3, #12
 800262c:	461a      	mov	r2, r3
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 8002634:	79db      	ldrb	r3, [r3, #7]
 8002636:	061a      	lsls	r2, r3, #24
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 800263a:	7a1b      	ldrb	r3, [r3, #8]
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 8002642:	7a5b      	ldrb	r3, [r3, #9]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	4313      	orrs	r3, r2
 8002648:	131b      	asrs	r3, r3, #12
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 800264c:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f87e 	bl	8002754 <BME280_compensate_P>
 8002658:	4603      	mov	r3, r0
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff62 	bl	8000524 <__aeabi_ui2d>
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <BME280_i2cRxCpltCallback+0xbc>)
 8002666:	f7fe f901 	bl	800086c <__aeabi_ddiv>
 800266a:	4603      	mov	r3, r0
 800266c:	460c      	mov	r4, r1
 800266e:	4618      	mov	r0, r3
 8002670:	4621      	mov	r1, r4
 8002672:	f7fe fac9 	bl	8000c08 <__aeabi_d2f>
 8002676:	4602      	mov	r2, r0
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f82b 	bl	80026dc <BME280_compensate_T>
 8002686:	4603      	mov	r3, r0
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff5b 	bl	8000544 <__aeabi_i2d>
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <BME280_i2cRxCpltCallback+0xc0>)
 8002694:	f7fe f8ea 	bl	800086c <__aeabi_ddiv>
 8002698:	4603      	mov	r3, r0
 800269a:	460c      	mov	r4, r1
 800269c:	4618      	mov	r0, r3
 800269e:	4621      	mov	r1, r4
 80026a0:	f7fe fab2 	bl	8000c08 <__aeabi_d2f>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <BME280_i2cRxCpltCallback+0xb8>)
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40

//    bme280.alt = 44330 * (1.0 - pow(bme280.P / bme280.base_P, 0.1903));

    bm_i2cFlag = bm_i2cIdle;
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <BME280_i2cRxCpltCallback+0xb4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
    return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd98      	pop	{r3, r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000a6c 	.word	0x20000a6c
 80026bc:	2000032c 	.word	0x2000032c
 80026c0:	40d90000 	.word	0x40d90000
 80026c4:	40590000 	.word	0x40590000

080026c8 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 80026cc:	22b6      	movs	r2, #182	; 0xb6
 80026ce:	21e0      	movs	r1, #224	; 0xe0
 80026d0:	20ec      	movs	r0, #236	; 0xec
 80026d2:	f000 f9ed 	bl	8002ab0 <BME280_writeByte>
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	10da      	asrs	r2, r3, #3
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <BME280_compensate_T+0x74>)
 80026ea:	8a1b      	ldrh	r3, [r3, #16]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <BME280_compensate_T+0x74>)
 80026f2:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	12db      	asrs	r3, r3, #11
 80026fc:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	111b      	asrs	r3, r3, #4
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <BME280_compensate_T+0x74>)
 8002704:	8a12      	ldrh	r2, [r2, #16]
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	1112      	asrs	r2, r2, #4
 800270c:	4910      	ldr	r1, [pc, #64]	; (8002750 <BME280_compensate_T+0x74>)
 800270e:	8a09      	ldrh	r1, [r1, #16]
 8002710:	1a52      	subs	r2, r2, r1
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	131b      	asrs	r3, r3, #12
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <BME280_compensate_T+0x74>)
 800271a:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	139b      	asrs	r3, r3, #14
 8002724:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	4a08      	ldr	r2, [pc, #32]	; (8002750 <BME280_compensate_T+0x74>)
 800272e:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <BME280_compensate_T+0x74>)
 8002732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	3380      	adds	r3, #128	; 0x80
 800273c:	121b      	asrs	r3, r3, #8
 800273e:	60fb      	str	r3, [r7, #12]
	  return T;
 8002740:	68fb      	ldr	r3, [r7, #12]
}
 8002742:	4618      	mov	r0, r3
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	2000032c 	.word	0x2000032c

08002754 <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 8002754:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002758:	b088      	sub	sp, #32
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 800275e:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <BME280_compensate_P+0x1a0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4619      	mov	r1, r3
 8002764:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002768:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800276c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002770:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	fb02 f203 	mul.w	r2, r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	69b9      	ldr	r1, [r7, #24]
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	441a      	add	r2, r3
 8002786:	69b9      	ldr	r1, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fba1 3403 	umull	r3, r4, r1, r3
 800278e:	4422      	add	r2, r4
 8002790:	4614      	mov	r4, r2
 8002792:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <BME280_compensate_P+0x1a0>)
 8002794:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002798:	b211      	sxth	r1, r2
 800279a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800279e:	fb01 f504 	mul.w	r5, r1, r4
 80027a2:	fb03 f002 	mul.w	r0, r3, r2
 80027a6:	4428      	add	r0, r5
 80027a8:	fba3 3401 	umull	r3, r4, r3, r1
 80027ac:	1902      	adds	r2, r0, r4
 80027ae:	4614      	mov	r4, r2
 80027b0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80027b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <BME280_compensate_P+0x1a0>)
 80027ba:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80027be:	b21b      	sxth	r3, r3
 80027c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	fb04 f102 	mul.w	r1, r4, r2
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	fb03 f202 	mul.w	r2, r3, r2
 80027d0:	1888      	adds	r0, r1, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	fba2 1203 	umull	r1, r2, r2, r3
 80027d8:	1883      	adds	r3, r0, r2
 80027da:	461a      	mov	r2, r3
 80027dc:	f04f 0500 	mov.w	r5, #0
 80027e0:	f04f 0600 	mov.w	r6, #0
 80027e4:	0456      	lsls	r6, r2, #17
 80027e6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80027ea:	044d      	lsls	r5, r1, #17
 80027ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80027f0:	186b      	adds	r3, r5, r1
 80027f2:	eb46 0402 	adc.w	r4, r6, r2
 80027f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <BME280_compensate_P+0x1a0>)
 80027fc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002800:	b219      	sxth	r1, r3
 8002802:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002806:	f04f 0500 	mov.w	r5, #0
 800280a:	f04f 0600 	mov.w	r6, #0
 800280e:	00ce      	lsls	r6, r1, #3
 8002810:	2500      	movs	r5, #0
 8002812:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002816:	186b      	adds	r3, r5, r1
 8002818:	eb46 0402 	adc.w	r4, r6, r2
 800281c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	fb02 f203 	mul.w	r2, r2, r3
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	441a      	add	r2, r3
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fba1 3403 	umull	r3, r4, r1, r3
 800283a:	4422      	add	r2, r4
 800283c:	4614      	mov	r4, r2
 800283e:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <BME280_compensate_P+0x1a0>)
 8002840:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8002844:	b211      	sxth	r1, r2
 8002846:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800284a:	fb01 f504 	mul.w	r5, r1, r4
 800284e:	fb03 f002 	mul.w	r0, r3, r2
 8002852:	4428      	add	r0, r5
 8002854:	fba3 3401 	umull	r3, r4, r3, r1
 8002858:	1902      	adds	r2, r0, r4
 800285a:	4614      	mov	r4, r2
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	0a19      	lsrs	r1, r3, #8
 8002866:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800286a:	1222      	asrs	r2, r4, #8
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <BME280_compensate_P+0x1a0>)
 800286e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002872:	b21b      	sxth	r3, r3
 8002874:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002878:	69b8      	ldr	r0, [r7, #24]
 800287a:	fb04 f500 	mul.w	r5, r4, r0
 800287e:	69f8      	ldr	r0, [r7, #28]
 8002880:	fb03 f000 	mul.w	r0, r3, r0
 8002884:	4428      	add	r0, r5
 8002886:	69bd      	ldr	r5, [r7, #24]
 8002888:	fba5 5603 	umull	r5, r6, r5, r3
 800288c:	1983      	adds	r3, r0, r6
 800288e:	461e      	mov	r6, r3
 8002890:	f04f 0b00 	mov.w	fp, #0
 8002894:	f04f 0c00 	mov.w	ip, #0
 8002898:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800289c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80028a0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80028a4:	eb1b 0301 	adds.w	r3, fp, r1
 80028a8:	eb4c 0402 	adc.w	r4, ip, r2
 80028ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 80028b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80028b4:	1c19      	adds	r1, r3, #0
 80028b6:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <BME280_compensate_P+0x1a0>)
 80028bc:	8a5b      	ldrh	r3, [r3, #18]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f04f 0400 	mov.w	r4, #0
 80028c4:	fb03 f502 	mul.w	r5, r3, r2
 80028c8:	fb01 f004 	mul.w	r0, r1, r4
 80028cc:	4428      	add	r0, r5
 80028ce:	fba1 3403 	umull	r3, r4, r1, r3
 80028d2:	1902      	adds	r2, r0, r4
 80028d4:	4614      	mov	r4, r2
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	1061      	asrs	r1, r4, #1
 80028e0:	17e2      	asrs	r2, r4, #31
 80028e2:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 80028e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80028ea:	4323      	orrs	r3, r4
 80028ec:	d104      	bne.n	80028f8 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e0d7      	b.n	8002aa2 <BME280_compensate_P+0x34e>
 80028f2:	bf00      	nop
 80028f4:	2000032c 	.word	0x2000032c
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80028fe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002902:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	ea4f 0963 	mov.w	r9, r3, asr #1
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8002912:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002916:	4645      	mov	r5, r8
 8002918:	464e      	mov	r6, r9
 800291a:	1aed      	subs	r5, r5, r3
 800291c:	eb66 0604 	sbc.w	r6, r6, r4
 8002920:	46a8      	mov	r8, r5
 8002922:	46b1      	mov	r9, r6
 8002924:	eb18 0308 	adds.w	r3, r8, r8
 8002928:	eb49 0409 	adc.w	r4, r9, r9
 800292c:	4698      	mov	r8, r3
 800292e:	46a1      	mov	r9, r4
 8002930:	eb18 0805 	adds.w	r8, r8, r5
 8002934:	eb49 0906 	adc.w	r9, r9, r6
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8002944:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002948:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800294c:	eb18 0801 	adds.w	r8, r8, r1
 8002950:	eb49 0902 	adc.w	r9, r9, r2
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002960:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002964:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002968:	4688      	mov	r8, r1
 800296a:	4691      	mov	r9, r2
 800296c:	eb18 0805 	adds.w	r8, r8, r5
 8002970:	eb49 0906 	adc.w	r9, r9, r6
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002980:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002984:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002988:	4688      	mov	r8, r1
 800298a:	4691      	mov	r9, r2
 800298c:	eb18 0005 	adds.w	r0, r8, r5
 8002990:	eb49 0106 	adc.w	r1, r9, r6
 8002994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002998:	f7fe fa94 	bl	8000ec4 <__aeabi_ldivmod>
 800299c:	4603      	mov	r3, r0
 800299e:	460c      	mov	r4, r1
 80029a0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 80029a4:	4b41      	ldr	r3, [pc, #260]	; (8002aac <BME280_compensate_P+0x358>)
 80029a6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80029aa:	b219      	sxth	r1, r3
 80029ac:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80029b0:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f04f 0400 	mov.w	r4, #0
 80029bc:	0b6b      	lsrs	r3, r5, #13
 80029be:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80029c2:	1374      	asrs	r4, r6, #13
 80029c4:	fb03 f502 	mul.w	r5, r3, r2
 80029c8:	fb01 f004 	mul.w	r0, r1, r4
 80029cc:	4428      	add	r0, r5
 80029ce:	fba1 1203 	umull	r1, r2, r1, r3
 80029d2:	1883      	adds	r3, r0, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	0b6b      	lsrs	r3, r5, #13
 80029e4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80029e8:	1374      	asrs	r4, r6, #13
 80029ea:	fb03 f502 	mul.w	r5, r3, r2
 80029ee:	fb01 f004 	mul.w	r0, r1, r4
 80029f2:	4428      	add	r0, r5
 80029f4:	fba1 1203 	umull	r1, r2, r1, r3
 80029f8:	1883      	adds	r3, r0, r2
 80029fa:	461a      	mov	r2, r3
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	f04f 0400 	mov.w	r4, #0
 8002a04:	0e4b      	lsrs	r3, r1, #25
 8002a06:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002a0a:	1654      	asrs	r4, r2, #25
 8002a0c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <BME280_compensate_P+0x358>)
 8002a12:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	fb04 f102 	mul.w	r1, r4, r2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	fb03 f202 	mul.w	r2, r3, r2
 8002a28:	1888      	adds	r0, r1, r2
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	fba2 1203 	umull	r1, r2, r2, r3
 8002a30:	1883      	adds	r3, r0, r2
 8002a32:	461a      	mov	r2, r3
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0ccb      	lsrs	r3, r1, #19
 8002a3e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002a42:	14d4      	asrs	r4, r2, #19
 8002a44:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8002a48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002a4c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002a50:	eb11 0803 	adds.w	r8, r1, r3
 8002a54:	eb42 0904 	adc.w	r9, r2, r4
 8002a58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a5c:	eb13 0508 	adds.w	r5, r3, r8
 8002a60:	eb44 0609 	adc.w	r6, r4, r9
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	0a29      	lsrs	r1, r5, #8
 8002a6e:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002a72:	1232      	asrs	r2, r6, #8
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <BME280_compensate_P+0x358>)
 8002a76:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002a7a:	b21d      	sxth	r5, r3
 8002a7c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002a80:	f04f 0800 	mov.w	r8, #0
 8002a84:	f04f 0900 	mov.w	r9, #0
 8002a88:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002a8c:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002a90:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8002a94:	eb18 0301 	adds.w	r3, r8, r1
 8002a98:	eb49 0402 	adc.w	r4, r9, r2
 8002a9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002aac:	2000032c 	.word	0x2000032c

08002ab0 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af04      	add	r7, sp, #16
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	460b      	mov	r3, r1
 8002abc:	71bb      	strb	r3, [r7, #6]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <BME280_writeByte+0x38>)
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	79bb      	ldrb	r3, [r7, #6]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	2364      	movs	r3, #100	; 0x64
 8002ad0:	9302      	str	r3, [sp, #8]
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	1d7b      	adds	r3, r7, #5
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2301      	movs	r3, #1
 8002adc:	f00a fa62 	bl	800cfa4 <HAL_I2C_Mem_Write>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000032c 	.word	0x2000032c

08002aec <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af04      	add	r7, sp, #16
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	460b      	mov	r3, r1
 8002afa:	71bb      	strb	r3, [r7, #6]
 8002afc:	4613      	mov	r3, r2
 8002afe:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <BME280_readBytes+0x40>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	b299      	uxth	r1, r3
 8002b08:	79bb      	ldrb	r3, [r7, #6]
 8002b0a:	b29c      	uxth	r4, r3
 8002b0c:	797b      	ldrb	r3, [r7, #5]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2264      	movs	r2, #100	; 0x64
 8002b12:	9202      	str	r2, [sp, #8]
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	f00a fb3b 	bl	800d198 <HAL_I2C_Mem_Read>
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000032c 	.word	0x2000032c

08002b30 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <TM_GPS_Init+0x124>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 8002b3e:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <TM_GPS_Init+0x128>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 8002b46:	4844      	ldr	r0, [pc, #272]	; (8002c58 <TM_GPS_Init+0x128>)
 8002b48:	f001 f9f6 	bl	8003f38 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 8002b4c:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	4a41      	ldr	r2, [pc, #260]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b56:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b60:	4a3e      	ldr	r2, [pc, #248]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b62:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b6e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002b70:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f043 0320 	orr.w	r3, r3, #32
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b7a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002b7c:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	4a35      	ldr	r2, [pc, #212]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b86:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 8002b88:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b92:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002b9e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002baa:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bb6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc0:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bc2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bcc:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bce:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bda:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002be6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bf2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002bfe:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c0a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c16:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c22:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <TM_GPS_Init+0x12c>)
 8002c2e:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002c30:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <TM_GPS_Init+0x128>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <TM_GPS_Init+0x128>)
 8002c3a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c42:	4907      	ldr	r1, [pc, #28]	; (8002c60 <TM_GPS_Init+0x130>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f010 fb95 	bl	8013374 <HAL_UART_Receive_DMA>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200004c0 	.word	0x200004c0
 8002c58:	200007f8 	.word	0x200007f8
 8002c5c:	20000390 	.word	0x20000390
 8002c60:	20000924 	.word	0x20000924

08002c64 <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	71fb      	strb	r3, [r7, #7]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	e013      	b.n	8002c9c <TM_GPS_Update+0x38>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <TM_GPS_Update+0x60>)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	4810      	ldr	r0, [pc, #64]	; (8002cc4 <TM_GPS_Update+0x60>)
 8002c84:	f000 f8da 	bl	8002e3c <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <TM_GPS_Update+0x60>)
 8002c8a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <TM_GPS_Update+0x32>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 8002c92:	2300      	movs	r3, #0
 8002c94:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002ca2:	dbe7      	blt.n	8002c74 <TM_GPS_Update+0x10>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <TM_GPS_Update+0x64>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <TM_GPS_Update+0x54>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <TM_GPS_Update+0x60>)
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e000      	b.n	8002cba <TM_GPS_Update+0x56>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200007f8 	.word	0x200007f8
 8002cc8:	200004c0 	.word	0x200004c0

08002ccc <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	2b0e      	cmp	r3, #14
 8002cde:	f200 8086 	bhi.w	8002dee <TM_GPS_ConvertSpeed+0x122>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <TM_GPS_ConvertSpeed+0x1c>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d25 	.word	0x08002d25
 8002cec:	08002d33 	.word	0x08002d33
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002d4f 	.word	0x08002d4f
 8002cf8:	08002d5d 	.word	0x08002d5d
 8002cfc:	08002d6b 	.word	0x08002d6b
 8002d00:	08002d79 	.word	0x08002d79
 8002d04:	08002d87 	.word	0x08002d87
 8002d08:	08002d95 	.word	0x08002d95
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002db1 	.word	0x08002db1
 8002d14:	08002dbf 	.word	0x08002dbf
 8002d18:	08002dcd 	.word	0x08002dcd
 8002d1c:	08002ddb 	.word	0x08002ddb
 8002d20:	08002de9 	.word	0x08002de9
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 8002d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d28:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002e00 <TM_GPS_ConvertSpeed+0x134>
 8002d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d30:	e05f      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 8002d32:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d36:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002e04 <TM_GPS_ConvertSpeed+0x138>
 8002d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3e:	e058      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 8002d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d44:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002e08 <TM_GPS_ConvertSpeed+0x13c>
 8002d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4c:	e051      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 8002d4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d52:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002e0c <TM_GPS_ConvertSpeed+0x140>
 8002d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5a:	e04a      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002d5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d60:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e10 <TM_GPS_ConvertSpeed+0x144>
 8002d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d68:	e043      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d6e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002e14 <TM_GPS_ConvertSpeed+0x148>
 8002d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d76:	e03c      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 8002d78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002e18 <TM_GPS_ConvertSpeed+0x14c>
 8002d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d84:	e035      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 8002d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002e1c <TM_GPS_ConvertSpeed+0x150>
 8002d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d92:	e02e      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 8002d94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d98:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002e20 <TM_GPS_ConvertSpeed+0x154>
 8002d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da0:	e027      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 8002da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002da6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e24 <TM_GPS_ConvertSpeed+0x158>
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	e020      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 8002db0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002db4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e28 <TM_GPS_ConvertSpeed+0x15c>
 8002db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dbc:	e019      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 8002dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002e2c <TM_GPS_ConvertSpeed+0x160>
 8002dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dca:	e012      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 8002dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dd0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002e30 <TM_GPS_ConvertSpeed+0x164>
 8002dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd8:	e00b      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dde:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002e34 <TM_GPS_ConvertSpeed+0x168>
 8002de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de6:	e004      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dec:	e001      	b.n	8002df2 <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 8002dee:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002e38 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 8002df2:	eeb0 0a67 	vmov.f32	s0, s15
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	3a06bdf5 	.word	0x3a06bdf5
 8002e04:	3f03afb8 	.word	0x3f03afb8
 8002e08:	3fed0e56 	.word	0x3fed0e56
 8002e0c:	41f6f5c3 	.word	0x41f6f5c3
 8002e10:	39a79d68 	.word	0x39a79d68
 8002e14:	3f9353f8 	.word	0x3f9353f8
 8002e18:	3fd81062 	.word	0x3fd81062
 8002e1c:	42ca999a 	.word	0x42ca999a
 8002e20:	4201999a 	.word	0x4201999a
 8002e24:	44f30000 	.word	0x44f30000
 8002e28:	43426666 	.word	0x43426666
 8002e2c:	42508f5c 	.word	0x42508f5c
 8002e30:	45438000 	.word	0x45438000
 8002e34:	4331b333 	.word	0x4331b333
 8002e38:	00000000 	.word	0x00000000

08002e3c <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f001 f847 	bl	8003edc <TM_GPS_INT_FlagsOk>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f001 f86f 	bl	8003f38 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	2b24      	cmp	r3, #36	; 0x24
 8002e66:	d116      	bne.n	8002e96 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002e68:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <TM_GPS_INT_Do+0x1a4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <TM_GPS_INT_Do+0x1a8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <TM_GPS_INT_Do+0x1ac>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002e7a:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 8002e80:	4b5a      	ldr	r3, [pc, #360]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	b2d1      	uxtb	r1, r2
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002e8a:	7011      	strb	r1, [r2, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <TM_GPS_INT_Do+0x1b4>)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	5453      	strb	r3, [r2, r1]
 8002e94:	e09b      	b.n	8002fce <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	2b2c      	cmp	r3, #44	; 0x2c
 8002e9a:	d120      	bne.n	8002ede <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <TM_GPS_INT_Do+0x1a8>)
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	4053      	eors	r3, r2
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4b4f      	ldr	r3, [pc, #316]	; (8002fe4 <TM_GPS_INT_Do+0x1a8>)
 8002ea8:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 8002eaa:	4b50      	ldr	r3, [pc, #320]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	b2d1      	uxtb	r1, r2
 8002eb2:	4a4e      	ldr	r2, [pc, #312]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002eb4:	7011      	strb	r1, [r2, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <TM_GPS_INT_Do+0x1b4>)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f001 f85e 	bl	8003f80 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f89f 	bl	8003008 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <TM_GPS_INT_Do+0x1ac>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4b45      	ldr	r3, [pc, #276]	; (8002fe8 <TM_GPS_INT_Do+0x1ac>)
 8002ed4:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002ed6:	4b45      	ldr	r3, [pc, #276]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e077      	b.n	8002fce <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b0a      	cmp	r3, #10
 8002ee2:	d113      	bne.n	8002f0c <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002ee4:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <TM_GPS_INT_Do+0x1ac>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002eea:	4b42      	ldr	r3, [pc, #264]	; (8002ff4 <TM_GPS_INT_Do+0x1b8>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d16d      	bne.n	8002fce <TM_GPS_INT_Do+0x192>
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <TM_GPS_INT_Do+0x1bc>)
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <TM_GPS_INT_Do+0x1c0>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d167      	bne.n	8002fce <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8002efe:	4b40      	ldr	r3, [pc, #256]	; (8003000 <TM_GPS_INT_Do+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f06:	4a3e      	ldr	r2, [pc, #248]	; (8003000 <TM_GPS_INT_Do+0x1c4>)
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e060      	b.n	8002fce <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	2b0d      	cmp	r3, #13
 8002f10:	d128      	bne.n	8002f64 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 8002f12:	4b36      	ldr	r3, [pc, #216]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	b2d1      	uxtb	r1, r2
 8002f1a:	4a34      	ldr	r2, [pc, #208]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002f1c:	7011      	strb	r1, [r2, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b33      	ldr	r3, [pc, #204]	; (8002ff0 <TM_GPS_INT_Do+0x1b4>)
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8002f26:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <TM_GPS_INT_Do+0x1b4>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 ffac 	bl	8003e88 <TM_GPS_INT_Hex2Dec>
 8002f30:	4603      	mov	r3, r0
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	b2dc      	uxtb	r4, r3
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <TM_GPS_INT_Do+0x1b4>)
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 ffa4 	bl	8003e88 <TM_GPS_INT_Hex2Dec>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4423      	add	r3, r4
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <TM_GPS_INT_Do+0x1c8>)
 8002f48:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <TM_GPS_INT_Do+0x1c8>)
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <TM_GPS_INT_Do+0x1a8>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d002      	beq.n	8002f5c <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 ffee 	bl	8003f38 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <TM_GPS_INT_Do+0x1ac>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e034      	b.n	8002fce <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	2b2a      	cmp	r3, #42	; 0x2a
 8002f68:	d11c      	bne.n	8002fa4 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <TM_GPS_INT_Do+0x1a4>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	b2d1      	uxtb	r1, r2
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002f7a:	7011      	strb	r1, [r2, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <TM_GPS_INT_Do+0x1b4>)
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fffb 	bl	8003f80 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f83c 	bl	8003008 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <TM_GPS_INT_Do+0x1ac>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <TM_GPS_INT_Do+0x1ac>)
 8002f9a:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e014      	b.n	8002fce <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <TM_GPS_INT_Do+0x1a4>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 8002fac:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <TM_GPS_INT_Do+0x1a8>)
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	4053      	eors	r3, r2
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <TM_GPS_INT_Do+0x1a8>)
 8002fb8:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	b2d1      	uxtb	r1, r2
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <TM_GPS_INT_Do+0x1b0>)
 8002fc4:	7011      	strb	r1, [r2, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <TM_GPS_INT_Do+0x1b4>)
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fe44 	bl	8003c5c <TM_GPS_INT_Return>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd90      	pop	{r4, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000038b 	.word	0x2000038b
 8002fe4:	20000389 	.word	0x20000389
 8002fe8:	20000387 	.word	0x20000387
 8002fec:	20000388 	.word	0x20000388
 8002ff0:	20000378 	.word	0x20000378
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	200004cb 	.word	0x200004cb
 8002ffc:	200004cc 	.word	0x200004cc
 8003000:	2000038c 	.word	0x2000038c
 8003004:	2000038a 	.word	0x2000038a

08003008 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	ed2d 8b02 	vpush	{d8}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8003014:	48cb      	ldr	r0, [pc, #812]	; (8003344 <TM_GPS_INT_CheckTerm+0x33c>)
 8003016:	7800      	ldrb	r0, [r0, #0]
 8003018:	2800      	cmp	r0, #0
 800301a:	d134      	bne.n	8003086 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 800301c:	49ca      	ldr	r1, [pc, #808]	; (8003348 <TM_GPS_INT_CheckTerm+0x340>)
 800301e:	48cb      	ldr	r0, [pc, #812]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 8003020:	f000 fecc 	bl	8003dbc <TM_GPS_INT_StringStartsWith>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 800302a:	4bc9      	ldr	r3, [pc, #804]	; (8003350 <TM_GPS_INT_CheckTerm+0x348>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e023      	b.n	800307a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8003032:	49c8      	ldr	r1, [pc, #800]	; (8003354 <TM_GPS_INT_CheckTerm+0x34c>)
 8003034:	48c5      	ldr	r0, [pc, #788]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 8003036:	f000 fec1 	bl	8003dbc <TM_GPS_INT_StringStartsWith>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8003040:	4bc3      	ldr	r3, [pc, #780]	; (8003350 <TM_GPS_INT_CheckTerm+0x348>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e018      	b.n	800307a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8003048:	49c3      	ldr	r1, [pc, #780]	; (8003358 <TM_GPS_INT_CheckTerm+0x350>)
 800304a:	48c0      	ldr	r0, [pc, #768]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 800304c:	f000 feb6 	bl	8003dbc <TM_GPS_INT_StringStartsWith>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8003056:	4bbe      	ldr	r3, [pc, #760]	; (8003350 <TM_GPS_INT_CheckTerm+0x348>)
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e00d      	b.n	800307a <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 800305e:	49bf      	ldr	r1, [pc, #764]	; (800335c <TM_GPS_INT_CheckTerm+0x354>)
 8003060:	48ba      	ldr	r0, [pc, #744]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 8003062:	f000 feab 	bl	8003dbc <TM_GPS_INT_StringStartsWith>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 800306c:	4bb8      	ldr	r3, [pc, #736]	; (8003350 <TM_GPS_INT_CheckTerm+0x348>)
 800306e:	2203      	movs	r2, #3
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e002      	b.n	800307a <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 8003074:	4bb6      	ldr	r3, [pc, #728]	; (8003350 <TM_GPS_INT_CheckTerm+0x348>)
 8003076:	2204      	movs	r2, #4
 8003078:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 800307a:	49b4      	ldr	r1, [pc, #720]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 800307c:	48b8      	ldr	r0, [pc, #736]	; (8003360 <TM_GPS_INT_CheckTerm+0x358>)
 800307e:	f01b fc4d 	bl	801e91c <strcpy>
 8003082:	f000 bdd1 	b.w	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003086:	48b2      	ldr	r0, [pc, #712]	; (8003350 <TM_GPS_INT_CheckTerm+0x348>)
 8003088:	7800      	ldrb	r0, [r0, #0]
 800308a:	0140      	lsls	r0, r0, #5
 800308c:	4dad      	ldr	r5, [pc, #692]	; (8003344 <TM_GPS_INT_CheckTerm+0x33c>)
 800308e:	782d      	ldrb	r5, [r5, #0]
 8003090:	4328      	orrs	r0, r5
 8003092:	3801      	subs	r0, #1
 8003094:	2862      	cmp	r0, #98	; 0x62
 8003096:	f200 852f 	bhi.w	8003af8 <TM_GPS_INT_CheckTerm+0xaf0>
 800309a:	a501      	add	r5, pc, #4	; (adr r5, 80030a0 <TM_GPS_INT_CheckTerm+0x98>)
 800309c:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 80030a0:	08003649 	.word	0x08003649
 80030a4:	0800322d 	.word	0x0800322d
 80030a8:	0800331b 	.word	0x0800331b
 80030ac:	08003379 	.word	0x08003379
 80030b0:	08003467 	.word	0x08003467
 80030b4:	080034b1 	.word	0x080034b1
 80030b8:	0800348f 	.word	0x0800348f
 80030bc:	08003af9 	.word	0x08003af9
 80030c0:	080034d3 	.word	0x080034d3
 80030c4:	08003af9 	.word	0x08003af9
 80030c8:	08003af9 	.word	0x08003af9
 80030cc:	08003af9 	.word	0x08003af9
 80030d0:	08003af9 	.word	0x08003af9
 80030d4:	08003af9 	.word	0x08003af9
 80030d8:	08003af9 	.word	0x08003af9
 80030dc:	08003af9 	.word	0x08003af9
 80030e0:	08003af9 	.word	0x08003af9
 80030e4:	08003af9 	.word	0x08003af9
 80030e8:	08003af9 	.word	0x08003af9
 80030ec:	08003af9 	.word	0x08003af9
 80030f0:	08003af9 	.word	0x08003af9
 80030f4:	08003af9 	.word	0x08003af9
 80030f8:	08003af9 	.word	0x08003af9
 80030fc:	08003af9 	.word	0x08003af9
 8003100:	08003af9 	.word	0x08003af9
 8003104:	08003af9 	.word	0x08003af9
 8003108:	08003af9 	.word	0x08003af9
 800310c:	08003af9 	.word	0x08003af9
 8003110:	08003af9 	.word	0x08003af9
 8003114:	08003af9 	.word	0x08003af9
 8003118:	08003af9 	.word	0x08003af9
 800311c:	08003af9 	.word	0x08003af9
 8003120:	08003af9 	.word	0x08003af9
 8003124:	0800383f 	.word	0x0800383f
 8003128:	08003af9 	.word	0x08003af9
 800312c:	08003af9 	.word	0x08003af9
 8003130:	08003af9 	.word	0x08003af9
 8003134:	08003af9 	.word	0x08003af9
 8003138:	08003707 	.word	0x08003707
 800313c:	08003863 	.word	0x08003863
 8003140:	080037a5 	.word	0x080037a5
 8003144:	08003af9 	.word	0x08003af9
 8003148:	08003af9 	.word	0x08003af9
 800314c:	08003af9 	.word	0x08003af9
 8003150:	08003af9 	.word	0x08003af9
 8003154:	08003af9 	.word	0x08003af9
 8003158:	08003af9 	.word	0x08003af9
 800315c:	08003af9 	.word	0x08003af9
 8003160:	08003af9 	.word	0x08003af9
 8003164:	08003af9 	.word	0x08003af9
 8003168:	08003af9 	.word	0x08003af9
 800316c:	08003af9 	.word	0x08003af9
 8003170:	08003af9 	.word	0x08003af9
 8003174:	08003af9 	.word	0x08003af9
 8003178:	08003af9 	.word	0x08003af9
 800317c:	08003af9 	.word	0x08003af9
 8003180:	08003af9 	.word	0x08003af9
 8003184:	08003af9 	.word	0x08003af9
 8003188:	08003af9 	.word	0x08003af9
 800318c:	08003af9 	.word	0x08003af9
 8003190:	08003af9 	.word	0x08003af9
 8003194:	08003af9 	.word	0x08003af9
 8003198:	08003af9 	.word	0x08003af9
 800319c:	08003af9 	.word	0x08003af9
 80031a0:	08003af9 	.word	0x08003af9
 80031a4:	08003a65 	.word	0x08003a65
 80031a8:	08003a89 	.word	0x08003a89
 80031ac:	08003a89 	.word	0x08003a89
 80031b0:	08003a89 	.word	0x08003a89
 80031b4:	08003a89 	.word	0x08003a89
 80031b8:	08003a89 	.word	0x08003a89
 80031bc:	08003a89 	.word	0x08003a89
 80031c0:	08003a89 	.word	0x08003a89
 80031c4:	08003a89 	.word	0x08003a89
 80031c8:	08003a89 	.word	0x08003a89
 80031cc:	08003a89 	.word	0x08003a89
 80031d0:	08003a89 	.word	0x08003a89
 80031d4:	08003a89 	.word	0x08003a89
 80031d8:	08003971 	.word	0x08003971
 80031dc:	080038dd 	.word	0x080038dd
 80031e0:	080039eb 	.word	0x080039eb
 80031e4:	08003af9 	.word	0x08003af9
 80031e8:	08003af9 	.word	0x08003af9
 80031ec:	08003af9 	.word	0x08003af9
 80031f0:	08003af9 	.word	0x08003af9
 80031f4:	08003af9 	.word	0x08003af9
 80031f8:	08003af9 	.word	0x08003af9
 80031fc:	08003af9 	.word	0x08003af9
 8003200:	08003af9 	.word	0x08003af9
 8003204:	08003af9 	.word	0x08003af9
 8003208:	08003af9 	.word	0x08003af9
 800320c:	08003af9 	.word	0x08003af9
 8003210:	08003af9 	.word	0x08003af9
 8003214:	08003af9 	.word	0x08003af9
 8003218:	08003af9 	.word	0x08003af9
 800321c:	08003af9 	.word	0x08003af9
 8003220:	08003af9 	.word	0x08003af9
 8003224:	08003af9 	.word	0x08003af9
 8003228:	08003ad5 	.word	0x08003ad5
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	4619      	mov	r1, r3
 8003232:	4846      	ldr	r0, [pc, #280]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 8003234:	f000 fddf 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003238:	4603      	mov	r3, r0
 800323a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4a49      	ldr	r2, [pc, #292]	; (8003364 <TM_GPS_INT_CheckTerm+0x35c>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f96c 	bl	8000524 <__aeabi_ui2d>
 800324c:	4603      	mov	r3, r0
 800324e:	460c      	mov	r4, r1
 8003250:	4a45      	ldr	r2, [pc, #276]	; (8003368 <TM_GPS_INT_CheckTerm+0x360>)
 8003252:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <TM_GPS_INT_CheckTerm+0x360>)
 8003258:	e9d3 4500 	ldrd	r4, r5, [r3]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <TM_GPS_INT_CheckTerm+0x35c>)
 8003260:	fba3 1302 	umull	r1, r3, r3, r2
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	2164      	movs	r1, #100	; 0x64
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800336c <TM_GPS_INT_CheckTerm+0x364>
 800327a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800327e:	ee16 0a90 	vmov	r0, s13
 8003282:	f7fd f971 	bl	8000568 <__aeabi_f2d>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4620      	mov	r0, r4
 800328c:	4629      	mov	r1, r5
 800328e:	f7fd f80d 	bl	80002ac <__adddf3>
 8003292:	4603      	mov	r3, r0
 8003294:	460c      	mov	r4, r1
 8003296:	4a34      	ldr	r2, [pc, #208]	; (8003368 <TM_GPS_INT_CheckTerm+0x360>)
 8003298:	e9c2 3400 	strd	r3, r4, [r2]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	3301      	adds	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	4a29      	ldr	r2, [pc, #164]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 80032a6:	4413      	add	r3, r2
 80032a8:	f107 0208 	add.w	r2, r7, #8
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fda1 	bl	8003df6 <TM_GPS_INT_Atoi>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f932 	bl	8000524 <__aeabi_ui2d>
 80032c0:	4604      	mov	r4, r0
 80032c2:	460d      	mov	r5, r1
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	4619      	mov	r1, r3
 80032c8:	200a      	movs	r0, #10
 80032ca:	f000 fdc1 	bl	8003e50 <TM_GPS_INT_Pow>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f927 	bl	8000524 <__aeabi_ui2d>
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <TM_GPS_INT_CheckTerm+0x368>)
 80032dc:	f7fd f99c 	bl	8000618 <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fd fac0 	bl	800086c <__aeabi_ddiv>
 80032ec:	4603      	mov	r3, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	4618      	mov	r0, r3
 80032f2:	4621      	mov	r1, r4
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <TM_GPS_INT_CheckTerm+0x360>)
 80032f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4623      	mov	r3, r4
 80032fe:	f7fc ffd5 	bl	80002ac <__adddf3>
 8003302:	4603      	mov	r3, r0
 8003304:	460c      	mov	r4, r1
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <TM_GPS_INT_CheckTerm+0x360>)
 8003308:	e9c2 3400 	strd	r3, r4, [r2]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <TM_GPS_INT_CheckTerm+0x36c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <TM_GPS_INT_CheckTerm+0x36c>)
 8003316:	6013      	str	r3, [r2, #0]
			break;
 8003318:	e3f1      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <TM_GPS_INT_CheckTerm+0x344>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b53      	cmp	r3, #83	; 0x53
 8003320:	d108      	bne.n	8003334 <TM_GPS_INT_CheckTerm+0x32c>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <TM_GPS_INT_CheckTerm+0x360>)
 8003324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003328:	4619      	mov	r1, r3
 800332a:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <TM_GPS_INT_CheckTerm+0x360>)
 8003330:	e9c3 1200 	strd	r1, r2, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <TM_GPS_INT_CheckTerm+0x36c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <TM_GPS_INT_CheckTerm+0x36c>)
 800333e:	6013      	str	r3, [r2, #0]
			break;
 8003340:	e3dd      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
 8003342:	bf00      	nop
 8003344:	20000387 	.word	0x20000387
 8003348:	08021e00 	.word	0x08021e00
 800334c:	20000378 	.word	0x20000378
 8003350:	20000000 	.word	0x20000000
 8003354:	08021e08 	.word	0x08021e08
 8003358:	08021e10 	.word	0x08021e10
 800335c:	08021e18 	.word	0x08021e18
 8003360:	200004c4 	.word	0x200004c4
 8003364:	51eb851f 	.word	0x51eb851f
 8003368:	20000398 	.word	0x20000398
 800336c:	42700000 	.word	0x42700000
 8003370:	404e0000 	.word	0x404e0000
 8003374:	2000038c 	.word	0x2000038c
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003378:	f107 0308 	add.w	r3, r7, #8
 800337c:	4619      	mov	r1, r3
 800337e:	48ab      	ldr	r0, [pc, #684]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 8003380:	f000 fd39 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4aa9      	ldr	r2, [pc, #676]	; (8003630 <TM_GPS_INT_CheckTerm+0x628>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd f8c6 	bl	8000524 <__aeabi_ui2d>
 8003398:	4603      	mov	r3, r0
 800339a:	460c      	mov	r4, r1
 800339c:	4aa5      	ldr	r2, [pc, #660]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 800339e:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 80033a2:	4ba4      	ldr	r3, [pc, #656]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 80033a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	4ba1      	ldr	r3, [pc, #644]	; (8003630 <TM_GPS_INT_CheckTerm+0x628>)
 80033ac:	fba3 1302 	umull	r1, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	2164      	movs	r1, #100	; 0x64
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8003638 <TM_GPS_INT_CheckTerm+0x630>
 80033c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033ca:	ee16 0a90 	vmov	r0, s13
 80033ce:	f7fd f8cb 	bl	8000568 <__aeabi_f2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4620      	mov	r0, r4
 80033d8:	4629      	mov	r1, r5
 80033da:	f7fc ff67 	bl	80002ac <__adddf3>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	4a94      	ldr	r2, [pc, #592]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 80033e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	3301      	adds	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	4a8e      	ldr	r2, [pc, #568]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 80033f2:	4413      	add	r3, r2
 80033f4:	f107 0208 	add.w	r2, r7, #8
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fcfb 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd f88c 	bl	8000524 <__aeabi_ui2d>
 800340c:	4604      	mov	r4, r0
 800340e:	460d      	mov	r5, r1
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	4619      	mov	r1, r3
 8003414:	200a      	movs	r0, #10
 8003416:	f000 fd1b 	bl	8003e50 <TM_GPS_INT_Pow>
 800341a:	4603      	mov	r3, r0
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f881 	bl	8000524 <__aeabi_ui2d>
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	4b85      	ldr	r3, [pc, #532]	; (800363c <TM_GPS_INT_CheckTerm+0x634>)
 8003428:	f7fd f8f6 	bl	8000618 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4620      	mov	r0, r4
 8003432:	4629      	mov	r1, r5
 8003434:	f7fd fa1a 	bl	800086c <__aeabi_ddiv>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	4618      	mov	r0, r3
 800343e:	4621      	mov	r1, r4
 8003440:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 8003442:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003446:	461a      	mov	r2, r3
 8003448:	4623      	mov	r3, r4
 800344a:	f7fc ff2f 	bl	80002ac <__adddf3>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	4a78      	ldr	r2, [pc, #480]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 8003454:	e9c2 3402 	strd	r3, r4, [r2, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8003458:	4b79      	ldr	r3, [pc, #484]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	4a77      	ldr	r2, [pc, #476]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 8003462:	6013      	str	r3, [r2, #0]
			break;
 8003464:	e34b      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8003466:	4a71      	ldr	r2, [pc, #452]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 8003468:	7812      	ldrb	r2, [r2, #0]
 800346a:	2a57      	cmp	r2, #87	; 0x57
 800346c:	d108      	bne.n	8003480 <TM_GPS_INT_CheckTerm+0x478>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 800346e:	4a71      	ldr	r2, [pc, #452]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 8003470:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8003474:	460b      	mov	r3, r1
 8003476:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 800347a:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 800347c:	e9c2 3402 	strd	r3, r4, [r2, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	4a6d      	ldr	r2, [pc, #436]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 800348a:	6013      	str	r3, [r2, #0]
			break;
 800348c:	e337      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	4619      	mov	r1, r3
 8003494:	4865      	ldr	r0, [pc, #404]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 8003496:	f000 fcae 	bl	8003df6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 80034a0:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	4a65      	ldr	r2, [pc, #404]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 80034ac:	6013      	str	r3, [r2, #0]
			break;
 80034ae:	e326      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80034b0:	f107 0308 	add.w	r3, r7, #8
 80034b4:	4619      	mov	r1, r3
 80034b6:	485d      	ldr	r0, [pc, #372]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 80034b8:	f000 fc9d 	bl	8003df6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 80034c2:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f043 0308 	orr.w	r3, r3, #8
 80034cc:	4a5c      	ldr	r2, [pc, #368]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 80034ce:	6013      	str	r3, [r2, #0]
			break;
 80034d0:	e315      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 80034d2:	4b56      	ldr	r3, [pc, #344]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b2d      	cmp	r3, #45	; 0x2d
 80034d8:	d156      	bne.n	8003588 <TM_GPS_INT_CheckTerm+0x580>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	4619      	mov	r1, r3
 80034e0:	4858      	ldr	r0, [pc, #352]	; (8003644 <TM_GPS_INT_CheckTerm+0x63c>)
 80034e2:	f000 fc88 	bl	8003df6 <TM_GPS_INT_Atoi>
 80034e6:	4603      	mov	r3, r0
 80034e8:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f4:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 80034f6:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3301      	adds	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	3301      	adds	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	4a48      	ldr	r2, [pc, #288]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 800350a:	4413      	add	r3, r2
 800350c:	f107 0208 	add.w	r2, r7, #8
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fc6f 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003518:	4603      	mov	r3, r0
 800351a:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd f800 	bl	8000524 <__aeabi_ui2d>
 8003524:	4604      	mov	r4, r0
 8003526:	460d      	mov	r5, r1
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	4619      	mov	r1, r3
 800352c:	200a      	movs	r0, #10
 800352e:	f000 fc8f 	bl	8003e50 <TM_GPS_INT_Pow>
 8003532:	4603      	mov	r3, r0
 8003534:	4618      	mov	r0, r3
 8003536:	f7fc fff5 	bl	8000524 <__aeabi_ui2d>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4620      	mov	r0, r4
 8003540:	4629      	mov	r1, r5
 8003542:	f7fd f993 	bl	800086c <__aeabi_ddiv>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	4625      	mov	r5, r4
 800354c:	461c      	mov	r4, r3
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd f808 	bl	8000568 <__aeabi_f2d>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4620      	mov	r0, r4
 800355e:	4629      	mov	r1, r5
 8003560:	f7fc fea4 	bl	80002ac <__adddf3>
 8003564:	4603      	mov	r3, r0
 8003566:	460c      	mov	r4, r1
 8003568:	4618      	mov	r0, r3
 800356a:	4621      	mov	r1, r4
 800356c:	f7fd fb4c 	bl	8000c08 <__aeabi_d2f>
 8003570:	4602      	mov	r2, r0
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 8003574:	611a      	str	r2, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 8003578:	edd3 7a04 	vldr	s15, [r3, #16]
 800357c:	eef1 7a67 	vneg.f32	s15, s15
 8003580:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 8003582:	edc3 7a04 	vstr	s15, [r3, #16]
 8003586:	e04a      	b.n	800361e <TM_GPS_INT_CheckTerm+0x616>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4619      	mov	r1, r3
 800358e:	4827      	ldr	r0, [pc, #156]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 8003590:	f000 fc31 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 80035a4:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	3301      	adds	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <TM_GPS_INT_CheckTerm+0x624>)
 80035b2:	4413      	add	r3, r2
 80035b4:	f107 0208 	add.w	r2, r7, #8
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fc1b 	bl	8003df6 <TM_GPS_INT_Atoi>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ffac 	bl	8000524 <__aeabi_ui2d>
 80035cc:	4604      	mov	r4, r0
 80035ce:	460d      	mov	r5, r1
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	4619      	mov	r1, r3
 80035d4:	200a      	movs	r0, #10
 80035d6:	f000 fc3b 	bl	8003e50 <TM_GPS_INT_Pow>
 80035da:	4603      	mov	r3, r0
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffa1 	bl	8000524 <__aeabi_ui2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f7fd f93f 	bl	800086c <__aeabi_ddiv>
 80035ee:	4603      	mov	r3, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	4625      	mov	r5, r4
 80035f4:	461c      	mov	r4, r3
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ffb4 	bl	8000568 <__aeabi_f2d>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4620      	mov	r0, r4
 8003606:	4629      	mov	r1, r5
 8003608:	f7fc fe50 	bl	80002ac <__adddf3>
 800360c:	4603      	mov	r3, r0
 800360e:	460c      	mov	r4, r1
 8003610:	4618      	mov	r0, r3
 8003612:	4621      	mov	r1, r4
 8003614:	f7fd faf8 	bl	8000c08 <__aeabi_d2f>
 8003618:	4602      	mov	r2, r0
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <TM_GPS_INT_CheckTerm+0x62c>)
 800361c:	611a      	str	r2, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f043 0310 	orr.w	r3, r3, #16
 8003626:	4a06      	ldr	r2, [pc, #24]	; (8003640 <TM_GPS_INT_CheckTerm+0x638>)
 8003628:	6013      	str	r3, [r2, #0]
			break;
 800362a:	e268      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
 800362c:	20000378 	.word	0x20000378
 8003630:	51eb851f 	.word	0x51eb851f
 8003634:	20000398 	.word	0x20000398
 8003638:	42700000 	.word	0x42700000
 800363c:	404e0000 	.word	0x404e0000
 8003640:	2000038c 	.word	0x2000038c
 8003644:	20000379 	.word	0x20000379
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003648:	f107 0308 	add.w	r3, r7, #8
 800364c:	4619      	mov	r1, r3
 800364e:	48c2      	ldr	r0, [pc, #776]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 8003650:	f000 fbd1 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4bc0      	ldr	r3, [pc, #768]	; (800395c <TM_GPS_INT_CheckTerm+0x954>)
 800365c:	fba3 1302 	umull	r1, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	2164      	movs	r1, #100	; 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4bbc      	ldr	r3, [pc, #752]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 800366e:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8003964 <TM_GPS_INT_CheckTerm+0x95c>
 800367e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003686:	ee17 2a90 	vmov	r2, s15
 800368a:	4bb4      	ldr	r3, [pc, #720]	; (800395c <TM_GPS_INT_CheckTerm+0x954>)
 800368c:	fb83 1302 	smull	r1, r3, r3, r2
 8003690:	1159      	asrs	r1, r3, #5
 8003692:	17d3      	asrs	r3, r2, #31
 8003694:	1acb      	subs	r3, r1, r3
 8003696:	2164      	movs	r1, #100	; 0x64
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4baf      	ldr	r3, [pc, #700]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80036a2:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ae:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003968 <TM_GPS_INT_CheckTerm+0x960>
 80036b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ba:	ee17 2a90 	vmov	r2, s15
 80036be:	4ba7      	ldr	r3, [pc, #668]	; (800395c <TM_GPS_INT_CheckTerm+0x954>)
 80036c0:	fb83 1302 	smull	r1, r3, r3, r2
 80036c4:	1159      	asrs	r1, r3, #5
 80036c6:	17d3      	asrs	r3, r2, #31
 80036c8:	1acb      	subs	r3, r1, r3
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4ba2      	ldr	r3, [pc, #648]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80036d6:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	3301      	adds	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	4a9d      	ldr	r2, [pc, #628]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 80036e2:	4413      	add	r3, r2
 80036e4:	f107 0208 	add.w	r2, r7, #8
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fb83 	bl	8003df6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	4b9a      	ldr	r3, [pc, #616]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80036f6:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 80036f8:	4b9c      	ldr	r3, [pc, #624]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003700:	4a9a      	ldr	r2, [pc, #616]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 8003702:	6013      	str	r3, [r2, #0]
			break;
 8003704:	e1fb      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	4619      	mov	r1, r3
 800370c:	4892      	ldr	r0, [pc, #584]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 800370e:	f000 fb72 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003712:	4603      	mov	r3, r0
 8003714:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003720:	4b8f      	ldr	r3, [pc, #572]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 8003722:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3301      	adds	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	4a8a      	ldr	r2, [pc, #552]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 8003730:	4413      	add	r3, r2
 8003732:	f107 0208 	add.w	r2, r7, #8
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fb5c 	bl	8003df6 <TM_GPS_INT_Atoi>
 800373e:	4603      	mov	r3, r0
 8003740:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374c:	ee17 0a90 	vmov	r0, s15
 8003750:	f7fc ff0a 	bl	8000568 <__aeabi_f2d>
 8003754:	4604      	mov	r4, r0
 8003756:	460d      	mov	r5, r1
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	4619      	mov	r1, r3
 800375c:	200a      	movs	r0, #10
 800375e:	f000 fb77 	bl	8003e50 <TM_GPS_INT_Pow>
 8003762:	4603      	mov	r3, r0
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fedd 	bl	8000524 <__aeabi_ui2d>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fd f87b 	bl	800086c <__aeabi_ddiv>
 8003776:	4603      	mov	r3, r0
 8003778:	460c      	mov	r4, r1
 800377a:	4618      	mov	r0, r3
 800377c:	4621      	mov	r1, r4
 800377e:	f7fd fa43 	bl	8000c08 <__aeabi_d2f>
 8003782:	ee07 0a10 	vmov	s14, r0
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 8003788:	edd3 7a08 	vldr	s15, [r3, #32]
 800378c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003790:	4b73      	ldr	r3, [pc, #460]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 8003792:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 8003796:	4b75      	ldr	r3, [pc, #468]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	4a73      	ldr	r2, [pc, #460]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 80037a0:	6013      	str	r3, [r2, #0]
			break;
 80037a2:	e1ac      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80037a4:	f107 0308 	add.w	r3, r7, #8
 80037a8:	4619      	mov	r1, r3
 80037aa:	486b      	ldr	r0, [pc, #428]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 80037ac:	f000 fb23 	bl	8003df6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	4b6a      	ldr	r3, [pc, #424]	; (800395c <TM_GPS_INT_CheckTerm+0x954>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80037c6:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003964 <TM_GPS_INT_CheckTerm+0x95c>
 80037d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037de:	ee17 2a90 	vmov	r2, s15
 80037e2:	4b5e      	ldr	r3, [pc, #376]	; (800395c <TM_GPS_INT_CheckTerm+0x954>)
 80037e4:	fb83 1302 	smull	r1, r3, r3, r2
 80037e8:	1159      	asrs	r1, r3, #5
 80037ea:	17d3      	asrs	r3, r2, #31
 80037ec:	1acb      	subs	r3, r1, r3
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80037fa:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003968 <TM_GPS_INT_CheckTerm+0x960>
 800380a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800380e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003812:	ee17 2a90 	vmov	r2, s15
 8003816:	4b51      	ldr	r3, [pc, #324]	; (800395c <TM_GPS_INT_CheckTerm+0x954>)
 8003818:	fb83 1302 	smull	r1, r3, r3, r2
 800381c:	1159      	asrs	r1, r3, #5
 800381e:	17d3      	asrs	r3, r2, #31
 8003820:	1acb      	subs	r3, r1, r3
 8003822:	2164      	movs	r1, #100	; 0x64
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b4c      	ldr	r3, [pc, #304]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 800382e:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 8003830:	4b4e      	ldr	r3, [pc, #312]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003838:	4a4c      	ldr	r2, [pc, #304]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 800383a:	6013      	str	r3, [r2, #0]
			break;
 800383c:	e15f      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b41      	cmp	r3, #65	; 0x41
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4b44      	ldr	r3, [pc, #272]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800385c:	4a43      	ldr	r2, [pc, #268]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 800385e:	6013      	str	r3, [r2, #0]
			break;
 8003860:	e14d      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4619      	mov	r1, r3
 8003868:	483b      	ldr	r0, [pc, #236]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 800386a:	f000 fac4 	bl	8003df6 <TM_GPS_INT_Atoi>
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387c:	4b38      	ldr	r3, [pc, #224]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 800387e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	3301      	adds	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	4a33      	ldr	r2, [pc, #204]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 800388c:	4413      	add	r3, r2
 800388e:	f107 0208 	add.w	r2, r7, #8
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f000 faae 	bl	8003df6 <TM_GPS_INT_Atoi>
 800389a:	4603      	mov	r3, r0
 800389c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	4619      	mov	r1, r3
 80038ac:	200a      	movs	r0, #10
 80038ae:	f000 facf 	bl	8003e50 <TM_GPS_INT_Pow>
 80038b2:	ee07 0a90 	vmov	s15, r0
 80038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ba:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80038be:	4b28      	ldr	r3, [pc, #160]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80038c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80038c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80038ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 80038ce:	4b27      	ldr	r3, [pc, #156]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d6:	4a25      	ldr	r2, [pc, #148]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 80038d8:	6013      	str	r3, [r2, #0]
			break;
 80038da:	e110      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80038dc:	f107 0308 	add.w	r3, r7, #8
 80038e0:	4619      	mov	r1, r3
 80038e2:	481d      	ldr	r0, [pc, #116]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 80038e4:	f000 fa87 	bl	8003df6 <TM_GPS_INT_Atoi>
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 80038f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	3301      	adds	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <TM_GPS_INT_CheckTerm+0x950>)
 8003906:	4413      	add	r3, r2
 8003908:	f107 0208 	add.w	r2, r7, #8
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fa71 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	4619      	mov	r1, r3
 8003926:	200a      	movs	r0, #10
 8003928:	f000 fa92 	bl	8003e50 <TM_GPS_INT_Pow>
 800392c:	ee07 0a90 	vmov	s15, r0
 8003930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003934:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 800393a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800393e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <TM_GPS_INT_CheckTerm+0x958>)
 8003944:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003950:	4a06      	ldr	r2, [pc, #24]	; (800396c <TM_GPS_INT_CheckTerm+0x964>)
 8003952:	6013      	str	r3, [r2, #0]
			break;
 8003954:	e0d3      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
 8003956:	bf00      	nop
 8003958:	20000378 	.word	0x20000378
 800395c:	51eb851f 	.word	0x51eb851f
 8003960:	20000398 	.word	0x20000398
 8003964:	3c23d70a 	.word	0x3c23d70a
 8003968:	38d1b717 	.word	0x38d1b717
 800396c:	2000038c 	.word	0x2000038c
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4619      	mov	r1, r3
 8003976:	48af      	ldr	r0, [pc, #700]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003978:	f000 fa3d 	bl	8003df6 <TM_GPS_INT_Atoi>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	4bab      	ldr	r3, [pc, #684]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 800398c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	3301      	adds	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	4aa6      	ldr	r2, [pc, #664]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 800399a:	4413      	add	r3, r2
 800399c:	f107 0208 	add.w	r2, r7, #8
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fa27 	bl	8003df6 <TM_GPS_INT_Atoi>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	4619      	mov	r1, r3
 80039ba:	200a      	movs	r0, #10
 80039bc:	f000 fa48 	bl	8003e50 <TM_GPS_INT_Pow>
 80039c0:	ee07 0a90 	vmov	s15, r0
 80039c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c8:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80039cc:	4b9a      	ldr	r3, [pc, #616]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 80039ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80039d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d6:	4b98      	ldr	r3, [pc, #608]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 80039d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 80039dc:	4b97      	ldr	r3, [pc, #604]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039e4:	4a95      	ldr	r2, [pc, #596]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 80039e6:	6013      	str	r3, [r2, #0]
			break;
 80039e8:	e089      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	4619      	mov	r1, r3
 80039f0:	4890      	ldr	r0, [pc, #576]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 80039f2:	f000 fa00 	bl	8003df6 <TM_GPS_INT_Atoi>
 80039f6:	4603      	mov	r3, r0
 80039f8:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a06:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	4a88      	ldr	r2, [pc, #544]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a14:	4413      	add	r3, r2
 8003a16:	f107 0208 	add.w	r2, r7, #8
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f9ea 	bl	8003df6 <TM_GPS_INT_Atoi>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	4619      	mov	r1, r3
 8003a34:	200a      	movs	r0, #10
 8003a36:	f000 fa0b 	bl	8003e50 <TM_GPS_INT_Pow>
 8003a3a:	ee07 0a90 	vmov	s15, r0
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a48:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a50:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a52:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 8003a56:	4b79      	ldr	r3, [pc, #484]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a5e:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a60:	6013      	str	r3, [r2, #0]
			break;
 8003a62:	e04c      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4872      	ldr	r0, [pc, #456]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a6c:	f000 f9c3 	bl	8003df6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b70      	ldr	r3, [pc, #448]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 8003a7a:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a82:	4a6e      	ldr	r2, [pc, #440]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003a84:	6013      	str	r3, [r2, #0]
			break;
 8003a86:	e03a      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4869      	ldr	r0, [pc, #420]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003a90:	f000 f9b1 	bl	8003df6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	3b03      	subs	r3, #3
 8003a9c:	b2d1      	uxtb	r1, r2
 8003a9e:	4a66      	ldr	r2, [pc, #408]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 8003aa8:	4b66      	ldr	r3, [pc, #408]	; (8003c44 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b64      	ldr	r3, [pc, #400]	; (8003c44 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003ab2:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 8003ab4:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ab6:	7d1a      	ldrb	r2, [r3, #20]
 8003ab8:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d11d      	bne.n	8003afc <TM_GPS_INT_CheckTerm+0xaf4>
				ids_count = 0;						/* Reset count, we have all statements */
 8003ac0:	4b60      	ldr	r3, [pc, #384]	; (8003c44 <TM_GPS_INT_CheckTerm+0xc3c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003ac6:	4b5d      	ldr	r3, [pc, #372]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ace:	4a5b      	ldr	r2, [pc, #364]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003ad0:	6013      	str	r3, [r2, #0]
			}
			break;
 8003ad2:	e013      	b.n	8003afc <TM_GPS_INT_CheckTerm+0xaf4>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003ad4:	f107 0308 	add.w	r3, r7, #8
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4856      	ldr	r0, [pc, #344]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003adc:	f000 f98b 	bl	8003df6 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 8003aea:	4b54      	ldr	r3, [pc, #336]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af2:	4a52      	ldr	r2, [pc, #328]	; (8003c3c <TM_GPS_INT_CheckTerm+0xc34>)
 8003af4:	6013      	str	r3, [r2, #0]
			break;
 8003af6:	e002      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
#endif
		default: 
			break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <TM_GPS_INT_CheckTerm+0xaf6>
			break;
 8003afc:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003afe:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <TM_GPS_INT_CheckTerm+0xc40>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	f040 8090 	bne.w	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
		if (GPS_Term_Number == 1) {
 8003b08:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d109      	bne.n	8003b24 <TM_GPS_INT_CheckTerm+0xb1c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	4619      	mov	r1, r3
 8003b16:	4847      	ldr	r0, [pc, #284]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b18:	f000 f96d 	bl	8003df6 <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <TM_GPS_INT_CheckTerm+0xc44>)
 8003b22:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 8003b24:	4b46      	ldr	r3, [pc, #280]	; (8003c40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d109      	bne.n	8003b40 <TM_GPS_INT_CheckTerm+0xb38>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	4619      	mov	r1, r3
 8003b32:	4840      	ldr	r0, [pc, #256]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b34:	f000 f95f 	bl	8003df6 <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <TM_GPS_INT_CheckTerm+0xc48>)
 8003b3e:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d96f      	bls.n	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 8003b48:	f107 0308 	add.w	r3, r7, #8
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4839      	ldr	r0, [pc, #228]	; (8003c34 <TM_GPS_INT_CheckTerm+0xc2c>)
 8003b50:	f000 f951 	bl	8003df6 <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 8003b54:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <TM_GPS_INT_CheckTerm+0xc38>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	3b04      	subs	r3, #4
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	4b3d      	ldr	r3, [pc, #244]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b5e:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 8003b60:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b6c:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 8003b6e:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <TM_GPS_INT_CheckTerm+0xc48>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	333f      	adds	r3, #63	; 0x3f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b88:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 8003b8a:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b17      	cmp	r3, #23
 8003b90:	d84a      	bhi.n	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc50>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10e      	bne.n	8003bb8 <TM_GPS_INT_CheckTerm+0xbb0>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	b2d0      	uxtb	r0, r2
 8003ba4:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	440b      	add	r3, r1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	3346      	adds	r3, #70	; 0x46
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e037      	b.n	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 1) {
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc50>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d10e      	bne.n	8003bde <TM_GPS_INT_CheckTerm+0xbd6>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	b2d0      	uxtb	r0, r2
 8003bca:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003bcc:	460b      	mov	r3, r1
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	440b      	add	r3, r1
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3347      	adds	r3, #71	; 0x47
 8003bd8:	4602      	mov	r2, r0
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e024      	b.n	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 2) {
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc50>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d10e      	bne.n	8003c04 <TM_GPS_INT_CheckTerm+0xbfc>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	4619      	mov	r1, r3
 8003bee:	b290      	uxth	r0, r2
 8003bf0:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	440b      	add	r3, r1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3348      	adds	r3, #72	; 0x48
 8003bfe:	4602      	mov	r2, r0
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	e011      	b.n	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
				} else if (GPGSV_Term_Mod == 3) {
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <TM_GPS_INT_CheckTerm+0xc50>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d10d      	bne.n	8003c28 <TM_GPS_INT_CheckTerm+0xc20>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <TM_GPS_INT_CheckTerm+0xc4c>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	4619      	mov	r1, r3
 8003c14:	b2d0      	uxtb	r0, r2
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <TM_GPS_INT_CheckTerm+0xc30>)
 8003c18:	460b      	mov	r3, r1
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	440b      	add	r3, r1
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	334a      	adds	r3, #74	; 0x4a
 8003c24:	4602      	mov	r2, r0
 8003c26:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	ecbd 8b02 	vpop	{d8}
 8003c30:	bdb0      	pop	{r4, r5, r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000378 	.word	0x20000378
 8003c38:	20000398 	.word	0x20000398
 8003c3c:	2000038c 	.word	0x2000038c
 8003c40:	20000387 	.word	0x20000387
 8003c44:	200004cf 	.word	0x200004cf
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	200004cb 	.word	0x200004cb
 8003c50:	200004cc 	.word	0x200004cc
 8003c54:	200004cd 	.word	0x200004cd
 8003c58:	200004ce 	.word	0x200004ce

08003c5c <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f939 	bl	8003edc <TM_GPS_INT_FlagsOk>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 808d 	beq.w	8003d8c <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 8003c72:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <TM_GPS_INT_Return+0x158>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 8003c78:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003c86:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003c90:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003c92:	7d1a      	ldrb	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8003c98:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003c9a:	7d5a      	ldrb	r2, [r3, #21]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a43      	ldr	r2, [pc, #268]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003cac:	3316      	adds	r3, #22
 8003cae:	3216      	adds	r2, #22
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	6019      	str	r1, [r3, #0]
 8003cb4:	8892      	ldrh	r2, [r2, #4]
 8003cb6:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003cc4:	331c      	adds	r3, #28
 8003cc6:	321c      	adds	r2, #28
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	8019      	strh	r1, [r3, #0]
 8003cce:	3302      	adds	r3, #2
 8003cd0:	0c12      	lsrs	r2, r2, #16
 8003cd2:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003cd4:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003cd6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8003ce0:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8003ce8:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8003cf0:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003d00:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003d02:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e00d      	b.n	8003d2e <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	4928      	ldr	r1, [pc, #160]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003d18:	440a      	add	r2, r1
 8003d1a:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	460a      	mov	r2, r1
 8003d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b0b      	cmp	r3, #11
 8003d32:	d9ee      	bls.n	8003d12 <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003d36:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e019      	b.n	8003d7a <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	7bf9      	ldrb	r1, [r7, #15]
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	440b      	add	r3, r1
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4403      	add	r3, r0
 8003d56:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8003d5a:	4917      	ldr	r1, [pc, #92]	; (8003db8 <TM_GPS_INT_Return+0x15c>)
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	440b      	add	r3, r1
 8003d66:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	6019      	str	r1, [r3, #0]
 8003d70:	8892      	ldrh	r2, [r2, #4]
 8003d72:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	3301      	adds	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b17      	cmp	r3, #23
 8003d7e:	d9e2      	bls.n	8003d46 <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e00e      	b.n	8003daa <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <TM_GPS_INT_Return+0x158>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e004      	b.n	8003daa <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003da8:	2301      	movs	r3, #1
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd90      	pop	{r4, r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200004c0 	.word	0x200004c0
 8003db8:	20000398 	.word	0x20000398

08003dbc <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	while (*str) {
 8003dc6:	e00b      	b.n	8003de0 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	603a      	str	r2, [r7, #0]
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1c59      	adds	r1, r3, #1
 8003dd4:	6079      	str	r1, [r7, #4]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e004      	b.n	8003dea <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ef      	bne.n	8003dc8 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8003de8:	2301      	movs	r3, #1
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8003e0a:	e012      	b.n	8003e32 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4619      	mov	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	440b      	add	r3, r1
 8003e24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	601a      	str	r2, [r3, #0]
		count++;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b2f      	cmp	r3, #47	; 0x2f
 8003e38:	d903      	bls.n	8003e42 <TM_GPS_INT_Atoi+0x4c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b39      	cmp	r3, #57	; 0x39
 8003e40:	d9e4      	bls.n	8003e0c <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	460a      	mov	r2, r1
 8003e5a:	71fb      	strb	r3, [r7, #7]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 8003e60:	2301      	movs	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003e64:	e004      	b.n	8003e70 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 8003e66:	79fa      	ldrb	r2, [r7, #7]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	60fb      	str	r3, [r7, #12]
	while (y--) {
 8003e70:	79bb      	ldrb	r3, [r7, #6]
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	71ba      	strb	r2, [r7, #6]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f5      	bne.n	8003e66 <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	2b2f      	cmp	r3, #47	; 0x2f
 8003e96:	d906      	bls.n	8003ea6 <TM_GPS_INT_Hex2Dec+0x1e>
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b39      	cmp	r3, #57	; 0x39
 8003e9c:	d803      	bhi.n	8003ea6 <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	3b30      	subs	r3, #48	; 0x30
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e014      	b.n	8003ed0 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d906      	bls.n	8003eba <TM_GPS_INT_Hex2Dec+0x32>
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	2b46      	cmp	r3, #70	; 0x46
 8003eb0:	d803      	bhi.n	8003eba <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	3b37      	subs	r3, #55	; 0x37
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e00a      	b.n	8003ed0 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d906      	bls.n	8003ece <TM_GPS_INT_Hex2Dec+0x46>
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	2b66      	cmp	r3, #102	; 0x66
 8003ec4:	d803      	bhi.n	8003ece <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	3b57      	subs	r3, #87	; 0x57
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e000      	b.n	8003ed0 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <TM_GPS_INT_FlagsOk+0x54>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <TM_GPS_INT_FlagsOk+0x58>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d118      	bne.n	8003f22 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e00d      	b.n	8003f12 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	333e      	adds	r3, #62	; 0x3e
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	7ddb      	ldrb	r3, [r3, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e00b      	b.n	8003f24 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d3eb      	bcc.n	8003ef6 <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	2000038c 	.word	0x2000038c
 8003f34:	20000390 	.word	0x20000390

08003f38 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <TM_GPS_INT_ClearFlags+0x44>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	e00a      	b.n	8003f62 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	333e      	adds	r3, #62	; 0x3e
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3ee      	bcc.n	8003f4c <TM_GPS_INT_ClearFlags+0x14>
	}
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	2000038c 	.word	0x2000038c

08003f80 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8003f88:	4baf      	ldr	r3, [pc, #700]	; (8004248 <TM_GPS_INT_CheckEmpty+0x2c8>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	f040 8151 	bne.w	8004234 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003f92:	4bae      	ldr	r3, [pc, #696]	; (800424c <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	015b      	lsls	r3, r3, #5
 8003f98:	4aad      	ldr	r2, [pc, #692]	; (8004250 <TM_GPS_INT_CheckEmpty+0x2d0>)
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	2b62      	cmp	r3, #98	; 0x62
 8003fa2:	f200 8149 	bhi.w	8004238 <TM_GPS_INT_CheckEmpty+0x2b8>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <TM_GPS_INT_CheckEmpty+0x2c>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	0800419b 	.word	0x0800419b
 8003fb0:	08004139 	.word	0x08004139
 8003fb4:	08004147 	.word	0x08004147
 8003fb8:	08004155 	.word	0x08004155
 8003fbc:	08004163 	.word	0x08004163
 8003fc0:	0800417f 	.word	0x0800417f
 8003fc4:	08004171 	.word	0x08004171
 8003fc8:	08004239 	.word	0x08004239
 8003fcc:	0800418d 	.word	0x0800418d
 8003fd0:	08004239 	.word	0x08004239
 8003fd4:	08004239 	.word	0x08004239
 8003fd8:	08004239 	.word	0x08004239
 8003fdc:	08004239 	.word	0x08004239
 8003fe0:	08004239 	.word	0x08004239
 8003fe4:	08004239 	.word	0x08004239
 8003fe8:	08004239 	.word	0x08004239
 8003fec:	08004239 	.word	0x08004239
 8003ff0:	08004239 	.word	0x08004239
 8003ff4:	08004239 	.word	0x08004239
 8003ff8:	08004239 	.word	0x08004239
 8003ffc:	08004239 	.word	0x08004239
 8004000:	08004239 	.word	0x08004239
 8004004:	08004239 	.word	0x08004239
 8004008:	08004239 	.word	0x08004239
 800400c:	08004239 	.word	0x08004239
 8004010:	08004239 	.word	0x08004239
 8004014:	08004239 	.word	0x08004239
 8004018:	08004239 	.word	0x08004239
 800401c:	08004239 	.word	0x08004239
 8004020:	08004239 	.word	0x08004239
 8004024:	08004239 	.word	0x08004239
 8004028:	08004239 	.word	0x08004239
 800402c:	08004239 	.word	0x08004239
 8004030:	080041c5 	.word	0x080041c5
 8004034:	08004239 	.word	0x08004239
 8004038:	08004239 	.word	0x08004239
 800403c:	08004239 	.word	0x08004239
 8004040:	08004239 	.word	0x08004239
 8004044:	080041a9 	.word	0x080041a9
 8004048:	080041d3 	.word	0x080041d3
 800404c:	080041b7 	.word	0x080041b7
 8004050:	08004239 	.word	0x08004239
 8004054:	08004239 	.word	0x08004239
 8004058:	08004239 	.word	0x08004239
 800405c:	08004239 	.word	0x08004239
 8004060:	08004239 	.word	0x08004239
 8004064:	08004239 	.word	0x08004239
 8004068:	08004239 	.word	0x08004239
 800406c:	08004239 	.word	0x08004239
 8004070:	08004239 	.word	0x08004239
 8004074:	08004239 	.word	0x08004239
 8004078:	08004239 	.word	0x08004239
 800407c:	08004239 	.word	0x08004239
 8004080:	08004239 	.word	0x08004239
 8004084:	08004239 	.word	0x08004239
 8004088:	08004239 	.word	0x08004239
 800408c:	08004239 	.word	0x08004239
 8004090:	08004239 	.word	0x08004239
 8004094:	08004239 	.word	0x08004239
 8004098:	08004239 	.word	0x08004239
 800409c:	08004239 	.word	0x08004239
 80040a0:	08004239 	.word	0x08004239
 80040a4:	08004239 	.word	0x08004239
 80040a8:	08004239 	.word	0x08004239
 80040ac:	08004239 	.word	0x08004239
 80040b0:	0800420b 	.word	0x0800420b
 80040b4:	08004219 	.word	0x08004219
 80040b8:	08004219 	.word	0x08004219
 80040bc:	08004219 	.word	0x08004219
 80040c0:	08004219 	.word	0x08004219
 80040c4:	08004219 	.word	0x08004219
 80040c8:	08004219 	.word	0x08004219
 80040cc:	08004219 	.word	0x08004219
 80040d0:	08004219 	.word	0x08004219
 80040d4:	08004219 	.word	0x08004219
 80040d8:	08004219 	.word	0x08004219
 80040dc:	08004219 	.word	0x08004219
 80040e0:	08004219 	.word	0x08004219
 80040e4:	080041ef 	.word	0x080041ef
 80040e8:	080041e1 	.word	0x080041e1
 80040ec:	080041fd 	.word	0x080041fd
 80040f0:	08004239 	.word	0x08004239
 80040f4:	08004239 	.word	0x08004239
 80040f8:	08004239 	.word	0x08004239
 80040fc:	08004239 	.word	0x08004239
 8004100:	08004239 	.word	0x08004239
 8004104:	08004239 	.word	0x08004239
 8004108:	08004239 	.word	0x08004239
 800410c:	08004239 	.word	0x08004239
 8004110:	08004239 	.word	0x08004239
 8004114:	08004239 	.word	0x08004239
 8004118:	08004239 	.word	0x08004239
 800411c:	08004239 	.word	0x08004239
 8004120:	08004239 	.word	0x08004239
 8004124:	08004239 	.word	0x08004239
 8004128:	08004239 	.word	0x08004239
 800412c:	08004239 	.word	0x08004239
 8004130:	08004239 	.word	0x08004239
 8004134:	08004227 	.word	0x08004227
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	4a44      	ldr	r2, [pc, #272]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e079      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 8004146:	4b43      	ldr	r3, [pc, #268]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414e:	4a41      	ldr	r2, [pc, #260]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e072      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 8004154:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	4a3d      	ldr	r2, [pc, #244]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	e06b      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 8004162:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f043 0320 	orr.w	r3, r3, #32
 800416a:	4a3a      	ldr	r2, [pc, #232]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e064      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 8004170:	4b38      	ldr	r3, [pc, #224]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	4a36      	ldr	r2, [pc, #216]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	e05d      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 800417e:	4b35      	ldr	r3, [pc, #212]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f043 0308 	orr.w	r3, r3, #8
 8004186:	4a33      	ldr	r2, [pc, #204]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e056      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 800418c:	4b31      	ldr	r3, [pc, #196]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f043 0310 	orr.w	r3, r3, #16
 8004194:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	e04f      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a2:	4a2c      	ldr	r2, [pc, #176]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e048      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e041      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041be:	4a25      	ldr	r2, [pc, #148]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e03a      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041cc:	4a21      	ldr	r2, [pc, #132]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e033      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e02c      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 80041e0:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041e8:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e025      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041f6:	4a17      	ldr	r2, [pc, #92]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01e      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	e017      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004212:	4a10      	ldr	r2, [pc, #64]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	e010      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004222:	6013      	str	r3, [r2, #0]
				break;
 8004224:	e009      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e002      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8004238:	bf00      	nop
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000388 	.word	0x20000388
 800424c:	20000000 	.word	0x20000000
 8004250:	20000387 	.word	0x20000387
 8004254:	2000038c 	.word	0x2000038c

08004258 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004262:	edd7 7a01 	vldr	s15, [r7, #4]
 8004266:	eef0 7ae7 	vabs.f32	s15, s15
 800426a:	eeb0 0a67 	vmov.f32	s0, s15
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004282:	ed97 0a01 	vldr	s0, [r7, #4]
 8004286:	f017 fe51 	bl	801bf2c <ceilf>
 800428a:	eef0 7a40 	vmov.f32	s15, s0
 800428e:	eeb0 0a67 	vmov.f32	s0, s15
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	ed87 0a01 	vstr	s0, [r7, #4]
 80042a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80042a6:	f017 fec1 	bl	801c02c <floorf>
 80042aa:	eef0 7a40 	vmov.f32	s15, s0
 80042ae:	eeb0 0a67 	vmov.f32	s0, s15
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <_Z13rt_roundf_snff>:
//
#include "Second_att_control_codeblock_fly.h"
#include "Second_att_control_codeblock_fly_private.h"

real32_T rt_roundf_snf(real32_T u)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if (std::abs(u) < 8.388608E+6F) {
 80042c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80042c6:	f7ff ffc7 	bl	8004258 <_ZSt3absf>
 80042ca:	eeb0 7a40 	vmov.f32	s14, s0
 80042ce:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004364 <_Z13rt_roundf_snff+0xac>
 80042d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042da:	bf4c      	ite	mi
 80042dc:	2301      	movmi	r3, #1
 80042de:	2300      	movpl	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d034      	beq.n	8004350 <_Z13rt_roundf_snff+0x98>
    if (u >= 0.5F) {
 80042e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80042ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f6:	db0c      	blt.n	8004312 <_Z13rt_roundf_snff+0x5a>
      y = std::floor(u + 0.5F);
 80042f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80042fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004300:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004304:	eeb0 0a67 	vmov.f32	s0, s15
 8004308:	f7ff ffc6 	bl	8004298 <_ZSt5floorf>
 800430c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004310:	e020      	b.n	8004354 <_Z13rt_roundf_snff+0x9c>
    } else if (u > -0.5F) {
 8004312:	edd7 7a01 	vldr	s15, [r7, #4]
 8004316:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800431a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004322:	dd08      	ble.n	8004336 <_Z13rt_roundf_snff+0x7e>
      y = u * 0.0F;
 8004324:	edd7 7a01 	vldr	s15, [r7, #4]
 8004328:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004368 <_Z13rt_roundf_snff+0xb0>
 800432c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004330:	edc7 7a03 	vstr	s15, [r7, #12]
 8004334:	e00e      	b.n	8004354 <_Z13rt_roundf_snff+0x9c>
    } else {
      y = std::ceil(u - 0.5F);
 8004336:	edd7 7a01 	vldr	s15, [r7, #4]
 800433a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800433e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	f7ff ff97 	bl	8004278 <_ZSt4ceilf>
 800434a:	ed87 0a03 	vstr	s0, [r7, #12]
 800434e:	e001      	b.n	8004354 <_Z13rt_roundf_snff+0x9c>
    }
  } else {
    y = u;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60fb      	str	r3, [r7, #12]
  }

  return y;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	ee07 3a90 	vmov	s15, r3
}
 800435a:	eeb0 0a67 	vmov.f32	s0, s15
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	4b000000 	.word	0x4b000000
 8004368:	00000000 	.word	0x00000000

0800436c <_ZN23px4_AlgorithmModelClass4stepEv>:

// Model step function
void px4_AlgorithmModelClass::step()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  // DataTypeConversion: '<S3>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/set_roll'

  Second_att_control_codeblock__B.DataTypeConversion =
    Second_att_control_codeblock__U.set_roll;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
  Second_att_control_codeblock__B.DataTypeConversion =
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	edc3 7a00 	vstr	s15, [r3]

  // Fcn: '<S3>/Fcn2'
  Second_att_control_codeblock__B.Fcn2 =
    (Second_att_control_codeblock__B.DataTypeConversion - 1500.0F) / 500.0F;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8004624 <_ZN23px4_AlgorithmModelClass4stepEv+0x2b8>
 8004392:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004396:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8004628 <_ZN23px4_AlgorithmModelClass4stepEv+0x2bc>
 800439a:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn2 =
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	edc3 7a01 	vstr	s15, [r3, #4]

  // Saturate: '<S3>/Saturation9'
  u0 = Second_att_control_codeblock__B.Fcn2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation9_LowerSat;
 80043aa:	4ba0      	ldr	r3, [pc, #640]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation9_UpperSat;
 80043b0:	4b9e      	ldr	r3, [pc, #632]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 80043b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80043ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80043be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c6:	dd03      	ble.n	80043d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x64>
    Second_att_control_codeblock__B.Saturation9 = u2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	e00f      	b.n	80043f0 <_ZN23px4_AlgorithmModelClass4stepEv+0x84>
  } else if (u0 < u1) {
 80043d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80043d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	d503      	bpl.n	80043ea <_ZN23px4_AlgorithmModelClass4stepEv+0x7e>
    Second_att_control_codeblock__B.Saturation9 = u1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e002      	b.n	80043f0 <_ZN23px4_AlgorithmModelClass4stepEv+0x84>
  } else {
    Second_att_control_codeblock__B.Saturation9 = u0;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	609a      	str	r2, [r3, #8]

  // DataTypeConversion: '<S3>/Data Type Conversion1' incorporates:
  //   Inport: '<Root>/set_pitch'

  Second_att_control_codeblock__B.DataTypeConversion1 =
    Second_att_control_codeblock__U.set_pitch;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
  Second_att_control_codeblock__B.DataTypeConversion1 =
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	edc3 7a03 	vstr	s15, [r3, #12]

  // Fcn: '<S3>/Fcn5'
  Second_att_control_codeblock__B.Fcn5 =
    (Second_att_control_codeblock__B.DataTypeConversion1 - 1500.0F) / 500.0F;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	edd3 7a03 	vldr	s15, [r3, #12]
 800440a:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004624 <_ZN23px4_AlgorithmModelClass4stepEv+0x2b8>
 800440e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004412:	eddf 6a85 	vldr	s13, [pc, #532]	; 8004628 <_ZN23px4_AlgorithmModelClass4stepEv+0x2bc>
 8004416:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn5 =
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	edc3 7a04 	vstr	s15, [r3, #16]

  // Saturate: '<S3>/Saturation8'
  u0 = Second_att_control_codeblock__B.Fcn5;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation8_LowerSat;
 8004426:	4b81      	ldr	r3, [pc, #516]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation8_UpperSat;
 800442c:	4b7f      	ldr	r3, [pc, #508]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8004432:	ed97 7a04 	vldr	s14, [r7, #16]
 8004436:	edd7 7a02 	vldr	s15, [r7, #8]
 800443a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	dd03      	ble.n	800444c <_ZN23px4_AlgorithmModelClass4stepEv+0xe0>
    Second_att_control_codeblock__B.Saturation8 = u2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	615a      	str	r2, [r3, #20]
 800444a:	e00f      	b.n	800446c <_ZN23px4_AlgorithmModelClass4stepEv+0x100>
  } else if (u0 < u1) {
 800444c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004450:	edd7 7a03 	vldr	s15, [r7, #12]
 8004454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445c:	d503      	bpl.n	8004466 <_ZN23px4_AlgorithmModelClass4stepEv+0xfa>
    Second_att_control_codeblock__B.Saturation8 = u1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	615a      	str	r2, [r3, #20]
 8004464:	e002      	b.n	800446c <_ZN23px4_AlgorithmModelClass4stepEv+0x100>
  } else {
    Second_att_control_codeblock__B.Saturation8 = u0;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	615a      	str	r2, [r3, #20]

  // End of Saturate: '<S3>/Saturation8'

  // Gain: '<S3>/Gain2'
  Second_att_control_codeblock__B.Gain2[0] =
    Second_att_control_codeblock__P.Gain2_Gain[0] *
 800446c:	4b6f      	ldr	r3, [pc, #444]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 800446e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock__B.Saturation9;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock__P.Gain2_Gain[0] *
 8004478:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain2[0] =
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	edc3 7a06 	vstr	s15, [r3, #24]
  Second_att_control_codeblock__B.Gain2[1] =
    Second_att_control_codeblock__P.Gain2_Gain[1] *
 8004482:	4b6a      	ldr	r3, [pc, #424]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8004484:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
    Second_att_control_codeblock__B.Saturation8;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	edd3 7a05 	vldr	s15, [r3, #20]
    Second_att_control_codeblock__P.Gain2_Gain[1] *
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain2[1] =
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	edc3 7a07 	vstr	s15, [r3, #28]

  // Gain: '<S3>/Gain'
  Second_att_control_codeblock__B.Gain[0] =
    Second_att_control_codeblock__P.Gain_Gain *
 8004498:	4b64      	ldr	r3, [pc, #400]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 800449a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Gain2[0];
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	edd3 7a06 	vldr	s15, [r3, #24]
    Second_att_control_codeblock__P.Gain_Gain *
 80044a4:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain[0] =
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	edc3 7a08 	vstr	s15, [r3, #32]
  Second_att_control_codeblock__B.Gain[1] =
    Second_att_control_codeblock__P.Gain_Gain *
 80044ae:	4b5f      	ldr	r3, [pc, #380]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80044b0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Gain2[1];
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	edd3 7a07 	vldr	s15, [r3, #28]
    Second_att_control_codeblock__P.Gain_Gain *
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain[1] =
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  // Sum: '<S5>/Sum' incorporates:
  //   Inport: '<Root>/Roll'

  Second_att_control_codeblock__B.pitchrollerror =
    Second_att_control_codeblock__B.Gain[0] -
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	ed93 7a08 	vldr	s14, [r3, #32]
    Second_att_control_codeblock__U.Roll;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
    Second_att_control_codeblock__B.Gain[0] -
 80044d0:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror =
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  // Gain: '<S5>/P_pr'
  Second_att_control_codeblock__B.P_pr =
    Second_att_control_codeblock__P.P_pr_Gain *
 80044da:	4b54      	ldr	r3, [pc, #336]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80044dc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    Second_att_control_codeblock__B.pitchrollerror;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    Second_att_control_codeblock__P.P_pr_Gain *
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr =
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30

  // Gain: '<S5>/I_pr'
  Second_att_control_codeblock__B.I_pr =
    Second_att_control_codeblock__P.I_pr_Gain *
 80044fa:	4b4c      	ldr	r3, [pc, #304]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80044fc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.DiscreteTimeIntegrator;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    Second_att_control_codeblock__P.I_pr_Gain *
 8004506:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr =
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Sum: '<S5>/Sum16'
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    + Second_att_control_codeblock__B.I_pr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800451c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  // Sum: '<S6>/Sum' incorporates:
  //   Inport: '<Root>/p'

  Second_att_control_codeblock__B.pitchrollerror_b =
    Second_att_control_codeblock__B.P_pr_m - Second_att_control_codeblock__U.p;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8004532:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_b =
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Gain: '<S6>/P_pr'
  Second_att_control_codeblock__B.P_pr_b =
    Second_att_control_codeblock__P.P_pr_Gain_a *
 800453c:	4b3b      	ldr	r3, [pc, #236]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 800453e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
    Second_att_control_codeblock__B.pitchrollerror_b;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
    Second_att_control_codeblock__P.P_pr_Gain_a *
 8004548:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_b =
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  // DiscreteIntegrator: '<S6>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	645a      	str	r2, [r3, #68]	; 0x44

  // Gain: '<S6>/I_pr'
  Second_att_control_codeblock__B.I_pr_d =
    Second_att_control_codeblock__P.I_pr_Gain_d *
 800455c:	4b33      	ldr	r3, [pc, #204]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 800455e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    Second_att_control_codeblock__P.I_pr_Gain_d *
 8004568:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr_d =
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  //
  //  About '<S8>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp =
    Second_att_control_codeblock__B.pitchrollerror_b *
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock__P.TSamp_WtEt;
 8004578:	4b2c      	ldr	r3, [pc, #176]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 800457a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
    Second_att_control_codeblock__B.pitchrollerror_b *
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp =
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1 =
    Second_att_control_codeblock_DW.UD_DSTATE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
  Second_att_control_codeblock__B.Uk1 =
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	651a      	str	r2, [r3, #80]	; 0x50
  //
  //  Block description for '<S8>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.Uk1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 800459e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Gain: '<S6>/D_pr'
  Second_att_control_codeblock__B.D_pr =
    Second_att_control_codeblock__P.D_pr_Gain *
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80045aa:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
    Second_att_control_codeblock__B.Diff;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
    Second_att_control_codeblock__P.D_pr_Gain *
 80045b4:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.D_pr =
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Sum: '<S6>/Sum16'
  Second_att_control_codeblock__B.P_pr_d =
    (Second_att_control_codeblock__B.P_pr_b +
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
     Second_att_control_codeblock__B.I_pr_d) +
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    (Second_att_control_codeblock__B.P_pr_b +
 80045ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
     Second_att_control_codeblock__B.I_pr_d) +
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_d =
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // Saturate: '<S6>/Saturation'
  u0 = Second_att_control_codeblock__B.P_pr_d;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation_LowerSat;
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation_UpperSat;
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 80045f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80045f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80045f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004600:	dd03      	ble.n	800460a <_ZN23px4_AlgorithmModelClass4stepEv+0x29e>
    Second_att_control_codeblock__B.Saturation = u2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	661a      	str	r2, [r3, #96]	; 0x60
 8004608:	e015      	b.n	8004636 <_ZN23px4_AlgorithmModelClass4stepEv+0x2ca>
  } else if (u0 < u1) {
 800460a:	ed97 7a04 	vldr	s14, [r7, #16]
 800460e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461a:	d509      	bpl.n	8004630 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c4>
    Second_att_control_codeblock__B.Saturation = u1;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	661a      	str	r2, [r3, #96]	; 0x60
 8004622:	e008      	b.n	8004636 <_ZN23px4_AlgorithmModelClass4stepEv+0x2ca>
 8004624:	44bb8000 	.word	0x44bb8000
 8004628:	43fa0000 	.word	0x43fa0000
 800462c:	20000004 	.word	0x20000004
  } else {
    Second_att_control_codeblock__B.Saturation = u0;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	661a      	str	r2, [r3, #96]	; 0x60

  // End of Saturate: '<S6>/Saturation'

  // Gain: '<S6>/Gain'
  Second_att_control_codeblock__B.Gain_p =
    Second_att_control_codeblock__P.Gain_Gain_p *
 8004636:	4bc3      	ldr	r3, [pc, #780]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004638:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    Second_att_control_codeblock__B.Saturation;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
    Second_att_control_codeblock__P.Gain_Gain_p *
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain_p =
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  // Sum: '<S5>/Sum2' incorporates:
  //   Inport: '<Root>/Pitch'

  Second_att_control_codeblock__B.pitchrollerror_m =
    Second_att_control_codeblock__B.Gain[1] -
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock__U.Pitch;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
    Second_att_control_codeblock__B.Gain[1] -
 8004658:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_m =
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  // Gain: '<S5>/P_pr1'
  Second_att_control_codeblock__B.P_pr1 =
    Second_att_control_codeblock__P.P_pr1_Gain *
 8004662:	4bb8      	ldr	r3, [pc, #736]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004664:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
    Second_att_control_codeblock__B.pitchrollerror_m;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    Second_att_control_codeblock__P.P_pr1_Gain *
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr1 =
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	671a      	str	r2, [r3, #112]	; 0x70

  // Gain: '<S5>/I_pr1'
  Second_att_control_codeblock__B.I_pr1 =
    Second_att_control_codeblock__P.I_pr1_Gain *
 8004682:	4bb0      	ldr	r3, [pc, #704]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004684:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    Second_att_control_codeblock__P.I_pr1_Gain *
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr1 =
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  // Sum: '<S5>/Sum1'
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    + Second_att_control_codeblock__B.I_pr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80046a4:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  // Sum: '<S6>/Sum1' incorporates:
  //   Inport: '<Root>/q'

  Second_att_control_codeblock__B.pitchrollerror_i =
    Second_att_control_codeblock__B.P_pr_o - Second_att_control_codeblock__U.q;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 80046ba:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_i =
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  // Gain: '<S6>/P_pr1'
  Second_att_control_codeblock__B.P_pr1_p =
    Second_att_control_codeblock__P.P_pr1_Gain_n *
 80046c4:	4b9f      	ldr	r3, [pc, #636]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 80046c6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
    Second_att_control_codeblock__B.pitchrollerror_i;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
    Second_att_control_codeblock__P.P_pr1_Gain_n *
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr1_p =
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

  // DiscreteIntegrator: '<S6>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  // Gain: '<S6>/I_pr1'
  Second_att_control_codeblock__B.I_pr1_j =
    Second_att_control_codeblock__P.I_pr1_Gain_g *
 80046e6:	4b97      	ldr	r3, [pc, #604]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 80046e8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
    Second_att_control_codeblock__P.I_pr1_Gain_g *
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr1_j =
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
  //
  //  About '<S9>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp_h =
    Second_att_control_codeblock__B.pitchrollerror_i *
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock__P.TSamp_WtEt_l;
 8004702:	4b90      	ldr	r3, [pc, #576]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004704:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
    Second_att_control_codeblock__B.pitchrollerror_i *
 8004708:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp_h =
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
  //  Block description for '<S9>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
  Second_att_control_codeblock__B.Uk1_i =
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  //  Block description for '<S9>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff_l =
    Second_att_control_codeblock__B.TSamp_h -
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
    Second_att_control_codeblock__B.Uk1_i;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
    Second_att_control_codeblock__B.TSamp_h -
 800472a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Diff_l =
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

  // Gain: '<S6>/D_pr1'
  Second_att_control_codeblock__B.D_pr1 =
    Second_att_control_codeblock__P.D_pr1_Gain *
 8004734:	4b83      	ldr	r3, [pc, #524]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004736:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
    Second_att_control_codeblock__B.Diff_l;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    Second_att_control_codeblock__P.D_pr1_Gain *
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.D_pr1 =
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

  // Sum: '<S6>/Sum2'
  Second_att_control_codeblock__B.P_pr_j =
    (Second_att_control_codeblock__B.P_pr1_p +
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
     Second_att_control_codeblock__B.I_pr1_j) +
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
    (Second_att_control_codeblock__B.P_pr1_p +
 8004756:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
     Second_att_control_codeblock__B.I_pr1_j) +
 8004760:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_j =
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

  // Saturate: '<S6>/Saturation1'
  u0 = Second_att_control_codeblock__B.P_pr_j;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004770:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation1_LowerSat;
 8004772:	4b74      	ldr	r3, [pc, #464]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation1_UpperSat;
 800477a:	4b72      	ldr	r3, [pc, #456]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004780:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8004782:	ed97 7a04 	vldr	s14, [r7, #16]
 8004786:	edd7 7a02 	vldr	s15, [r7, #8]
 800478a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	dd04      	ble.n	800479e <_ZN23px4_AlgorithmModelClass4stepEv+0x432>
    Second_att_control_codeblock__B.Saturation1 = u2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800479c:	e011      	b.n	80047c2 <_ZN23px4_AlgorithmModelClass4stepEv+0x456>
  } else if (u0 < u1) {
 800479e:	ed97 7a04 	vldr	s14, [r7, #16]
 80047a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80047a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ae:	d504      	bpl.n	80047ba <_ZN23px4_AlgorithmModelClass4stepEv+0x44e>
    Second_att_control_codeblock__B.Saturation1 = u1;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80047b8:	e003      	b.n	80047c2 <_ZN23px4_AlgorithmModelClass4stepEv+0x456>
  } else {
    Second_att_control_codeblock__B.Saturation1 = u0;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  // End of Saturate: '<S6>/Saturation1'

  // Gain: '<S6>/Gain1'
  Second_att_control_codeblock__B.Gain1 =
    Second_att_control_codeblock__P.Gain1_Gain *
 80047c2:	4b60      	ldr	r3, [pc, #384]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 80047c4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.Saturation1;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock__P.Gain1_Gain *
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain1 =
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  // DataTypeConversion: '<S3>/Data Type Conversion2' incorporates:
  //   Inport: '<Root>/set_yaw'

  Second_att_control_codeblock__B.DataTypeConversion2 =
    Second_att_control_codeblock__U.set_yaw;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
  Second_att_control_codeblock__B.DataTypeConversion2 =
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  // Fcn: '<S3>/Fcn7'
  Second_att_control_codeblock__B.Fcn7 =
    (Second_att_control_codeblock__B.DataTypeConversion2 - 1500.0F) / 500.0F;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80047f2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004948 <_ZN23px4_AlgorithmModelClass4stepEv+0x5dc>
 80047f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80047fa:	eddf 6a54 	vldr	s13, [pc, #336]	; 800494c <_ZN23px4_AlgorithmModelClass4stepEv+0x5e0>
 80047fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn7 =
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

  // Saturate: '<S3>/Saturation7'
  u0 = Second_att_control_codeblock__B.Fcn7;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800480e:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation7_LowerSat;
 8004810:	4b4c      	ldr	r3, [pc, #304]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004816:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation7_UpperSat;
 8004818:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 800481a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481e:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8004820:	ed97 7a04 	vldr	s14, [r7, #16]
 8004824:	edd7 7a02 	vldr	s15, [r7, #8]
 8004828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	dd04      	ble.n	800483c <_ZN23px4_AlgorithmModelClass4stepEv+0x4d0>
    Second_att_control_codeblock__B.Saturation7 = u2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800483a:	e011      	b.n	8004860 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f4>
  } else if (u0 < u1) {
 800483c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004840:	edd7 7a03 	vldr	s15, [r7, #12]
 8004844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	d504      	bpl.n	8004858 <_ZN23px4_AlgorithmModelClass4stepEv+0x4ec>
    Second_att_control_codeblock__B.Saturation7 = u1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004856:	e003      	b.n	8004860 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f4>
  } else {
    Second_att_control_codeblock__B.Saturation7 = u0;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Sum: '<S7>/Sum' incorporates:
  //   Inport: '<Root>/r'

  Second_att_control_codeblock__B.Sum =
    Second_att_control_codeblock__B.Saturation7 -
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
    Second_att_control_codeblock__U.r;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
    Second_att_control_codeblock__B.Saturation7 -
 800486c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum =
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  // Gain: '<S7>/Gain'
  Second_att_control_codeblock__B.Gain_f =
    Second_att_control_codeblock__P.Gain_Gain_j *
 8004876:	4b33      	ldr	r3, [pc, #204]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004878:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    Second_att_control_codeblock__B.Sum;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
    Second_att_control_codeblock__P.Gain_Gain_j *
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain_f =
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

  // Gain: '<S47>/Proportional Gain'
  Second_att_control_codeblock__B.ProportionalGain =
    Second_att_control_codeblock__P.DiscretePIDController_P *
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 800488e:	ed93 7a04 	vldr	s14, [r3, #16]
    Second_att_control_codeblock__B.Gain_f;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
    Second_att_control_codeblock__P.DiscretePIDController_P *
 8004898:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.ProportionalGain =
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  // DiscreteIntegrator: '<S42>/Integrator'
  Second_att_control_codeblock__B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
  Second_att_control_codeblock__B.Integrator =
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  // Sum: '<S51>/Sum'
  Second_att_control_codeblock__B.Sum_f =
    Second_att_control_codeblock__B.ProportionalGain +
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
    Second_att_control_codeblock__B.Integrator;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
    Second_att_control_codeblock__B.ProportionalGain +
 80048ba:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum_f =
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  // DataTypeConversion: '<S3>/Data Type Conversion3' incorporates:
  //   Inport: '<Root>/set_thrust'

  Second_att_control_codeblock__B.DataTypeConversion3 =
    Second_att_control_codeblock__U.set_thrust;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
  Second_att_control_codeblock__B.DataTypeConversion3 =
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

  // Fcn: '<S3>/Fcn6'
  Second_att_control_codeblock__B.Fcn6 =
    (Second_att_control_codeblock__B.DataTypeConversion3 - 1000.0F) / 1000.0F;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80048de:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 80048e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80048e6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 80048ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn6 =
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

  // Saturate: '<S3>/Saturation10'
  u0 = Second_att_control_codeblock__B.Fcn6;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80048fa:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation10_LowerSat;
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 80048fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004902:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation10_UpperSat;
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800490a:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 800490c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004910:	edd7 7a02 	vldr	s15, [r7, #8]
 8004914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	dd04      	ble.n	8004928 <_ZN23px4_AlgorithmModelClass4stepEv+0x5bc>
    Second_att_control_codeblock__B.Saturation10 = u2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004926:	e01b      	b.n	8004960 <_ZN23px4_AlgorithmModelClass4stepEv+0x5f4>
  } else if (u0 < u1) {
 8004928:	ed97 7a04 	vldr	s14, [r7, #16]
 800492c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d50e      	bpl.n	8004958 <_ZN23px4_AlgorithmModelClass4stepEv+0x5ec>
    Second_att_control_codeblock__B.Saturation10 = u1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004942:	e00d      	b.n	8004960 <_ZN23px4_AlgorithmModelClass4stepEv+0x5f4>
 8004944:	20000004 	.word	0x20000004
 8004948:	44bb8000 	.word	0x44bb8000
 800494c:	43fa0000 	.word	0x43fa0000
 8004950:	447a0000 	.word	0x447a0000
 8004954:	47800000 	.word	0x47800000
  } else {
    Second_att_control_codeblock__B.Saturation10 = u0;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  }

  // End of Saturate: '<S3>/Saturation10'

  // MATLAB Function: '<S1>/pwm_out1'
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004966:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 8004970:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 800497e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004982:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 800498c:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 8004990:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004998:	eeb0 0a67 	vmov.f32	s0, s15
 800499c:	f7ff fc8c 	bl	80042b8 <_Z13rt_roundf_snff>
 80049a0:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 80049a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80049a8:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8004954 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 80049ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b4:	d511      	bpl.n	80049da <_ZN23px4_AlgorithmModelClass4stepEv+0x66e>
    if (u0 >= 0.0F) {
 80049b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80049ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c2:	db07      	blt.n	80049d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x668>
      y = static_cast<uint16_T>(u0);
 80049c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80049c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049cc:	ee17 3a90 	vmov	r3, s15
 80049d0:	82fb      	strh	r3, [r7, #22]
 80049d2:	e005      	b.n	80049e0 <_ZN23px4_AlgorithmModelClass4stepEv+0x674>
    } else {
      y = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	82fb      	strh	r3, [r7, #22]
 80049d8:	e002      	b.n	80049e0 <_ZN23px4_AlgorithmModelClass4stepEv+0x674>
    }
  } else {
    y = MAX_uint16_T;
 80049da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049de:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 80049e0:	8afb      	ldrh	r3, [r7, #22]
 80049e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80049e6:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d302      	bcc.n	80049f6 <_ZN23px4_AlgorithmModelClass4stepEv+0x68a>
    tmp = 65535U;
 80049f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f4:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M1 = static_cast<uint16_T>(tmp);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
                       Second_att_control_codeblock__B.Sum_f) *
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 8004a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 8004a16:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004a1a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004a1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004a28:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 8004a2c:	ed1f 7a38 	vldr	s14, [pc, #-224]	; 8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a34:	eeb0 0a67 	vmov.f32	s0, s15
 8004a38:	f7ff fc3e 	bl	80042b8 <_Z13rt_roundf_snff>
 8004a3c:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004a40:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a44:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8004954 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 8004a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a50:	d511      	bpl.n	8004a76 <_ZN23px4_AlgorithmModelClass4stepEv+0x70a>
    if (u0 >= 0.0F) {
 8004a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5e:	db07      	blt.n	8004a70 <_ZN23px4_AlgorithmModelClass4stepEv+0x704>
      y = static_cast<uint16_T>(u0);
 8004a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a68:	ee17 3a90 	vmov	r3, s15
 8004a6c:	82fb      	strh	r3, [r7, #22]
 8004a6e:	e005      	b.n	8004a7c <_ZN23px4_AlgorithmModelClass4stepEv+0x710>
    } else {
      y = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	82fb      	strh	r3, [r7, #22]
 8004a74:	e002      	b.n	8004a7c <_ZN23px4_AlgorithmModelClass4stepEv+0x710>
    }
  } else {
    y = MAX_uint16_T;
 8004a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a7a:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004a7c:	8afb      	ldrh	r3, [r7, #22]
 8004a7e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004a82:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d302      	bcc.n	8004a92 <_ZN23px4_AlgorithmModelClass4stepEv+0x726>
    tmp = 65535U;
 8004a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a90:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M2 = static_cast<uint16_T>(tmp);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004aa2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004aa6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock__B.Gain1) -
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock__B.Gain1) -
 8004aba:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004ac8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004acc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004ada:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ae6:	f7ff fbe7 	bl	80042b8 <_Z13rt_roundf_snff>
 8004aea:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004aee:	edd7 7a04 	vldr	s15, [r7, #16]
 8004af2:	ed1f 7a68 	vldr	s14, [pc, #-416]	; 8004954 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 8004af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	d511      	bpl.n	8004b24 <_ZN23px4_AlgorithmModelClass4stepEv+0x7b8>
    if (u0 >= 0.0F) {
 8004b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0c:	db07      	blt.n	8004b1e <_ZN23px4_AlgorithmModelClass4stepEv+0x7b2>
      y = static_cast<uint16_T>(u0);
 8004b0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b16:	ee17 3a90 	vmov	r3, s15
 8004b1a:	82fb      	strh	r3, [r7, #22]
 8004b1c:	e005      	b.n	8004b2a <_ZN23px4_AlgorithmModelClass4stepEv+0x7be>
    } else {
      y = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	82fb      	strh	r3, [r7, #22]
 8004b22:	e002      	b.n	8004b2a <_ZN23px4_AlgorithmModelClass4stepEv+0x7be>
    }
  } else {
    y = MAX_uint16_T;
 8004b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b28:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004b2a:	8afb      	ldrh	r3, [r7, #22]
 8004b2c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004b30:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d302      	bcc.n	8004b40 <_ZN23px4_AlgorithmModelClass4stepEv+0x7d4>
    tmp = 65535U;
 8004b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b3e:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M3 = static_cast<uint16_T>(tmp);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004b50:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004b5a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004b5e:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004b62:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 8004b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004b7a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004b7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004b88:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004b8c:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b94:	eeb0 0a67 	vmov.f32	s0, s15
 8004b98:	f7ff fb8e 	bl	80042b8 <_Z13rt_roundf_snff>
 8004b9c:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ba4:	ed1f 7a95 	vldr	s14, [pc, #-596]	; 8004954 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 8004ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	d511      	bpl.n	8004bd6 <_ZN23px4_AlgorithmModelClass4stepEv+0x86a>
    if (u0 >= 0.0F) {
 8004bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	db07      	blt.n	8004bd0 <_ZN23px4_AlgorithmModelClass4stepEv+0x864>
      y = static_cast<uint16_T>(u0);
 8004bc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc8:	ee17 3a90 	vmov	r3, s15
 8004bcc:	82fb      	strh	r3, [r7, #22]
 8004bce:	e005      	b.n	8004bdc <_ZN23px4_AlgorithmModelClass4stepEv+0x870>
    } else {
      y = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	82fb      	strh	r3, [r7, #22]
 8004bd4:	e002      	b.n	8004bdc <_ZN23px4_AlgorithmModelClass4stepEv+0x870>
    }
  } else {
    y = MAX_uint16_T;
 8004bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bda:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004bdc:	8afb      	ldrh	r3, [r7, #22]
 8004bde:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004be2:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bea:	d302      	bcc.n	8004bf2 <_ZN23px4_AlgorithmModelClass4stepEv+0x886>
    tmp = 65535U;
 8004bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bf0:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M4 = static_cast<uint16_T>(tmp);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004c08:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004c0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004c10:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 8004c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 8004c24:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004c28:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004c2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004c36:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004c3a:	ed1f 7abb 	vldr	s14, [pc, #-748]	; 8004950 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c42:	eeb0 0a67 	vmov.f32	s0, s15
 8004c46:	f7ff fb37 	bl	80042b8 <_Z13rt_roundf_snff>
 8004c4a:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004c4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c52:	ed1f 7ac0 	vldr	s14, [pc, #-768]	; 8004954 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 8004c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	d511      	bpl.n	8004c84 <_ZN23px4_AlgorithmModelClass4stepEv+0x918>
    if (u0 >= 0.0F) {
 8004c60:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	db07      	blt.n	8004c7e <_ZN23px4_AlgorithmModelClass4stepEv+0x912>
      y = static_cast<uint16_T>(u0);
 8004c6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c76:	ee17 3a90 	vmov	r3, s15
 8004c7a:	82fb      	strh	r3, [r7, #22]
 8004c7c:	e005      	b.n	8004c8a <_ZN23px4_AlgorithmModelClass4stepEv+0x91e>
    } else {
      y = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	82fb      	strh	r3, [r7, #22]
 8004c82:	e002      	b.n	8004c8a <_ZN23px4_AlgorithmModelClass4stepEv+0x91e>
    }
  } else {
    y = MAX_uint16_T;
 8004c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c88:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004c8a:	8afb      	ldrh	r3, [r7, #22]
 8004c8c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004c90:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d302      	bcc.n	8004ca0 <_ZN23px4_AlgorithmModelClass4stepEv+0x934>
    tmp = 65535U;
 8004c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c9e:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M5 = static_cast<uint16_T>(tmp);
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004cb0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004cb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock__B.Gain1) -
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004cbe:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        -Second_att_control_codeblock__B.Gain1) -
 8004cc8:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004cd6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004cda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004ce8:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8004f54 <_ZN23px4_AlgorithmModelClass4stepEv+0xbe8>
 8004cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf4:	f7ff fae0 	bl	80042b8 <_Z13rt_roundf_snff>
 8004cf8:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004cfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d00:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8004f58 <_ZN23px4_AlgorithmModelClass4stepEv+0xbec>
 8004d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0c:	d511      	bpl.n	8004d32 <_ZN23px4_AlgorithmModelClass4stepEv+0x9c6>
    if (u0 >= 0.0F) {
 8004d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	db07      	blt.n	8004d2c <_ZN23px4_AlgorithmModelClass4stepEv+0x9c0>
      y = static_cast<uint16_T>(u0);
 8004d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d24:	ee17 3a90 	vmov	r3, s15
 8004d28:	82fb      	strh	r3, [r7, #22]
 8004d2a:	e005      	b.n	8004d38 <_ZN23px4_AlgorithmModelClass4stepEv+0x9cc>
    } else {
      y = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	82fb      	strh	r3, [r7, #22]
 8004d30:	e002      	b.n	8004d38 <_ZN23px4_AlgorithmModelClass4stepEv+0x9cc>
    }
  } else {
    y = MAX_uint16_T;
 8004d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d36:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004d38:	8afb      	ldrh	r3, [r7, #22]
 8004d3a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004d3e:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d46:	d302      	bcc.n	8004d4e <_ZN23px4_AlgorithmModelClass4stepEv+0x9e2>
    tmp = 65535U;
 8004d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d4c:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M6 = static_cast<uint16_T>(tmp);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  // End of MATLAB Function: '<S1>/pwm_out1'

  // Switch: '<S1>/Switch' incorporates:
  //   Inport: '<Root>/Arm_cmd'

  if (Second_att_control_codeblock__U.Arm_cmd >
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8b3 2148 	ldrh.w	r2, [r3, #328]	; 0x148
      Second_att_control_codeblock__P.Switch_Threshold) {
 8004d5e:	4b7f      	ldr	r3, [pc, #508]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004d60:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
  if (Second_att_control_codeblock__U.Arm_cmd >
 8004d64:	429a      	cmp	r2, r3
 8004d66:	f240 80e2 	bls.w	8004f2e <_ZN23px4_AlgorithmModelClass4stepEv+0xbc2>
    // Saturate: '<S1>/Saturation'
    if (Second_att_control_codeblock__B.M1 >
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004d70:	4b7a      	ldr	r3, [pc, #488]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004d72:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M1 >
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d904      	bls.n	8004d84 <_ZN23px4_AlgorithmModelClass4stepEv+0xa18>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004d7a:	4b78      	ldr	r3, [pc, #480]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004d7c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004d80:	82fb      	strh	r3, [r7, #22]
 8004d82:	e010      	b.n	8004da6 <_ZN23px4_AlgorithmModelClass4stepEv+0xa3a>
    } else if (Second_att_control_codeblock__B.M1 <
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004d8a:	4b74      	ldr	r3, [pc, #464]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004d8c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M1 <
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d204      	bcs.n	8004d9e <_ZN23px4_AlgorithmModelClass4stepEv+0xa32>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004d94:	4b71      	ldr	r3, [pc, #452]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004d96:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004d9a:	82fb      	strh	r3, [r7, #22]
 8004d9c:	e003      	b.n	8004da6 <_ZN23px4_AlgorithmModelClass4stepEv+0xa3a>
    } else {
      y = Second_att_control_codeblock__B.M1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8004da4:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[0] = y;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8afa      	ldrh	r2, [r7, #22]
 8004daa:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
    if (Second_att_control_codeblock__B.M2 >
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004db4:	4b69      	ldr	r3, [pc, #420]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004db6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M2 >
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d904      	bls.n	8004dc8 <_ZN23px4_AlgorithmModelClass4stepEv+0xa5c>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004dbe:	4b67      	ldr	r3, [pc, #412]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004dc0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004dc4:	82fb      	strh	r3, [r7, #22]
 8004dc6:	e010      	b.n	8004dea <_ZN23px4_AlgorithmModelClass4stepEv+0xa7e>
    } else if (Second_att_control_codeblock__B.M2 <
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004dce:	4b63      	ldr	r3, [pc, #396]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004dd0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M2 <
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d204      	bcs.n	8004de2 <_ZN23px4_AlgorithmModelClass4stepEv+0xa76>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004dd8:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004dda:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004dde:	82fb      	strh	r3, [r7, #22]
 8004de0:	e003      	b.n	8004dea <_ZN23px4_AlgorithmModelClass4stepEv+0xa7e>
    } else {
      y = Second_att_control_codeblock__B.M2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8004de8:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[1] = y;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8afa      	ldrh	r2, [r7, #22]
 8004dee:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
    if (Second_att_control_codeblock__B.M3 >
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004df8:	4b58      	ldr	r3, [pc, #352]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004dfa:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M3 >
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d904      	bls.n	8004e0c <_ZN23px4_AlgorithmModelClass4stepEv+0xaa0>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004e02:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e04:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004e08:	82fb      	strh	r3, [r7, #22]
 8004e0a:	e010      	b.n	8004e2e <_ZN23px4_AlgorithmModelClass4stepEv+0xac2>
    } else if (Second_att_control_codeblock__B.M3 <
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004e12:	4b52      	ldr	r3, [pc, #328]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e14:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M3 <
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d204      	bcs.n	8004e26 <_ZN23px4_AlgorithmModelClass4stepEv+0xaba>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004e1c:	4b4f      	ldr	r3, [pc, #316]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e1e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004e22:	82fb      	strh	r3, [r7, #22]
 8004e24:	e003      	b.n	8004e2e <_ZN23px4_AlgorithmModelClass4stepEv+0xac2>
    } else {
      y = Second_att_control_codeblock__B.M3;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8004e2c:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[2] = y;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8afa      	ldrh	r2, [r7, #22]
 8004e32:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    if (Second_att_control_codeblock__B.M4 >
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004e3c:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e3e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M4 >
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d904      	bls.n	8004e50 <_ZN23px4_AlgorithmModelClass4stepEv+0xae4>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004e46:	4b45      	ldr	r3, [pc, #276]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e48:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004e4c:	82fb      	strh	r3, [r7, #22]
 8004e4e:	e010      	b.n	8004e72 <_ZN23px4_AlgorithmModelClass4stepEv+0xb06>
    } else if (Second_att_control_codeblock__B.M4 <
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004e56:	4b41      	ldr	r3, [pc, #260]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e58:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M4 <
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d204      	bcs.n	8004e6a <_ZN23px4_AlgorithmModelClass4stepEv+0xafe>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004e60:	4b3e      	ldr	r3, [pc, #248]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e62:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004e66:	82fb      	strh	r3, [r7, #22]
 8004e68:	e003      	b.n	8004e72 <_ZN23px4_AlgorithmModelClass4stepEv+0xb06>
    } else {
      y = Second_att_control_codeblock__B.M4;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8004e70:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[3] = y;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8afa      	ldrh	r2, [r7, #22]
 8004e76:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    if (Second_att_control_codeblock__B.M5 >
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004e80:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e82:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M5 >
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d904      	bls.n	8004e94 <_ZN23px4_AlgorithmModelClass4stepEv+0xb28>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004e8a:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e8c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004e90:	82fb      	strh	r3, [r7, #22]
 8004e92:	e010      	b.n	8004eb6 <_ZN23px4_AlgorithmModelClass4stepEv+0xb4a>
    } else if (Second_att_control_codeblock__B.M5 <
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004e9a:	4b30      	ldr	r3, [pc, #192]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004e9c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M5 <
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d204      	bcs.n	8004eae <_ZN23px4_AlgorithmModelClass4stepEv+0xb42>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004ea6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004eaa:	82fb      	strh	r3, [r7, #22]
 8004eac:	e003      	b.n	8004eb6 <_ZN23px4_AlgorithmModelClass4stepEv+0xb4a>
    } else {
      y = Second_att_control_codeblock__B.M5;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004eb4:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[4] = y;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8afa      	ldrh	r2, [r7, #22]
 8004eba:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    if (Second_att_control_codeblock__B.M6 >
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004ec6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M6 >
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d904      	bls.n	8004ed8 <_ZN23px4_AlgorithmModelClass4stepEv+0xb6c>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004ed0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004ed4:	82fb      	strh	r3, [r7, #22]
 8004ed6:	e010      	b.n	8004efa <_ZN23px4_AlgorithmModelClass4stepEv+0xb8e>
    } else if (Second_att_control_codeblock__B.M6 <
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004ede:	4b1f      	ldr	r3, [pc, #124]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004ee0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M6 <
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d204      	bcs.n	8004ef2 <_ZN23px4_AlgorithmModelClass4stepEv+0xb86>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004eea:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004eee:	82fb      	strh	r3, [r7, #22]
 8004ef0:	e003      	b.n	8004efa <_ZN23px4_AlgorithmModelClass4stepEv+0xb8e>
    } else {
      y = Second_att_control_codeblock__B.M6;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8004ef8:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[5] = y;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8afa      	ldrh	r2, [r7, #22]
 8004efe:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106

    // End of Saturate: '<S1>/Saturation'

    // Outport: '<Root>/PWM_OUT'
    for (i = 0; i < 6; i++) {
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b05      	cmp	r3, #5
 8004f0a:	dc29      	bgt.n	8004f60 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf4>
      Second_att_control_codeblock__Y.PWM_OUT[i] =
        Second_att_control_codeblock__B.Saturation_o[i];
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	337c      	adds	r3, #124	; 0x7c
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	8899      	ldrh	r1, [r3, #4]
      Second_att_control_codeblock__Y.PWM_OUT[i] =
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	33a4      	adds	r3, #164	; 0xa4
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	460a      	mov	r2, r1
 8004f24:	809a      	strh	r2, [r3, #4]
    for (i = 0; i < 6; i++) {
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e7eb      	b.n	8004f06 <_ZN23px4_AlgorithmModelClass4stepEv+0xb9a>
    }
  } else {
    // Outport: '<Root>/PWM_OUT' incorporates:
    //   Constant: '<S1>/Constant'

    for (i = 0; i < 6; i++) {
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	dc13      	bgt.n	8004f60 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf4>
      Second_att_control_codeblock__Y.PWM_OUT[i] =
        Second_att_control_codeblock__P.Constant_Value;
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004f3a:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
      Second_att_control_codeblock__Y.PWM_OUT[i] =
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	33a4      	adds	r3, #164	; 0xa4
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	460a      	mov	r2, r1
 8004f4a:	809a      	strh	r2, [r3, #4]
    for (i = 0; i < 6; i++) {
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e7ee      	b.n	8004f32 <_ZN23px4_AlgorithmModelClass4stepEv+0xbc6>
 8004f54:	447a0000 	.word	0x447a0000
 8004f58:	47800000 	.word	0x47800000
 8004f5c:	20000004 	.word	0x20000004

  // End of Switch: '<S1>/Switch'

  // Delay: '<S6>/Delay'
  Second_att_control_codeblock__B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
  Second_att_control_codeblock__B.Delay =
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

  // Gain: '<S6>/antiWU_Gain'
  Second_att_control_codeblock__B.antiWU_Gain =
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004f6c:	4b53      	ldr	r3, [pc, #332]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004f6e:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
    Second_att_control_codeblock__B.Delay;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004f78:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain =
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8

  // Sum: '<S6>/Add'
  Second_att_control_codeblock__B.Add =
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.antiWU_Gain;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add =
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  // Delay: '<S6>/Delay1'
  Second_att_control_codeblock__B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
  Second_att_control_codeblock__B.Delay1 =
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // Gain: '<S6>/antiWU_Gain1'
  Second_att_control_codeblock__B.antiWU_Gain1 =
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004fa4:	4b45      	ldr	r3, [pc, #276]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004fa6:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
    Second_att_control_codeblock__B.Delay1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain1 =
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

  // Sum: '<S6>/Add1'
  Second_att_control_codeblock__B.Add1 =
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock__B.antiWU_Gain1;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
    Second_att_control_codeblock__B.pitchrollerror_i -
 8004fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add1 =
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8

  // Gain: '<S39>/Integral Gain'
  Second_att_control_codeblock__B.IntegralGain =
    Second_att_control_codeblock__P.DiscretePIDController_I *
 8004fd0:	4b3a      	ldr	r3, [pc, #232]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004fd2:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock__B.Gain_f;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
    Second_att_control_codeblock__P.DiscretePIDController_I *
 8004fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.IntegralGain =
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004fec:	4b33      	ldr	r3, [pc, #204]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004fee:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
    Second_att_control_codeblock__B.pitchrollerror;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108

  // Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 800500e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
    Second_att_control_codeblock__B.Add;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8005018:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 800501c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__B.TSamp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  Second_att_control_codeblock_DW.UD_DSTATE =
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8005038:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
    Second_att_control_codeblock__B.pitchrollerror_m;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 8005042:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 8005046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114

  // Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8005058:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
    Second_att_control_codeblock__B.Add1;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 8005062:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 8005066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
  //  Block description for '<S9>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__B.TSamp_h;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  // Update for DiscreteIntegrator: '<S42>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
    Second_att_control_codeblock__P.Integrator_gainval *
 8005082:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8005084:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
    Second_att_control_codeblock__B.IntegralGain;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock__P.Integrator_gainval *
 800508e:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8005092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120

  // Update for Delay: '<S6>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  Second_att_control_codeblock_DW.Delay_DSTATE =
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  // Update for Delay: '<S6>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80050b2:	bf00      	nop
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000004 	.word	0x20000004

080050c0 <_ZN23px4_AlgorithmModelClass10initializeEv>:

// Model initialize function
void px4_AlgorithmModelClass::initialize()
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC;
 80050c8:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 80050ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  // InitializeConditions for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC_k;
 80050d2:	4b18      	ldr	r3, [pc, #96]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 80050d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__P.DiscreteDerivative_ICPrevScaled;
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 80050de:	685a      	ldr	r2, [r3, #4]
  Second_att_control_codeblock_DW.UD_DSTATE =
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC;
 80050e6:	4b13      	ldr	r3, [pc, #76]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 80050e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  // InitializeConditions for DiscreteIntegrator: '<S6>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC_j;
 80050f0:	4b10      	ldr	r3, [pc, #64]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 80050f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  //  Block description for '<S9>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__P.DiscreteDerivative1_ICPrevScale;
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 80050fc:	689a      	ldr	r2, [r3, #8]
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  // InitializeConditions for DiscreteIntegrator: '<S42>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE =
    Second_att_control_codeblock__P.DiscretePIDController_InitialCo;
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8005106:	68da      	ldr	r2, [r3, #12]
  Second_att_control_codeblock_DW.Integrator_DSTATE =
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  // InitializeConditions for Delay: '<S6>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__P.Delay_InitialCondition;
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8005110:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  // InitializeConditions for Delay: '<S6>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__P.Delay1_InitialCondition;
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 800511c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000004 	.word	0x20000004

08005138 <_ZN23px4_AlgorithmModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
px4_AlgorithmModelClass::px4_AlgorithmModelClass():
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  Second_att_control_codeblock__B()
  ,Second_att_control_codeblock_DW()
  ,Second_att_control_codeblock__U()
  ,Second_att_control_codeblock__Y()
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4618      	mov	r0, r3
 8005144:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005148:	461a      	mov	r2, r3
 800514a:	2100      	movs	r1, #0
 800514c:	f018 fb29 	bl	801d7a2 <memset>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005156:	2224      	movs	r2, #36	; 0x24
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f018 fb21 	bl	801d7a2 <memset>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8005166:	2220      	movs	r2, #32
 8005168:	2100      	movs	r1, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f018 fb19 	bl	801d7a2 <memset>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	609a      	str	r2, [r3, #8]
{
  // Currently there is no constructor body generated.
}
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:
	 *  \return variable is updated(true), variable is not updated(false)
	 *
	 *  setFunction :
	 *  \param[in]		variable		msgBus data is changed to input data
	 */
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 8005188:	b4b0      	push	{r4, r5, r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	e9d3 1200 	ldrd	r1, r2, [r3]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a2:	42a2      	cmp	r2, r4
 80051a4:	bf08      	it	eq
 80051a6:	4299      	cmpeq	r1, r3
 80051a8:	d001      	beq.n	80051ae <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x26>
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4614      	mov	r4, r2
 80051b4:	461d      	mov	r5, r3
 80051b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80051be:	e884 0003 	stmia.w	r4, {r0, r1}
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bcb0      	pop	{r4, r5, r7}
 80051cc:	4770      	bx	lr

080051ce <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 80051ce:	b4b0      	push	{r4, r5, r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	e9d3 1200 	ldrd	r1, r2, [r3]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80051e8:	42a2      	cmp	r2, r4
 80051ea:	bf08      	it	eq
 80051ec:	4299      	cmpeq	r1, r3
 80051ee:	d001      	beq.n	80051f4 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x26>
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4615      	mov	r5, r2
 80051fa:	f103 0418 	add.w	r4, r3, #24
 80051fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005202:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005206:	e885 0003 	stmia.w	r5, {r0, r1}
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bcb0      	pop	{r4, r5, r7}
 8005214:	4770      	bx	lr

08005216 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 8005216:	b4b0      	push	{r4, r5, r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	73fb      	strb	r3, [r7, #15]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	e9d3 1200 	ldrd	r1, r2, [r3]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005230:	42a2      	cmp	r2, r4
 8005232:	bf08      	it	eq
 8005234:	4299      	cmpeq	r1, r3
 8005236:	d001      	beq.n	800523c <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x26>
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4615      	mov	r5, r2
 8005242:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8005246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800524e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bcb0      	pop	{r4, r5, r7}
 800525c:	4770      	bx	lr

0800525e <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800525e:	b4b0      	push	{r4, r5, r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8005270:	4615      	mov	r5, r2
 8005272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800527a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800527e:	e884 0003 	stmia.w	r4, {r0, r1}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	bcb0      	pop	{r4, r5, r7}
 800528a:	4770      	bx	lr

0800528c <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800528c:	b4b0      	push	{r4, r5, r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 800529e:	4615      	mov	r5, r2
 80052a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80052a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bcb0      	pop	{r4, r5, r7}
 80052b4:	4770      	bx	lr
	...

080052b8 <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 80052b8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80052bc:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80052be:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <_ZL11microsecondv+0x40>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0b00 	mov.w	fp, #0
 80052cc:	f04f 0c00 	mov.w	ip, #0
 80052d0:	468c      	mov	ip, r1
 80052d2:	f04f 0b00 	mov.w	fp, #0
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <_ZL11microsecondv+0x44>)
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052dc:	4611      	mov	r1, r2
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	ea4b 0301 	orr.w	r3, fp, r1
 80052e6:	ea4c 0402 	orr.w	r4, ip, r2
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	4621      	mov	r1, r4
 80052ee:	46bd      	mov	sp, r7
 80052f0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	200004d0 	.word	0x200004d0
 80052fc:	2000cb28 	.word	0x2000cb28

08005300 <_ZN2FC10ModuleAHRSC1Ev>:
#include "Lib/Matrix/matrix/Quaternion.hpp"
#include "cmath"

namespace FC{

ModuleAHRS::ModuleAHRS()
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	, lastUpdate{0}
	, beta{1.0f}
	, q0{1.0f}
	, q1{0.0f}
	, q2{0.0f}
	, q3{0.0f}
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	461a      	mov	r2, r3
 800530c:	2300      	movs	r3, #0
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	6053      	str	r3, [r2, #4]
 8005312:	6093      	str	r3, [r2, #8]
 8005314:	60d3      	str	r3, [r2, #12]
 8005316:	6113      	str	r3, [r2, #16]
 8005318:	6153      	str	r3, [r2, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3318      	adds	r3, #24
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	609a      	str	r2, [r3, #8]
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	611a      	str	r2, [r3, #16]
 800532a:	615a      	str	r2, [r3, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3330      	adds	r3, #48	; 0x30
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	611a      	str	r2, [r3, #16]
 800533c:	615a      	str	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3348      	adds	r3, #72	; 0x48
 8005342:	2228      	movs	r2, #40	; 0x28
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f018 fa2b 	bl	801d7a2 <memset>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3370      	adds	r3, #112	; 0x70
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
 800535c:	615a      	str	r2, [r3, #20]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800537c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{

}
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}

080053a8 <_ZN2FC10ModuleAHRS7oneStepEv>:

void ModuleAHRS::oneStep(){
 80053a8:	b5b0      	push	{r4, r5, r7, lr}
 80053aa:	b0a0      	sub	sp, #128	; 0x80
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	/* receive data */
	msgBus.getBodyAccel(&this->bodyAccelSub);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4619      	mov	r1, r3
 80053b4:	481b      	ldr	r0, [pc, #108]	; (8005424 <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 80053b6:	f7ff fee7 	bl	8005188 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
	msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3318      	adds	r3, #24
 80053be:	4619      	mov	r1, r3
 80053c0:	4818      	ldr	r0, [pc, #96]	; (8005424 <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 80053c2:	f7ff ff04 	bl	80051ce <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	/* mag data not valid */
	if(!msgBus.getBodyMag(&this->bodyMagSub))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3330      	adds	r3, #48	; 0x30
 80053ca:	4619      	mov	r1, r3
 80053cc:	4815      	ldr	r0, [pc, #84]	; (8005424 <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 80053ce:	f7ff ff22 	bl	8005216 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f083 0301 	eor.w	r3, r3, #1
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d024      	beq.n	8005428 <_ZN2FC10ModuleAHRS7oneStepEv+0x80>
	{
		MadgwickAHRSupdateIMU(bodyAngularVelocitySub.xyz[0],
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	ed93 6a02 	vldr	s12, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	edd3 5a03 	vldr	s11, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	ed93 5a04 	vldr	s10, [r3, #16]
 8005402:	eef0 2a45 	vmov.f32	s5, s10
 8005406:	eeb0 2a65 	vmov.f32	s4, s11
 800540a:	eef0 1a46 	vmov.f32	s3, s12
 800540e:	eeb0 1a66 	vmov.f32	s2, s13
 8005412:	eef0 0a47 	vmov.f32	s1, s14
 8005416:	eeb0 0a67 	vmov.f32	s0, s15
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 f8dc 	bl	80065d8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 8005420:	e02e      	b.n	8005480 <_ZN2FC10ModuleAHRS7oneStepEv+0xd8>
 8005422:	bf00      	nop
 8005424:	200005a0 	.word	0x200005a0
							  bodyAccelSub.xyz[1],
							  bodyAccelSub.xyz[2]);
	}
	/* mag data valid */
	else{
		MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	edd3 7a08 	vldr	s15, [r3, #32]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	ed93 6a02 	vldr	s12, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	edd3 5a03 	vldr	s11, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	ed93 5a04 	vldr	s10, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 800545e:	eeb0 3a64 	vmov.f32	s6, s9
 8005462:	eef0 2a45 	vmov.f32	s5, s10
 8005466:	eeb0 2a65 	vmov.f32	s4, s11
 800546a:	eef0 1a46 	vmov.f32	s3, s12
 800546e:	eeb0 1a66 	vmov.f32	s2, s13
 8005472:	eef0 0a47 	vmov.f32	s1, s14
 8005476:	eeb0 0a67 	vmov.f32	s0, s15
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f988 	bl	8005790 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
						   bodyMagSub.xyz[2]);
	}

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
	roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800548c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800549c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054a8:	ee17 0a90 	vmov	r0, s15
 80054ac:	f7fb f85c 	bl	8000568 <__aeabi_f2d>
 80054b0:	4604      	mov	r4, r0
 80054b2:	460d      	mov	r5, r1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80054c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80054d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80054e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80054f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005500:	ee17 0a90 	vmov	r0, s15
 8005504:	f7fb f830 	bl	8000568 <__aeabi_f2d>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	ec43 2b11 	vmov	d1, r2, r3
 8005510:	ec45 4b10 	vmov	d0, r4, r5
 8005514:	f016 fe66 	bl	801c1e4 <atan2>
 8005518:	ec54 3b10 	vmov	r3, r4, d0
 800551c:	4618      	mov	r0, r3
 800551e:	4621      	mov	r1, r4
 8005520:	f7fb fb72 	bl	8000c08 <__aeabi_d2f>
 8005524:	4603      	mov	r3, r0
 8005526:	67fb      	str	r3, [r7, #124]	; 0x7c
	pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800554c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005550:	ee17 0a90 	vmov	r0, s15
 8005554:	f7fb f808 	bl	8000568 <__aeabi_f2d>
 8005558:	4603      	mov	r3, r0
 800555a:	460c      	mov	r4, r1
 800555c:	ec44 3b10 	vmov	d0, r3, r4
 8005560:	f016 fde8 	bl	801c134 <asin>
 8005564:	ec54 3b10 	vmov	r3, r4, d0
 8005568:	4618      	mov	r0, r3
 800556a:	4621      	mov	r1, r4
 800556c:	f7fb fb4c 	bl	8000c08 <__aeabi_d2f>
 8005570:	4603      	mov	r3, r0
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef1 7a67 	vneg.f32	s15, s15
 800557a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800558a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800559a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800559e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80055a6:	ee17 0a90 	vmov	r0, s15
 80055aa:	f7fa ffdd 	bl	8000568 <__aeabi_f2d>
 80055ae:	4604      	mov	r4, r0
 80055b0:	460d      	mov	r5, r1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80055be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80055ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80055e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80055f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055fe:	ee17 0a90 	vmov	r0, s15
 8005602:	f7fa ffb1 	bl	8000568 <__aeabi_f2d>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	ec43 2b11 	vmov	d1, r2, r3
 800560e:	ec45 4b10 	vmov	d0, r4, r5
 8005612:	f016 fde7 	bl	801c1e4 <atan2>
 8005616:	ec54 3b10 	vmov	r3, r4, d0
 800561a:	4618      	mov	r0, r3
 800561c:	4621      	mov	r1, r4
 800561e:	f7fb faf3 	bl	8000c08 <__aeabi_d2f>
 8005622:	4603      	mov	r3, r0
 8005624:	677b      	str	r3, [r7, #116]	; 0x74

	matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800563e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005642:	eef0 1a46 	vmov.f32	s3, s12
 8005646:	eeb0 1a66 	vmov.f32	s2, s13
 800564a:	eef0 0a47 	vmov.f32	s1, s14
 800564e:	eeb0 0a67 	vmov.f32	s0, s15
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fb77 	bl	8006d46 <_ZN6matrix10QuaternionIfEC1Effff>
	matrix::Dcmf dcm(quat.inversed());		/* body -> NED DCM */
 8005658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800565c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f001 fba6 	bl	8006db4 <_ZNK6matrix10QuaternionIfE8inversedEv>
 8005668:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800566c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f001 fc0f 	bl	8006e96 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
	matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
								   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	edd3 7a02 	vldr	s15, [r3, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	ed93 7a03 	vldr	s14, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	edd3 6a04 	vldr	s13, [r3, #16]
 800568a:	f107 0318 	add.w	r3, r7, #24
 800568e:	eeb0 1a66 	vmov.f32	s2, s13
 8005692:	eef0 0a47 	vmov.f32	s1, s14
 8005696:	eeb0 0a67 	vmov.f32	s0, s15
 800569a:	4618      	mov	r0, r3
 800569c:	f001 fd44 	bl	8007128 <_ZN6matrix7Vector3IfEC1Efff>

	matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 80056a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056a4:	f107 0218 	add.w	r2, r7, #24
 80056a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 fd68 	bl	8007182 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 80056b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80056b6:	f107 030c 	add.w	r3, r7, #12
 80056ba:	4611      	mov	r1, r2
 80056bc:	4618      	mov	r0, r3
 80056be:	f001 fdb1 	bl	8007224 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

	attitudePub.timestamp = microsecond();
 80056c2:	f7ff fdf9 	bl	80052b8 <_ZL11microsecondv>
 80056c6:	4603      	mov	r3, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	attitudePub.q[0] = this->q0;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	651a      	str	r2, [r3, #80]	; 0x50
	attitudePub.q[1] = this->q1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
	attitudePub.q[2] = this->q2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	659a      	str	r2, [r3, #88]	; 0x58
	attitudePub.q[3] = this->q3;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	65da      	str	r2, [r3, #92]	; 0x5c
	attitudePub.roll = roll;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80056fc:	661a      	str	r2, [r3, #96]	; 0x60
	attitudePub.pitch = pitch;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005702:	665a      	str	r2, [r3, #100]	; 0x64
	attitudePub.yaw = yaw;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005708:	669a      	str	r2, [r3, #104]	; 0x68

	msgBus.setAttitude(attitudePub);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3348      	adds	r3, #72	; 0x48
 800570e:	4619      	mov	r1, r3
 8005710:	481c      	ldr	r0, [pc, #112]	; (8005784 <_ZN2FC10ModuleAHRS7oneStepEv+0x3dc>)
 8005712:	f7ff fda4 	bl	800525e <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

	nedAccelPub.timestamp = microsecond();
 8005716:	f7ff fdcf 	bl	80052b8 <_ZL11microsecondv>
 800571a:	4603      	mov	r3, r0
 800571c:	460c      	mov	r4, r1
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	nedAccelPub.xyz[0] = tempNedAccel(0);
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fda0 	bl	8007270 <_ZN6matrix6VectorIfLj3EEclEj>
 8005730:	4603      	mov	r3, r0
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	679a      	str	r2, [r3, #120]	; 0x78
	nedAccelPub.xyz[1] = tempNedAccel(1);
 8005738:	f107 030c 	add.w	r3, r7, #12
 800573c:	2101      	movs	r1, #1
 800573e:	4618      	mov	r0, r3
 8005740:	f001 fd96 	bl	8007270 <_ZN6matrix6VectorIfLj3EEclEj>
 8005744:	4603      	mov	r3, r0
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	67da      	str	r2, [r3, #124]	; 0x7c
	nedAccelPub.xyz[2] = tempNedAccel(2);
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	2102      	movs	r1, #2
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fd8c 	bl	8007270 <_ZN6matrix6VectorIfLj3EEclEj>
 8005758:	4603      	mov	r3, r0
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	msgBus.setNedAccel(nedAccelPub);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3370      	adds	r3, #112	; 0x70
 8005766:	4619      	mov	r1, r3
 8005768:	4806      	ldr	r0, [pc, #24]	; (8005784 <_ZN2FC10ModuleAHRS7oneStepEv+0x3dc>)
 800576a:	f7ff fd8f 	bl	800528c <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>

	/* Freq class variable */
	freqCnt++;
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <_ZN2FC10ModuleAHRS7oneStepEv+0x3e0>)
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	4b04      	ldr	r3, [pc, #16]	; (8005788 <_ZN2FC10ModuleAHRS7oneStepEv+0x3e0>)
 8005778:	801a      	strh	r2, [r3, #0]
}
 800577a:	bf00      	nop
 800577c:	3780      	adds	r7, #128	; 0x80
 800577e:	46bd      	mov	sp, r7
 8005780:	bdb0      	pop	{r4, r5, r7, pc}
 8005782:	bf00      	nop
 8005784:	200005a0 	.word	0x200005a0
 8005788:	200004d4 	.word	0x200004d4
 800578c:	00000000 	.word	0x00000000

08005790 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	b0af      	sub	sp, #188	; 0xbc
 8005794:	af00      	add	r7, sp, #0
 8005796:	6278      	str	r0, [r7, #36]	; 0x24
 8005798:	ed87 0a08 	vstr	s0, [r7, #32]
 800579c:	edc7 0a07 	vstr	s1, [r7, #28]
 80057a0:	ed87 1a06 	vstr	s2, [r7, #24]
 80057a4:	edc7 1a05 	vstr	s3, [r7, #20]
 80057a8:	ed87 2a04 	vstr	s4, [r7, #16]
 80057ac:	edc7 2a03 	vstr	s5, [r7, #12]
 80057b0:	ed87 3a02 	vstr	s6, [r7, #8]
 80057b4:	edc7 3a01 	vstr	s7, [r7, #4]
 80057b8:	ed87 4a00 	vstr	s8, [r7]
//		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
//		return;
//	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80057c2:	eeb1 7a67 	vneg.f32	s14, s15
 80057c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80057ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80057d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80057d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80057e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80057ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80057f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057fa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005804:	edd7 7a08 	vldr	s15, [r7, #32]
 8005808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005812:	edd7 7a06 	vldr	s15, [r7, #24]
 8005816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800581a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005824:	edd7 7a07 	vldr	s15, [r7, #28]
 8005828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800582c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005830:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005838:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005842:	edd7 7a07 	vldr	s15, [r7, #28]
 8005846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005850:	edd7 7a06 	vldr	s15, [r7, #24]
 8005854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005862:	edd7 7a08 	vldr	s15, [r7, #32]
 8005866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800586a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800586e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005876:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005880:	edd7 7a06 	vldr	s15, [r7, #24]
 8005884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800588e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005896:	ee37 7a27 	vadd.f32	s14, s14, s15
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80058a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80058a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80058b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058b4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80058b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80058bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80058c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058c4:	edd7 6a04 	vldr	s13, [r7, #16]
 80058c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80058cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80058d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80058dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e4:	eeb0 0a67 	vmov.f32	s0, s15
 80058e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ea:	f001 f9cf 	bl	8006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>
 80058ee:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 80058f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80058f6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 8005902:	ed97 7a04 	vldr	s14, [r7, #16]
 8005906:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 8005912:	ed97 7a03 	vldr	s14, [r7, #12]
 8005916:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8005922:	ed97 7a02 	vldr	s14, [r7, #8]
 8005926:	edd7 7a02 	vldr	s15, [r7, #8]
 800592a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800592e:	edd7 6a01 	vldr	s13, [r7, #4]
 8005932:	edd7 7a01 	vldr	s15, [r7, #4]
 8005936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800593a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800593e:	edd7 6a00 	vldr	s13, [r7]
 8005942:	edd7 7a00 	vldr	s15, [r7]
 8005946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800594e:	eeb0 0a67 	vmov.f32	s0, s15
 8005952:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005954:	f001 f99a 	bl	8006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005958:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 800595c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005960:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005968:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 800596c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005970:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005978:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 800597c:	ed97 7a00 	vldr	s14, [r7]
 8005980:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005988:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005996:	ed97 7a02 	vldr	s14, [r7, #8]
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80059a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80059b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80059be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059c2:	ed97 7a00 	vldr	s14, [r7]
 80059c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ca:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80059d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80059dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80059ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059ee:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80059f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059fc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005a06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a0a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a18:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005a22:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a30:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005a3a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a48:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a70:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a84:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a98:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aac:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b10:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8005b14:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b18:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005b26:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005b38:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b44:	edd7 6a02 	vldr	s13, [r7, #8]
 8005b48:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b54:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8005b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b6e:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8005b72:	edd7 7a00 	vldr	s15, [r7]
 8005b76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b88:	edd7 6a02 	vldr	s13, [r7, #8]
 8005b8c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b98:	edd7 6a02 	vldr	s13, [r7, #8]
 8005b9c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ba8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005bb2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bba:	edd7 6a01 	vldr	s13, [r7, #4]
 8005bbe:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005bd0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005be2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bee:	edd7 6a01 	vldr	s13, [r7, #4]
 8005bf2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bfe:	edd7 6a01 	vldr	s13, [r7, #4]
 8005c02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c0e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005c12:	edd7 7a00 	vldr	s15, [r7]
 8005c16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c28:	edd7 6a01 	vldr	s13, [r7, #4]
 8005c2c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c38:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 8005c3c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005c40:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c48:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005c4c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c58:	ee17 0a90 	vmov	r0, s15
 8005c5c:	f7fa fc84 	bl	8000568 <__aeabi_f2d>
 8005c60:	4603      	mov	r3, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	ec44 3b10 	vmov	d0, r3, r4
 8005c68:	f016 fabe 	bl	801c1e8 <sqrt>
 8005c6c:	ec54 3b10 	vmov	r3, r4, d0
 8005c70:	4618      	mov	r0, r3
 8005c72:	4621      	mov	r1, r4
 8005c74:	f7fa ffc8 	bl	8000c08 <__aeabi_d2f>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	64bb      	str	r3, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8005c7c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005c80:	eeb1 7a67 	vneg.f32	s14, s15
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005c94:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ca0:	edd7 6a00 	vldr	s13, [r7]
 8005ca4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005cb6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cc2:	edd7 6a00 	vldr	s13, [r7]
 8005cc6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cd2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cec:	edd7 6a00 	vldr	s13, [r7]
 8005cf0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cfc:	edd7 6a00 	vldr	s13, [r7]
 8005d00:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 8005d10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d18:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 8005d1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005d28:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005d2c:	eeb1 7a67 	vneg.f32	s14, s15
 8005d30:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d34:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d38:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d4c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005d50:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d54:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d64:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005d76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d7e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005d82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d86:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d8a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005d8e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d92:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005d96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d9a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005d9e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005da2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005da6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005daa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005dae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005db2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005db6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dc2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005dc6:	eef1 6a67 	vneg.f32	s13, s15
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005dd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005dda:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005dde:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005de2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005de6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005dea:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005dee:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005df2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005df6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005dfa:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005dfe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e02:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005e0a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e0e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005e28:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005e2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e30:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005e34:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e3c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005e40:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e44:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005e48:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005e4c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e50:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e54:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005e5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e64:	edd7 7a00 	vldr	s15, [r7]
 8005e68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e74:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005e78:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005e80:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e88:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e90:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e98:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005e9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ea0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ea4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005eac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005eb0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005ec2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005ec6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005eca:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005ece:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ed2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005ed6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005eda:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ee2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005eea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005efc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005f00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f04:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005f08:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f0c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f10:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005f14:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005f1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f20:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005f24:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f28:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005f2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005f30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f34:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f38:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005f4e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005f52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005f5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005f60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f68:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005f6c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005f70:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005f78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f7c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005f80:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005f84:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005f88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005f8c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f94:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f98:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005faa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005fae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005fb8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005fbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005fc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005fc4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005fc8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005fcc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005fd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005fd4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fd8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005fdc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005fe0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005fe4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005fe8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005fec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005ff0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ff4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ff8:	edd7 7a00 	vldr	s15, [r7]
 8005ffc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006008:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800600c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006010:	eeb1 7a67 	vneg.f32	s14, s15
 8006014:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006018:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800601c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006020:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006024:	edd7 7a05 	vldr	s15, [r7, #20]
 8006028:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800602c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006030:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006034:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006038:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800603c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006040:	edd7 7a04 	vldr	s15, [r7, #16]
 8006044:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006048:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800604c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800605a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800605e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006062:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006066:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800606a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800606e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006072:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006076:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800607a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800607e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006082:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800608a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800608e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006092:	eef1 6a67 	vneg.f32	s13, s15
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800609c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 80060a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80060aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060b2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80060b6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80060ba:	ee36 6a67 	vsub.f32	s12, s12, s15
 80060be:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80060c2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80060c6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80060ca:	ee26 6a27 	vmul.f32	s12, s12, s15
 80060ce:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80060d2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80060d6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80060da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80060de:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80060e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80060e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80060ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80060ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80060fc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006100:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800610a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800610e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006112:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006116:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800611a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800611e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006122:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006126:	ee26 6a27 	vmul.f32	s12, s12, s15
 800612a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800612e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006132:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006136:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800613a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800613e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006142:	edd7 7a01 	vldr	s15, [r7, #4]
 8006146:	ee76 7a67 	vsub.f32	s15, s12, s15
 800614a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800614e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8006158:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800615c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8006166:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800616a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800616e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006172:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8006176:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800617a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800617e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006182:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006186:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800618a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800618e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006192:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006196:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800619a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800619e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80061a2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80061a6:	edd7 7a00 	vldr	s15, [r7]
 80061aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80061ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80061ba:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80061be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80061c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80061c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80061ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061d2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80061d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061da:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80061de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80061e2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80061e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80061ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80061ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80061f2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80061f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006202:	eef1 6a67 	vneg.f32	s13, s15
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800620c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8006216:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800621a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800621e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006222:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006226:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800622a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800622e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006232:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006236:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800623a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800623e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8006242:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006246:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800624a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800624e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006252:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006256:	edd7 7a02 	vldr	s15, [r7, #8]
 800625a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800625e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006266:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800626a:	eef1 6a67 	vneg.f32	s13, s15
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006274:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800627e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006282:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006286:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800628a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800628e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006292:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006296:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800629a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800629e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80062a2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80062a6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80062aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80062ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80062b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80062b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80062be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80062cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80062d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80062d4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80062d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80062dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80062e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80062e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80062e8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80062ec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80062f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80062f4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80062f8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80062fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006300:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006304:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006308:	edd7 7a00 	vldr	s15, [r7]
 800630c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006318:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800631c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006320:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006328:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800632c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006338:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800633c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006348:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800634c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006358:	eeb0 0a67 	vmov.f32	s0, s15
 800635c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800635e:	f000 fc95 	bl	8006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006362:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 8006366:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800636a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800636e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006372:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 8006376:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800637a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800637e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006382:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 8006386:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800638a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800638e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006392:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 8006396:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800639a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800639e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80063ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80063b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80063b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063bc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80063c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80063d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063d6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80063e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80063e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80063ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063f0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80063fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8006406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800640a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)*1000000;	/*[second]*/
 800640e:	f7fe ff53 	bl	80052b8 <_ZL11microsecondv>
 8006412:	460a      	mov	r2, r1
 8006414:	4601      	mov	r1, r0
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800641c:	1ac9      	subs	r1, r1, r3
 800641e:	eb62 0204 	sbc.w	r2, r2, r4
 8006422:	460d      	mov	r5, r1
 8006424:	4616      	mov	r6, r2
 8006426:	462b      	mov	r3, r5
 8006428:	4634      	mov	r4, r6
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	0162      	lsls	r2, r4, #5
 8006434:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006438:	0159      	lsls	r1, r3, #5
 800643a:	460b      	mov	r3, r1
 800643c:	4614      	mov	r4, r2
 800643e:	1b5b      	subs	r3, r3, r5
 8006440:	eb64 0406 	sbc.w	r4, r4, r6
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	0262      	lsls	r2, r4, #9
 800644e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006452:	0259      	lsls	r1, r3, #9
 8006454:	460b      	mov	r3, r1
 8006456:	4614      	mov	r4, r2
 8006458:	195b      	adds	r3, r3, r5
 800645a:	eb44 0406 	adc.w	r4, r4, r6
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	01a2      	lsls	r2, r4, #6
 8006468:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800646c:	0199      	lsls	r1, r3, #6
 800646e:	1ac9      	subs	r1, r1, r3
 8006470:	eb62 0204 	sbc.w	r2, r2, r4
 8006474:	194b      	adds	r3, r1, r5
 8006476:	eb42 0406 	adc.w	r4, r2, r6
 800647a:	4618      	mov	r0, r3
 800647c:	4621      	mov	r1, r4
 800647e:	f7fa fcdb 	bl	8000e38 <__aeabi_ul2f>
 8006482:	4603      	mov	r3, r0
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	4618      	mov	r0, r3
 800648a:	f7fa f86d 	bl	8000568 <__aeabi_f2d>
 800648e:	a34f      	add	r3, pc, #316	; (adr r3, 80065cc <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe3c>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7fa fb50 	bl	8000b38 <__aeabi_dcmpgt>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd12>
 800649e:	4b4a      	ldr	r3, [pc, #296]	; (80065c8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe38>)
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80064a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064ac:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80064b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80064c4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064c8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80064cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80064e0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064e4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80064e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80064fc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006500:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800651e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800652e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800655a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800655e:	eeb0 0a67 	vmov.f32	s0, s15
 8006562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006564:	f000 fb92 	bl	8006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006568:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006572:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006586:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800659a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80065ae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80065b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 80065bc:	bf00      	nop
 80065be:	37bc      	adds	r7, #188	; 0xbc
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c4:	f3af 8000 	nop.w
 80065c8:	3c23d70a 	.word	0x3c23d70a
 80065cc:	47ae147b 	.word	0x47ae147b
 80065d0:	3f847ae1 	.word	0x3f847ae1
 80065d4:	00000000 	.word	0x00000000

080065d8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80065d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065da:	b0a1      	sub	sp, #132	; 0x84
 80065dc:	af00      	add	r7, sp, #0
 80065de:	61f8      	str	r0, [r7, #28]
 80065e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80065e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80065e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80065ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80065f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80065f4:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80065fe:	eeb1 7a67 	vneg.f32	s14, s15
 8006602:	edd7 7a06 	vldr	s15, [r7, #24]
 8006606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006610:	edd7 7a05 	vldr	s15, [r7, #20]
 8006614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006622:	edd7 7a04 	vldr	s15, [r7, #16]
 8006626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800662a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800662e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006636:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006640:	edd7 7a06 	vldr	s15, [r7, #24]
 8006644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800664e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006656:	ee37 7a27 	vadd.f32	s14, s14, s15
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006660:	edd7 7a05 	vldr	s15, [r7, #20]
 8006664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800666c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006674:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800667e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800668c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800669e:	edd7 7a06 	vldr	s15, [r7, #24]
 80066a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80066ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066b2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80066bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80066c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 80066ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80066ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80066dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80066e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80066ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066f0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80066f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80066f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80066fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006700:	edd7 6a02 	vldr	s13, [r7, #8]
 8006704:	edd7 7a02 	vldr	s15, [r7, #8]
 8006708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800670c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006710:	edd7 6a01 	vldr	s13, [r7, #4]
 8006714:	edd7 7a01 	vldr	s15, [r7, #4]
 8006718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800671c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006720:	eeb0 0a67 	vmov.f32	s0, s15
 8006724:	69f8      	ldr	r0, [r7, #28]
 8006726:	f000 fab1 	bl	8006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>
 800672a:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 800672e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006732:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673a:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 800673e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006742:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 800674e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006752:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675a:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006768:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006772:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006776:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006780:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006784:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800678e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006792:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800679c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80067a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067a4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80067ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80067b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067b6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80067c0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80067c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80067d2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80067d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067da:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80067e4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80067e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80067fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006800:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006814:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006828:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8006840:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006844:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800684c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006850:	edd7 7a03 	vldr	s15, [r7, #12]
 8006854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800685c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006860:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800686c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006870:	edd7 7a02 	vldr	s15, [r7, #8]
 8006874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800687c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8006880:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006884:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800688c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006890:	edd7 7a03 	vldr	s15, [r7, #12]
 8006894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800689c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80068a0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80068a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80068ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068b6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80068ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80068be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80068ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068ce:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80068d2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80068d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068de:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80068e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80068e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068ee:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80068f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80068f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8006902:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006906:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800690a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006918:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800691c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006928:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800692c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006938:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800693c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006948:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800694c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006950:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8006954:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800695c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006960:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8006964:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800696c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006970:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8006974:	edd7 7a01 	vldr	s15, [r7, #4]
 8006978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800697c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006980:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8006984:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006988:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800698c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800699a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800699e:	edd7 7a03 	vldr	s15, [r7, #12]
 80069a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80069ae:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80069b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80069bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069c4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80069c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80069cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80069d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80069dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80069e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069e4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80069e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80069ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80069f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80069fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a04:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006a08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a14:	eeb0 0a67 	vmov.f32	s0, s15
 8006a18:	69f8      	ldr	r0, [r7, #28]
 8006a1a:	f000 f937 	bl	8006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006a1e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 8006a22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006a26:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 8006a32:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006a36:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 8006a42:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006a46:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 8006a52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006a56:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006a68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a70:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8006a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a78:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006a82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8006a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a92:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006a9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006aac:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006ab6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8006ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)*1000000;			/*[second]*/
 8006aca:	f7fe fbf5 	bl	80052b8 <_ZL11microsecondv>
 8006ace:	460a      	mov	r2, r1
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006ad8:	1ac9      	subs	r1, r1, r3
 8006ada:	eb62 0204 	sbc.w	r2, r2, r4
 8006ade:	460d      	mov	r5, r1
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	462b      	mov	r3, r5
 8006ae4:	4634      	mov	r4, r6
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	0162      	lsls	r2, r4, #5
 8006af0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006af4:	0159      	lsls	r1, r3, #5
 8006af6:	460b      	mov	r3, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	1b5b      	subs	r3, r3, r5
 8006afc:	eb64 0406 	sbc.w	r4, r4, r6
 8006b00:	f04f 0100 	mov.w	r1, #0
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	0262      	lsls	r2, r4, #9
 8006b0a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006b0e:	0259      	lsls	r1, r3, #9
 8006b10:	460b      	mov	r3, r1
 8006b12:	4614      	mov	r4, r2
 8006b14:	195b      	adds	r3, r3, r5
 8006b16:	eb44 0406 	adc.w	r4, r4, r6
 8006b1a:	f04f 0100 	mov.w	r1, #0
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	01a2      	lsls	r2, r4, #6
 8006b24:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8006b28:	0199      	lsls	r1, r3, #6
 8006b2a:	1ac9      	subs	r1, r1, r3
 8006b2c:	eb62 0204 	sbc.w	r2, r2, r4
 8006b30:	194b      	adds	r3, r1, r5
 8006b32:	eb42 0406 	adc.w	r4, r2, r6
 8006b36:	4618      	mov	r0, r3
 8006b38:	4621      	mov	r1, r4
 8006b3a:	f7fa f97d 	bl	8000e38 <__aeabi_ul2f>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7f9 fd0f 	bl	8000568 <__aeabi_f2d>
 8006b4a:	a34e      	add	r3, pc, #312	; (adr r3, 8006c84 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6ac>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fff2 	bl	8000b38 <__aeabi_dcmpgt>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x586>
 8006b5a:	4b49      	ldr	r3, [pc, #292]	; (8006c80 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6a8>)
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006b64:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006b68:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006b80:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006b84:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006b9c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006ba0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006bb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006bbc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c1e:	69f8      	ldr	r0, [r7, #28]
 8006c20:	f000 f834 	bl	8006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006c24:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006c2e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8006c42:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8006c56:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006c6a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8006c78:	bf00      	nop
 8006c7a:	3784      	adds	r7, #132	; 0x84
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c80:	3c23d70a 	.word	0x3c23d70a
 8006c84:	47ae147b 	.word	0x47ae147b
 8006c88:	3f847ae1 	.word	0x3f847ae1

08006c8c <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 8006c98:	edd7 7a00 	vldr	s15, [r7]
 8006c9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ca4:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006cac:	f107 0310 	add.w	r3, r7, #16
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	105a      	asrs	r2, r3, #1
 8006cb8:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006cc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cea:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	ee07 3a90 	vmov	s15, r3
}
 8006cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	5f3759df 	.word	0x5f3759df

08006d08 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	461a      	mov	r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	6053      	str	r3, [r2, #4]
 8006d1a:	6093      	str	r3, [r2, #8]
 8006d1c:	60d3      	str	r3, [r2, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff ffe6 	bl	8006d08 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b088      	sub	sp, #32
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6178      	str	r0, [r7, #20]
 8006d4e:	ed87 0a04 	vstr	s0, [r7, #16]
 8006d52:	edc7 0a03 	vstr	s1, [r7, #12]
 8006d56:	ed87 1a02 	vstr	s2, [r7, #8]
 8006d5a:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff ffe3 	bl	8006d2c <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fa9e 	bl	80072b0 <_ZN6matrix6VectorIfLj4EEclEj>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6013      	str	r3, [r2, #0]
        q(1) = b;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fa96 	bl	80072b0 <_ZN6matrix6VectorIfLj4EEclEj>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6013      	str	r3, [r2, #0]
        q(2) = c;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2102      	movs	r1, #2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fa8e 	bl	80072b0 <_ZN6matrix6VectorIfLj4EEclEj>
 8006d94:	4602      	mov	r2, r0
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6013      	str	r3, [r2, #0]
        q(3) = d;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2103      	movs	r1, #3
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fa86 	bl	80072b0 <_ZN6matrix6VectorIfLj4EEclEj>
 8006da4:	4602      	mov	r2, r0
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6013      	str	r3, [r2, #0]
    }
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	4618      	mov	r0, r3
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_ZNK6matrix10QuaternionIfE8inversedEv>:
    /**
     * Invert quaternion
     *
     * @return inverted quaternion
     */
    Quaternion inversed() const
 8006db4:	b580      	push	{r7, lr}
 8006db6:	ed2d 8b04 	vpush	{d8-d9}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
    {
        const Quaternion &q = *this;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]
        Type normSq = q.dot(q);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fa8f 	bl	80072f0 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>
 8006dd2:	ed87 0a02 	vstr	s0, [r7, #8]
        return Quaternion(
                   q(0)/normSq,
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fabc 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006de0:	eeb0 7a40 	vmov.f32	s14, s0
                   -q(1)/normSq,
                   -q(2)/normSq,
                   -q(3)/normSq);
 8006de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8006de8:	ee87 8a27 	vdiv.f32	s16, s14, s15
                   -q(1)/normSq,
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2101      	movs	r1, #1
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fab1 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006df6:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8006dfa:	eeb1 7a67 	vneg.f32	s14, s15
 8006dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e02:	eec7 8a27 	vdiv.f32	s17, s14, s15
                   -q(2)/normSq,
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2102      	movs	r1, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 faa4 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006e10:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8006e14:	eeb1 7a67 	vneg.f32	s14, s15
 8006e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e1c:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2103      	movs	r1, #3
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fa97 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006e2a:	eef0 7a40 	vmov.f32	s15, s0
 8006e2e:	eeb1 7a67 	vneg.f32	s14, s15
 8006e32:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e3a:	eef0 1a66 	vmov.f32	s3, s13
 8006e3e:	eeb0 1a49 	vmov.f32	s2, s18
 8006e42:	eef0 0a68 	vmov.f32	s1, s17
 8006e46:	eeb0 0a48 	vmov.f32	s0, s16
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff ff7b 	bl	8006d46 <_ZN6matrix10QuaternionIfEC1Effff>
    }
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	ecbd 8b04 	vpop	{d8-d9}
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4618      	mov	r0, r3
 8006e68:	2324      	movs	r3, #36	; 0x24
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f016 fc98 	bl	801d7a2 <memset>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff ffe8 	bl	8006e5c <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 8006e96:	b580      	push	{r7, lr}
 8006e98:	ed2d 8b02 	vpush	{d8}
 8006e9c:	b092      	sub	sp, #72	; 0x48
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
    {
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff ffe8 	bl	8006e7c <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fa4f 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006eba:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fa48 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006ec8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2102      	movs	r1, #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fa41 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006ed6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2103      	movs	r1, #3
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fa3a 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006ee4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 8006ee8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006eec:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 8006ef8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006efc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 8006f08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006f0c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f14:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 8006f18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006f1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 8006f28:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f34:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 8006f38:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f44:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 8006f48:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f54:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 8006f58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006f5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f64:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 8006f68:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006f6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f74:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 8006f78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006f7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f84:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 8006f88:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006f8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f94:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f98:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f9fa 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fae:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006fb2:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 8006fb6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006fba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006fbe:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f9e7 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006fd4:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 8006fd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006fdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fe0:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f9d6 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006ff6:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 8006ffa:	ed97 7a07 	vldr	s14, [r7, #28]
 8006ffe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007002:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007008:	2200      	movs	r2, #0
 800700a:	2101      	movs	r1, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f000 f9c5 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007012:	4603      	mov	r3, r0
 8007014:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007018:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800701c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007020:	edd7 7a08 	vldr	s15, [r7, #32]
 8007024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007028:	edd7 7a05 	vldr	s15, [r7, #20]
 800702c:	ee37 8a27 	vadd.f32	s16, s14, s15
 8007030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007032:	2201      	movs	r2, #1
 8007034:	2101      	movs	r1, #1
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f9b0 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800703c:	4603      	mov	r3, r0
 800703e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007042:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007046:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 800704a:	ed97 7a04 	vldr	s14, [r7, #16]
 800704e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007052:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007058:	2202      	movs	r2, #2
 800705a:	2101      	movs	r1, #1
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f99d 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007062:	4603      	mov	r3, r0
 8007064:	ee78 7a08 	vadd.f32	s15, s16, s16
 8007068:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 800706c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007070:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007074:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707a:	2200      	movs	r2, #0
 800707c:	2102      	movs	r1, #2
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f98c 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8007084:	4603      	mov	r3, r0
 8007086:	ee78 7a08 	vadd.f32	s15, s16, s16
 800708a:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 800708e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007092:	edd7 7a04 	vldr	s15, [r7, #16]
 8007096:	ee37 8a27 	vadd.f32	s16, s14, s15
 800709a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709c:	2201      	movs	r2, #1
 800709e:	2102      	movs	r1, #2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f97b 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80070a6:	4603      	mov	r3, r0
 80070a8:	ee78 7a08 	vadd.f32	s15, s16, s16
 80070ac:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 80070b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80070b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80070b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80070bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80070c0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80070c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c6:	2202      	movs	r2, #2
 80070c8:	2102      	movs	r1, #2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f966 	bl	800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80070d0:	4603      	mov	r3, r0
 80070d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80070d6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80070da:	edc3 7a00 	vstr	s15, [r3]
    }
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4618      	mov	r0, r3
 80070e2:	3748      	adds	r7, #72	; 0x48
 80070e4:	46bd      	mov	sp, r7
 80070e6:	ecbd 8b02 	vpop	{d8}
 80070ea:	bd80      	pop	{r7, pc}

080070ec <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	461a      	mov	r2, r3
 80070f8:	2300      	movs	r3, #0
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	6053      	str	r3, [r2, #4]
 80070fe:	6093      	str	r3, [r2, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff ffe7 	bl	80070ec <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	ed87 0a02 	vstr	s0, [r7, #8]
 8007134:	edc7 0a01 	vstr	s1, [r7, #4]
 8007138:	ed87 1a00 	vstr	s2, [r7]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff ffe5 	bl	800710e <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	617b      	str	r3, [r7, #20]
        v(0) = x;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2100      	movs	r1, #0
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f88f 	bl	8007270 <_ZN6matrix6VectorIfLj3EEclEj>
 8007152:	4602      	mov	r2, r0
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6013      	str	r3, [r2, #0]
        v(1) = y;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2101      	movs	r1, #1
 800715c:	4618      	mov	r0, r3
 800715e:	f000 f887 	bl	8007270 <_ZN6matrix6VectorIfLj3EEclEj>
 8007162:	4602      	mov	r2, r0
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6013      	str	r3, [r2, #0]
        v(2) = z;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f87f 	bl	8007270 <_ZN6matrix6VectorIfLj3EEclEj>
 8007172:	4602      	mov	r2, r0
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6013      	str	r3, [r2, #0]
    }
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 8007182:	b580      	push	{r7, lr}
 8007184:	ed2d 8b02 	vpush	{d8}
 8007188:	b088      	sub	sp, #32
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	461a      	mov	r2, r3
 800719a:	2300      	movs	r3, #0
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	6053      	str	r3, [r2, #4]
 80071a0:	6093      	str	r3, [r2, #8]
        res.setZero();
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 f928 	bl	80073f8 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d831      	bhi.n	8007216 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 80071b2:	2300      	movs	r3, #0
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d128      	bne.n	800720e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d81f      	bhi.n	8007206 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	69f9      	ldr	r1, [r7, #28]
 80071ca:	6938      	ldr	r0, [r7, #16]
 80071cc:	f000 f94c 	bl	8007468 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 80071d0:	eeb0 8a40 	vmov.f32	s16, s0
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	6979      	ldr	r1, [r7, #20]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f977 	bl	80074cc <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 80071de:	eef0 7a40 	vmov.f32	s15, s0
 80071e2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	69f9      	ldr	r1, [r7, #28]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f912 	bl	8007414 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 80071f0:	4603      	mov	r3, r0
 80071f2:	edd3 7a00 	vldr	s15, [r3]
 80071f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80071fa:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	e7dc      	b.n	80071c0 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	3301      	adds	r3, #1
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	e7d3      	b.n	80071b6 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	3301      	adds	r3, #1
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	e7ca      	b.n	80071ac <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 8007216:	bf00      	nop
    }
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	ecbd 8b02 	vpop	{d8}
 8007222:	bd80      	pop	{r7, pc}

08007224 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f978 	bl	8007528 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
    {
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	461a      	mov	r2, r3
 8007250:	2300      	movs	r3, #0
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	6053      	str	r3, [r2, #4]
 8007256:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	220c      	movs	r2, #12
 800725e:	4618      	mov	r0, r3
 8007260:	f016 fa94 	bl	801d78c <memcpy>
    }
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d905      	bls.n	800728c <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 8007280:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 8007282:	4a09      	ldr	r2, [pc, #36]	; (80072a8 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 8007284:	2137      	movs	r1, #55	; 0x37
 8007286:	4809      	ldr	r0, [pc, #36]	; (80072ac <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 8007288:	f016 fa26 	bl	801d6d8 <__assert_func>

        MatrixM1 &v = *this;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 8007290:	2200      	movs	r2, #0
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f8bd 	bl	8007414 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800729a:	4603      	mov	r3, r0
    }
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	08021e20 	.word	0x08021e20
 80072a8:	08022488 	.word	0x08022488
 80072ac:	08021e28 	.word	0x08021e28

080072b0 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
        assert(i < M);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d905      	bls.n	80072cc <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 80072c0:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 80072c2:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 80072c4:	2137      	movs	r1, #55	; 0x37
 80072c6:	4809      	ldr	r0, [pc, #36]	; (80072ec <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 80072c8:	f016 fa06 	bl	801d6d8 <__assert_func>
        MatrixM1 &v = *this;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 80072d0:	2200      	movs	r2, #0
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f937 	bl	8007548 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 80072da:	4603      	mov	r3, r0
    }
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	08021e20 	.word	0x08021e20
 80072e8:	08022024 	.word	0x08022024
 80072ec:	08021e28 	.word	0x08021e28

080072f0 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>:

    Type dot(const MatrixM1 & b) const {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	ed2d 8b02 	vpush	{d8}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
        const Vector &a(*this);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60fb      	str	r3, [r7, #12]
        Type r(0);
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 8007308:	2300      	movs	r3, #0
 800730a:	613b      	str	r3, [r7, #16]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b03      	cmp	r3, #3
 8007310:	d818      	bhi.n	8007344 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x54>
            r += a(i)*b(i,0);
 8007312:	6939      	ldr	r1, [r7, #16]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f81f 	bl	8007358 <_ZNK6matrix6VectorIfLj4EEclEj>
 800731a:	eeb0 8a40 	vmov.f32	s16, s0
 800731e:	2200      	movs	r2, #0
 8007320:	6939      	ldr	r1, [r7, #16]
 8007322:	6838      	ldr	r0, [r7, #0]
 8007324:	f000 f93a 	bl	800759c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 8007328:	eef0 7a40 	vmov.f32	s15, s0
 800732c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007330:	ed97 7a05 	vldr	s14, [r7, #20]
 8007334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007338:	edc7 7a05 	vstr	s15, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3301      	adds	r3, #1
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	e7e3      	b.n	800730c <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x1c>
        }
        return r;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	ee07 3a90 	vmov	s15, r3
    }
 800734a:	eeb0 0a67 	vmov.f32	s0, s15
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	ecbd 8b02 	vpop	{d8}
 8007356:	bd80      	pop	{r7, pc}

08007358 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
        assert(i < M);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b03      	cmp	r3, #3
 8007366:	d905      	bls.n	8007374 <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 800736c:	212e      	movs	r1, #46	; 0x2e
 800736e:	480a      	ldr	r0, [pc, #40]	; (8007398 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 8007370:	f016 f9b2 	bl	801d6d8 <__assert_func>
        const MatrixM1 &v = *this;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 8007378:	2200      	movs	r2, #0
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f90d 	bl	800759c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 8007382:	eef0 7a40 	vmov.f32	s15, s0
    }
 8007386:	eeb0 0a67 	vmov.f32	s0, s15
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	08021e20 	.word	0x08021e20
 8007394:	080221c0 	.word	0x080221c0
 8007398:	08021e28 	.word	0x08021e28

0800739c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d905      	bls.n	80073ba <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 80073ae:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 80073b0:	4a0e      	ldr	r2, [pc, #56]	; (80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 80073b2:	216e      	movs	r1, #110	; 0x6e
 80073b4:	480e      	ldr	r0, [pc, #56]	; (80073f0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 80073b6:	f016 f98f 	bl	801d6d8 <__assert_func>
        assert(j < N);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d905      	bls.n	80073cc <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 80073c2:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 80073c4:	2170      	movs	r1, #112	; 0x70
 80073c6:	480a      	ldr	r0, [pc, #40]	; (80073f0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 80073c8:	f016 f986 	bl	801d6d8 <__assert_func>
        return _data[i][j];
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	4413      	add	r3, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4413      	add	r3, r2
    }
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	08021e20 	.word	0x08021e20
 80073ec:	08022238 	.word	0x08022238
 80073f0:	08021e58 	.word	0x08021e58
 80073f4:	08021e88 	.word	0x08021e88

080073f8 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	220c      	movs	r2, #12
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f016 f9cb 	bl	801d7a2 <memset>
    }
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d905      	bls.n	8007432 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 8007428:	4a0c      	ldr	r2, [pc, #48]	; (800745c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800742a:	216e      	movs	r1, #110	; 0x6e
 800742c:	480c      	ldr	r0, [pc, #48]	; (8007460 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800742e:	f016 f953 	bl	801d6d8 <__assert_func>
        assert(j < N);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d005      	beq.n	8007444 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 8007438:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800743a:	4a08      	ldr	r2, [pc, #32]	; (800745c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800743c:	2170      	movs	r1, #112	; 0x70
 800743e:	4808      	ldr	r0, [pc, #32]	; (8007460 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8007440:	f016 f94a 	bl	801d6d8 <__assert_func>
        return _data[i][j];
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4413      	add	r3, r2
    }
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08021e20 	.word	0x08021e20
 800745c:	080223f8 	.word	0x080223f8
 8007460:	08021e58 	.word	0x08021e58
 8007464:	08021e88 	.word	0x08021e88

08007468 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d905      	bls.n	8007486 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800747a:	4b10      	ldr	r3, [pc, #64]	; (80074bc <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800747c:	4a10      	ldr	r2, [pc, #64]	; (80074c0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800747e:	2164      	movs	r1, #100	; 0x64
 8007480:	4810      	ldr	r0, [pc, #64]	; (80074c4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 8007482:	f016 f929 	bl	801d6d8 <__assert_func>
        assert(j < N);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d905      	bls.n	8007498 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 800748e:	4a0c      	ldr	r2, [pc, #48]	; (80074c0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 8007490:	2166      	movs	r1, #102	; 0x66
 8007492:	480c      	ldr	r0, [pc, #48]	; (80074c4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 8007494:	f016 f920 	bl	801d6d8 <__assert_func>
        return _data[i][j];
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4613      	mov	r3, r2
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	4413      	add	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	ee07 3a90 	vmov	s15, r3
    }
 80074b0:	eeb0 0a67 	vmov.f32	s0, s15
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	08021e20 	.word	0x08021e20
 80074c0:	080222c8 	.word	0x080222c8
 80074c4:	08021e58 	.word	0x08021e58
 80074c8:	08021e88 	.word	0x08021e88

080074cc <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d905      	bls.n	80074ea <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 80074e0:	4a0e      	ldr	r2, [pc, #56]	; (800751c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 80074e2:	2164      	movs	r1, #100	; 0x64
 80074e4:	480e      	ldr	r0, [pc, #56]	; (8007520 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 80074e6:	f016 f8f7 	bl	801d6d8 <__assert_func>
        assert(j < N);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 80074f0:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 80074f2:	4a0a      	ldr	r2, [pc, #40]	; (800751c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 80074f4:	2166      	movs	r1, #102	; 0x66
 80074f6:	480a      	ldr	r0, [pc, #40]	; (8007520 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 80074f8:	f016 f8ee 	bl	801d6d8 <__assert_func>
        return _data[i][j];
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	440b      	add	r3, r1
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	ee07 3a90 	vmov	s15, r3
    }
 800750e:	eeb0 0a67 	vmov.f32	s0, s15
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	08021e20 	.word	0x08021e20
 800751c:	08022360 	.word	0x08022360
 8007520:	08021e58 	.word	0x08021e58
 8007524:	08021e88 	.word	0x08021e88

08007528 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fe83 	bl	8007242 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d905      	bls.n	8007566 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 800755c:	4a0c      	ldr	r2, [pc, #48]	; (8007590 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800755e:	216e      	movs	r1, #110	; 0x6e
 8007560:	480c      	ldr	r0, [pc, #48]	; (8007594 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8007562:	f016 f8b9 	bl	801d6d8 <__assert_func>
        assert(j < N);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800756e:	4a08      	ldr	r2, [pc, #32]	; (8007590 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 8007570:	2170      	movs	r1, #112	; 0x70
 8007572:	4808      	ldr	r0, [pc, #32]	; (8007594 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8007574:	f016 f8b0 	bl	801d6d8 <__assert_func>
        return _data[i][j];
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4413      	add	r3, r2
    }
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	08021e20 	.word	0x08021e20
 8007590:	08022098 	.word	0x08022098
 8007594:	08021e58 	.word	0x08021e58
 8007598:	08021e88 	.word	0x08021e88

0800759c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
        assert(i < M);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d905      	bls.n	80075ba <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 80075ae:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 80075b0:	4a0e      	ldr	r2, [pc, #56]	; (80075ec <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 80075b2:	2164      	movs	r1, #100	; 0x64
 80075b4:	480e      	ldr	r0, [pc, #56]	; (80075f0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 80075b6:	f016 f88f 	bl	801d6d8 <__assert_func>
        assert(j < N);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 80075c0:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 80075c2:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 80075c4:	2166      	movs	r1, #102	; 0x66
 80075c6:	480a      	ldr	r0, [pc, #40]	; (80075f0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 80075c8:	f016 f886 	bl	801d6d8 <__assert_func>
        return _data[i][j];
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	440b      	add	r3, r1
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	ee07 3a90 	vmov	s15, r3
    }
 80075de:	eeb0 0a67 	vmov.f32	s0, s15
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	08021e20 	.word	0x08021e20
 80075ec:	08022128 	.word	0x08022128
 80075f0:	08021e58 	.word	0x08021e58
 80075f4:	08021e88 	.word	0x08021e88

080075f8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 80075f8:	b490      	push	{r4, r7}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	e9d3 1200 	ldrd	r1, r2, [r3]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8007612:	42a2      	cmp	r2, r4
 8007614:	bf08      	it	eq
 8007616:	4299      	cmpeq	r1, r3
 8007618:	d001      	beq.n	800761e <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x26>
 800761a:	2301      	movs	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4614      	mov	r4, r2
 8007624:	33a0      	adds	r3, #160	; 0xa0
 8007626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bc90      	pop	{r4, r7}
 8007636:	4770      	bx	lr

08007638 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 8007638:	b4b0      	push	{r4, r5, r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	e9d3 1200 	ldrd	r1, r2, [r3]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8007652:	42a2      	cmp	r2, r4
 8007654:	bf08      	it	eq
 8007656:	4299      	cmpeq	r1, r3
 8007658:	d001      	beq.n	800765e <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x26>
 800765a:	2301      	movs	r3, #1
 800765c:	73fb      	strb	r3, [r7, #15]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4615      	mov	r5, r2
 8007664:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8007668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800766a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800766c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800766e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007674:	e885 0003 	stmia.w	r5, {r0, r1}
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	bcb0      	pop	{r4, r5, r7}
 8007682:	4770      	bx	lr

08007684 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 8007684:	b490      	push	{r4, r7}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	e9d3 1200 	ldrd	r1, r2, [r3]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 800769e:	42a2      	cmp	r2, r4
 80076a0:	bf08      	it	eq
 80076a2:	4299      	cmpeq	r1, r3
 80076a4:	d001      	beq.n	80076aa <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x26>
 80076a6:	2301      	movs	r3, #1
 80076a8:	73fb      	strb	r3, [r7, #15]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4614      	mov	r4, r2
 80076b0:	33f0      	adds	r3, #240	; 0xf0
 80076b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc90      	pop	{r4, r7}
 80076c2:	4770      	bx	lr

080076c4 <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>:

    SIMPLE_FUNC_IMPL(Health, Health, health)

    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 80076c4:	b4b0      	push	{r4, r5, r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80076d6:	4615      	mov	r5, r2
 80076d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bcb0      	pop	{r4, r5, r7}
 80076ec:	4770      	bx	lr

080076ee <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>:
  ~px4_AlgorithmModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_Second_att_control_codeb_T
 80076ee:	b4b0      	push	{r4, r5, r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
    * pExtU_Second_att_control_codeb_T)
  {
    Second_att_control_codeblock__U = *pExtU_Second_att_control_codeb_T;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 8007700:	4615      	mov	r5, r2
 8007702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007706:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800770a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	bcb0      	pop	{r4, r5, r7}
 8007716:	4770      	bx	lr

08007718 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const px4_AlgorithmModelClass::ExtY_Second_att_control_codeb_T
    & getExternalOutputs() const
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  {
    return Second_att_control_codeblock__Y;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
  }
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8007734:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8007738:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800773a:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <_ZL11microsecondv+0x40>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4619      	mov	r1, r3
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f04f 0b00 	mov.w	fp, #0
 8007748:	f04f 0c00 	mov.w	ip, #0
 800774c:	468c      	mov	ip, r1
 800774e:	f04f 0b00 	mov.w	fp, #0
 8007752:	4a09      	ldr	r2, [pc, #36]	; (8007778 <_ZL11microsecondv+0x44>)
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007758:	4611      	mov	r1, r2
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	ea4b 0301 	orr.w	r3, fp, r1
 8007762:	ea4c 0402 	orr.w	r4, ip, r2
}
 8007766:	4618      	mov	r0, r3
 8007768:	4621      	mov	r1, r4
 800776a:	46bd      	mov	sp, r7
 800776c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200004d8 	.word	0x200004d8
 8007778:	2000cb28 	.word	0x2000cb28

0800777c <_ZN2FC24ModuleAttitudeControllerC1Ev>:
#include <Module/ModuleAttitudeController.h>
#include "Usec.h"

namespace FC {

ModuleAttitudeController::ModuleAttitudeController(){
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fd fcd6 	bl	8005138 <_ZN23px4_AlgorithmModelClassC1Ev>
	/* matlab codegen function */
	initialize();
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fd fc96 	bl	80050c0 <_ZN23px4_AlgorithmModelClass10initializeEv>
}
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <_ZN2FC24ModuleAttitudeController7oneStepEv>:

void ModuleAttitudeController::oneStep(){
 80077a0:	b5b0      	push	{r4, r5, r7, lr}
 80077a2:	b092      	sub	sp, #72	; 0x48
 80077a4:	af04      	add	r7, sp, #16
 80077a6:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80077ae:	4619      	mov	r1, r3
 80077b0:	4840      	ldr	r0, [pc, #256]	; (80078b4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 80077b2:	f7ff ff67 	bl	8007684 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	if(modeFlagSub.armMode != Command::Arm) return;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80077bc:	2b06      	cmp	r3, #6
 80077be:	d175      	bne.n	80078ac <_ZN2FC24ModuleAttitudeController7oneStepEv+0x10c>

	if(modeFlagSub.flightMode == Command::ControlAttitude){
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x32>
		setFromRC();
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f87e 	bl	80078cc <_ZN2FC24ModuleAttitudeController9setFromRCEv>
 80077d0:	e002      	b.n	80077d8 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x38>
	}
	else{
		setFromPositionController();
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f870 	bl	80078b8 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>
	}

	ExtU_Second_att_control_codeb_T input;
	input.set_pitch = targetPitch;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80077de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e2:	ee17 3a90 	vmov	r3, s15
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	863b      	strh	r3, [r7, #48]	; 0x30
	input.set_roll = targetRoll;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80077f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f4:	ee17 3a90 	vmov	r3, s15
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	input.set_yaw = targetYawRate;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8007802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007806:	ee17 3a90 	vmov	r3, s15
 800780a:	b29b      	uxth	r3, r3
 800780c:	867b      	strh	r3, [r7, #50]	; 0x32
	input.set_thrust = throttle;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	; 0x1dc
 8007814:	85bb      	strh	r3, [r7, #44]	; 0x2c

	msgBus.getAttitude(&attitudeSub);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800781c:	4619      	mov	r1, r3
 800781e:	4825      	ldr	r0, [pc, #148]	; (80078b4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 8007820:	f7ff ff0a 	bl	8007638 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	msgBus.getBodyAngularVelocity(&bodyAngularVelocitySub);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800782a:	4619      	mov	r1, r3
 800782c:	4821      	ldr	r0, [pc, #132]	; (80078b4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800782e:	f7fd fcce 	bl	80051ce <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	input.Roll = attitudeSub.roll;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007838:	61bb      	str	r3, [r7, #24]
	input.Pitch = attitudeSub.pitch;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007840:	61fb      	str	r3, [r7, #28]
	input.p = bodyAngularVelocitySub.xyz[0];
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007848:	623b      	str	r3, [r7, #32]
	input.q = bodyAngularVelocitySub.xyz[1];
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
	input.r = bodyAngularVelocitySub.xyz[2];
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
	input.Arm_cmd = 2000;
 800785a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800785e:	86bb      	strh	r3, [r7, #52]	; 0x34

	/* matlab codegen function */
	setExternalInputs(&input);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f107 0218 	add.w	r2, r7, #24
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ff40 	bl	80076ee <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>
	step();
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fc fd7b 	bl	800436c <_ZN23px4_AlgorithmModelClass4stepEv>
	ExtY_Second_att_control_codeb_T output = getExternalOutputs();
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff ff4d 	bl	8007718 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>
 800787e:	4602      	mov	r2, r0
 8007880:	f107 030c 	add.w	r3, r7, #12
 8007884:	6810      	ldr	r0, [r2, #0]
 8007886:	6851      	ldr	r1, [r2, #4]
 8007888:	6892      	ldr	r2, [r2, #8]
 800788a:	c307      	stmia	r3!, {r0, r1, r2}

	/* set motor pwm */
	setMotor((uint16_t)output.PWM_OUT[0],
 800788c:	89b8      	ldrh	r0, [r7, #12]
			 (uint16_t)output.PWM_OUT[1],
 800788e:	89fc      	ldrh	r4, [r7, #14]
			 (uint16_t)output.PWM_OUT[2],
 8007890:	8a3d      	ldrh	r5, [r7, #16]
			 (uint16_t)output.PWM_OUT[3],
 8007892:	8a7b      	ldrh	r3, [r7, #18]
			 (uint16_t)output.PWM_OUT[4],
 8007894:	8aba      	ldrh	r2, [r7, #20]
			 (uint16_t)output.PWM_OUT[5]);
 8007896:	8af9      	ldrh	r1, [r7, #22]
	setMotor((uint16_t)output.PWM_OUT[0],
 8007898:	9102      	str	r1, [sp, #8]
 800789a:	9201      	str	r2, [sp, #4]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	462b      	mov	r3, r5
 80078a0:	4622      	mov	r2, r4
 80078a2:	4601      	mov	r1, r0
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f861 	bl	800796c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
 80078aa:	e000      	b.n	80078ae <_ZN2FC24ModuleAttitudeController7oneStepEv+0x10e>
	if(modeFlagSub.armMode != Command::Arm) return;
 80078ac:	bf00      	nop
}
 80078ae:	3738      	adds	r7, #56	; 0x38
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bdb0      	pop	{r4, r5, r7, pc}
 80078b4:	200005a0 	.word	0x200005a0

080078b8 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>:

void ModuleAttitudeController::setFromPositionController(){
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	//TODO make position control struct, and this function
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <_ZN2FC24ModuleAttitudeController9setFromRCEv>:

void ModuleAttitudeController::setFromRC(){
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	msgBus.getController(&controllerSub);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80078da:	4619      	mov	r1, r3
 80078dc:	4821      	ldr	r0, [pc, #132]	; (8007964 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0x98>)
 80078de:	f7ff fe8b 	bl	80075f8 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	targetRoll = (controllerSub.roll - 1500)/500;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 31a0 	ldrh.w	r3, [r3, #416]	; 0x1a0
 80078e8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80078ec:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0x9c>)
 80078ee:	fb82 1203 	smull	r1, r2, r2, r3
 80078f2:	1152      	asrs	r2, r2, #5
 80078f4:	17db      	asrs	r3, r3, #31
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
	targetPitch = -(controllerSub.pitch - 1500)/500;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800790c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8007910:	3304      	adds	r3, #4
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0x9c>)
 8007914:	fb82 1203 	smull	r1, r2, r2, r3
 8007918:	1152      	asrs	r2, r2, #5
 800791a:	17db      	asrs	r3, r3, #31
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	edc3 7a75 	vstr	s15, [r3, #468]	; 0x1d4
	targetYawRate = (controllerSub.yaw - 1500)/500;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8007932:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8007936:	4a0c      	ldr	r2, [pc, #48]	; (8007968 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0x9c>)
 8007938:	fb82 1203 	smull	r1, r2, r2, r3
 800793c:	1152      	asrs	r2, r2, #5
 800793e:	17db      	asrs	r3, r3, #31
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
	throttle = controllerSub.throttle;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	200005a0 	.word	0x200005a0
 8007968:	10624dd3 	.word	0x10624dd3

0800796c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>:

void ModuleAttitudeController::setMotor(uint16_t pwm1, uint16_t pwm2, uint16_t pwm3, uint16_t pwm4, uint16_t pwm5, uint16_t pwm6){
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	461a      	mov	r2, r3
 800797a:	4603      	mov	r3, r0
 800797c:	817b      	strh	r3, [r7, #10]
 800797e:	460b      	mov	r3, r1
 8007980:	813b      	strh	r3, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
	m1.setPWM(pwm1);
 8007986:	897b      	ldrh	r3, [r7, #10]
 8007988:	4619      	mov	r1, r3
 800798a:	4824      	ldr	r0, [pc, #144]	; (8007a1c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb0>)
 800798c:	f7f9 fc81 	bl	8001292 <_ZN2FC5Motor6setPWMEt>
	m2.setPWM(pwm2);
 8007990:	893b      	ldrh	r3, [r7, #8]
 8007992:	4619      	mov	r1, r3
 8007994:	4822      	ldr	r0, [pc, #136]	; (8007a20 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb4>)
 8007996:	f7f9 fc7c 	bl	8001292 <_ZN2FC5Motor6setPWMEt>
	m3.setPWM(pwm3);
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	4619      	mov	r1, r3
 800799e:	4821      	ldr	r0, [pc, #132]	; (8007a24 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb8>)
 80079a0:	f7f9 fc77 	bl	8001292 <_ZN2FC5Motor6setPWMEt>
	m4.setPWM(pwm4);
 80079a4:	8c3b      	ldrh	r3, [r7, #32]
 80079a6:	4619      	mov	r1, r3
 80079a8:	481f      	ldr	r0, [pc, #124]	; (8007a28 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xbc>)
 80079aa:	f7f9 fc72 	bl	8001292 <_ZN2FC5Motor6setPWMEt>
	m5.setPWM(pwm5);
 80079ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b0:	4619      	mov	r1, r3
 80079b2:	481e      	ldr	r0, [pc, #120]	; (8007a2c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc0>)
 80079b4:	f7f9 fc6d 	bl	8001292 <_ZN2FC5Motor6setPWMEt>
	m6.setPWM(pwm6);
 80079b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079ba:	4619      	mov	r1, r3
 80079bc:	481c      	ldr	r0, [pc, #112]	; (8007a30 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc4>)
 80079be:	f7f9 fc68 	bl	8001292 <_ZN2FC5Motor6setPWMEt>

	motorPwmSub.timestamp = microsecond();
 80079c2:	f7ff feb7 	bl	8007734 <_ZL11microsecondv>
 80079c6:	4603      	mov	r3, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80079d0:	e9c2 3400 	strd	r3, r4, [r2]
	motorPwmSub.m1 = pwm1;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	897a      	ldrh	r2, [r7, #10]
 80079d8:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
	motorPwmSub.m2 = pwm2;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	893a      	ldrh	r2, [r7, #8]
 80079e0:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
	motorPwmSub.m3 = pwm3;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	88fa      	ldrh	r2, [r7, #6]
 80079e8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	motorPwmSub.m4 = pwm4;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8c3a      	ldrh	r2, [r7, #32]
 80079f0:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	motorPwmSub.m5 = pwm5;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079f8:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
	motorPwmSub.m6 = pwm6;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a00:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

	msgBus.setMotorPWM(motorPwmSub);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4809      	ldr	r0, [pc, #36]	; (8007a34 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc8>)
 8007a0e:	f7ff fe59 	bl	80076c4 <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd90      	pop	{r4, r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200002cc 	.word	0x200002cc
 8007a20:	200002d8 	.word	0x200002d8
 8007a24:	200002e4 	.word	0x200002e4
 8007a28:	200002f0 	.word	0x200002f0
 8007a2c:	200002fc 	.word	0x200002fc
 8007a30:	20000308 	.word	0x20000308
 8007a34:	200005a0 	.word	0x200005a0

08007a38 <_ZN2FC12ModuleBuzzer4mainEv>:
	.mq_mem = &Buzzer_QueueBuffer,
	.mq_size = sizeof(Buzzer_QueueBuffer)
};


void ModuleBuzzer::main() {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08e      	sub	sp, #56	; 0x38
 8007a3c:	af00      	add	r7, sp, #0
	ModuleBuzzer buzzer(&htim5, TIM_CHANNEL_2, 84000000);
 8007a3e:	1d38      	adds	r0, r7, #4
 8007a40:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <_ZN2FC12ModuleBuzzer4mainEv+0x54>)
 8007a42:	2204      	movs	r2, #4
 8007a44:	4912      	ldr	r1, [pc, #72]	; (8007a90 <_ZN2FC12ModuleBuzzer4mainEv+0x58>)
 8007a46:	f000 f827 	bl	8007a98 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>

	BuzzerCommand rcvResult;
	while(1){
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295
 8007a54:	2200      	movs	r2, #0
 8007a56:	f010 fed1 	bl	80187fc <osMessageQueueGet>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf0c      	ite	eq
 8007a60:	2301      	moveq	r3, #1
 8007a62:	2300      	movne	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d006      	beq.n	8007a78 <_ZN2FC12ModuleBuzzer4mainEv+0x40>
			buzzer.commandHandler(rcvResult);
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f881 	bl	8007b78 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>
 8007a76:	e004      	b.n	8007a82 <_ZN2FC12ModuleBuzzer4mainEv+0x4a>
//			osDelay(10);
		}
		else{
			osMessageQueueReset(Buzzer_QueueHandle);
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f010 ff77 	bl	8018970 <osMessageQueueReset>
		}
		osDelay(10);
 8007a82:	200a      	movs	r0, #10
 8007a84:	f010 fbc0 	bl	8018208 <osDelay>
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 8007a88:	e7df      	b.n	8007a4a <_ZN2FC12ModuleBuzzer4mainEv+0x12>
 8007a8a:	bf00      	nop
 8007a8c:	0501bd00 	.word	0x0501bd00
 8007a90:	2000ca28 	.word	0x2000ca28
 8007a94:	200004dc 	.word	0x200004dc

08007a98 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>:
	}
}

ModuleBuzzer::ModuleBuzzer(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t CLK)
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
	: A{Z1, Z2, Z5, Z6}
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	2228      	movs	r2, #40	; 0x28
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f015 fe77 	bl	801d7a2 <memset>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4a17      	ldr	r2, [pc, #92]	; (8007b14 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x7c>)
 8007ab8:	60da      	str	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a16      	ldr	r2, [pc, #88]	; (8007b18 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x80>)
 8007abe:	611a      	str	r2, [r3, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a16      	ldr	r2, [pc, #88]	; (8007b1c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x84>)
 8007ac4:	615a      	str	r2, [r3, #20]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4a15      	ldr	r2, [pc, #84]	; (8007b20 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x88>)
 8007aca:	619a      	str	r2, [r3, #24]
{
	  /* creation of Buzzer_Queue */
	  Buzzer_QueueHandle = osMessageQueueNew (3, sizeof(BuzzerCommand), &Buzzer_Queue_attributes);
 8007acc:	4a15      	ldr	r2, [pc, #84]	; (8007b24 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x8c>)
 8007ace:	2104      	movs	r1, #4
 8007ad0:	2003      	movs	r0, #3
 8007ad2:	f010 fd99 	bl	8018608 <osMessageQueueNew>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x90>)
 8007ada:	601a      	str	r2, [r3, #0]

	  this->htim = htim;
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]
	  this->Channel = Channel;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	605a      	str	r2, [r3, #4]
	  this->CLK = CLK/10;		/* 10 : AutoReload Register+1 */
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x94>)
 8007aec:	fba2 2303 	umull	r2, r3, r2, r3
 8007af0:	08da      	lsrs	r2, r3, #3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_PRESCALER(htim, this->CLK / 4000);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	490c      	ldr	r1, [pc, #48]	; (8007b30 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x98>)
 8007b00:	fba1 1202 	umull	r1, r2, r1, r2
 8007b04:	0a12      	lsrs	r2, r2, #8
 8007b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	0003f7a0 	.word	0x0003f7a0
 8007b18:	00042e50 	.word	0x00042e50
 8007b1c:	00045948 	.word	0x00045948
 8007b20:	0005cc60 	.word	0x0005cc60
 8007b24:	080224fc 	.word	0x080224fc
 8007b28:	200004dc 	.word	0x200004dc
 8007b2c:	cccccccd 	.word	0xcccccccd
 8007b30:	10624dd3 	.word	0x10624dd3

08007b34 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>:


bool ModuleBuzzer::sendCommand(BuzzerCommand cmd){
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Buzzer_QueueHandle) != 0){
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f010 fecd 	bl	80188e0 <osMessageQueueGetSpace>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf14      	ite	ne
 8007b4c:	2301      	movne	r3, #1
 8007b4e:	2300      	moveq	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x34>
		osMessageQueuePut(Buzzer_QueueHandle, (void*)&cmd, 0, 0);
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	1d39      	adds	r1, r7, #4
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f010 fdd8 	bl	8018714 <osMessageQueuePut>
		return true;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x36>
	}
	return false;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	200004dc 	.word	0x200004dc

08007b78 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>:

void ModuleBuzzer::commandHandler(BuzzerCommand result){
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
	switch(result){
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d81b      	bhi.n	8007bc0 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x18>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007ba9 	.word	0x08007ba9
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bb9 	.word	0x08007bb9
	case BuzzerCommand::Armed:
		armed();
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f811 	bl	8007bc8 <_ZN2FC12ModuleBuzzer5armedEv>
		break;
 8007ba6:	e00b      	b.n	8007bc0 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::DisArmed:
		disarmed();
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f817 	bl	8007bdc <_ZN2FC12ModuleBuzzer8disarmedEv>
		break;
 8007bae:	e007      	b.n	8007bc0 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Success:
		success();
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f827 	bl	8007c04 <_ZN2FC12ModuleBuzzer7successEv>
		break;
 8007bb6:	e003      	b.n	8007bc0 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Denied:
		denied();
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f819 	bl	8007bf0 <_ZN2FC12ModuleBuzzer6deniedEv>
		break;
 8007bbe:	bf00      	nop
	}
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <_ZN2FC12ModuleBuzzer5armedEv>:

void ModuleBuzzer::armed(){
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	//TODO armed sound
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <_ZN2FC12ModuleBuzzer8disarmedEv>:

void ModuleBuzzer::disarmed(){
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	//TODO disarmed sound
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <_ZN2FC12ModuleBuzzer6deniedEv>:

void ModuleBuzzer::denied(){
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	//TODO denied sound
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <_ZN2FC12ModuleBuzzer7successEv>:

void ModuleBuzzer::success(){
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
//
//		/* Make each note sound and cut 1 mileecond */
//		HAL_TIM_PWM_Stop(htim, Channel);
//		osDelay(10);
//	}
	HAL_TIM_PWM_Start(htim, Channel);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f00a f99c 	bl	8011f54 <HAL_TIM_PWM_Start>
	osDelay(2000);
 8007c1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007c20:	f010 faf2 	bl	8018208 <osDelay>
	HAL_TIM_PWM_Stop(htim, Channel);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f00a f9ce 	bl	8011fd0 <HAL_TIM_PWM_Stop>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>:
    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 8007c3c:	b490      	push	{r4, r7}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8007c4e:	4613      	mov	r3, r2
 8007c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc90      	pop	{r4, r7}
 8007c5e:	4770      	bx	lr

08007c60 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8007c60:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8007c64:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <_ZL11microsecondv+0x40>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0b00 	mov.w	fp, #0
 8007c74:	f04f 0c00 	mov.w	ip, #0
 8007c78:	468c      	mov	ip, r1
 8007c7a:	f04f 0b00 	mov.w	fp, #0
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <_ZL11microsecondv+0x44>)
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c84:	4611      	mov	r1, r2
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	ea4b 0301 	orr.w	r3, fp, r1
 8007c8e:	ea4c 0402 	orr.w	r4, ip, r2
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	4621      	mov	r1, r4
 8007c96:	46bd      	mov	sp, r7
 8007c98:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	2000053c 	.word	0x2000053c
 8007ca4:	2000cb28 	.word	0x2000cb28

08007ca8 <_ZN2FC15ModuleCommanderC1Ev>:
  .cb_size = sizeof(Commander_QueueControlBlock),
  .mq_mem = &Commander_QueueBuffer,
  .mq_size = sizeof(Commander_QueueBuffer)
};

ModuleCommander::ModuleCommander(){
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	6053      	str	r3, [r2, #4]
 8007cba:	6093      	str	r3, [r2, #8]
 8007cbc:	60d3      	str	r3, [r2, #12]
	  /* creation of Command_Queue */
	  Commander_QueueHandle = osMessageQueueNew (3, sizeof(Command), &Commander_Queue_attributes);
 8007cbe:	4a06      	ldr	r2, [pc, #24]	; (8007cd8 <_ZN2FC15ModuleCommanderC1Ev+0x30>)
 8007cc0:	2104      	movs	r1, #4
 8007cc2:	2003      	movs	r0, #3
 8007cc4:	f010 fca0 	bl	8018608 <osMessageQueueNew>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <_ZN2FC15ModuleCommanderC1Ev+0x34>)
 8007ccc:	601a      	str	r2, [r3, #0]
}
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	08022514 	.word	0x08022514
 8007cdc:	20000540 	.word	0x20000540

08007ce0 <_ZN2FC15ModuleCommander4mainEv>:

void ModuleCommander::main(){
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
	ModuleCommander moduleCommander;
 8007ce6:	f107 0308 	add.w	r3, r7, #8
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff ffdc 	bl	8007ca8 <_ZN2FC15ModuleCommanderC1Ev>

	while(1){
		Command rcvCommand;
		if(osMessageQueueGet(Commander_QueueHandle, (void*)&rcvCommand, NULL, osWaitForever) == osOK){
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <_ZN2FC15ModuleCommander4mainEv+0x40>)
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	1d39      	adds	r1, r7, #4
 8007cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f010 fd7e 	bl	80187fc <osMessageQueueGet>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0ef      	beq.n	8007cf0 <_ZN2FC15ModuleCommander4mainEv+0x10>
			moduleCommander.commandHandler(rcvCommand);
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	f107 0308 	add.w	r3, r7, #8
 8007d16:	4611      	mov	r1, r2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f825 	bl	8007d68 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>
		}
	}
 8007d1e:	e7e7      	b.n	8007cf0 <_ZN2FC15ModuleCommander4mainEv+0x10>
 8007d20:	20000540 	.word	0x20000540

08007d24 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
}

bool ModuleCommander::sendCommand(Command cmd){
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Commander_QueueHandle) != 0){
 8007d2c:	4b0d      	ldr	r3, [pc, #52]	; (8007d64 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f010 fdd5 	bl	80188e0 <osMessageQueueGetSpace>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bf14      	ite	ne
 8007d3c:	2301      	movne	r3, #1
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x34>
		osMessageQueuePut(Commander_QueueHandle, (void*)&cmd, 0, 0);
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	1d39      	adds	r1, r7, #4
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f010 fce0 	bl	8018714 <osMessageQueuePut>
		return true;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x36>
	}
	return false;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000540 	.word	0x20000540

08007d68 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>:

bool ModuleCommander::commandHandler(Command cmd){
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	switch(cmd){
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b07      	cmp	r3, #7
 8007d76:	d83b      	bhi.n	8007df0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x88>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x18>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007da1 	.word	0x08007da1
 8007d84:	08007dab 	.word	0x08007dab
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007dbf 	.word	0x08007dbf
 8007d90:	08007dc9 	.word	0x08007dc9
 8007d94:	08007dd3 	.word	0x08007dd3
 8007d98:	08007ddd 	.word	0x08007ddd
 8007d9c:	08007de7 	.word	0x08007de7
	case Command::ControlAttitude:
		return toAttitude();
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f82b 	bl	8007dfc <_ZN2FC15ModuleCommander10toAttitudeEv>
 8007da6:	4603      	mov	r3, r0
 8007da8:	e023      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;
	case Command::ControlPosition:
		return toPosition();
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f831 	bl	8007e12 <_ZN2FC15ModuleCommander10toPositionEv>
 8007db0:	4603      	mov	r3, r0
 8007db2:	e01e      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;
	case Command::AutoWaypoint:
		return toWaypoint();
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f837 	bl	8007e28 <_ZN2FC15ModuleCommander10toWaypointEv>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	e019      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;
	case Command::AutoRTL:
		return toRTL();
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f83d 	bl	8007e3e <_ZN2FC15ModuleCommander5toRTLEv>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	e014      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;
	case Command::AutoTakeoff:
		return toTakeoff();
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f843 	bl	8007e54 <_ZN2FC15ModuleCommander9toTakeoffEv>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	e00f      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;
	case Command::AutoLand:
		return toLand();
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f849 	bl	8007e6a <_ZN2FC15ModuleCommander6toLandEv>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	e00a      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;

	case Command::Arm:
		return toArm();
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f84f 	bl	8007e80 <_ZN2FC15ModuleCommander5toArmEv>
 8007de2:	4603      	mov	r3, r0
 8007de4:	e005      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;
	case Command::DisArm:
		return toDisArm();
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f86c 	bl	8007ec4 <_ZN2FC15ModuleCommander8toDisArmEv>
 8007dec:	4603      	mov	r3, r0
 8007dee:	e000      	b.n	8007df2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x8a>
		break;
	}
	return false;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <_ZN2FC15ModuleCommander10toAttitudeEv>:

bool ModuleCommander::toAttitude(){
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	//TODO change to attitude controll
	/*
	 * check condition of attitude control
	 */
}
 8007e04:	bf00      	nop
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <_ZN2FC15ModuleCommander10toPositionEv>:

bool ModuleCommander::toPosition(){
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
	//TODO change to position controll
}
 8007e1a:	bf00      	nop
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <_ZN2FC15ModuleCommander10toWaypointEv>:
bool ModuleCommander::toWaypoint(){
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	//TODO change to waypoint autopilot
}
 8007e30:	bf00      	nop
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <_ZN2FC15ModuleCommander5toRTLEv>:

bool ModuleCommander::toRTL(){
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
	//TODO change to auto RTL
}
 8007e46:	bf00      	nop
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <_ZN2FC15ModuleCommander9toTakeoffEv>:
bool ModuleCommander::toTakeoff(){
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	//TODO change to auto takeoff
}
 8007e5c:	bf00      	nop
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <_ZN2FC15ModuleCommander6toLandEv>:

bool ModuleCommander::toLand(){
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
	//TODO change to auto land
}
 8007e72:	bf00      	nop
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <_ZN2FC15ModuleCommander5toArmEv>:

bool ModuleCommander::toArm(){
 8007e80:	b590      	push	{r4, r7, lr}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	//TODO check arm condition
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);
 8007e88:	f107 0308 	add.w	r3, r7, #8
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	480c      	ldr	r0, [pc, #48]	; (8007ec0 <_ZN2FC15ModuleCommander5toArmEv+0x40>)
 8007e90:	f7ff fbf8 	bl	8007684 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	modeFlag.timestamp = microsecond();
 8007e94:	f7ff fee4 	bl	8007c60 <_ZL11microsecondv>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	modeFlag.armMode = Command::Arm;
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	613b      	str	r3, [r7, #16]
	msgBus.setModeFlag(modeFlag);
 8007ea4:	f107 0308 	add.w	r3, r7, #8
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4805      	ldr	r0, [pc, #20]	; (8007ec0 <_ZN2FC15ModuleCommander5toArmEv+0x40>)
 8007eac:	f7ff fec6 	bl	8007c3c <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 8007eb0:	2002      	movs	r0, #2
 8007eb2:	f7ff fe3f 	bl	8007b34 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 8007eb6:	bf00      	nop
 8007eb8:	4618      	mov	r0, r3
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd90      	pop	{r4, r7, pc}
 8007ec0:	200005a0 	.word	0x200005a0

08007ec4 <_ZN2FC15ModuleCommander8toDisArmEv>:

bool ModuleCommander::toDisArm(){
 8007ec4:	b590      	push	{r4, r7, lr}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	//TODO check DisArm condition
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);
 8007ecc:	f107 0308 	add.w	r3, r7, #8
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	480c      	ldr	r0, [pc, #48]	; (8007f04 <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 8007ed4:	f7ff fbd6 	bl	8007684 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	modeFlag.timestamp = microsecond();
 8007ed8:	f7ff fec2 	bl	8007c60 <_ZL11microsecondv>
 8007edc:	4603      	mov	r3, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	modeFlag.armMode = Command::DisArm;
 8007ee4:	2307      	movs	r3, #7
 8007ee6:	613b      	str	r3, [r7, #16]
	msgBus.setModeFlag(modeFlag);
 8007ee8:	f107 0308 	add.w	r3, r7, #8
 8007eec:	4619      	mov	r1, r3
 8007eee:	4805      	ldr	r0, [pc, #20]	; (8007f04 <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 8007ef0:	f7ff fea4 	bl	8007c3c <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 8007ef4:	2002      	movs	r0, #2
 8007ef6:	f7ff fe1d 	bl	8007b34 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 8007efa:	bf00      	nop
 8007efc:	4618      	mov	r0, r3
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd90      	pop	{r4, r7, pc}
 8007f04:	200005a0 	.word	0x200005a0

08007f08 <_ZN2FC6MsgBusC1Ev>:
	MsgBus()
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
		, health{0}
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	461a      	mov	r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	6053      	str	r3, [r2, #4]
 8007f1a:	6093      	str	r3, [r2, #8]
 8007f1c:	60d3      	str	r3, [r2, #12]
 8007f1e:	6113      	str	r3, [r2, #16]
 8007f20:	6153      	str	r3, [r2, #20]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3318      	adds	r3, #24
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
 8007f2e:	60da      	str	r2, [r3, #12]
 8007f30:	611a      	str	r2, [r3, #16]
 8007f32:	615a      	str	r2, [r3, #20]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3330      	adds	r3, #48	; 0x30
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	605a      	str	r2, [r3, #4]
 8007f3e:	609a      	str	r2, [r3, #8]
 8007f40:	60da      	str	r2, [r3, #12]
 8007f42:	611a      	str	r2, [r3, #16]
 8007f44:	615a      	str	r2, [r3, #20]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3348      	adds	r3, #72	; 0x48
 8007f4a:	2248      	movs	r2, #72	; 0x48
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f015 fc27 	bl	801d7a2 <memset>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3390      	adds	r3, #144	; 0x90
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	33a0      	adds	r3, #160	; 0xa0
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	605a      	str	r2, [r3, #4]
 8007f6c:	609a      	str	r2, [r3, #8]
 8007f6e:	60da      	str	r2, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	33b0      	adds	r3, #176	; 0xb0
 8007f74:	2228      	movs	r2, #40	; 0x28
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f015 fc12 	bl	801d7a2 <memset>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	33d8      	adds	r3, #216	; 0xd8
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	605a      	str	r2, [r3, #4]
 8007f88:	609a      	str	r2, [r3, #8]
 8007f8a:	60da      	str	r2, [r3, #12]
 8007f8c:	611a      	str	r2, [r3, #16]
 8007f8e:	615a      	str	r2, [r3, #20]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	f04f 0400 	mov.w	r4, #0
 8007f9a:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f015 fbf2 	bl	801d7a2 <memset>
	{}
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd90      	pop	{r4, r7, pc}

08007fc8 <_Z41__static_initialization_and_destruction_0ii>:

namespace FC{

MsgBus msgBus;

}
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d107      	bne.n	8007fe8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d102      	bne.n	8007fe8 <_Z41__static_initialization_and_destruction_0ii+0x20>
MsgBus msgBus;
 8007fe2:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8007fe4:	f7ff ff90 	bl	8007f08 <_ZN2FC6MsgBusC1Ev>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	200005a0 	.word	0x200005a0

08007ff4 <_GLOBAL__sub_I__ZN2FC6msgBusE>:
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ffc:	2001      	movs	r0, #1
 8007ffe:	f7ff ffe3 	bl	8007fc8 <_Z41__static_initialization_and_destruction_0ii>
 8008002:	bd80      	pop	{r7, pc}

08008004 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 8008004:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8008008:	b085      	sub	sp, #20
 800800a:	af00      	add	r7, sp, #0
 800800c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8008014:	2300      	movs	r3, #0
 8008016:	60bb      	str	r3, [r7, #8]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b3f      	cmp	r3, #63	; 0x3f
 800801c:	dc16      	bgt.n	800804c <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 800801e:	2201      	movs	r2, #1
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	4619      	mov	r1, r3
 8008028:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800802c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008030:	ea03 0b01 	and.w	fp, r3, r1
 8008034:	ea04 0c02 	and.w	ip, r4, r2
 8008038:	ea5b 030c 	orrs.w	r3, fp, ip
 800803c:	d002      	beq.n	8008044 <_bitCount64+0x40>
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	3301      	adds	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	3301      	adds	r3, #1
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	e7e5      	b.n	8008018 <_bitCount64+0x14>
	}
	return cnt;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8008058:	4770      	bx	lr
	...

0800805c <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 8008064:	4a12      	ldr	r2, [pc, #72]	; (80080b0 <SBUS_init+0x54>)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 800806a:	2219      	movs	r2, #25
 800806c:	2100      	movs	r1, #0
 800806e:	4811      	ldr	r0, [pc, #68]	; (80080b4 <SBUS_init+0x58>)
 8008070:	f015 fb97 	bl	801d7a2 <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 8008074:	2219      	movs	r2, #25
 8008076:	2100      	movs	r1, #0
 8008078:	480f      	ldr	r0, [pc, #60]	; (80080b8 <SBUS_init+0x5c>)
 800807a:	f015 fb92 	bl	801d7a2 <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 800807e:	2224      	movs	r2, #36	; 0x24
 8008080:	2100      	movs	r1, #0
 8008082:	480e      	ldr	r0, [pc, #56]	; (80080bc <SBUS_init+0x60>)
 8008084:	f015 fb8d 	bl	801d7a2 <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 8008088:	2224      	movs	r2, #36	; 0x24
 800808a:	2100      	movs	r1, #0
 800808c:	480c      	ldr	r0, [pc, #48]	; (80080c0 <SBUS_init+0x64>)
 800808e:	f015 fb88 	bl	801d7a2 <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 8008092:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <SBUS_init+0x54>)
 8008094:	2200      	movs	r2, #0
 8008096:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 800809a:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <SBUS_init+0x54>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2219      	movs	r2, #25
 80080a0:	4904      	ldr	r1, [pc, #16]	; (80080b4 <SBUS_init+0x58>)
 80080a2:	4618      	mov	r0, r3
 80080a4:	f00b f966 	bl	8013374 <HAL_UART_Receive_DMA>
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000760 	.word	0x20000760
 80080b4:	20000764 	.word	0x20000764
 80080b8:	2000077d 	.word	0x2000077d
 80080bc:	20000796 	.word	0x20000796
 80080c0:	200007ba 	.word	0x200007ba

080080c4 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 80080c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 80080cc:	4b3a      	ldr	r3, [pc, #232]	; (80081b8 <SBUS_decoding+0xf4>)
 80080ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080d2:	f003 0308 	and.w	r3, r3, #8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 80080da:	4b37      	ldr	r3, [pc, #220]	; (80081b8 <SBUS_decoding+0xf4>)
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e1f6      	b.n	80084d4 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 80080e6:	4b34      	ldr	r3, [pc, #208]	; (80081b8 <SBUS_decoding+0xf4>)
 80080e8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80080ec:	3301      	adds	r3, #1
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	4b31      	ldr	r3, [pc, #196]	; (80081b8 <SBUS_decoding+0xf4>)
 80080f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80080f6:	4b30      	ldr	r3, [pc, #192]	; (80081b8 <SBUS_decoding+0xf4>)
 80080f8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80080fc:	2b40      	cmp	r3, #64	; 0x40
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <SBUS_decoding+0x4e>
 800810a:	4b2b      	ldr	r3, [pc, #172]	; (80081b8 <SBUS_decoding+0xf4>)
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 8008112:	4b29      	ldr	r3, [pc, #164]	; (80081b8 <SBUS_decoding+0xf4>)
 8008114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d013      	beq.n	8008148 <SBUS_decoding+0x84>
 8008120:	4b25      	ldr	r3, [pc, #148]	; (80081b8 <SBUS_decoding+0xf4>)
 8008122:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 8008126:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <SBUS_decoding+0xf4>)
 8008128:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800812c:	4618      	mov	r0, r3
 800812e:	2301      	movs	r3, #1
 8008130:	4083      	lsls	r3, r0
 8008132:	469b      	mov	fp, r3
 8008134:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8008138:	ea4b 0301 	orr.w	r3, fp, r1
 800813c:	ea4c 0402 	orr.w	r4, ip, r2
 8008140:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <SBUS_decoding+0xf4>)
 8008142:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8008146:	e013      	b.n	8008170 <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 8008148:	4b1b      	ldr	r3, [pc, #108]	; (80081b8 <SBUS_decoding+0xf4>)
 800814a:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 800814e:	4b1a      	ldr	r3, [pc, #104]	; (80081b8 <SBUS_decoding+0xf4>)
 8008150:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008154:	4618      	mov	r0, r3
 8008156:	2301      	movs	r3, #1
 8008158:	4083      	lsls	r3, r0
 800815a:	43db      	mvns	r3, r3
 800815c:	469b      	mov	fp, r3
 800815e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8008162:	ea0b 0301 	and.w	r3, fp, r1
 8008166:	ea0c 0402 	and.w	r4, ip, r2
 800816a:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <SBUS_decoding+0xf4>)
 800816c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 8008170:	4b11      	ldr	r3, [pc, #68]	; (80081b8 <SBUS_decoding+0xf4>)
 8008172:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8008176:	4618      	mov	r0, r3
 8008178:	4621      	mov	r1, r4
 800817a:	f7ff ff43 	bl	8008004 <_bitCount64>
 800817e:	4603      	mov	r3, r0
 8008180:	461a      	mov	r2, r3
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <SBUS_decoding+0xf4>)
 8008184:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 8008188:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <SBUS_decoding+0xf4>)
 800818a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800818e:	2b14      	cmp	r3, #20
 8008190:	d904      	bls.n	800819c <SBUS_decoding+0xd8>
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <SBUS_decoding+0xf4>)
 8008194:	2201      	movs	r2, #1
 8008196:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800819a:	e003      	b.n	80081a4 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <SBUS_decoding+0xf4>)
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <SBUS_decoding+0xf4>)
 80081a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <SBUS_decoding+0xf8>
 80081b2:	2300      	movs	r3, #0
 80081b4:	e18e      	b.n	80084d4 <SBUS_decoding+0x410>
 80081b6:	bf00      	nop
 80081b8:	20000760 	.word	0x20000760

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 80081bc:	4ba7      	ldr	r3, [pc, #668]	; (800845c <SBUS_decoding+0x398>)
 80081be:	7f9b      	ldrb	r3, [r3, #30]
 80081c0:	b21a      	sxth	r2, r3
 80081c2:	4ba6      	ldr	r3, [pc, #664]	; (800845c <SBUS_decoding+0x398>)
 80081c4:	7fdb      	ldrb	r3, [r3, #31]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	b21b      	sxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b21b      	sxth	r3, r3
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	4ba1      	ldr	r3, [pc, #644]	; (800845c <SBUS_decoding+0x398>)
 80081d8:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 80081da:	4ba0      	ldr	r3, [pc, #640]	; (800845c <SBUS_decoding+0x398>)
 80081dc:	7fdb      	ldrb	r3, [r3, #31]
 80081de:	10db      	asrs	r3, r3, #3
 80081e0:	b21a      	sxth	r2, r3
 80081e2:	4b9e      	ldr	r3, [pc, #632]	; (800845c <SBUS_decoding+0x398>)
 80081e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081e8:	015b      	lsls	r3, r3, #5
 80081ea:	b21b      	sxth	r3, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b21b      	sxth	r3, r3
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	4b98      	ldr	r3, [pc, #608]	; (800845c <SBUS_decoding+0x398>)
 80081fa:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 80081fc:	4b97      	ldr	r3, [pc, #604]	; (800845c <SBUS_decoding+0x398>)
 80081fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008202:	119b      	asrs	r3, r3, #6
 8008204:	b21a      	sxth	r2, r3
 8008206:	4b95      	ldr	r3, [pc, #596]	; (800845c <SBUS_decoding+0x398>)
 8008208:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	b21b      	sxth	r3, r3
 8008210:	4313      	orrs	r3, r2
 8008212:	b21a      	sxth	r2, r3
 8008214:	4b91      	ldr	r3, [pc, #580]	; (800845c <SBUS_decoding+0x398>)
 8008216:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800821a:	029b      	lsls	r3, r3, #10
 800821c:	b21b      	sxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b21b      	sxth	r3, r3
 8008222:	b29b      	uxth	r3, r3
 8008224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008228:	b29a      	uxth	r2, r3
 800822a:	4b8c      	ldr	r3, [pc, #560]	; (800845c <SBUS_decoding+0x398>)
 800822c:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 800822e:	4b8b      	ldr	r3, [pc, #556]	; (800845c <SBUS_decoding+0x398>)
 8008230:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008234:	105b      	asrs	r3, r3, #1
 8008236:	b21a      	sxth	r2, r3
 8008238:	4b88      	ldr	r3, [pc, #544]	; (800845c <SBUS_decoding+0x398>)
 800823a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800823e:	01db      	lsls	r3, r3, #7
 8008240:	b21b      	sxth	r3, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	b21b      	sxth	r3, r3
 8008246:	b29b      	uxth	r3, r3
 8008248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800824c:	b29a      	uxth	r2, r3
 800824e:	4b83      	ldr	r3, [pc, #524]	; (800845c <SBUS_decoding+0x398>)
 8008250:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 8008252:	4b82      	ldr	r3, [pc, #520]	; (800845c <SBUS_decoding+0x398>)
 8008254:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008258:	111b      	asrs	r3, r3, #4
 800825a:	b21a      	sxth	r2, r3
 800825c:	4b7f      	ldr	r3, [pc, #508]	; (800845c <SBUS_decoding+0x398>)
 800825e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	b21b      	sxth	r3, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	b21b      	sxth	r3, r3
 800826a:	b29b      	uxth	r3, r3
 800826c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008270:	b29a      	uxth	r2, r3
 8008272:	4b7a      	ldr	r3, [pc, #488]	; (800845c <SBUS_decoding+0x398>)
 8008274:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 8008276:	4b79      	ldr	r3, [pc, #484]	; (800845c <SBUS_decoding+0x398>)
 8008278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800827c:	11db      	asrs	r3, r3, #7
 800827e:	b21a      	sxth	r2, r3
 8008280:	4b76      	ldr	r3, [pc, #472]	; (800845c <SBUS_decoding+0x398>)
 8008282:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	b21b      	sxth	r3, r3
 800828a:	4313      	orrs	r3, r2
 800828c:	b21a      	sxth	r2, r3
 800828e:	4b73      	ldr	r3, [pc, #460]	; (800845c <SBUS_decoding+0x398>)
 8008290:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008294:	025b      	lsls	r3, r3, #9
 8008296:	b21b      	sxth	r3, r3
 8008298:	4313      	orrs	r3, r2
 800829a:	b21b      	sxth	r3, r3
 800829c:	b29b      	uxth	r3, r3
 800829e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	4b6d      	ldr	r3, [pc, #436]	; (800845c <SBUS_decoding+0x398>)
 80082a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 80082aa:	4b6c      	ldr	r3, [pc, #432]	; (800845c <SBUS_decoding+0x398>)
 80082ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082b0:	109b      	asrs	r3, r3, #2
 80082b2:	b21a      	sxth	r2, r3
 80082b4:	4b69      	ldr	r3, [pc, #420]	; (800845c <SBUS_decoding+0x398>)
 80082b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80082ba:	019b      	lsls	r3, r3, #6
 80082bc:	b21b      	sxth	r3, r3
 80082be:	4313      	orrs	r3, r2
 80082c0:	b21b      	sxth	r3, r3
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	4b64      	ldr	r3, [pc, #400]	; (800845c <SBUS_decoding+0x398>)
 80082cc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 80082d0:	4b62      	ldr	r3, [pc, #392]	; (800845c <SBUS_decoding+0x398>)
 80082d2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80082d6:	115b      	asrs	r3, r3, #5
 80082d8:	b21a      	sxth	r2, r3
 80082da:	4b60      	ldr	r3, [pc, #384]	; (800845c <SBUS_decoding+0x398>)
 80082dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	b21b      	sxth	r3, r3
 80082e4:	4313      	orrs	r3, r2
 80082e6:	b21b      	sxth	r3, r3
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	4b5a      	ldr	r3, [pc, #360]	; (800845c <SBUS_decoding+0x398>)
 80082f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 80082f6:	4b59      	ldr	r3, [pc, #356]	; (800845c <SBUS_decoding+0x398>)
 80082f8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80082fc:	b21a      	sxth	r2, r3
 80082fe:	4b57      	ldr	r3, [pc, #348]	; (800845c <SBUS_decoding+0x398>)
 8008300:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	b21b      	sxth	r3, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	b21b      	sxth	r3, r3
 800830c:	b29b      	uxth	r3, r3
 800830e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008312:	b29a      	uxth	r2, r3
 8008314:	4b51      	ldr	r3, [pc, #324]	; (800845c <SBUS_decoding+0x398>)
 8008316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 800831a:	4b50      	ldr	r3, [pc, #320]	; (800845c <SBUS_decoding+0x398>)
 800831c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008320:	10db      	asrs	r3, r3, #3
 8008322:	b21a      	sxth	r2, r3
 8008324:	4b4d      	ldr	r3, [pc, #308]	; (800845c <SBUS_decoding+0x398>)
 8008326:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800832a:	015b      	lsls	r3, r3, #5
 800832c:	b21b      	sxth	r3, r3
 800832e:	4313      	orrs	r3, r2
 8008330:	b21b      	sxth	r3, r3
 8008332:	b29b      	uxth	r3, r3
 8008334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008338:	b29a      	uxth	r2, r3
 800833a:	4b48      	ldr	r3, [pc, #288]	; (800845c <SBUS_decoding+0x398>)
 800833c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 8008340:	4b46      	ldr	r3, [pc, #280]	; (800845c <SBUS_decoding+0x398>)
 8008342:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008346:	119b      	asrs	r3, r3, #6
 8008348:	b21a      	sxth	r2, r3
 800834a:	4b44      	ldr	r3, [pc, #272]	; (800845c <SBUS_decoding+0x398>)
 800834c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	b21b      	sxth	r3, r3
 8008354:	4313      	orrs	r3, r2
 8008356:	b21a      	sxth	r2, r3
 8008358:	4b40      	ldr	r3, [pc, #256]	; (800845c <SBUS_decoding+0x398>)
 800835a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800835e:	029b      	lsls	r3, r3, #10
 8008360:	b21b      	sxth	r3, r3
 8008362:	4313      	orrs	r3, r2
 8008364:	b21b      	sxth	r3, r3
 8008366:	b29b      	uxth	r3, r3
 8008368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800836c:	b29a      	uxth	r2, r3
 800836e:	4b3b      	ldr	r3, [pc, #236]	; (800845c <SBUS_decoding+0x398>)
 8008370:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 8008374:	4b39      	ldr	r3, [pc, #228]	; (800845c <SBUS_decoding+0x398>)
 8008376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800837a:	105b      	asrs	r3, r3, #1
 800837c:	b21a      	sxth	r2, r3
 800837e:	4b37      	ldr	r3, [pc, #220]	; (800845c <SBUS_decoding+0x398>)
 8008380:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008384:	01db      	lsls	r3, r3, #7
 8008386:	b21b      	sxth	r3, r3
 8008388:	4313      	orrs	r3, r2
 800838a:	b21b      	sxth	r3, r3
 800838c:	b29b      	uxth	r3, r3
 800838e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008392:	b29a      	uxth	r2, r3
 8008394:	4b31      	ldr	r3, [pc, #196]	; (800845c <SBUS_decoding+0x398>)
 8008396:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 800839a:	4b30      	ldr	r3, [pc, #192]	; (800845c <SBUS_decoding+0x398>)
 800839c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80083a0:	111b      	asrs	r3, r3, #4
 80083a2:	b21a      	sxth	r2, r3
 80083a4:	4b2d      	ldr	r3, [pc, #180]	; (800845c <SBUS_decoding+0x398>)
 80083a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	b21b      	sxth	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b21b      	sxth	r3, r3
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	4b28      	ldr	r3, [pc, #160]	; (800845c <SBUS_decoding+0x398>)
 80083bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 80083c0:	4b26      	ldr	r3, [pc, #152]	; (800845c <SBUS_decoding+0x398>)
 80083c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80083c6:	11db      	asrs	r3, r3, #7
 80083c8:	b21a      	sxth	r2, r3
 80083ca:	4b24      	ldr	r3, [pc, #144]	; (800845c <SBUS_decoding+0x398>)
 80083cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	b21b      	sxth	r3, r3
 80083d4:	4313      	orrs	r3, r2
 80083d6:	b21a      	sxth	r2, r3
 80083d8:	4b20      	ldr	r3, [pc, #128]	; (800845c <SBUS_decoding+0x398>)
 80083da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80083de:	025b      	lsls	r3, r3, #9
 80083e0:	b21b      	sxth	r3, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	b21b      	sxth	r3, r3
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	4b1b      	ldr	r3, [pc, #108]	; (800845c <SBUS_decoding+0x398>)
 80083f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 80083f4:	4b19      	ldr	r3, [pc, #100]	; (800845c <SBUS_decoding+0x398>)
 80083f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083fa:	109b      	asrs	r3, r3, #2
 80083fc:	b21a      	sxth	r2, r3
 80083fe:	4b17      	ldr	r3, [pc, #92]	; (800845c <SBUS_decoding+0x398>)
 8008400:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008404:	019b      	lsls	r3, r3, #6
 8008406:	b21b      	sxth	r3, r3
 8008408:	4313      	orrs	r3, r2
 800840a:	b21b      	sxth	r3, r3
 800840c:	b29b      	uxth	r3, r3
 800840e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008412:	b29a      	uxth	r2, r3
 8008414:	4b11      	ldr	r3, [pc, #68]	; (800845c <SBUS_decoding+0x398>)
 8008416:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 800841a:	4b10      	ldr	r3, [pc, #64]	; (800845c <SBUS_decoding+0x398>)
 800841c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008420:	115b      	asrs	r3, r3, #5
 8008422:	b21a      	sxth	r2, r3
 8008424:	4b0d      	ldr	r3, [pc, #52]	; (800845c <SBUS_decoding+0x398>)
 8008426:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	b21b      	sxth	r3, r3
 800842e:	4313      	orrs	r3, r2
 8008430:	b21b      	sxth	r3, r3
 8008432:	b29b      	uxth	r3, r3
 8008434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008438:	b29a      	uxth	r2, r3
 800843a:	4b08      	ldr	r3, [pc, #32]	; (800845c <SBUS_decoding+0x398>)
 800843c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <SBUS_decoding+0x398>)
 8008442:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d008      	beq.n	8008460 <SBUS_decoding+0x39c>
 800844e:	4b03      	ldr	r3, [pc, #12]	; (800845c <SBUS_decoding+0x398>)
 8008450:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008454:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8008458:	e007      	b.n	800846a <SBUS_decoding+0x3a6>
 800845a:	bf00      	nop
 800845c:	20000760 	.word	0x20000760
 8008460:	4b1f      	ldr	r3, [pc, #124]	; (80084e0 <SBUS_decoding+0x41c>)
 8008462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008466:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 800846a:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <SBUS_decoding+0x41c>)
 800846c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <SBUS_decoding+0x3c0>
 8008478:	4b19      	ldr	r3, [pc, #100]	; (80084e0 <SBUS_decoding+0x41c>)
 800847a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800847e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8008482:	e004      	b.n	800848e <SBUS_decoding+0x3ca>
 8008484:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <SBUS_decoding+0x41c>)
 8008486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800848a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 800848e:	2300      	movs	r3, #0
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b11      	cmp	r3, #17
 8008496:	dc1c      	bgt.n	80084d2 <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 8008498:	4a11      	ldr	r2, [pc, #68]	; (80084e0 <SBUS_decoding+0x41c>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3318      	adds	r3, #24
 800849e:	005b      	lsls	r3, r3, #1
 80084a0:	4413      	add	r3, r2
 80084a2:	88db      	ldrh	r3, [r3, #6]
 80084a4:	461a      	mov	r2, r3
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	da00      	bge.n	80084b2 <SBUS_decoding+0x3ee>
 80084b0:	3307      	adds	r3, #7
 80084b2:	10db      	asrs	r3, r3, #3
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80084ba:	b299      	uxth	r1, r3
 80084bc:	4a08      	ldr	r2, [pc, #32]	; (80084e0 <SBUS_decoding+0x41c>)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	332c      	adds	r3, #44	; 0x2c
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	4413      	add	r3, r2
 80084c6:	460a      	mov	r2, r1
 80084c8:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3301      	adds	r3, #1
 80084ce:	607b      	str	r3, [r7, #4]
 80084d0:	e7df      	b.n	8008492 <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 80084d2:	2301      	movs	r3, #1
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80084de:	bf00      	nop
 80084e0:	20000760 	.word	0x20000760

080084e4 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 80084ea:	2300      	movs	r3, #0
 80084ec:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80084ee:	4b37      	ldr	r3, [pc, #220]	; (80085cc <SBUS_uartRxCpltCallback+0xe8>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	4b35      	ldr	r3, [pc, #212]	; (80085cc <SBUS_uartRxCpltCallback+0xe8>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b18      	cmp	r3, #24
 80084fa:	d862      	bhi.n	80085c2 <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 80084fc:	4b33      	ldr	r3, [pc, #204]	; (80085cc <SBUS_uartRxCpltCallback+0xe8>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	4b33      	ldr	r3, [pc, #204]	; (80085d0 <SBUS_uartRxCpltCallback+0xec>)
 8008504:	4413      	add	r3, r2
 8008506:	791a      	ldrb	r2, [r3, #4]
 8008508:	4b32      	ldr	r3, [pc, #200]	; (80085d4 <SBUS_uartRxCpltCallback+0xf0>)
 800850a:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 800850c:	4b32      	ldr	r3, [pc, #200]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d120      	bne.n	8008556 <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 8008514:	4b2f      	ldr	r3, [pc, #188]	; (80085d4 <SBUS_uartRxCpltCallback+0xf0>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b0f      	cmp	r3, #15
 800851a:	d118      	bne.n	800854e <SBUS_uartRxCpltCallback+0x6a>
 800851c:	4b2f      	ldr	r3, [pc, #188]	; (80085dc <SBUS_uartRxCpltCallback+0xf8>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <SBUS_uartRxCpltCallback+0x4c>
 8008524:	4b2d      	ldr	r3, [pc, #180]	; (80085dc <SBUS_uartRxCpltCallback+0xf8>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10e      	bne.n	800854e <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 8008530:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	4b27      	ldr	r3, [pc, #156]	; (80085d4 <SBUS_uartRxCpltCallback+0xf0>)
 8008538:	781a      	ldrb	r2, [r3, #0]
 800853a:	4b25      	ldr	r3, [pc, #148]	; (80085d0 <SBUS_uartRxCpltCallback+0xec>)
 800853c:	440b      	add	r3, r1
 800853e:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8008540:	4b25      	ldr	r3, [pc, #148]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	4b23      	ldr	r3, [pc, #140]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 800854a:	701a      	strb	r2, [r3, #0]
 800854c:	e02e      	b.n	80085ac <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 800854e:	4b22      	ldr	r3, [pc, #136]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e02a      	b.n	80085ac <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 8008556:	4b20      	ldr	r3, [pc, #128]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b18      	cmp	r3, #24
 800855c:	d80d      	bhi.n	800857a <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 800855e:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	4619      	mov	r1, r3
 8008564:	4b1b      	ldr	r3, [pc, #108]	; (80085d4 <SBUS_uartRxCpltCallback+0xf0>)
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	4b19      	ldr	r3, [pc, #100]	; (80085d0 <SBUS_uartRxCpltCallback+0xec>)
 800856a:	440b      	add	r3, r1
 800856c:	775a      	strb	r2, [r3, #29]
				_parserState++;
 800856e:	4b1a      	ldr	r3, [pc, #104]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	3301      	adds	r3, #1
 8008574:	b2da      	uxtb	r2, r3
 8008576:	4b18      	ldr	r3, [pc, #96]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008578:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 800857a:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b19      	cmp	r3, #25
 8008580:	d114      	bne.n	80085ac <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 8008582:	4b14      	ldr	r3, [pc, #80]	; (80085d4 <SBUS_uartRxCpltCallback+0xf0>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <SBUS_uartRxCpltCallback+0xb2>
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <SBUS_uartRxCpltCallback+0xf0>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	2b00      	cmp	r3, #0
 8008594:	d107      	bne.n	80085a6 <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 8008596:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 800859c:	f7ff fd92 	bl	80080c4 <SBUS_decoding>
 80085a0:	4603      	mov	r3, r0
 80085a2:	71fb      	strb	r3, [r7, #7]
 80085a4:	e002      	b.n	80085ac <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <SBUS_uartRxCpltCallback+0xf4>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <SBUS_uartRxCpltCallback+0xf0>)
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <SBUS_uartRxCpltCallback+0xf8>)
 80085b2:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <SBUS_uartRxCpltCallback+0xe8>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	3301      	adds	r3, #1
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	4b03      	ldr	r3, [pc, #12]	; (80085cc <SBUS_uartRxCpltCallback+0xe8>)
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	e798      	b.n	80084f4 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 80085c2:	79fb      	ldrb	r3, [r7, #7]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	200007f3 	.word	0x200007f3
 80085d0:	20000760 	.word	0x20000760
 80085d4:	200007f1 	.word	0x200007f1
 80085d8:	200007f0 	.word	0x200007f0
 80085dc:	200007f2 	.word	0x200007f2

080085e0 <SBUS_getChannel>:
		printf("%d \t", sbus.compRcValue[i]);
	}
	printf("\r\n");
}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	4a05      	ldr	r2, [pc, #20]	; (8008604 <SBUS_getChannel+0x24>)
 80085f0:	332c      	adds	r3, #44	; 0x2c
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	4413      	add	r3, r2
 80085f6:	885b      	ldrh	r3, [r3, #2]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20000760 	.word	0x20000760

08008608 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008612:	ed97 0a01 	vldr	s0, [r7, #4]
 8008616:	f013 fcc9 	bl	801bfac <cosf>
 800861a:	eef0 7a40 	vmov.f32	s15, s0
 800861e:	eeb0 0a67 	vmov.f32	s0, s15
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008632:	ed97 0a01 	vldr	s0, [r7, #4]
 8008636:	f013 fd3b 	bl	801c0b0 <sinf>
 800863a:	eef0 7a40 	vmov.f32	s15, s0
 800863e:	eeb0 0a67 	vmov.f32	s0, s15
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 8008648:	b4b0      	push	{r4, r5, r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	4614      	mov	r4, r2
 8008658:	461d      	mov	r5, r3
 800865a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800865c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800865e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008662:	e884 0003 	stmia.w	r4, {r0, r1}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	bcb0      	pop	{r4, r5, r7}
 800866e:	4770      	bx	lr

08008670 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 8008670:	b4b0      	push	{r4, r5, r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	f103 0418 	add.w	r4, r3, #24
 8008682:	4615      	mov	r5, r2
 8008684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008688:	e895 0003 	ldmia.w	r5, {r0, r1}
 800868c:	e884 0003 	stmia.w	r4, {r0, r1}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	bcb0      	pop	{r4, r5, r7}
 8008698:	4770      	bx	lr

0800869a <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 800869a:	b4b0      	push	{r4, r5, r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80086ac:	4615      	mov	r5, r2
 80086ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80086b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bcb0      	pop	{r4, r5, r7}
 80086c2:	4770      	bx	lr

080086c4 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80086de:	42a2      	cmp	r2, r4
 80086e0:	bf08      	it	eq
 80086e2:	4299      	cmpeq	r1, r3
 80086e4:	d001      	beq.n	80086ea <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x26>
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4610      	mov	r0, r2
 80086f0:	3348      	adds	r3, #72	; 0x48
 80086f2:	2248      	movs	r2, #72	; 0x48
 80086f4:	4619      	mov	r1, r3
 80086f6:	f015 f849 	bl	801d78c <memcpy>
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	bd90      	pop	{r4, r7, pc}

08008704 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	3348      	adds	r3, #72	; 0x48
 8008714:	4611      	mov	r1, r2
 8008716:	2248      	movs	r2, #72	; 0x48
 8008718:	4618      	mov	r0, r3
 800871a:	f015 f837 	bl	801d78c <memcpy>
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 8008726:	b490      	push	{r4, r7}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	e9d3 1200 	ldrd	r1, r2, [r3]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8008740:	42a2      	cmp	r2, r4
 8008742:	bf08      	it	eq
 8008744:	4299      	cmpeq	r1, r3
 8008746:	d001      	beq.n	800874c <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x26>
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4614      	mov	r4, r2
 8008752:	3390      	adds	r3, #144	; 0x90
 8008754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bc90      	pop	{r4, r7}
 8008764:	4770      	bx	lr

08008766 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
 8008766:	b490      	push	{r4, r7}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8008778:	4613      	mov	r3, r2
 800877a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800877c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bc90      	pop	{r4, r7}
 8008788:	4770      	bx	lr

0800878a <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800878a:	b490      	push	{r4, r7}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800879c:	4613      	mov	r3, r2
 800879e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc90      	pop	{r4, r7}
 80087ac:	4770      	bx	lr

080087ae <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 80087ae:	b4b0      	push	{r4, r5, r7}
 80087b0:	b085      	sub	sp, #20
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	e9d3 1200 	ldrd	r1, r2, [r3]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 80087c8:	42a2      	cmp	r2, r4
 80087ca:	bf08      	it	eq
 80087cc:	4299      	cmpeq	r1, r3
 80087ce:	d001      	beq.n	80087d4 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x26>
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4615      	mov	r5, r2
 80087da:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80087de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bcb0      	pop	{r4, r5, r7}
 80087f4:	4770      	bx	lr

080087f6 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>:
    SIMPLE_FUNC_IMPL(Health, Health, health)
 80087f6:	b4b0      	push	{r4, r5, r7}
 80087f8:	b085      	sub	sp, #20
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	e9d3 1200 	ldrd	r1, r2, [r3]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008810:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008814:	42a2      	cmp	r2, r4
 8008816:	bf08      	it	eq
 8008818:	4299      	cmpeq	r1, r3
 800881a:	d001      	beq.n	8008820 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE+0x2a>
 800881c:	2301      	movs	r3, #1
 800881e:	73fb      	strb	r3, [r7, #15]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4615      	mov	r5, r2
 8008826:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800882a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800882c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800882e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008832:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	bcb0      	pop	{r4, r5, r7}
 8008840:	4770      	bx	lr

08008842 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>:
 8008842:	b4b0      	push	{r4, r5, r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8008854:	4615      	mov	r5, r2
 8008856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800885a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800885e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	bcb0      	pop	{r4, r5, r7}
 800886a:	4770      	bx	lr

0800886c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800886c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8008870:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8008872:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <_ZL11microsecondv+0x40>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	f04f 0b00 	mov.w	fp, #0
 8008880:	f04f 0c00 	mov.w	ip, #0
 8008884:	468c      	mov	ip, r1
 8008886:	f04f 0b00 	mov.w	fp, #0
 800888a:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <_ZL11microsecondv+0x44>)
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008890:	4611      	mov	r1, r2
 8008892:	f04f 0200 	mov.w	r2, #0
 8008896:	ea4b 0301 	orr.w	r3, fp, r1
 800889a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800889e:	4618      	mov	r0, r3
 80088a0:	4621      	mov	r1, r4
 80088a2:	46bd      	mov	sp, r7
 80088a4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	20000a70 	.word	0x20000a70
 80088b0:	2000cb28 	.word	0x2000cb28

080088b4 <_ZL11millisecondv>:

static __inline uint32_t millisecond(){
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80088b8:	f003 f934 	bl	800bb24 <HAL_GetTick>
 80088bc:	4603      	mov	r3, r0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <_ZN2FC24ModuleAttitudeController4mainEv>:
	AC_fromAHRS = 0x1
};

class ModuleAttitudeController : public px4_AlgorithmModelClass, public Freq<ModuleAttitudeController>{
public:
	static void main(){
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b0f8      	sub	sp, #480	; 0x1e0
 80088c8:	af00      	add	r7, sp, #0
		ModuleAttitudeController attitudeController;
 80088ca:	463b      	mov	r3, r7
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe ff55 	bl	800777c <_ZN2FC24ModuleAttitudeControllerC1Ev>
		while(1){
			/* wait AHRS set */
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 80088d2:	f04f 32ff 	mov.w	r2, #4294967295
 80088d6:	2100      	movs	r1, #0
 80088d8:	2001      	movs	r0, #1
 80088da:	f00f fc01 	bl	80180e0 <osThreadFlagsWait>
			attitudeController.oneStep();
 80088de:	463b      	mov	r3, r7
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe ff5d 	bl	80077a0 <_ZN2FC24ModuleAttitudeController7oneStepEv>
			freqCnt++;
 80088e6:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <_ZN2FC24ModuleAttitudeController4mainEv+0x30>)
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	4b01      	ldr	r3, [pc, #4]	; (80088f4 <_ZN2FC24ModuleAttitudeController4mainEv+0x30>)
 80088f0:	801a      	strh	r2, [r3, #0]
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 80088f2:	e7ee      	b.n	80088d2 <_ZN2FC24ModuleAttitudeController4mainEv+0xe>
 80088f4:	20000b58 	.word	0x20000b58

080088f8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum AcSignal signal){
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	71fb      	strb	r3, [r7, #7]
		if(signal == AC_fromAHRS) osThreadFlagsSet(AC_TaskHandle, AC_fromAHRS);
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d105      	bne.n	8008914 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x1c>
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x24>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2101      	movs	r1, #1
 800890e:	4618      	mov	r0, r3
 8008910:	f00f fb84 	bl	801801c <osThreadFlagsSet>
	}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	2000b540 	.word	0x2000b540

08008920 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>:

    /*
     *  signal to AHRS main function
     *  this function is called by SensorAccel, SensorGyro (peripheral interface)
     */
    static inline void setSignal(enum AhrsSignal signal){
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	71fb      	strb	r3, [r7, #7]
    	switch(signal){
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d002      	beq.n	8008936 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x16>
 8008930:	2b02      	cmp	r3, #2
 8008932:	d008      	beq.n	8008946 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x26>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
        	break;
    	case AHRS_fromGyro:
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
    	}
    }
 8008934:	e00d      	b.n	8008952 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
 8008936:	4b09      	ldr	r3, [pc, #36]	; (800895c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2101      	movs	r1, #1
 800893c:	4618      	mov	r0, r3
 800893e:	f00f fb6d 	bl	801801c <osThreadFlagsSet>
        	break;
 8008942:	bf00      	nop
    }
 8008944:	e005      	b.n	8008952 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2102      	movs	r1, #2
 800894c:	4618      	mov	r0, r3
 800894e:	f00f fb65 	bl	801801c <osThreadFlagsSet>
    }
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	2000bda0 	.word	0x2000bda0

08008960 <_ZN2FC10ModuleAHRS4mainEv>:
	/*
	 *  ModuleAHRS main function
	 *  this function is called by CMSIS task function
	 *	wait signal from accelerometer and gyrometer
	 */
    static void main(){
 8008960:	b580      	push	{r7, lr}
 8008962:	b0aa      	sub	sp, #168	; 0xa8
 8008964:	af00      	add	r7, sp, #0
    	ModuleAHRS moduleAHRS;
 8008966:	463b      	mov	r3, r7
 8008968:	4618      	mov	r0, r3
 800896a:	f7fc fcc9 	bl	8005300 <_ZN2FC10ModuleAHRSC1Ev>
    	while(1){
    		/* wait accel, gyro value set */
    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
 800896e:	f04f 32ff 	mov.w	r2, #4294967295
 8008972:	2101      	movs	r1, #1
 8008974:	2003      	movs	r0, #3
 8008976:	f00f fbb3 	bl	80180e0 <osThreadFlagsWait>
    		moduleAHRS.oneStep();
 800897a:	463b      	mov	r3, r7
 800897c:	4618      	mov	r0, r3
 800897e:	f7fc fd13 	bl	80053a8 <_ZN2FC10ModuleAHRS7oneStepEv>
    		ModuleAttitudeController::setSignal(AC_fromAHRS);
 8008982:	2001      	movs	r0, #1
 8008984:	f7ff ffb8 	bl	80088f8 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
 8008988:	e7f1      	b.n	800896e <_ZN2FC10ModuleAHRS4mainEv+0xe>
	...

0800898c <_ZN2FC11SensorAccel8setAccelEfff>:
private:
    struct BodyAccel bodyAccel{};
};


void SensorAccel::setAccel(float x, float y, float z){
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	ed87 0a02 	vstr	s0, [r7, #8]
 8008998:	edc7 0a01 	vstr	s1, [r7, #4]
 800899c:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80089a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80089a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ac:	d10d      	bne.n	80089ca <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 80089ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80089b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ba:	d106      	bne.n	80089ca <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 80089bc:	edd7 7a00 	vldr	s15, [r7]
 80089c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c8:	d01e      	beq.n	8008a08 <_ZN2FC11SensorAccel8setAccelEfff+0x7c>
	this->bodyAccel.timestamp = microsecond();
 80089ca:	f7ff ff4f 	bl	800886c <_ZL11microsecondv>
 80089ce:	4603      	mov	r3, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	609a      	str	r2, [r3, #8]
	this->bodyAccel.xyz[1] = y;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	60da      	str	r2, [r3, #12]
	this->bodyAccel.xyz[2] = z;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4619      	mov	r1, r3
 80089ee:	4808      	ldr	r0, [pc, #32]	; (8008a10 <_ZN2FC11SensorAccel8setAccelEfff+0x84>)
 80089f0:	f7ff fe2a 	bl	8008648 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
	ModuleAHRS::setSignal(AHRS_fromAccel);
 80089f4:	2001      	movs	r0, #1
 80089f6:	f7ff ff93 	bl	8008920 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	/* Freq class variable */
	freqCnt++;
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <_ZN2FC11SensorAccel8setAccelEfff+0x88>)
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	3301      	adds	r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <_ZN2FC11SensorAccel8setAccelEfff+0x88>)
 8008a04:	801a      	strh	r2, [r3, #0]
 8008a06:	e000      	b.n	8008a0a <_ZN2FC11SensorAccel8setAccelEfff+0x7e>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8008a08:	bf00      	nop
}
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd90      	pop	{r4, r7, pc}
 8008a10:	200005a0 	.word	0x200005a0
 8008a14:	20000b5a 	.word	0x20000b5a

08008a18 <_ZN2FC10SensorGyro7setGyroEfff>:
    void setGyro(float x, float y, float z);
private:
    struct BodyAngularVelocity bodyAngularVelocity;
};

void SensorGyro::setGyro(float x, float y, float z){
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8008a24:	edc7 0a01 	vstr	s1, [r7, #4]
 8008a28:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8008a2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008a30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a38:	d10d      	bne.n	8008a56 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8008a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	d106      	bne.n	8008a56 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8008a48:	edd7 7a00 	vldr	s15, [r7]
 8008a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	d01e      	beq.n	8008a94 <_ZN2FC10SensorGyro7setGyroEfff+0x7c>
	this->bodyAngularVelocity.timestamp = microsecond();
 8008a56:	f7ff ff09 	bl	800886c <_ZL11microsecondv>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	609a      	str	r2, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4808      	ldr	r0, [pc, #32]	; (8008a9c <_ZN2FC10SensorGyro7setGyroEfff+0x84>)
 8008a7c:	f7ff fdf8 	bl	8008670 <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
	ModuleAHRS::setSignal(AHRS_fromGyro);
 8008a80:	2002      	movs	r0, #2
 8008a82:	f7ff ff4d 	bl	8008920 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	freqCnt++;
 8008a86:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <_ZN2FC10SensorGyro7setGyroEfff+0x88>)
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <_ZN2FC10SensorGyro7setGyroEfff+0x88>)
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	e000      	b.n	8008a96 <_ZN2FC10SensorGyro7setGyroEfff+0x7e>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8008a94:	bf00      	nop
}
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd90      	pop	{r4, r7, pc}
 8008a9c:	200005a0 	.word	0x200005a0
 8008aa0:	20000b5c 	.word	0x20000b5c

08008aa4 <_ZN2FC9SensorMag6setMagEfff>:
    float bias[3];
    float scale[3];
};


void SensorMag::setMag(float x, float y, float z){
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	ed87 0a02 	vstr	s0, [r7, #8]
 8008ab0:	edc7 0a01 	vstr	s1, [r7, #4]
 8008ab4:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8008ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8008abc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac4:	d10d      	bne.n	8008ae2 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8008ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad2:	d106      	bne.n	8008ae2 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8008ad4:	edd7 7a00 	vldr	s15, [r7]
 8008ad8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae0:	d01b      	beq.n	8008b1a <_ZN2FC9SensorMag6setMagEfff+0x76>
	this->bodyMag.timestamp = microsecond();
 8008ae2:	f7ff fec3 	bl	800886c <_ZL11microsecondv>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	460c      	mov	r4, r1
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = x;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	609a      	str	r2, [r3, #8]
	this->bodyMag.xyz[1] = y;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	60da      	str	r2, [r3, #12]
	this->bodyMag.xyz[2] = z;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	611a      	str	r2, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4619      	mov	r1, r3
 8008b06:	4807      	ldr	r0, [pc, #28]	; (8008b24 <_ZN2FC9SensorMag6setMagEfff+0x80>)
 8008b08:	f7ff fdc7 	bl	800869a <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>

	/* Freq class variable */
	freqCnt++;
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <_ZN2FC9SensorMag6setMagEfff+0x84>)
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	3301      	adds	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <_ZN2FC9SensorMag6setMagEfff+0x84>)
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	e000      	b.n	8008b1c <_ZN2FC9SensorMag6setMagEfff+0x78>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8008b1a:	bf00      	nop
}
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd90      	pop	{r4, r7, pc}
 8008b22:	bf00      	nop
 8008b24:	200005a0 	.word	0x200005a0
 8008b28:	20000b5e 	.word	0x20000b5e
 8008b2c:	00000000 	.word	0x00000000

08008b30 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:


void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b091      	sub	sp, #68	; 0x44
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b38:	ed87 0b08 	vstr	d0, [r7, #32]
 8008b3c:	ed87 1b06 	vstr	d1, [r7, #24]
 8008b40:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8008b44:	edc7 2a05 	vstr	s5, [r7, #20]
 8008b48:	ed87 3a04 	vstr	s6, [r7, #16]
 8008b4c:	edc7 3a03 	vstr	s7, [r7, #12]
 8008b50:	ed87 4a02 	vstr	s8, [r7, #8]
 8008b54:	460b      	mov	r3, r1
 8008b56:	71fb      	strb	r3, [r7, #7]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8008b5c:	6938      	ldr	r0, [r7, #16]
 8008b5e:	f7f7 fd03 	bl	8000568 <__aeabi_f2d>
 8008b62:	a33e      	add	r3, pc, #248	; (adr r3, 8008c5c <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x12c>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 fd56 	bl	8000618 <__aeabi_dmul>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	4618      	mov	r0, r3
 8008b72:	4621      	mov	r1, r4
 8008b74:	f04f 0200 	mov.w	r2, #0
 8008b78:	4b35      	ldr	r3, [pc, #212]	; (8008c50 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x120>)
 8008b7a:	f7f7 fe77 	bl	800086c <__aeabi_ddiv>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	4618      	mov	r0, r3
 8008b84:	4621      	mov	r1, r4
 8008b86:	f7f8 f83f 	bl	8000c08 <__aeabi_d2f>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8008b8e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8008b92:	f7ff fd39 	bl	8008608 <_ZSt3cosf>
 8008b96:	eeb0 7a40 	vmov.f32	s14, s0
 8008b9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ba2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 8008ba6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8008baa:	f7ff fd3d 	bl	8008628 <_ZSt3sinf>
 8008bae:	eeb0 7a40 	vmov.f32	s14, s0
 8008bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bba:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 8008bbe:	f7ff fe55 	bl	800886c <_ZL11microsecondv>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc8:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 8008bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008bd2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 8008bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008bdc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 8008be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008be6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bee:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bfa:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c00:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c0e:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	79fa      	ldrb	r2, [r7, #7]
 8008c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	79ba      	ldrb	r2, [r7, #6]
 8008c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4808      	ldr	r0, [pc, #32]	; (8008c54 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x124>)
 8008c32:	f7ff fd67 	bl	8008704 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>

	/* Freq class variable */
	freqCnt++;
 8008c36:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x128>)
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x128>)
 8008c40:	801a      	strh	r2, [r3, #0]

}
 8008c42:	bf00      	nop
 8008c44:	3744      	adds	r7, #68	; 0x44
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd90      	pop	{r4, r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	f3af 8000 	nop.w
 8008c50:	40668000 	.word	0x40668000
 8008c54:	200005a0 	.word	0x200005a0
 8008c58:	20000b60 	.word	0x20000b60
 8008c5c:	54442d18 	.word	0x54442d18
 8008c60:	400921fb 	.word	0x400921fb

08008c64 <_ZN2FC10SensorBaro7setBaroEff>:
private:
    struct Barometer barometer;
};


void SensorBaro::setBaro(float pressure, float temperature){
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8008c70:	edc7 0a01 	vstr	s1, [r7, #4]
	this->barometer.timestamp = microsecond();
 8008c74:	f7ff fdfa 	bl	800886c <_ZL11microsecondv>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometer.pressure = pressure;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	609a      	str	r2, [r3, #8]
	this->barometer.temperature = temperature;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	60da      	str	r2, [r3, #12]

	msgBus.setBarometer(this->barometer);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4619      	mov	r1, r3
 8008c92:	4806      	ldr	r0, [pc, #24]	; (8008cac <_ZN2FC10SensorBaro7setBaroEff+0x48>)
 8008c94:	f7ff fd67 	bl	8008766 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>

	/* Freq class variable */
	freqCnt++;
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <_ZN2FC10SensorBaro7setBaroEff+0x4c>)
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <_ZN2FC10SensorBaro7setBaroEff+0x4c>)
 8008ca2:	801a      	strh	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd90      	pop	{r4, r7, pc}
 8008cac:	200005a0 	.word	0x200005a0
 8008cb0:	20000b62 	.word	0x20000b62

08008cb4 <_ZN2FC2RC5setRCEttttttttt>:

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode, uint16_t subMode,
			   uint16_t calibration, uint16_t calibration_sub)
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b08b      	sub	sp, #44	; 0x2c
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	817b      	strh	r3, [r7, #10]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	813b      	strh	r3, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	80fb      	strh	r3, [r7, #6]
	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 8008cce:	f7ff fdcd 	bl	800886c <_ZL11microsecondv>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	897a      	ldrh	r2, [r7, #10]
 8008ce0:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	893a      	ldrh	r2, [r7, #8]
 8008ce6:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	88fa      	ldrh	r2, [r7, #6]
 8008cec:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008cf2:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	481a      	ldr	r0, [pc, #104]	; (8008d64 <_ZN2FC2RC5setRCEttttttttt+0xb0>)
 8008cfa:	f7ff fd46 	bl	800878a <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 8008cfe:	f107 0310 	add.w	r3, r7, #16
 8008d02:	4619      	mov	r1, r3
 8008d04:	4817      	ldr	r0, [pc, #92]	; (8008d64 <_ZN2FC2RC5setRCEttttttttt+0xb0>)
 8008d06:	f7fe fcbd 	bl	8007684 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 8008d0a:	2307      	movs	r3, #7
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD ) rcvArmFlag = Command::Arm;
 8008d0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008d10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d901      	bls.n	8008d1c <_ZN2FC2RC5setRCEttttttttt+0x68>
 8008d18:	2306      	movs	r3, #6
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag && millisecond()-lastArmReq > 500){
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d00a      	beq.n	8008d3a <_ZN2FC2RC5setRCEttttttttt+0x86>
 8008d24:	f7ff fdc6 	bl	80088b4 <_ZL11millisecondv>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008d34:	d901      	bls.n	8008d3a <_ZN2FC2RC5setRCEttttttttt+0x86>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <_ZN2FC2RC5setRCEttttttttt+0x88>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d007      	beq.n	8008d50 <_ZN2FC2RC5setRCEttttttttt+0x9c>
		ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 8008d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d42:	f7fe ffef 	bl	8007d24 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
		lastArmReq = millisecond();
 8008d46:	f7ff fdb5 	bl	80088b4 <_ZL11millisecondv>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	611a      	str	r2, [r3, #16]
	}


	/* Freq class variable */
	freqCnt++;
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <_ZN2FC2RC5setRCEttttttttt+0xb4>)
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <_ZN2FC2RC5setRCEttttttttt+0xb4>)
 8008d5a:	801a      	strh	r2, [r3, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	372c      	adds	r7, #44	; 0x2c
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd90      	pop	{r4, r7, pc}
 8008d64:	200005a0 	.word	0x200005a0
 8008d68:	20000b64 	.word	0x20000b64

08008d6c <_ZN2FC12ModuleHealth4mainEv>:

namespace FC {

class ModuleHealth {
public:
	static void main(){
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af00      	add	r7, sp, #0
		uint32_t tick;
		tick = osKernelGetTickCount();
 8008d72:	f00f f885 	bl	8017e80 <osKernelGetTickCount>
 8008d76:	6278      	str	r0, [r7, #36]	; 0x24

		struct Health health;
		while(1){
			tick += 1000;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
			osDelayUntil(tick);
 8008d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d82:	f00f fa6f 	bl	8018264 <osDelayUntil>

			health.accel = SensorAccel::checkFreq();
 8008d86:	f000 fc53 	bl	8009630 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	813b      	strh	r3, [r7, #8]
			health.gyro = SensorGyro::checkFreq();
 8008d8e:	f000 fc61 	bl	8009654 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>
 8008d92:	4603      	mov	r3, r0
 8008d94:	817b      	strh	r3, [r7, #10]
			health.mag = SensorMag::checkFreq();
 8008d96:	f000 fc6f 	bl	8009678 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	81bb      	strh	r3, [r7, #12]
			health.baro = SensorBaro::checkFreq();
 8008d9e:	f000 fc7d 	bl	800969c <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>
 8008da2:	4603      	mov	r3, r0
 8008da4:	81fb      	strh	r3, [r7, #14]
			health.gps = SensorGPS::checkFreq();
 8008da6:	f000 fc8b 	bl	80096c0 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>
 8008daa:	4603      	mov	r3, r0
 8008dac:	823b      	strh	r3, [r7, #16]
			health.rc = RC::checkFreq();
 8008dae:	f000 fc99 	bl	80096e4 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>
 8008db2:	4603      	mov	r3, r0
 8008db4:	827b      	strh	r3, [r7, #18]

			health.ahrs = ModuleAHRS::checkFreq();
 8008db6:	f000 fca7 	bl	8009708 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	82bb      	strh	r3, [r7, #20]

			//TODO ins, attitude, position, auto
			health.ins = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	82fb      	strh	r3, [r7, #22]

			health.attitudeController = ModuleAttitudeController::checkFreq();
 8008dc2:	f000 fcb3 	bl	800972c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	833b      	strh	r3, [r7, #24]
			health.positionController = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	837b      	strh	r3, [r7, #26]
			health.autoController = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	83bb      	strh	r3, [r7, #28]

			msgBus.setHealth(health);
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4802      	ldr	r0, [pc, #8]	; (8008de0 <_ZN2FC12ModuleHealth4mainEv+0x74>)
 8008dd8:	f7ff fd33 	bl	8008842 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>
			tick += 1000;
 8008ddc:	e7cc      	b.n	8008d78 <_ZN2FC12ModuleHealth4mainEv+0xc>
 8008dde:	bf00      	nop
 8008de0:	200005a0 	.word	0x200005a0
 8008de4:	00000000 	.word	0x00000000

08008de8 <_ZN2FC8ModuleSD4mainEv>:

class ModuleSD {
public:
	ModuleSD() = default;

	static void main(){
 8008de8:	b5b0      	push	{r4, r5, r7, lr}
 8008dea:	b0fa      	sub	sp, #488	; 0x1e8
 8008dec:	af08      	add	r7, sp, #32
		char buf[256];
		uint32_t bw;
		int len = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		retSD=f_mount(&SDFatFS ,&SDPath[0],1);
 8008df4:	2201      	movs	r2, #1
 8008df6:	4913      	ldr	r1, [pc, #76]	; (8008e44 <_ZN2FC8ModuleSD4mainEv+0x5c>)
 8008df8:	4813      	ldr	r0, [pc, #76]	; (8008e48 <_ZN2FC8ModuleSD4mainEv+0x60>)
 8008dfa:	f00e fa59 	bl	80172b0 <f_mount>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	461a      	mov	r2, r3
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <_ZN2FC8ModuleSD4mainEv+0x64>)
 8008e04:	701a      	strb	r2, [r3, #0]
		if(retSD==FR_OK){
 8008e06:	4b11      	ldr	r3, [pc, #68]	; (8008e4c <_ZN2FC8ModuleSD4mainEv+0x64>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d105      	bne.n	8008e1a <_ZN2FC8ModuleSD4mainEv+0x32>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008e0e:	2201      	movs	r2, #1
 8008e10:	2180      	movs	r1, #128	; 0x80
 8008e12:	480f      	ldr	r0, [pc, #60]	; (8008e50 <_ZN2FC8ModuleSD4mainEv+0x68>)
 8008e14:	f003 ff74 	bl	800cd00 <HAL_GPIO_WritePin>
 8008e18:	e004      	b.n	8008e24 <_ZN2FC8ModuleSD4mainEv+0x3c>
		}
		else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2180      	movs	r1, #128	; 0x80
 8008e1e:	480c      	ldr	r0, [pc, #48]	; (8008e50 <_ZN2FC8ModuleSD4mainEv+0x68>)
 8008e20:	f003 ff6e 	bl	800cd00 <HAL_GPIO_WritePin>

		while(1){
			/* open */
			f_open(&SDFile,"log.txt", FA_OPEN_APPEND | FA_WRITE );
 8008e24:	2232      	movs	r2, #50	; 0x32
 8008e26:	490b      	ldr	r1, [pc, #44]	; (8008e54 <_ZN2FC8ModuleSD4mainEv+0x6c>)
 8008e28:	480b      	ldr	r0, [pc, #44]	; (8008e58 <_ZN2FC8ModuleSD4mainEv+0x70>)
 8008e2a:	f00e faa5 	bl	8017378 <f_open>
			if(retSD==FR_OK){
 8008e2e:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <_ZN2FC8ModuleSD4mainEv+0x64>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d112      	bne.n	8008e5c <_ZN2FC8ModuleSD4mainEv+0x74>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008e36:	2201      	movs	r2, #1
 8008e38:	2180      	movs	r1, #128	; 0x80
 8008e3a:	4805      	ldr	r0, [pc, #20]	; (8008e50 <_ZN2FC8ModuleSD4mainEv+0x68>)
 8008e3c:	f003 ff60 	bl	800cd00 <HAL_GPIO_WritePin>
 8008e40:	e011      	b.n	8008e66 <_ZN2FC8ModuleSD4mainEv+0x7e>
 8008e42:	bf00      	nop
 8008e44:	2000d178 	.word	0x2000d178
 8008e48:	2000e1ac 	.word	0x2000e1ac
 8008e4c:	2000d174 	.word	0x2000d174
 8008e50:	40020400 	.word	0x40020400
 8008e54:	08021ebc 	.word	0x08021ebc
 8008e58:	2000d17c 	.word	0x2000d17c
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2180      	movs	r1, #128	; 0x80
 8008e60:	48db      	ldr	r0, [pc, #876]	; (80091d0 <_ZN2FC8ModuleSD4mainEv+0x3e8>)
 8008e62:	f003 ff4d 	bl	800cd00 <HAL_GPIO_WritePin>
			struct NedAccel nedAccel;
			struct GPS gps;
			struct Barometer baro;
			struct BodyAngularVelocity gyro;

			if(msgBus.getAttitude(&attitude)){
 8008e66:	463b      	mov	r3, r7
 8008e68:	4619      	mov	r1, r3
 8008e6a:	48da      	ldr	r0, [pc, #872]	; (80091d4 <_ZN2FC8ModuleSD4mainEv+0x3ec>)
 8008e6c:	f7fe fbe4 	bl	8007638 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d03c      	beq.n	8008ef0 <_ZN2FC8ModuleSD4mainEv+0x108>
			msgBus.getAttitude(&attitude);
 8008e76:	463b      	mov	r3, r7
 8008e78:	4619      	mov	r1, r3
 8008e7a:	48d6      	ldr	r0, [pc, #856]	; (80091d4 <_ZN2FC8ModuleSD4mainEv+0x3ec>)
 8008e7c:	f7fe fbdc 	bl	8007638 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
				len = sprintf(buf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 8008e80:	463b      	mov	r3, r7
 8008e82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e86:	4619      	mov	r1, r3
 8008e88:	463b      	mov	r3, r7
 8008e8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8008e8e:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8008e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e96:	eefd 6ae7 	vcvt.s32.f32	s13, s15
														(int)(attitude.pitch*1000000),
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8008ea0:	ed9f 7acd 	vldr	s14, [pc, #820]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8008ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
				len = sprintf(buf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 8008ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eac:	ee17 2a90 	vmov	r2, s15
														(int)(attitude.yaw*1000000));
 8008eb0:	463b      	mov	r3, r7
 8008eb2:	edd3 7a08 	vldr	s15, [r3, #32]
 8008eb6:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8008eba:	ee67 7a87 	vmul.f32	s15, s15, s14
				len = sprintf(buf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 8008ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ec2:	ee17 3a90 	vmov	r3, s15
 8008ec6:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	9200      	str	r2, [sp, #0]
 8008ece:	ee16 3a90 	vmov	r3, s13
 8008ed2:	460a      	mov	r2, r1
 8008ed4:	49c1      	ldr	r1, [pc, #772]	; (80091dc <_ZN2FC8ModuleSD4mainEv+0x3f4>)
 8008ed6:	f015 fd01 	bl	801e8dc <siprintf>
 8008eda:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
				f_write(&SDFile, buf, len, (UINT*)&bw);
 8008ede:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8008ee2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008ee6:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008eea:	48bd      	ldr	r0, [pc, #756]	; (80091e0 <_ZN2FC8ModuleSD4mainEv+0x3f8>)
 8008eec:	f00e fc17 	bl	801771e <f_write>
			}
			if(msgBus.getNedAccel(&nedAccel)){
 8008ef0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	48b7      	ldr	r0, [pc, #732]	; (80091d4 <_ZN2FC8ModuleSD4mainEv+0x3ec>)
 8008ef8:	f7ff fc59 	bl	80087ae <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d03b      	beq.n	8008f7a <_ZN2FC8ModuleSD4mainEv+0x192>
				len=sprintf(buf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8008f02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008f06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008f10:	edd3 7a02 	vldr	s15, [r3, #8]
 8008f14:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8008f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f1c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
																		(int)(nedAccel.xyz[1]*1000000),
 8008f20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008f24:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f28:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8008f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
				len=sprintf(buf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8008f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f34:	ee17 2a90 	vmov	r2, s15
																		(int)(nedAccel.xyz[2]*1000000));
 8008f38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008f3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f40:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8008f44:	ee67 7a87 	vmul.f32	s15, s15, s14
				len=sprintf(buf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8008f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f4c:	ee17 3a90 	vmov	r3, s15
 8008f50:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	9200      	str	r2, [sp, #0]
 8008f58:	ee16 3a90 	vmov	r3, s13
 8008f5c:	460a      	mov	r2, r1
 8008f5e:	49a1      	ldr	r1, [pc, #644]	; (80091e4 <_ZN2FC8ModuleSD4mainEv+0x3fc>)
 8008f60:	f015 fcbc 	bl	801e8dc <siprintf>
 8008f64:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
				f_write(&SDFile, buf, len, (UINT*)&bw);
 8008f68:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8008f6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008f70:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008f74:	489a      	ldr	r0, [pc, #616]	; (80091e0 <_ZN2FC8ModuleSD4mainEv+0x3f8>)
 8008f76:	f00e fbd2 	bl	801771e <f_write>
			}
			if(msgBus.getBodyAngularVelocity(&gyro)){
 8008f7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4894      	ldr	r0, [pc, #592]	; (80091d4 <_ZN2FC8ModuleSD4mainEv+0x3ec>)
 8008f82:	f7fc f924 	bl	80051ce <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d020      	beq.n	8008fce <_ZN2FC8ModuleSD4mainEv+0x1e6>
				len=sprintf(buf,"gyro %u %d\n",(uint)gyro.timestamp,(int)(gyro.xyz[2]*1000000));
 8008f8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f94:	461a      	mov	r2, r3
 8008f96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f9e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8008fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008faa:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8008fae:	ee17 3a90 	vmov	r3, s15
 8008fb2:	498d      	ldr	r1, [pc, #564]	; (80091e8 <_ZN2FC8ModuleSD4mainEv+0x400>)
 8008fb4:	f015 fc92 	bl	801e8dc <siprintf>
 8008fb8:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
				f_write(&SDFile, buf, len, (UINT*)&bw);
 8008fbc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8008fc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008fc4:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008fc8:	4885      	ldr	r0, [pc, #532]	; (80091e0 <_ZN2FC8ModuleSD4mainEv+0x3f8>)
 8008fca:	f00e fba8 	bl	801771e <f_write>
			}
			if(msgBus.getGPS(&gps)){
 8008fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	487f      	ldr	r0, [pc, #508]	; (80091d4 <_ZN2FC8ModuleSD4mainEv+0x3ec>)
 8008fd6:	f7ff fb75 	bl	80086c4 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80ab 	beq.w	8009138 <_ZN2FC8ModuleSD4mainEv+0x350>
				int32_t latDecimal = (int32_t)gps.lat;
 8008fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fe6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008fea:	4618      	mov	r0, r3
 8008fec:	4621      	mov	r1, r4
 8008fee:	f7f7 fdc3 	bl	8000b78 <__aeabi_d2iz>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				int32_t latFraction = (int32_t)((gps.lat-latDecimal)*100000000);
 8008ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ffc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009000:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8009004:	f7f7 fa9e 	bl	8000544 <__aeabi_i2d>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4620      	mov	r0, r4
 800900e:	4629      	mov	r1, r5
 8009010:	f7f7 f94a 	bl	80002a8 <__aeabi_dsub>
 8009014:	4603      	mov	r3, r0
 8009016:	460c      	mov	r4, r1
 8009018:	4618      	mov	r0, r3
 800901a:	4621      	mov	r1, r4
 800901c:	a36a      	add	r3, pc, #424	; (adr r3, 80091c8 <_ZN2FC8ModuleSD4mainEv+0x3e0>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 faf9 	bl	8000618 <__aeabi_dmul>
 8009026:	4603      	mov	r3, r0
 8009028:	460c      	mov	r4, r1
 800902a:	4618      	mov	r0, r3
 800902c:	4621      	mov	r1, r4
 800902e:	f7f7 fda3 	bl	8000b78 <__aeabi_d2iz>
 8009032:	4603      	mov	r3, r0
 8009034:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
				int32_t lonDecimal = (int32_t)gps.lon;
 8009038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800903c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009040:	4618      	mov	r0, r3
 8009042:	4621      	mov	r1, r4
 8009044:	f7f7 fd98 	bl	8000b78 <__aeabi_d2iz>
 8009048:	4603      	mov	r3, r0
 800904a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
				int32_t lonFraction = (int32_t)((gps.lon-lonDecimal)*100000000);
 800904e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009052:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009056:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 800905a:	f7f7 fa73 	bl	8000544 <__aeabi_i2d>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4620      	mov	r0, r4
 8009064:	4629      	mov	r1, r5
 8009066:	f7f7 f91f 	bl	80002a8 <__aeabi_dsub>
 800906a:	4603      	mov	r3, r0
 800906c:	460c      	mov	r4, r1
 800906e:	4618      	mov	r0, r3
 8009070:	4621      	mov	r1, r4
 8009072:	a355      	add	r3, pc, #340	; (adr r3, 80091c8 <_ZN2FC8ModuleSD4mainEv+0x3e0>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f7f7 face 	bl	8000618 <__aeabi_dmul>
 800907c:	4603      	mov	r3, r0
 800907e:	460c      	mov	r4, r1
 8009080:	4618      	mov	r0, r3
 8009082:	4621      	mov	r1, r4
 8009084:	f7f7 fd78 	bl	8000b78 <__aeabi_d2iz>
 8009088:	4603      	mov	r3, r0
 800908a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
				len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 800908e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009092:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009096:	461d      	mov	r5, r3
																  latDecimal, latFraction,
																  lonDecimal, lonFraction,
																  (int)(gps.alt*1000000),
 8009098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800909c:	edd3 7a08 	vldr	s15, [r3, #32]
 80090a0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 80090a4:	ee67 7a87 	vmul.f32	s15, s15, s14
				len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 80090a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090ac:	ee17 2a90 	vmov	r2, s15
																  (int)(gps.velN*1000000),
 80090b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80090b8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 80090bc:	ee67 7a87 	vmul.f32	s15, s15, s14
				len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 80090c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090c4:	ee17 1a90 	vmov	r1, s15
																  (int)(gps.velE*1000000),
 80090c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090cc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80090d0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 80090d4:	ee67 7a87 	vmul.f32	s15, s15, s14
				len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 80090d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090dc:	ee17 4a90 	vmov	r4, s15
																  (int)(gps.velD*1000000));
 80090e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80090e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 80090ec:	ee67 7a87 	vmul.f32	s15, s15, s14
				len=std::sprintf(buf,"GPS %u %d.%d %d.%d %d %d %d %d\n",(uint)gps.timestamp,
 80090f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090f4:	ee17 3a90 	vmov	r3, s15
 80090f8:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80090fc:	9306      	str	r3, [sp, #24]
 80090fe:	9405      	str	r4, [sp, #20]
 8009100:	9104      	str	r1, [sp, #16]
 8009102:	9203      	str	r2, [sp, #12]
 8009104:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009108:	9302      	str	r3, [sp, #8]
 800910a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800911a:	462a      	mov	r2, r5
 800911c:	4933      	ldr	r1, [pc, #204]	; (80091ec <_ZN2FC8ModuleSD4mainEv+0x404>)
 800911e:	f015 fbdd 	bl	801e8dc <siprintf>
 8009122:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
				f_write(&SDFile, buf, len, (UINT*)&bw);
 8009126:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800912a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800912e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8009132:	482b      	ldr	r0, [pc, #172]	; (80091e0 <_ZN2FC8ModuleSD4mainEv+0x3f8>)
 8009134:	f00e faf3 	bl	801771e <f_write>
			}   // Lat Lon Alt velN velE velD
			if(msgBus.getBarometer(&baro)){
 8009138:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800913c:	4619      	mov	r1, r3
 800913e:	4825      	ldr	r0, [pc, #148]	; (80091d4 <_ZN2FC8ModuleSD4mainEv+0x3ec>)
 8009140:	f7ff faf1 	bl	8008726 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d020      	beq.n	800918c <_ZN2FC8ModuleSD4mainEv+0x3a4>
				len=sprintf(buf,"Baro %u %d\n",(uint)baro.timestamp,(int)(baro.pressure*1000000));
 800914a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800914e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009152:	461a      	mov	r2, r3
 8009154:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009158:	edd3 7a02 	vldr	s15, [r3, #8]
 800915c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80091d8 <_ZN2FC8ModuleSD4mainEv+0x3f0>
 8009160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009168:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800916c:	ee17 3a90 	vmov	r3, s15
 8009170:	491f      	ldr	r1, [pc, #124]	; (80091f0 <_ZN2FC8ModuleSD4mainEv+0x408>)
 8009172:	f015 fbb3 	bl	801e8dc <siprintf>
 8009176:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
				f_write(&SDFile, buf, len, (UINT*)&bw);
 800917a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800917e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009182:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8009186:	4816      	ldr	r0, [pc, #88]	; (80091e0 <_ZN2FC8ModuleSD4mainEv+0x3f8>)
 8009188:	f00e fac9 	bl	801771e <f_write>
			}

			if(retSD==FR_OK){
 800918c:	4b19      	ldr	r3, [pc, #100]	; (80091f4 <_ZN2FC8ModuleSD4mainEv+0x40c>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d105      	bne.n	80091a0 <_ZN2FC8ModuleSD4mainEv+0x3b8>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009194:	2201      	movs	r2, #1
 8009196:	2180      	movs	r1, #128	; 0x80
 8009198:	480d      	ldr	r0, [pc, #52]	; (80091d0 <_ZN2FC8ModuleSD4mainEv+0x3e8>)
 800919a:	f003 fdb1 	bl	800cd00 <HAL_GPIO_WritePin>
 800919e:	e004      	b.n	80091aa <_ZN2FC8ModuleSD4mainEv+0x3c2>
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80091a0:	2200      	movs	r2, #0
 80091a2:	2180      	movs	r1, #128	; 0x80
 80091a4:	480a      	ldr	r0, [pc, #40]	; (80091d0 <_ZN2FC8ModuleSD4mainEv+0x3e8>)
 80091a6:	f003 fdab 	bl	800cd00 <HAL_GPIO_WritePin>

			f_close(&SDFile);
 80091aa:	480d      	ldr	r0, [pc, #52]	; (80091e0 <_ZN2FC8ModuleSD4mainEv+0x3f8>)
 80091ac:	f00e fd03 	bl	8017bb6 <f_close>
			if(retSD==FR_OK){
 80091b0:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <_ZN2FC8ModuleSD4mainEv+0x40c>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11f      	bne.n	80091f8 <_ZN2FC8ModuleSD4mainEv+0x410>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80091b8:	2201      	movs	r2, #1
 80091ba:	2180      	movs	r1, #128	; 0x80
 80091bc:	4804      	ldr	r0, [pc, #16]	; (80091d0 <_ZN2FC8ModuleSD4mainEv+0x3e8>)
 80091be:	f003 fd9f 	bl	800cd00 <HAL_GPIO_WritePin>
 80091c2:	e01e      	b.n	8009202 <_ZN2FC8ModuleSD4mainEv+0x41a>
 80091c4:	f3af 8000 	nop.w
 80091c8:	00000000 	.word	0x00000000
 80091cc:	4197d784 	.word	0x4197d784
 80091d0:	40020400 	.word	0x40020400
 80091d4:	200005a0 	.word	0x200005a0
 80091d8:	49742400 	.word	0x49742400
 80091dc:	08021ec4 	.word	0x08021ec4
 80091e0:	2000d17c 	.word	0x2000d17c
 80091e4:	08021ed8 	.word	0x08021ed8
 80091e8:	08021eec 	.word	0x08021eec
 80091ec:	08021ef8 	.word	0x08021ef8
 80091f0:	08021f18 	.word	0x08021f18
 80091f4:	2000d174 	.word	0x2000d174
			}
			else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80091f8:	2200      	movs	r2, #0
 80091fa:	2180      	movs	r1, #128	; 0x80
 80091fc:	4803      	ldr	r0, [pc, #12]	; (800920c <_ZN2FC8ModuleSD4mainEv+0x424>)
 80091fe:	f003 fd7f 	bl	800cd00 <HAL_GPIO_WritePin>
			osDelay(5);			/* 10hz */
 8009202:	2005      	movs	r0, #5
 8009204:	f00f f800 	bl	8018208 <osDelay>
		}
 8009208:	e60c      	b.n	8008e24 <_ZN2FC8ModuleSD4mainEv+0x3c>
 800920a:	bf00      	nop
 800920c:	40020400 	.word	0x40020400

08009210 <Health_StartTask>:
	HAL_UART_Transmit(&huart3, p, len, 10);
	return len;
}


void Health_StartTask(void *argument){
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	ModuleHealth::main();
 8009218:	f7ff fda8 	bl	8008d6c <_ZN2FC12ModuleHealth4mainEv>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <Debug_StartTask>:
void Debug_StartTask(void *argument){
 8009224:	b580      	push	{r7, lr}
 8009226:	b08a      	sub	sp, #40	; 0x28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	struct Health health;
	while(1){
		msgBus.getHealth(&health);
 800922c:	f107 0308 	add.w	r3, r7, #8
 8009230:	4619      	mov	r1, r3
 8009232:	480f      	ldr	r0, [pc, #60]	; (8009270 <Debug_StartTask+0x4c>)
 8009234:	f7ff fadf 	bl	80087f6 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>
		hzAccel = health.accel;
 8009238:	8a3a      	ldrh	r2, [r7, #16]
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <Debug_StartTask+0x50>)
 800923c:	801a      	strh	r2, [r3, #0]
		hzBaro = health.baro;
 800923e:	8afa      	ldrh	r2, [r7, #22]
 8009240:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <Debug_StartTask+0x54>)
 8009242:	801a      	strh	r2, [r3, #0]
		hzGyro = health.gyro;
 8009244:	8a7a      	ldrh	r2, [r7, #18]
 8009246:	4b0d      	ldr	r3, [pc, #52]	; (800927c <Debug_StartTask+0x58>)
 8009248:	801a      	strh	r2, [r3, #0]
		hzGPS = health.gps;
 800924a:	8b3a      	ldrh	r2, [r7, #24]
 800924c:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <Debug_StartTask+0x5c>)
 800924e:	801a      	strh	r2, [r3, #0]
		hzMag = health.mag;
 8009250:	8aba      	ldrh	r2, [r7, #20]
 8009252:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <Debug_StartTask+0x60>)
 8009254:	801a      	strh	r2, [r3, #0]
		hzAHRS = health.ahrs;
 8009256:	8bba      	ldrh	r2, [r7, #28]
 8009258:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <Debug_StartTask+0x64>)
 800925a:	801a      	strh	r2, [r3, #0]
		hzRC = health.rc;
 800925c:	8b7a      	ldrh	r2, [r7, #26]
 800925e:	4b0b      	ldr	r3, [pc, #44]	; (800928c <Debug_StartTask+0x68>)
 8009260:	801a      	strh	r2, [r3, #0]
		hzAtti = health.attitudeController;
 8009262:	8c3a      	ldrh	r2, [r7, #32]
 8009264:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <Debug_StartTask+0x6c>)
 8009266:	801a      	strh	r2, [r3, #0]
		osDelay(100);
 8009268:	2064      	movs	r0, #100	; 0x64
 800926a:	f00e ffcd 	bl	8018208 <osDelay>
		msgBus.getHealth(&health);
 800926e:	e7dd      	b.n	800922c <Debug_StartTask+0x8>
 8009270:	200005a0 	.word	0x200005a0
 8009274:	20000b48 	.word	0x20000b48
 8009278:	20000b4a 	.word	0x20000b4a
 800927c:	20000b4c 	.word	0x20000b4c
 8009280:	20000b4e 	.word	0x20000b4e
 8009284:	20000b50 	.word	0x20000b50
 8009288:	20000b52 	.word	0x20000b52
 800928c:	20000b54 	.word	0x20000b54
 8009290:	20000b56 	.word	0x20000b56

08009294 <MPU9250_StartTask>:
	}
}

void MPU9250_StartTask(void *argument){
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = osKernelGetTickCount();
 800929c:	f00e fdf0 	bl	8017e80 <osKernelGetTickCount>
 80092a0:	60f8      	str	r0, [r7, #12]
	while(1){
		tick += 5;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3305      	adds	r3, #5
 80092a6:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick);
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f00e ffdb 	bl	8018264 <osDelayUntil>
		MPU9250_updateDMA();
 80092ae:	f7f8 fa65 	bl	800177c <MPU9250_updateDMA>
		tick += 5;
 80092b2:	e7f6      	b.n	80092a2 <MPU9250_StartTask+0xe>

080092b4 <BME280_StartTask>:
//		osDelay(5);				/* 200hz */
	}
}
void BME280_StartTask(void *argument){
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 80092bc:	f7f9 f984 	bl	80025c8 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 80092c0:	2014      	movs	r0, #20
 80092c2:	f00e ffa1 	bl	8018208 <osDelay>
		BME280_readIT();
 80092c6:	e7f9      	b.n	80092bc <BME280_StartTask+0x8>

080092c8 <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	while(1){
		IST8310_updataIT();
 80092d0:	f7f8 f880 	bl	80013d4 <IST8310_updataIT>
		osDelay(10); 			/* 100hz */
 80092d4:	200a      	movs	r0, #10
 80092d6:	f00e ff97 	bl	8018208 <osDelay>
		IST8310_updataIT();
 80092da:	e7f9      	b.n	80092d0 <IST8310_StartTask+0x8>

080092dc <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	ModuleSD::main();
 80092e4:	f7ff fd80 	bl	8008de8 <_ZN2FC8ModuleSD4mainEv>
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <AHRS_StartTask>:

void AHRS_StartTask(void *argument){
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	ModuleAHRS::main();
 80092f8:	f7ff fb32 	bl	8008960 <_ZN2FC10ModuleAHRS4mainEv>
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <Commander_StartTask>:

void Commander_StartTask(void *argument){
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	ModuleCommander::main();
 800930c:	f7fe fce8 	bl	8007ce0 <_ZN2FC15ModuleCommander4mainEv>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <Buzzer_StartTask>:

void Buzzer_StartTask(void *argument){
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
	ModuleBuzzer::main();
 8009320:	f7fe fb8a 	bl	8007a38 <_ZN2FC12ModuleBuzzer4mainEv>
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <AC_StartTask>:

void AC_StartTask(void *argument){
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
	ModuleAttitudeController::main();
 8009334:	f7ff fac6 	bl	80088c4 <_ZN2FC24ModuleAttitudeController4mainEv>
//	while(1){
//		osDelay(100);
//	}
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <cppMain>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void cppMain(){
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 8009346:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <cppMain+0x60>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6898      	ldr	r0, [r3, #8]
 800934c:	2300      	movs	r3, #0
 800934e:	2202      	movs	r2, #2
 8009350:	2100      	movs	r1, #0
 8009352:	f015 fa0f 	bl	801e774 <setvbuf>
    printf("test\r\n");
 8009356:	4813      	ldr	r0, [pc, #76]	; (80093a4 <cppMain+0x64>)
 8009358:	f015 fa04 	bl	801e764 <puts>



    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 800935c:	4812      	ldr	r0, [pc, #72]	; (80093a8 <cppMain+0x68>)
 800935e:	f008 fd74 	bl	8011e4a <HAL_TIM_Base_Start_IT>

	MPU9250(&hi2c1);
 8009362:	4812      	ldr	r0, [pc, #72]	; (80093ac <cppMain+0x6c>)
 8009364:	f7f8 f97a 	bl	800165c <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 8009368:	2300      	movs	r3, #0
 800936a:	9302      	str	r3, [sp, #8]
 800936c:	2304      	movs	r3, #4
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	2303      	movs	r3, #3
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	2301      	movs	r3, #1
 8009376:	2201      	movs	r2, #1
 8009378:	2103      	movs	r1, #3
 800937a:	480d      	ldr	r0, [pc, #52]	; (80093b0 <cppMain+0x70>)
 800937c:	f7f9 f836 	bl	80023ec <BME280_init>

	IST8310(&hi2c2);
 8009380:	480b      	ldr	r0, [pc, #44]	; (80093b0 <cppMain+0x70>)
 8009382:	f7f8 f813 	bl	80013ac <IST8310>

#ifdef USE_GPS
	/*
	 *  GPS using DMA circular mode
	 */
    TM_GPS_Init(&huart8);
 8009386:	480b      	ldr	r0, [pc, #44]	; (80093b4 <cppMain+0x74>)
 8009388:	f7f9 fbd2 	bl	8002b30 <TM_GPS_Init>
#endif

#ifdef USE_SBUS
	SBUS_init(&huart7);
 800938c:	480a      	ldr	r0, [pc, #40]	; (80093b8 <cppMain+0x78>)
 800938e:	f7fe fe65 	bl	800805c <SBUS_init>
#endif

	//	Lidar1D_init(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
	//	Lidar1D_run();

    std::printf("boot complete\r\n");
 8009392:	480a      	ldr	r0, [pc, #40]	; (80093bc <cppMain+0x7c>)
 8009394:	f015 f9e6 	bl	801e764 <puts>
}
 8009398:	bf00      	nop
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	200000e0 	.word	0x200000e0
 80093a4:	08021f24 	.word	0x08021f24
 80093a8:	2000cb28 	.word	0x2000cb28
 80093ac:	2000c6c4 	.word	0x2000c6c4
 80093b0:	2000c718 	.word	0x2000c718
 80093b4:	2000cce8 	.word	0x2000cce8
 80093b8:	2000cba8 	.word	0x2000cba8
 80093bc:	08021f2c 	.word	0x08021f2c

080093c0 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
//#ifdef USE_MPU9250
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	4b3a      	ldr	r3, [pc, #232]	; (80094b8 <HAL_I2C_MemRxCpltCallback+0xf8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d12b      	bne.n	800942e <HAL_I2C_MemRxCpltCallback+0x6e>
		switch(MPU9250_i2cRxCpltCallback()){
 80093d6:	f7f8 f9f1 	bl	80017bc <MPU9250_i2cRxCpltCallback>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d001      	beq.n	80093e4 <HAL_I2C_MemRxCpltCallback+0x24>
 80093e0:	2b02      	cmp	r3, #2
			sensorAccel.setAccel(mpu9250.accel[0], mpu9250.accel[1], mpu9250.accel[2]);
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
			break;
		case 2:
	//		sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
			break;
 80093e2:	e024      	b.n	800942e <HAL_I2C_MemRxCpltCallback+0x6e>
			sensorAccel.setAccel(mpu9250.accel[0], mpu9250.accel[1], mpu9250.accel[2]);
 80093e4:	4b34      	ldr	r3, [pc, #208]	; (80094b8 <HAL_I2C_MemRxCpltCallback+0xf8>)
 80093e6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80093ea:	4b33      	ldr	r3, [pc, #204]	; (80094b8 <HAL_I2C_MemRxCpltCallback+0xf8>)
 80093ec:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80093f0:	4b31      	ldr	r3, [pc, #196]	; (80094b8 <HAL_I2C_MemRxCpltCallback+0xf8>)
 80093f2:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80093f6:	eeb0 1a66 	vmov.f32	s2, s13
 80093fa:	eef0 0a47 	vmov.f32	s1, s14
 80093fe:	eeb0 0a67 	vmov.f32	s0, s15
 8009402:	482e      	ldr	r0, [pc, #184]	; (80094bc <HAL_I2C_MemRxCpltCallback+0xfc>)
 8009404:	f7ff fac2 	bl	800898c <_ZN2FC11SensorAccel8setAccelEfff>
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8009408:	4b2b      	ldr	r3, [pc, #172]	; (80094b8 <HAL_I2C_MemRxCpltCallback+0xf8>)
 800940a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800940e:	4b2a      	ldr	r3, [pc, #168]	; (80094b8 <HAL_I2C_MemRxCpltCallback+0xf8>)
 8009410:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8009414:	4b28      	ldr	r3, [pc, #160]	; (80094b8 <HAL_I2C_MemRxCpltCallback+0xf8>)
 8009416:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800941a:	eeb0 1a66 	vmov.f32	s2, s13
 800941e:	eef0 0a47 	vmov.f32	s1, s14
 8009422:	eeb0 0a67 	vmov.f32	s0, s15
 8009426:	4826      	ldr	r0, [pc, #152]	; (80094c0 <HAL_I2C_MemRxCpltCallback+0x100>)
 8009428:	f7ff faf6 	bl	8008a18 <_ZN2FC10SensorGyro7setGyroEfff>
			break;
 800942c:	bf00      	nop
		}
	}
//#endif

//#ifdef USE_IST8310
	if(hi2c->Instance == ist8310.hi2c->Instance){
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4b24      	ldr	r3, [pc, #144]	; (80094c4 <HAL_I2C_MemRxCpltCallback+0x104>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d11b      	bne.n	8009474 <HAL_I2C_MemRxCpltCallback+0xb4>
		if(IST8310_i2cRxCpltCallback())
 800943c:	f7f7 ffec 	bl	8001418 <IST8310_i2cRxCpltCallback>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	bf14      	ite	ne
 8009446:	2301      	movne	r3, #1
 8009448:	2300      	moveq	r3, #0
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d011      	beq.n	8009474 <HAL_I2C_MemRxCpltCallback+0xb4>
			sensorMag.setMag(ist8310.raw[0], ist8310.raw[1], ist8310.raw[2]);
 8009450:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <HAL_I2C_MemRxCpltCallback+0x104>)
 8009452:	edd3 7a04 	vldr	s15, [r3, #16]
 8009456:	4b1b      	ldr	r3, [pc, #108]	; (80094c4 <HAL_I2C_MemRxCpltCallback+0x104>)
 8009458:	ed93 7a05 	vldr	s14, [r3, #20]
 800945c:	4b19      	ldr	r3, [pc, #100]	; (80094c4 <HAL_I2C_MemRxCpltCallback+0x104>)
 800945e:	edd3 6a06 	vldr	s13, [r3, #24]
 8009462:	eeb0 1a66 	vmov.f32	s2, s13
 8009466:	eef0 0a47 	vmov.f32	s1, s14
 800946a:	eeb0 0a67 	vmov.f32	s0, s15
 800946e:	4816      	ldr	r0, [pc, #88]	; (80094c8 <HAL_I2C_MemRxCpltCallback+0x108>)
 8009470:	f7ff fb18 	bl	8008aa4 <_ZN2FC9SensorMag6setMagEfff>
	}
//#endif

//#ifdef USE_BME280
	if(hi2c->Instance == bme280.hi2c->Instance){
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	4b14      	ldr	r3, [pc, #80]	; (80094cc <HAL_I2C_MemRxCpltCallback+0x10c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d116      	bne.n	80094b0 <HAL_I2C_MemRxCpltCallback+0xf0>
		if(BME280_i2cRxCpltCallback())
 8009482:	f7f9 f8bf 	bl	8002604 <BME280_i2cRxCpltCallback>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	bf14      	ite	ne
 800948c:	2301      	movne	r3, #1
 800948e:	2300      	moveq	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00c      	beq.n	80094b0 <HAL_I2C_MemRxCpltCallback+0xf0>
			sensorBaro.setBaro(bme280.P, bme280.T);
 8009496:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <HAL_I2C_MemRxCpltCallback+0x10c>)
 8009498:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <HAL_I2C_MemRxCpltCallback+0x10c>)
 800949e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80094a2:	eef0 0a47 	vmov.f32	s1, s14
 80094a6:	eeb0 0a67 	vmov.f32	s0, s15
 80094aa:	4809      	ldr	r0, [pc, #36]	; (80094d0 <HAL_I2C_MemRxCpltCallback+0x110>)
 80094ac:	f7ff fbda 	bl	8008c64 <_ZN2FC10SensorBaro7setBaroEff>
	}
//#endif
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	200006d8 	.word	0x200006d8
 80094bc:	20000aa8 	.word	0x20000aa8
 80094c0:	20000ac0 	.word	0x20000ac0
 80094c4:	20000a50 	.word	0x20000a50
 80094c8:	20000a78 	.word	0x20000a78
 80094cc:	2000032c 	.word	0x2000032c
 80094d0:	20000ad8 	.word	0x20000ad8

080094d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d8:	ed2d 8b06 	vpush	{d8-d10}
 80094dc:	b088      	sub	sp, #32
 80094de:	af06      	add	r7, sp, #24
 80094e0:	6078      	str	r0, [r7, #4]
#ifdef USE_SBUS
	if(huart->Instance == sbus.huart->Instance){
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	4b47      	ldr	r3, [pc, #284]	; (8009604 <HAL_UART_RxCpltCallback+0x130>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d132      	bne.n	8009556 <HAL_UART_RxCpltCallback+0x82>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 80094f0:	f7fe fff8 	bl	80084e4 <SBUS_uartRxCpltCallback>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	bf0c      	ite	eq
 80094fa:	2301      	moveq	r3, #1
 80094fc:	2300      	movne	r3, #0
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d028      	beq.n	8009556 <HAL_UART_RxCpltCallback+0x82>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8009504:	2002      	movs	r0, #2
 8009506:	f7ff f86b 	bl	80085e0 <SBUS_getChannel>
 800950a:	4603      	mov	r3, r0
 800950c:	461d      	mov	r5, r3
 800950e:	2003      	movs	r0, #3
 8009510:	f7ff f866 	bl	80085e0 <SBUS_getChannel>
 8009514:	4603      	mov	r3, r0
 8009516:	461e      	mov	r6, r3
 8009518:	2003      	movs	r0, #3
 800951a:	f7ff f861 	bl	80085e0 <SBUS_getChannel>
 800951e:	4603      	mov	r3, r0
 8009520:	4698      	mov	r8, r3
 8009522:	2001      	movs	r0, #1
 8009524:	f7ff f85c 	bl	80085e0 <SBUS_getChannel>
 8009528:	4603      	mov	r3, r0
 800952a:	461c      	mov	r4, r3
 800952c:	200b      	movs	r0, #11
 800952e:	f7ff f857 	bl	80085e0 <SBUS_getChannel>
 8009532:	4603      	mov	r3, r0
 8009534:	461a      	mov	r2, r3
 8009536:	2300      	movs	r3, #0
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	2300      	movs	r3, #0
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	2300      	movs	r3, #0
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	2300      	movs	r3, #0
 8009544:	9302      	str	r3, [sp, #8]
 8009546:	9201      	str	r2, [sp, #4]
 8009548:	9400      	str	r4, [sp, #0]
 800954a:	4643      	mov	r3, r8
 800954c:	4632      	mov	r2, r6
 800954e:	4629      	mov	r1, r5
 8009550:	482d      	ldr	r0, [pc, #180]	; (8009608 <HAL_UART_RxCpltCallback+0x134>)
 8009552:	f7ff fbaf 	bl	8008cb4 <_ZN2FC2RC5setRCEttttttttt>
		}
	}
#endif

#ifdef USE_GPS
	if(huart->Instance == UART8){
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a2c      	ldr	r2, [pc, #176]	; (800960c <HAL_UART_RxCpltCallback+0x138>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d149      	bne.n	80095f4 <HAL_UART_RxCpltCallback+0x120>
		if(TM_GPS_Update() == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 8009560:	f7f9 fb80 	bl	8002c64 <TM_GPS_Update>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <HAL_UART_RxCpltCallback+0xa2>
 800956a:	4b29      	ldr	r3, [pc, #164]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 800956c:	7d5b      	ldrb	r3, [r3, #21]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <HAL_UART_RxCpltCallback+0xa2>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <HAL_UART_RxCpltCallback+0xa4>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d03b      	beq.n	80095f4 <HAL_UART_RxCpltCallback+0x120>
			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 800957c:	4b24      	ldr	r3, [pc, #144]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 800957e:	ed93 8b00 	vldr	d8, [r3]
 8009582:	4b23      	ldr	r3, [pc, #140]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 8009584:	ed93 9b02 	vldr	d9, [r3, #8]
 8009588:	4b21      	ldr	r3, [pc, #132]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 800958a:	ed93 aa04 	vldr	s20, [r3, #16]
 800958e:	4b20      	ldr	r3, [pc, #128]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 8009590:	edd3 7a08 	vldr	s15, [r3, #32]
 8009594:	2001      	movs	r0, #1
 8009596:	eeb0 0a67 	vmov.f32	s0, s15
 800959a:	f7f9 fb97 	bl	8002ccc <TM_GPS_ConvertSpeed>
 800959e:	eeb0 6a40 	vmov.f32	s12, s0
 80095a2:	4b1b      	ldr	r3, [pc, #108]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 80095a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80095a8:	4b19      	ldr	r3, [pc, #100]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 80095aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80095ae:	4b18      	ldr	r3, [pc, #96]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 80095b0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80095b4:	4b16      	ldr	r3, [pc, #88]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 80095b6:	7d19      	ldrb	r1, [r3, #20]
 80095b8:	4b15      	ldr	r3, [pc, #84]	; (8009610 <HAL_UART_RxCpltCallback+0x13c>)
 80095ba:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80095be:	f04f 0300 	mov.w	r3, #0
 80095c2:	f04f 0400 	mov.w	r4, #0
 80095c6:	e9cd 3400 	strd	r3, r4, [sp]
 80095ca:	eeb0 4a66 	vmov.f32	s8, s13
 80095ce:	eef0 3a47 	vmov.f32	s7, s14
 80095d2:	eeb0 3a67 	vmov.f32	s6, s15
 80095d6:	eef0 2a46 	vmov.f32	s5, s12
 80095da:	eeb0 2a4a 	vmov.f32	s4, s20
 80095de:	eeb0 1a49 	vmov.f32	s2, s18
 80095e2:	eef0 1a69 	vmov.f32	s3, s19
 80095e6:	eeb0 0a48 	vmov.f32	s0, s16
 80095ea:	eef0 0a68 	vmov.f32	s1, s17
 80095ee:	4809      	ldr	r0, [pc, #36]	; (8009614 <HAL_UART_RxCpltCallback+0x140>)
 80095f0:	f7ff fa9e 	bl	8008b30 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
#endif

	if(huart->Instance == USART2){
		// telemetry
	}
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	ecbd 8b06 	vpop	{d8-d10}
 80095fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009602:	bf00      	nop
 8009604:	20000760 	.word	0x20000760
 8009608:	20000b30 	.word	0x20000b30
 800960c:	40007c00 	.word	0x40007c00
 8009610:	200007f8 	.word	0x200007f8
 8009614:	20000ae8 	.word	0x20000ae8

08009618 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7f7 fff1 	bl	8001608 <Lidar1D_CaptureCallback>
}
 8009626:	bf00      	nop
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>:
template<typename T>
class Freq {
public:
	static uint16_t freqCnt;

	static uint16_t checkFreq(){
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8009636:	4b06      	ldr	r3, [pc, #24]	; (8009650 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 800963c:	4b04      	ldr	r3, [pc, #16]	; (8009650 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 800963e:	2200      	movs	r2, #0
 8009640:	801a      	strh	r2, [r3, #0]
		return res;
 8009642:	88fb      	ldrh	r3, [r7, #6]
	}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	20000b5a 	.word	0x20000b5a

08009654 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 800965a:	4b06      	ldr	r3, [pc, #24]	; (8009674 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8009660:	4b04      	ldr	r3, [pc, #16]	; (8009674 <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8009662:	2200      	movs	r2, #0
 8009664:	801a      	strh	r2, [r3, #0]
		return res;
 8009666:	88fb      	ldrh	r3, [r7, #6]
	}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	20000b5c 	.word	0x20000b5c

08009678 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8009684:	4b04      	ldr	r3, [pc, #16]	; (8009698 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8009686:	2200      	movs	r2, #0
 8009688:	801a      	strh	r2, [r3, #0]
		return res;
 800968a:	88fb      	ldrh	r3, [r7, #6]
	}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	20000b5e 	.word	0x20000b5e

0800969c <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80096a2:	4b06      	ldr	r3, [pc, #24]	; (80096bc <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80096a8:	4b04      	ldr	r3, [pc, #16]	; (80096bc <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	801a      	strh	r2, [r3, #0]
		return res;
 80096ae:	88fb      	ldrh	r3, [r7, #6]
	}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	20000b62 	.word	0x20000b62

080096c0 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80096cc:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	801a      	strh	r2, [r3, #0]
		return res;
 80096d2:	88fb      	ldrh	r3, [r7, #6]
	}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20000b60 	.word	0x20000b60

080096e4 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80096ea:	4b06      	ldr	r3, [pc, #24]	; (8009704 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80096f0:	4b04      	ldr	r3, [pc, #16]	; (8009704 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	801a      	strh	r2, [r3, #0]
		return res;
 80096f6:	88fb      	ldrh	r3, [r7, #6]
	}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	20000b64 	.word	0x20000b64

08009708 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 800970e:	4b06      	ldr	r3, [pc, #24]	; (8009728 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8009716:	2200      	movs	r2, #0
 8009718:	801a      	strh	r2, [r3, #0]
		return res;
 800971a:	88fb      	ldrh	r3, [r7, #6]
	}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	200004d4 	.word	0x200004d4

0800972c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8009732:	4b06      	ldr	r3, [pc, #24]	; (800974c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 800973a:	2200      	movs	r2, #0
 800973c:	801a      	strh	r2, [r3, #0]
		return res;
 800973e:	88fb      	ldrh	r3, [r7, #6]
	}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	20000b58 	.word	0x20000b58

08009750 <_Z41__static_initialization_and_destruction_0ii>:
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <_GLOBAL__sub_I_mpu9250>:
 8009766:	b580      	push	{r7, lr}
 8009768:	af00      	add	r7, sp, #0
 800976a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800976e:	2001      	movs	r0, #1
 8009770:	f7ff ffee 	bl	8009750 <_Z41__static_initialization_and_destruction_0ii>
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800977e:	463b      	mov	r3, r7
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	605a      	str	r2, [r3, #4]
 8009786:	609a      	str	r2, [r3, #8]
 8009788:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800978a:	4b21      	ldr	r3, [pc, #132]	; (8009810 <MX_ADC1_Init+0x98>)
 800978c:	4a21      	ldr	r2, [pc, #132]	; (8009814 <MX_ADC1_Init+0x9c>)
 800978e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009790:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <MX_ADC1_Init+0x98>)
 8009792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <MX_ADC1_Init+0x98>)
 800979a:	2200      	movs	r2, #0
 800979c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800979e:	4b1c      	ldr	r3, [pc, #112]	; (8009810 <MX_ADC1_Init+0x98>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80097a4:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <MX_ADC1_Init+0x98>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80097aa:	4b19      	ldr	r3, [pc, #100]	; (8009810 <MX_ADC1_Init+0x98>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80097b2:	4b17      	ldr	r3, [pc, #92]	; (8009810 <MX_ADC1_Init+0x98>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80097b8:	4b15      	ldr	r3, [pc, #84]	; (8009810 <MX_ADC1_Init+0x98>)
 80097ba:	4a17      	ldr	r2, [pc, #92]	; (8009818 <MX_ADC1_Init+0xa0>)
 80097bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80097be:	4b14      	ldr	r3, [pc, #80]	; (8009810 <MX_ADC1_Init+0x98>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80097c4:	4b12      	ldr	r3, [pc, #72]	; (8009810 <MX_ADC1_Init+0x98>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80097ca:	4b11      	ldr	r3, [pc, #68]	; (8009810 <MX_ADC1_Init+0x98>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80097d2:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <MX_ADC1_Init+0x98>)
 80097d4:	2201      	movs	r2, #1
 80097d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80097d8:	480d      	ldr	r0, [pc, #52]	; (8009810 <MX_ADC1_Init+0x98>)
 80097da:	f002 f9d1 	bl	800bb80 <HAL_ADC_Init>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80097e4:	f000 fcba 	bl	800a15c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80097e8:	230c      	movs	r3, #12
 80097ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80097ec:	2301      	movs	r3, #1
 80097ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80097f4:	463b      	mov	r3, r7
 80097f6:	4619      	mov	r1, r3
 80097f8:	4805      	ldr	r0, [pc, #20]	; (8009810 <MX_ADC1_Init+0x98>)
 80097fa:	f002 fa05 	bl	800bc08 <HAL_ADC_ConfigChannel>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009804:	f000 fcaa 	bl	800a15c <Error_Handler>
  }

}
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	200054b8 	.word	0x200054b8
 8009814:	40012000 	.word	0x40012000
 8009818:	0f000001 	.word	0x0f000001

0800981c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	; 0x28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	605a      	str	r2, [r3, #4]
 800982e:	609a      	str	r2, [r3, #8]
 8009830:	60da      	str	r2, [r3, #12]
 8009832:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a17      	ldr	r2, [pc, #92]	; (8009898 <HAL_ADC_MspInit+0x7c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d127      	bne.n	800988e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800983e:	2300      	movs	r3, #0
 8009840:	613b      	str	r3, [r7, #16]
 8009842:	4b16      	ldr	r3, [pc, #88]	; (800989c <HAL_ADC_MspInit+0x80>)
 8009844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009846:	4a15      	ldr	r2, [pc, #84]	; (800989c <HAL_ADC_MspInit+0x80>)
 8009848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800984c:	6453      	str	r3, [r2, #68]	; 0x44
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <HAL_ADC_MspInit+0x80>)
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009856:	613b      	str	r3, [r7, #16]
 8009858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	4b0f      	ldr	r3, [pc, #60]	; (800989c <HAL_ADC_MspInit+0x80>)
 8009860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009862:	4a0e      	ldr	r2, [pc, #56]	; (800989c <HAL_ADC_MspInit+0x80>)
 8009864:	f043 0304 	orr.w	r3, r3, #4
 8009868:	6313      	str	r3, [r2, #48]	; 0x30
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <HAL_ADC_MspInit+0x80>)
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	f003 0304 	and.w	r3, r3, #4
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009876:	230c      	movs	r3, #12
 8009878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800987a:	2303      	movs	r3, #3
 800987c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009882:	f107 0314 	add.w	r3, r7, #20
 8009886:	4619      	mov	r1, r3
 8009888:	4805      	ldr	r0, [pc, #20]	; (80098a0 <HAL_ADC_MspInit+0x84>)
 800988a:	f003 f877 	bl	800c97c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800988e:	bf00      	nop
 8009890:	3728      	adds	r7, #40	; 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	40012000 	.word	0x40012000
 800989c:	40023800 	.word	0x40023800
 80098a0:	40020800 	.word	0x40020800

080098a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80098aa:	2300      	movs	r3, #0
 80098ac:	607b      	str	r3, [r7, #4]
 80098ae:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <MX_DMA_Init+0x4c>)
 80098b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b2:	4a0f      	ldr	r2, [pc, #60]	; (80098f0 <MX_DMA_Init+0x4c>)
 80098b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098b8:	6313      	str	r3, [r2, #48]	; 0x30
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <MX_DMA_Init+0x4c>)
 80098bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098c2:	607b      	str	r3, [r7, #4]
 80098c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80098c6:	2300      	movs	r3, #0
 80098c8:	603b      	str	r3, [r7, #0]
 80098ca:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <MX_DMA_Init+0x4c>)
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	4a08      	ldr	r2, [pc, #32]	; (80098f0 <MX_DMA_Init+0x4c>)
 80098d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80098d4:	6313      	str	r3, [r2, #48]	; 0x30
 80098d6:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <MX_DMA_Init+0x4c>)
 80098d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	683b      	ldr	r3, [r7, #0]

}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	40023800 	.word	0x40023800

080098f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80098f8:	4a2c      	ldr	r2, [pc, #176]	; (80099ac <MX_FREERTOS_Init+0xb8>)
 80098fa:	2100      	movs	r1, #0
 80098fc:	482c      	ldr	r0, [pc, #176]	; (80099b0 <MX_FREERTOS_Init+0xbc>)
 80098fe:	f00e fae7 	bl	8017ed0 <osThreadNew>
 8009902:	4602      	mov	r2, r0
 8009904:	4b2b      	ldr	r3, [pc, #172]	; (80099b4 <MX_FREERTOS_Init+0xc0>)
 8009906:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 8009908:	4a2b      	ldr	r2, [pc, #172]	; (80099b8 <MX_FREERTOS_Init+0xc4>)
 800990a:	2100      	movs	r1, #0
 800990c:	482b      	ldr	r0, [pc, #172]	; (80099bc <MX_FREERTOS_Init+0xc8>)
 800990e:	f00e fadf 	bl	8017ed0 <osThreadNew>
 8009912:	4602      	mov	r2, r0
 8009914:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <MX_FREERTOS_Init+0xcc>)
 8009916:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 8009918:	4a2a      	ldr	r2, [pc, #168]	; (80099c4 <MX_FREERTOS_Init+0xd0>)
 800991a:	2100      	movs	r1, #0
 800991c:	482a      	ldr	r0, [pc, #168]	; (80099c8 <MX_FREERTOS_Init+0xd4>)
 800991e:	f00e fad7 	bl	8017ed0 <osThreadNew>
 8009922:	4602      	mov	r2, r0
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <MX_FREERTOS_Init+0xd8>)
 8009926:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 8009928:	4a29      	ldr	r2, [pc, #164]	; (80099d0 <MX_FREERTOS_Init+0xdc>)
 800992a:	2100      	movs	r1, #0
 800992c:	4829      	ldr	r0, [pc, #164]	; (80099d4 <MX_FREERTOS_Init+0xe0>)
 800992e:	f00e facf 	bl	8017ed0 <osThreadNew>
 8009932:	4602      	mov	r2, r0
 8009934:	4b28      	ldr	r3, [pc, #160]	; (80099d8 <MX_FREERTOS_Init+0xe4>)
 8009936:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 8009938:	4a28      	ldr	r2, [pc, #160]	; (80099dc <MX_FREERTOS_Init+0xe8>)
 800993a:	2100      	movs	r1, #0
 800993c:	4828      	ldr	r0, [pc, #160]	; (80099e0 <MX_FREERTOS_Init+0xec>)
 800993e:	f00e fac7 	bl	8017ed0 <osThreadNew>
 8009942:	4602      	mov	r2, r0
 8009944:	4b27      	ldr	r3, [pc, #156]	; (80099e4 <MX_FREERTOS_Init+0xf0>)
 8009946:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 8009948:	4a27      	ldr	r2, [pc, #156]	; (80099e8 <MX_FREERTOS_Init+0xf4>)
 800994a:	2100      	movs	r1, #0
 800994c:	4827      	ldr	r0, [pc, #156]	; (80099ec <MX_FREERTOS_Init+0xf8>)
 800994e:	f00e fabf 	bl	8017ed0 <osThreadNew>
 8009952:	4602      	mov	r2, r0
 8009954:	4b26      	ldr	r3, [pc, #152]	; (80099f0 <MX_FREERTOS_Init+0xfc>)
 8009956:	601a      	str	r2, [r3, #0]

  /* creation of Commander_Task */
  Commander_TaskHandle = osThreadNew(Commander_StartTask, NULL, &Commander_Task_attributes);
 8009958:	4a26      	ldr	r2, [pc, #152]	; (80099f4 <MX_FREERTOS_Init+0x100>)
 800995a:	2100      	movs	r1, #0
 800995c:	4826      	ldr	r0, [pc, #152]	; (80099f8 <MX_FREERTOS_Init+0x104>)
 800995e:	f00e fab7 	bl	8017ed0 <osThreadNew>
 8009962:	4602      	mov	r2, r0
 8009964:	4b25      	ldr	r3, [pc, #148]	; (80099fc <MX_FREERTOS_Init+0x108>)
 8009966:	601a      	str	r2, [r3, #0]

  /* creation of Debug_myTask */
  Debug_myTaskHandle = osThreadNew(Debug_StartTask, NULL, &Debug_myTask_attributes);
 8009968:	4a25      	ldr	r2, [pc, #148]	; (8009a00 <MX_FREERTOS_Init+0x10c>)
 800996a:	2100      	movs	r1, #0
 800996c:	4825      	ldr	r0, [pc, #148]	; (8009a04 <MX_FREERTOS_Init+0x110>)
 800996e:	f00e faaf 	bl	8017ed0 <osThreadNew>
 8009972:	4602      	mov	r2, r0
 8009974:	4b24      	ldr	r3, [pc, #144]	; (8009a08 <MX_FREERTOS_Init+0x114>)
 8009976:	601a      	str	r2, [r3, #0]

  /* creation of Buzzer_Task */
  Buzzer_TaskHandle = osThreadNew(Buzzer_StartTask, NULL, &Buzzer_Task_attributes);
 8009978:	4a24      	ldr	r2, [pc, #144]	; (8009a0c <MX_FREERTOS_Init+0x118>)
 800997a:	2100      	movs	r1, #0
 800997c:	4824      	ldr	r0, [pc, #144]	; (8009a10 <MX_FREERTOS_Init+0x11c>)
 800997e:	f00e faa7 	bl	8017ed0 <osThreadNew>
 8009982:	4602      	mov	r2, r0
 8009984:	4b23      	ldr	r3, [pc, #140]	; (8009a14 <MX_FREERTOS_Init+0x120>)
 8009986:	601a      	str	r2, [r3, #0]

  /* creation of Health_Task */
  Health_TaskHandle = osThreadNew(Health_StartTask, NULL, &Health_Task_attributes);
 8009988:	4a23      	ldr	r2, [pc, #140]	; (8009a18 <MX_FREERTOS_Init+0x124>)
 800998a:	2100      	movs	r1, #0
 800998c:	4823      	ldr	r0, [pc, #140]	; (8009a1c <MX_FREERTOS_Init+0x128>)
 800998e:	f00e fa9f 	bl	8017ed0 <osThreadNew>
 8009992:	4602      	mov	r2, r0
 8009994:	4b22      	ldr	r3, [pc, #136]	; (8009a20 <MX_FREERTOS_Init+0x12c>)
 8009996:	601a      	str	r2, [r3, #0]

  /* creation of AC_Task */
  AC_TaskHandle = osThreadNew(AC_StartTask, NULL, &AC_Task_attributes);
 8009998:	4a22      	ldr	r2, [pc, #136]	; (8009a24 <MX_FREERTOS_Init+0x130>)
 800999a:	2100      	movs	r1, #0
 800999c:	4822      	ldr	r0, [pc, #136]	; (8009a28 <MX_FREERTOS_Init+0x134>)
 800999e:	f00e fa97 	bl	8017ed0 <osThreadNew>
 80099a2:	4602      	mov	r2, r0
 80099a4:	4b21      	ldr	r3, [pc, #132]	; (8009a2c <MX_FREERTOS_Init+0x138>)
 80099a6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80099a8:	bf00      	nop
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	0802252c 	.word	0x0802252c
 80099b0:	08009a31 	.word	0x08009a31
 80099b4:	20005500 	.word	0x20005500
 80099b8:	08022550 	.word	0x08022550
 80099bc:	08009295 	.word	0x08009295
 80099c0:	2000b53c 	.word	0x2000b53c
 80099c4:	08022574 	.word	0x08022574
 80099c8:	080092b5 	.word	0x080092b5
 80099cc:	2000be04 	.word	0x2000be04
 80099d0:	08022598 	.word	0x08022598
 80099d4:	080092c9 	.word	0x080092c9
 80099d8:	20005d04 	.word	0x20005d04
 80099dc:	080225bc 	.word	0x080225bc
 80099e0:	080092dd 	.word	0x080092dd
 80099e4:	2000ad0c 	.word	0x2000ad0c
 80099e8:	080225e0 	.word	0x080225e0
 80099ec:	080092f1 	.word	0x080092f1
 80099f0:	2000bda0 	.word	0x2000bda0
 80099f4:	08022604 	.word	0x08022604
 80099f8:	08009305 	.word	0x08009305
 80099fc:	2000af10 	.word	0x2000af10
 8009a00:	08022628 	.word	0x08022628
 8009a04:	08009225 	.word	0x08009225
 8009a08:	20005d08 	.word	0x20005d08
 8009a0c:	0802264c 	.word	0x0802264c
 8009a10:	08009319 	.word	0x08009319
 8009a14:	2000be00 	.word	0x2000be00
 8009a18:	08022670 	.word	0x08022670
 8009a1c:	08009211 	.word	0x08009211
 8009a20:	2000be64 	.word	0x2000be64
 8009a24:	08022694 	.word	0x08022694
 8009a28:	0800932d 	.word	0x0800932d
 8009a2c:	2000b540 	.word	0x2000b540

08009a30 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009a38:	2001      	movs	r0, #1
 8009a3a:	f00e fbe5 	bl	8018208 <osDelay>
 8009a3e:	e7fb      	b.n	8009a38 <StartDefaultTask+0x8>

08009a40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08e      	sub	sp, #56	; 0x38
 8009a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	605a      	str	r2, [r3, #4]
 8009a50:	609a      	str	r2, [r3, #8]
 8009a52:	60da      	str	r2, [r3, #12]
 8009a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a56:	2300      	movs	r3, #0
 8009a58:	623b      	str	r3, [r7, #32]
 8009a5a:	4b80      	ldr	r3, [pc, #512]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5e:	4a7f      	ldr	r2, [pc, #508]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a60:	f043 0310 	orr.w	r3, r3, #16
 8009a64:	6313      	str	r3, [r2, #48]	; 0x30
 8009a66:	4b7d      	ldr	r3, [pc, #500]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	623b      	str	r3, [r7, #32]
 8009a70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a72:	2300      	movs	r3, #0
 8009a74:	61fb      	str	r3, [r7, #28]
 8009a76:	4b79      	ldr	r3, [pc, #484]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7a:	4a78      	ldr	r2, [pc, #480]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a7c:	f043 0304 	orr.w	r3, r3, #4
 8009a80:	6313      	str	r3, [r2, #48]	; 0x30
 8009a82:	4b76      	ldr	r3, [pc, #472]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	61fb      	str	r3, [r7, #28]
 8009a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	4b72      	ldr	r3, [pc, #456]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a96:	4a71      	ldr	r2, [pc, #452]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009a98:	f043 0320 	orr.w	r3, r3, #32
 8009a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a9e:	4b6f      	ldr	r3, [pc, #444]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	61bb      	str	r3, [r7, #24]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009aaa:	2300      	movs	r3, #0
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	4b6b      	ldr	r3, [pc, #428]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab2:	4a6a      	ldr	r2, [pc, #424]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8009aba:	4b68      	ldr	r3, [pc, #416]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	613b      	str	r3, [r7, #16]
 8009aca:	4b64      	ldr	r3, [pc, #400]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ace:	4a63      	ldr	r2, [pc, #396]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009ad0:	f043 0301 	orr.w	r3, r3, #1
 8009ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ad6:	4b61      	ldr	r3, [pc, #388]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	4b5d      	ldr	r3, [pc, #372]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	4a5c      	ldr	r2, [pc, #368]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009aec:	f043 0302 	orr.w	r3, r3, #2
 8009af0:	6313      	str	r3, [r2, #48]	; 0x30
 8009af2:	4b5a      	ldr	r3, [pc, #360]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009afe:	2300      	movs	r3, #0
 8009b00:	60bb      	str	r3, [r7, #8]
 8009b02:	4b56      	ldr	r3, [pc, #344]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	4a55      	ldr	r2, [pc, #340]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b0e:	4b53      	ldr	r3, [pc, #332]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b16:	60bb      	str	r3, [r7, #8]
 8009b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	607b      	str	r3, [r7, #4]
 8009b1e:	4b4f      	ldr	r3, [pc, #316]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b22:	4a4e      	ldr	r2, [pc, #312]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009b24:	f043 0308 	orr.w	r3, r3, #8
 8009b28:	6313      	str	r3, [r2, #48]	; 0x30
 8009b2a:	4b4c      	ldr	r3, [pc, #304]	; (8009c5c <MX_GPIO_Init+0x21c>)
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	607b      	str	r3, [r7, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WINCH1_Pin|WINCH2_Pin, GPIO_PIN_RESET);
 8009b36:	2200      	movs	r2, #0
 8009b38:	210c      	movs	r1, #12
 8009b3a:	4849      	ldr	r0, [pc, #292]	; (8009c60 <MX_GPIO_Init+0x220>)
 8009b3c:	f003 f8e0 	bl	800cd00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|External_LEC_contrl_Pin
 8009b40:	2200      	movs	r2, #0
 8009b42:	f24f 011c 	movw	r1, #61468	; 0xf01c
 8009b46:	4847      	ldr	r0, [pc, #284]	; (8009c64 <MX_GPIO_Init+0x224>)
 8009b48:	f003 f8da 	bl	800cd00 <HAL_GPIO_WritePin>
                          |GPIO1_Pin|GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI1_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2189      	movs	r1, #137	; 0x89
 8009b50:	4845      	ldr	r0, [pc, #276]	; (8009c68 <MX_GPIO_Init+0x228>)
 8009b52:	f003 f8d5 	bl	800cd00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO4_Pin|GPIO5_Pin|USB_PowerSwitchOn_Pin|SPI1_RESET_Pin
 8009b56:	2200      	movs	r2, #0
 8009b58:	f246 0143 	movw	r1, #24643	; 0x6043
 8009b5c:	4843      	ldr	r0, [pc, #268]	; (8009c6c <MX_GPIO_Init+0x22c>)
 8009b5e:	f003 f8cf 	bl	800cd00 <HAL_GPIO_WritePin>
                          |SPI1_WAKE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WINCH1_Pin|WINCH2_Pin;
 8009b62:	230c      	movs	r3, #12
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b66:	2301      	movs	r3, #1
 8009b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b76:	4619      	mov	r1, r3
 8009b78:	4839      	ldr	r0, [pc, #228]	; (8009c60 <MX_GPIO_Init+0x220>)
 8009b7a:	f002 feff 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8009b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009b84:	4b3a      	ldr	r3, [pc, #232]	; (8009c70 <MX_GPIO_Init+0x230>)
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8009b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b90:	4619      	mov	r1, r3
 8009b92:	4838      	ldr	r0, [pc, #224]	; (8009c74 <MX_GPIO_Init+0x234>)
 8009b94:	f002 fef2 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|External_LEC_contrl_Pin
 8009b98:	f24f 031c 	movw	r3, #61468	; 0xf01c
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO1_Pin|GPIO2_Pin|GPIO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bae:	4619      	mov	r1, r3
 8009bb0:	482c      	ldr	r0, [pc, #176]	; (8009c64 <MX_GPIO_Init+0x224>)
 8009bb2:	f002 fee3 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCB_SD_DETECT_Pin;
 8009bb6:	2320      	movs	r3, #32
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PCB_SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8009bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	482a      	ldr	r0, [pc, #168]	; (8009c74 <MX_GPIO_Init+0x234>)
 8009bca:	f002 fed7 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI1_CS_Pin|LD2_Pin;
 8009bce:	2389      	movs	r3, #137	; 0x89
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be2:	4619      	mov	r1, r3
 8009be4:	4820      	ldr	r0, [pc, #128]	; (8009c68 <MX_GPIO_Init+0x228>)
 8009be6:	f002 fec9 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = GPIO4_Pin|GPIO5_Pin|USB_PowerSwitchOn_Pin|SPI1_RESET_Pin
 8009bea:	f246 0343 	movw	r3, #24643	; 0x6043
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI1_WAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c00:	4619      	mov	r1, r3
 8009c02:	481a      	ldr	r0, [pc, #104]	; (8009c6c <MX_GPIO_Init+0x22c>)
 8009c04:	f002 feba 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|USB_OverCurrent_Pin|SPI1_INT_Pin;
 8009c08:	f241 0388 	movw	r3, #4232	; 0x1088
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c12:	2300      	movs	r3, #0
 8009c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4813      	ldr	r0, [pc, #76]	; (8009c6c <MX_GPIO_Init+0x22c>)
 8009c1e:	f002 fead 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAFETY_SWITCH_Pin;
 8009c22:	2380      	movs	r3, #128	; 0x80
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009c26:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <MX_GPIO_Init+0x230>)
 8009c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAFETY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8009c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c32:	4619      	mov	r1, r3
 8009c34:	4810      	ldr	r0, [pc, #64]	; (8009c78 <MX_GPIO_Init+0x238>)
 8009c36:	f002 fea1 	bl	800c97c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8009c3a:	2320      	movs	r3, #32
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8009c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4806      	ldr	r0, [pc, #24]	; (8009c68 <MX_GPIO_Init+0x228>)
 8009c4e:	f002 fe95 	bl	800c97c <HAL_GPIO_Init>

}
 8009c52:	bf00      	nop
 8009c54:	3738      	adds	r7, #56	; 0x38
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	40023800 	.word	0x40023800
 8009c60:	40021000 	.word	0x40021000
 8009c64:	40021400 	.word	0x40021400
 8009c68:	40020400 	.word	0x40020400
 8009c6c:	40021800 	.word	0x40021800
 8009c70:	10110000 	.word	0x10110000
 8009c74:	40020800 	.word	0x40020800
 8009c78:	40020c00 	.word	0x40020c00

08009c7c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8009c80:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009c82:	4a1c      	ldr	r2, [pc, #112]	; (8009cf4 <MX_I2C1_Init+0x78>)
 8009c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009c86:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009c88:	4a1b      	ldr	r2, [pc, #108]	; (8009cf8 <MX_I2C1_Init+0x7c>)
 8009c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009c8c:	4b18      	ldr	r3, [pc, #96]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009c92:	4b17      	ldr	r3, [pc, #92]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009c98:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009ca0:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009cac:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009cb8:	480d      	ldr	r0, [pc, #52]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009cba:	f003 f83b 	bl	800cd34 <HAL_I2C_Init>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009cc4:	f000 fa4a 	bl	800a15c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4809      	ldr	r0, [pc, #36]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009ccc:	f005 ff03 	bl	800fad6 <HAL_I2CEx_ConfigAnalogFilter>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8009cd6:	f000 fa41 	bl	800a15c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009cda:	2100      	movs	r1, #0
 8009cdc:	4804      	ldr	r0, [pc, #16]	; (8009cf0 <MX_I2C1_Init+0x74>)
 8009cde:	f005 ff36 	bl	800fb4e <HAL_I2CEx_ConfigDigitalFilter>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8009ce8:	f000 fa38 	bl	800a15c <Error_Handler>
  }

}
 8009cec:	bf00      	nop
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	2000c6c4 	.word	0x2000c6c4
 8009cf4:	40005400 	.word	0x40005400
 8009cf8:	00061a80 	.word	0x00061a80

08009cfc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8009d00:	4b1b      	ldr	r3, [pc, #108]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d02:	4a1c      	ldr	r2, [pc, #112]	; (8009d74 <MX_I2C2_Init+0x78>)
 8009d04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8009d06:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d08:	4a1b      	ldr	r2, [pc, #108]	; (8009d78 <MX_I2C2_Init+0x7c>)
 8009d0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009d0c:	4b18      	ldr	r3, [pc, #96]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8009d12:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d20:	4b13      	ldr	r3, [pc, #76]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8009d26:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d32:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009d38:	480d      	ldr	r0, [pc, #52]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d3a:	f002 fffb 	bl	800cd34 <HAL_I2C_Init>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8009d44:	f000 fa0a 	bl	800a15c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4809      	ldr	r0, [pc, #36]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d4c:	f005 fec3 	bl	800fad6 <HAL_I2CEx_ConfigAnalogFilter>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8009d56:	f000 fa01 	bl	800a15c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4804      	ldr	r0, [pc, #16]	; (8009d70 <MX_I2C2_Init+0x74>)
 8009d5e:	f005 fef6 	bl	800fb4e <HAL_I2CEx_ConfigDigitalFilter>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8009d68:	f000 f9f8 	bl	800a15c <Error_Handler>
  }

}
 8009d6c:	bf00      	nop
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	2000c718 	.word	0x2000c718
 8009d74:	40005800 	.word	0x40005800
 8009d78:	00061a80 	.word	0x00061a80

08009d7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08c      	sub	sp, #48	; 0x30
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d84:	f107 031c 	add.w	r3, r7, #28
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	605a      	str	r2, [r3, #4]
 8009d8e:	609a      	str	r2, [r3, #8]
 8009d90:	60da      	str	r2, [r3, #12]
 8009d92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a51      	ldr	r2, [pc, #324]	; (8009ee0 <HAL_I2C_MspInit+0x164>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d16b      	bne.n	8009e76 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61bb      	str	r3, [r7, #24]
 8009da2:	4b50      	ldr	r3, [pc, #320]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da6:	4a4f      	ldr	r2, [pc, #316]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009da8:	f043 0302 	orr.w	r3, r3, #2
 8009dac:	6313      	str	r3, [r2, #48]	; 0x30
 8009dae:	4b4d      	ldr	r3, [pc, #308]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8009dba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009dc0:	2312      	movs	r3, #18
 8009dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009dcc:	2304      	movs	r3, #4
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dd0:	f107 031c 	add.w	r3, r7, #28
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4844      	ldr	r0, [pc, #272]	; (8009ee8 <HAL_I2C_MspInit+0x16c>)
 8009dd8:	f002 fdd0 	bl	800c97c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]
 8009de0:	4b40      	ldr	r3, [pc, #256]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	4a3f      	ldr	r2, [pc, #252]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009dea:	6413      	str	r3, [r2, #64]	; 0x40
 8009dec:	4b3d      	ldr	r3, [pc, #244]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8009df8:	4b3c      	ldr	r3, [pc, #240]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009dfa:	4a3d      	ldr	r2, [pc, #244]	; (8009ef0 <HAL_I2C_MspInit+0x174>)
 8009dfc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8009dfe:	4b3b      	ldr	r3, [pc, #236]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e04:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e06:	4b39      	ldr	r3, [pc, #228]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e0c:	4b37      	ldr	r3, [pc, #220]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009e12:	4b36      	ldr	r3, [pc, #216]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e18:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e1a:	4b34      	ldr	r3, [pc, #208]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e20:	4b32      	ldr	r3, [pc, #200]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8009e26:	4b31      	ldr	r3, [pc, #196]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009e2c:	4b2f      	ldr	r3, [pc, #188]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e32:	4b2e      	ldr	r3, [pc, #184]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8009e38:	482c      	ldr	r0, [pc, #176]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e3a:	f002 f9f5 	bl	800c228 <HAL_DMA_Init>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8009e44:	f000 f98a 	bl	800a15c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a28      	ldr	r2, [pc, #160]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8009e4e:	4a27      	ldr	r2, [pc, #156]	; (8009eec <HAL_I2C_MspInit+0x170>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8009e54:	2200      	movs	r2, #0
 8009e56:	2105      	movs	r1, #5
 8009e58:	201f      	movs	r0, #31
 8009e5a:	f002 f9bb 	bl	800c1d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8009e5e:	201f      	movs	r0, #31
 8009e60:	f002 f9d4 	bl	800c20c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8009e64:	2200      	movs	r2, #0
 8009e66:	2105      	movs	r1, #5
 8009e68:	2020      	movs	r0, #32
 8009e6a:	f002 f9b3 	bl	800c1d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009e6e:	2020      	movs	r0, #32
 8009e70:	f002 f9cc 	bl	800c20c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8009e74:	e030      	b.n	8009ed8 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C2)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a1e      	ldr	r2, [pc, #120]	; (8009ef4 <HAL_I2C_MspInit+0x178>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d12b      	bne.n	8009ed8 <HAL_I2C_MspInit+0x15c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009e80:	2300      	movs	r3, #0
 8009e82:	613b      	str	r3, [r7, #16]
 8009e84:	4b17      	ldr	r3, [pc, #92]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e88:	4a16      	ldr	r2, [pc, #88]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009e8a:	f043 0320 	orr.w	r3, r3, #32
 8009e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8009e90:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e94:	f003 0320 	and.w	r3, r3, #32
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009ea0:	2312      	movs	r3, #18
 8009ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009eac:	2304      	movs	r3, #4
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009eb0:	f107 031c 	add.w	r3, r7, #28
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4810      	ldr	r0, [pc, #64]	; (8009ef8 <HAL_I2C_MspInit+0x17c>)
 8009eb8:	f002 fd60 	bl	800c97c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009ec6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009eca:	6413      	str	r3, [r2, #64]	; 0x40
 8009ecc:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <HAL_I2C_MspInit+0x168>)
 8009ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	3730      	adds	r7, #48	; 0x30
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	40005400 	.word	0x40005400
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	40020400 	.word	0x40020400
 8009eec:	2000c76c 	.word	0x2000c76c
 8009ef0:	40026088 	.word	0x40026088
 8009ef4:	40005800 	.word	0x40005800
 8009ef8:	40021400 	.word	0x40021400

08009efc <msOverFlow>:

static __inline void msOverFlow(){
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 8009f00:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <msOverFlow+0x18>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	4a03      	ldr	r2, [pc, #12]	; (8009f14 <msOverFlow+0x18>)
 8009f08:	6013      	str	r3, [r2, #0]
}
 8009f0a:	bf00      	nop
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	20000b68 	.word	0x20000b68

08009f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f1c:	f001 fdcc 	bl	800bab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f20:	f000 f836 	bl	8009f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f24:	f7ff fd8c 	bl	8009a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8009f28:	f7ff fcbc 	bl	80098a4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8009f2c:	f001 fb6e 	bl	800b60c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8009f30:	f001 fd10 	bl	800b954 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8009f34:	f7ff fea2 	bl	8009c7c <MX_I2C1_Init>
  MX_TIM3_Init();
 8009f38:	f000 fdec 	bl	800ab14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8009f3c:	f000 fe76 	bl	800ac2c <MX_TIM4_Init>
  MX_UART7_Init();
 8009f40:	f001 fae2 	bl	800b508 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8009f44:	f001 fb38 	bl	800b5b8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8009f48:	f7ff fed8 	bl	8009cfc <MX_I2C2_Init>
  MX_TIM2_Init();
 8009f4c:	f000 fd96 	bl	800aa7c <MX_TIM2_Init>
  MX_UART8_Init();
 8009f50:	f001 fb08 	bl	800b564 <MX_UART8_Init>
  MX_SDIO_SD_Init();
 8009f54:	f000 f90a 	bl	800a16c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8009f58:	f00b f8fc 	bl	8015154 <MX_FATFS_Init>
  MX_TIM9_Init();
 8009f5c:	f000 fff8 	bl	800af50 <MX_TIM9_Init>
  MX_TIM5_Init();
 8009f60:	f000 fefc 	bl	800ad5c <MX_TIM5_Init>
  MX_TIM8_Init();
 8009f64:	f000 ff70 	bl	800ae48 <MX_TIM8_Init>
  MX_TIM12_Init();
 8009f68:	f001 f842 	bl	800aff0 <MX_TIM12_Init>
  MX_SPI1_Init();
 8009f6c:	f000 fa16 	bl	800a39c <MX_SPI1_Init>
  MX_TIM1_Init();
 8009f70:	f000 fcd2 	bl	800a918 <MX_TIM1_Init>
  MX_ADC1_Init();
 8009f74:	f7ff fc00 	bl	8009778 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8009f78:	f000 f874 	bl	800a064 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  cppMain();
 8009f7c:	f7ff f9e0 	bl	8009340 <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8009f80:	f00d fef2 	bl	8017d68 <osKernelInitialize>
  MX_FREERTOS_Init();
 8009f84:	f7ff fcb6 	bl	80098f4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8009f88:	f00d ff44 	bl	8017e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009f8c:	e7fe      	b.n	8009f8c <main+0x74>
	...

08009f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b094      	sub	sp, #80	; 0x50
 8009f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f96:	f107 0320 	add.w	r3, r7, #32
 8009f9a:	2230      	movs	r2, #48	; 0x30
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f013 fbff 	bl	801d7a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009fa4:	f107 030c 	add.w	r3, r7, #12
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	605a      	str	r2, [r3, #4]
 8009fae:	609a      	str	r2, [r3, #8]
 8009fb0:	60da      	str	r2, [r3, #12]
 8009fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60bb      	str	r3, [r7, #8]
 8009fb8:	4b28      	ldr	r3, [pc, #160]	; (800a05c <SystemClock_Config+0xcc>)
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	4a27      	ldr	r2, [pc, #156]	; (800a05c <SystemClock_Config+0xcc>)
 8009fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8009fc4:	4b25      	ldr	r3, [pc, #148]	; (800a05c <SystemClock_Config+0xcc>)
 8009fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fcc:	60bb      	str	r3, [r7, #8]
 8009fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	607b      	str	r3, [r7, #4]
 8009fd4:	4b22      	ldr	r3, [pc, #136]	; (800a060 <SystemClock_Config+0xd0>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a21      	ldr	r2, [pc, #132]	; (800a060 <SystemClock_Config+0xd0>)
 8009fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	4b1f      	ldr	r3, [pc, #124]	; (800a060 <SystemClock_Config+0xd0>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009fe8:	607b      	str	r3, [r7, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009fec:	2301      	movs	r3, #1
 8009fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ffa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a000:	2308      	movs	r3, #8
 800a002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a004:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a00a:	2302      	movs	r3, #2
 800a00c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a00e:	2307      	movs	r3, #7
 800a010:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a012:	f107 0320 	add.w	r3, r7, #32
 800a016:	4618      	mov	r0, r3
 800a018:	f005 fef6 	bl	800fe08 <HAL_RCC_OscConfig>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800a022:	f000 f89b 	bl	800a15c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a026:	230f      	movs	r3, #15
 800a028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a02a:	2302      	movs	r3, #2
 800a02c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a02e:	2300      	movs	r3, #0
 800a030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a03c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a03e:	f107 030c 	add.w	r3, r7, #12
 800a042:	2105      	movs	r1, #5
 800a044:	4618      	mov	r0, r3
 800a046:	f006 f94f 	bl	80102e8 <HAL_RCC_ClockConfig>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a050:	f000 f884 	bl	800a15c <Error_Handler>
  }
}
 800a054:	bf00      	nop
 800a056:	3750      	adds	r7, #80	; 0x50
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40023800 	.word	0x40023800
 800a060:	40007000 	.word	0x40007000

0800a064 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  /* UART7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART7_IRQn, 10, 0);
 800a068:	2200      	movs	r2, #0
 800a06a:	210a      	movs	r1, #10
 800a06c:	2052      	movs	r0, #82	; 0x52
 800a06e:	f002 f8b1 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART7_IRQn);
 800a072:	2052      	movs	r0, #82	; 0x52
 800a074:	f002 f8ca 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800a078:	2200      	movs	r2, #0
 800a07a:	2105      	movs	r1, #5
 800a07c:	2021      	movs	r0, #33	; 0x21
 800a07e:	f002 f8a9 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a082:	2021      	movs	r0, #33	; 0x21
 800a084:	f002 f8c2 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* I2C2_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800a088:	2200      	movs	r2, #0
 800a08a:	2105      	movs	r1, #5
 800a08c:	2022      	movs	r0, #34	; 0x22
 800a08e:	f002 f8a1 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a092:	2022      	movs	r0, #34	; 0x22
 800a094:	f002 f8ba 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* SDIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDIO_IRQn, 10, 0);
 800a098:	2200      	movs	r2, #0
 800a09a:	210a      	movs	r1, #10
 800a09c:	2031      	movs	r0, #49	; 0x31
 800a09e:	f002 f899 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a0a2:	2031      	movs	r0, #49	; 0x31
 800a0a4:	f002 f8b2 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 10, 0);
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	210a      	movs	r1, #10
 800a0ac:	200e      	movs	r0, #14
 800a0ae:	f002 f891 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800a0b2:	200e      	movs	r0, #14
 800a0b4:	f002 f8aa 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 10, 0);
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	210a      	movs	r1, #10
 800a0bc:	2011      	movs	r0, #17
 800a0be:	f002 f889 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800a0c2:	2011      	movs	r0, #17
 800a0c4:	f002 f8a2 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2105      	movs	r1, #5
 800a0cc:	2010      	movs	r0, #16
 800a0ce:	f002 f881 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a0d2:	2010      	movs	r0, #16
 800a0d4:	f002 f89a 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 10, 0);
 800a0d8:	2200      	movs	r2, #0
 800a0da:	210a      	movs	r1, #10
 800a0dc:	203b      	movs	r0, #59	; 0x3b
 800a0de:	f002 f879 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800a0e2:	203b      	movs	r0, #59	; 0x3b
 800a0e4:	f002 f892 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2105      	movs	r1, #5
 800a0ec:	2045      	movs	r0, #69	; 0x45
 800a0ee:	f002 f871 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800a0f2:	2045      	movs	r0, #69	; 0x45
 800a0f4:	f002 f88a 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 10, 0);
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	210a      	movs	r1, #10
 800a0fc:	2018      	movs	r0, #24
 800a0fe:	f002 f869 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800a102:	2018      	movs	r0, #24
 800a104:	f002 f882 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 800a108:	2200      	movs	r2, #0
 800a10a:	210a      	movs	r1, #10
 800a10c:	201c      	movs	r0, #28
 800a10e:	f002 f861 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a112:	201c      	movs	r0, #28
 800a114:	f002 f87a 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* UART8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART8_IRQn, 10, 0);
 800a118:	2200      	movs	r2, #0
 800a11a:	210a      	movs	r1, #10
 800a11c:	2053      	movs	r0, #83	; 0x53
 800a11e:	f002 f859 	bl	800c1d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART8_IRQn);
 800a122:	2053      	movs	r0, #83	; 0x53
 800a124:	f002 f872 	bl	800c20c <HAL_NVIC_EnableIRQ>
}
 800a128:	bf00      	nop
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	/* microseond timer */
  if(htim->Instance == TIM2){
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13c:	d101      	bne.n	800a142 <HAL_TIM_PeriodElapsedCallback+0x16>
	  msOverFlow();
 800a13e:	f7ff fedd 	bl	8009efc <msOverFlow>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a04      	ldr	r2, [pc, #16]	; (800a158 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d101      	bne.n	800a150 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 800a14c:	f001 fcd6 	bl	800bafc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40001000 	.word	0x40001000

0800a15c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a160:	bf00      	nop
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
	...

0800a16c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <MX_SDIO_SD_Init+0x38>)
 800a172:	4a0d      	ldr	r2, [pc, #52]	; (800a1a8 <MX_SDIO_SD_Init+0x3c>)
 800a174:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a176:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <MX_SDIO_SD_Init+0x38>)
 800a178:	2200      	movs	r2, #0
 800a17a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <MX_SDIO_SD_Init+0x38>)
 800a17e:	2200      	movs	r2, #0
 800a180:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a182:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <MX_SDIO_SD_Init+0x38>)
 800a184:	2200      	movs	r2, #0
 800a186:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <MX_SDIO_SD_Init+0x38>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a18e:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <MX_SDIO_SD_Init+0x38>)
 800a190:	2200      	movs	r2, #0
 800a192:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a194:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <MX_SDIO_SD_Init+0x38>)
 800a196:	2200      	movs	r2, #0
 800a198:	619a      	str	r2, [r3, #24]

}
 800a19a:	bf00      	nop
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	2000c88c 	.word	0x2000c88c
 800a1a8:	40012c00 	.word	0x40012c00

0800a1ac <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	; 0x28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1b4:	f107 0314 	add.w	r3, r7, #20
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	605a      	str	r2, [r3, #4]
 800a1be:	609a      	str	r2, [r3, #8]
 800a1c0:	60da      	str	r2, [r3, #12]
 800a1c2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a6c      	ldr	r2, [pc, #432]	; (800a37c <HAL_SD_MspInit+0x1d0>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	f040 80d2 	bne.w	800a374 <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	4b6a      	ldr	r3, [pc, #424]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a1d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d8:	4a69      	ldr	r2, [pc, #420]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a1da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a1de:	6453      	str	r3, [r2, #68]	; 0x44
 800a1e0:	4b67      	ldr	r3, [pc, #412]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1e8:	613b      	str	r3, [r7, #16]
 800a1ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	4b63      	ldr	r3, [pc, #396]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f4:	4a62      	ldr	r2, [pc, #392]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a1f6:	f043 0304 	orr.w	r3, r3, #4
 800a1fa:	6313      	str	r3, [r2, #48]	; 0x30
 800a1fc:	4b60      	ldr	r3, [pc, #384]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a208:	2300      	movs	r3, #0
 800a20a:	60bb      	str	r3, [r7, #8]
 800a20c:	4b5c      	ldr	r3, [pc, #368]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a210:	4a5b      	ldr	r2, [pc, #364]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a212:	f043 0308 	orr.w	r3, r3, #8
 800a216:	6313      	str	r3, [r2, #48]	; 0x30
 800a218:	4b59      	ldr	r3, [pc, #356]	; (800a380 <HAL_SD_MspInit+0x1d4>)
 800a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	60bb      	str	r3, [r7, #8]
 800a222:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a224:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a22a:	2302      	movs	r3, #2
 800a22c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a22e:	2301      	movs	r3, #1
 800a230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a232:	2303      	movs	r3, #3
 800a234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a236:	230c      	movs	r3, #12
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a23a:	f107 0314 	add.w	r3, r7, #20
 800a23e:	4619      	mov	r1, r3
 800a240:	4850      	ldr	r0, [pc, #320]	; (800a384 <HAL_SD_MspInit+0x1d8>)
 800a242:	f002 fb9b 	bl	800c97c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a24a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a24c:	2302      	movs	r3, #2
 800a24e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a250:	2300      	movs	r3, #0
 800a252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a254:	2303      	movs	r3, #3
 800a256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a258:	230c      	movs	r3, #12
 800a25a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4619      	mov	r1, r3
 800a262:	4848      	ldr	r0, [pc, #288]	; (800a384 <HAL_SD_MspInit+0x1d8>)
 800a264:	f002 fb8a 	bl	800c97c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a268:	2304      	movs	r3, #4
 800a26a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a26c:	2302      	movs	r3, #2
 800a26e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a270:	2301      	movs	r3, #1
 800a272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a274:	2303      	movs	r3, #3
 800a276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a278:	230c      	movs	r3, #12
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a27c:	f107 0314 	add.w	r3, r7, #20
 800a280:	4619      	mov	r1, r3
 800a282:	4841      	ldr	r0, [pc, #260]	; (800a388 <HAL_SD_MspInit+0x1dc>)
 800a284:	f002 fb7a 	bl	800c97c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800a288:	4b40      	ldr	r3, [pc, #256]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a28a:	4a41      	ldr	r2, [pc, #260]	; (800a390 <HAL_SD_MspInit+0x1e4>)
 800a28c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800a28e:	4b3f      	ldr	r3, [pc, #252]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a294:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a296:	4b3d      	ldr	r3, [pc, #244]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a298:	2200      	movs	r2, #0
 800a29a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a29c:	4b3b      	ldr	r3, [pc, #236]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a2a2:	4b3a      	ldr	r3, [pc, #232]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2a8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a2aa:	4b38      	ldr	r3, [pc, #224]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2b0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a2b2:	4b36      	ldr	r3, [pc, #216]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a2b8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800a2ba:	4b34      	ldr	r3, [pc, #208]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2bc:	2220      	movs	r2, #32
 800a2be:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a2c0:	4b32      	ldr	r3, [pc, #200]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a2c6:	4b31      	ldr	r3, [pc, #196]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2c8:	2204      	movs	r2, #4
 800a2ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a2cc:	4b2f      	ldr	r3, [pc, #188]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2ce:	2203      	movs	r2, #3
 800a2d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800a2d2:	4b2e      	ldr	r3, [pc, #184]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a2d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a2da:	4b2c      	ldr	r3, [pc, #176]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a2e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800a2e2:	482a      	ldr	r0, [pc, #168]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2e4:	f001 ffa0 	bl	800c228 <HAL_DMA_Init>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800a2ee:	f7ff ff35 	bl	800a15c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a25      	ldr	r2, [pc, #148]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2f6:	641a      	str	r2, [r3, #64]	; 0x40
 800a2f8:	4a24      	ldr	r2, [pc, #144]	; (800a38c <HAL_SD_MspInit+0x1e0>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800a2fe:	4b25      	ldr	r3, [pc, #148]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a300:	4a25      	ldr	r2, [pc, #148]	; (800a398 <HAL_SD_MspInit+0x1ec>)
 800a302:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800a304:	4b23      	ldr	r3, [pc, #140]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a30a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a30c:	4b21      	ldr	r3, [pc, #132]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a30e:	2240      	movs	r2, #64	; 0x40
 800a310:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a312:	4b20      	ldr	r3, [pc, #128]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a314:	2200      	movs	r2, #0
 800a316:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a318:	4b1e      	ldr	r3, [pc, #120]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a31a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a31e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a320:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a326:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a328:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a32a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a32e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800a330:	4b18      	ldr	r3, [pc, #96]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a332:	2220      	movs	r2, #32
 800a334:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a336:	4b17      	ldr	r3, [pc, #92]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a338:	2200      	movs	r2, #0
 800a33a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a33c:	4b15      	ldr	r3, [pc, #84]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a33e:	2204      	movs	r2, #4
 800a340:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a342:	4b14      	ldr	r3, [pc, #80]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a344:	2203      	movs	r2, #3
 800a346:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800a348:	4b12      	ldr	r3, [pc, #72]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a34a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a34e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a350:	4b10      	ldr	r3, [pc, #64]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a356:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800a358:	480e      	ldr	r0, [pc, #56]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a35a:	f001 ff65 	bl	800c228 <HAL_DMA_Init>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800a364:	f7ff fefa 	bl	800a15c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a0a      	ldr	r2, [pc, #40]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a36c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a36e:	4a09      	ldr	r2, [pc, #36]	; (800a394 <HAL_SD_MspInit+0x1e8>)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800a374:	bf00      	nop
 800a376:	3728      	adds	r7, #40	; 0x28
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	40012c00 	.word	0x40012c00
 800a380:	40023800 	.word	0x40023800
 800a384:	40020800 	.word	0x40020800
 800a388:	40020c00 	.word	0x40020c00
 800a38c:	2000c7cc 	.word	0x2000c7cc
 800a390:	40026458 	.word	0x40026458
 800a394:	2000c82c 	.word	0x2000c82c
 800a398:	400264a0 	.word	0x400264a0

0800a39c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800a3a0:	4b17      	ldr	r3, [pc, #92]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3a2:	4a18      	ldr	r2, [pc, #96]	; (800a404 <MX_SPI1_Init+0x68>)
 800a3a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a3a6:	4b16      	ldr	r3, [pc, #88]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a3ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a3ae:	4b14      	ldr	r3, [pc, #80]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a3b4:	4b12      	ldr	r3, [pc, #72]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a3ba:	4b11      	ldr	r3, [pc, #68]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3bc:	2202      	movs	r2, #2
 800a3be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a3c0:	4b0f      	ldr	r3, [pc, #60]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a3c6:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a3d4:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a3e6:	4b06      	ldr	r3, [pc, #24]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3e8:	220a      	movs	r2, #10
 800a3ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a3ec:	4804      	ldr	r0, [pc, #16]	; (800a400 <MX_SPI1_Init+0x64>)
 800a3ee:	f007 fc9d 	bl	8011d2c <HAL_SPI_Init>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d001      	beq.n	800a3fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a3f8:	f7ff feb0 	bl	800a15c <Error_Handler>
  }

}
 800a3fc:	bf00      	nop
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	2000c910 	.word	0x2000c910
 800a404:	40013000 	.word	0x40013000

0800a408 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	; 0x28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a410:	f107 0314 	add.w	r3, r7, #20
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	605a      	str	r2, [r3, #4]
 800a41a:	609a      	str	r2, [r3, #8]
 800a41c:	60da      	str	r2, [r3, #12]
 800a41e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a28      	ldr	r2, [pc, #160]	; (800a4c8 <HAL_SPI_MspInit+0xc0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d149      	bne.n	800a4be <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a42a:	2300      	movs	r3, #0
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	4b27      	ldr	r3, [pc, #156]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a432:	4a26      	ldr	r2, [pc, #152]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a438:	6453      	str	r3, [r2, #68]	; 0x44
 800a43a:	4b24      	ldr	r3, [pc, #144]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a442:	613b      	str	r3, [r7, #16]
 800a444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	4b20      	ldr	r3, [pc, #128]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	4a1f      	ldr	r2, [pc, #124]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	6313      	str	r3, [r2, #48]	; 0x30
 800a456:	4b1d      	ldr	r3, [pc, #116]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a462:	2300      	movs	r3, #0
 800a464:	60bb      	str	r3, [r7, #8]
 800a466:	4b19      	ldr	r3, [pc, #100]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	4a18      	ldr	r2, [pc, #96]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a46c:	f043 0302 	orr.w	r3, r3, #2
 800a470:	6313      	str	r3, [r2, #48]	; 0x30
 800a472:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <HAL_SPI_MspInit+0xc4>)
 800a474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	60bb      	str	r3, [r7, #8]
 800a47c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 800a47e:	23a0      	movs	r3, #160	; 0xa0
 800a480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a482:	2302      	movs	r3, #2
 800a484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a486:	2300      	movs	r3, #0
 800a488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a48a:	2303      	movs	r3, #3
 800a48c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a48e:	2305      	movs	r3, #5
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a492:	f107 0314 	add.w	r3, r7, #20
 800a496:	4619      	mov	r1, r3
 800a498:	480d      	ldr	r0, [pc, #52]	; (800a4d0 <HAL_SPI_MspInit+0xc8>)
 800a49a:	f002 fa6f 	bl	800c97c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 800a49e:	2310      	movs	r3, #16
 800a4a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a4ae:	2305      	movs	r3, #5
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 800a4b2:	f107 0314 	add.w	r3, r7, #20
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4806      	ldr	r0, [pc, #24]	; (800a4d4 <HAL_SPI_MspInit+0xcc>)
 800a4ba:	f002 fa5f 	bl	800c97c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800a4be:	bf00      	nop
 800a4c0:	3728      	adds	r7, #40	; 0x28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	40013000 	.word	0x40013000
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	40020000 	.word	0x40020000
 800a4d4:	40020400 	.word	0x40020400

0800a4d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4de:	2300      	movs	r3, #0
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <HAL_MspInit+0x54>)
 800a4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e6:	4a11      	ldr	r2, [pc, #68]	; (800a52c <HAL_MspInit+0x54>)
 800a4e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a4ee:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <HAL_MspInit+0x54>)
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4f6:	607b      	str	r3, [r7, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	603b      	str	r3, [r7, #0]
 800a4fe:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <HAL_MspInit+0x54>)
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	4a0a      	ldr	r2, [pc, #40]	; (800a52c <HAL_MspInit+0x54>)
 800a504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a508:	6413      	str	r3, [r2, #64]	; 0x40
 800a50a:	4b08      	ldr	r3, [pc, #32]	; (800a52c <HAL_MspInit+0x54>)
 800a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a516:	2200      	movs	r2, #0
 800a518:	210f      	movs	r1, #15
 800a51a:	f06f 0001 	mvn.w	r0, #1
 800a51e:	f001 fe59 	bl	800c1d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	40023800 	.word	0x40023800

0800a530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08c      	sub	sp, #48	; 0x30
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800a540:	2200      	movs	r2, #0
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	2036      	movs	r0, #54	; 0x36
 800a546:	f001 fe45 	bl	800c1d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a54a:	2036      	movs	r0, #54	; 0x36
 800a54c:	f001 fe5e 	bl	800c20c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a550:	2300      	movs	r3, #0
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <HAL_InitTick+0xa4>)
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	4a1e      	ldr	r2, [pc, #120]	; (800a5d4 <HAL_InitTick+0xa4>)
 800a55a:	f043 0310 	orr.w	r3, r3, #16
 800a55e:	6413      	str	r3, [r2, #64]	; 0x40
 800a560:	4b1c      	ldr	r3, [pc, #112]	; (800a5d4 <HAL_InitTick+0xa4>)
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a56c:	f107 0210 	add.w	r2, r7, #16
 800a570:	f107 0314 	add.w	r3, r7, #20
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f006 f8a8 	bl	80106cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a57c:	f006 f87e 	bl	801067c <HAL_RCC_GetPCLK1Freq>
 800a580:	4603      	mov	r3, r0
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	4a13      	ldr	r2, [pc, #76]	; (800a5d8 <HAL_InitTick+0xa8>)
 800a58a:	fba2 2303 	umull	r2, r3, r2, r3
 800a58e:	0c9b      	lsrs	r3, r3, #18
 800a590:	3b01      	subs	r3, #1
 800a592:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <HAL_InitTick+0xac>)
 800a596:	4a12      	ldr	r2, [pc, #72]	; (800a5e0 <HAL_InitTick+0xb0>)
 800a598:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800a59a:	4b10      	ldr	r3, [pc, #64]	; (800a5dc <HAL_InitTick+0xac>)
 800a59c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a5a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a5a2:	4a0e      	ldr	r2, [pc, #56]	; (800a5dc <HAL_InitTick+0xac>)
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <HAL_InitTick+0xac>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <HAL_InitTick+0xac>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a5b4:	4809      	ldr	r0, [pc, #36]	; (800a5dc <HAL_InitTick+0xac>)
 800a5b6:	f007 fc1d 	bl	8011df4 <HAL_TIM_Base_Init>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a5c0:	4806      	ldr	r0, [pc, #24]	; (800a5dc <HAL_InitTick+0xac>)
 800a5c2:	f007 fc42 	bl	8011e4a <HAL_TIM_Base_Start_IT>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	e000      	b.n	800a5cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3730      	adds	r7, #48	; 0x30
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	40023800 	.word	0x40023800
 800a5d8:	431bde83 	.word	0x431bde83
 800a5dc:	2000c968 	.word	0x2000c968
 800a5e0:	40001000 	.word	0x40001000

0800a5e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a5e8:	bf00      	nop
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a5f6:	e7fe      	b.n	800a5f6 <HardFault_Handler+0x4>

0800a5f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5fc:	e7fe      	b.n	800a5fc <MemManage_Handler+0x4>

0800a5fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a5fe:	b480      	push	{r7}
 800a600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a602:	e7fe      	b.n	800a602 <BusFault_Handler+0x4>

0800a604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a608:	e7fe      	b.n	800a608 <UsageFault_Handler+0x4>

0800a60a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a60a:	b480      	push	{r7}
 800a60c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a60e:	bf00      	nop
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800a61c:	4802      	ldr	r0, [pc, #8]	; (800a628 <DMA1_Stream3_IRQHandler+0x10>)
 800a61e:	f001 ff2b 	bl	800c478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800a622:	bf00      	nop
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	2000cc28 	.word	0x2000cc28

0800a62c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a630:	4802      	ldr	r0, [pc, #8]	; (800a63c <DMA1_Stream5_IRQHandler+0x10>)
 800a632:	f001 ff21 	bl	800c478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a636:	bf00      	nop
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	2000c76c 	.word	0x2000c76c

0800a640 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800a644:	4802      	ldr	r0, [pc, #8]	; (800a650 <DMA1_Stream6_IRQHandler+0x10>)
 800a646:	f001 ff17 	bl	800c478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800a64a:	bf00      	nop
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	2000cc88 	.word	0x2000cc88

0800a654 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a658:	4803      	ldr	r0, [pc, #12]	; (800a668 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800a65a:	f007 fd3c 	bl	80120d6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800a65e:	4803      	ldr	r0, [pc, #12]	; (800a66c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800a660:	f007 fd39 	bl	80120d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800a664:	bf00      	nop
 800a666:	bd80      	pop	{r7, pc}
 800a668:	2000caa8 	.word	0x2000caa8
 800a66c:	2000cae8 	.word	0x2000cae8

0800a670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a674:	4802      	ldr	r0, [pc, #8]	; (800a680 <TIM2_IRQHandler+0x10>)
 800a676:	f007 fd2e 	bl	80120d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a67a:	bf00      	nop
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	2000cb28 	.word	0x2000cb28

0800a684 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a688:	4802      	ldr	r0, [pc, #8]	; (800a694 <I2C1_EV_IRQHandler+0x10>)
 800a68a:	f003 f9b5 	bl	800d9f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a68e:	bf00      	nop
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	2000c6c4 	.word	0x2000c6c4

0800a698 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800a69c:	4802      	ldr	r0, [pc, #8]	; (800a6a8 <I2C1_ER_IRQHandler+0x10>)
 800a69e:	f003 fb11 	bl	800dcc4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800a6a2:	bf00      	nop
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	2000c6c4 	.word	0x2000c6c4

0800a6ac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800a6b0:	4802      	ldr	r0, [pc, #8]	; (800a6bc <I2C2_EV_IRQHandler+0x10>)
 800a6b2:	f003 f9a1 	bl	800d9f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800a6b6:	bf00      	nop
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	2000c718 	.word	0x2000c718

0800a6c0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800a6c4:	4802      	ldr	r0, [pc, #8]	; (800a6d0 <I2C2_ER_IRQHandler+0x10>)
 800a6c6:	f003 fafd 	bl	800dcc4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800a6ca:	bf00      	nop
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	2000c718 	.word	0x2000c718

0800a6d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a6d8:	4802      	ldr	r0, [pc, #8]	; (800a6e4 <USART2_IRQHandler+0x10>)
 800a6da:	f008 fecb 	bl	8013474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a6de:	bf00      	nop
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	2000cd28 	.word	0x2000cd28

0800a6e8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a6ec:	4802      	ldr	r0, [pc, #8]	; (800a6f8 <TIM8_CC_IRQHandler+0x10>)
 800a6ee:	f007 fcf2 	bl	80120d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800a6f2:	bf00      	nop
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	2000c9a8 	.word	0x2000c9a8

0800a6fc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a700:	4802      	ldr	r0, [pc, #8]	; (800a70c <SDIO_IRQHandler+0x10>)
 800a702:	f006 fa7f 	bl	8010c04 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a706:	bf00      	nop
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	2000c88c 	.word	0x2000c88c

0800a710 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a714:	4802      	ldr	r0, [pc, #8]	; (800a720 <TIM6_DAC_IRQHandler+0x10>)
 800a716:	f007 fcde 	bl	80120d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a71a:	bf00      	nop
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	2000c968 	.word	0x2000c968

0800a724 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a728:	4802      	ldr	r0, [pc, #8]	; (800a734 <DMA2_Stream3_IRQHandler+0x10>)
 800a72a:	f001 fea5 	bl	800c478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a72e:	bf00      	nop
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	2000c7cc 	.word	0x2000c7cc

0800a738 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a73c:	4802      	ldr	r0, [pc, #8]	; (800a748 <DMA2_Stream6_IRQHandler+0x10>)
 800a73e:	f001 fe9b 	bl	800c478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a742:	bf00      	nop
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	2000c82c 	.word	0x2000c82c

0800a74c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800a750:	4802      	ldr	r0, [pc, #8]	; (800a75c <UART7_IRQHandler+0x10>)
 800a752:	f008 fe8f 	bl	8013474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800a756:	bf00      	nop
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	2000cba8 	.word	0x2000cba8

0800a760 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800a764:	4802      	ldr	r0, [pc, #8]	; (800a770 <UART8_IRQHandler+0x10>)
 800a766:	f008 fe85 	bl	8013474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800a76a:	bf00      	nop
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	2000cce8 	.word	0x2000cce8

0800a774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
	return 1;
 800a778:	2301      	movs	r3, #1
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <_kill>:

int _kill(int pid, int sig)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a78e:	f012 ffc1 	bl	801d714 <__errno>
 800a792:	4602      	mov	r2, r0
 800a794:	2316      	movs	r3, #22
 800a796:	6013      	str	r3, [r2, #0]
	return -1;
 800a798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_exit>:

void _exit (int status)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a7ac:	f04f 31ff 	mov.w	r1, #4294967295
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ffe7 	bl	800a784 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a7b6:	e7fe      	b.n	800a7b6 <_exit+0x12>

0800a7b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	e00a      	b.n	800a7e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a7ca:	f3af 8000 	nop.w
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	60ba      	str	r2, [r7, #8]
 800a7d6:	b2ca      	uxtb	r2, r1
 800a7d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	dbf0      	blt.n	800a7ca <_read+0x12>
	}

return len;
 800a7e8:	687b      	ldr	r3, [r7, #4]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]
 800a802:	e009      	b.n	800a818 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	60ba      	str	r2, [r7, #8]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	3301      	adds	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	dbf1      	blt.n	800a804 <_write+0x12>
	}
	return len;
 800a820:	687b      	ldr	r3, [r7, #4]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <_close>:

int _close(int file)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
	return -1;
 800a832:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a836:	4618      	mov	r0, r3
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a852:	605a      	str	r2, [r3, #4]
	return 0;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <_isatty>:

int _isatty(int file)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
	return 1;
 800a86a:	2301      	movs	r3, #1
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
	return 0;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
	...

0800a894 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a89c:	4b11      	ldr	r3, [pc, #68]	; (800a8e4 <_sbrk+0x50>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <_sbrk+0x16>
		heap_end = &end;
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <_sbrk+0x50>)
 800a8a6:	4a10      	ldr	r2, [pc, #64]	; (800a8e8 <_sbrk+0x54>)
 800a8a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a8aa:	4b0e      	ldr	r3, [pc, #56]	; (800a8e4 <_sbrk+0x50>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <_sbrk+0x50>)
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	466a      	mov	r2, sp
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d907      	bls.n	800a8ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a8be:	f012 ff29 	bl	801d714 <__errno>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	230c      	movs	r3, #12
 800a8c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8cc:	e006      	b.n	800a8dc <_sbrk+0x48>
	}

	heap_end += incr;
 800a8ce:	4b05      	ldr	r3, [pc, #20]	; (800a8e4 <_sbrk+0x50>)
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4a03      	ldr	r2, [pc, #12]	; (800a8e4 <_sbrk+0x50>)
 800a8d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a8da:	68fb      	ldr	r3, [r7, #12]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000b6c 	.word	0x20000b6c
 800a8e8:	2000f228 	.word	0x2000f228

0800a8ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a8f0:	4b08      	ldr	r3, [pc, #32]	; (800a914 <SystemInit+0x28>)
 800a8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f6:	4a07      	ldr	r2, [pc, #28]	; (800a914 <SystemInit+0x28>)
 800a8f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a900:	4b04      	ldr	r3, [pc, #16]	; (800a914 <SystemInit+0x28>)
 800a902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a906:	609a      	str	r2, [r3, #8]
#endif
}
 800a908:	bf00      	nop
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	e000ed00 	.word	0xe000ed00

0800a918 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b092      	sub	sp, #72	; 0x48
 800a91c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a91e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	605a      	str	r2, [r3, #4]
 800a932:	609a      	str	r2, [r3, #8]
 800a934:	60da      	str	r2, [r3, #12]
 800a936:	611a      	str	r2, [r3, #16]
 800a938:	615a      	str	r2, [r3, #20]
 800a93a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a93c:	1d3b      	adds	r3, r7, #4
 800a93e:	2220      	movs	r2, #32
 800a940:	2100      	movs	r1, #0
 800a942:	4618      	mov	r0, r3
 800a944:	f012 ff2d 	bl	801d7a2 <memset>

  htim1.Instance = TIM1;
 800a948:	4b4a      	ldr	r3, [pc, #296]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a94a:	4a4b      	ldr	r2, [pc, #300]	; (800aa78 <MX_TIM1_Init+0x160>)
 800a94c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a94e:	4b49      	ldr	r3, [pc, #292]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a950:	2200      	movs	r2, #0
 800a952:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a954:	4b47      	ldr	r3, [pc, #284]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a956:	2200      	movs	r2, #0
 800a958:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a95a:	4b46      	ldr	r3, [pc, #280]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a95c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a962:	4b44      	ldr	r3, [pc, #272]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a964:	2200      	movs	r2, #0
 800a966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a968:	4b42      	ldr	r3, [pc, #264]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a96e:	4b41      	ldr	r3, [pc, #260]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a970:	2200      	movs	r2, #0
 800a972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a974:	483f      	ldr	r0, [pc, #252]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a976:	f007 fac1 	bl	8011efc <HAL_TIM_PWM_Init>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800a980:	f7ff fbec 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800a984:	483b      	ldr	r0, [pc, #236]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a986:	f007 fa84 	bl	8011e92 <HAL_TIM_OC_Init>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800a990:	f7ff fbe4 	bl	800a15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a994:	2300      	movs	r3, #0
 800a996:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a998:	2300      	movs	r3, #0
 800a99a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a99c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4834      	ldr	r0, [pc, #208]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a9a4:	f008 fbb6 	bl	8013114 <HAL_TIMEx_MasterConfigSynchronization>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800a9ae:	f7ff fbd5 	bl	800a15c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a9b2:	2360      	movs	r3, #96	; 0x60
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a9ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4827      	ldr	r0, [pc, #156]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a9d8:	f007 fd82 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800a9e2:	f7ff fbbb 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a9e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4821      	ldr	r0, [pc, #132]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800a9f0:	f007 fd76 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800a9fa:	f7ff fbaf 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a9fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa02:	2208      	movs	r2, #8
 800aa04:	4619      	mov	r1, r3
 800aa06:	481b      	ldr	r0, [pc, #108]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800aa08:	f007 fd6a 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800aa12:	f7ff fba3 	bl	800a15c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800aa16:	2300      	movs	r3, #0
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800aa1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa1e:	220c      	movs	r2, #12
 800aa20:	4619      	mov	r1, r3
 800aa22:	4814      	ldr	r0, [pc, #80]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800aa24:	f007 fc60 	bl	80122e8 <HAL_TIM_OC_ConfigChannel>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 800aa2e:	f7ff fb95 	bl	800a15c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800aa46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800aa50:	1d3b      	adds	r3, r7, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	4807      	ldr	r0, [pc, #28]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800aa56:	f008 fbd9 	bl	801320c <HAL_TIMEx_ConfigBreakDeadTime>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800aa60:	f7ff fb7c 	bl	800a15c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800aa64:	4803      	ldr	r0, [pc, #12]	; (800aa74 <MX_TIM1_Init+0x15c>)
 800aa66:	f000 fc11 	bl	800b28c <HAL_TIM_MspPostInit>

}
 800aa6a:	bf00      	nop
 800aa6c:	3748      	adds	r7, #72	; 0x48
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2000caa8 	.word	0x2000caa8
 800aa78:	40010000 	.word	0x40010000

0800aa7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	2200      	movs	r2, #0
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	605a      	str	r2, [r3, #4]
 800aa8c:	609a      	str	r2, [r3, #8]
 800aa8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa90:	463b      	mov	r3, r7
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800aa98:	4b1d      	ldr	r3, [pc, #116]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aa9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aa9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800aaa0:	4b1b      	ldr	r3, [pc, #108]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aaa2:	2253      	movs	r2, #83	; 0x53
 800aaa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aaa6:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 800aaac:	4b18      	ldr	r3, [pc, #96]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295
 800aab2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aab4:	4b16      	ldr	r3, [pc, #88]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aaba:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800aac0:	4813      	ldr	r0, [pc, #76]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aac2:	f007 f997 	bl	8011df4 <HAL_TIM_Base_Init>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800aacc:	f7ff fb46 	bl	800a15c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aad4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800aad6:	f107 0308 	add.w	r3, r7, #8
 800aada:	4619      	mov	r1, r3
 800aadc:	480c      	ldr	r0, [pc, #48]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aade:	f007 fdc5 	bl	801266c <HAL_TIM_ConfigClockSource>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800aae8:	f7ff fb38 	bl	800a15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aaec:	2300      	movs	r3, #0
 800aaee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aaf4:	463b      	mov	r3, r7
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4805      	ldr	r0, [pc, #20]	; (800ab10 <MX_TIM2_Init+0x94>)
 800aafa:	f008 fb0b 	bl	8013114 <HAL_TIMEx_MasterConfigSynchronization>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800ab04:	f7ff fb2a 	bl	800a15c <Error_Handler>
  }

}
 800ab08:	bf00      	nop
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	2000cb28 	.word	0x2000cb28

0800ab14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08e      	sub	sp, #56	; 0x38
 800ab18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	605a      	str	r2, [r3, #4]
 800ab24:	609a      	str	r2, [r3, #8]
 800ab26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab28:	f107 0320 	add.w	r3, r7, #32
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ab32:	1d3b      	adds	r3, r7, #4
 800ab34:	2200      	movs	r2, #0
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	605a      	str	r2, [r3, #4]
 800ab3a:	609a      	str	r2, [r3, #8]
 800ab3c:	60da      	str	r2, [r3, #12]
 800ab3e:	611a      	str	r2, [r3, #16]
 800ab40:	615a      	str	r2, [r3, #20]
 800ab42:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800ab44:	4b37      	ldr	r3, [pc, #220]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab46:	4a38      	ldr	r2, [pc, #224]	; (800ac28 <MX_TIM3_Init+0x114>)
 800ab48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800ab4a:	4b36      	ldr	r3, [pc, #216]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab50:	4b34      	ldr	r3, [pc, #208]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42000-1;
 800ab56:	4b33      	ldr	r3, [pc, #204]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab58:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800ab5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab5e:	4b31      	ldr	r3, [pc, #196]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab64:	4b2f      	ldr	r3, [pc, #188]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ab6a:	482e      	ldr	r0, [pc, #184]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab6c:	f007 f942 	bl	8011df4 <HAL_TIM_Base_Init>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800ab76:	f7ff faf1 	bl	800a15c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ab80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab84:	4619      	mov	r1, r3
 800ab86:	4827      	ldr	r0, [pc, #156]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab88:	f007 fd70 	bl	801266c <HAL_TIM_ConfigClockSource>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800ab92:	f7ff fae3 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ab96:	4823      	ldr	r0, [pc, #140]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ab98:	f007 f9b0 	bl	8011efc <HAL_TIM_PWM_Init>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800aba2:	f7ff fadb 	bl	800a15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aba6:	2300      	movs	r3, #0
 800aba8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800abaa:	2300      	movs	r3, #0
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800abae:	f107 0320 	add.w	r3, r7, #32
 800abb2:	4619      	mov	r1, r3
 800abb4:	481b      	ldr	r0, [pc, #108]	; (800ac24 <MX_TIM3_Init+0x110>)
 800abb6:	f008 faad 	bl	8013114 <HAL_TIMEx_MasterConfigSynchronization>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800abc0:	f7ff facc 	bl	800a15c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800abc4:	2360      	movs	r3, #96	; 0x60
 800abc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800abcc:	2300      	movs	r3, #0
 800abce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800abd4:	1d3b      	adds	r3, r7, #4
 800abd6:	2200      	movs	r2, #0
 800abd8:	4619      	mov	r1, r3
 800abda:	4812      	ldr	r0, [pc, #72]	; (800ac24 <MX_TIM3_Init+0x110>)
 800abdc:	f007 fc80 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800abe6:	f7ff fab9 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800abea:	1d3b      	adds	r3, r7, #4
 800abec:	2204      	movs	r2, #4
 800abee:	4619      	mov	r1, r3
 800abf0:	480c      	ldr	r0, [pc, #48]	; (800ac24 <MX_TIM3_Init+0x110>)
 800abf2:	f007 fc75 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800abfc:	f7ff faae 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ac00:	1d3b      	adds	r3, r7, #4
 800ac02:	220c      	movs	r2, #12
 800ac04:	4619      	mov	r1, r3
 800ac06:	4807      	ldr	r0, [pc, #28]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ac08:	f007 fc6a 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800ac12:	f7ff faa3 	bl	800a15c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800ac16:	4803      	ldr	r0, [pc, #12]	; (800ac24 <MX_TIM3_Init+0x110>)
 800ac18:	f000 fb38 	bl	800b28c <HAL_TIM_MspPostInit>

}
 800ac1c:	bf00      	nop
 800ac1e:	3738      	adds	r7, #56	; 0x38
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	2000ca68 	.word	0x2000ca68
 800ac28:	40000400 	.word	0x40000400

0800ac2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08e      	sub	sp, #56	; 0x38
 800ac30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	605a      	str	r2, [r3, #4]
 800ac3c:	609a      	str	r2, [r3, #8]
 800ac3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac40:	f107 0320 	add.w	r3, r7, #32
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ac4a:	1d3b      	adds	r3, r7, #4
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	605a      	str	r2, [r3, #4]
 800ac52:	609a      	str	r2, [r3, #8]
 800ac54:	60da      	str	r2, [r3, #12]
 800ac56:	611a      	str	r2, [r3, #16]
 800ac58:	615a      	str	r2, [r3, #20]
 800ac5a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800ac5c:	4b3d      	ldr	r3, [pc, #244]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ac5e:	4a3e      	ldr	r2, [pc, #248]	; (800ad58 <MX_TIM4_Init+0x12c>)
 800ac60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21-1;
 800ac62:	4b3c      	ldr	r3, [pc, #240]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ac64:	2214      	movs	r2, #20
 800ac66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac68:	4b3a      	ldr	r3, [pc, #232]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000-1;
 800ac6e:	4b39      	ldr	r3, [pc, #228]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ac70:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800ac74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac76:	4b37      	ldr	r3, [pc, #220]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac7c:	4b35      	ldr	r3, [pc, #212]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800ac82:	4834      	ldr	r0, [pc, #208]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ac84:	f007 f8b6 	bl	8011df4 <HAL_TIM_Base_Init>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800ac8e:	f7ff fa65 	bl	800a15c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800ac98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	482d      	ldr	r0, [pc, #180]	; (800ad54 <MX_TIM4_Init+0x128>)
 800aca0:	f007 fce4 	bl	801266c <HAL_TIM_ConfigClockSource>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800acaa:	f7ff fa57 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800acae:	4829      	ldr	r0, [pc, #164]	; (800ad54 <MX_TIM4_Init+0x128>)
 800acb0:	f007 f924 	bl	8011efc <HAL_TIM_PWM_Init>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800acba:	f7ff fa4f 	bl	800a15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800acbe:	2300      	movs	r3, #0
 800acc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800acc2:	2300      	movs	r3, #0
 800acc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800acc6:	f107 0320 	add.w	r3, r7, #32
 800acca:	4619      	mov	r1, r3
 800accc:	4821      	ldr	r0, [pc, #132]	; (800ad54 <MX_TIM4_Init+0x128>)
 800acce:	f008 fa21 	bl	8013114 <HAL_TIMEx_MasterConfigSynchronization>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800acd8:	f7ff fa40 	bl	800a15c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800acdc:	2360      	movs	r3, #96	; 0x60
 800acde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800acec:	1d3b      	adds	r3, r7, #4
 800acee:	2200      	movs	r2, #0
 800acf0:	4619      	mov	r1, r3
 800acf2:	4818      	ldr	r0, [pc, #96]	; (800ad54 <MX_TIM4_Init+0x128>)
 800acf4:	f007 fbf4 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800acfe:	f7ff fa2d 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ad02:	1d3b      	adds	r3, r7, #4
 800ad04:	2204      	movs	r2, #4
 800ad06:	4619      	mov	r1, r3
 800ad08:	4812      	ldr	r0, [pc, #72]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ad0a:	f007 fbe9 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800ad14:	f7ff fa22 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ad18:	1d3b      	adds	r3, r7, #4
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	480d      	ldr	r0, [pc, #52]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ad20:	f007 fbde 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800ad2a:	f7ff fa17 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ad2e:	1d3b      	adds	r3, r7, #4
 800ad30:	220c      	movs	r2, #12
 800ad32:	4619      	mov	r1, r3
 800ad34:	4807      	ldr	r0, [pc, #28]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ad36:	f007 fbd3 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 800ad40:	f7ff fa0c 	bl	800a15c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800ad44:	4803      	ldr	r0, [pc, #12]	; (800ad54 <MX_TIM4_Init+0x128>)
 800ad46:	f000 faa1 	bl	800b28c <HAL_TIM_MspPostInit>

}
 800ad4a:	bf00      	nop
 800ad4c:	3738      	adds	r7, #56	; 0x38
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	2000c9e8 	.word	0x2000c9e8
 800ad58:	40000800 	.word	0x40000800

0800ad5c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08e      	sub	sp, #56	; 0x38
 800ad60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ad62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	605a      	str	r2, [r3, #4]
 800ad6c:	609a      	str	r2, [r3, #8]
 800ad6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad70:	f107 0320 	add.w	r3, r7, #32
 800ad74:	2200      	movs	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]
 800ad78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ad7a:	1d3b      	adds	r3, r7, #4
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	605a      	str	r2, [r3, #4]
 800ad82:	609a      	str	r2, [r3, #8]
 800ad84:	60da      	str	r2, [r3, #12]
 800ad86:	611a      	str	r2, [r3, #16]
 800ad88:	615a      	str	r2, [r3, #20]
 800ad8a:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800ad8c:	4b2c      	ldr	r3, [pc, #176]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800ad8e:	4a2d      	ldr	r2, [pc, #180]	; (800ae44 <MX_TIM5_Init+0xe8>)
 800ad90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800ad92:	4b2b      	ldr	r3, [pc, #172]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad98:	4b29      	ldr	r3, [pc, #164]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10-1;
 800ad9e:	4b28      	ldr	r3, [pc, #160]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800ada0:	2209      	movs	r2, #9
 800ada2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ada4:	4b26      	ldr	r3, [pc, #152]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800adaa:	4b25      	ldr	r3, [pc, #148]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800adac:	2280      	movs	r2, #128	; 0x80
 800adae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800adb0:	4823      	ldr	r0, [pc, #140]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800adb2:	f007 f81f 	bl	8011df4 <HAL_TIM_Base_Init>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800adbc:	f7ff f9ce 	bl	800a15c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800adc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800adc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adca:	4619      	mov	r1, r3
 800adcc:	481c      	ldr	r0, [pc, #112]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800adce:	f007 fc4d 	bl	801266c <HAL_TIM_ConfigClockSource>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 800add8:	f7ff f9c0 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800addc:	4818      	ldr	r0, [pc, #96]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800adde:	f007 f88d 	bl	8011efc <HAL_TIM_PWM_Init>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800ade8:	f7ff f9b8 	bl	800a15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800adec:	2300      	movs	r3, #0
 800adee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800adf0:	2300      	movs	r3, #0
 800adf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800adf4:	f107 0320 	add.w	r3, r7, #32
 800adf8:	4619      	mov	r1, r3
 800adfa:	4811      	ldr	r0, [pc, #68]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800adfc:	f008 f98a 	bl	8013114 <HAL_TIMEx_MasterConfigSynchronization>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800ae06:	f7ff f9a9 	bl	800a15c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ae0a:	2360      	movs	r3, #96	; 0x60
 800ae0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 800ae0e:	2305      	movs	r3, #5
 800ae10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ae12:	2300      	movs	r3, #0
 800ae14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800ae16:	2304      	movs	r3, #4
 800ae18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ae1a:	1d3b      	adds	r3, r7, #4
 800ae1c:	2204      	movs	r2, #4
 800ae1e:	4619      	mov	r1, r3
 800ae20:	4807      	ldr	r0, [pc, #28]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800ae22:	f007 fb5d 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800ae2c:	f7ff f996 	bl	800a15c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800ae30:	4803      	ldr	r0, [pc, #12]	; (800ae40 <MX_TIM5_Init+0xe4>)
 800ae32:	f000 fa2b 	bl	800b28c <HAL_TIM_MspPostInit>

}
 800ae36:	bf00      	nop
 800ae38:	3738      	adds	r7, #56	; 0x38
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	2000ca28 	.word	0x2000ca28
 800ae44:	40000c00 	.word	0x40000c00

0800ae48 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b092      	sub	sp, #72	; 0x48
 800ae4c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ae4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ae58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	605a      	str	r2, [r3, #4]
 800ae62:	609a      	str	r2, [r3, #8]
 800ae64:	60da      	str	r2, [r3, #12]
 800ae66:	611a      	str	r2, [r3, #16]
 800ae68:	615a      	str	r2, [r3, #20]
 800ae6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ae6c:	1d3b      	adds	r3, r7, #4
 800ae6e:	2220      	movs	r2, #32
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f012 fc95 	bl	801d7a2 <memset>

  htim8.Instance = TIM8;
 800ae78:	4b33      	ldr	r3, [pc, #204]	; (800af48 <MX_TIM8_Init+0x100>)
 800ae7a:	4a34      	ldr	r2, [pc, #208]	; (800af4c <MX_TIM8_Init+0x104>)
 800ae7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800ae7e:	4b32      	ldr	r3, [pc, #200]	; (800af48 <MX_TIM8_Init+0x100>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae84:	4b30      	ldr	r3, [pc, #192]	; (800af48 <MX_TIM8_Init+0x100>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800ae8a:	4b2f      	ldr	r3, [pc, #188]	; (800af48 <MX_TIM8_Init+0x100>)
 800ae8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae92:	4b2d      	ldr	r3, [pc, #180]	; (800af48 <MX_TIM8_Init+0x100>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <MX_TIM8_Init+0x100>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae9e:	4b2a      	ldr	r3, [pc, #168]	; (800af48 <MX_TIM8_Init+0x100>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800aea4:	4828      	ldr	r0, [pc, #160]	; (800af48 <MX_TIM8_Init+0x100>)
 800aea6:	f007 f829 	bl	8011efc <HAL_TIM_PWM_Init>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800aeb0:	f7ff f954 	bl	800a15c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800aebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aec0:	4619      	mov	r1, r3
 800aec2:	4821      	ldr	r0, [pc, #132]	; (800af48 <MX_TIM8_Init+0x100>)
 800aec4:	f008 f926 	bl	8013114 <HAL_TIMEx_MasterConfigSynchronization>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800aece:	f7ff f945 	bl	800a15c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aed2:	2360      	movs	r3, #96	; 0x60
 800aed4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aeda:	2300      	movs	r3, #0
 800aedc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aede:	2300      	movs	r3, #0
 800aee0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800aee6:	2300      	movs	r3, #0
 800aee8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aeee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aef2:	2200      	movs	r2, #0
 800aef4:	4619      	mov	r1, r3
 800aef6:	4814      	ldr	r0, [pc, #80]	; (800af48 <MX_TIM8_Init+0x100>)
 800aef8:	f007 faf2 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800af02:	f7ff f92b 	bl	800a15c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800af06:	2300      	movs	r3, #0
 800af08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800af0e:	2300      	movs	r3, #0
 800af10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800af1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800af20:	2300      	movs	r3, #0
 800af22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800af24:	1d3b      	adds	r3, r7, #4
 800af26:	4619      	mov	r1, r3
 800af28:	4807      	ldr	r0, [pc, #28]	; (800af48 <MX_TIM8_Init+0x100>)
 800af2a:	f008 f96f 	bl	801320c <HAL_TIMEx_ConfigBreakDeadTime>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800af34:	f7ff f912 	bl	800a15c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800af38:	4803      	ldr	r0, [pc, #12]	; (800af48 <MX_TIM8_Init+0x100>)
 800af3a:	f000 f9a7 	bl	800b28c <HAL_TIM_MspPostInit>

}
 800af3e:	bf00      	nop
 800af40:	3748      	adds	r7, #72	; 0x48
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	2000c9a8 	.word	0x2000c9a8
 800af4c:	40010400 	.word	0x40010400

0800af50 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC = {0};
 800af56:	463b      	mov	r3, r7
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	605a      	str	r2, [r3, #4]
 800af5e:	609a      	str	r2, [r3, #8]
 800af60:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800af62:	4b21      	ldr	r3, [pc, #132]	; (800afe8 <MX_TIM9_Init+0x98>)
 800af64:	4a21      	ldr	r2, [pc, #132]	; (800afec <MX_TIM9_Init+0x9c>)
 800af66:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800af68:	4b1f      	ldr	r3, [pc, #124]	; (800afe8 <MX_TIM9_Init+0x98>)
 800af6a:	22a7      	movs	r2, #167	; 0xa7
 800af6c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af6e:	4b1e      	ldr	r3, [pc, #120]	; (800afe8 <MX_TIM9_Init+0x98>)
 800af70:	2200      	movs	r2, #0
 800af72:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65536-1;
 800af74:	4b1c      	ldr	r3, [pc, #112]	; (800afe8 <MX_TIM9_Init+0x98>)
 800af76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af7a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af7c:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <MX_TIM9_Init+0x98>)
 800af7e:	2200      	movs	r2, #0
 800af80:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af82:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <MX_TIM9_Init+0x98>)
 800af84:	2200      	movs	r2, #0
 800af86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800af88:	4817      	ldr	r0, [pc, #92]	; (800afe8 <MX_TIM9_Init+0x98>)
 800af8a:	f007 f879 	bl	8012080 <HAL_TIM_IC_Init>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800af94:	f7ff f8e2 	bl	800a15c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800af98:	2300      	movs	r3, #0
 800af9a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800af9c:	2301      	movs	r3, #1
 800af9e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800afa4:	230f      	movs	r3, #15
 800afa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800afa8:	463b      	mov	r3, r7
 800afaa:	2200      	movs	r2, #0
 800afac:	4619      	mov	r1, r3
 800afae:	480e      	ldr	r0, [pc, #56]	; (800afe8 <MX_TIM9_Init+0x98>)
 800afb0:	f007 f9fa 	bl	80123a8 <HAL_TIM_IC_ConfigChannel>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 800afba:	f7ff f8cf 	bl	800a15c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800afbe:	2302      	movs	r3, #2
 800afc0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800afc2:	2302      	movs	r3, #2
 800afc4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICFilter = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800afca:	463b      	mov	r3, r7
 800afcc:	2204      	movs	r2, #4
 800afce:	4619      	mov	r1, r3
 800afd0:	4805      	ldr	r0, [pc, #20]	; (800afe8 <MX_TIM9_Init+0x98>)
 800afd2:	f007 f9e9 	bl	80123a8 <HAL_TIM_IC_ConfigChannel>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <MX_TIM9_Init+0x90>
  {
    Error_Handler();
 800afdc:	f7ff f8be 	bl	800a15c <Error_Handler>
  }

}
 800afe0:	bf00      	nop
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	2000cae8 	.word	0x2000cae8
 800afec:	40014000 	.word	0x40014000

0800aff0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aff6:	1d3b      	adds	r3, r7, #4
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	605a      	str	r2, [r3, #4]
 800affe:	609a      	str	r2, [r3, #8]
 800b000:	60da      	str	r2, [r3, #12]
 800b002:	611a      	str	r2, [r3, #16]
 800b004:	615a      	str	r2, [r3, #20]
 800b006:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800b008:	4b1f      	ldr	r3, [pc, #124]	; (800b088 <MX_TIM12_Init+0x98>)
 800b00a:	4a20      	ldr	r2, [pc, #128]	; (800b08c <MX_TIM12_Init+0x9c>)
 800b00c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800b00e:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <MX_TIM12_Init+0x98>)
 800b010:	2200      	movs	r2, #0
 800b012:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b014:	4b1c      	ldr	r3, [pc, #112]	; (800b088 <MX_TIM12_Init+0x98>)
 800b016:	2200      	movs	r2, #0
 800b018:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800b01a:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <MX_TIM12_Init+0x98>)
 800b01c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b020:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b022:	4b19      	ldr	r3, [pc, #100]	; (800b088 <MX_TIM12_Init+0x98>)
 800b024:	2200      	movs	r2, #0
 800b026:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b028:	4b17      	ldr	r3, [pc, #92]	; (800b088 <MX_TIM12_Init+0x98>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800b02e:	4816      	ldr	r0, [pc, #88]	; (800b088 <MX_TIM12_Init+0x98>)
 800b030:	f006 ff64 	bl	8011efc <HAL_TIM_PWM_Init>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800b03a:	f7ff f88f 	bl	800a15c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b03e:	2360      	movs	r3, #96	; 0x60
 800b040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b04e:	1d3b      	adds	r3, r7, #4
 800b050:	2200      	movs	r2, #0
 800b052:	4619      	mov	r1, r3
 800b054:	480c      	ldr	r0, [pc, #48]	; (800b088 <MX_TIM12_Init+0x98>)
 800b056:	f007 fa43 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800b060:	f7ff f87c 	bl	800a15c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b064:	1d3b      	adds	r3, r7, #4
 800b066:	2204      	movs	r2, #4
 800b068:	4619      	mov	r1, r3
 800b06a:	4807      	ldr	r0, [pc, #28]	; (800b088 <MX_TIM12_Init+0x98>)
 800b06c:	f007 fa38 	bl	80124e0 <HAL_TIM_PWM_ConfigChannel>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800b076:	f7ff f871 	bl	800a15c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800b07a:	4803      	ldr	r0, [pc, #12]	; (800b088 <MX_TIM12_Init+0x98>)
 800b07c:	f000 f906 	bl	800b28c <HAL_TIM_MspPostInit>

}
 800b080:	bf00      	nop
 800b082:	3720      	adds	r7, #32
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	2000cb68 	.word	0x2000cb68
 800b08c:	40001800 	.word	0x40001800

0800b090 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a22      	ldr	r2, [pc, #136]	; (800b128 <HAL_TIM_PWM_MspInit+0x98>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d10e      	bne.n	800b0c0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	4b21      	ldr	r3, [pc, #132]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0aa:	4a20      	ldr	r2, [pc, #128]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b0ac:	f043 0301 	orr.w	r3, r3, #1
 800b0b0:	6453      	str	r3, [r2, #68]	; 0x44
 800b0b2:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800b0be:	e02e      	b.n	800b11e <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM8)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a1a      	ldr	r2, [pc, #104]	; (800b130 <HAL_TIM_PWM_MspInit+0xa0>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d116      	bne.n	800b0f8 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	613b      	str	r3, [r7, #16]
 800b0ce:	4b17      	ldr	r3, [pc, #92]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d2:	4a16      	ldr	r2, [pc, #88]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b0d4:	f043 0302 	orr.w	r3, r3, #2
 800b0d8:	6453      	str	r3, [r2, #68]	; 0x44
 800b0da:	4b14      	ldr	r3, [pc, #80]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	613b      	str	r3, [r7, #16]
 800b0e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 10, 0);
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	210a      	movs	r1, #10
 800b0ea:	202e      	movs	r0, #46	; 0x2e
 800b0ec:	f001 f872 	bl	800c1d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800b0f0:	202e      	movs	r0, #46	; 0x2e
 800b0f2:	f001 f88b 	bl	800c20c <HAL_NVIC_EnableIRQ>
}
 800b0f6:	e012      	b.n	800b11e <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM12)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a0d      	ldr	r2, [pc, #52]	; (800b134 <HAL_TIM_PWM_MspInit+0xa4>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d10d      	bne.n	800b11e <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800b102:	2300      	movs	r3, #0
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	4b09      	ldr	r3, [pc, #36]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	4a08      	ldr	r2, [pc, #32]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b110:	6413      	str	r3, [r2, #64]	; 0x40
 800b112:	4b06      	ldr	r3, [pc, #24]	; (800b12c <HAL_TIM_PWM_MspInit+0x9c>)
 800b114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]
}
 800b11e:	bf00      	nop
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	40010000 	.word	0x40010000
 800b12c:	40023800 	.word	0x40023800
 800b130:	40010400 	.word	0x40010400
 800b134:	40001800 	.word	0x40001800

0800b138 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b138:	b480      	push	{r7}
 800b13a:	b087      	sub	sp, #28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b148:	d10e      	bne.n	800b168 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	4b27      	ldr	r3, [pc, #156]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	4a26      	ldr	r2, [pc, #152]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b154:	f043 0301 	orr.w	r3, r3, #1
 800b158:	6413      	str	r3, [r2, #64]	; 0x40
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800b166:	e03a      	b.n	800b1de <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a20      	ldr	r2, [pc, #128]	; (800b1f0 <HAL_TIM_Base_MspInit+0xb8>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d10e      	bne.n	800b190 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]
 800b176:	4b1d      	ldr	r3, [pc, #116]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	4a1c      	ldr	r2, [pc, #112]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b17c:	f043 0302 	orr.w	r3, r3, #2
 800b180:	6413      	str	r3, [r2, #64]	; 0x40
 800b182:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	693b      	ldr	r3, [r7, #16]
}
 800b18e:	e026      	b.n	800b1de <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a17      	ldr	r2, [pc, #92]	; (800b1f4 <HAL_TIM_Base_MspInit+0xbc>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d10e      	bne.n	800b1b8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a2:	4a12      	ldr	r2, [pc, #72]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b1a4:	f043 0304 	orr.w	r3, r3, #4
 800b1a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b1aa:	4b10      	ldr	r3, [pc, #64]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
}
 800b1b6:	e012      	b.n	800b1de <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a0e      	ldr	r2, [pc, #56]	; (800b1f8 <HAL_TIM_Base_MspInit+0xc0>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d10d      	bne.n	800b1de <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60bb      	str	r3, [r7, #8]
 800b1c6:	4b09      	ldr	r3, [pc, #36]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	4a08      	ldr	r2, [pc, #32]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b1cc:	f043 0308 	orr.w	r3, r3, #8
 800b1d0:	6413      	str	r3, [r2, #64]	; 0x40
 800b1d2:	4b06      	ldr	r3, [pc, #24]	; (800b1ec <HAL_TIM_Base_MspInit+0xb4>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	f003 0308 	and.w	r3, r3, #8
 800b1da:	60bb      	str	r3, [r7, #8]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
}
 800b1de:	bf00      	nop
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	40023800 	.word	0x40023800
 800b1f0:	40000400 	.word	0x40000400
 800b1f4:	40000800 	.word	0x40000800
 800b1f8:	40000c00 	.word	0x40000c00

0800b1fc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08a      	sub	sp, #40	; 0x28
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b204:	f107 0314 	add.w	r3, r7, #20
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	605a      	str	r2, [r3, #4]
 800b20e:	609a      	str	r2, [r3, #8]
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a19      	ldr	r2, [pc, #100]	; (800b280 <HAL_TIM_IC_MspInit+0x84>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d12b      	bne.n	800b276 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800b21e:	2300      	movs	r3, #0
 800b220:	613b      	str	r3, [r7, #16]
 800b222:	4b18      	ldr	r3, [pc, #96]	; (800b284 <HAL_TIM_IC_MspInit+0x88>)
 800b224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b226:	4a17      	ldr	r2, [pc, #92]	; (800b284 <HAL_TIM_IC_MspInit+0x88>)
 800b228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b22c:	6453      	str	r3, [r2, #68]	; 0x44
 800b22e:	4b15      	ldr	r3, [pc, #84]	; (800b284 <HAL_TIM_IC_MspInit+0x88>)
 800b230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b236:	613b      	str	r3, [r7, #16]
 800b238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	4b11      	ldr	r3, [pc, #68]	; (800b284 <HAL_TIM_IC_MspInit+0x88>)
 800b240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b242:	4a10      	ldr	r2, [pc, #64]	; (800b284 <HAL_TIM_IC_MspInit+0x88>)
 800b244:	f043 0310 	orr.w	r3, r3, #16
 800b248:	6313      	str	r3, [r2, #48]	; 0x30
 800b24a:	4b0e      	ldr	r3, [pc, #56]	; (800b284 <HAL_TIM_IC_MspInit+0x88>)
 800b24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24e:	f003 0310 	and.w	r3, r3, #16
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_Pin;
 800b256:	2320      	movs	r3, #32
 800b258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b25a:	2302      	movs	r3, #2
 800b25c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b262:	2300      	movs	r3, #0
 800b264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800b266:	2303      	movs	r3, #3
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIDAR_GPIO_Port, &GPIO_InitStruct);
 800b26a:	f107 0314 	add.w	r3, r7, #20
 800b26e:	4619      	mov	r1, r3
 800b270:	4805      	ldr	r0, [pc, #20]	; (800b288 <HAL_TIM_IC_MspInit+0x8c>)
 800b272:	f001 fb83 	bl	800c97c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800b276:	bf00      	nop
 800b278:	3728      	adds	r7, #40	; 0x28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	40014000 	.word	0x40014000
 800b284:	40023800 	.word	0x40023800
 800b288:	40021000 	.word	0x40021000

0800b28c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b090      	sub	sp, #64	; 0x40
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	605a      	str	r2, [r3, #4]
 800b29e:	609a      	str	r2, [r3, #8]
 800b2a0:	60da      	str	r2, [r3, #12]
 800b2a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a8b      	ldr	r2, [pc, #556]	; (800b4d8 <HAL_TIM_MspPostInit+0x24c>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d11f      	bne.n	800b2ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2b2:	4b8a      	ldr	r3, [pc, #552]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	4a89      	ldr	r2, [pc, #548]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b2b8:	f043 0310 	orr.w	r3, r3, #16
 800b2bc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2be:	4b87      	ldr	r3, [pc, #540]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c2:	f003 0310 	and.w	r3, r3, #16
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = SERVO4_Pin|SERVO1_Pin|SERVO2_Pin|SERVO3_Pin;
 800b2ca:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b2e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	487e      	ldr	r0, [pc, #504]	; (800b4e0 <HAL_TIM_MspPostInit+0x254>)
 800b2e8:	f001 fb48 	bl	800c97c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800b2ec:	e0f0      	b.n	800b4d0 <HAL_TIM_MspPostInit+0x244>
  else if(timHandle->Instance==TIM3)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a7c      	ldr	r2, [pc, #496]	; (800b4e4 <HAL_TIM_MspPostInit+0x258>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d15a      	bne.n	800b3ae <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fc:	4b77      	ldr	r3, [pc, #476]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b300:	4a76      	ldr	r2, [pc, #472]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b302:	f043 0301 	orr.w	r3, r3, #1
 800b306:	6313      	str	r3, [r2, #48]	; 0x30
 800b308:	4b74      	ldr	r3, [pc, #464]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	627b      	str	r3, [r7, #36]	; 0x24
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b314:	2300      	movs	r3, #0
 800b316:	623b      	str	r3, [r7, #32]
 800b318:	4b70      	ldr	r3, [pc, #448]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31c:	4a6f      	ldr	r2, [pc, #444]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b31e:	f043 0302 	orr.w	r3, r3, #2
 800b322:	6313      	str	r3, [r2, #48]	; 0x30
 800b324:	4b6d      	ldr	r3, [pc, #436]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	623b      	str	r3, [r7, #32]
 800b32e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]
 800b334:	4b69      	ldr	r3, [pc, #420]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b338:	4a68      	ldr	r2, [pc, #416]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b33a:	f043 0304 	orr.w	r3, r3, #4
 800b33e:	6313      	str	r3, [r2, #48]	; 0x30
 800b340:	4b66      	ldr	r3, [pc, #408]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	61fb      	str	r3, [r7, #28]
 800b34a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR5_Pin;
 800b34c:	2340      	movs	r3, #64	; 0x40
 800b34e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b350:	2302      	movs	r3, #2
 800b352:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b354:	2300      	movs	r3, #0
 800b356:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b358:	2300      	movs	r3, #0
 800b35a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b35c:	2302      	movs	r3, #2
 800b35e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MOTOR5_GPIO_Port, &GPIO_InitStruct);
 800b360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b364:	4619      	mov	r1, r3
 800b366:	4860      	ldr	r0, [pc, #384]	; (800b4e8 <HAL_TIM_MspPostInit+0x25c>)
 800b368:	f001 fb08 	bl	800c97c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR7_Pin;
 800b36c:	2302      	movs	r3, #2
 800b36e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b370:	2302      	movs	r3, #2
 800b372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b374:	2300      	movs	r3, #0
 800b376:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b378:	2300      	movs	r3, #0
 800b37a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b37c:	2302      	movs	r3, #2
 800b37e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MOTOR7_GPIO_Port, &GPIO_InitStruct);
 800b380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b384:	4619      	mov	r1, r3
 800b386:	4859      	ldr	r0, [pc, #356]	; (800b4ec <HAL_TIM_MspPostInit+0x260>)
 800b388:	f001 faf8 	bl	800c97c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR6_Pin;
 800b38c:	2380      	movs	r3, #128	; 0x80
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b390:	2302      	movs	r3, #2
 800b392:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b394:	2300      	movs	r3, #0
 800b396:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b398:	2300      	movs	r3, #0
 800b39a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b39c:	2302      	movs	r3, #2
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MOTOR6_GPIO_Port, &GPIO_InitStruct);
 800b3a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4852      	ldr	r0, [pc, #328]	; (800b4f0 <HAL_TIM_MspPostInit+0x264>)
 800b3a8:	f001 fae8 	bl	800c97c <HAL_GPIO_Init>
}
 800b3ac:	e090      	b.n	800b4d0 <HAL_TIM_MspPostInit+0x244>
  else if(timHandle->Instance==TIM4)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a50      	ldr	r2, [pc, #320]	; (800b4f4 <HAL_TIM_MspPostInit+0x268>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d11f      	bne.n	800b3f8 <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61bb      	str	r3, [r7, #24]
 800b3bc:	4b47      	ldr	r3, [pc, #284]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c0:	4a46      	ldr	r2, [pc, #280]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b3c2:	f043 0308 	orr.w	r3, r3, #8
 800b3c6:	6313      	str	r3, [r2, #48]	; 0x30
 800b3c8:	4b44      	ldr	r3, [pc, #272]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3cc:	f003 0308 	and.w	r3, r3, #8
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MOTOR1_Pin|MOTOR2_Pin|MOTOR3_Pin|MOTOR4_Pin;
 800b3d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3da:	2302      	movs	r3, #2
 800b3dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b3ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4841      	ldr	r0, [pc, #260]	; (800b4f8 <HAL_TIM_MspPostInit+0x26c>)
 800b3f2:	f001 fac3 	bl	800c97c <HAL_GPIO_Init>
}
 800b3f6:	e06b      	b.n	800b4d0 <HAL_TIM_MspPostInit+0x244>
  else if(timHandle->Instance==TIM5)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a3f      	ldr	r2, [pc, #252]	; (800b4fc <HAL_TIM_MspPostInit+0x270>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d11e      	bne.n	800b440 <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	4b35      	ldr	r3, [pc, #212]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40a:	4a34      	ldr	r2, [pc, #208]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b40c:	f043 0301 	orr.w	r3, r3, #1
 800b410:	6313      	str	r3, [r2, #48]	; 0x30
 800b412:	4b32      	ldr	r3, [pc, #200]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800b41e:	2302      	movs	r3, #2
 800b420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b422:	2302      	movs	r3, #2
 800b424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b426:	2302      	movs	r3, #2
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b42a:	2300      	movs	r3, #0
 800b42c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b42e:	2302      	movs	r3, #2
 800b430:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800b432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b436:	4619      	mov	r1, r3
 800b438:	482b      	ldr	r0, [pc, #172]	; (800b4e8 <HAL_TIM_MspPostInit+0x25c>)
 800b43a:	f001 fa9f 	bl	800c97c <HAL_GPIO_Init>
}
 800b43e:	e047      	b.n	800b4d0 <HAL_TIM_MspPostInit+0x244>
  else if(timHandle->Instance==TIM8)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a2e      	ldr	r2, [pc, #184]	; (800b500 <HAL_TIM_MspPostInit+0x274>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d11e      	bne.n	800b488 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b44a:	2300      	movs	r3, #0
 800b44c:	613b      	str	r3, [r7, #16]
 800b44e:	4b23      	ldr	r3, [pc, #140]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b452:	4a22      	ldr	r2, [pc, #136]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b454:	f043 0304 	orr.w	r3, r3, #4
 800b458:	6313      	str	r3, [r2, #48]	; 0x30
 800b45a:	4b20      	ldr	r3, [pc, #128]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	613b      	str	r3, [r7, #16]
 800b464:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR8_Pin;
 800b466:	2340      	movs	r3, #64	; 0x40
 800b468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b46a:	2302      	movs	r3, #2
 800b46c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b472:	2300      	movs	r3, #0
 800b474:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800b476:	2303      	movs	r3, #3
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MOTOR8_GPIO_Port, &GPIO_InitStruct);
 800b47a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b47e:	4619      	mov	r1, r3
 800b480:	481b      	ldr	r0, [pc, #108]	; (800b4f0 <HAL_TIM_MspPostInit+0x264>)
 800b482:	f001 fa7b 	bl	800c97c <HAL_GPIO_Init>
}
 800b486:	e023      	b.n	800b4d0 <HAL_TIM_MspPostInit+0x244>
  else if(timHandle->Instance==TIM12)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a1d      	ldr	r2, [pc, #116]	; (800b504 <HAL_TIM_MspPostInit+0x278>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d11e      	bne.n	800b4d0 <HAL_TIM_MspPostInit+0x244>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	4b11      	ldr	r3, [pc, #68]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49a:	4a10      	ldr	r2, [pc, #64]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b49c:	f043 0302 	orr.w	r3, r3, #2
 800b4a0:	6313      	str	r3, [r2, #48]	; 0x30
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	; (800b4dc <HAL_TIM_MspPostInit+0x250>)
 800b4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO5_Pin|SERVO6_Pin;
 800b4ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800b4c0:	2309      	movs	r3, #9
 800b4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4808      	ldr	r0, [pc, #32]	; (800b4ec <HAL_TIM_MspPostInit+0x260>)
 800b4cc:	f001 fa56 	bl	800c97c <HAL_GPIO_Init>
}
 800b4d0:	bf00      	nop
 800b4d2:	3740      	adds	r7, #64	; 0x40
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	40010000 	.word	0x40010000
 800b4dc:	40023800 	.word	0x40023800
 800b4e0:	40021000 	.word	0x40021000
 800b4e4:	40000400 	.word	0x40000400
 800b4e8:	40020000 	.word	0x40020000
 800b4ec:	40020400 	.word	0x40020400
 800b4f0:	40020800 	.word	0x40020800
 800b4f4:	40000800 	.word	0x40000800
 800b4f8:	40020c00 	.word	0x40020c00
 800b4fc:	40000c00 	.word	0x40000c00
 800b500:	40010400 	.word	0x40010400
 800b504:	40001800 	.word	0x40001800

0800b508 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 800b50c:	4b12      	ldr	r3, [pc, #72]	; (800b558 <MX_UART7_Init+0x50>)
 800b50e:	4a13      	ldr	r2, [pc, #76]	; (800b55c <MX_UART7_Init+0x54>)
 800b510:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 800b512:	4b11      	ldr	r3, [pc, #68]	; (800b558 <MX_UART7_Init+0x50>)
 800b514:	4a12      	ldr	r2, [pc, #72]	; (800b560 <MX_UART7_Init+0x58>)
 800b516:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 800b518:	4b0f      	ldr	r3, [pc, #60]	; (800b558 <MX_UART7_Init+0x50>)
 800b51a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b51e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 800b520:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <MX_UART7_Init+0x50>)
 800b522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b526:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 800b528:	4b0b      	ldr	r3, [pc, #44]	; (800b558 <MX_UART7_Init+0x50>)
 800b52a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b52e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800b530:	4b09      	ldr	r3, [pc, #36]	; (800b558 <MX_UART7_Init+0x50>)
 800b532:	220c      	movs	r2, #12
 800b534:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b536:	4b08      	ldr	r3, [pc, #32]	; (800b558 <MX_UART7_Init+0x50>)
 800b538:	2200      	movs	r2, #0
 800b53a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <MX_UART7_Init+0x50>)
 800b53e:	2200      	movs	r2, #0
 800b540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800b542:	4805      	ldr	r0, [pc, #20]	; (800b558 <MX_UART7_Init+0x50>)
 800b544:	f007 fec8 	bl	80132d8 <HAL_UART_Init>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 800b54e:	f7fe fe05 	bl	800a15c <Error_Handler>
  }

}
 800b552:	bf00      	nop
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	2000cba8 	.word	0x2000cba8
 800b55c:	40007800 	.word	0x40007800
 800b560:	000186a0 	.word	0x000186a0

0800b564 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b56a:	4a12      	ldr	r2, [pc, #72]	; (800b5b4 <MX_UART8_Init+0x50>)
 800b56c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 800b56e:	4b10      	ldr	r3, [pc, #64]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b570:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800b574:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800b576:	4b0e      	ldr	r3, [pc, #56]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b578:	2200      	movs	r2, #0
 800b57a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800b57c:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b57e:	2200      	movs	r2, #0
 800b580:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800b582:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b584:	2200      	movs	r2, #0
 800b586:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800b588:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b58a:	220c      	movs	r2, #12
 800b58c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b58e:	4b08      	ldr	r3, [pc, #32]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b590:	2200      	movs	r2, #0
 800b592:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800b594:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b596:	2200      	movs	r2, #0
 800b598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800b59a:	4805      	ldr	r0, [pc, #20]	; (800b5b0 <MX_UART8_Init+0x4c>)
 800b59c:	f007 fe9c 	bl	80132d8 <HAL_UART_Init>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800b5a6:	f7fe fdd9 	bl	800a15c <Error_Handler>
  }

}
 800b5aa:	bf00      	nop
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	2000cce8 	.word	0x2000cce8
 800b5b4:	40007c00 	.word	0x40007c00

0800b5b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800b5bc:	4b11      	ldr	r3, [pc, #68]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5be:	4a12      	ldr	r2, [pc, #72]	; (800b608 <MX_USART2_UART_Init+0x50>)
 800b5c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b5c2:	4b10      	ldr	r3, [pc, #64]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b5c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b5ca:	4b0e      	ldr	r3, [pc, #56]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b5d0:	4b0c      	ldr	r3, [pc, #48]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b5d6:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5de:	220c      	movs	r2, #12
 800b5e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800b5e2:	4b08      	ldr	r3, [pc, #32]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b5e8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b5ea:	4b06      	ldr	r3, [pc, #24]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b5f0:	4804      	ldr	r0, [pc, #16]	; (800b604 <MX_USART2_UART_Init+0x4c>)
 800b5f2:	f007 fe71 	bl	80132d8 <HAL_UART_Init>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800b5fc:	f7fe fdae 	bl	800a15c <Error_Handler>
  }

}
 800b600:	bf00      	nop
 800b602:	bd80      	pop	{r7, pc}
 800b604:	2000cd28 	.word	0x2000cd28
 800b608:	40004400 	.word	0x40004400

0800b60c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800b610:	4b11      	ldr	r3, [pc, #68]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b612:	4a12      	ldr	r2, [pc, #72]	; (800b65c <MX_USART3_UART_Init+0x50>)
 800b614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800b616:	4b10      	ldr	r3, [pc, #64]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b618:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800b61c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b61e:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b620:	2200      	movs	r2, #0
 800b622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b624:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b626:	2200      	movs	r2, #0
 800b628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b62a:	4b0b      	ldr	r3, [pc, #44]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b632:	220c      	movs	r2, #12
 800b634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b636:	4b08      	ldr	r3, [pc, #32]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b638:	2200      	movs	r2, #0
 800b63a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b63e:	2200      	movs	r2, #0
 800b640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b642:	4805      	ldr	r0, [pc, #20]	; (800b658 <MX_USART3_UART_Init+0x4c>)
 800b644:	f007 fe48 	bl	80132d8 <HAL_UART_Init>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800b64e:	f7fe fd85 	bl	800a15c <Error_Handler>
  }

}
 800b652:	bf00      	nop
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	2000cbe8 	.word	0x2000cbe8
 800b65c:	40004800 	.word	0x40004800

0800b660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b090      	sub	sp, #64	; 0x40
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	605a      	str	r2, [r3, #4]
 800b672:	609a      	str	r2, [r3, #8]
 800b674:	60da      	str	r2, [r3, #12]
 800b676:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a8c      	ldr	r2, [pc, #560]	; (800b8b0 <HAL_UART_MspInit+0x250>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d15c      	bne.n	800b73c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800b682:	2300      	movs	r3, #0
 800b684:	62bb      	str	r3, [r7, #40]	; 0x28
 800b686:	4b8b      	ldr	r3, [pc, #556]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	4a8a      	ldr	r2, [pc, #552]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b68c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b690:	6413      	str	r3, [r2, #64]	; 0x40
 800b692:	4b88      	ldr	r3, [pc, #544]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b696:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b69a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b69e:	2300      	movs	r3, #0
 800b6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6a2:	4b84      	ldr	r3, [pc, #528]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a6:	4a83      	ldr	r2, [pc, #524]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b6a8:	f043 0310 	orr.w	r3, r3, #16
 800b6ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ae:	4b81      	ldr	r3, [pc, #516]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b2:	f003 0310 	and.w	r3, r3, #16
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 800b6ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b6be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800b6cc:	2308      	movs	r3, #8
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b6d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4878      	ldr	r0, [pc, #480]	; (800b8b8 <HAL_UART_MspInit+0x258>)
 800b6d8:	f001 f950 	bl	800c97c <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800b6dc:	4b77      	ldr	r3, [pc, #476]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b6de:	4a78      	ldr	r2, [pc, #480]	; (800b8c0 <HAL_UART_MspInit+0x260>)
 800b6e0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800b6e2:	4b76      	ldr	r3, [pc, #472]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b6e4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800b6e8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6ea:	4b74      	ldr	r3, [pc, #464]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b6f0:	4b72      	ldr	r3, [pc, #456]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b6f6:	4b71      	ldr	r3, [pc, #452]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b6f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6fc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b6fe:	4b6f      	ldr	r3, [pc, #444]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b700:	2200      	movs	r2, #0
 800b702:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b704:	4b6d      	ldr	r3, [pc, #436]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b706:	2200      	movs	r2, #0
 800b708:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800b70a:	4b6c      	ldr	r3, [pc, #432]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b70c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b710:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b712:	4b6a      	ldr	r3, [pc, #424]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b714:	2200      	movs	r2, #0
 800b716:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b718:	4b68      	ldr	r3, [pc, #416]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800b71e:	4867      	ldr	r0, [pc, #412]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b720:	f000 fd82 	bl	800c228 <HAL_DMA_Init>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800b72a:	f7fe fd17 	bl	800a15c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a62      	ldr	r2, [pc, #392]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b732:	635a      	str	r2, [r3, #52]	; 0x34
 800b734:	4a61      	ldr	r2, [pc, #388]	; (800b8bc <HAL_UART_MspInit+0x25c>)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b73a:	e101      	b.n	800b940 <HAL_UART_MspInit+0x2e0>
  else if(uartHandle->Instance==UART8)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a60      	ldr	r2, [pc, #384]	; (800b8c4 <HAL_UART_MspInit+0x264>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d15b      	bne.n	800b7fe <HAL_UART_MspInit+0x19e>
    __HAL_RCC_UART8_CLK_ENABLE();
 800b746:	2300      	movs	r3, #0
 800b748:	623b      	str	r3, [r7, #32]
 800b74a:	4b5a      	ldr	r3, [pc, #360]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74e:	4a59      	ldr	r2, [pc, #356]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b754:	6413      	str	r3, [r2, #64]	; 0x40
 800b756:	4b57      	ldr	r3, [pc, #348]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b75e:	623b      	str	r3, [r7, #32]
 800b760:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b762:	2300      	movs	r3, #0
 800b764:	61fb      	str	r3, [r7, #28]
 800b766:	4b53      	ldr	r3, [pc, #332]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76a:	4a52      	ldr	r2, [pc, #328]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b76c:	f043 0310 	orr.w	r3, r3, #16
 800b770:	6313      	str	r3, [r2, #48]	; 0x30
 800b772:	4b50      	ldr	r3, [pc, #320]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b776:	f003 0310 	and.w	r3, r3, #16
 800b77a:	61fb      	str	r3, [r7, #28]
 800b77c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART8_RX_Pin|UART8_TX_Pin;
 800b77e:	2303      	movs	r3, #3
 800b780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b782:	2302      	movs	r3, #2
 800b784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b786:	2301      	movs	r3, #1
 800b788:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b78a:	2303      	movs	r3, #3
 800b78c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800b78e:	2308      	movs	r3, #8
 800b790:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b796:	4619      	mov	r1, r3
 800b798:	4847      	ldr	r0, [pc, #284]	; (800b8b8 <HAL_UART_MspInit+0x258>)
 800b79a:	f001 f8ef 	bl	800c97c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 800b79e:	4b4a      	ldr	r3, [pc, #296]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7a0:	4a4a      	ldr	r2, [pc, #296]	; (800b8cc <HAL_UART_MspInit+0x26c>)
 800b7a2:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800b7a4:	4b48      	ldr	r3, [pc, #288]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7a6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800b7aa:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7ac:	4b46      	ldr	r3, [pc, #280]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7b2:	4b45      	ldr	r3, [pc, #276]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b7b8:	4b43      	ldr	r3, [pc, #268]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7be:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7c0:	4b41      	ldr	r3, [pc, #260]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7c6:	4b40      	ldr	r3, [pc, #256]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 800b7cc:	4b3e      	ldr	r3, [pc, #248]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7d2:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b7d4:	4b3c      	ldr	r3, [pc, #240]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b7da:	4b3b      	ldr	r3, [pc, #236]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800b7e0:	4839      	ldr	r0, [pc, #228]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7e2:	f000 fd21 	bl	800c228 <HAL_DMA_Init>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800b7ec:	f7fe fcb6 	bl	800a15c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a35      	ldr	r2, [pc, #212]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7f4:	635a      	str	r2, [r3, #52]	; 0x34
 800b7f6:	4a34      	ldr	r2, [pc, #208]	; (800b8c8 <HAL_UART_MspInit+0x268>)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b7fc:	e0a0      	b.n	800b940 <HAL_UART_MspInit+0x2e0>
  else if(uartHandle->Instance==USART2)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a33      	ldr	r2, [pc, #204]	; (800b8d0 <HAL_UART_MspInit+0x270>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d169      	bne.n	800b8dc <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b808:	2300      	movs	r3, #0
 800b80a:	61bb      	str	r3, [r7, #24]
 800b80c:	4b29      	ldr	r3, [pc, #164]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b810:	4a28      	ldr	r2, [pc, #160]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b816:	6413      	str	r3, [r2, #64]	; 0x40
 800b818:	4b26      	ldr	r3, [pc, #152]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b820:	61bb      	str	r3, [r7, #24]
 800b822:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	4b22      	ldr	r3, [pc, #136]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82c:	4a21      	ldr	r2, [pc, #132]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b82e:	f043 0301 	orr.w	r3, r3, #1
 800b832:	6313      	str	r3, [r2, #48]	; 0x30
 800b834:	4b1f      	ldr	r3, [pc, #124]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b840:	2300      	movs	r3, #0
 800b842:	613b      	str	r3, [r7, #16]
 800b844:	4b1b      	ldr	r3, [pc, #108]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b848:	4a1a      	ldr	r2, [pc, #104]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b84a:	f043 0308 	orr.w	r3, r3, #8
 800b84e:	6313      	str	r3, [r2, #48]	; 0x30
 800b850:	4b18      	ldr	r3, [pc, #96]	; (800b8b4 <HAL_UART_MspInit+0x254>)
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	f003 0308 	and.w	r3, r3, #8
 800b858:	613b      	str	r3, [r7, #16]
 800b85a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART2_CTS_Pin|USART2_RX_Pin;
 800b85c:	2309      	movs	r3, #9
 800b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b860:	2302      	movs	r3, #2
 800b862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b864:	2300      	movs	r3, #0
 800b866:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b868:	2303      	movs	r3, #3
 800b86a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b86c:	2307      	movs	r3, #7
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b874:	4619      	mov	r1, r3
 800b876:	4817      	ldr	r0, [pc, #92]	; (800b8d4 <HAL_UART_MspInit+0x274>)
 800b878:	f001 f880 	bl	800c97c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_RTS_Pin|USART2_TX_Pin;
 800b87c:	2330      	movs	r3, #48	; 0x30
 800b87e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b880:	2302      	movs	r3, #2
 800b882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b884:	2300      	movs	r3, #0
 800b886:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b888:	2303      	movs	r3, #3
 800b88a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b88c:	2307      	movs	r3, #7
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b894:	4619      	mov	r1, r3
 800b896:	4810      	ldr	r0, [pc, #64]	; (800b8d8 <HAL_UART_MspInit+0x278>)
 800b898:	f001 f870 	bl	800c97c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 800b89c:	2200      	movs	r2, #0
 800b89e:	210a      	movs	r1, #10
 800b8a0:	2026      	movs	r0, #38	; 0x26
 800b8a2:	f000 fc97 	bl	800c1d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b8a6:	2026      	movs	r0, #38	; 0x26
 800b8a8:	f000 fcb0 	bl	800c20c <HAL_NVIC_EnableIRQ>
}
 800b8ac:	e048      	b.n	800b940 <HAL_UART_MspInit+0x2e0>
 800b8ae:	bf00      	nop
 800b8b0:	40007800 	.word	0x40007800
 800b8b4:	40023800 	.word	0x40023800
 800b8b8:	40021000 	.word	0x40021000
 800b8bc:	2000cc28 	.word	0x2000cc28
 800b8c0:	40026058 	.word	0x40026058
 800b8c4:	40007c00 	.word	0x40007c00
 800b8c8:	2000cc88 	.word	0x2000cc88
 800b8cc:	400260a0 	.word	0x400260a0
 800b8d0:	40004400 	.word	0x40004400
 800b8d4:	40020000 	.word	0x40020000
 800b8d8:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a19      	ldr	r2, [pc, #100]	; (800b948 <HAL_UART_MspInit+0x2e8>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d12c      	bne.n	800b940 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	4b18      	ldr	r3, [pc, #96]	; (800b94c <HAL_UART_MspInit+0x2ec>)
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ee:	4a17      	ldr	r2, [pc, #92]	; (800b94c <HAL_UART_MspInit+0x2ec>)
 800b8f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b8f6:	4b15      	ldr	r3, [pc, #84]	; (800b94c <HAL_UART_MspInit+0x2ec>)
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8fe:	60fb      	str	r3, [r7, #12]
 800b900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b902:	2300      	movs	r3, #0
 800b904:	60bb      	str	r3, [r7, #8]
 800b906:	4b11      	ldr	r3, [pc, #68]	; (800b94c <HAL_UART_MspInit+0x2ec>)
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	4a10      	ldr	r2, [pc, #64]	; (800b94c <HAL_UART_MspInit+0x2ec>)
 800b90c:	f043 0308 	orr.w	r3, r3, #8
 800b910:	6313      	str	r3, [r2, #48]	; 0x30
 800b912:	4b0e      	ldr	r3, [pc, #56]	; (800b94c <HAL_UART_MspInit+0x2ec>)
 800b914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b916:	f003 0308 	and.w	r3, r3, #8
 800b91a:	60bb      	str	r3, [r7, #8]
 800b91c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b91e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b924:	2302      	movs	r3, #2
 800b926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b928:	2300      	movs	r3, #0
 800b92a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b92c:	2303      	movs	r3, #3
 800b92e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b930:	2307      	movs	r3, #7
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b938:	4619      	mov	r1, r3
 800b93a:	4805      	ldr	r0, [pc, #20]	; (800b950 <HAL_UART_MspInit+0x2f0>)
 800b93c:	f001 f81e 	bl	800c97c <HAL_GPIO_Init>
}
 800b940:	bf00      	nop
 800b942:	3740      	adds	r7, #64	; 0x40
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	40004800 	.word	0x40004800
 800b94c:	40023800 	.word	0x40023800
 800b950:	40020c00 	.word	0x40020c00

0800b954 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b958:	4b14      	ldr	r3, [pc, #80]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b95a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b95e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b960:	4b12      	ldr	r3, [pc, #72]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b962:	2204      	movs	r2, #4
 800b964:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b966:	4b11      	ldr	r3, [pc, #68]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b968:	2202      	movs	r2, #2
 800b96a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b96c:	4b0f      	ldr	r3, [pc, #60]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b96e:	2200      	movs	r2, #0
 800b970:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b972:	4b0e      	ldr	r3, [pc, #56]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b974:	2202      	movs	r2, #2
 800b976:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b978:	4b0c      	ldr	r3, [pc, #48]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b97e:	4b0b      	ldr	r3, [pc, #44]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b980:	2200      	movs	r2, #0
 800b982:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b984:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b986:	2200      	movs	r2, #0
 800b988:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b98a:	4b08      	ldr	r3, [pc, #32]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b98c:	2201      	movs	r2, #1
 800b98e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b992:	2200      	movs	r2, #0
 800b994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b996:	4805      	ldr	r0, [pc, #20]	; (800b9ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b998:	f004 f918 	bl	800fbcc <HAL_PCD_Init>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800b9a2:	f7fe fbdb 	bl	800a15c <Error_Handler>
  }

}
 800b9a6:	bf00      	nop
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	2000cd68 	.word	0x2000cd68

0800b9b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	; 0x28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9b8:	f107 0314 	add.w	r3, r7, #20
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	605a      	str	r2, [r3, #4]
 800b9c2:	609a      	str	r2, [r3, #8]
 800b9c4:	60da      	str	r2, [r3, #12]
 800b9c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9d0:	d13f      	bne.n	800ba52 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	613b      	str	r3, [r7, #16]
 800b9d6:	4b21      	ldr	r3, [pc, #132]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800b9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9da:	4a20      	ldr	r2, [pc, #128]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800b9dc:	f043 0301 	orr.w	r3, r3, #1
 800b9e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b9e2:	4b1e      	ldr	r3, [pc, #120]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800b9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	613b      	str	r3, [r7, #16]
 800b9ec:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 800b9ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b9f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba00:	230a      	movs	r3, #10
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba04:	f107 0314 	add.w	r3, r7, #20
 800ba08:	4619      	mov	r1, r3
 800ba0a:	4815      	ldr	r0, [pc, #84]	; (800ba60 <HAL_PCD_MspInit+0xb0>)
 800ba0c:	f000 ffb6 	bl	800c97c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ba10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ba1e:	f107 0314 	add.w	r3, r7, #20
 800ba22:	4619      	mov	r1, r3
 800ba24:	480e      	ldr	r0, [pc, #56]	; (800ba60 <HAL_PCD_MspInit+0xb0>)
 800ba26:	f000 ffa9 	bl	800c97c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba2a:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800ba2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2e:	4a0b      	ldr	r2, [pc, #44]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800ba30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba34:	6353      	str	r3, [r2, #52]	; 0x34
 800ba36:	2300      	movs	r3, #0
 800ba38:	60fb      	str	r3, [r7, #12]
 800ba3a:	4b08      	ldr	r3, [pc, #32]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800ba3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba3e:	4a07      	ldr	r2, [pc, #28]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800ba40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba44:	6453      	str	r3, [r2, #68]	; 0x44
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <HAL_PCD_MspInit+0xac>)
 800ba48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba4e:	60fb      	str	r3, [r7, #12]
 800ba50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba52:	bf00      	nop
 800ba54:	3728      	adds	r7, #40	; 0x28
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	40023800 	.word	0x40023800
 800ba60:	40020000 	.word	0x40020000

0800ba64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800ba64:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ba9c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ba68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ba6a:	e003      	b.n	800ba74 <LoopCopyDataInit>

0800ba6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ba6c:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ba6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ba70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ba72:	3104      	adds	r1, #4

0800ba74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ba74:	480b      	ldr	r0, [pc, #44]	; (800baa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ba78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ba7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ba7c:	d3f6      	bcc.n	800ba6c <CopyDataInit>
  ldr  r2, =_sbss
 800ba7e:	4a0b      	ldr	r2, [pc, #44]	; (800baac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ba80:	e002      	b.n	800ba88 <LoopFillZerobss>

0800ba82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ba82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ba84:	f842 3b04 	str.w	r3, [r2], #4

0800ba88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ba88:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ba8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ba8c:	d3f9      	bcc.n	800ba82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ba8e:	f7fe ff2d 	bl	800a8ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ba92:	f011 fe57 	bl	801d744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ba96:	f7fe fa3f 	bl	8009f18 <main>
  bx  lr    
 800ba9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800ba9c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800baa0:	08022e84 	.word	0x08022e84
  ldr  r0, =_sdata
 800baa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800baa8:	200002b0 	.word	0x200002b0
  ldr  r2, =_sbss
 800baac:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 800bab0:	2000f228 	.word	0x2000f228

0800bab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bab4:	e7fe      	b.n	800bab4 <ADC_IRQHandler>
	...

0800bab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800babc:	4b0e      	ldr	r3, [pc, #56]	; (800baf8 <HAL_Init+0x40>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a0d      	ldr	r2, [pc, #52]	; (800baf8 <HAL_Init+0x40>)
 800bac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bac8:	4b0b      	ldr	r3, [pc, #44]	; (800baf8 <HAL_Init+0x40>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a0a      	ldr	r2, [pc, #40]	; (800baf8 <HAL_Init+0x40>)
 800bace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bad4:	4b08      	ldr	r3, [pc, #32]	; (800baf8 <HAL_Init+0x40>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a07      	ldr	r2, [pc, #28]	; (800baf8 <HAL_Init+0x40>)
 800bada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bae0:	2003      	movs	r0, #3
 800bae2:	f000 fb6c 	bl	800c1be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bae6:	2000      	movs	r0, #0
 800bae8:	f7fe fd22 	bl	800a530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800baec:	f7fe fcf4 	bl	800a4d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	40023c00 	.word	0x40023c00

0800bafc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bafc:	b480      	push	{r7}
 800bafe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bb00:	4b06      	ldr	r3, [pc, #24]	; (800bb1c <HAL_IncTick+0x20>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	461a      	mov	r2, r3
 800bb06:	4b06      	ldr	r3, [pc, #24]	; (800bb20 <HAL_IncTick+0x24>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	4a04      	ldr	r2, [pc, #16]	; (800bb20 <HAL_IncTick+0x24>)
 800bb0e:	6013      	str	r3, [r2, #0]
}
 800bb10:	bf00      	nop
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	200000d4 	.word	0x200000d4
 800bb20:	2000d170 	.word	0x2000d170

0800bb24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0
  return uwTick;
 800bb28:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <HAL_GetTick+0x14>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	2000d170 	.word	0x2000d170

0800bb3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bb44:	f7ff ffee 	bl	800bb24 <HAL_GetTick>
 800bb48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb54:	d005      	beq.n	800bb62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bb56:	4b09      	ldr	r3, [pc, #36]	; (800bb7c <HAL_Delay+0x40>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bb62:	bf00      	nop
 800bb64:	f7ff ffde 	bl	800bb24 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d8f7      	bhi.n	800bb64 <HAL_Delay+0x28>
  {
  }
}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	200000d4 	.word	0x200000d4

0800bb80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e033      	b.n	800bbfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d109      	bne.n	800bbb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7fd fe3c 	bl	800981c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb6:	f003 0310 	and.w	r3, r3, #16
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d118      	bne.n	800bbf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bbc6:	f023 0302 	bic.w	r3, r3, #2
 800bbca:	f043 0202 	orr.w	r2, r3, #2
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f94a 	bl	800be6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	f023 0303 	bic.w	r3, r3, #3
 800bbe6:	f043 0201 	orr.w	r2, r3, #1
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	641a      	str	r2, [r3, #64]	; 0x40
 800bbee:	e001      	b.n	800bbf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d101      	bne.n	800bc24 <HAL_ADC_ConfigChannel+0x1c>
 800bc20:	2302      	movs	r3, #2
 800bc22:	e113      	b.n	800be4c <HAL_ADC_ConfigChannel+0x244>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b09      	cmp	r3, #9
 800bc32:	d925      	bls.n	800bc80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68d9      	ldr	r1, [r3, #12]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	461a      	mov	r2, r3
 800bc42:	4613      	mov	r3, r2
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	4413      	add	r3, r2
 800bc48:	3b1e      	subs	r3, #30
 800bc4a:	2207      	movs	r2, #7
 800bc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc50:	43da      	mvns	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	400a      	ands	r2, r1
 800bc58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68d9      	ldr	r1, [r3, #12]
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	689a      	ldr	r2, [r3, #8]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	005b      	lsls	r3, r3, #1
 800bc70:	4403      	add	r3, r0
 800bc72:	3b1e      	subs	r3, #30
 800bc74:	409a      	lsls	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	430a      	orrs	r2, r1
 800bc7c:	60da      	str	r2, [r3, #12]
 800bc7e:	e022      	b.n	800bcc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	6919      	ldr	r1, [r3, #16]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4613      	mov	r3, r2
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	4413      	add	r3, r2
 800bc94:	2207      	movs	r2, #7
 800bc96:	fa02 f303 	lsl.w	r3, r2, r3
 800bc9a:	43da      	mvns	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	400a      	ands	r2, r1
 800bca2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6919      	ldr	r1, [r3, #16]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	689a      	ldr	r2, [r3, #8]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	4403      	add	r3, r0
 800bcbc:	409a      	lsls	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	2b06      	cmp	r3, #6
 800bccc:	d824      	bhi.n	800bd18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	3b05      	subs	r3, #5
 800bce0:	221f      	movs	r2, #31
 800bce2:	fa02 f303 	lsl.w	r3, r2, r3
 800bce6:	43da      	mvns	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	400a      	ands	r2, r1
 800bcee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	4613      	mov	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	3b05      	subs	r3, #5
 800bd0a:	fa00 f203 	lsl.w	r2, r0, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	430a      	orrs	r2, r1
 800bd14:	635a      	str	r2, [r3, #52]	; 0x34
 800bd16:	e04c      	b.n	800bdb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	2b0c      	cmp	r3, #12
 800bd1e:	d824      	bhi.n	800bd6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	3b23      	subs	r3, #35	; 0x23
 800bd32:	221f      	movs	r2, #31
 800bd34:	fa02 f303 	lsl.w	r3, r2, r3
 800bd38:	43da      	mvns	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	400a      	ands	r2, r1
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	4618      	mov	r0, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	3b23      	subs	r3, #35	; 0x23
 800bd5c:	fa00 f203 	lsl.w	r2, r0, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	631a      	str	r2, [r3, #48]	; 0x30
 800bd68:	e023      	b.n	800bdb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	3b41      	subs	r3, #65	; 0x41
 800bd7c:	221f      	movs	r2, #31
 800bd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd82:	43da      	mvns	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	400a      	ands	r2, r1
 800bd8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	4618      	mov	r0, r3
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	3b41      	subs	r3, #65	; 0x41
 800bda6:	fa00 f203 	lsl.w	r2, r0, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bdb2:	4b29      	ldr	r3, [pc, #164]	; (800be58 <HAL_ADC_ConfigChannel+0x250>)
 800bdb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a28      	ldr	r2, [pc, #160]	; (800be5c <HAL_ADC_ConfigChannel+0x254>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d10f      	bne.n	800bde0 <HAL_ADC_ConfigChannel+0x1d8>
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b12      	cmp	r3, #18
 800bdc6:	d10b      	bne.n	800bde0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a1d      	ldr	r2, [pc, #116]	; (800be5c <HAL_ADC_ConfigChannel+0x254>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d12b      	bne.n	800be42 <HAL_ADC_ConfigChannel+0x23a>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a1c      	ldr	r2, [pc, #112]	; (800be60 <HAL_ADC_ConfigChannel+0x258>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d003      	beq.n	800bdfc <HAL_ADC_ConfigChannel+0x1f4>
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b11      	cmp	r3, #17
 800bdfa:	d122      	bne.n	800be42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a11      	ldr	r2, [pc, #68]	; (800be60 <HAL_ADC_ConfigChannel+0x258>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d111      	bne.n	800be42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800be1e:	4b11      	ldr	r3, [pc, #68]	; (800be64 <HAL_ADC_ConfigChannel+0x25c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a11      	ldr	r2, [pc, #68]	; (800be68 <HAL_ADC_ConfigChannel+0x260>)
 800be24:	fba2 2303 	umull	r2, r3, r2, r3
 800be28:	0c9a      	lsrs	r2, r3, #18
 800be2a:	4613      	mov	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800be34:	e002      	b.n	800be3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	3b01      	subs	r3, #1
 800be3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1f9      	bne.n	800be36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	40012300 	.word	0x40012300
 800be5c:	40012000 	.word	0x40012000
 800be60:	10000012 	.word	0x10000012
 800be64:	200000cc 	.word	0x200000cc
 800be68:	431bde83 	.word	0x431bde83

0800be6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800be74:	4b79      	ldr	r3, [pc, #484]	; (800c05c <ADC_Init+0x1f0>)
 800be76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	431a      	orrs	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6859      	ldr	r1, [r3, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	021a      	lsls	r2, r3, #8
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6859      	ldr	r1, [r3, #4]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689a      	ldr	r2, [r3, #8]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6899      	ldr	r1, [r3, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68da      	ldr	r2, [r3, #12]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	430a      	orrs	r2, r1
 800bef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	4a58      	ldr	r2, [pc, #352]	; (800c060 <ADC_Init+0x1f4>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d022      	beq.n	800bf4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bf12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6899      	ldr	r1, [r3, #8]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	430a      	orrs	r2, r1
 800bf24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	689a      	ldr	r2, [r3, #8]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bf34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6899      	ldr	r1, [r3, #8]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	430a      	orrs	r2, r1
 800bf46:	609a      	str	r2, [r3, #8]
 800bf48:	e00f      	b.n	800bf6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bf58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689a      	ldr	r2, [r3, #8]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bf68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	689a      	ldr	r2, [r3, #8]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f022 0202 	bic.w	r2, r2, #2
 800bf78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6899      	ldr	r1, [r3, #8]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7e1b      	ldrb	r3, [r3, #24]
 800bf84:	005a      	lsls	r2, r3, #1
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01b      	beq.n	800bfd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bfa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800bfb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6859      	ldr	r1, [r3, #4]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	035a      	lsls	r2, r3, #13
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	430a      	orrs	r2, r1
 800bfcc:	605a      	str	r2, [r3, #4]
 800bfce:	e007      	b.n	800bfe0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bfee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	051a      	lsls	r2, r3, #20
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6899      	ldr	r1, [r3, #8]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c022:	025a      	lsls	r2, r3, #9
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	689a      	ldr	r2, [r3, #8]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c03a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6899      	ldr	r1, [r3, #8]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	029a      	lsls	r2, r3, #10
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	609a      	str	r2, [r3, #8]
}
 800c050:	bf00      	nop
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	40012300 	.word	0x40012300
 800c060:	0f000001 	.word	0x0f000001

0800c064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f003 0307 	and.w	r3, r3, #7
 800c072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c074:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <__NVIC_SetPriorityGrouping+0x44>)
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c080:	4013      	ands	r3, r2
 800c082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c08c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c096:	4a04      	ldr	r2, [pc, #16]	; (800c0a8 <__NVIC_SetPriorityGrouping+0x44>)
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	60d3      	str	r3, [r2, #12]
}
 800c09c:	bf00      	nop
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	e000ed00 	.word	0xe000ed00

0800c0ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c0b0:	4b04      	ldr	r3, [pc, #16]	; (800c0c4 <__NVIC_GetPriorityGrouping+0x18>)
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	0a1b      	lsrs	r3, r3, #8
 800c0b6:	f003 0307 	and.w	r3, r3, #7
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	e000ed00 	.word	0xe000ed00

0800c0c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	db0b      	blt.n	800c0f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0da:	79fb      	ldrb	r3, [r7, #7]
 800c0dc:	f003 021f 	and.w	r2, r3, #31
 800c0e0:	4907      	ldr	r1, [pc, #28]	; (800c100 <__NVIC_EnableIRQ+0x38>)
 800c0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0e6:	095b      	lsrs	r3, r3, #5
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	fa00 f202 	lsl.w	r2, r0, r2
 800c0ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c0f2:	bf00      	nop
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	e000e100 	.word	0xe000e100

0800c104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	4603      	mov	r3, r0
 800c10c:	6039      	str	r1, [r7, #0]
 800c10e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c114:	2b00      	cmp	r3, #0
 800c116:	db0a      	blt.n	800c12e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	490c      	ldr	r1, [pc, #48]	; (800c150 <__NVIC_SetPriority+0x4c>)
 800c11e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c122:	0112      	lsls	r2, r2, #4
 800c124:	b2d2      	uxtb	r2, r2
 800c126:	440b      	add	r3, r1
 800c128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c12c:	e00a      	b.n	800c144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	b2da      	uxtb	r2, r3
 800c132:	4908      	ldr	r1, [pc, #32]	; (800c154 <__NVIC_SetPriority+0x50>)
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	3b04      	subs	r3, #4
 800c13c:	0112      	lsls	r2, r2, #4
 800c13e:	b2d2      	uxtb	r2, r2
 800c140:	440b      	add	r3, r1
 800c142:	761a      	strb	r2, [r3, #24]
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	e000e100 	.word	0xe000e100
 800c154:	e000ed00 	.word	0xe000ed00

0800c158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c158:	b480      	push	{r7}
 800c15a:	b089      	sub	sp, #36	; 0x24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f003 0307 	and.w	r3, r3, #7
 800c16a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	f1c3 0307 	rsb	r3, r3, #7
 800c172:	2b04      	cmp	r3, #4
 800c174:	bf28      	it	cs
 800c176:	2304      	movcs	r3, #4
 800c178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	3304      	adds	r3, #4
 800c17e:	2b06      	cmp	r3, #6
 800c180:	d902      	bls.n	800c188 <NVIC_EncodePriority+0x30>
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	3b03      	subs	r3, #3
 800c186:	e000      	b.n	800c18a <NVIC_EncodePriority+0x32>
 800c188:	2300      	movs	r3, #0
 800c18a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c18c:	f04f 32ff 	mov.w	r2, #4294967295
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	fa02 f303 	lsl.w	r3, r2, r3
 800c196:	43da      	mvns	r2, r3
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	401a      	ands	r2, r3
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c1a0:	f04f 31ff 	mov.w	r1, #4294967295
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1aa:	43d9      	mvns	r1, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c1b0:	4313      	orrs	r3, r2
         );
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3724      	adds	r7, #36	; 0x24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff ff4c 	bl	800c064 <__NVIC_SetPriorityGrouping>
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c1e6:	f7ff ff61 	bl	800c0ac <__NVIC_GetPriorityGrouping>
 800c1ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	68b9      	ldr	r1, [r7, #8]
 800c1f0:	6978      	ldr	r0, [r7, #20]
 800c1f2:	f7ff ffb1 	bl	800c158 <NVIC_EncodePriority>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff ff80 	bl	800c104 <__NVIC_SetPriority>
}
 800c204:	bf00      	nop
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff ff54 	bl	800c0c8 <__NVIC_EnableIRQ>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c234:	f7ff fc76 	bl	800bb24 <HAL_GetTick>
 800c238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e099      	b.n	800c378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f022 0201 	bic.w	r2, r2, #1
 800c262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c264:	e00f      	b.n	800c286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c266:	f7ff fc5d 	bl	800bb24 <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	2b05      	cmp	r3, #5
 800c272:	d908      	bls.n	800c286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2220      	movs	r2, #32
 800c278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2203      	movs	r2, #3
 800c27e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e078      	b.n	800c378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e8      	bne.n	800c266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	4b38      	ldr	r3, [pc, #224]	; (800c380 <HAL_DMA_Init+0x158>)
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d107      	bne.n	800c2f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f023 0307 	bic.w	r3, r3, #7
 800c306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	4313      	orrs	r3, r2
 800c310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c316:	2b04      	cmp	r3, #4
 800c318:	d117      	bne.n	800c34a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	4313      	orrs	r3, r2
 800c322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00e      	beq.n	800c34a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 faab 	bl	800c888 <DMA_CheckFifoParam>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d008      	beq.n	800c34a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2240      	movs	r2, #64	; 0x40
 800c33c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c346:	2301      	movs	r3, #1
 800c348:	e016      	b.n	800c378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fa62 	bl	800c81c <DMA_CalcBaseAndBitshift>
 800c358:	4603      	mov	r3, r0
 800c35a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c360:	223f      	movs	r2, #63	; 0x3f
 800c362:	409a      	lsls	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3718      	adds	r7, #24
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	f010803f 	.word	0xf010803f

0800c384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c39a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_DMA_Start_IT+0x26>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e040      	b.n	800c42c <HAL_DMA_Start_IT+0xa8>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d12f      	bne.n	800c41e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	68b9      	ldr	r1, [r7, #8]
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f000 f9f4 	bl	800c7c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3dc:	223f      	movs	r2, #63	; 0x3f
 800c3de:	409a      	lsls	r2, r3
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0216 	orr.w	r2, r2, #22
 800c3f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d007      	beq.n	800c40c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0208 	orr.w	r2, r2, #8
 800c40a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f042 0201 	orr.w	r2, r2, #1
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	e005      	b.n	800c42a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c426:	2302      	movs	r3, #2
 800c428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c442:	b2db      	uxtb	r3, r3
 800c444:	2b02      	cmp	r3, #2
 800c446:	d004      	beq.n	800c452 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2280      	movs	r2, #128	; 0x80
 800c44c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e00c      	b.n	800c46c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2205      	movs	r2, #5
 800c456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f022 0201 	bic.w	r2, r2, #1
 800c468:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c484:	4b92      	ldr	r3, [pc, #584]	; (800c6d0 <HAL_DMA_IRQHandler+0x258>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a92      	ldr	r2, [pc, #584]	; (800c6d4 <HAL_DMA_IRQHandler+0x25c>)
 800c48a:	fba2 2303 	umull	r2, r3, r2, r3
 800c48e:	0a9b      	lsrs	r3, r3, #10
 800c490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4a2:	2208      	movs	r2, #8
 800c4a4:	409a      	lsls	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d01a      	beq.n	800c4e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d013      	beq.n	800c4e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f022 0204 	bic.w	r2, r2, #4
 800c4ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4d0:	2208      	movs	r2, #8
 800c4d2:	409a      	lsls	r2, r3
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4dc:	f043 0201 	orr.w	r2, r3, #1
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	409a      	lsls	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d012      	beq.n	800c51a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00b      	beq.n	800c51a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c506:	2201      	movs	r2, #1
 800c508:	409a      	lsls	r2, r3
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c512:	f043 0202 	orr.w	r2, r3, #2
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c51e:	2204      	movs	r2, #4
 800c520:	409a      	lsls	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4013      	ands	r3, r2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d012      	beq.n	800c550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 0302 	and.w	r3, r3, #2
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00b      	beq.n	800c550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c53c:	2204      	movs	r2, #4
 800c53e:	409a      	lsls	r2, r3
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c548:	f043 0204 	orr.w	r2, r3, #4
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c554:	2210      	movs	r2, #16
 800c556:	409a      	lsls	r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4013      	ands	r3, r2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d043      	beq.n	800c5e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 0308 	and.w	r3, r3, #8
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d03c      	beq.n	800c5e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c572:	2210      	movs	r2, #16
 800c574:	409a      	lsls	r2, r3
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c584:	2b00      	cmp	r3, #0
 800c586:	d018      	beq.n	800c5ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c592:	2b00      	cmp	r3, #0
 800c594:	d108      	bne.n	800c5a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d024      	beq.n	800c5e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	4798      	blx	r3
 800c5a6:	e01f      	b.n	800c5e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d01b      	beq.n	800c5e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	4798      	blx	r3
 800c5b8:	e016      	b.n	800c5e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d107      	bne.n	800c5d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f022 0208 	bic.w	r2, r2, #8
 800c5d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	409a      	lsls	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 808e 	beq.w	800c716 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0310 	and.w	r3, r3, #16
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 8086 	beq.w	800c716 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c60e:	2220      	movs	r2, #32
 800c610:	409a      	lsls	r2, r3
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b05      	cmp	r3, #5
 800c620:	d136      	bne.n	800c690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f022 0216 	bic.w	r2, r2, #22
 800c630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	695a      	ldr	r2, [r3, #20]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	d103      	bne.n	800c652 <HAL_DMA_IRQHandler+0x1da>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d007      	beq.n	800c662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f022 0208 	bic.w	r2, r2, #8
 800c660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c666:	223f      	movs	r2, #63	; 0x3f
 800c668:	409a      	lsls	r2, r3
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c682:	2b00      	cmp	r3, #0
 800c684:	d07d      	beq.n	800c782 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	4798      	blx	r3
        }
        return;
 800c68e:	e078      	b.n	800c782 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d01c      	beq.n	800c6d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d108      	bne.n	800c6be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d030      	beq.n	800c716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	4798      	blx	r3
 800c6bc:	e02b      	b.n	800c716 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d027      	beq.n	800c716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	4798      	blx	r3
 800c6ce:	e022      	b.n	800c716 <HAL_DMA_IRQHandler+0x29e>
 800c6d0:	200000cc 	.word	0x200000cc
 800c6d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10f      	bne.n	800c706 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f022 0210 	bic.w	r2, r2, #16
 800c6f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d003      	beq.n	800c716 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d032      	beq.n	800c784 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	d022      	beq.n	800c770 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2205      	movs	r2, #5
 800c72e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f022 0201 	bic.w	r2, r2, #1
 800c740:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	3301      	adds	r3, #1
 800c746:	60bb      	str	r3, [r7, #8]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d307      	bcc.n	800c75e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1f2      	bne.n	800c742 <HAL_DMA_IRQHandler+0x2ca>
 800c75c:	e000      	b.n	800c760 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c75e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c774:	2b00      	cmp	r3, #0
 800c776:	d005      	beq.n	800c784 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	4798      	blx	r3
 800c780:	e000      	b.n	800c784 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c782:	bf00      	nop
    }
  }
}
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop

0800c78c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c79a:	b2db      	uxtb	r3, r3
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c7dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	2b40      	cmp	r3, #64	; 0x40
 800c7ec:	d108      	bne.n	800c800 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c7fe:	e007      	b.n	800c810 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	60da      	str	r2, [r3, #12]
}
 800c810:	bf00      	nop
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	3b10      	subs	r3, #16
 800c82c:	4a14      	ldr	r2, [pc, #80]	; (800c880 <DMA_CalcBaseAndBitshift+0x64>)
 800c82e:	fba2 2303 	umull	r2, r3, r2, r3
 800c832:	091b      	lsrs	r3, r3, #4
 800c834:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c836:	4a13      	ldr	r2, [pc, #76]	; (800c884 <DMA_CalcBaseAndBitshift+0x68>)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b03      	cmp	r3, #3
 800c848:	d909      	bls.n	800c85e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	1d1a      	adds	r2, r3, #4
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	659a      	str	r2, [r3, #88]	; 0x58
 800c85c:	e007      	b.n	800c86e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c866:	f023 0303 	bic.w	r3, r3, #3
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	aaaaaaab 	.word	0xaaaaaaab
 800c884:	080226d0 	.word	0x080226d0

0800c888 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c898:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d11f      	bne.n	800c8e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b03      	cmp	r3, #3
 800c8a6:	d855      	bhi.n	800c954 <DMA_CheckFifoParam+0xcc>
 800c8a8:	a201      	add	r2, pc, #4	; (adr r2, 800c8b0 <DMA_CheckFifoParam+0x28>)
 800c8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ae:	bf00      	nop
 800c8b0:	0800c8c1 	.word	0x0800c8c1
 800c8b4:	0800c8d3 	.word	0x0800c8d3
 800c8b8:	0800c8c1 	.word	0x0800c8c1
 800c8bc:	0800c955 	.word	0x0800c955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d045      	beq.n	800c958 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8d0:	e042      	b.n	800c958 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c8da:	d13f      	bne.n	800c95c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8e0:	e03c      	b.n	800c95c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8ea:	d121      	bne.n	800c930 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d836      	bhi.n	800c960 <DMA_CheckFifoParam+0xd8>
 800c8f2:	a201      	add	r2, pc, #4	; (adr r2, 800c8f8 <DMA_CheckFifoParam+0x70>)
 800c8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f8:	0800c909 	.word	0x0800c909
 800c8fc:	0800c90f 	.word	0x0800c90f
 800c900:	0800c909 	.word	0x0800c909
 800c904:	0800c921 	.word	0x0800c921
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c908:	2301      	movs	r3, #1
 800c90a:	73fb      	strb	r3, [r7, #15]
      break;
 800c90c:	e02f      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c916:	2b00      	cmp	r3, #0
 800c918:	d024      	beq.n	800c964 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c91e:	e021      	b.n	800c964 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c928:	d11e      	bne.n	800c968 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c92e:	e01b      	b.n	800c968 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d902      	bls.n	800c93c <DMA_CheckFifoParam+0xb4>
 800c936:	2b03      	cmp	r3, #3
 800c938:	d003      	beq.n	800c942 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c93a:	e018      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	73fb      	strb	r3, [r7, #15]
      break;
 800c940:	e015      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00e      	beq.n	800c96c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	73fb      	strb	r3, [r7, #15]
      break;
 800c952:	e00b      	b.n	800c96c <DMA_CheckFifoParam+0xe4>
      break;
 800c954:	bf00      	nop
 800c956:	e00a      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      break;
 800c958:	bf00      	nop
 800c95a:	e008      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      break;
 800c95c:	bf00      	nop
 800c95e:	e006      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      break;
 800c960:	bf00      	nop
 800c962:	e004      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      break;
 800c964:	bf00      	nop
 800c966:	e002      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      break;   
 800c968:	bf00      	nop
 800c96a:	e000      	b.n	800c96e <DMA_CheckFifoParam+0xe6>
      break;
 800c96c:	bf00      	nop
    }
  } 
  
  return status; 
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b089      	sub	sp, #36	; 0x24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c98a:	2300      	movs	r3, #0
 800c98c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c98e:	2300      	movs	r3, #0
 800c990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c992:	2300      	movs	r3, #0
 800c994:	61fb      	str	r3, [r7, #28]
 800c996:	e177      	b.n	800cc88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c998:	2201      	movs	r2, #1
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	f040 8166 	bne.w	800cc82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d00b      	beq.n	800c9d6 <HAL_GPIO_Init+0x5a>
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d007      	beq.n	800c9d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c9ca:	2b11      	cmp	r3, #17
 800c9cc:	d003      	beq.n	800c9d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	2b12      	cmp	r3, #18
 800c9d4:	d130      	bne.n	800ca38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e6:	43db      	mvns	r3, r3
 800c9e8:	69ba      	ldr	r2, [r7, #24]
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9fa:	69ba      	ldr	r2, [r7, #24]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69ba      	ldr	r2, [r7, #24]
 800ca04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	fa02 f303 	lsl.w	r3, r2, r3
 800ca14:	43db      	mvns	r3, r3
 800ca16:	69ba      	ldr	r2, [r7, #24]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	091b      	lsrs	r3, r3, #4
 800ca22:	f003 0201 	and.w	r2, r3, #1
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	69ba      	ldr	r2, [r7, #24]
 800ca36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	2203      	movs	r2, #3
 800ca44:	fa02 f303 	lsl.w	r3, r2, r3
 800ca48:	43db      	mvns	r3, r3
 800ca4a:	69ba      	ldr	r2, [r7, #24]
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	689a      	ldr	r2, [r3, #8]
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5c:	69ba      	ldr	r2, [r7, #24]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	69ba      	ldr	r2, [r7, #24]
 800ca66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d003      	beq.n	800ca78 <HAL_GPIO_Init+0xfc>
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	2b12      	cmp	r3, #18
 800ca76:	d123      	bne.n	800cac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	08da      	lsrs	r2, r3, #3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3208      	adds	r2, #8
 800ca80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	f003 0307 	and.w	r3, r3, #7
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	220f      	movs	r2, #15
 800ca90:	fa02 f303 	lsl.w	r3, r2, r3
 800ca94:	43db      	mvns	r3, r3
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	4013      	ands	r3, r2
 800ca9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	691a      	ldr	r2, [r3, #16]
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	fa02 f303 	lsl.w	r3, r2, r3
 800caac:	69ba      	ldr	r2, [r7, #24]
 800caae:	4313      	orrs	r3, r2
 800cab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	08da      	lsrs	r2, r3, #3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	3208      	adds	r2, #8
 800caba:	69b9      	ldr	r1, [r7, #24]
 800cabc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	2203      	movs	r2, #3
 800cacc:	fa02 f303 	lsl.w	r3, r2, r3
 800cad0:	43db      	mvns	r3, r3
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	4013      	ands	r3, r2
 800cad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f003 0203 	and.w	r2, r3, #3
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	fa02 f303 	lsl.w	r3, r2, r3
 800cae8:	69ba      	ldr	r2, [r7, #24]
 800caea:	4313      	orrs	r3, r2
 800caec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 80c0 	beq.w	800cc82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb02:	2300      	movs	r3, #0
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	4b65      	ldr	r3, [pc, #404]	; (800cc9c <HAL_GPIO_Init+0x320>)
 800cb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb0a:	4a64      	ldr	r2, [pc, #400]	; (800cc9c <HAL_GPIO_Init+0x320>)
 800cb0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb10:	6453      	str	r3, [r2, #68]	; 0x44
 800cb12:	4b62      	ldr	r3, [pc, #392]	; (800cc9c <HAL_GPIO_Init+0x320>)
 800cb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cb1e:	4a60      	ldr	r2, [pc, #384]	; (800cca0 <HAL_GPIO_Init+0x324>)
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	089b      	lsrs	r3, r3, #2
 800cb24:	3302      	adds	r3, #2
 800cb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f003 0303 	and.w	r3, r3, #3
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	220f      	movs	r2, #15
 800cb36:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3a:	43db      	mvns	r3, r3
 800cb3c:	69ba      	ldr	r2, [r7, #24]
 800cb3e:	4013      	ands	r3, r2
 800cb40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a57      	ldr	r2, [pc, #348]	; (800cca4 <HAL_GPIO_Init+0x328>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d037      	beq.n	800cbba <HAL_GPIO_Init+0x23e>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a56      	ldr	r2, [pc, #344]	; (800cca8 <HAL_GPIO_Init+0x32c>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d031      	beq.n	800cbb6 <HAL_GPIO_Init+0x23a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a55      	ldr	r2, [pc, #340]	; (800ccac <HAL_GPIO_Init+0x330>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d02b      	beq.n	800cbb2 <HAL_GPIO_Init+0x236>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a54      	ldr	r2, [pc, #336]	; (800ccb0 <HAL_GPIO_Init+0x334>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d025      	beq.n	800cbae <HAL_GPIO_Init+0x232>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a53      	ldr	r2, [pc, #332]	; (800ccb4 <HAL_GPIO_Init+0x338>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d01f      	beq.n	800cbaa <HAL_GPIO_Init+0x22e>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a52      	ldr	r2, [pc, #328]	; (800ccb8 <HAL_GPIO_Init+0x33c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d019      	beq.n	800cba6 <HAL_GPIO_Init+0x22a>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a51      	ldr	r2, [pc, #324]	; (800ccbc <HAL_GPIO_Init+0x340>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d013      	beq.n	800cba2 <HAL_GPIO_Init+0x226>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a50      	ldr	r2, [pc, #320]	; (800ccc0 <HAL_GPIO_Init+0x344>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d00d      	beq.n	800cb9e <HAL_GPIO_Init+0x222>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a4f      	ldr	r2, [pc, #316]	; (800ccc4 <HAL_GPIO_Init+0x348>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d007      	beq.n	800cb9a <HAL_GPIO_Init+0x21e>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a4e      	ldr	r2, [pc, #312]	; (800ccc8 <HAL_GPIO_Init+0x34c>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d101      	bne.n	800cb96 <HAL_GPIO_Init+0x21a>
 800cb92:	2309      	movs	r3, #9
 800cb94:	e012      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cb96:	230a      	movs	r3, #10
 800cb98:	e010      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cb9a:	2308      	movs	r3, #8
 800cb9c:	e00e      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cb9e:	2307      	movs	r3, #7
 800cba0:	e00c      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cba2:	2306      	movs	r3, #6
 800cba4:	e00a      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cba6:	2305      	movs	r3, #5
 800cba8:	e008      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cbaa:	2304      	movs	r3, #4
 800cbac:	e006      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e004      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	e002      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e000      	b.n	800cbbc <HAL_GPIO_Init+0x240>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	69fa      	ldr	r2, [r7, #28]
 800cbbe:	f002 0203 	and.w	r2, r2, #3
 800cbc2:	0092      	lsls	r2, r2, #2
 800cbc4:	4093      	lsls	r3, r2
 800cbc6:	69ba      	ldr	r2, [r7, #24]
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cbcc:	4934      	ldr	r1, [pc, #208]	; (800cca0 <HAL_GPIO_Init+0x324>)
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	089b      	lsrs	r3, r3, #2
 800cbd2:	3302      	adds	r3, #2
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cbda:	4b3c      	ldr	r3, [pc, #240]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	43db      	mvns	r3, r3
 800cbe4:	69ba      	ldr	r2, [r7, #24]
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d003      	beq.n	800cbfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800cbf6:	69ba      	ldr	r2, [r7, #24]
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cbfe:	4a33      	ldr	r2, [pc, #204]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cc04:	4b31      	ldr	r3, [pc, #196]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	43db      	mvns	r3, r3
 800cc0e:	69ba      	ldr	r2, [r7, #24]
 800cc10:	4013      	ands	r3, r2
 800cc12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cc28:	4a28      	ldr	r2, [pc, #160]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cc2e:	4b27      	ldr	r3, [pc, #156]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	43db      	mvns	r3, r3
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800cc4a:	69ba      	ldr	r2, [r7, #24]
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cc52:	4a1e      	ldr	r2, [pc, #120]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cc58:	4b1c      	ldr	r3, [pc, #112]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	43db      	mvns	r3, r3
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	4013      	ands	r3, r2
 800cc66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d003      	beq.n	800cc7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cc7c:	4a13      	ldr	r2, [pc, #76]	; (800cccc <HAL_GPIO_Init+0x350>)
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	3301      	adds	r3, #1
 800cc86:	61fb      	str	r3, [r7, #28]
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	2b0f      	cmp	r3, #15
 800cc8c:	f67f ae84 	bls.w	800c998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cc90:	bf00      	nop
 800cc92:	3724      	adds	r7, #36	; 0x24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	40023800 	.word	0x40023800
 800cca0:	40013800 	.word	0x40013800
 800cca4:	40020000 	.word	0x40020000
 800cca8:	40020400 	.word	0x40020400
 800ccac:	40020800 	.word	0x40020800
 800ccb0:	40020c00 	.word	0x40020c00
 800ccb4:	40021000 	.word	0x40021000
 800ccb8:	40021400 	.word	0x40021400
 800ccbc:	40021800 	.word	0x40021800
 800ccc0:	40021c00 	.word	0x40021c00
 800ccc4:	40022000 	.word	0x40022000
 800ccc8:	40022400 	.word	0x40022400
 800cccc:	40013c00 	.word	0x40013c00

0800ccd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	691a      	ldr	r2, [r3, #16]
 800cce0:	887b      	ldrh	r3, [r7, #2]
 800cce2:	4013      	ands	r3, r2
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
 800ccec:	e001      	b.n	800ccf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	807b      	strh	r3, [r7, #2]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cd10:	787b      	ldrb	r3, [r7, #1]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d003      	beq.n	800cd1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cd16:	887a      	ldrh	r2, [r7, #2]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cd1c:	e003      	b.n	800cd26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cd1e:	887b      	ldrh	r3, [r7, #2]
 800cd20:	041a      	lsls	r2, r3, #16
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	619a      	str	r2, [r3, #24]
}
 800cd26:	bf00      	nop
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
	...

0800cd34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e11f      	b.n	800cf86 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d106      	bne.n	800cd60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7fd f80e 	bl	8009d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2224      	movs	r2, #36	; 0x24
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f022 0201 	bic.w	r2, r2, #1
 800cd76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cd98:	f003 fc70 	bl	801067c <HAL_RCC_GetPCLK1Freq>
 800cd9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	4a7b      	ldr	r2, [pc, #492]	; (800cf90 <HAL_I2C_Init+0x25c>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d807      	bhi.n	800cdb8 <HAL_I2C_Init+0x84>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4a7a      	ldr	r2, [pc, #488]	; (800cf94 <HAL_I2C_Init+0x260>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	bf94      	ite	ls
 800cdb0:	2301      	movls	r3, #1
 800cdb2:	2300      	movhi	r3, #0
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	e006      	b.n	800cdc6 <HAL_I2C_Init+0x92>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	4a77      	ldr	r2, [pc, #476]	; (800cf98 <HAL_I2C_Init+0x264>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	bf94      	ite	ls
 800cdc0:	2301      	movls	r3, #1
 800cdc2:	2300      	movhi	r3, #0
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e0db      	b.n	800cf86 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	4a72      	ldr	r2, [pc, #456]	; (800cf9c <HAL_I2C_Init+0x268>)
 800cdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd6:	0c9b      	lsrs	r3, r3, #18
 800cdd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6a1b      	ldr	r3, [r3, #32]
 800cdf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	4a64      	ldr	r2, [pc, #400]	; (800cf90 <HAL_I2C_Init+0x25c>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d802      	bhi.n	800ce08 <HAL_I2C_Init+0xd4>
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	3301      	adds	r3, #1
 800ce06:	e009      	b.n	800ce1c <HAL_I2C_Init+0xe8>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ce0e:	fb02 f303 	mul.w	r3, r2, r3
 800ce12:	4a63      	ldr	r2, [pc, #396]	; (800cfa0 <HAL_I2C_Init+0x26c>)
 800ce14:	fba2 2303 	umull	r2, r3, r2, r3
 800ce18:	099b      	lsrs	r3, r3, #6
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	6812      	ldr	r2, [r2, #0]
 800ce20:	430b      	orrs	r3, r1
 800ce22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	69db      	ldr	r3, [r3, #28]
 800ce2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ce2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	4956      	ldr	r1, [pc, #344]	; (800cf90 <HAL_I2C_Init+0x25c>)
 800ce38:	428b      	cmp	r3, r1
 800ce3a:	d80d      	bhi.n	800ce58 <HAL_I2C_Init+0x124>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	1e59      	subs	r1, r3, #1
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	bf38      	it	cc
 800ce54:	2304      	movcc	r3, #4
 800ce56:	e04f      	b.n	800cef8 <HAL_I2C_Init+0x1c4>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d111      	bne.n	800ce84 <HAL_I2C_Init+0x150>
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	1e58      	subs	r0, r3, #1
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6859      	ldr	r1, [r3, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	005b      	lsls	r3, r3, #1
 800ce6c:	440b      	add	r3, r1
 800ce6e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ce72:	3301      	adds	r3, #1
 800ce74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	bf0c      	ite	eq
 800ce7c:	2301      	moveq	r3, #1
 800ce7e:	2300      	movne	r3, #0
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	e012      	b.n	800ceaa <HAL_I2C_Init+0x176>
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	1e58      	subs	r0, r3, #1
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6859      	ldr	r1, [r3, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	440b      	add	r3, r1
 800ce92:	0099      	lsls	r1, r3, #2
 800ce94:	440b      	add	r3, r1
 800ce96:	fbb0 f3f3 	udiv	r3, r0, r3
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	bf0c      	ite	eq
 800cea4:	2301      	moveq	r3, #1
 800cea6:	2300      	movne	r3, #0
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <HAL_I2C_Init+0x17e>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e022      	b.n	800cef8 <HAL_I2C_Init+0x1c4>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10e      	bne.n	800ced8 <HAL_I2C_Init+0x1a4>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	1e58      	subs	r0, r3, #1
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6859      	ldr	r1, [r3, #4]
 800cec2:	460b      	mov	r3, r1
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	440b      	add	r3, r1
 800cec8:	fbb0 f3f3 	udiv	r3, r0, r3
 800cecc:	3301      	adds	r3, #1
 800cece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ced2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced6:	e00f      	b.n	800cef8 <HAL_I2C_Init+0x1c4>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	1e58      	subs	r0, r3, #1
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6859      	ldr	r1, [r3, #4]
 800cee0:	460b      	mov	r3, r1
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	440b      	add	r3, r1
 800cee6:	0099      	lsls	r1, r3, #2
 800cee8:	440b      	add	r3, r1
 800ceea:	fbb0 f3f3 	udiv	r3, r0, r3
 800ceee:	3301      	adds	r3, #1
 800cef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	6809      	ldr	r1, [r1, #0]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	69da      	ldr	r2, [r3, #28]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a1b      	ldr	r3, [r3, #32]
 800cf12:	431a      	orrs	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	430a      	orrs	r2, r1
 800cf1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800cf26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	6911      	ldr	r1, [r2, #16]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	68d2      	ldr	r2, [r2, #12]
 800cf32:	4311      	orrs	r1, r2
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	6812      	ldr	r2, [r2, #0]
 800cf38:	430b      	orrs	r3, r1
 800cf3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	695a      	ldr	r2, [r3, #20]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	430a      	orrs	r2, r1
 800cf56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f042 0201 	orr.w	r2, r2, #1
 800cf66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2220      	movs	r2, #32
 800cf72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	000186a0 	.word	0x000186a0
 800cf94:	001e847f 	.word	0x001e847f
 800cf98:	003d08ff 	.word	0x003d08ff
 800cf9c:	431bde83 	.word	0x431bde83
 800cfa0:	10624dd3 	.word	0x10624dd3

0800cfa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b088      	sub	sp, #32
 800cfa8:	af02      	add	r7, sp, #8
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	4608      	mov	r0, r1
 800cfae:	4611      	mov	r1, r2
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	817b      	strh	r3, [r7, #10]
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	813b      	strh	r3, [r7, #8]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cfbe:	f7fe fdb1 	bl	800bb24 <HAL_GetTick>
 800cfc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b20      	cmp	r3, #32
 800cfce:	f040 80d9 	bne.w	800d184 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	2319      	movs	r3, #25
 800cfd8:	2201      	movs	r2, #1
 800cfda:	496d      	ldr	r1, [pc, #436]	; (800d190 <HAL_I2C_Mem_Write+0x1ec>)
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f002 fb82 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	e0cc      	b.n	800d186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d101      	bne.n	800cffa <HAL_I2C_Mem_Write+0x56>
 800cff6:	2302      	movs	r3, #2
 800cff8:	e0c5      	b.n	800d186 <HAL_I2C_Mem_Write+0x1e2>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d007      	beq.n	800d020 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f042 0201 	orr.w	r2, r2, #1
 800d01e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d02e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2221      	movs	r2, #33	; 0x21
 800d034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2240      	movs	r2, #64	; 0x40
 800d03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6a3a      	ldr	r2, [r7, #32]
 800d04a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d056:	b29a      	uxth	r2, r3
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4a4d      	ldr	r2, [pc, #308]	; (800d194 <HAL_I2C_Mem_Write+0x1f0>)
 800d060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d062:	88f8      	ldrh	r0, [r7, #6]
 800d064:	893a      	ldrh	r2, [r7, #8]
 800d066:	8979      	ldrh	r1, [r7, #10]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	9301      	str	r3, [sp, #4]
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	4603      	mov	r3, r0
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f002 f82c 	bl	800f0d0 <I2C_RequestMemoryWrite>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d052      	beq.n	800d124 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e081      	b.n	800d186 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d082:	697a      	ldr	r2, [r7, #20]
 800d084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f002 fc03 	bl	800f892 <I2C_WaitOnTXEFlagUntilTimeout>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00d      	beq.n	800d0ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d096:	2b04      	cmp	r3, #4
 800d098:	d107      	bne.n	800d0aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e06b      	b.n	800d186 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	f003 0304 	and.w	r3, r3, #4
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	d11b      	bne.n	800d124 <HAL_I2C_Mem_Write+0x180>
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d017      	beq.n	800d124 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f8:	781a      	ldrb	r2, [r3, #0]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d10e:	3b01      	subs	r3, #1
 800d110:	b29a      	uxth	r2, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	3b01      	subs	r3, #1
 800d11e:	b29a      	uxth	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1aa      	bne.n	800d082 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f002 fbef 	bl	800f914 <I2C_WaitOnBTFFlagUntilTimeout>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00d      	beq.n	800d158 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d140:	2b04      	cmp	r3, #4
 800d142:	d107      	bne.n	800d154 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d152:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	e016      	b.n	800d186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2220      	movs	r2, #32
 800d16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	e000      	b.n	800d186 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d184:	2302      	movs	r3, #2
  }
}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	00100002 	.word	0x00100002
 800d194:	ffff0000 	.word	0xffff0000

0800d198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08c      	sub	sp, #48	; 0x30
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	817b      	strh	r3, [r7, #10]
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	813b      	strh	r3, [r7, #8]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d1b2:	f7fe fcb7 	bl	800bb24 <HAL_GetTick>
 800d1b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b20      	cmp	r3, #32
 800d1c2:	f040 8208 	bne.w	800d5d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	2319      	movs	r3, #25
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	497b      	ldr	r1, [pc, #492]	; (800d3bc <HAL_I2C_Mem_Read+0x224>)
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f002 fa88 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d1dc:	2302      	movs	r3, #2
 800d1de:	e1fb      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d101      	bne.n	800d1ee <HAL_I2C_Mem_Read+0x56>
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	e1f4      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0301 	and.w	r3, r3, #1
 800d200:	2b01      	cmp	r3, #1
 800d202:	d007      	beq.n	800d214 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f042 0201 	orr.w	r2, r2, #1
 800d212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2222      	movs	r2, #34	; 0x22
 800d228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2240      	movs	r2, #64	; 0x40
 800d230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d23e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	4a5b      	ldr	r2, [pc, #364]	; (800d3c0 <HAL_I2C_Mem_Read+0x228>)
 800d254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d256:	88f8      	ldrh	r0, [r7, #6]
 800d258:	893a      	ldrh	r2, [r7, #8]
 800d25a:	8979      	ldrh	r1, [r7, #10]
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	9301      	str	r3, [sp, #4]
 800d260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	4603      	mov	r3, r0
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f001 ffc6 	bl	800f1f8 <I2C_RequestMemoryRead>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e1b0      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d113      	bne.n	800d2a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d27e:	2300      	movs	r3, #0
 800d280:	623b      	str	r3, [r7, #32]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	623b      	str	r3, [r7, #32]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	623b      	str	r3, [r7, #32]
 800d292:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	e184      	b.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d11b      	bne.n	800d2e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2be:	2300      	movs	r3, #0
 800d2c0:	61fb      	str	r3, [r7, #28]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	61fb      	str	r3, [r7, #28]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	61fb      	str	r3, [r7, #28]
 800d2d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	e164      	b.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d11b      	bne.n	800d326 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d30c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d30e:	2300      	movs	r3, #0
 800d310:	61bb      	str	r3, [r7, #24]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	61bb      	str	r3, [r7, #24]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	61bb      	str	r3, [r7, #24]
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	e144      	b.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d326:	2300      	movs	r3, #0
 800d328:	617b      	str	r3, [r7, #20]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	695b      	ldr	r3, [r3, #20]
 800d330:	617b      	str	r3, [r7, #20]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	617b      	str	r3, [r7, #20]
 800d33a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d33c:	e138      	b.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d342:	2b03      	cmp	r3, #3
 800d344:	f200 80f1 	bhi.w	800d52a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d123      	bne.n	800d398 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f002 fb1e 	bl	800f996 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	e139      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	691a      	ldr	r2, [r3, #16]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	b2d2      	uxtb	r2, r2
 800d370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d380:	3b01      	subs	r3, #1
 800d382:	b29a      	uxth	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	3b01      	subs	r3, #1
 800d390:	b29a      	uxth	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d396:	e10b      	b.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d14e      	bne.n	800d43e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	4906      	ldr	r1, [pc, #24]	; (800d3c4 <HAL_I2C_Mem_Read+0x22c>)
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f002 f99b 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d008      	beq.n	800d3c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e10e      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
 800d3ba:	bf00      	nop
 800d3bc:	00100002 	.word	0x00100002
 800d3c0:	ffff0000 	.word	0xffff0000
 800d3c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	691a      	ldr	r2, [r3, #16]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e2:	b2d2      	uxtb	r2, r2
 800d3e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ea:	1c5a      	adds	r2, r3, #1
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	691a      	ldr	r2, [r3, #16]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d414:	b2d2      	uxtb	r2, r2
 800d416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d426:	3b01      	subs	r3, #1
 800d428:	b29a      	uxth	r2, r3
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d432:	b29b      	uxth	r3, r3
 800d434:	3b01      	subs	r3, #1
 800d436:	b29a      	uxth	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d43c:	e0b8      	b.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	2200      	movs	r2, #0
 800d446:	4966      	ldr	r1, [pc, #408]	; (800d5e0 <HAL_I2C_Mem_Read+0x448>)
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f002 f94c 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d001      	beq.n	800d458 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d454:	2301      	movs	r3, #1
 800d456:	e0bf      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	691a      	ldr	r2, [r3, #16]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d472:	b2d2      	uxtb	r2, r2
 800d474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d484:	3b01      	subs	r3, #1
 800d486:	b29a      	uxth	r2, r3
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d490:	b29b      	uxth	r3, r3
 800d492:	3b01      	subs	r3, #1
 800d494:	b29a      	uxth	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	494f      	ldr	r1, [pc, #316]	; (800d5e0 <HAL_I2C_Mem_Read+0x448>)
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f002 f91e 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e091      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	691a      	ldr	r2, [r3, #16]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	691a      	ldr	r2, [r3, #16]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	b2d2      	uxtb	r2, r2
 800d502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d512:	3b01      	subs	r3, #1
 800d514:	b29a      	uxth	r2, r3
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d51e:	b29b      	uxth	r3, r3
 800d520:	3b01      	subs	r3, #1
 800d522:	b29a      	uxth	r2, r3
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d528:	e042      	b.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d52c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f002 fa31 	bl	800f996 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e04c      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	691a      	ldr	r2, [r3, #16]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d55a:	3b01      	subs	r3, #1
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d566:	b29b      	uxth	r3, r3
 800d568:	3b01      	subs	r3, #1
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	f003 0304 	and.w	r3, r3, #4
 800d57a:	2b04      	cmp	r3, #4
 800d57c:	d118      	bne.n	800d5b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	691a      	ldr	r2, [r3, #16]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	b2d2      	uxtb	r2, r2
 800d58a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	1c5a      	adds	r2, r3, #1
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d59a:	3b01      	subs	r3, #1
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f47f aec2 	bne.w	800d33e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2220      	movs	r2, #32
 800d5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e000      	b.n	800d5d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d5d6:	2302      	movs	r3, #2
  }
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3728      	adds	r7, #40	; 0x28
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	00010004 	.word	0x00010004

0800d5e4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	817b      	strh	r3, [r7, #10]
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	813b      	strh	r3, [r7, #8]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d5fe:	2300      	movs	r3, #0
 800d600:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b20      	cmp	r3, #32
 800d60c:	f040 809a 	bne.w	800d744 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d610:	4b50      	ldr	r3, [pc, #320]	; (800d754 <HAL_I2C_Mem_Read_IT+0x170>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	08db      	lsrs	r3, r3, #3
 800d616:	4a50      	ldr	r2, [pc, #320]	; (800d758 <HAL_I2C_Mem_Read_IT+0x174>)
 800d618:	fba2 2303 	umull	r2, r3, r2, r3
 800d61c:	0a1a      	lsrs	r2, r3, #8
 800d61e:	4613      	mov	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4413      	add	r3, r2
 800d624:	009a      	lsls	r2, r3, #2
 800d626:	4413      	add	r3, r2
 800d628:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	3b01      	subs	r3, #1
 800d62e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d116      	bne.n	800d664 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2220      	movs	r2, #32
 800d640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d650:	f043 0220 	orr.w	r2, r3, #32
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	e070      	b.n	800d746 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	f003 0302 	and.w	r3, r3, #2
 800d66e:	2b02      	cmp	r3, #2
 800d670:	d0db      	beq.n	800d62a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d101      	bne.n	800d680 <HAL_I2C_Mem_Read_IT+0x9c>
 800d67c:	2302      	movs	r3, #2
 800d67e:	e062      	b.n	800d746 <HAL_I2C_Mem_Read_IT+0x162>
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b01      	cmp	r3, #1
 800d694:	d007      	beq.n	800d6a6 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f042 0201 	orr.w	r2, r2, #1
 800d6a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2222      	movs	r2, #34	; 0x22
 800d6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2240      	movs	r2, #64	; 0x40
 800d6c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6a3a      	ldr	r2, [r7, #32]
 800d6d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	4a1d      	ldr	r2, [pc, #116]	; (800d75c <HAL_I2C_Mem_Read_IT+0x178>)
 800d6e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d6e8:	897a      	ldrh	r2, [r7, #10]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d6ee:	893a      	ldrh	r2, [r7, #8]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d70e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d71e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d007      	beq.n	800d740 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685a      	ldr	r2, [r3, #4]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d73e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	e000      	b.n	800d746 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800d744:	2302      	movs	r3, #2
  }
}
 800d746:	4618      	mov	r0, r3
 800d748:	371c      	adds	r7, #28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	200000cc 	.word	0x200000cc
 800d758:	14f8b589 	.word	0x14f8b589
 800d75c:	ffff0000 	.word	0xffff0000

0800d760 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08c      	sub	sp, #48	; 0x30
 800d764:	af02      	add	r7, sp, #8
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	4608      	mov	r0, r1
 800d76a:	4611      	mov	r1, r2
 800d76c:	461a      	mov	r2, r3
 800d76e:	4603      	mov	r3, r0
 800d770:	817b      	strh	r3, [r7, #10]
 800d772:	460b      	mov	r3, r1
 800d774:	813b      	strh	r3, [r7, #8]
 800d776:	4613      	mov	r3, r2
 800d778:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d77a:	f7fe f9d3 	bl	800bb24 <HAL_GetTick>
 800d77e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d780:	2300      	movs	r3, #0
 800d782:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b20      	cmp	r3, #32
 800d78e:	f040 8123 	bne.w	800d9d8 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d792:	4b94      	ldr	r3, [pc, #592]	; (800d9e4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	08db      	lsrs	r3, r3, #3
 800d798:	4a93      	ldr	r2, [pc, #588]	; (800d9e8 <HAL_I2C_Mem_Read_DMA+0x288>)
 800d79a:	fba2 2303 	umull	r2, r3, r2, r3
 800d79e:	0a1a      	lsrs	r2, r3, #8
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	4413      	add	r3, r2
 800d7a6:	009a      	lsls	r2, r3, #2
 800d7a8:	4413      	add	r3, r2
 800d7aa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d116      	bne.n	800d7e6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2220      	movs	r2, #32
 800d7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d2:	f043 0220 	orr.w	r2, r3, #32
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e0f9      	b.n	800d9da <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	699b      	ldr	r3, [r3, #24]
 800d7ec:	f003 0302 	and.w	r3, r3, #2
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d0db      	beq.n	800d7ac <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d101      	bne.n	800d802 <HAL_I2C_Mem_Read_DMA+0xa2>
 800d7fe:	2302      	movs	r3, #2
 800d800:	e0eb      	b.n	800d9da <HAL_I2C_Mem_Read_DMA+0x27a>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b01      	cmp	r3, #1
 800d816:	d007      	beq.n	800d828 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f042 0201 	orr.w	r2, r2, #1
 800d826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2222      	movs	r2, #34	; 0x22
 800d83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2240      	movs	r2, #64	; 0x40
 800d844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d858:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d85e:	b29a      	uxth	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4a61      	ldr	r2, [pc, #388]	; (800d9ec <HAL_I2C_Mem_Read_DMA+0x28c>)
 800d868:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 8085 	beq.w	800d97e <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	4a5d      	ldr	r2, [pc, #372]	; (800d9f0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800d87a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d880:	4a5c      	ldr	r2, [pc, #368]	; (800d9f4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800d882:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d888:	2200      	movs	r2, #0
 800d88a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d890:	2200      	movs	r2, #0
 800d892:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d898:	2200      	movs	r2, #0
 800d89a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3310      	adds	r3, #16
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8ba:	f7fe fd63 	bl	800c384 <HAL_DMA_Start_IT>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800d8c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d144      	bne.n	800d956 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d8cc:	88f8      	ldrh	r0, [r7, #6]
 800d8ce:	893a      	ldrh	r2, [r7, #8]
 800d8d0:	8979      	ldrh	r1, [r7, #10]
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	2323      	movs	r3, #35	; 0x23
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4603      	mov	r3, r0
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f001 fc8b 	bl	800f1f8 <I2C_RequestMemoryRead>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e076      	b.n	800d9da <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d108      	bne.n	800d906 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	e007      	b.n	800d916 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d914:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d916:	2300      	movs	r3, #0
 800d918:	61bb      	str	r3, [r7, #24]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	61bb      	str	r3, [r7, #24]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	685a      	ldr	r2, [r3, #4]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d942:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	685a      	ldr	r2, [r3, #4]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d952:	605a      	str	r2, [r3, #4]
 800d954:	e03e      	b.n	800d9d4 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2220      	movs	r2, #32
 800d95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d96a:	f043 0210 	orr.w	r2, r3, #16
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e02d      	b.n	800d9da <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d97e:	88f8      	ldrh	r0, [r7, #6]
 800d980:	893a      	ldrh	r2, [r7, #8]
 800d982:	8979      	ldrh	r1, [r7, #10]
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	2323      	movs	r3, #35	; 0x23
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	4603      	mov	r3, r0
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f001 fc32 	bl	800f1f8 <I2C_RequestMemoryRead>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d001      	beq.n	800d99e <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e01d      	b.n	800d9da <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d99e:	2300      	movs	r3, #0
 800d9a0:	617b      	str	r3, [r7, #20]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	695b      	ldr	r3, [r3, #20]
 800d9a8:	617b      	str	r3, [r7, #20]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	617b      	str	r3, [r7, #20]
 800d9b2:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9c2:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2220      	movs	r2, #32
 800d9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	e000      	b.n	800d9da <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 800d9d8:	2302      	movs	r3, #2
  }
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3728      	adds	r7, #40	; 0x28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	200000cc 	.word	0x200000cc
 800d9e8:	14f8b589 	.word	0x14f8b589
 800d9ec:	ffff0000 	.word	0xffff0000
 800d9f0:	0800f3c5 	.word	0x0800f3c5
 800d9f4:	0800f56f 	.word	0x0800f56f

0800d9f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b088      	sub	sp, #32
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800da22:	7bfb      	ldrb	r3, [r7, #15]
 800da24:	2b10      	cmp	r3, #16
 800da26:	d003      	beq.n	800da30 <HAL_I2C_EV_IRQHandler+0x38>
 800da28:	7bfb      	ldrb	r3, [r7, #15]
 800da2a:	2b40      	cmp	r3, #64	; 0x40
 800da2c:	f040 80b6 	bne.w	800db9c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10d      	bne.n	800da66 <HAL_I2C_EV_IRQHandler+0x6e>
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800da50:	d003      	beq.n	800da5a <HAL_I2C_EV_IRQHandler+0x62>
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800da58:	d101      	bne.n	800da5e <HAL_I2C_EV_IRQHandler+0x66>
 800da5a:	2301      	movs	r3, #1
 800da5c:	e000      	b.n	800da60 <HAL_I2C_EV_IRQHandler+0x68>
 800da5e:	2300      	movs	r3, #0
 800da60:	2b01      	cmp	r3, #1
 800da62:	f000 8127 	beq.w	800dcb4 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	f003 0301 	and.w	r3, r3, #1
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00c      	beq.n	800da8a <HAL_I2C_EV_IRQHandler+0x92>
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	0a5b      	lsrs	r3, r3, #9
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d006      	beq.n	800da8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f002 f80f 	bl	800faa0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fd12 	bl	800e4ac <I2C_Master_SB>
 800da88:	e087      	b.n	800db9a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	08db      	lsrs	r3, r3, #3
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	2b00      	cmp	r3, #0
 800da94:	d009      	beq.n	800daaa <HAL_I2C_EV_IRQHandler+0xb2>
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	0a5b      	lsrs	r3, r3, #9
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d003      	beq.n	800daaa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fd88 	bl	800e5b8 <I2C_Master_ADD10>
 800daa8:	e077      	b.n	800db9a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	085b      	lsrs	r3, r3, #1
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d009      	beq.n	800daca <HAL_I2C_EV_IRQHandler+0xd2>
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	0a5b      	lsrs	r3, r3, #9
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fda2 	bl	800e60c <I2C_Master_ADDR>
 800dac8:	e067      	b.n	800db9a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	089b      	lsrs	r3, r3, #2
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d030      	beq.n	800db38 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dae4:	f000 80e8 	beq.w	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	09db      	lsrs	r3, r3, #7
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00f      	beq.n	800db14 <HAL_I2C_EV_IRQHandler+0x11c>
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	0a9b      	lsrs	r3, r3, #10
 800daf8:	f003 0301 	and.w	r3, r3, #1
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d009      	beq.n	800db14 <HAL_I2C_EV_IRQHandler+0x11c>
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	089b      	lsrs	r3, r3, #2
 800db04:	f003 0301 	and.w	r3, r3, #1
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d103      	bne.n	800db14 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f9de 	bl	800dece <I2C_MasterTransmit_TXE>
 800db12:	e042      	b.n	800db9a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	089b      	lsrs	r3, r3, #2
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f000 80cb 	beq.w	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	0a5b      	lsrs	r3, r3, #9
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 80c4 	beq.w	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fa68 	bl	800e006 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800db36:	e0bf      	b.n	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db46:	f000 80b7 	beq.w	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	099b      	lsrs	r3, r3, #6
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00f      	beq.n	800db76 <HAL_I2C_EV_IRQHandler+0x17e>
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	0a9b      	lsrs	r3, r3, #10
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d009      	beq.n	800db76 <HAL_I2C_EV_IRQHandler+0x17e>
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	089b      	lsrs	r3, r3, #2
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d103      	bne.n	800db76 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fb30 	bl	800e1d4 <I2C_MasterReceive_RXNE>
 800db74:	e011      	b.n	800db9a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	089b      	lsrs	r3, r3, #2
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 809a 	beq.w	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	0a5b      	lsrs	r3, r3, #9
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f000 8093 	beq.w	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fba0 	bl	800e2d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800db98:	e08e      	b.n	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
 800db9a:	e08d      	b.n	800dcb8 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d004      	beq.n	800dbae <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	695b      	ldr	r3, [r3, #20]
 800dbaa:	61fb      	str	r3, [r7, #28]
 800dbac:	e007      	b.n	800dbbe <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	085b      	lsrs	r3, r3, #1
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d012      	beq.n	800dbf0 <HAL_I2C_EV_IRQHandler+0x1f8>
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	0a5b      	lsrs	r3, r3, #9
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00c      	beq.n	800dbf0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d003      	beq.n	800dbe6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	699b      	ldr	r3, [r3, #24]
 800dbe4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800dbe6:	69b9      	ldr	r1, [r7, #24]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 ff5e 	bl	800eaaa <I2C_Slave_ADDR>
 800dbee:	e066      	b.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	091b      	lsrs	r3, r3, #4
 800dbf4:	f003 0301 	and.w	r3, r3, #1
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d009      	beq.n	800dc10 <HAL_I2C_EV_IRQHandler+0x218>
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	0a5b      	lsrs	r3, r3, #9
 800dc00:	f003 0301 	and.w	r3, r3, #1
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d003      	beq.n	800dc10 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 ff93 	bl	800eb34 <I2C_Slave_STOPF>
 800dc0e:	e056      	b.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
 800dc12:	2b21      	cmp	r3, #33	; 0x21
 800dc14:	d002      	beq.n	800dc1c <HAL_I2C_EV_IRQHandler+0x224>
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	2b29      	cmp	r3, #41	; 0x29
 800dc1a:	d125      	bne.n	800dc68 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	09db      	lsrs	r3, r3, #7
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00f      	beq.n	800dc48 <HAL_I2C_EV_IRQHandler+0x250>
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	0a9b      	lsrs	r3, r3, #10
 800dc2c:	f003 0301 	and.w	r3, r3, #1
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d009      	beq.n	800dc48 <HAL_I2C_EV_IRQHandler+0x250>
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	089b      	lsrs	r3, r3, #2
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d103      	bne.n	800dc48 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fe74 	bl	800e92e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800dc46:	e039      	b.n	800dcbc <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	089b      	lsrs	r3, r3, #2
 800dc4c:	f003 0301 	and.w	r3, r3, #1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d033      	beq.n	800dcbc <HAL_I2C_EV_IRQHandler+0x2c4>
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	0a5b      	lsrs	r3, r3, #9
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d02d      	beq.n	800dcbc <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fea1 	bl	800e9a8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800dc66:	e029      	b.n	800dcbc <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	099b      	lsrs	r3, r3, #6
 800dc6c:	f003 0301 	and.w	r3, r3, #1
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00f      	beq.n	800dc94 <HAL_I2C_EV_IRQHandler+0x29c>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	0a9b      	lsrs	r3, r3, #10
 800dc78:	f003 0301 	and.w	r3, r3, #1
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d009      	beq.n	800dc94 <HAL_I2C_EV_IRQHandler+0x29c>
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	089b      	lsrs	r3, r3, #2
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d103      	bne.n	800dc94 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 feac 	bl	800e9ea <I2C_SlaveReceive_RXNE>
 800dc92:	e014      	b.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	089b      	lsrs	r3, r3, #2
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00e      	beq.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	0a5b      	lsrs	r3, r3, #9
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d008      	beq.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 feda 	bl	800ea66 <I2C_SlaveReceive_BTF>
 800dcb2:	e004      	b.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800dcb4:	bf00      	nop
 800dcb6:	e002      	b.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800dcb8:	bf00      	nop
 800dcba:	e000      	b.n	800dcbe <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800dcbc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800dcbe:	3720      	adds	r7, #32
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08a      	sub	sp, #40	; 0x28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dce6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	0a1b      	lsrs	r3, r3, #8
 800dcec:	f003 0301 	and.w	r3, r3, #1
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00e      	beq.n	800dd12 <HAL_I2C_ER_IRQHandler+0x4e>
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	0a1b      	lsrs	r3, r3, #8
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d008      	beq.n	800dd12 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	f043 0301 	orr.w	r3, r3, #1
 800dd06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd10:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dd12:	6a3b      	ldr	r3, [r7, #32]
 800dd14:	0a5b      	lsrs	r3, r3, #9
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00e      	beq.n	800dd3c <HAL_I2C_ER_IRQHandler+0x78>
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	0a1b      	lsrs	r3, r3, #8
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d008      	beq.n	800dd3c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	f043 0302 	orr.w	r3, r3, #2
 800dd30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800dd3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	0a9b      	lsrs	r3, r3, #10
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d03f      	beq.n	800ddc8 <HAL_I2C_ER_IRQHandler+0x104>
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	0a1b      	lsrs	r3, r3, #8
 800dd4c:	f003 0301 	and.w	r3, r3, #1
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d039      	beq.n	800ddc8 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800dd54:	7efb      	ldrb	r3, [r7, #27]
 800dd56:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd66:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800dd6e:	7ebb      	ldrb	r3, [r7, #26]
 800dd70:	2b20      	cmp	r3, #32
 800dd72:	d112      	bne.n	800dd9a <HAL_I2C_ER_IRQHandler+0xd6>
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10f      	bne.n	800dd9a <HAL_I2C_ER_IRQHandler+0xd6>
 800dd7a:	7cfb      	ldrb	r3, [r7, #19]
 800dd7c:	2b21      	cmp	r3, #33	; 0x21
 800dd7e:	d008      	beq.n	800dd92 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800dd80:	7cfb      	ldrb	r3, [r7, #19]
 800dd82:	2b29      	cmp	r3, #41	; 0x29
 800dd84:	d005      	beq.n	800dd92 <HAL_I2C_ER_IRQHandler+0xce>
 800dd86:	7cfb      	ldrb	r3, [r7, #19]
 800dd88:	2b28      	cmp	r3, #40	; 0x28
 800dd8a:	d106      	bne.n	800dd9a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2b21      	cmp	r3, #33	; 0x21
 800dd90:	d103      	bne.n	800dd9a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 fffe 	bl	800ed94 <I2C_Slave_AF>
 800dd98:	e016      	b.n	800ddc8 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dda2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	f043 0304 	orr.w	r3, r3, #4
 800ddaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ddac:	7efb      	ldrb	r3, [r7, #27]
 800ddae:	2b10      	cmp	r3, #16
 800ddb0:	d002      	beq.n	800ddb8 <HAL_I2C_ER_IRQHandler+0xf4>
 800ddb2:	7efb      	ldrb	r3, [r7, #27]
 800ddb4:	2b40      	cmp	r3, #64	; 0x40
 800ddb6:	d107      	bne.n	800ddc8 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddc6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ddc8:	6a3b      	ldr	r3, [r7, #32]
 800ddca:	0adb      	lsrs	r3, r3, #11
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00e      	beq.n	800ddf2 <HAL_I2C_ER_IRQHandler+0x12e>
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	0a1b      	lsrs	r3, r3, #8
 800ddd8:	f003 0301 	and.w	r3, r3, #1
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d008      	beq.n	800ddf2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	f043 0308 	orr.w	r3, r3, #8
 800dde6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800ddf0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d008      	beq.n	800de0a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	431a      	orrs	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f001 f835 	bl	800ee74 <I2C_ITError>
  }
}
 800de0a:	bf00      	nop
 800de0c:	3728      	adds	r7, #40	; 0x28
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b083      	sub	sp, #12
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800de42:	bf00      	nop
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de4e:	b480      	push	{r7}
 800de50:	b083      	sub	sp, #12
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800de56:	bf00      	nop
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800de62:	b480      	push	{r7}
 800de64:	b083      	sub	sp, #12
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
 800de6a:	460b      	mov	r3, r1
 800de6c:	70fb      	strb	r3, [r7, #3]
 800de6e:	4613      	mov	r3, r2
 800de70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800de72:	bf00      	nop
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de7e:	b480      	push	{r7}
 800de80:	b083      	sub	sp, #12
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800de86:	bf00      	nop
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800de92:	b480      	push	{r7}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800de9a:	bf00      	nop
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800deae:	bf00      	nop
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800deba:	b480      	push	{r7}
 800debc:	b083      	sub	sp, #12
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800dec2:	bf00      	nop
 800dec4:	370c      	adds	r7, #12
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dedc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dee4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800def0:	2b00      	cmp	r3, #0
 800def2:	d150      	bne.n	800df96 <I2C_MasterTransmit_TXE+0xc8>
 800def4:	7bfb      	ldrb	r3, [r7, #15]
 800def6:	2b21      	cmp	r3, #33	; 0x21
 800def8:	d14d      	bne.n	800df96 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2b08      	cmp	r3, #8
 800defe:	d01d      	beq.n	800df3c <I2C_MasterTransmit_TXE+0x6e>
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	2b20      	cmp	r3, #32
 800df04:	d01a      	beq.n	800df3c <I2C_MasterTransmit_TXE+0x6e>
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800df0c:	d016      	beq.n	800df3c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	685a      	ldr	r2, [r3, #4]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df1c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2211      	movs	r2, #17
 800df22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2220      	movs	r2, #32
 800df30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff ff6c 	bl	800de12 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800df3a:	e060      	b.n	800dffe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df4a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df5a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2220      	movs	r2, #32
 800df66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2b40      	cmp	r3, #64	; 0x40
 800df74:	d107      	bne.n	800df86 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff ff87 	bl	800de92 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800df84:	e03b      	b.n	800dffe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7ff ff3f 	bl	800de12 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800df94:	e033      	b.n	800dffe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	2b21      	cmp	r3, #33	; 0x21
 800df9a:	d005      	beq.n	800dfa8 <I2C_MasterTransmit_TXE+0xda>
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
 800df9e:	2b40      	cmp	r3, #64	; 0x40
 800dfa0:	d12d      	bne.n	800dffe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
 800dfa4:	2b22      	cmp	r3, #34	; 0x22
 800dfa6:	d12a      	bne.n	800dffe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d108      	bne.n	800dfc4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfc0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800dfc2:	e01c      	b.n	800dffe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	2b40      	cmp	r3, #64	; 0x40
 800dfce:	d103      	bne.n	800dfd8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f898 	bl	800e106 <I2C_MemoryTransmit_TXE_BTF>
}
 800dfd6:	e012      	b.n	800dffe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	3b01      	subs	r3, #1
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dffc:	e7ff      	b.n	800dffe <I2C_MasterTransmit_TXE+0x130>
 800dffe:	bf00      	nop
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e012:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b21      	cmp	r3, #33	; 0x21
 800e01e:	d165      	bne.n	800e0ec <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e024:	b29b      	uxth	r3, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	d012      	beq.n	800e050 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	781a      	ldrb	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e044:	b29b      	uxth	r3, r3
 800e046:	3b01      	subs	r3, #1
 800e048:	b29a      	uxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800e04e:	e056      	b.n	800e0fe <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b08      	cmp	r3, #8
 800e054:	d01d      	beq.n	800e092 <I2C_MasterTransmit_BTF+0x8c>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2b20      	cmp	r3, #32
 800e05a:	d01a      	beq.n	800e092 <I2C_MasterTransmit_BTF+0x8c>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e062:	d016      	beq.n	800e092 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685a      	ldr	r2, [r3, #4]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e072:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2211      	movs	r2, #17
 800e078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2220      	movs	r2, #32
 800e086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff fec1 	bl	800de12 <HAL_I2C_MasterTxCpltCallback>
}
 800e090:	e035      	b.n	800e0fe <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e0a0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0b0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2220      	movs	r2, #32
 800e0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b40      	cmp	r3, #64	; 0x40
 800e0ca:	d107      	bne.n	800e0dc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff fedc 	bl	800de92 <HAL_I2C_MemTxCpltCallback>
}
 800e0da:	e010      	b.n	800e0fe <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7ff fe94 	bl	800de12 <HAL_I2C_MasterTxCpltCallback>
}
 800e0ea:	e008      	b.n	800e0fe <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	2b40      	cmp	r3, #64	; 0x40
 800e0f6:	d102      	bne.n	800e0fe <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 f804 	bl	800e106 <I2C_MemoryTransmit_TXE_BTF>
}
 800e0fe:	bf00      	nop
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800e106:	b480      	push	{r7}
 800e108:	b083      	sub	sp, #12
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e112:	2b00      	cmp	r3, #0
 800e114:	d11d      	bne.n	800e152 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d10b      	bne.n	800e136 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e122:	b2da      	uxtb	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e12e:	1c9a      	adds	r2, r3, #2
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800e134:	e048      	b.n	800e1c8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	121b      	asrs	r3, r3, #8
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e14a:	1c5a      	adds	r2, r3, #1
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800e150:	e03a      	b.n	800e1c8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e156:	2b01      	cmp	r3, #1
 800e158:	d10b      	bne.n	800e172 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e16a:	1c5a      	adds	r2, r3, #1
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800e170:	e02a      	b.n	800e1c8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e176:	2b02      	cmp	r3, #2
 800e178:	d126      	bne.n	800e1c8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b22      	cmp	r3, #34	; 0x22
 800e184:	d108      	bne.n	800e198 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e194:	601a      	str	r2, [r3, #0]
}
 800e196:	e017      	b.n	800e1c8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b21      	cmp	r3, #33	; 0x21
 800e1a2:	d111      	bne.n	800e1c8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a8:	781a      	ldrb	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b22      	cmp	r3, #34	; 0x22
 800e1e6:	d173      	bne.n	800e2d0 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d920      	bls.n	800e238 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	691a      	ldr	r2, [r3, #16]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e200:	b2d2      	uxtb	r2, r2
 800e202:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e212:	b29b      	uxth	r3, r3
 800e214:	3b01      	subs	r3, #1
 800e216:	b29a      	uxth	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e220:	b29b      	uxth	r3, r3
 800e222:	2b03      	cmp	r3, #3
 800e224:	d154      	bne.n	800e2d0 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e234:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800e236:	e04b      	b.n	800e2d0 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d047      	beq.n	800e2d0 <I2C_MasterReceive_RXNE+0xfc>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d002      	beq.n	800e24c <I2C_MasterReceive_RXNE+0x78>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d141      	bne.n	800e2d0 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e25a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e26a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	691a      	ldr	r2, [r3, #16]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e276:	b2d2      	uxtb	r2, r2
 800e278:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27e:	1c5a      	adds	r2, r3, #1
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e288:	b29b      	uxth	r3, r3
 800e28a:	3b01      	subs	r3, #1
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2220      	movs	r2, #32
 800e296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d10a      	bne.n	800e2bc <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7fb f883 	bl	80093c0 <HAL_I2C_MemRxCpltCallback>
}
 800e2ba:	e009      	b.n	800e2d0 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2212      	movs	r2, #18
 800e2c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff fdab 	bl	800de26 <HAL_I2C_MasterRxCpltCallback>
}
 800e2d0:	bf00      	nop
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	2b04      	cmp	r3, #4
 800e2ee:	d11b      	bne.n	800e328 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	685a      	ldr	r2, [r3, #4]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	691a      	ldr	r2, [r3, #16]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30a:	b2d2      	uxtb	r2, r2
 800e30c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	b29a      	uxth	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800e326:	e0bd      	b.n	800e4a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d129      	bne.n	800e386 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e340:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2b04      	cmp	r3, #4
 800e346:	d00a      	beq.n	800e35e <I2C_MasterReceive_BTF+0x86>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d007      	beq.n	800e35e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e35c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	691a      	ldr	r2, [r3, #16]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	1c5a      	adds	r2, r3, #1
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	3b01      	subs	r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800e384:	e08e      	b.n	800e4a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	d176      	bne.n	800e47e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d002      	beq.n	800e39c <I2C_MasterReceive_BTF+0xc4>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b10      	cmp	r3, #16
 800e39a:	d108      	bne.n	800e3ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e019      	b.n	800e3e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2b04      	cmp	r3, #4
 800e3b2:	d002      	beq.n	800e3ba <I2C_MasterReceive_BTF+0xe2>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d108      	bne.n	800e3cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3c8:	601a      	str	r2, [r3, #0]
 800e3ca:	e00a      	b.n	800e3e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b10      	cmp	r3, #16
 800e3d0:	d007      	beq.n	800e3e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	691a      	ldr	r2, [r3, #16]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ec:	b2d2      	uxtb	r2, r2
 800e3ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f4:	1c5a      	adds	r2, r3, #1
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	3b01      	subs	r3, #1
 800e402:	b29a      	uxth	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	691a      	ldr	r2, [r3, #16]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e412:	b2d2      	uxtb	r2, r2
 800e414:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41a:	1c5a      	adds	r2, r3, #1
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e424:	b29b      	uxth	r3, r3
 800e426:	3b01      	subs	r3, #1
 800e428:	b29a      	uxth	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	685a      	ldr	r2, [r3, #4]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e43c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2220      	movs	r2, #32
 800e442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b40      	cmp	r3, #64	; 0x40
 800e450:	d10a      	bne.n	800e468 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7fa ffad 	bl	80093c0 <HAL_I2C_MemRxCpltCallback>
}
 800e466:	e01d      	b.n	800e4a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2212      	movs	r2, #18
 800e474:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff fcd5 	bl	800de26 <HAL_I2C_MasterRxCpltCallback>
}
 800e47c:	e012      	b.n	800e4a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	691a      	ldr	r2, [r3, #16]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e488:	b2d2      	uxtb	r2, r2
 800e48a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	3b01      	subs	r3, #1
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800e4a4:	bf00      	nop
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b40      	cmp	r3, #64	; 0x40
 800e4be:	d117      	bne.n	800e4f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d109      	bne.n	800e4dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e4d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e4da:	e067      	b.n	800e5ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	f043 0301 	orr.w	r3, r3, #1
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	611a      	str	r2, [r3, #16]
}
 800e4ee:	e05d      	b.n	800e5ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4f8:	d133      	bne.n	800e562 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e500:	b2db      	uxtb	r3, r3
 800e502:	2b21      	cmp	r3, #33	; 0x21
 800e504:	d109      	bne.n	800e51a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	461a      	mov	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e516:	611a      	str	r2, [r3, #16]
 800e518:	e008      	b.n	800e52c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	f043 0301 	orr.w	r3, r3, #1
 800e524:	b2da      	uxtb	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e530:	2b00      	cmp	r3, #0
 800e532:	d004      	beq.n	800e53e <I2C_Master_SB+0x92>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d108      	bne.n	800e550 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e542:	2b00      	cmp	r3, #0
 800e544:	d032      	beq.n	800e5ac <I2C_Master_SB+0x100>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d02d      	beq.n	800e5ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e55e:	605a      	str	r2, [r3, #4]
}
 800e560:	e024      	b.n	800e5ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10e      	bne.n	800e588 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e56e:	b29b      	uxth	r3, r3
 800e570:	11db      	asrs	r3, r3, #7
 800e572:	b2db      	uxtb	r3, r3
 800e574:	f003 0306 	and.w	r3, r3, #6
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	f063 030f 	orn	r3, r3, #15
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	611a      	str	r2, [r3, #16]
}
 800e586:	e011      	b.n	800e5ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d10d      	bne.n	800e5ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e594:	b29b      	uxth	r3, r3
 800e596:	11db      	asrs	r3, r3, #7
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	f003 0306 	and.w	r3, r3, #6
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	f063 030e 	orn	r3, r3, #14
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	611a      	str	r2, [r3, #16]
}
 800e5ac:	bf00      	nop
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d103      	bne.n	800e5dc <I2C_Master_ADD10+0x24>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d011      	beq.n	800e600 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d104      	bne.n	800e5f0 <I2C_Master_ADD10+0x38>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d007      	beq.n	800e600 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	685a      	ldr	r2, [r3, #4]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5fe:	605a      	str	r2, [r3, #4]
    }
  }
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b091      	sub	sp, #68	; 0x44
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e61a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e622:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e628:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e630:	b2db      	uxtb	r3, r3
 800e632:	2b22      	cmp	r3, #34	; 0x22
 800e634:	f040 8169 	bne.w	800e90a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10f      	bne.n	800e660 <I2C_Master_ADDR+0x54>
 800e640:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e644:	2b40      	cmp	r3, #64	; 0x40
 800e646:	d10b      	bne.n	800e660 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e648:	2300      	movs	r3, #0
 800e64a:	633b      	str	r3, [r7, #48]	; 0x30
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	695b      	ldr	r3, [r3, #20]
 800e652:	633b      	str	r3, [r7, #48]	; 0x30
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	699b      	ldr	r3, [r3, #24]
 800e65a:	633b      	str	r3, [r7, #48]	; 0x30
 800e65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65e:	e160      	b.n	800e922 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e664:	2b00      	cmp	r3, #0
 800e666:	d11d      	bne.n	800e6a4 <I2C_Master_ADDR+0x98>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e670:	d118      	bne.n	800e6a4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e672:	2300      	movs	r3, #0
 800e674:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	695b      	ldr	r3, [r3, #20]
 800e67c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e696:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e69c:	1c5a      	adds	r2, r3, #1
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	651a      	str	r2, [r3, #80]	; 0x50
 800e6a2:	e13e      	b.n	800e922 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d113      	bne.n	800e6d6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	695b      	ldr	r3, [r3, #20]
 800e6b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	699b      	ldr	r3, [r3, #24]
 800e6c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6d2:	601a      	str	r2, [r3, #0]
 800e6d4:	e115      	b.n	800e902 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	f040 808a 	bne.w	800e7f6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e6e8:	d137      	bne.n	800e75a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6f8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e708:	d113      	bne.n	800e732 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e718:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e71a:	2300      	movs	r3, #0
 800e71c:	627b      	str	r3, [r7, #36]	; 0x24
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	695b      	ldr	r3, [r3, #20]
 800e724:	627b      	str	r3, [r7, #36]	; 0x24
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	699b      	ldr	r3, [r3, #24]
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	e0e7      	b.n	800e902 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e732:	2300      	movs	r3, #0
 800e734:	623b      	str	r3, [r7, #32]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	623b      	str	r3, [r7, #32]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	623b      	str	r3, [r7, #32]
 800e746:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	e0d3      	b.n	800e902 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	2b08      	cmp	r3, #8
 800e75e:	d02e      	beq.n	800e7be <I2C_Master_ADDR+0x1b2>
 800e760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e762:	2b20      	cmp	r3, #32
 800e764:	d02b      	beq.n	800e7be <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e768:	2b12      	cmp	r3, #18
 800e76a:	d102      	bne.n	800e772 <I2C_Master_ADDR+0x166>
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d125      	bne.n	800e7be <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e774:	2b04      	cmp	r3, #4
 800e776:	d00e      	beq.n	800e796 <I2C_Master_ADDR+0x18a>
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d00b      	beq.n	800e796 <I2C_Master_ADDR+0x18a>
 800e77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e780:	2b10      	cmp	r3, #16
 800e782:	d008      	beq.n	800e796 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	e007      	b.n	800e7a6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	61fb      	str	r3, [r7, #28]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	61fb      	str	r3, [r7, #28]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	61fb      	str	r3, [r7, #28]
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	e0a1      	b.n	800e902 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	61bb      	str	r3, [r7, #24]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	695b      	ldr	r3, [r3, #20]
 800e7d8:	61bb      	str	r3, [r7, #24]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	699b      	ldr	r3, [r3, #24]
 800e7e0:	61bb      	str	r3, [r7, #24]
 800e7e2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	e085      	b.n	800e902 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	2b02      	cmp	r3, #2
 800e7fe:	d14d      	bne.n	800e89c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	2b04      	cmp	r3, #4
 800e804:	d016      	beq.n	800e834 <I2C_Master_ADDR+0x228>
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d013      	beq.n	800e834 <I2C_Master_ADDR+0x228>
 800e80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80e:	2b10      	cmp	r3, #16
 800e810:	d010      	beq.n	800e834 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e820:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e830:	601a      	str	r2, [r3, #0]
 800e832:	e007      	b.n	800e844 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e842:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e84e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e852:	d117      	bne.n	800e884 <I2C_Master_ADDR+0x278>
 800e854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e856:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e85a:	d00b      	beq.n	800e874 <I2C_Master_ADDR+0x268>
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d008      	beq.n	800e874 <I2C_Master_ADDR+0x268>
 800e862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e864:	2b08      	cmp	r3, #8
 800e866:	d005      	beq.n	800e874 <I2C_Master_ADDR+0x268>
 800e868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86a:	2b10      	cmp	r3, #16
 800e86c:	d002      	beq.n	800e874 <I2C_Master_ADDR+0x268>
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	2b20      	cmp	r3, #32
 800e872:	d107      	bne.n	800e884 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e882:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e884:	2300      	movs	r3, #0
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	695b      	ldr	r3, [r3, #20]
 800e88e:	617b      	str	r3, [r7, #20]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	617b      	str	r3, [r7, #20]
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	e032      	b.n	800e902 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e8aa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8ba:	d117      	bne.n	800e8ec <I2C_Master_ADDR+0x2e0>
 800e8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e8c2:	d00b      	beq.n	800e8dc <I2C_Master_ADDR+0x2d0>
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d008      	beq.n	800e8dc <I2C_Master_ADDR+0x2d0>
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8cc:	2b08      	cmp	r3, #8
 800e8ce:	d005      	beq.n	800e8dc <I2C_Master_ADDR+0x2d0>
 800e8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d2:	2b10      	cmp	r3, #16
 800e8d4:	d002      	beq.n	800e8dc <I2C_Master_ADDR+0x2d0>
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d8:	2b20      	cmp	r3, #32
 800e8da:	d107      	bne.n	800e8ec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e8ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	613b      	str	r3, [r7, #16]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	695b      	ldr	r3, [r3, #20]
 800e8f6:	613b      	str	r3, [r7, #16]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	613b      	str	r3, [r7, #16]
 800e900:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e908:	e00b      	b.n	800e922 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e90a:	2300      	movs	r3, #0
 800e90c:	60fb      	str	r3, [r7, #12]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	60fb      	str	r3, [r7, #12]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	699b      	ldr	r3, [r3, #24]
 800e91c:	60fb      	str	r3, [r7, #12]
 800e91e:	68fb      	ldr	r3, [r7, #12]
}
 800e920:	e7ff      	b.n	800e922 <I2C_Master_ADDR+0x316>
 800e922:	bf00      	nop
 800e924:	3744      	adds	r7, #68	; 0x44
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b084      	sub	sp, #16
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e93c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e942:	b29b      	uxth	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	d02b      	beq.n	800e9a0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e962:	b29b      	uxth	r3, r3
 800e964:	3b01      	subs	r3, #1
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e970:	b29b      	uxth	r3, r3
 800e972:	2b00      	cmp	r3, #0
 800e974:	d114      	bne.n	800e9a0 <I2C_SlaveTransmit_TXE+0x72>
 800e976:	7bfb      	ldrb	r3, [r7, #15]
 800e978:	2b29      	cmp	r3, #41	; 0x29
 800e97a:	d111      	bne.n	800e9a0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	685a      	ldr	r2, [r3, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e98a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2221      	movs	r2, #33	; 0x21
 800e990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2228      	movs	r2, #40	; 0x28
 800e996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7ff fa4d 	bl	800de3a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e9a0:	bf00      	nop
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d011      	beq.n	800e9de <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9be:	781a      	ldrb	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e9de:	bf00      	nop
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b084      	sub	sp, #16
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d02c      	beq.n	800ea5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	691a      	ldr	r2, [r3, #16]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0e:	b2d2      	uxtb	r2, r2
 800ea10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea16:	1c5a      	adds	r2, r3, #1
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	3b01      	subs	r3, #1
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d114      	bne.n	800ea5e <I2C_SlaveReceive_RXNE+0x74>
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	2b2a      	cmp	r3, #42	; 0x2a
 800ea38:	d111      	bne.n	800ea5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	685a      	ldr	r2, [r3, #4]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2222      	movs	r2, #34	; 0x22
 800ea4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2228      	movs	r2, #40	; 0x28
 800ea54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7ff f9f8 	bl	800de4e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ea5e:	bf00      	nop
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ea66:	b480      	push	{r7}
 800ea68:	b083      	sub	sp, #12
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d012      	beq.n	800ea9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	691a      	ldr	r2, [r3, #16]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea82:	b2d2      	uxtb	r2, r2
 800ea84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	3b01      	subs	r3, #1
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ea9e:	bf00      	nop
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800eab4:	2300      	movs	r3, #0
 800eab6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eac4:	2b28      	cmp	r3, #40	; 0x28
 800eac6:	d127      	bne.n	800eb18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	685a      	ldr	r2, [r3, #4]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ead6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	089b      	lsrs	r3, r3, #2
 800eadc:	f003 0301 	and.w	r3, r3, #1
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800eae4:	2301      	movs	r3, #1
 800eae6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	09db      	lsrs	r3, r3, #7
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d103      	bne.n	800eafc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	81bb      	strh	r3, [r7, #12]
 800eafa:	e002      	b.n	800eb02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800eb0a:	89ba      	ldrh	r2, [r7, #12]
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff f9a6 	bl	800de62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800eb16:	e008      	b.n	800eb2a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f06f 0202 	mvn.w	r2, #2
 800eb20:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800eb2a:	bf00      	nop
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
	...

0800eb34 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb42:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800eb52:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800eb54:	2300      	movs	r3, #0
 800eb56:	60bb      	str	r3, [r7, #8]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	695b      	ldr	r3, [r3, #20]
 800eb5e:	60bb      	str	r3, [r7, #8]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f042 0201 	orr.w	r2, r2, #1
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb80:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb90:	d172      	bne.n	800ec78 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800eb92:	7bfb      	ldrb	r3, [r7, #15]
 800eb94:	2b22      	cmp	r3, #34	; 0x22
 800eb96:	d002      	beq.n	800eb9e <I2C_Slave_STOPF+0x6a>
 800eb98:	7bfb      	ldrb	r3, [r7, #15]
 800eb9a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb9c:	d135      	bne.n	800ec0a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d005      	beq.n	800ebc2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebba:	f043 0204 	orr.w	r2, r3, #4
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fd fdd8 	bl	800c78c <HAL_DMA_GetState>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d049      	beq.n	800ec76 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe6:	4a69      	ldr	r2, [pc, #420]	; (800ed8c <I2C_Slave_STOPF+0x258>)
 800ebe8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fd fc20 	bl	800c434 <HAL_DMA_Abort_IT>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d03d      	beq.n	800ec76 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ec04:	4610      	mov	r0, r2
 800ec06:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ec08:	e035      	b.n	800ec76 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d005      	beq.n	800ec2e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec26:	f043 0204 	orr.w	r2, r3, #4
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	685a      	ldr	r2, [r3, #4]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fd fda2 	bl	800c78c <HAL_DMA_GetState>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d014      	beq.n	800ec78 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec52:	4a4e      	ldr	r2, [pc, #312]	; (800ed8c <I2C_Slave_STOPF+0x258>)
 800ec54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fd fbea 	bl	800c434 <HAL_DMA_Abort_IT>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d008      	beq.n	800ec78 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ec70:	4610      	mov	r0, r2
 800ec72:	4798      	blx	r3
 800ec74:	e000      	b.n	800ec78 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ec76:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d03e      	beq.n	800ed00 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	695b      	ldr	r3, [r3, #20]
 800ec88:	f003 0304 	and.w	r3, r3, #4
 800ec8c:	2b04      	cmp	r3, #4
 800ec8e:	d112      	bne.n	800ecb6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	691a      	ldr	r2, [r3, #16]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9a:	b2d2      	uxtb	r2, r2
 800ec9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca2:	1c5a      	adds	r2, r3, #1
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	695b      	ldr	r3, [r3, #20]
 800ecbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecc0:	2b40      	cmp	r3, #64	; 0x40
 800ecc2:	d112      	bne.n	800ecea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	691a      	ldr	r2, [r3, #16]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecce:	b2d2      	uxtb	r2, r2
 800ecd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	3b01      	subs	r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d005      	beq.n	800ed00 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf8:	f043 0204 	orr.w	r2, r3, #4
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d003      	beq.n	800ed10 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f8b3 	bl	800ee74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800ed0e:	e039      	b.n	800ed84 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ed10:	7bfb      	ldrb	r3, [r7, #15]
 800ed12:	2b2a      	cmp	r3, #42	; 0x2a
 800ed14:	d109      	bne.n	800ed2a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2228      	movs	r2, #40	; 0x28
 800ed20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f7ff f892 	bl	800de4e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b28      	cmp	r3, #40	; 0x28
 800ed34:	d111      	bne.n	800ed5a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a15      	ldr	r2, [pc, #84]	; (800ed90 <I2C_Slave_STOPF+0x25c>)
 800ed3a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2220      	movs	r2, #32
 800ed46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7ff f893 	bl	800de7e <HAL_I2C_ListenCpltCallback>
}
 800ed58:	e014      	b.n	800ed84 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5e:	2b22      	cmp	r3, #34	; 0x22
 800ed60:	d002      	beq.n	800ed68 <I2C_Slave_STOPF+0x234>
 800ed62:	7bfb      	ldrb	r3, [r7, #15]
 800ed64:	2b22      	cmp	r3, #34	; 0x22
 800ed66:	d10d      	bne.n	800ed84 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2220      	movs	r2, #32
 800ed72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7ff f865 	bl	800de4e <HAL_I2C_SlaveRxCpltCallback>
}
 800ed84:	bf00      	nop
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	0800f5e9 	.word	0x0800f5e9
 800ed90:	ffff0000 	.word	0xffff0000

0800ed94 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eda2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	2b08      	cmp	r3, #8
 800edae:	d002      	beq.n	800edb6 <I2C_Slave_AF+0x22>
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	2b20      	cmp	r3, #32
 800edb4:	d129      	bne.n	800ee0a <I2C_Slave_AF+0x76>
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	2b28      	cmp	r3, #40	; 0x28
 800edba:	d126      	bne.n	800ee0a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a2c      	ldr	r2, [pc, #176]	; (800ee70 <I2C_Slave_AF+0xdc>)
 800edc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800edd0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800edda:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800edea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2220      	movs	r2, #32
 800edf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff f83b 	bl	800de7e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ee08:	e02e      	b.n	800ee68 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ee0a:	7bfb      	ldrb	r3, [r7, #15]
 800ee0c:	2b21      	cmp	r3, #33	; 0x21
 800ee0e:	d126      	bne.n	800ee5e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a17      	ldr	r2, [pc, #92]	; (800ee70 <I2C_Slave_AF+0xdc>)
 800ee14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2221      	movs	r2, #33	; 0x21
 800ee1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2220      	movs	r2, #32
 800ee20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685a      	ldr	r2, [r3, #4]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee3a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ee44:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee54:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7fe ffef 	bl	800de3a <HAL_I2C_SlaveTxCpltCallback>
}
 800ee5c:	e004      	b.n	800ee68 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ee66:	615a      	str	r2, [r3, #20]
}
 800ee68:	bf00      	nop
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	ffff0000 	.word	0xffff0000

0800ee74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee82:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	2b10      	cmp	r3, #16
 800ee8e:	d10a      	bne.n	800eea6 <I2C_ITError+0x32>
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
 800ee92:	2b22      	cmp	r3, #34	; 0x22
 800ee94:	d107      	bne.n	800eea6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eea4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800eea6:	7bfb      	ldrb	r3, [r7, #15]
 800eea8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eeac:	2b28      	cmp	r3, #40	; 0x28
 800eeae:	d107      	bne.n	800eec0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2228      	movs	r2, #40	; 0x28
 800eeba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800eebe:	e015      	b.n	800eeec <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eeca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eece:	d006      	beq.n	800eede <I2C_ITError+0x6a>
 800eed0:	7bfb      	ldrb	r3, [r7, #15]
 800eed2:	2b60      	cmp	r3, #96	; 0x60
 800eed4:	d003      	beq.n	800eede <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eefa:	d162      	bne.n	800efc2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	685a      	ldr	r2, [r3, #4]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d020      	beq.n	800ef5c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1e:	4a6a      	ldr	r2, [pc, #424]	; (800f0c8 <I2C_ITError+0x254>)
 800ef20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fd fa84 	bl	800c434 <HAL_DMA_Abort_IT>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f000 8089 	beq.w	800f046 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f022 0201 	bic.w	r2, r2, #1
 800ef42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2220      	movs	r2, #32
 800ef48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ef56:	4610      	mov	r0, r2
 800ef58:	4798      	blx	r3
 800ef5a:	e074      	b.n	800f046 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef60:	4a59      	ldr	r2, [pc, #356]	; (800f0c8 <I2C_ITError+0x254>)
 800ef62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7fd fa63 	bl	800c434 <HAL_DMA_Abort_IT>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d068      	beq.n	800f046 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef7e:	2b40      	cmp	r3, #64	; 0x40
 800ef80:	d10b      	bne.n	800ef9a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	691a      	ldr	r2, [r3, #16]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8c:	b2d2      	uxtb	r2, r2
 800ef8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef94:	1c5a      	adds	r2, r3, #1
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 0201 	bic.w	r2, r2, #1
 800efa8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2220      	movs	r2, #32
 800efae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800efbc:	4610      	mov	r0, r2
 800efbe:	4798      	blx	r3
 800efc0:	e041      	b.n	800f046 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	2b60      	cmp	r3, #96	; 0x60
 800efcc:	d125      	bne.n	800f01a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2220      	movs	r2, #32
 800efd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	695b      	ldr	r3, [r3, #20]
 800efe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efe6:	2b40      	cmp	r3, #64	; 0x40
 800efe8:	d10b      	bne.n	800f002 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	691a      	ldr	r2, [r3, #16]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff4:	b2d2      	uxtb	r2, r2
 800eff6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f022 0201 	bic.w	r2, r2, #1
 800f010:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fe ff51 	bl	800deba <HAL_I2C_AbortCpltCallback>
 800f018:	e015      	b.n	800f046 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	695b      	ldr	r3, [r3, #20]
 800f020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f024:	2b40      	cmp	r3, #64	; 0x40
 800f026:	d10b      	bne.n	800f040 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	691a      	ldr	r2, [r3, #16]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f032:	b2d2      	uxtb	r2, r2
 800f034:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f03a:	1c5a      	adds	r2, r3, #1
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7fe ff30 	bl	800dea6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	f003 0301 	and.w	r3, r3, #1
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10e      	bne.n	800f074 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d109      	bne.n	800f074 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800f066:	2b00      	cmp	r3, #0
 800f068:	d104      	bne.n	800f074 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800f070:	2b00      	cmp	r3, #0
 800f072:	d007      	beq.n	800f084 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	685a      	ldr	r2, [r3, #4]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f082:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f08a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f090:	f003 0304 	and.w	r3, r3, #4
 800f094:	2b04      	cmp	r3, #4
 800f096:	d113      	bne.n	800f0c0 <I2C_ITError+0x24c>
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	2b28      	cmp	r3, #40	; 0x28
 800f09c:	d110      	bne.n	800f0c0 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4a0a      	ldr	r2, [pc, #40]	; (800f0cc <I2C_ITError+0x258>)
 800f0a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2220      	movs	r2, #32
 800f0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7fe fedf 	bl	800de7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f0c0:	bf00      	nop
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	0800f5e9 	.word	0x0800f5e9
 800f0cc:	ffff0000 	.word	0xffff0000

0800f0d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b088      	sub	sp, #32
 800f0d4:	af02      	add	r7, sp, #8
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	4608      	mov	r0, r1
 800f0da:	4611      	mov	r1, r2
 800f0dc:	461a      	mov	r2, r3
 800f0de:	4603      	mov	r3, r0
 800f0e0:	817b      	strh	r3, [r7, #10]
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	813b      	strh	r3, [r7, #8]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f0f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	2200      	movs	r2, #0
 800f102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f000 faed 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00c      	beq.n	800f12c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f126:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f128:	2303      	movs	r3, #3
 800f12a:	e05f      	b.n	800f1ec <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f12c:	897b      	ldrh	r3, [r7, #10]
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	461a      	mov	r2, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f13a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	6a3a      	ldr	r2, [r7, #32]
 800f140:	492c      	ldr	r1, [pc, #176]	; (800f1f4 <I2C_RequestMemoryWrite+0x124>)
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f000 fb26 	bl	800f794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800f14e:	2301      	movs	r3, #1
 800f150:	e04c      	b.n	800f1ec <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f152:	2300      	movs	r3, #0
 800f154:	617b      	str	r3, [r7, #20]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	695b      	ldr	r3, [r3, #20]
 800f15c:	617b      	str	r3, [r7, #20]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	699b      	ldr	r3, [r3, #24]
 800f164:	617b      	str	r3, [r7, #20]
 800f166:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f16a:	6a39      	ldr	r1, [r7, #32]
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 fb90 	bl	800f892 <I2C_WaitOnTXEFlagUntilTimeout>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00d      	beq.n	800f194 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17c:	2b04      	cmp	r3, #4
 800f17e:	d107      	bne.n	800f190 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f18e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	e02b      	b.n	800f1ec <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f194:	88fb      	ldrh	r3, [r7, #6]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d105      	bne.n	800f1a6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f19a:	893b      	ldrh	r3, [r7, #8]
 800f19c:	b2da      	uxtb	r2, r3
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	611a      	str	r2, [r3, #16]
 800f1a4:	e021      	b.n	800f1ea <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f1a6:	893b      	ldrh	r3, [r7, #8]
 800f1a8:	0a1b      	lsrs	r3, r3, #8
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	b2da      	uxtb	r2, r3
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b6:	6a39      	ldr	r1, [r7, #32]
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f000 fb6a 	bl	800f892 <I2C_WaitOnTXEFlagUntilTimeout>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00d      	beq.n	800f1e0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c8:	2b04      	cmp	r3, #4
 800f1ca:	d107      	bne.n	800f1dc <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f1da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e005      	b.n	800f1ec <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f1e0:	893b      	ldrh	r3, [r7, #8]
 800f1e2:	b2da      	uxtb	r2, r3
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	00010002 	.word	0x00010002

0800f1f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b088      	sub	sp, #32
 800f1fc:	af02      	add	r7, sp, #8
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	4608      	mov	r0, r1
 800f202:	4611      	mov	r1, r2
 800f204:	461a      	mov	r2, r3
 800f206:	4603      	mov	r3, r0
 800f208:	817b      	strh	r3, [r7, #10]
 800f20a:	460b      	mov	r3, r1
 800f20c:	813b      	strh	r3, [r7, #8]
 800f20e:	4613      	mov	r3, r2
 800f210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	2200      	movs	r2, #0
 800f23a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	f000 fa51 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00c      	beq.n	800f264 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f254:	2b00      	cmp	r3, #0
 800f256:	d003      	beq.n	800f260 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f25e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f260:	2303      	movs	r3, #3
 800f262:	e0a9      	b.n	800f3b8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f264:	897b      	ldrh	r3, [r7, #10]
 800f266:	b2db      	uxtb	r3, r3
 800f268:	461a      	mov	r2, r3
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f272:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f276:	6a3a      	ldr	r2, [r7, #32]
 800f278:	4951      	ldr	r1, [pc, #324]	; (800f3c0 <I2C_RequestMemoryRead+0x1c8>)
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f000 fa8a 	bl	800f794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	e096      	b.n	800f3b8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f28a:	2300      	movs	r3, #0
 800f28c:	617b      	str	r3, [r7, #20]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	695b      	ldr	r3, [r3, #20]
 800f294:	617b      	str	r3, [r7, #20]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	617b      	str	r3, [r7, #20]
 800f29e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2a2:	6a39      	ldr	r1, [r7, #32]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 faf4 	bl	800f892 <I2C_WaitOnTXEFlagUntilTimeout>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00d      	beq.n	800f2cc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2b4:	2b04      	cmp	r3, #4
 800f2b6:	d107      	bne.n	800f2c8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e075      	b.n	800f3b8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f2cc:	88fb      	ldrh	r3, [r7, #6]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d105      	bne.n	800f2de <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f2d2:	893b      	ldrh	r3, [r7, #8]
 800f2d4:	b2da      	uxtb	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	611a      	str	r2, [r3, #16]
 800f2dc:	e021      	b.n	800f322 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f2de:	893b      	ldrh	r3, [r7, #8]
 800f2e0:	0a1b      	lsrs	r3, r3, #8
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	b2da      	uxtb	r2, r3
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2ee:	6a39      	ldr	r1, [r7, #32]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f000 face 	bl	800f892 <I2C_WaitOnTXEFlagUntilTimeout>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00d      	beq.n	800f318 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f300:	2b04      	cmp	r3, #4
 800f302:	d107      	bne.n	800f314 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f312:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	e04f      	b.n	800f3b8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f318:	893b      	ldrh	r3, [r7, #8]
 800f31a:	b2da      	uxtb	r2, r3
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f324:	6a39      	ldr	r1, [r7, #32]
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f000 fab3 	bl	800f892 <I2C_WaitOnTXEFlagUntilTimeout>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00d      	beq.n	800f34e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f336:	2b04      	cmp	r3, #4
 800f338:	d107      	bne.n	800f34a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f348:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e034      	b.n	800f3b8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f35c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	2200      	movs	r2, #0
 800f366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f000 f9bb 	bl	800f6e6 <I2C_WaitOnFlagUntilTimeout>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00c      	beq.n	800f390 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f380:	2b00      	cmp	r3, #0
 800f382:	d003      	beq.n	800f38c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f38a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f38c:	2303      	movs	r3, #3
 800f38e:	e013      	b.n	800f3b8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f390:	897b      	ldrh	r3, [r7, #10]
 800f392:	b2db      	uxtb	r3, r3
 800f394:	f043 0301 	orr.w	r3, r3, #1
 800f398:	b2da      	uxtb	r2, r3
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a2:	6a3a      	ldr	r2, [r7, #32]
 800f3a4:	4906      	ldr	r1, [pc, #24]	; (800f3c0 <I2C_RequestMemoryRead+0x1c8>)
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f000 f9f4 	bl	800f794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e000      	b.n	800f3b8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800f3b6:	2300      	movs	r3, #0
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	00010002 	.word	0x00010002

0800f3c4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3d8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3e0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f3f6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d003      	beq.n	800f408 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f404:	2200      	movs	r2, #0
 800f406:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d003      	beq.n	800f418 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f414:	2200      	movs	r2, #0
 800f416:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800f418:	7cfb      	ldrb	r3, [r7, #19]
 800f41a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800f41e:	2b21      	cmp	r3, #33	; 0x21
 800f420:	d007      	beq.n	800f432 <I2C_DMAXferCplt+0x6e>
 800f422:	7cfb      	ldrb	r3, [r7, #19]
 800f424:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800f428:	2b22      	cmp	r3, #34	; 0x22
 800f42a:	d131      	bne.n	800f490 <I2C_DMAXferCplt+0xcc>
 800f42c:	7cbb      	ldrb	r3, [r7, #18]
 800f42e:	2b20      	cmp	r3, #32
 800f430:	d12e      	bne.n	800f490 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	685a      	ldr	r2, [r3, #4]
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f440:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	2200      	movs	r2, #0
 800f446:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f448:	7cfb      	ldrb	r3, [r7, #19]
 800f44a:	2b29      	cmp	r3, #41	; 0x29
 800f44c:	d10a      	bne.n	800f464 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	2221      	movs	r2, #33	; 0x21
 800f452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2228      	movs	r2, #40	; 0x28
 800f458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f45c:	6978      	ldr	r0, [r7, #20]
 800f45e:	f7fe fcec 	bl	800de3a <HAL_I2C_SlaveTxCpltCallback>
 800f462:	e00c      	b.n	800f47e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f464:	7cfb      	ldrb	r3, [r7, #19]
 800f466:	2b2a      	cmp	r3, #42	; 0x2a
 800f468:	d109      	bne.n	800f47e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	2222      	movs	r2, #34	; 0x22
 800f46e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	2228      	movs	r2, #40	; 0x28
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f478:	6978      	ldr	r0, [r7, #20]
 800f47a:	f7fe fce8 	bl	800de4e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	685a      	ldr	r2, [r3, #4]
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f48c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800f48e:	e06a      	b.n	800f566 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f496:	b2db      	uxtb	r3, r3
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d064      	beq.n	800f566 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d107      	bne.n	800f4b6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4b4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f4c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f4cc:	d009      	beq.n	800f4e2 <I2C_DMAXferCplt+0x11e>
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2b08      	cmp	r3, #8
 800f4d2:	d006      	beq.n	800f4e2 <I2C_DMAXferCplt+0x11e>
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f4da:	d002      	beq.n	800f4e2 <I2C_DMAXferCplt+0x11e>
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2b20      	cmp	r3, #32
 800f4e0:	d107      	bne.n	800f4f2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4f0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	685a      	ldr	r2, [r3, #4]
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f500:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f510:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	2200      	movs	r2, #0
 800f516:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d003      	beq.n	800f528 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800f520:	6978      	ldr	r0, [r7, #20]
 800f522:	f7fe fcc0 	bl	800dea6 <HAL_I2C_ErrorCallback>
}
 800f526:	e01e      	b.n	800f566 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	2220      	movs	r2, #32
 800f52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f536:	b2db      	uxtb	r3, r3
 800f538:	2b40      	cmp	r3, #64	; 0x40
 800f53a:	d10a      	bne.n	800f552 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	2200      	movs	r2, #0
 800f548:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800f54a:	6978      	ldr	r0, [r7, #20]
 800f54c:	f7f9 ff38 	bl	80093c0 <HAL_I2C_MemRxCpltCallback>
}
 800f550:	e009      	b.n	800f566 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	2200      	movs	r2, #0
 800f556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2212      	movs	r2, #18
 800f55e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800f560:	6978      	ldr	r0, [r7, #20]
 800f562:	f7fe fc60 	bl	800de26 <HAL_I2C_MasterRxCpltCallback>
}
 800f566:	bf00      	nop
 800f568:	3718      	adds	r7, #24
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}

0800f56e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b084      	sub	sp, #16
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f57a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f580:	2b00      	cmp	r3, #0
 800f582:	d003      	beq.n	800f58c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f588:	2200      	movs	r2, #0
 800f58a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f590:	2b00      	cmp	r3, #0
 800f592:	d003      	beq.n	800f59c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f598:	2200      	movs	r2, #0
 800f59a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7fd f903 	bl	800c7a8 <HAL_DMA_GetError>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	d01b      	beq.n	800f5e0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5b6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2220      	movs	r2, #32
 800f5c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d2:	f043 0210 	orr.w	r2, r3, #16
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f7fe fc63 	bl	800dea6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f5e0:	bf00      	nop
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f4:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5fc:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f602:	2b00      	cmp	r3, #0
 800f604:	d003      	beq.n	800f60e <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f60a:	2200      	movs	r2, #0
 800f60c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f612:	2b00      	cmp	r3, #0
 800f614:	d003      	beq.n	800f61e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f61a:	2200      	movs	r2, #0
 800f61c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f62c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2200      	movs	r2, #0
 800f632:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d003      	beq.n	800f644 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f640:	2200      	movs	r2, #0
 800f642:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f650:	2200      	movs	r2, #0
 800f652:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f022 0201 	bic.w	r2, r2, #1
 800f662:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	2b60      	cmp	r3, #96	; 0x60
 800f66e:	d10e      	bne.n	800f68e <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2220      	movs	r2, #32
 800f674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2200      	movs	r2, #0
 800f67c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2200      	movs	r2, #0
 800f684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f686:	68f8      	ldr	r0, [r7, #12]
 800f688:	f7fe fc17 	bl	800deba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f68c:	e027      	b.n	800f6de <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f68e:	7afb      	ldrb	r3, [r7, #11]
 800f690:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f694:	2b28      	cmp	r3, #40	; 0x28
 800f696:	d117      	bne.n	800f6c8 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f042 0201 	orr.w	r2, r2, #1
 800f6a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f6b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2228      	movs	r2, #40	; 0x28
 800f6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f6c6:	e007      	b.n	800f6d8 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2220      	movs	r2, #32
 800f6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7fe fbe4 	bl	800dea6 <HAL_I2C_ErrorCallback>
}
 800f6de:	bf00      	nop
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	60f8      	str	r0, [r7, #12]
 800f6ee:	60b9      	str	r1, [r7, #8]
 800f6f0:	603b      	str	r3, [r7, #0]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f6f6:	e025      	b.n	800f744 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6fe:	d021      	beq.n	800f744 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f700:	f7fc fa10 	bl	800bb24 <HAL_GetTick>
 800f704:	4602      	mov	r2, r0
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d302      	bcc.n	800f716 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d116      	bne.n	800f744 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2200      	movs	r2, #0
 800f71a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2220      	movs	r2, #32
 800f720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2200      	movs	r2, #0
 800f728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f730:	f043 0220 	orr.w	r2, r3, #32
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f740:	2301      	movs	r3, #1
 800f742:	e023      	b.n	800f78c <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	0c1b      	lsrs	r3, r3, #16
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d10d      	bne.n	800f76a <I2C_WaitOnFlagUntilTimeout+0x84>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	695b      	ldr	r3, [r3, #20]
 800f754:	43da      	mvns	r2, r3
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	4013      	ands	r3, r2
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	bf0c      	ite	eq
 800f760:	2301      	moveq	r3, #1
 800f762:	2300      	movne	r3, #0
 800f764:	b2db      	uxtb	r3, r3
 800f766:	461a      	mov	r2, r3
 800f768:	e00c      	b.n	800f784 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	43da      	mvns	r2, r3
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	4013      	ands	r3, r2
 800f776:	b29b      	uxth	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	bf0c      	ite	eq
 800f77c:	2301      	moveq	r3, #1
 800f77e:	2300      	movne	r3, #0
 800f780:	b2db      	uxtb	r3, r3
 800f782:	461a      	mov	r2, r3
 800f784:	79fb      	ldrb	r3, [r7, #7]
 800f786:	429a      	cmp	r2, r3
 800f788:	d0b6      	beq.n	800f6f8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f7a2:	e051      	b.n	800f848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	695b      	ldr	r3, [r3, #20]
 800f7aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7b2:	d123      	bne.n	800f7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f7cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2220      	movs	r2, #32
 800f7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e8:	f043 0204 	orr.w	r2, r3, #4
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e046      	b.n	800f88a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f802:	d021      	beq.n	800f848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f804:	f7fc f98e 	bl	800bb24 <HAL_GetTick>
 800f808:	4602      	mov	r2, r0
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	1ad3      	subs	r3, r2, r3
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	429a      	cmp	r2, r3
 800f812:	d302      	bcc.n	800f81a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d116      	bne.n	800f848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2200      	movs	r2, #0
 800f81e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2220      	movs	r2, #32
 800f824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f834:	f043 0220 	orr.w	r2, r3, #32
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f844:	2301      	movs	r3, #1
 800f846:	e020      	b.n	800f88a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	0c1b      	lsrs	r3, r3, #16
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d10c      	bne.n	800f86c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	695b      	ldr	r3, [r3, #20]
 800f858:	43da      	mvns	r2, r3
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	4013      	ands	r3, r2
 800f85e:	b29b      	uxth	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	bf14      	ite	ne
 800f864:	2301      	movne	r3, #1
 800f866:	2300      	moveq	r3, #0
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	e00b      	b.n	800f884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	699b      	ldr	r3, [r3, #24]
 800f872:	43da      	mvns	r2, r3
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	4013      	ands	r3, r2
 800f878:	b29b      	uxth	r3, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	bf14      	ite	ne
 800f87e:	2301      	movne	r3, #1
 800f880:	2300      	moveq	r3, #0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b00      	cmp	r3, #0
 800f886:	d18d      	bne.n	800f7a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f888:	2300      	movs	r3, #0
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f892:	b580      	push	{r7, lr}
 800f894:	b084      	sub	sp, #16
 800f896:	af00      	add	r7, sp, #0
 800f898:	60f8      	str	r0, [r7, #12]
 800f89a:	60b9      	str	r1, [r7, #8]
 800f89c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f89e:	e02d      	b.n	800f8fc <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f000 f8ce 	bl	800fa42 <I2C_IsAcknowledgeFailed>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d001      	beq.n	800f8b0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e02d      	b.n	800f90c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b6:	d021      	beq.n	800f8fc <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8b8:	f7fc f934 	bl	800bb24 <HAL_GetTick>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d302      	bcc.n	800f8ce <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d116      	bne.n	800f8fc <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2220      	movs	r2, #32
 800f8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8e8:	f043 0220 	orr.w	r2, r3, #32
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e007      	b.n	800f90c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	695b      	ldr	r3, [r3, #20]
 800f902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f906:	2b80      	cmp	r3, #128	; 0x80
 800f908:	d1ca      	bne.n	800f8a0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f920:	e02d      	b.n	800f97e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f000 f88d 	bl	800fa42 <I2C_IsAcknowledgeFailed>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f92e:	2301      	movs	r3, #1
 800f930:	e02d      	b.n	800f98e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f938:	d021      	beq.n	800f97e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f93a:	f7fc f8f3 	bl	800bb24 <HAL_GetTick>
 800f93e:	4602      	mov	r2, r0
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	429a      	cmp	r2, r3
 800f948:	d302      	bcc.n	800f950 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d116      	bne.n	800f97e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2200      	movs	r2, #0
 800f954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2220      	movs	r2, #32
 800f95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96a:	f043 0220 	orr.w	r2, r3, #32
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2200      	movs	r2, #0
 800f976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f97a:	2301      	movs	r3, #1
 800f97c:	e007      	b.n	800f98e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	695b      	ldr	r3, [r3, #20]
 800f984:	f003 0304 	and.w	r3, r3, #4
 800f988:	2b04      	cmp	r3, #4
 800f98a:	d1ca      	bne.n	800f922 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}

0800f996 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	60f8      	str	r0, [r7, #12]
 800f99e:	60b9      	str	r1, [r7, #8]
 800f9a0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f9a2:	e042      	b.n	800fa2a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	f003 0310 	and.w	r3, r3, #16
 800f9ae:	2b10      	cmp	r3, #16
 800f9b0:	d119      	bne.n	800f9e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f06f 0210 	mvn.w	r2, #16
 800f9ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2220      	movs	r2, #32
 800f9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e029      	b.n	800fa3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f9e6:	f7fc f89d 	bl	800bb24 <HAL_GetTick>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d302      	bcc.n	800f9fc <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d116      	bne.n	800fa2a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2220      	movs	r2, #32
 800fa06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa16:	f043 0220 	orr.w	r2, r3, #32
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	e007      	b.n	800fa3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	695b      	ldr	r3, [r3, #20]
 800fa30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa34:	2b40      	cmp	r3, #64	; 0x40
 800fa36:	d1b5      	bne.n	800f9a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800fa42:	b480      	push	{r7}
 800fa44:	b083      	sub	sp, #12
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	695b      	ldr	r3, [r3, #20]
 800fa50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa58:	d11b      	bne.n	800fa92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fa62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2220      	movs	r2, #32
 800fa6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa7e:	f043 0204 	orr.w	r2, r3, #4
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e000      	b.n	800fa94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800fab0:	d103      	bne.n	800faba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2201      	movs	r2, #1
 800fab6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800fab8:	e007      	b.n	800faca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fabe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800fac2:	d102      	bne.n	800faca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2208      	movs	r2, #8
 800fac8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800faca:	bf00      	nop
 800facc:	370c      	adds	r7, #12
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr

0800fad6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800fad6:	b480      	push	{r7}
 800fad8:	b083      	sub	sp, #12
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
 800fade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	2b20      	cmp	r3, #32
 800faea:	d129      	bne.n	800fb40 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2224      	movs	r2, #36	; 0x24
 800faf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f022 0201 	bic.w	r2, r2, #1
 800fb02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f022 0210 	bic.w	r2, r2, #16
 800fb12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	683a      	ldr	r2, [r7, #0]
 800fb20:	430a      	orrs	r2, r1
 800fb22:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f042 0201 	orr.w	r2, r2, #1
 800fb32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2220      	movs	r2, #32
 800fb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	e000      	b.n	800fb42 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800fb40:	2302      	movs	r3, #2
  }
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr

0800fb4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800fb4e:	b480      	push	{r7}
 800fb50:	b085      	sub	sp, #20
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
 800fb56:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	2b20      	cmp	r3, #32
 800fb66:	d12a      	bne.n	800fbbe <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2224      	movs	r2, #36	; 0x24
 800fb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f022 0201 	bic.w	r2, r2, #1
 800fb7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800fb88:	89fb      	ldrh	r3, [r7, #14]
 800fb8a:	f023 030f 	bic.w	r3, r3, #15
 800fb8e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	89fb      	ldrh	r3, [r7, #14]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	89fa      	ldrh	r2, [r7, #14]
 800fba0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f042 0201 	orr.w	r2, r2, #1
 800fbb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2220      	movs	r2, #32
 800fbb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	e000      	b.n	800fbc0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800fbbe:	2302      	movs	r3, #2
  }
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3714      	adds	r7, #20
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800fbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbce:	b08f      	sub	sp, #60	; 0x3c
 800fbd0:	af0a      	add	r7, sp, #40	; 0x28
 800fbd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e10f      	b.n	800fdfe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d106      	bne.n	800fbfe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7fb fed9 	bl	800b9b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2203      	movs	r2, #3
 800fc02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d102      	bne.n	800fc18 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2200      	movs	r2, #0
 800fc16:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f005 f84c 	bl	8014cba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	603b      	str	r3, [r7, #0]
 800fc28:	687e      	ldr	r6, [r7, #4]
 800fc2a:	466d      	mov	r5, sp
 800fc2c:	f106 0410 	add.w	r4, r6, #16
 800fc30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc38:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc3c:	e885 0003 	stmia.w	r5, {r0, r1}
 800fc40:	1d33      	adds	r3, r6, #4
 800fc42:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc44:	6838      	ldr	r0, [r7, #0]
 800fc46:	f004 ffd7 	bl	8014bf8 <USB_CoreInit>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d005      	beq.n	800fc5c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2202      	movs	r2, #2
 800fc54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e0d0      	b.n	800fdfe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2100      	movs	r1, #0
 800fc62:	4618      	mov	r0, r3
 800fc64:	f005 f83a 	bl	8014cdc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fc68:	2300      	movs	r3, #0
 800fc6a:	73fb      	strb	r3, [r7, #15]
 800fc6c:	e04a      	b.n	800fd04 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800fc6e:	7bfa      	ldrb	r2, [r7, #15]
 800fc70:	6879      	ldr	r1, [r7, #4]
 800fc72:	4613      	mov	r3, r2
 800fc74:	00db      	lsls	r3, r3, #3
 800fc76:	1a9b      	subs	r3, r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	440b      	add	r3, r1
 800fc7c:	333d      	adds	r3, #61	; 0x3d
 800fc7e:	2201      	movs	r2, #1
 800fc80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800fc82:	7bfa      	ldrb	r2, [r7, #15]
 800fc84:	6879      	ldr	r1, [r7, #4]
 800fc86:	4613      	mov	r3, r2
 800fc88:	00db      	lsls	r3, r3, #3
 800fc8a:	1a9b      	subs	r3, r3, r2
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	440b      	add	r3, r1
 800fc90:	333c      	adds	r3, #60	; 0x3c
 800fc92:	7bfa      	ldrb	r2, [r7, #15]
 800fc94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800fc96:	7bfa      	ldrb	r2, [r7, #15]
 800fc98:	7bfb      	ldrb	r3, [r7, #15]
 800fc9a:	b298      	uxth	r0, r3
 800fc9c:	6879      	ldr	r1, [r7, #4]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	1a9b      	subs	r3, r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	440b      	add	r3, r1
 800fca8:	3342      	adds	r3, #66	; 0x42
 800fcaa:	4602      	mov	r2, r0
 800fcac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800fcae:	7bfa      	ldrb	r2, [r7, #15]
 800fcb0:	6879      	ldr	r1, [r7, #4]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	1a9b      	subs	r3, r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	440b      	add	r3, r1
 800fcbc:	333f      	adds	r3, #63	; 0x3f
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800fcc2:	7bfa      	ldrb	r2, [r7, #15]
 800fcc4:	6879      	ldr	r1, [r7, #4]
 800fcc6:	4613      	mov	r3, r2
 800fcc8:	00db      	lsls	r3, r3, #3
 800fcca:	1a9b      	subs	r3, r3, r2
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	440b      	add	r3, r1
 800fcd0:	3344      	adds	r3, #68	; 0x44
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800fcd6:	7bfa      	ldrb	r2, [r7, #15]
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	4613      	mov	r3, r2
 800fcdc:	00db      	lsls	r3, r3, #3
 800fcde:	1a9b      	subs	r3, r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	440b      	add	r3, r1
 800fce4:	3348      	adds	r3, #72	; 0x48
 800fce6:	2200      	movs	r2, #0
 800fce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800fcea:	7bfa      	ldrb	r2, [r7, #15]
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	4613      	mov	r3, r2
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	1a9b      	subs	r3, r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	440b      	add	r3, r1
 800fcf8:	3350      	adds	r3, #80	; 0x50
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fcfe:	7bfb      	ldrb	r3, [r7, #15]
 800fd00:	3301      	adds	r3, #1
 800fd02:	73fb      	strb	r3, [r7, #15]
 800fd04:	7bfa      	ldrb	r2, [r7, #15]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d3af      	bcc.n	800fc6e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fd0e:	2300      	movs	r3, #0
 800fd10:	73fb      	strb	r3, [r7, #15]
 800fd12:	e044      	b.n	800fd9e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800fd14:	7bfa      	ldrb	r2, [r7, #15]
 800fd16:	6879      	ldr	r1, [r7, #4]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	00db      	lsls	r3, r3, #3
 800fd1c:	1a9b      	subs	r3, r3, r2
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	440b      	add	r3, r1
 800fd22:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800fd26:	2200      	movs	r2, #0
 800fd28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800fd2a:	7bfa      	ldrb	r2, [r7, #15]
 800fd2c:	6879      	ldr	r1, [r7, #4]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	00db      	lsls	r3, r3, #3
 800fd32:	1a9b      	subs	r3, r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	440b      	add	r3, r1
 800fd38:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800fd3c:	7bfa      	ldrb	r2, [r7, #15]
 800fd3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800fd40:	7bfa      	ldrb	r2, [r7, #15]
 800fd42:	6879      	ldr	r1, [r7, #4]
 800fd44:	4613      	mov	r3, r2
 800fd46:	00db      	lsls	r3, r3, #3
 800fd48:	1a9b      	subs	r3, r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	440b      	add	r3, r1
 800fd4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fd52:	2200      	movs	r2, #0
 800fd54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800fd56:	7bfa      	ldrb	r2, [r7, #15]
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	00db      	lsls	r3, r3, #3
 800fd5e:	1a9b      	subs	r3, r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	440b      	add	r3, r1
 800fd64:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800fd68:	2200      	movs	r2, #0
 800fd6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800fd6c:	7bfa      	ldrb	r2, [r7, #15]
 800fd6e:	6879      	ldr	r1, [r7, #4]
 800fd70:	4613      	mov	r3, r2
 800fd72:	00db      	lsls	r3, r3, #3
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd7e:	2200      	movs	r2, #0
 800fd80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800fd82:	7bfa      	ldrb	r2, [r7, #15]
 800fd84:	6879      	ldr	r1, [r7, #4]
 800fd86:	4613      	mov	r3, r2
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	1a9b      	subs	r3, r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	440b      	add	r3, r1
 800fd90:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800fd94:	2200      	movs	r2, #0
 800fd96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	73fb      	strb	r3, [r7, #15]
 800fd9e:	7bfa      	ldrb	r2, [r7, #15]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d3b5      	bcc.n	800fd14 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	603b      	str	r3, [r7, #0]
 800fdae:	687e      	ldr	r6, [r7, #4]
 800fdb0:	466d      	mov	r5, sp
 800fdb2:	f106 0410 	add.w	r4, r6, #16
 800fdb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fdba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fdbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fdc2:	e885 0003 	stmia.w	r5, {r0, r1}
 800fdc6:	1d33      	adds	r3, r6, #4
 800fdc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fdca:	6838      	ldr	r0, [r7, #0]
 800fdcc:	f004 ffb0 	bl	8014d30 <USB_DevInit>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d005      	beq.n	800fde2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2202      	movs	r2, #2
 800fdda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800fdde:	2301      	movs	r3, #1
 800fde0:	e00d      	b.n	800fdfe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2201      	movs	r2, #1
 800fdee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f005 f95f 	bl	80150ba <USB_DevDisconnect>

  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3714      	adds	r7, #20
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800fe08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d101      	bne.n	800fe1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
 800fe18:	e25b      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d075      	beq.n	800ff12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fe26:	4ba3      	ldr	r3, [pc, #652]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	f003 030c 	and.w	r3, r3, #12
 800fe2e:	2b04      	cmp	r3, #4
 800fe30:	d00c      	beq.n	800fe4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fe32:	4ba0      	ldr	r3, [pc, #640]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe34:	689b      	ldr	r3, [r3, #8]
 800fe36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fe3a:	2b08      	cmp	r3, #8
 800fe3c:	d112      	bne.n	800fe64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fe3e:	4b9d      	ldr	r3, [pc, #628]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe4a:	d10b      	bne.n	800fe64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe4c:	4b99      	ldr	r3, [pc, #612]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d05b      	beq.n	800ff10 <HAL_RCC_OscConfig+0x108>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d157      	bne.n	800ff10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800fe60:	2301      	movs	r3, #1
 800fe62:	e236      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe6c:	d106      	bne.n	800fe7c <HAL_RCC_OscConfig+0x74>
 800fe6e:	4b91      	ldr	r3, [pc, #580]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a90      	ldr	r2, [pc, #576]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe78:	6013      	str	r3, [r2, #0]
 800fe7a:	e01d      	b.n	800feb8 <HAL_RCC_OscConfig+0xb0>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fe84:	d10c      	bne.n	800fea0 <HAL_RCC_OscConfig+0x98>
 800fe86:	4b8b      	ldr	r3, [pc, #556]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4a8a      	ldr	r2, [pc, #552]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fe90:	6013      	str	r3, [r2, #0]
 800fe92:	4b88      	ldr	r3, [pc, #544]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4a87      	ldr	r2, [pc, #540]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fe98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe9c:	6013      	str	r3, [r2, #0]
 800fe9e:	e00b      	b.n	800feb8 <HAL_RCC_OscConfig+0xb0>
 800fea0:	4b84      	ldr	r3, [pc, #528]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a83      	ldr	r2, [pc, #524]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800feaa:	6013      	str	r3, [r2, #0]
 800feac:	4b81      	ldr	r3, [pc, #516]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a80      	ldr	r2, [pc, #512]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800feb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800feb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d013      	beq.n	800fee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fec0:	f7fb fe30 	bl	800bb24 <HAL_GetTick>
 800fec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fec6:	e008      	b.n	800feda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fec8:	f7fb fe2c 	bl	800bb24 <HAL_GetTick>
 800fecc:	4602      	mov	r2, r0
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	2b64      	cmp	r3, #100	; 0x64
 800fed4:	d901      	bls.n	800feda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800fed6:	2303      	movs	r3, #3
 800fed8:	e1fb      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800feda:	4b76      	ldr	r3, [pc, #472]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d0f0      	beq.n	800fec8 <HAL_RCC_OscConfig+0xc0>
 800fee6:	e014      	b.n	800ff12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fee8:	f7fb fe1c 	bl	800bb24 <HAL_GetTick>
 800feec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800feee:	e008      	b.n	800ff02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fef0:	f7fb fe18 	bl	800bb24 <HAL_GetTick>
 800fef4:	4602      	mov	r2, r0
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	2b64      	cmp	r3, #100	; 0x64
 800fefc:	d901      	bls.n	800ff02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800fefe:	2303      	movs	r3, #3
 800ff00:	e1e7      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ff02:	4b6c      	ldr	r3, [pc, #432]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1f0      	bne.n	800fef0 <HAL_RCC_OscConfig+0xe8>
 800ff0e:	e000      	b.n	800ff12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ff10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f003 0302 	and.w	r3, r3, #2
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d063      	beq.n	800ffe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ff1e:	4b65      	ldr	r3, [pc, #404]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	f003 030c 	and.w	r3, r3, #12
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d00b      	beq.n	800ff42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ff2a:	4b62      	ldr	r3, [pc, #392]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ff32:	2b08      	cmp	r3, #8
 800ff34:	d11c      	bne.n	800ff70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ff36:	4b5f      	ldr	r3, [pc, #380]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d116      	bne.n	800ff70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ff42:	4b5c      	ldr	r3, [pc, #368]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f003 0302 	and.w	r3, r3, #2
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d005      	beq.n	800ff5a <HAL_RCC_OscConfig+0x152>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d001      	beq.n	800ff5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e1bb      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff5a:	4b56      	ldr	r3, [pc, #344]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	00db      	lsls	r3, r3, #3
 800ff68:	4952      	ldr	r1, [pc, #328]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ff6e:	e03a      	b.n	800ffe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d020      	beq.n	800ffba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ff78:	4b4f      	ldr	r3, [pc, #316]	; (80100b8 <HAL_RCC_OscConfig+0x2b0>)
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff7e:	f7fb fdd1 	bl	800bb24 <HAL_GetTick>
 800ff82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ff84:	e008      	b.n	800ff98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ff86:	f7fb fdcd 	bl	800bb24 <HAL_GetTick>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	1ad3      	subs	r3, r2, r3
 800ff90:	2b02      	cmp	r3, #2
 800ff92:	d901      	bls.n	800ff98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ff94:	2303      	movs	r3, #3
 800ff96:	e19c      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ff98:	4b46      	ldr	r3, [pc, #280]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f003 0302 	and.w	r3, r3, #2
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d0f0      	beq.n	800ff86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ffa4:	4b43      	ldr	r3, [pc, #268]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	00db      	lsls	r3, r3, #3
 800ffb2:	4940      	ldr	r1, [pc, #256]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	600b      	str	r3, [r1, #0]
 800ffb8:	e015      	b.n	800ffe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ffba:	4b3f      	ldr	r3, [pc, #252]	; (80100b8 <HAL_RCC_OscConfig+0x2b0>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffc0:	f7fb fdb0 	bl	800bb24 <HAL_GetTick>
 800ffc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ffc6:	e008      	b.n	800ffda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ffc8:	f7fb fdac 	bl	800bb24 <HAL_GetTick>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	d901      	bls.n	800ffda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ffd6:	2303      	movs	r3, #3
 800ffd8:	e17b      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ffda:	4b36      	ldr	r3, [pc, #216]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f003 0302 	and.w	r3, r3, #2
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1f0      	bne.n	800ffc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f003 0308 	and.w	r3, r3, #8
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d030      	beq.n	8010054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d016      	beq.n	8010028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fffa:	4b30      	ldr	r3, [pc, #192]	; (80100bc <HAL_RCC_OscConfig+0x2b4>)
 800fffc:	2201      	movs	r2, #1
 800fffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010000:	f7fb fd90 	bl	800bb24 <HAL_GetTick>
 8010004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010006:	e008      	b.n	801001a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010008:	f7fb fd8c 	bl	800bb24 <HAL_GetTick>
 801000c:	4602      	mov	r2, r0
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	2b02      	cmp	r3, #2
 8010014:	d901      	bls.n	801001a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010016:	2303      	movs	r3, #3
 8010018:	e15b      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801001a:	4b26      	ldr	r3, [pc, #152]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 801001c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801001e:	f003 0302 	and.w	r3, r3, #2
 8010022:	2b00      	cmp	r3, #0
 8010024:	d0f0      	beq.n	8010008 <HAL_RCC_OscConfig+0x200>
 8010026:	e015      	b.n	8010054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010028:	4b24      	ldr	r3, [pc, #144]	; (80100bc <HAL_RCC_OscConfig+0x2b4>)
 801002a:	2200      	movs	r2, #0
 801002c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801002e:	f7fb fd79 	bl	800bb24 <HAL_GetTick>
 8010032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010034:	e008      	b.n	8010048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010036:	f7fb fd75 	bl	800bb24 <HAL_GetTick>
 801003a:	4602      	mov	r2, r0
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	2b02      	cmp	r3, #2
 8010042:	d901      	bls.n	8010048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010044:	2303      	movs	r3, #3
 8010046:	e144      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010048:	4b1a      	ldr	r3, [pc, #104]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 801004a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801004c:	f003 0302 	and.w	r3, r3, #2
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1f0      	bne.n	8010036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f003 0304 	and.w	r3, r3, #4
 801005c:	2b00      	cmp	r3, #0
 801005e:	f000 80a0 	beq.w	80101a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010062:	2300      	movs	r3, #0
 8010064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010066:	4b13      	ldr	r3, [pc, #76]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 8010068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801006a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801006e:	2b00      	cmp	r3, #0
 8010070:	d10f      	bne.n	8010092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010072:	2300      	movs	r3, #0
 8010074:	60bb      	str	r3, [r7, #8]
 8010076:	4b0f      	ldr	r3, [pc, #60]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 8010078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801007a:	4a0e      	ldr	r2, [pc, #56]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 801007c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010080:	6413      	str	r3, [r2, #64]	; 0x40
 8010082:	4b0c      	ldr	r3, [pc, #48]	; (80100b4 <HAL_RCC_OscConfig+0x2ac>)
 8010084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801008a:	60bb      	str	r3, [r7, #8]
 801008c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801008e:	2301      	movs	r3, #1
 8010090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010092:	4b0b      	ldr	r3, [pc, #44]	; (80100c0 <HAL_RCC_OscConfig+0x2b8>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801009a:	2b00      	cmp	r3, #0
 801009c:	d121      	bne.n	80100e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801009e:	4b08      	ldr	r3, [pc, #32]	; (80100c0 <HAL_RCC_OscConfig+0x2b8>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	4a07      	ldr	r2, [pc, #28]	; (80100c0 <HAL_RCC_OscConfig+0x2b8>)
 80100a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80100aa:	f7fb fd3b 	bl	800bb24 <HAL_GetTick>
 80100ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80100b0:	e011      	b.n	80100d6 <HAL_RCC_OscConfig+0x2ce>
 80100b2:	bf00      	nop
 80100b4:	40023800 	.word	0x40023800
 80100b8:	42470000 	.word	0x42470000
 80100bc:	42470e80 	.word	0x42470e80
 80100c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80100c4:	f7fb fd2e 	bl	800bb24 <HAL_GetTick>
 80100c8:	4602      	mov	r2, r0
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	2b02      	cmp	r3, #2
 80100d0:	d901      	bls.n	80100d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80100d2:	2303      	movs	r3, #3
 80100d4:	e0fd      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80100d6:	4b81      	ldr	r3, [pc, #516]	; (80102dc <HAL_RCC_OscConfig+0x4d4>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d0f0      	beq.n	80100c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	2b01      	cmp	r3, #1
 80100e8:	d106      	bne.n	80100f8 <HAL_RCC_OscConfig+0x2f0>
 80100ea:	4b7d      	ldr	r3, [pc, #500]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 80100ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ee:	4a7c      	ldr	r2, [pc, #496]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 80100f0:	f043 0301 	orr.w	r3, r3, #1
 80100f4:	6713      	str	r3, [r2, #112]	; 0x70
 80100f6:	e01c      	b.n	8010132 <HAL_RCC_OscConfig+0x32a>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	2b05      	cmp	r3, #5
 80100fe:	d10c      	bne.n	801011a <HAL_RCC_OscConfig+0x312>
 8010100:	4b77      	ldr	r3, [pc, #476]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010104:	4a76      	ldr	r2, [pc, #472]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010106:	f043 0304 	orr.w	r3, r3, #4
 801010a:	6713      	str	r3, [r2, #112]	; 0x70
 801010c:	4b74      	ldr	r3, [pc, #464]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 801010e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010110:	4a73      	ldr	r2, [pc, #460]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010112:	f043 0301 	orr.w	r3, r3, #1
 8010116:	6713      	str	r3, [r2, #112]	; 0x70
 8010118:	e00b      	b.n	8010132 <HAL_RCC_OscConfig+0x32a>
 801011a:	4b71      	ldr	r3, [pc, #452]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 801011c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801011e:	4a70      	ldr	r2, [pc, #448]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010120:	f023 0301 	bic.w	r3, r3, #1
 8010124:	6713      	str	r3, [r2, #112]	; 0x70
 8010126:	4b6e      	ldr	r3, [pc, #440]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801012a:	4a6d      	ldr	r2, [pc, #436]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 801012c:	f023 0304 	bic.w	r3, r3, #4
 8010130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	689b      	ldr	r3, [r3, #8]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d015      	beq.n	8010166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801013a:	f7fb fcf3 	bl	800bb24 <HAL_GetTick>
 801013e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010140:	e00a      	b.n	8010158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010142:	f7fb fcef 	bl	800bb24 <HAL_GetTick>
 8010146:	4602      	mov	r2, r0
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010150:	4293      	cmp	r3, r2
 8010152:	d901      	bls.n	8010158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010154:	2303      	movs	r3, #3
 8010156:	e0bc      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010158:	4b61      	ldr	r3, [pc, #388]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 801015a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801015c:	f003 0302 	and.w	r3, r3, #2
 8010160:	2b00      	cmp	r3, #0
 8010162:	d0ee      	beq.n	8010142 <HAL_RCC_OscConfig+0x33a>
 8010164:	e014      	b.n	8010190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010166:	f7fb fcdd 	bl	800bb24 <HAL_GetTick>
 801016a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801016c:	e00a      	b.n	8010184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801016e:	f7fb fcd9 	bl	800bb24 <HAL_GetTick>
 8010172:	4602      	mov	r2, r0
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	f241 3288 	movw	r2, #5000	; 0x1388
 801017c:	4293      	cmp	r3, r2
 801017e:	d901      	bls.n	8010184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8010180:	2303      	movs	r3, #3
 8010182:	e0a6      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010184:	4b56      	ldr	r3, [pc, #344]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1ee      	bne.n	801016e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010190:	7dfb      	ldrb	r3, [r7, #23]
 8010192:	2b01      	cmp	r3, #1
 8010194:	d105      	bne.n	80101a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010196:	4b52      	ldr	r3, [pc, #328]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801019a:	4a51      	ldr	r2, [pc, #324]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 801019c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80101a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	699b      	ldr	r3, [r3, #24]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f000 8092 	beq.w	80102d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80101ac:	4b4c      	ldr	r3, [pc, #304]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 80101ae:	689b      	ldr	r3, [r3, #8]
 80101b0:	f003 030c 	and.w	r3, r3, #12
 80101b4:	2b08      	cmp	r3, #8
 80101b6:	d05c      	beq.n	8010272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	2b02      	cmp	r3, #2
 80101be:	d141      	bne.n	8010244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80101c0:	4b48      	ldr	r3, [pc, #288]	; (80102e4 <HAL_RCC_OscConfig+0x4dc>)
 80101c2:	2200      	movs	r2, #0
 80101c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80101c6:	f7fb fcad 	bl	800bb24 <HAL_GetTick>
 80101ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80101cc:	e008      	b.n	80101e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80101ce:	f7fb fca9 	bl	800bb24 <HAL_GetTick>
 80101d2:	4602      	mov	r2, r0
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d901      	bls.n	80101e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80101dc:	2303      	movs	r3, #3
 80101de:	e078      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80101e0:	4b3f      	ldr	r3, [pc, #252]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d1f0      	bne.n	80101ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	69da      	ldr	r2, [r3, #28]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6a1b      	ldr	r3, [r3, #32]
 80101f4:	431a      	orrs	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fa:	019b      	lsls	r3, r3, #6
 80101fc:	431a      	orrs	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010202:	085b      	lsrs	r3, r3, #1
 8010204:	3b01      	subs	r3, #1
 8010206:	041b      	lsls	r3, r3, #16
 8010208:	431a      	orrs	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020e:	061b      	lsls	r3, r3, #24
 8010210:	4933      	ldr	r1, [pc, #204]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010212:	4313      	orrs	r3, r2
 8010214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010216:	4b33      	ldr	r3, [pc, #204]	; (80102e4 <HAL_RCC_OscConfig+0x4dc>)
 8010218:	2201      	movs	r2, #1
 801021a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801021c:	f7fb fc82 	bl	800bb24 <HAL_GetTick>
 8010220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010222:	e008      	b.n	8010236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010224:	f7fb fc7e 	bl	800bb24 <HAL_GetTick>
 8010228:	4602      	mov	r2, r0
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	2b02      	cmp	r3, #2
 8010230:	d901      	bls.n	8010236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010232:	2303      	movs	r3, #3
 8010234:	e04d      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010236:	4b2a      	ldr	r3, [pc, #168]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801023e:	2b00      	cmp	r3, #0
 8010240:	d0f0      	beq.n	8010224 <HAL_RCC_OscConfig+0x41c>
 8010242:	e045      	b.n	80102d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010244:	4b27      	ldr	r3, [pc, #156]	; (80102e4 <HAL_RCC_OscConfig+0x4dc>)
 8010246:	2200      	movs	r2, #0
 8010248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801024a:	f7fb fc6b 	bl	800bb24 <HAL_GetTick>
 801024e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010250:	e008      	b.n	8010264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010252:	f7fb fc67 	bl	800bb24 <HAL_GetTick>
 8010256:	4602      	mov	r2, r0
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	2b02      	cmp	r3, #2
 801025e:	d901      	bls.n	8010264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010260:	2303      	movs	r3, #3
 8010262:	e036      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010264:	4b1e      	ldr	r3, [pc, #120]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1f0      	bne.n	8010252 <HAL_RCC_OscConfig+0x44a>
 8010270:	e02e      	b.n	80102d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	699b      	ldr	r3, [r3, #24]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d101      	bne.n	801027e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	e029      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801027e:	4b18      	ldr	r3, [pc, #96]	; (80102e0 <HAL_RCC_OscConfig+0x4d8>)
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	69db      	ldr	r3, [r3, #28]
 801028e:	429a      	cmp	r2, r3
 8010290:	d11c      	bne.n	80102cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801029c:	429a      	cmp	r2, r3
 801029e:	d115      	bne.n	80102cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80102a6:	4013      	ands	r3, r2
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d10d      	bne.n	80102cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d106      	bne.n	80102cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d001      	beq.n	80102d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80102cc:	2301      	movs	r3, #1
 80102ce:	e000      	b.n	80102d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3718      	adds	r7, #24
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	40007000 	.word	0x40007000
 80102e0:	40023800 	.word	0x40023800
 80102e4:	42470060 	.word	0x42470060

080102e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b084      	sub	sp, #16
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d101      	bne.n	80102fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80102f8:	2301      	movs	r3, #1
 80102fa:	e0cc      	b.n	8010496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80102fc:	4b68      	ldr	r3, [pc, #416]	; (80104a0 <HAL_RCC_ClockConfig+0x1b8>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f003 030f 	and.w	r3, r3, #15
 8010304:	683a      	ldr	r2, [r7, #0]
 8010306:	429a      	cmp	r2, r3
 8010308:	d90c      	bls.n	8010324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801030a:	4b65      	ldr	r3, [pc, #404]	; (80104a0 <HAL_RCC_ClockConfig+0x1b8>)
 801030c:	683a      	ldr	r2, [r7, #0]
 801030e:	b2d2      	uxtb	r2, r2
 8010310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010312:	4b63      	ldr	r3, [pc, #396]	; (80104a0 <HAL_RCC_ClockConfig+0x1b8>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f003 030f 	and.w	r3, r3, #15
 801031a:	683a      	ldr	r2, [r7, #0]
 801031c:	429a      	cmp	r2, r3
 801031e:	d001      	beq.n	8010324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010320:	2301      	movs	r3, #1
 8010322:	e0b8      	b.n	8010496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f003 0302 	and.w	r3, r3, #2
 801032c:	2b00      	cmp	r3, #0
 801032e:	d020      	beq.n	8010372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f003 0304 	and.w	r3, r3, #4
 8010338:	2b00      	cmp	r3, #0
 801033a:	d005      	beq.n	8010348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801033c:	4b59      	ldr	r3, [pc, #356]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	4a58      	ldr	r2, [pc, #352]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 8010342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f003 0308 	and.w	r3, r3, #8
 8010350:	2b00      	cmp	r3, #0
 8010352:	d005      	beq.n	8010360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010354:	4b53      	ldr	r3, [pc, #332]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	4a52      	ldr	r2, [pc, #328]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 801035a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801035e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010360:	4b50      	ldr	r3, [pc, #320]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	494d      	ldr	r1, [pc, #308]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 801036e:	4313      	orrs	r3, r2
 8010370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f003 0301 	and.w	r3, r3, #1
 801037a:	2b00      	cmp	r3, #0
 801037c:	d044      	beq.n	8010408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	2b01      	cmp	r3, #1
 8010384:	d107      	bne.n	8010396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010386:	4b47      	ldr	r3, [pc, #284]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801038e:	2b00      	cmp	r3, #0
 8010390:	d119      	bne.n	80103c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010392:	2301      	movs	r3, #1
 8010394:	e07f      	b.n	8010496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	2b02      	cmp	r3, #2
 801039c:	d003      	beq.n	80103a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80103a2:	2b03      	cmp	r3, #3
 80103a4:	d107      	bne.n	80103b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103a6:	4b3f      	ldr	r3, [pc, #252]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d109      	bne.n	80103c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80103b2:	2301      	movs	r3, #1
 80103b4:	e06f      	b.n	8010496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80103b6:	4b3b      	ldr	r3, [pc, #236]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f003 0302 	and.w	r3, r3, #2
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d101      	bne.n	80103c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80103c2:	2301      	movs	r3, #1
 80103c4:	e067      	b.n	8010496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80103c6:	4b37      	ldr	r3, [pc, #220]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	f023 0203 	bic.w	r2, r3, #3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	4934      	ldr	r1, [pc, #208]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 80103d4:	4313      	orrs	r3, r2
 80103d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80103d8:	f7fb fba4 	bl	800bb24 <HAL_GetTick>
 80103dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80103de:	e00a      	b.n	80103f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80103e0:	f7fb fba0 	bl	800bb24 <HAL_GetTick>
 80103e4:	4602      	mov	r2, r0
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	1ad3      	subs	r3, r2, r3
 80103ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d901      	bls.n	80103f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e04f      	b.n	8010496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80103f6:	4b2b      	ldr	r3, [pc, #172]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	f003 020c 	and.w	r2, r3, #12
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	429a      	cmp	r2, r3
 8010406:	d1eb      	bne.n	80103e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010408:	4b25      	ldr	r3, [pc, #148]	; (80104a0 <HAL_RCC_ClockConfig+0x1b8>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f003 030f 	and.w	r3, r3, #15
 8010410:	683a      	ldr	r2, [r7, #0]
 8010412:	429a      	cmp	r2, r3
 8010414:	d20c      	bcs.n	8010430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010416:	4b22      	ldr	r3, [pc, #136]	; (80104a0 <HAL_RCC_ClockConfig+0x1b8>)
 8010418:	683a      	ldr	r2, [r7, #0]
 801041a:	b2d2      	uxtb	r2, r2
 801041c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801041e:	4b20      	ldr	r3, [pc, #128]	; (80104a0 <HAL_RCC_ClockConfig+0x1b8>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f003 030f 	and.w	r3, r3, #15
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	429a      	cmp	r2, r3
 801042a:	d001      	beq.n	8010430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801042c:	2301      	movs	r3, #1
 801042e:	e032      	b.n	8010496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f003 0304 	and.w	r3, r3, #4
 8010438:	2b00      	cmp	r3, #0
 801043a:	d008      	beq.n	801044e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801043c:	4b19      	ldr	r3, [pc, #100]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	4916      	ldr	r1, [pc, #88]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 801044a:	4313      	orrs	r3, r2
 801044c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	f003 0308 	and.w	r3, r3, #8
 8010456:	2b00      	cmp	r3, #0
 8010458:	d009      	beq.n	801046e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801045a:	4b12      	ldr	r3, [pc, #72]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 801045c:	689b      	ldr	r3, [r3, #8]
 801045e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	691b      	ldr	r3, [r3, #16]
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	490e      	ldr	r1, [pc, #56]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 801046a:	4313      	orrs	r3, r2
 801046c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801046e:	f000 f821 	bl	80104b4 <HAL_RCC_GetSysClockFreq>
 8010472:	4601      	mov	r1, r0
 8010474:	4b0b      	ldr	r3, [pc, #44]	; (80104a4 <HAL_RCC_ClockConfig+0x1bc>)
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	091b      	lsrs	r3, r3, #4
 801047a:	f003 030f 	and.w	r3, r3, #15
 801047e:	4a0a      	ldr	r2, [pc, #40]	; (80104a8 <HAL_RCC_ClockConfig+0x1c0>)
 8010480:	5cd3      	ldrb	r3, [r2, r3]
 8010482:	fa21 f303 	lsr.w	r3, r1, r3
 8010486:	4a09      	ldr	r2, [pc, #36]	; (80104ac <HAL_RCC_ClockConfig+0x1c4>)
 8010488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801048a:	4b09      	ldr	r3, [pc, #36]	; (80104b0 <HAL_RCC_ClockConfig+0x1c8>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4618      	mov	r0, r3
 8010490:	f7fa f84e 	bl	800a530 <HAL_InitTick>

  return HAL_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	40023c00 	.word	0x40023c00
 80104a4:	40023800 	.word	0x40023800
 80104a8:	080226b8 	.word	0x080226b8
 80104ac:	200000cc 	.word	0x200000cc
 80104b0:	200000d0 	.word	0x200000d0

080104b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80104b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80104ba:	2300      	movs	r3, #0
 80104bc:	607b      	str	r3, [r7, #4]
 80104be:	2300      	movs	r3, #0
 80104c0:	60fb      	str	r3, [r7, #12]
 80104c2:	2300      	movs	r3, #0
 80104c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80104c6:	2300      	movs	r3, #0
 80104c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80104ca:	4b63      	ldr	r3, [pc, #396]	; (8010658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	f003 030c 	and.w	r3, r3, #12
 80104d2:	2b04      	cmp	r3, #4
 80104d4:	d007      	beq.n	80104e6 <HAL_RCC_GetSysClockFreq+0x32>
 80104d6:	2b08      	cmp	r3, #8
 80104d8:	d008      	beq.n	80104ec <HAL_RCC_GetSysClockFreq+0x38>
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f040 80b4 	bne.w	8010648 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80104e0:	4b5e      	ldr	r3, [pc, #376]	; (801065c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80104e2:	60bb      	str	r3, [r7, #8]
       break;
 80104e4:	e0b3      	b.n	801064e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80104e6:	4b5e      	ldr	r3, [pc, #376]	; (8010660 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80104e8:	60bb      	str	r3, [r7, #8]
      break;
 80104ea:	e0b0      	b.n	801064e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80104ec:	4b5a      	ldr	r3, [pc, #360]	; (8010658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80104f6:	4b58      	ldr	r3, [pc, #352]	; (8010658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d04a      	beq.n	8010598 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010502:	4b55      	ldr	r3, [pc, #340]	; (8010658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	099b      	lsrs	r3, r3, #6
 8010508:	f04f 0400 	mov.w	r4, #0
 801050c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010510:	f04f 0200 	mov.w	r2, #0
 8010514:	ea03 0501 	and.w	r5, r3, r1
 8010518:	ea04 0602 	and.w	r6, r4, r2
 801051c:	4629      	mov	r1, r5
 801051e:	4632      	mov	r2, r6
 8010520:	f04f 0300 	mov.w	r3, #0
 8010524:	f04f 0400 	mov.w	r4, #0
 8010528:	0154      	lsls	r4, r2, #5
 801052a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801052e:	014b      	lsls	r3, r1, #5
 8010530:	4619      	mov	r1, r3
 8010532:	4622      	mov	r2, r4
 8010534:	1b49      	subs	r1, r1, r5
 8010536:	eb62 0206 	sbc.w	r2, r2, r6
 801053a:	f04f 0300 	mov.w	r3, #0
 801053e:	f04f 0400 	mov.w	r4, #0
 8010542:	0194      	lsls	r4, r2, #6
 8010544:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010548:	018b      	lsls	r3, r1, #6
 801054a:	1a5b      	subs	r3, r3, r1
 801054c:	eb64 0402 	sbc.w	r4, r4, r2
 8010550:	f04f 0100 	mov.w	r1, #0
 8010554:	f04f 0200 	mov.w	r2, #0
 8010558:	00e2      	lsls	r2, r4, #3
 801055a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801055e:	00d9      	lsls	r1, r3, #3
 8010560:	460b      	mov	r3, r1
 8010562:	4614      	mov	r4, r2
 8010564:	195b      	adds	r3, r3, r5
 8010566:	eb44 0406 	adc.w	r4, r4, r6
 801056a:	f04f 0100 	mov.w	r1, #0
 801056e:	f04f 0200 	mov.w	r2, #0
 8010572:	0262      	lsls	r2, r4, #9
 8010574:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8010578:	0259      	lsls	r1, r3, #9
 801057a:	460b      	mov	r3, r1
 801057c:	4614      	mov	r4, r2
 801057e:	4618      	mov	r0, r3
 8010580:	4621      	mov	r1, r4
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f04f 0400 	mov.w	r4, #0
 8010588:	461a      	mov	r2, r3
 801058a:	4623      	mov	r3, r4
 801058c:	f7f0 fcea 	bl	8000f64 <__aeabi_uldivmod>
 8010590:	4603      	mov	r3, r0
 8010592:	460c      	mov	r4, r1
 8010594:	60fb      	str	r3, [r7, #12]
 8010596:	e049      	b.n	801062c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010598:	4b2f      	ldr	r3, [pc, #188]	; (8010658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	099b      	lsrs	r3, r3, #6
 801059e:	f04f 0400 	mov.w	r4, #0
 80105a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80105a6:	f04f 0200 	mov.w	r2, #0
 80105aa:	ea03 0501 	and.w	r5, r3, r1
 80105ae:	ea04 0602 	and.w	r6, r4, r2
 80105b2:	4629      	mov	r1, r5
 80105b4:	4632      	mov	r2, r6
 80105b6:	f04f 0300 	mov.w	r3, #0
 80105ba:	f04f 0400 	mov.w	r4, #0
 80105be:	0154      	lsls	r4, r2, #5
 80105c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80105c4:	014b      	lsls	r3, r1, #5
 80105c6:	4619      	mov	r1, r3
 80105c8:	4622      	mov	r2, r4
 80105ca:	1b49      	subs	r1, r1, r5
 80105cc:	eb62 0206 	sbc.w	r2, r2, r6
 80105d0:	f04f 0300 	mov.w	r3, #0
 80105d4:	f04f 0400 	mov.w	r4, #0
 80105d8:	0194      	lsls	r4, r2, #6
 80105da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80105de:	018b      	lsls	r3, r1, #6
 80105e0:	1a5b      	subs	r3, r3, r1
 80105e2:	eb64 0402 	sbc.w	r4, r4, r2
 80105e6:	f04f 0100 	mov.w	r1, #0
 80105ea:	f04f 0200 	mov.w	r2, #0
 80105ee:	00e2      	lsls	r2, r4, #3
 80105f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80105f4:	00d9      	lsls	r1, r3, #3
 80105f6:	460b      	mov	r3, r1
 80105f8:	4614      	mov	r4, r2
 80105fa:	195b      	adds	r3, r3, r5
 80105fc:	eb44 0406 	adc.w	r4, r4, r6
 8010600:	f04f 0100 	mov.w	r1, #0
 8010604:	f04f 0200 	mov.w	r2, #0
 8010608:	02a2      	lsls	r2, r4, #10
 801060a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801060e:	0299      	lsls	r1, r3, #10
 8010610:	460b      	mov	r3, r1
 8010612:	4614      	mov	r4, r2
 8010614:	4618      	mov	r0, r3
 8010616:	4621      	mov	r1, r4
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f04f 0400 	mov.w	r4, #0
 801061e:	461a      	mov	r2, r3
 8010620:	4623      	mov	r3, r4
 8010622:	f7f0 fc9f 	bl	8000f64 <__aeabi_uldivmod>
 8010626:	4603      	mov	r3, r0
 8010628:	460c      	mov	r4, r1
 801062a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801062c:	4b0a      	ldr	r3, [pc, #40]	; (8010658 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	0c1b      	lsrs	r3, r3, #16
 8010632:	f003 0303 	and.w	r3, r3, #3
 8010636:	3301      	adds	r3, #1
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	fbb2 f3f3 	udiv	r3, r2, r3
 8010644:	60bb      	str	r3, [r7, #8]
      break;
 8010646:	e002      	b.n	801064e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010648:	4b04      	ldr	r3, [pc, #16]	; (801065c <HAL_RCC_GetSysClockFreq+0x1a8>)
 801064a:	60bb      	str	r3, [r7, #8]
      break;
 801064c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801064e:	68bb      	ldr	r3, [r7, #8]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3714      	adds	r7, #20
 8010654:	46bd      	mov	sp, r7
 8010656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010658:	40023800 	.word	0x40023800
 801065c:	00f42400 	.word	0x00f42400
 8010660:	007a1200 	.word	0x007a1200

08010664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010664:	b480      	push	{r7}
 8010666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010668:	4b03      	ldr	r3, [pc, #12]	; (8010678 <HAL_RCC_GetHCLKFreq+0x14>)
 801066a:	681b      	ldr	r3, [r3, #0]
}
 801066c:	4618      	mov	r0, r3
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	200000cc 	.word	0x200000cc

0801067c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010680:	f7ff fff0 	bl	8010664 <HAL_RCC_GetHCLKFreq>
 8010684:	4601      	mov	r1, r0
 8010686:	4b05      	ldr	r3, [pc, #20]	; (801069c <HAL_RCC_GetPCLK1Freq+0x20>)
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	0a9b      	lsrs	r3, r3, #10
 801068c:	f003 0307 	and.w	r3, r3, #7
 8010690:	4a03      	ldr	r2, [pc, #12]	; (80106a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010692:	5cd3      	ldrb	r3, [r2, r3]
 8010694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010698:	4618      	mov	r0, r3
 801069a:	bd80      	pop	{r7, pc}
 801069c:	40023800 	.word	0x40023800
 80106a0:	080226c8 	.word	0x080226c8

080106a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80106a8:	f7ff ffdc 	bl	8010664 <HAL_RCC_GetHCLKFreq>
 80106ac:	4601      	mov	r1, r0
 80106ae:	4b05      	ldr	r3, [pc, #20]	; (80106c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	0b5b      	lsrs	r3, r3, #13
 80106b4:	f003 0307 	and.w	r3, r3, #7
 80106b8:	4a03      	ldr	r2, [pc, #12]	; (80106c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80106ba:	5cd3      	ldrb	r3, [r2, r3]
 80106bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	40023800 	.word	0x40023800
 80106c8:	080226c8 	.word	0x080226c8

080106cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	220f      	movs	r2, #15
 80106da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80106dc:	4b12      	ldr	r3, [pc, #72]	; (8010728 <HAL_RCC_GetClockConfig+0x5c>)
 80106de:	689b      	ldr	r3, [r3, #8]
 80106e0:	f003 0203 	and.w	r2, r3, #3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80106e8:	4b0f      	ldr	r3, [pc, #60]	; (8010728 <HAL_RCC_GetClockConfig+0x5c>)
 80106ea:	689b      	ldr	r3, [r3, #8]
 80106ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80106f4:	4b0c      	ldr	r3, [pc, #48]	; (8010728 <HAL_RCC_GetClockConfig+0x5c>)
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010700:	4b09      	ldr	r3, [pc, #36]	; (8010728 <HAL_RCC_GetClockConfig+0x5c>)
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	08db      	lsrs	r3, r3, #3
 8010706:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801070e:	4b07      	ldr	r3, [pc, #28]	; (801072c <HAL_RCC_GetClockConfig+0x60>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f003 020f 	and.w	r2, r3, #15
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	601a      	str	r2, [r3, #0]
}
 801071a:	bf00      	nop
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop
 8010728:	40023800 	.word	0x40023800
 801072c:	40023c00 	.word	0x40023c00

08010730 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d101      	bne.n	8010742 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801073e:	2301      	movs	r3, #1
 8010740:	e022      	b.n	8010788 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b00      	cmp	r3, #0
 801074c:	d105      	bne.n	801075a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7f9 fd29 	bl	800a1ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2203      	movs	r2, #3
 801075e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 f814 	bl	8010790 <HAL_SD_InitCard>
 8010768:	4603      	mov	r3, r0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d001      	beq.n	8010772 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 801076e:	2301      	movs	r3, #1
 8010770:	e00a      	b.n	8010788 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010790:	b5b0      	push	{r4, r5, r7, lr}
 8010792:	b08e      	sub	sp, #56	; 0x38
 8010794:	af04      	add	r7, sp, #16
 8010796:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8010798:	2300      	movs	r3, #0
 801079a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 801079c:	2300      	movs	r3, #0
 801079e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80107a0:	2300      	movs	r3, #0
 80107a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80107a4:	2300      	movs	r3, #0
 80107a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80107a8:	2300      	movs	r3, #0
 80107aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80107ac:	2376      	movs	r3, #118	; 0x76
 80107ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681d      	ldr	r5, [r3, #0]
 80107b4:	466c      	mov	r4, sp
 80107b6:	f107 0314 	add.w	r3, r7, #20
 80107ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80107c2:	f107 0308 	add.w	r3, r7, #8
 80107c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80107c8:	4628      	mov	r0, r5
 80107ca:	f003 fcb1 	bl	8014130 <SDIO_Init>
 80107ce:	4603      	mov	r3, r0
 80107d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80107d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d001      	beq.n	80107e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	e031      	b.n	8010844 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80107e0:	4b1a      	ldr	r3, [pc, #104]	; (801084c <HAL_SD_InitCard+0xbc>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f003 fce9 	bl	80141c2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80107f0:	4b16      	ldr	r3, [pc, #88]	; (801084c <HAL_SD_InitCard+0xbc>)
 80107f2:	2201      	movs	r2, #1
 80107f4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 ffdc 	bl	80117b4 <SD_PowerON>
 80107fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80107fe:	6a3b      	ldr	r3, [r7, #32]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00b      	beq.n	801081c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2201      	movs	r2, #1
 8010808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	431a      	orrs	r2, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010818:	2301      	movs	r3, #1
 801081a:	e013      	b.n	8010844 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 fefb 	bl	8011618 <SD_InitCard>
 8010822:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010824:	6a3b      	ldr	r3, [r7, #32]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00b      	beq.n	8010842 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010836:	6a3b      	ldr	r3, [r7, #32]
 8010838:	431a      	orrs	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801083e:	2301      	movs	r3, #1
 8010840:	e000      	b.n	8010844 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3728      	adds	r7, #40	; 0x28
 8010848:	46bd      	mov	sp, r7
 801084a:	bdb0      	pop	{r4, r5, r7, pc}
 801084c:	422580a0 	.word	0x422580a0

08010850 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b08c      	sub	sp, #48	; 0x30
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	607a      	str	r2, [r7, #4]
 801085c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d107      	bne.n	8010878 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801086c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010874:	2301      	movs	r3, #1
 8010876:	e0c9      	b.n	8010a0c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801087e:	b2db      	uxtb	r3, r3
 8010880:	2b01      	cmp	r3, #1
 8010882:	f040 80c2 	bne.w	8010a0a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2200      	movs	r2, #0
 801088a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801088c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	441a      	add	r2, r3
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010896:	429a      	cmp	r2, r3
 8010898:	d907      	bls.n	80108aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801089e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80108a6:	2301      	movs	r3, #1
 80108a8:	e0b0      	b.n	8010a0c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2203      	movs	r2, #3
 80108ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2200      	movs	r2, #0
 80108b8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	6812      	ldr	r2, [r2, #0]
 80108c4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80108c8:	f043 0302 	orr.w	r3, r3, #2
 80108cc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d2:	4a50      	ldr	r2, [pc, #320]	; (8010a14 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80108d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108da:	4a4f      	ldr	r2, [pc, #316]	; (8010a18 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80108dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108e2:	2200      	movs	r2, #0
 80108e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	3380      	adds	r3, #128	; 0x80
 80108f0:	4619      	mov	r1, r3
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	025b      	lsls	r3, r3, #9
 80108f8:	089b      	lsrs	r3, r3, #2
 80108fa:	f7fb fd43 	bl	800c384 <HAL_DMA_Start_IT>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d017      	beq.n	8010934 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8010912:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4a40      	ldr	r2, [pc, #256]	; (8010a1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 801091a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010920:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2201      	movs	r2, #1
 801092c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010930:	2301      	movs	r3, #1
 8010932:	e06b      	b.n	8010a0c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8010934:	4b3a      	ldr	r3, [pc, #232]	; (8010a20 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8010936:	2201      	movs	r2, #1
 8010938:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801093e:	2b01      	cmp	r3, #1
 8010940:	d002      	beq.n	8010948 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8010942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010944:	025b      	lsls	r3, r3, #9
 8010946:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010950:	4618      	mov	r0, r3
 8010952:	f003 fcc9 	bl	80142e8 <SDMMC_CmdBlockLength>
 8010956:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8010958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00f      	beq.n	801097e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	4a2e      	ldr	r2, [pc, #184]	; (8010a1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8010964:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096c:	431a      	orrs	r2, r3
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2201      	movs	r2, #1
 8010976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	e046      	b.n	8010a0c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801097e:	f04f 33ff 	mov.w	r3, #4294967295
 8010982:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	025b      	lsls	r3, r3, #9
 8010988:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 801098a:	2390      	movs	r3, #144	; 0x90
 801098c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 801098e:	2302      	movs	r3, #2
 8010990:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8010992:	2300      	movs	r3, #0
 8010994:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8010996:	2301      	movs	r3, #1
 8010998:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f107 0210 	add.w	r2, r7, #16
 80109a2:	4611      	mov	r1, r2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f003 fc73 	bl	8014290 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d90a      	bls.n	80109c6 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2282      	movs	r2, #130	; 0x82
 80109b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109bc:	4618      	mov	r0, r3
 80109be:	f003 fcd7 	bl	8014370 <SDMMC_CmdReadMultiBlock>
 80109c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80109c4:	e009      	b.n	80109da <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2281      	movs	r2, #129	; 0x81
 80109ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109d2:	4618      	mov	r0, r3
 80109d4:	f003 fcaa 	bl	801432c <SDMMC_CmdReadSingleBlock>
 80109d8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80109da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d012      	beq.n	8010a06 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a0d      	ldr	r2, [pc, #52]	; (8010a1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80109e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ee:	431a      	orrs	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2201      	movs	r2, #1
 80109f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2200      	movs	r2, #0
 8010a00:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8010a02:	2301      	movs	r3, #1
 8010a04:	e002      	b.n	8010a0c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8010a06:	2300      	movs	r3, #0
 8010a08:	e000      	b.n	8010a0c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8010a0a:	2302      	movs	r3, #2
  }
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3730      	adds	r7, #48	; 0x30
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	08011427 	.word	0x08011427
 8010a18:	08011499 	.word	0x08011499
 8010a1c:	004005ff 	.word	0x004005ff
 8010a20:	4225858c 	.word	0x4225858c

08010a24 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b08c      	sub	sp, #48	; 0x30
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	607a      	str	r2, [r7, #4]
 8010a30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d107      	bne.n	8010a4c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010a48:	2301      	movs	r3, #1
 8010a4a:	e0ce      	b.n	8010bea <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	f040 80c7 	bne.w	8010be8 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	441a      	add	r2, r3
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d907      	bls.n	8010a7e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e0b5      	b.n	8010bea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2203      	movs	r2, #3
 8010a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a94:	68fa      	ldr	r2, [r7, #12]
 8010a96:	6812      	ldr	r2, [r2, #0]
 8010a98:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8010a9c:	f043 0302 	orr.w	r3, r3, #2
 8010aa0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aa6:	4a53      	ldr	r2, [pc, #332]	; (8010bf4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8010aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aae:	4a52      	ldr	r2, [pc, #328]	; (8010bf8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8010ab0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d002      	beq.n	8010ac8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8010ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac4:	025b      	lsls	r3, r3, #9
 8010ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f003 fc09 	bl	80142e8 <SDMMC_CmdBlockLength>
 8010ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d00f      	beq.n	8010afe <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a46      	ldr	r2, [pc, #280]	; (8010bfc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8010ae4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aec:	431a      	orrs	r2, r3
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2201      	movs	r2, #1
 8010af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010afa:	2301      	movs	r3, #1
 8010afc:	e075      	b.n	8010bea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d90a      	bls.n	8010b1a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	22a0      	movs	r2, #160	; 0xa0
 8010b08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b10:	4618      	mov	r0, r3
 8010b12:	f003 fc71 	bl	80143f8 <SDMMC_CmdWriteMultiBlock>
 8010b16:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010b18:	e009      	b.n	8010b2e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2290      	movs	r2, #144	; 0x90
 8010b1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b26:	4618      	mov	r0, r3
 8010b28:	f003 fc44 	bl	80143b4 <SDMMC_CmdWriteSingleBlock>
 8010b2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d012      	beq.n	8010b5a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a30      	ldr	r2, [pc, #192]	; (8010bfc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8010b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b42:	431a      	orrs	r2, r3
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	2200      	movs	r2, #0
 8010b54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	e047      	b.n	8010bea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8010b5a:	4b29      	ldr	r3, [pc, #164]	; (8010c00 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010b64:	68b9      	ldr	r1, [r7, #8]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	3380      	adds	r3, #128	; 0x80
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	025b      	lsls	r3, r3, #9
 8010b72:	089b      	lsrs	r3, r3, #2
 8010b74:	f7fb fc06 	bl	800c384 <HAL_DMA_Start_IT>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d01c      	beq.n	8010bb8 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	6812      	ldr	r2, [r2, #0]
 8010b88:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8010b8c:	f023 0302 	bic.w	r3, r3, #2
 8010b90:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a19      	ldr	r2, [pc, #100]	; (8010bfc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8010b98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e018      	b.n	8010bea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bbc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	025b      	lsls	r3, r3, #9
 8010bc2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8010bc4:	2390      	movs	r3, #144	; 0x90
 8010bc6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f107 0210 	add.w	r2, r7, #16
 8010bdc:	4611      	mov	r1, r2
 8010bde:	4618      	mov	r0, r3
 8010be0:	f003 fb56 	bl	8014290 <SDIO_ConfigData>

      return HAL_OK;
 8010be4:	2300      	movs	r3, #0
 8010be6:	e000      	b.n	8010bea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8010be8:	2302      	movs	r3, #2
  }
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3730      	adds	r7, #48	; 0x30
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	080113fd 	.word	0x080113fd
 8010bf8:	08011499 	.word	0x08011499
 8010bfc:	004005ff 	.word	0x004005ff
 8010c00:	4225858c 	.word	0x4225858c

08010c04 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c10:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d008      	beq.n	8010c32 <HAL_SD_IRQHandler+0x2e>
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f003 0308 	and.w	r3, r3, #8
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d003      	beq.n	8010c32 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 ffd8 	bl	8011be0 <SD_Read_IT>
 8010c30:	e165      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f000 808f 	beq.w	8010d60 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010c4a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	6812      	ldr	r2, [r2, #0]
 8010c56:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8010c5a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8010c5e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f022 0201 	bic.w	r2, r2, #1
 8010c6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f003 0308 	and.w	r3, r3, #8
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d039      	beq.n	8010cee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f003 0302 	and.w	r3, r3, #2
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d104      	bne.n	8010c8e <HAL_SD_IRQHandler+0x8a>
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f003 0320 	and.w	r3, r3, #32
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d011      	beq.n	8010cb2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4618      	mov	r0, r3
 8010c94:	f003 fbd2 	bl	801443c <SDMMC_CmdStopTransfer>
 8010c98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d008      	beq.n	8010cb2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	431a      	orrs	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f000 f92f 	bl	8010f10 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f240 523a 	movw	r2, #1338	; 0x53a
 8010cba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f003 0301 	and.w	r3, r3, #1
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d104      	bne.n	8010cde <HAL_SD_IRQHandler+0xda>
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f003 0302 	and.w	r3, r3, #2
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d003      	beq.n	8010ce6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f004 fade 	bl	80152a0 <HAL_SD_RxCpltCallback>
 8010ce4:	e10b      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f004 fad0 	bl	801528c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010cec:	e107      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	f000 8102 	beq.w	8010efe <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f003 0320 	and.w	r3, r3, #32
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d011      	beq.n	8010d28 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f003 fb97 	bl	801443c <SDMMC_CmdStopTransfer>
 8010d0e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d008      	beq.n	8010d28 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	431a      	orrs	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 f8f4 	bl	8010f10 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	f040 80e5 	bne.w	8010efe <HAL_SD_IRQHandler+0x2fa>
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f003 0302 	and.w	r3, r3, #2
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f040 80df 	bne.w	8010efe <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f022 0208 	bic.w	r2, r2, #8
 8010d4e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2201      	movs	r2, #1
 8010d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f004 fa97 	bl	801528c <HAL_SD_TxCpltCallback>
}
 8010d5e:	e0ce      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d008      	beq.n	8010d80 <HAL_SD_IRQHandler+0x17c>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f003 0308 	and.w	r3, r3, #8
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d003      	beq.n	8010d80 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 ff82 	bl	8011c82 <SD_Write_IT>
 8010d7e:	e0be      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d86:	f240 233a 	movw	r3, #570	; 0x23a
 8010d8a:	4013      	ands	r3, r2
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f000 80b6 	beq.w	8010efe <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d98:	f003 0302 	and.w	r3, r3, #2
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d005      	beq.n	8010dac <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010da4:	f043 0202 	orr.w	r2, r3, #2
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010db2:	f003 0308 	and.w	r3, r3, #8
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d005      	beq.n	8010dc6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dbe:	f043 0208 	orr.w	r2, r3, #8
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dcc:	f003 0320 	and.w	r3, r3, #32
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d005      	beq.n	8010de0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd8:	f043 0220 	orr.w	r2, r3, #32
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010de6:	f003 0310 	and.w	r3, r3, #16
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d005      	beq.n	8010dfa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df2:	f043 0210 	orr.w	r2, r3, #16
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d005      	beq.n	8010e14 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e0c:	f043 0208 	orr.w	r2, r3, #8
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f240 723a 	movw	r2, #1850	; 0x73a
 8010e1c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e24:	687a      	ldr	r2, [r7, #4]
 8010e26:	6812      	ldr	r2, [r2, #0]
 8010e28:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8010e2c:	f023 0302 	bic.w	r3, r3, #2
 8010e30:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f003 fb00 	bl	801443c <SDMMC_CmdStopTransfer>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e42:	431a      	orrs	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f003 0308 	and.w	r3, r3, #8
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d00a      	beq.n	8010e68 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2201      	movs	r2, #1
 8010e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 f855 	bl	8010f10 <HAL_SD_ErrorCallback>
}
 8010e66:	e04a      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d045      	beq.n	8010efe <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	f003 0310 	and.w	r3, r3, #16
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d104      	bne.n	8010e86 <HAL_SD_IRQHandler+0x282>
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f003 0320 	and.w	r3, r3, #32
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d011      	beq.n	8010eaa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e8a:	4a1f      	ldr	r2, [pc, #124]	; (8010f08 <HAL_SD_IRQHandler+0x304>)
 8010e8c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fb face 	bl	800c434 <HAL_DMA_Abort_IT>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d02f      	beq.n	8010efe <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 fb4a 	bl	801153c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8010ea8:	e029      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f003 0301 	and.w	r3, r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d104      	bne.n	8010ebe <HAL_SD_IRQHandler+0x2ba>
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f003 0302 	and.w	r3, r3, #2
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d011      	beq.n	8010ee2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec2:	4a12      	ldr	r2, [pc, #72]	; (8010f0c <HAL_SD_IRQHandler+0x308>)
 8010ec4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fb fab2 	bl	800c434 <HAL_DMA_Abort_IT>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d013      	beq.n	8010efe <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eda:	4618      	mov	r0, r3
 8010edc:	f000 fb65 	bl	80115aa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8010ee0:	e00d      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2201      	movs	r2, #1
 8010eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f004 f9be 	bl	8015278 <HAL_SD_AbortCallback>
}
 8010efc:	e7ff      	b.n	8010efe <HAL_SD_IRQHandler+0x2fa>
 8010efe:	bf00      	nop
 8010f00:	3710      	adds	r7, #16
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
 8010f06:	bf00      	nop
 8010f08:	0801153d 	.word	0x0801153d
 8010f0c:	080115ab 	.word	0x080115ab

08010f10 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8010f18:	bf00      	nop
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f32:	0f9b      	lsrs	r3, r3, #30
 8010f34:	b2da      	uxtb	r2, r3
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f3e:	0e9b      	lsrs	r3, r3, #26
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	f003 030f 	and.w	r3, r3, #15
 8010f46:	b2da      	uxtb	r2, r3
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f50:	0e1b      	lsrs	r3, r3, #24
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	f003 0303 	and.w	r3, r3, #3
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f62:	0c1b      	lsrs	r3, r3, #16
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f6e:	0a1b      	lsrs	r3, r3, #8
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f7a:	b2da      	uxtb	r2, r3
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f84:	0d1b      	lsrs	r3, r3, #20
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f90:	0c1b      	lsrs	r3, r3, #16
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	f003 030f 	and.w	r3, r3, #15
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fa2:	0bdb      	lsrs	r3, r3, #15
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	f003 0301 	and.w	r3, r3, #1
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fb4:	0b9b      	lsrs	r3, r3, #14
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	f003 0301 	and.w	r3, r3, #1
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fc6:	0b5b      	lsrs	r3, r3, #13
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	b2da      	uxtb	r2, r3
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fd8:	0b1b      	lsrs	r3, r3, #12
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d163      	bne.n	80110bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ff8:	009a      	lsls	r2, r3, #2
 8010ffa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010ffe:	4013      	ands	r3, r2
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011004:	0f92      	lsrs	r2, r2, #30
 8011006:	431a      	orrs	r2, r3
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011010:	0edb      	lsrs	r3, r3, #27
 8011012:	b2db      	uxtb	r3, r3
 8011014:	f003 0307 	and.w	r3, r3, #7
 8011018:	b2da      	uxtb	r2, r3
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011022:	0e1b      	lsrs	r3, r3, #24
 8011024:	b2db      	uxtb	r3, r3
 8011026:	f003 0307 	and.w	r3, r3, #7
 801102a:	b2da      	uxtb	r2, r3
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011034:	0d5b      	lsrs	r3, r3, #21
 8011036:	b2db      	uxtb	r3, r3
 8011038:	f003 0307 	and.w	r3, r3, #7
 801103c:	b2da      	uxtb	r2, r3
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011046:	0c9b      	lsrs	r3, r3, #18
 8011048:	b2db      	uxtb	r3, r3
 801104a:	f003 0307 	and.w	r3, r3, #7
 801104e:	b2da      	uxtb	r2, r3
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011058:	0bdb      	lsrs	r3, r3, #15
 801105a:	b2db      	uxtb	r3, r3
 801105c:	f003 0307 	and.w	r3, r3, #7
 8011060:	b2da      	uxtb	r2, r3
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	1c5a      	adds	r2, r3, #1
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	7e1b      	ldrb	r3, [r3, #24]
 8011074:	b2db      	uxtb	r3, r3
 8011076:	f003 0307 	and.w	r3, r3, #7
 801107a:	3302      	adds	r3, #2
 801107c:	2201      	movs	r2, #1
 801107e:	fa02 f303 	lsl.w	r3, r2, r3
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011086:	fb02 f203 	mul.w	r2, r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	7a1b      	ldrb	r3, [r3, #8]
 8011092:	b2db      	uxtb	r3, r3
 8011094:	f003 030f 	and.w	r3, r3, #15
 8011098:	2201      	movs	r2, #1
 801109a:	409a      	lsls	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80110a8:	0a52      	lsrs	r2, r2, #9
 80110aa:	fb02 f203 	mul.w	r2, r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80110b8:	661a      	str	r2, [r3, #96]	; 0x60
 80110ba:	e031      	b.n	8011120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d11d      	bne.n	8011100 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110c8:	041b      	lsls	r3, r3, #16
 80110ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110d2:	0c1b      	lsrs	r3, r3, #16
 80110d4:	431a      	orrs	r2, r3
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	691b      	ldr	r3, [r3, #16]
 80110de:	3301      	adds	r3, #1
 80110e0:	029a      	lsls	r2, r3, #10
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80110f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	661a      	str	r2, [r3, #96]	; 0x60
 80110fe:	e00f      	b.n	8011120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4a58      	ldr	r2, [pc, #352]	; (8011268 <HAL_SD_GetCardCSD+0x344>)
 8011106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801110c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2201      	movs	r2, #1
 8011118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801111c:	2301      	movs	r3, #1
 801111e:	e09d      	b.n	801125c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011124:	0b9b      	lsrs	r3, r3, #14
 8011126:	b2db      	uxtb	r3, r3
 8011128:	f003 0301 	and.w	r3, r3, #1
 801112c:	b2da      	uxtb	r2, r3
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011136:	09db      	lsrs	r3, r3, #7
 8011138:	b2db      	uxtb	r3, r3
 801113a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801113e:	b2da      	uxtb	r2, r3
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011148:	b2db      	uxtb	r3, r3
 801114a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801114e:	b2da      	uxtb	r2, r3
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011158:	0fdb      	lsrs	r3, r3, #31
 801115a:	b2da      	uxtb	r2, r3
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011164:	0f5b      	lsrs	r3, r3, #29
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f003 0303 	and.w	r3, r3, #3
 801116c:	b2da      	uxtb	r2, r3
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011176:	0e9b      	lsrs	r3, r3, #26
 8011178:	b2db      	uxtb	r3, r3
 801117a:	f003 0307 	and.w	r3, r3, #7
 801117e:	b2da      	uxtb	r2, r3
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011188:	0d9b      	lsrs	r3, r3, #22
 801118a:	b2db      	uxtb	r3, r3
 801118c:	f003 030f 	and.w	r3, r3, #15
 8011190:	b2da      	uxtb	r2, r3
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801119a:	0d5b      	lsrs	r3, r3, #21
 801119c:	b2db      	uxtb	r3, r3
 801119e:	f003 0301 	and.w	r3, r3, #1
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b6:	0c1b      	lsrs	r3, r3, #16
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	f003 0301 	and.w	r3, r3, #1
 80111be:	b2da      	uxtb	r2, r3
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111ca:	0bdb      	lsrs	r3, r3, #15
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	b2da      	uxtb	r2, r3
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111de:	0b9b      	lsrs	r3, r3, #14
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	f003 0301 	and.w	r3, r3, #1
 80111e6:	b2da      	uxtb	r2, r3
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f2:	0b5b      	lsrs	r3, r3, #13
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	f003 0301 	and.w	r3, r3, #1
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011206:	0b1b      	lsrs	r3, r3, #12
 8011208:	b2db      	uxtb	r3, r3
 801120a:	f003 0301 	and.w	r3, r3, #1
 801120e:	b2da      	uxtb	r2, r3
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801121a:	0a9b      	lsrs	r3, r3, #10
 801121c:	b2db      	uxtb	r3, r3
 801121e:	f003 0303 	and.w	r3, r3, #3
 8011222:	b2da      	uxtb	r2, r3
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801122e:	0a1b      	lsrs	r3, r3, #8
 8011230:	b2db      	uxtb	r3, r3
 8011232:	f003 0303 	and.w	r3, r3, #3
 8011236:	b2da      	uxtb	r2, r3
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011242:	085b      	lsrs	r3, r3, #1
 8011244:	b2db      	uxtb	r3, r3
 8011246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801124a:	b2da      	uxtb	r2, r3
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	2201      	movs	r2, #1
 8011256:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	004005ff 	.word	0x004005ff

0801126c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80112b6:	2300      	movs	r3, #0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80112c4:	b5b0      	push	{r4, r5, r7, lr}
 80112c6:	b08e      	sub	sp, #56	; 0x38
 80112c8:	af04      	add	r7, sp, #16
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2203      	movs	r2, #3
 80112d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112da:	2b03      	cmp	r3, #3
 80112dc:	d02e      	beq.n	801133c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112e4:	d106      	bne.n	80112f4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	639a      	str	r2, [r3, #56]	; 0x38
 80112f2:	e029      	b.n	8011348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80112fa:	d10a      	bne.n	8011312 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f000 fb0f 	bl	8011920 <SD_WideBus_Enable>
 8011302:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	431a      	orrs	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	639a      	str	r2, [r3, #56]	; 0x38
 8011310:	e01a      	b.n	8011348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d10a      	bne.n	801132e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 fb4c 	bl	80119b6 <SD_WideBus_Disable>
 801131e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011326:	431a      	orrs	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	639a      	str	r2, [r3, #56]	; 0x38
 801132c:	e00c      	b.n	8011348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011332:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	639a      	str	r2, [r3, #56]	; 0x38
 801133a:	e005      	b.n	8011348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801134c:	2b00      	cmp	r3, #0
 801134e:	d009      	beq.n	8011364 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	4a18      	ldr	r2, [pc, #96]	; (80113b8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8011356:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011360:	2301      	movs	r3, #1
 8011362:	e024      	b.n	80113ae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	695b      	ldr	r3, [r3, #20]
 801137e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	699b      	ldr	r3, [r3, #24]
 8011384:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681d      	ldr	r5, [r3, #0]
 801138a:	466c      	mov	r4, sp
 801138c:	f107 0318 	add.w	r3, r7, #24
 8011390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011398:	f107 030c 	add.w	r3, r7, #12
 801139c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801139e:	4628      	mov	r0, r5
 80113a0:	f002 fec6 	bl	8014130 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3728      	adds	r7, #40	; 0x28
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bdb0      	pop	{r4, r5, r7, pc}
 80113b6:	bf00      	nop
 80113b8:	004005ff 	.word	0x004005ff

080113bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b086      	sub	sp, #24
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80113c4:	2300      	movs	r3, #0
 80113c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80113c8:	f107 030c 	add.w	r3, r7, #12
 80113cc:	4619      	mov	r1, r3
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 fa7e 	bl	80118d0 <SD_SendStatus>
 80113d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d005      	beq.n	80113e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	431a      	orrs	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	0a5b      	lsrs	r3, r3, #9
 80113ec:	f003 030f 	and.w	r3, r3, #15
 80113f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80113f2:	693b      	ldr	r3, [r7, #16]
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3718      	adds	r7, #24
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011408:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011418:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801141a:	bf00      	nop
 801141c:	3714      	adds	r7, #20
 801141e:	46bd      	mov	sp, r7
 8011420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011424:	4770      	bx	lr

08011426 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011426:	b580      	push	{r7, lr}
 8011428:	b084      	sub	sp, #16
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011432:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011438:	2b82      	cmp	r3, #130	; 0x82
 801143a:	d111      	bne.n	8011460 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4618      	mov	r0, r3
 8011442:	f002 fffb 	bl	801443c <SDMMC_CmdStopTransfer>
 8011446:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d008      	beq.n	8011460 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	431a      	orrs	r2, r3
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 801145a:	68f8      	ldr	r0, [r7, #12]
 801145c:	f7ff fd58 	bl	8010f10 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f022 0208 	bic.w	r2, r2, #8
 801146e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f240 523a 	movw	r2, #1338	; 0x53a
 8011478:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2201      	movs	r2, #1
 801147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2200      	movs	r2, #0
 8011486:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	f003 ff09 	bl	80152a0 <HAL_SD_RxCpltCallback>
#endif
}
 801148e:	bf00      	nop
 8011490:	3710      	adds	r7, #16
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
	...

08011498 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7fb f97e 	bl	800c7a8 <HAL_DMA_GetError>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b02      	cmp	r3, #2
 80114b0:	d03e      	beq.n	8011530 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d002      	beq.n	80114ce <SD_DMAError+0x36>
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d12d      	bne.n	801152a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4a19      	ldr	r2, [pc, #100]	; (8011538 <SD_DMAError+0xa0>)
 80114d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80114e4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80114f2:	6978      	ldr	r0, [r7, #20]
 80114f4:	f7ff ff62 	bl	80113bc <HAL_SD_GetCardState>
 80114f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	2b06      	cmp	r3, #6
 80114fe:	d002      	beq.n	8011506 <SD_DMAError+0x6e>
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	2b05      	cmp	r3, #5
 8011504:	d10a      	bne.n	801151c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4618      	mov	r0, r3
 801150c:	f002 ff96 	bl	801443c <SDMMC_CmdStopTransfer>
 8011510:	4602      	mov	r2, r0
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011516:	431a      	orrs	r2, r3
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	2201      	movs	r2, #1
 8011520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	2200      	movs	r2, #0
 8011528:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 801152a:	6978      	ldr	r0, [r7, #20]
 801152c:	f7ff fcf0 	bl	8010f10 <HAL_SD_ErrorCallback>
#endif
  }
}
 8011530:	bf00      	nop
 8011532:	3718      	adds	r7, #24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	004005ff 	.word	0x004005ff

0801153c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011548:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f240 523a 	movw	r2, #1338	; 0x53a
 8011552:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8011554:	68f8      	ldr	r0, [r7, #12]
 8011556:	f7ff ff31 	bl	80113bc <HAL_SD_GetCardState>
 801155a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2201      	movs	r2, #1
 8011560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2200      	movs	r2, #0
 8011568:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	2b06      	cmp	r3, #6
 801156e:	d002      	beq.n	8011576 <SD_DMATxAbort+0x3a>
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	2b05      	cmp	r3, #5
 8011574:	d10a      	bne.n	801158c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4618      	mov	r0, r3
 801157c:	f002 ff5e 	bl	801443c <SDMMC_CmdStopTransfer>
 8011580:	4602      	mov	r2, r0
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011586:	431a      	orrs	r2, r3
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011590:	2b00      	cmp	r3, #0
 8011592:	d103      	bne.n	801159c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f003 fe6f 	bl	8015278 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 801159a:	e002      	b.n	80115a2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f7ff fcb7 	bl	8010f10 <HAL_SD_ErrorCallback>
}
 80115a2:	bf00      	nop
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80115c0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f7ff fefa 	bl	80113bc <HAL_SD_GetCardState>
 80115c8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2201      	movs	r2, #1
 80115ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2200      	movs	r2, #0
 80115d6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	2b06      	cmp	r3, #6
 80115dc:	d002      	beq.n	80115e4 <SD_DMARxAbort+0x3a>
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	2b05      	cmp	r3, #5
 80115e2:	d10a      	bne.n	80115fa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f002 ff27 	bl	801443c <SDMMC_CmdStopTransfer>
 80115ee:	4602      	mov	r2, r0
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115f4:	431a      	orrs	r2, r3
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d103      	bne.n	801160a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f003 fe38 	bl	8015278 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8011608:	e002      	b.n	8011610 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	f7ff fc80 	bl	8010f10 <HAL_SD_ErrorCallback>
}
 8011610:	bf00      	nop
 8011612:	3710      	adds	r7, #16
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011618:	b5b0      	push	{r4, r5, r7, lr}
 801161a:	b094      	sub	sp, #80	; 0x50
 801161c:	af04      	add	r7, sp, #16
 801161e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8011620:	2301      	movs	r3, #1
 8011622:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4618      	mov	r0, r3
 801162a:	f002 fdd9 	bl	80141e0 <SDIO_GetPowerState>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d102      	bne.n	801163a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011634:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011638:	e0b7      	b.n	80117aa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801163e:	2b03      	cmp	r3, #3
 8011640:	d02f      	beq.n	80116a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4618      	mov	r0, r3
 8011648:	f003 f802 	bl	8014650 <SDMMC_CmdSendCID>
 801164c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801164e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <SD_InitCard+0x40>
    {
      return errorstate;
 8011654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011656:	e0a8      	b.n	80117aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2100      	movs	r1, #0
 801165e:	4618      	mov	r0, r3
 8011660:	f002 fe03 	bl	801426a <SDIO_GetResponse>
 8011664:	4602      	mov	r2, r0
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2104      	movs	r1, #4
 8011670:	4618      	mov	r0, r3
 8011672:	f002 fdfa 	bl	801426a <SDIO_GetResponse>
 8011676:	4602      	mov	r2, r0
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2108      	movs	r1, #8
 8011682:	4618      	mov	r0, r3
 8011684:	f002 fdf1 	bl	801426a <SDIO_GetResponse>
 8011688:	4602      	mov	r2, r0
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	210c      	movs	r1, #12
 8011694:	4618      	mov	r0, r3
 8011696:	f002 fde8 	bl	801426a <SDIO_GetResponse>
 801169a:	4602      	mov	r2, r0
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116a6:	2b03      	cmp	r3, #3
 80116a8:	d00d      	beq.n	80116c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f107 020e 	add.w	r2, r7, #14
 80116b2:	4611      	mov	r1, r2
 80116b4:	4618      	mov	r0, r3
 80116b6:	f003 f808 	bl	80146ca <SDMMC_CmdSetRelAdd>
 80116ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80116bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d001      	beq.n	80116c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80116c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c4:	e071      	b.n	80117aa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116ca:	2b03      	cmp	r3, #3
 80116cc:	d036      	beq.n	801173c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80116ce:	89fb      	ldrh	r3, [r7, #14]
 80116d0:	461a      	mov	r2, r3
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116de:	041b      	lsls	r3, r3, #16
 80116e0:	4619      	mov	r1, r3
 80116e2:	4610      	mov	r0, r2
 80116e4:	f002 ffd2 	bl	801468c <SDMMC_CmdSendCSD>
 80116e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80116ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d001      	beq.n	80116f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80116f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116f2:	e05a      	b.n	80117aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2100      	movs	r1, #0
 80116fa:	4618      	mov	r0, r3
 80116fc:	f002 fdb5 	bl	801426a <SDIO_GetResponse>
 8011700:	4602      	mov	r2, r0
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2104      	movs	r1, #4
 801170c:	4618      	mov	r0, r3
 801170e:	f002 fdac 	bl	801426a <SDIO_GetResponse>
 8011712:	4602      	mov	r2, r0
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	2108      	movs	r1, #8
 801171e:	4618      	mov	r0, r3
 8011720:	f002 fda3 	bl	801426a <SDIO_GetResponse>
 8011724:	4602      	mov	r2, r0
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	210c      	movs	r1, #12
 8011730:	4618      	mov	r0, r3
 8011732:	f002 fd9a 	bl	801426a <SDIO_GetResponse>
 8011736:	4602      	mov	r2, r0
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2104      	movs	r1, #4
 8011742:	4618      	mov	r0, r3
 8011744:	f002 fd91 	bl	801426a <SDIO_GetResponse>
 8011748:	4603      	mov	r3, r0
 801174a:	0d1a      	lsrs	r2, r3, #20
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011750:	f107 0310 	add.w	r3, r7, #16
 8011754:	4619      	mov	r1, r3
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7ff fbe4 	bl	8010f24 <HAL_SD_GetCardCSD>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d002      	beq.n	8011768 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011766:	e020      	b.n	80117aa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6819      	ldr	r1, [r3, #0]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011770:	041b      	lsls	r3, r3, #16
 8011772:	f04f 0400 	mov.w	r4, #0
 8011776:	461a      	mov	r2, r3
 8011778:	4623      	mov	r3, r4
 801177a:	4608      	mov	r0, r1
 801177c:	f002 fe80 	bl	8014480 <SDMMC_CmdSelDesel>
 8011780:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8011782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011784:	2b00      	cmp	r3, #0
 8011786:	d001      	beq.n	801178c <SD_InitCard+0x174>
  {
    return errorstate;
 8011788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801178a:	e00e      	b.n	80117aa <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681d      	ldr	r5, [r3, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	466c      	mov	r4, sp
 8011794:	f103 0210 	add.w	r2, r3, #16
 8011798:	ca07      	ldmia	r2, {r0, r1, r2}
 801179a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801179e:	3304      	adds	r3, #4
 80117a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80117a2:	4628      	mov	r0, r5
 80117a4:	f002 fcc4 	bl	8014130 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80117a8:	2300      	movs	r3, #0
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3740      	adds	r7, #64	; 0x40
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080117b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b086      	sub	sp, #24
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80117bc:	2300      	movs	r3, #0
 80117be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80117c0:	2300      	movs	r3, #0
 80117c2:	617b      	str	r3, [r7, #20]
 80117c4:	2300      	movs	r3, #0
 80117c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f002 fe7a 	bl	80144c6 <SDMMC_CmdGoIdleState>
 80117d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <SD_PowerON+0x2a>
  {
    return errorstate;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	e072      	b.n	80118c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	4618      	mov	r0, r3
 80117e4:	f002 fe8d 	bl	8014502 <SDMMC_CmdOperCond>
 80117e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d00d      	beq.n	801180c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f002 fe63 	bl	80144c6 <SDMMC_CmdGoIdleState>
 8011800:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d004      	beq.n	8011812 <SD_PowerON+0x5e>
    {
      return errorstate;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	e05b      	b.n	80118c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2201      	movs	r2, #1
 8011810:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011816:	2b01      	cmp	r3, #1
 8011818:	d137      	bne.n	801188a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2100      	movs	r1, #0
 8011820:	4618      	mov	r0, r3
 8011822:	f002 fe8d 	bl	8014540 <SDMMC_CmdAppCommand>
 8011826:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d02d      	beq.n	801188a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801182e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011832:	e047      	b.n	80118c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	2100      	movs	r1, #0
 801183a:	4618      	mov	r0, r3
 801183c:	f002 fe80 	bl	8014540 <SDMMC_CmdAppCommand>
 8011840:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d001      	beq.n	801184c <SD_PowerON+0x98>
    {
      return errorstate;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	e03b      	b.n	80118c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	491e      	ldr	r1, [pc, #120]	; (80118cc <SD_PowerON+0x118>)
 8011852:	4618      	mov	r0, r3
 8011854:	f002 fe96 	bl	8014584 <SDMMC_CmdAppOperCommand>
 8011858:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d002      	beq.n	8011866 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011860:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011864:	e02e      	b.n	80118c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2100      	movs	r1, #0
 801186c:	4618      	mov	r0, r3
 801186e:	f002 fcfc 	bl	801426a <SDIO_GetResponse>
 8011872:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	0fdb      	lsrs	r3, r3, #31
 8011878:	2b01      	cmp	r3, #1
 801187a:	d101      	bne.n	8011880 <SD_PowerON+0xcc>
 801187c:	2301      	movs	r3, #1
 801187e:	e000      	b.n	8011882 <SD_PowerON+0xce>
 8011880:	2300      	movs	r3, #0
 8011882:	613b      	str	r3, [r7, #16]

    count++;
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	3301      	adds	r3, #1
 8011888:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011890:	4293      	cmp	r3, r2
 8011892:	d802      	bhi.n	801189a <SD_PowerON+0xe6>
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d0cc      	beq.n	8011834 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d902      	bls.n	80118aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80118a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80118a8:	e00c      	b.n	80118c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d003      	beq.n	80118bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2201      	movs	r2, #1
 80118b8:	645a      	str	r2, [r3, #68]	; 0x44
 80118ba:	e002      	b.n	80118c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80118c2:	2300      	movs	r3, #0
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3718      	adds	r7, #24
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	c1100000 	.word	0xc1100000

080118d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d102      	bne.n	80118e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80118e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80118e4:	e018      	b.n	8011918 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ee:	041b      	lsls	r3, r3, #16
 80118f0:	4619      	mov	r1, r3
 80118f2:	4610      	mov	r0, r2
 80118f4:	f002 ff0a 	bl	801470c <SDMMC_CmdSendStatus>
 80118f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d001      	beq.n	8011904 <SD_SendStatus+0x34>
  {
    return errorstate;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	e009      	b.n	8011918 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	2100      	movs	r1, #0
 801190a:	4618      	mov	r0, r3
 801190c:	f002 fcad 	bl	801426a <SDIO_GetResponse>
 8011910:	4602      	mov	r2, r0
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8011916:	2300      	movs	r3, #0
}
 8011918:	4618      	mov	r0, r3
 801191a:	3710      	adds	r7, #16
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b086      	sub	sp, #24
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8011928:	2300      	movs	r3, #0
 801192a:	60fb      	str	r3, [r7, #12]
 801192c:	2300      	movs	r3, #0
 801192e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2100      	movs	r1, #0
 8011936:	4618      	mov	r0, r3
 8011938:	f002 fc97 	bl	801426a <SDIO_GetResponse>
 801193c:	4603      	mov	r3, r0
 801193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011946:	d102      	bne.n	801194e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801194c:	e02f      	b.n	80119ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801194e:	f107 030c 	add.w	r3, r7, #12
 8011952:	4619      	mov	r1, r3
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 f879 	bl	8011a4c <SD_FindSCR>
 801195a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d001      	beq.n	8011966 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	e023      	b.n	80119ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801196c:	2b00      	cmp	r3, #0
 801196e:	d01c      	beq.n	80119aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011978:	041b      	lsls	r3, r3, #16
 801197a:	4619      	mov	r1, r3
 801197c:	4610      	mov	r0, r2
 801197e:	f002 fddf 	bl	8014540 <SDMMC_CmdAppCommand>
 8011982:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d001      	beq.n	801198e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	e00f      	b.n	80119ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2102      	movs	r1, #2
 8011994:	4618      	mov	r0, r3
 8011996:	f002 fe18 	bl	80145ca <SDMMC_CmdBusWidth>
 801199a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d001      	beq.n	80119a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	e003      	b.n	80119ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80119a6:	2300      	movs	r3, #0
 80119a8:	e001      	b.n	80119ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80119aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3718      	adds	r7, #24
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b086      	sub	sp, #24
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80119be:	2300      	movs	r3, #0
 80119c0:	60fb      	str	r3, [r7, #12]
 80119c2:	2300      	movs	r3, #0
 80119c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	2100      	movs	r1, #0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f002 fc4c 	bl	801426a <SDIO_GetResponse>
 80119d2:	4603      	mov	r3, r0
 80119d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80119dc:	d102      	bne.n	80119e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80119de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119e2:	e02f      	b.n	8011a44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80119e4:	f107 030c 	add.w	r3, r7, #12
 80119e8:	4619      	mov	r1, r3
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 f82e 	bl	8011a4c <SD_FindSCR>
 80119f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d001      	beq.n	80119fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	e023      	b.n	8011a44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d01c      	beq.n	8011a40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a0e:	041b      	lsls	r3, r3, #16
 8011a10:	4619      	mov	r1, r3
 8011a12:	4610      	mov	r0, r2
 8011a14:	f002 fd94 	bl	8014540 <SDMMC_CmdAppCommand>
 8011a18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d001      	beq.n	8011a24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	e00f      	b.n	8011a44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2100      	movs	r1, #0
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f002 fdcd 	bl	80145ca <SDMMC_CmdBusWidth>
 8011a30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	e003      	b.n	8011a44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e001      	b.n	8011a44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011a40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3718      	adds	r7, #24
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011a4c:	b590      	push	{r4, r7, lr}
 8011a4e:	b08f      	sub	sp, #60	; 0x3c
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011a56:	f7fa f865 	bl	800bb24 <HAL_GetTick>
 8011a5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8011a60:	2300      	movs	r3, #0
 8011a62:	60bb      	str	r3, [r7, #8]
 8011a64:	2300      	movs	r3, #0
 8011a66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2108      	movs	r1, #8
 8011a72:	4618      	mov	r0, r3
 8011a74:	f002 fc38 	bl	80142e8 <SDMMC_CmdBlockLength>
 8011a78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d001      	beq.n	8011a84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8011a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a82:	e0a9      	b.n	8011bd8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a8c:	041b      	lsls	r3, r3, #16
 8011a8e:	4619      	mov	r1, r3
 8011a90:	4610      	mov	r0, r2
 8011a92:	f002 fd55 	bl	8014540 <SDMMC_CmdAppCommand>
 8011a96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d001      	beq.n	8011aa2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8011a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa0:	e09a      	b.n	8011bd8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8011aa8:	2308      	movs	r3, #8
 8011aaa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8011aac:	2330      	movs	r3, #48	; 0x30
 8011aae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8011ab0:	2302      	movs	r3, #2
 8011ab2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8011ab8:	2301      	movs	r3, #1
 8011aba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	f107 0210 	add.w	r2, r7, #16
 8011ac4:	4611      	mov	r1, r2
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f002 fbe2 	bl	8014290 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f002 fd9c 	bl	801460e <SDMMC_CmdSendSCR>
 8011ad6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d022      	beq.n	8011b24 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8011ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae0:	e07a      	b.n	8011bd8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00e      	beq.n	8011b0e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6819      	ldr	r1, [r3, #0]
 8011af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	f107 0208 	add.w	r2, r7, #8
 8011afc:	18d4      	adds	r4, r2, r3
 8011afe:	4608      	mov	r0, r1
 8011b00:	f002 fb41 	bl	8014186 <SDIO_ReadFIFO>
 8011b04:	4603      	mov	r3, r0
 8011b06:	6023      	str	r3, [r4, #0]
      index++;
 8011b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011b0e:	f7fa f809 	bl	800bb24 <HAL_GetTick>
 8011b12:	4602      	mov	r2, r0
 8011b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b16:	1ad3      	subs	r3, r2, r3
 8011b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b1c:	d102      	bne.n	8011b24 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011b1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b22:	e059      	b.n	8011bd8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b2a:	f240 432a 	movw	r3, #1066	; 0x42a
 8011b2e:	4013      	ands	r3, r2
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d0d6      	beq.n	8011ae2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b3a:	f003 0308 	and.w	r3, r3, #8
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d005      	beq.n	8011b4e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2208      	movs	r2, #8
 8011b48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011b4a:	2308      	movs	r3, #8
 8011b4c:	e044      	b.n	8011bd8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b54:	f003 0302 	and.w	r3, r3, #2
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d005      	beq.n	8011b68 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2202      	movs	r2, #2
 8011b62:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011b64:	2302      	movs	r3, #2
 8011b66:	e037      	b.n	8011bd8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b6e:	f003 0320 	and.w	r3, r3, #32
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d005      	beq.n	8011b82 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	2220      	movs	r2, #32
 8011b7c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011b7e:	2320      	movs	r3, #32
 8011b80:	e02a      	b.n	8011bd8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f240 523a 	movw	r2, #1338	; 0x53a
 8011b8a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	061a      	lsls	r2, r3, #24
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	021b      	lsls	r3, r3, #8
 8011b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011b98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	0a1b      	lsrs	r3, r3, #8
 8011b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8011ba2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	0e1b      	lsrs	r3, r3, #24
 8011ba8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8011baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bac:	601a      	str	r2, [r3, #0]
    scr++;
 8011bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb0:	3304      	adds	r3, #4
 8011bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	061a      	lsls	r2, r3, #24
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	021b      	lsls	r3, r3, #8
 8011bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011bc0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	0a1b      	lsrs	r3, r3, #8
 8011bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8011bca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	0e1b      	lsrs	r3, r3, #24
 8011bd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8011bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011bd6:	2300      	movs	r3, #0
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	373c      	adds	r7, #60	; 0x3c
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd90      	pop	{r4, r7, pc}

08011be0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b086      	sub	sp, #24
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d03f      	beq.n	8011c7a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	617b      	str	r3, [r7, #20]
 8011bfe:	e033      	b.n	8011c68 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f002 fabe 	bl	8014186 <SDIO_ReadFIFO>
 8011c0a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	b2da      	uxtb	r2, r3
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	3301      	adds	r3, #1
 8011c18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	0a1b      	lsrs	r3, r3, #8
 8011c24:	b2da      	uxtb	r2, r3
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	3b01      	subs	r3, #1
 8011c34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	0c1b      	lsrs	r3, r3, #16
 8011c3a:	b2da      	uxtb	r2, r3
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	3301      	adds	r3, #1
 8011c44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	3b01      	subs	r3, #1
 8011c4a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	0e1b      	lsrs	r3, r3, #24
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	3b01      	subs	r3, #1
 8011c60:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	3301      	adds	r3, #1
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	2b07      	cmp	r3, #7
 8011c6c:	d9c8      	bls.n	8011c00 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	68fa      	ldr	r2, [r7, #12]
 8011c72:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	693a      	ldr	r2, [r7, #16]
 8011c78:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8011c7a:	bf00      	nop
 8011c7c:	3718      	adds	r7, #24
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b086      	sub	sp, #24
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6a1b      	ldr	r3, [r3, #32]
 8011c8e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c94:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d043      	beq.n	8011d24 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	617b      	str	r3, [r7, #20]
 8011ca0:	e037      	b.n	8011d12 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	3301      	adds	r3, #1
 8011cac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	3b01      	subs	r3, #1
 8011cb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	021a      	lsls	r2, r3, #8
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	4313      	orrs	r3, r2
 8011cbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	3b01      	subs	r3, #1
 8011cca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	041a      	lsls	r2, r3, #16
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	4313      	orrs	r3, r2
 8011cd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	061a      	lsls	r2, r3, #24
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	4313      	orrs	r3, r2
 8011cee:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f107 0208 	add.w	r2, r7, #8
 8011d04:	4611      	mov	r1, r2
 8011d06:	4618      	mov	r0, r3
 8011d08:	f002 fa4a 	bl	80141a0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	617b      	str	r3, [r7, #20]
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	2b07      	cmp	r3, #7
 8011d16:	d9c4      	bls.n	8011ca2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	693a      	ldr	r2, [r7, #16]
 8011d22:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8011d24:	bf00      	nop
 8011d26:	3718      	adds	r7, #24
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b082      	sub	sp, #8
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	e056      	b.n	8011dec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2200      	movs	r2, #0
 8011d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011d4a:	b2db      	uxtb	r3, r3
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d106      	bne.n	8011d5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7f8 fb55 	bl	800a408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2202      	movs	r2, #2
 8011d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011d74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	685a      	ldr	r2, [r3, #4]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	689b      	ldr	r3, [r3, #8]
 8011d7e:	431a      	orrs	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	431a      	orrs	r2, r3
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	691b      	ldr	r3, [r3, #16]
 8011d8a:	431a      	orrs	r2, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	431a      	orrs	r2, r3
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	699b      	ldr	r3, [r3, #24]
 8011d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011d9a:	431a      	orrs	r2, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	69db      	ldr	r3, [r3, #28]
 8011da0:	431a      	orrs	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6a1b      	ldr	r3, [r3, #32]
 8011da6:	ea42 0103 	orr.w	r1, r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	430a      	orrs	r2, r1
 8011db4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	699b      	ldr	r3, [r3, #24]
 8011dba:	0c1b      	lsrs	r3, r3, #16
 8011dbc:	f003 0104 	and.w	r1, r3, #4
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	430a      	orrs	r2, r1
 8011dca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	69da      	ldr	r2, [r3, #28]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011dda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2201      	movs	r2, #1
 8011de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d101      	bne.n	8011e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011e02:	2301      	movs	r3, #1
 8011e04:	e01d      	b.n	8011e42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d106      	bne.n	8011e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7f9 f98c 	bl	800b138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2202      	movs	r2, #2
 8011e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	3304      	adds	r3, #4
 8011e30:	4619      	mov	r1, r3
 8011e32:	4610      	mov	r0, r2
 8011e34:	f000 fd34 	bl	80128a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011e4a:	b480      	push	{r7}
 8011e4c:	b085      	sub	sp, #20
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68da      	ldr	r2, [r3, #12]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f042 0201 	orr.w	r2, r2, #1
 8011e60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	f003 0307 	and.w	r3, r3, #7
 8011e6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2b06      	cmp	r3, #6
 8011e72:	d007      	beq.n	8011e84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f042 0201 	orr.w	r2, r2, #1
 8011e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3714      	adds	r7, #20
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr

08011e92 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011e92:	b580      	push	{r7, lr}
 8011e94:	b082      	sub	sp, #8
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d101      	bne.n	8011ea4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e01d      	b.n	8011ee0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d106      	bne.n	8011ebe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 f815 	bl	8011ee8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2202      	movs	r2, #2
 8011ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	3304      	adds	r3, #4
 8011ece:	4619      	mov	r1, r3
 8011ed0:	4610      	mov	r0, r2
 8011ed2:	f000 fce5 	bl	80128a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2201      	movs	r2, #1
 8011eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011ede:	2300      	movs	r3, #0
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	3708      	adds	r7, #8
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}

08011ee8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b083      	sub	sp, #12
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8011ef0:	bf00      	nop
 8011ef2:	370c      	adds	r7, #12
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efa:	4770      	bx	lr

08011efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d101      	bne.n	8011f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	e01d      	b.n	8011f4a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f14:	b2db      	uxtb	r3, r3
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d106      	bne.n	8011f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7f9 f8b4 	bl	800b090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2202      	movs	r2, #2
 8011f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	3304      	adds	r3, #4
 8011f38:	4619      	mov	r1, r3
 8011f3a:	4610      	mov	r0, r2
 8011f3c:	f000 fcb0 	bl	80128a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2201      	movs	r2, #1
 8011f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
	...

08011f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	2201      	movs	r2, #1
 8011f64:	6839      	ldr	r1, [r7, #0]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f001 f8ae 	bl	80130c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	4a15      	ldr	r2, [pc, #84]	; (8011fc8 <HAL_TIM_PWM_Start+0x74>)
 8011f72:	4293      	cmp	r3, r2
 8011f74:	d004      	beq.n	8011f80 <HAL_TIM_PWM_Start+0x2c>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	4a14      	ldr	r2, [pc, #80]	; (8011fcc <HAL_TIM_PWM_Start+0x78>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d101      	bne.n	8011f84 <HAL_TIM_PWM_Start+0x30>
 8011f80:	2301      	movs	r3, #1
 8011f82:	e000      	b.n	8011f86 <HAL_TIM_PWM_Start+0x32>
 8011f84:	2300      	movs	r3, #0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d007      	beq.n	8011f9a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011f98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	f003 0307 	and.w	r3, r3, #7
 8011fa4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2b06      	cmp	r3, #6
 8011faa:	d007      	beq.n	8011fbc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f042 0201 	orr.w	r2, r2, #1
 8011fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011fbc:	2300      	movs	r3, #0
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3710      	adds	r7, #16
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	40010000 	.word	0x40010000
 8011fcc:	40010400 	.word	0x40010400

08011fd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	6839      	ldr	r1, [r7, #0]
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f001 f870 	bl	80130c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a22      	ldr	r2, [pc, #136]	; (8012078 <HAL_TIM_PWM_Stop+0xa8>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d004      	beq.n	8011ffc <HAL_TIM_PWM_Stop+0x2c>
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4a21      	ldr	r2, [pc, #132]	; (801207c <HAL_TIM_PWM_Stop+0xac>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d101      	bne.n	8012000 <HAL_TIM_PWM_Stop+0x30>
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e000      	b.n	8012002 <HAL_TIM_PWM_Stop+0x32>
 8012000:	2300      	movs	r3, #0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d017      	beq.n	8012036 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	6a1a      	ldr	r2, [r3, #32]
 801200c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012010:	4013      	ands	r3, r2
 8012012:	2b00      	cmp	r3, #0
 8012014:	d10f      	bne.n	8012036 <HAL_TIM_PWM_Stop+0x66>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	6a1a      	ldr	r2, [r3, #32]
 801201c:	f240 4344 	movw	r3, #1092	; 0x444
 8012020:	4013      	ands	r3, r2
 8012022:	2b00      	cmp	r3, #0
 8012024:	d107      	bne.n	8012036 <HAL_TIM_PWM_Stop+0x66>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	6a1a      	ldr	r2, [r3, #32]
 801203c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012040:	4013      	ands	r3, r2
 8012042:	2b00      	cmp	r3, #0
 8012044:	d10f      	bne.n	8012066 <HAL_TIM_PWM_Stop+0x96>
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	6a1a      	ldr	r2, [r3, #32]
 801204c:	f240 4344 	movw	r3, #1092	; 0x444
 8012050:	4013      	ands	r3, r2
 8012052:	2b00      	cmp	r3, #0
 8012054:	d107      	bne.n	8012066 <HAL_TIM_PWM_Stop+0x96>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	f022 0201 	bic.w	r2, r2, #1
 8012064:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2201      	movs	r2, #1
 801206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	3708      	adds	r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	40010000 	.word	0x40010000
 801207c:	40010400 	.word	0x40010400

08012080 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d101      	bne.n	8012092 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801208e:	2301      	movs	r3, #1
 8012090:	e01d      	b.n	80120ce <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d106      	bne.n	80120ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2200      	movs	r2, #0
 80120a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7f9 f8a8 	bl	800b1fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2202      	movs	r2, #2
 80120b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	3304      	adds	r3, #4
 80120bc:	4619      	mov	r1, r3
 80120be:	4610      	mov	r0, r2
 80120c0:	f000 fbee 	bl	80128a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2201      	movs	r2, #1
 80120c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80120cc:	2300      	movs	r3, #0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b082      	sub	sp, #8
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	f003 0302 	and.w	r3, r3, #2
 80120e8:	2b02      	cmp	r3, #2
 80120ea:	d122      	bne.n	8012132 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	68db      	ldr	r3, [r3, #12]
 80120f2:	f003 0302 	and.w	r3, r3, #2
 80120f6:	2b02      	cmp	r3, #2
 80120f8:	d11b      	bne.n	8012132 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f06f 0202 	mvn.w	r2, #2
 8012102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2201      	movs	r2, #1
 8012108:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	699b      	ldr	r3, [r3, #24]
 8012110:	f003 0303 	and.w	r3, r3, #3
 8012114:	2b00      	cmp	r3, #0
 8012116:	d003      	beq.n	8012120 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7f7 fa7d 	bl	8009618 <HAL_TIM_IC_CaptureCallback>
 801211e:	e005      	b.n	801212c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 fb9f 	bl	8012864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 fba6 	bl	8012878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	691b      	ldr	r3, [r3, #16]
 8012138:	f003 0304 	and.w	r3, r3, #4
 801213c:	2b04      	cmp	r3, #4
 801213e:	d122      	bne.n	8012186 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	f003 0304 	and.w	r3, r3, #4
 801214a:	2b04      	cmp	r3, #4
 801214c:	d11b      	bne.n	8012186 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f06f 0204 	mvn.w	r2, #4
 8012156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2202      	movs	r2, #2
 801215c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	699b      	ldr	r3, [r3, #24]
 8012164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012168:	2b00      	cmp	r3, #0
 801216a:	d003      	beq.n	8012174 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7f7 fa53 	bl	8009618 <HAL_TIM_IC_CaptureCallback>
 8012172:	e005      	b.n	8012180 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f000 fb75 	bl	8012864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fb7c 	bl	8012878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	691b      	ldr	r3, [r3, #16]
 801218c:	f003 0308 	and.w	r3, r3, #8
 8012190:	2b08      	cmp	r3, #8
 8012192:	d122      	bne.n	80121da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	68db      	ldr	r3, [r3, #12]
 801219a:	f003 0308 	and.w	r3, r3, #8
 801219e:	2b08      	cmp	r3, #8
 80121a0:	d11b      	bne.n	80121da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f06f 0208 	mvn.w	r2, #8
 80121aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2204      	movs	r2, #4
 80121b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	69db      	ldr	r3, [r3, #28]
 80121b8:	f003 0303 	and.w	r3, r3, #3
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d003      	beq.n	80121c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f7f7 fa29 	bl	8009618 <HAL_TIM_IC_CaptureCallback>
 80121c6:	e005      	b.n	80121d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f000 fb4b 	bl	8012864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 fb52 	bl	8012878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	691b      	ldr	r3, [r3, #16]
 80121e0:	f003 0310 	and.w	r3, r3, #16
 80121e4:	2b10      	cmp	r3, #16
 80121e6:	d122      	bne.n	801222e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	f003 0310 	and.w	r3, r3, #16
 80121f2:	2b10      	cmp	r3, #16
 80121f4:	d11b      	bne.n	801222e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	f06f 0210 	mvn.w	r2, #16
 80121fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2208      	movs	r2, #8
 8012204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	69db      	ldr	r3, [r3, #28]
 801220c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012210:	2b00      	cmp	r3, #0
 8012212:	d003      	beq.n	801221c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7f7 f9ff 	bl	8009618 <HAL_TIM_IC_CaptureCallback>
 801221a:	e005      	b.n	8012228 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 fb21 	bl	8012864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f000 fb28 	bl	8012878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	691b      	ldr	r3, [r3, #16]
 8012234:	f003 0301 	and.w	r3, r3, #1
 8012238:	2b01      	cmp	r3, #1
 801223a:	d10e      	bne.n	801225a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	2b01      	cmp	r3, #1
 8012248:	d107      	bne.n	801225a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f06f 0201 	mvn.w	r2, #1
 8012252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7f7 ff69 	bl	800a12c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012264:	2b80      	cmp	r3, #128	; 0x80
 8012266:	d10e      	bne.n	8012286 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012272:	2b80      	cmp	r3, #128	; 0x80
 8012274:	d107      	bne.n	8012286 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801227e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f001 f81f 	bl	80132c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	691b      	ldr	r3, [r3, #16]
 801228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012290:	2b40      	cmp	r3, #64	; 0x40
 8012292:	d10e      	bne.n	80122b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801229e:	2b40      	cmp	r3, #64	; 0x40
 80122a0:	d107      	bne.n	80122b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80122aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 faed 	bl	801288c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	691b      	ldr	r3, [r3, #16]
 80122b8:	f003 0320 	and.w	r3, r3, #32
 80122bc:	2b20      	cmp	r3, #32
 80122be:	d10e      	bne.n	80122de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	68db      	ldr	r3, [r3, #12]
 80122c6:	f003 0320 	and.w	r3, r3, #32
 80122ca:	2b20      	cmp	r3, #32
 80122cc:	d107      	bne.n	80122de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f06f 0220 	mvn.w	r2, #32
 80122d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f000 ffe9 	bl	80132b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
	...

080122e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	60b9      	str	r1, [r7, #8]
 80122f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d101      	bne.n	8012302 <HAL_TIM_OC_ConfigChannel+0x1a>
 80122fe:	2302      	movs	r3, #2
 8012300:	e04e      	b.n	80123a0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2201      	movs	r2, #1
 8012306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2202      	movs	r2, #2
 801230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2b0c      	cmp	r3, #12
 8012316:	d839      	bhi.n	801238c <HAL_TIM_OC_ConfigChannel+0xa4>
 8012318:	a201      	add	r2, pc, #4	; (adr r2, 8012320 <HAL_TIM_OC_ConfigChannel+0x38>)
 801231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231e:	bf00      	nop
 8012320:	08012355 	.word	0x08012355
 8012324:	0801238d 	.word	0x0801238d
 8012328:	0801238d 	.word	0x0801238d
 801232c:	0801238d 	.word	0x0801238d
 8012330:	08012363 	.word	0x08012363
 8012334:	0801238d 	.word	0x0801238d
 8012338:	0801238d 	.word	0x0801238d
 801233c:	0801238d 	.word	0x0801238d
 8012340:	08012371 	.word	0x08012371
 8012344:	0801238d 	.word	0x0801238d
 8012348:	0801238d 	.word	0x0801238d
 801234c:	0801238d 	.word	0x0801238d
 8012350:	0801237f 	.word	0x0801237f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	68b9      	ldr	r1, [r7, #8]
 801235a:	4618      	mov	r0, r3
 801235c:	f000 fb40 	bl	80129e0 <TIM_OC1_SetConfig>
      break;
 8012360:	e015      	b.n	801238e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	68b9      	ldr	r1, [r7, #8]
 8012368:	4618      	mov	r0, r3
 801236a:	f000 fba9 	bl	8012ac0 <TIM_OC2_SetConfig>
      break;
 801236e:	e00e      	b.n	801238e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68b9      	ldr	r1, [r7, #8]
 8012376:	4618      	mov	r0, r3
 8012378:	f000 fc18 	bl	8012bac <TIM_OC3_SetConfig>
      break;
 801237c:	e007      	b.n	801238e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	68b9      	ldr	r1, [r7, #8]
 8012384:	4618      	mov	r0, r3
 8012386:	f000 fc85 	bl	8012c94 <TIM_OC4_SetConfig>
      break;
 801238a:	e000      	b.n	801238e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 801238c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2201      	movs	r2, #1
 8012392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801239e:	2300      	movs	r3, #0
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80123ba:	2b01      	cmp	r3, #1
 80123bc:	d101      	bne.n	80123c2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80123be:	2302      	movs	r3, #2
 80123c0:	e08a      	b.n	80124d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2201      	movs	r2, #1
 80123c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2202      	movs	r2, #2
 80123ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d11b      	bne.n	8012410 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6818      	ldr	r0, [r3, #0]
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	6819      	ldr	r1, [r3, #0]
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	685a      	ldr	r2, [r3, #4]
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	f000 fcaa 	bl	8012d40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	699a      	ldr	r2, [r3, #24]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f022 020c 	bic.w	r2, r2, #12
 80123fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	6999      	ldr	r1, [r3, #24]
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	689a      	ldr	r2, [r3, #8]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	430a      	orrs	r2, r1
 801240c:	619a      	str	r2, [r3, #24]
 801240e:	e05a      	b.n	80124c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b04      	cmp	r3, #4
 8012414:	d11c      	bne.n	8012450 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	6818      	ldr	r0, [r3, #0]
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6819      	ldr	r1, [r3, #0]
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	685a      	ldr	r2, [r3, #4]
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	f000 fd2e 	bl	8012e86 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	699a      	ldr	r2, [r3, #24]
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8012438:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	6999      	ldr	r1, [r3, #24]
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	689b      	ldr	r3, [r3, #8]
 8012444:	021a      	lsls	r2, r3, #8
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	430a      	orrs	r2, r1
 801244c:	619a      	str	r2, [r3, #24]
 801244e:	e03a      	b.n	80124c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2b08      	cmp	r3, #8
 8012454:	d11b      	bne.n	801248e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6818      	ldr	r0, [r3, #0]
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	6819      	ldr	r1, [r3, #0]
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	685a      	ldr	r2, [r3, #4]
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	f000 fd7b 	bl	8012f60 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	69da      	ldr	r2, [r3, #28]
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f022 020c 	bic.w	r2, r2, #12
 8012478:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	69d9      	ldr	r1, [r3, #28]
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	689a      	ldr	r2, [r3, #8]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	430a      	orrs	r2, r1
 801248a:	61da      	str	r2, [r3, #28]
 801248c:	e01b      	b.n	80124c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	6819      	ldr	r1, [r3, #0]
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	685a      	ldr	r2, [r3, #4]
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	f000 fd9b 	bl	8012fd8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	69da      	ldr	r2, [r3, #28]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80124b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	69d9      	ldr	r1, [r3, #28]
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	021a      	lsls	r2, r3, #8
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	430a      	orrs	r2, r1
 80124c4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	2201      	movs	r2, #1
 80124ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2200      	movs	r2, #0
 80124d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80124d6:	2300      	movs	r3, #0
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d101      	bne.n	80124fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80124f6:	2302      	movs	r3, #2
 80124f8:	e0b4      	b.n	8012664 <HAL_TIM_PWM_ConfigChannel+0x184>
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	2201      	movs	r2, #1
 80124fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	2202      	movs	r2, #2
 8012506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2b0c      	cmp	r3, #12
 801250e:	f200 809f 	bhi.w	8012650 <HAL_TIM_PWM_ConfigChannel+0x170>
 8012512:	a201      	add	r2, pc, #4	; (adr r2, 8012518 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8012514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012518:	0801254d 	.word	0x0801254d
 801251c:	08012651 	.word	0x08012651
 8012520:	08012651 	.word	0x08012651
 8012524:	08012651 	.word	0x08012651
 8012528:	0801258d 	.word	0x0801258d
 801252c:	08012651 	.word	0x08012651
 8012530:	08012651 	.word	0x08012651
 8012534:	08012651 	.word	0x08012651
 8012538:	080125cf 	.word	0x080125cf
 801253c:	08012651 	.word	0x08012651
 8012540:	08012651 	.word	0x08012651
 8012544:	08012651 	.word	0x08012651
 8012548:	0801260f 	.word	0x0801260f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	68b9      	ldr	r1, [r7, #8]
 8012552:	4618      	mov	r0, r3
 8012554:	f000 fa44 	bl	80129e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	699a      	ldr	r2, [r3, #24]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f042 0208 	orr.w	r2, r2, #8
 8012566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	699a      	ldr	r2, [r3, #24]
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f022 0204 	bic.w	r2, r2, #4
 8012576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	6999      	ldr	r1, [r3, #24]
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	691a      	ldr	r2, [r3, #16]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	430a      	orrs	r2, r1
 8012588:	619a      	str	r2, [r3, #24]
      break;
 801258a:	e062      	b.n	8012652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	68b9      	ldr	r1, [r7, #8]
 8012592:	4618      	mov	r0, r3
 8012594:	f000 fa94 	bl	8012ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	699a      	ldr	r2, [r3, #24]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80125a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	699a      	ldr	r2, [r3, #24]
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80125b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	6999      	ldr	r1, [r3, #24]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	691b      	ldr	r3, [r3, #16]
 80125c2:	021a      	lsls	r2, r3, #8
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	430a      	orrs	r2, r1
 80125ca:	619a      	str	r2, [r3, #24]
      break;
 80125cc:	e041      	b.n	8012652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	68b9      	ldr	r1, [r7, #8]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f000 fae9 	bl	8012bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	69da      	ldr	r2, [r3, #28]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f042 0208 	orr.w	r2, r2, #8
 80125e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	69da      	ldr	r2, [r3, #28]
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f022 0204 	bic.w	r2, r2, #4
 80125f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	69d9      	ldr	r1, [r3, #28]
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	691a      	ldr	r2, [r3, #16]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	430a      	orrs	r2, r1
 801260a:	61da      	str	r2, [r3, #28]
      break;
 801260c:	e021      	b.n	8012652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	68b9      	ldr	r1, [r7, #8]
 8012614:	4618      	mov	r0, r3
 8012616:	f000 fb3d 	bl	8012c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	69da      	ldr	r2, [r3, #28]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	69da      	ldr	r2, [r3, #28]
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	69d9      	ldr	r1, [r3, #28]
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	021a      	lsls	r2, r3, #8
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	430a      	orrs	r2, r1
 801264c:	61da      	str	r2, [r3, #28]
      break;
 801264e:	e000      	b.n	8012652 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012650:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2201      	movs	r2, #1
 8012656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2200      	movs	r2, #0
 801265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012662:	2300      	movs	r3, #0
}
 8012664:	4618      	mov	r0, r3
 8012666:	3710      	adds	r7, #16
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}

0801266c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801267c:	2b01      	cmp	r3, #1
 801267e:	d101      	bne.n	8012684 <HAL_TIM_ConfigClockSource+0x18>
 8012680:	2302      	movs	r3, #2
 8012682:	e0a6      	b.n	80127d2 <HAL_TIM_ConfigClockSource+0x166>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2201      	movs	r2, #1
 8012688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2202      	movs	r2, #2
 8012690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	689b      	ldr	r3, [r3, #8]
 801269a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80126a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80126aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	68fa      	ldr	r2, [r7, #12]
 80126b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b40      	cmp	r3, #64	; 0x40
 80126ba:	d067      	beq.n	801278c <HAL_TIM_ConfigClockSource+0x120>
 80126bc:	2b40      	cmp	r3, #64	; 0x40
 80126be:	d80b      	bhi.n	80126d8 <HAL_TIM_ConfigClockSource+0x6c>
 80126c0:	2b10      	cmp	r3, #16
 80126c2:	d073      	beq.n	80127ac <HAL_TIM_ConfigClockSource+0x140>
 80126c4:	2b10      	cmp	r3, #16
 80126c6:	d802      	bhi.n	80126ce <HAL_TIM_ConfigClockSource+0x62>
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d06f      	beq.n	80127ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80126cc:	e078      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80126ce:	2b20      	cmp	r3, #32
 80126d0:	d06c      	beq.n	80127ac <HAL_TIM_ConfigClockSource+0x140>
 80126d2:	2b30      	cmp	r3, #48	; 0x30
 80126d4:	d06a      	beq.n	80127ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80126d6:	e073      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80126d8:	2b70      	cmp	r3, #112	; 0x70
 80126da:	d00d      	beq.n	80126f8 <HAL_TIM_ConfigClockSource+0x8c>
 80126dc:	2b70      	cmp	r3, #112	; 0x70
 80126de:	d804      	bhi.n	80126ea <HAL_TIM_ConfigClockSource+0x7e>
 80126e0:	2b50      	cmp	r3, #80	; 0x50
 80126e2:	d033      	beq.n	801274c <HAL_TIM_ConfigClockSource+0xe0>
 80126e4:	2b60      	cmp	r3, #96	; 0x60
 80126e6:	d041      	beq.n	801276c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80126e8:	e06a      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80126ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126ee:	d066      	beq.n	80127be <HAL_TIM_ConfigClockSource+0x152>
 80126f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80126f4:	d017      	beq.n	8012726 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80126f6:	e063      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6818      	ldr	r0, [r3, #0]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	6899      	ldr	r1, [r3, #8]
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	685a      	ldr	r2, [r3, #4]
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	f000 fcbe 	bl	8013088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	689b      	ldr	r3, [r3, #8]
 8012712:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801271a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	68fa      	ldr	r2, [r7, #12]
 8012722:	609a      	str	r2, [r3, #8]
      break;
 8012724:	e04c      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6818      	ldr	r0, [r3, #0]
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	6899      	ldr	r1, [r3, #8]
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	685a      	ldr	r2, [r3, #4]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	68db      	ldr	r3, [r3, #12]
 8012736:	f000 fca7 	bl	8013088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	689a      	ldr	r2, [r3, #8]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012748:	609a      	str	r2, [r3, #8]
      break;
 801274a:	e039      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6818      	ldr	r0, [r3, #0]
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	6859      	ldr	r1, [r3, #4]
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	461a      	mov	r2, r3
 801275a:	f000 fb65 	bl	8012e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2150      	movs	r1, #80	; 0x50
 8012764:	4618      	mov	r0, r3
 8012766:	f000 fc74 	bl	8013052 <TIM_ITRx_SetConfig>
      break;
 801276a:	e029      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6818      	ldr	r0, [r3, #0]
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	6859      	ldr	r1, [r3, #4]
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	461a      	mov	r2, r3
 801277a:	f000 fbc1 	bl	8012f00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2160      	movs	r1, #96	; 0x60
 8012784:	4618      	mov	r0, r3
 8012786:	f000 fc64 	bl	8013052 <TIM_ITRx_SetConfig>
      break;
 801278a:	e019      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6818      	ldr	r0, [r3, #0]
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	6859      	ldr	r1, [r3, #4]
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	461a      	mov	r2, r3
 801279a:	f000 fb45 	bl	8012e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2140      	movs	r1, #64	; 0x40
 80127a4:	4618      	mov	r0, r3
 80127a6:	f000 fc54 	bl	8013052 <TIM_ITRx_SetConfig>
      break;
 80127aa:	e009      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4619      	mov	r1, r3
 80127b6:	4610      	mov	r0, r2
 80127b8:	f000 fc4b 	bl	8013052 <TIM_ITRx_SetConfig>
      break;
 80127bc:	e000      	b.n	80127c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80127be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2201      	movs	r2, #1
 80127c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2200      	movs	r2, #0
 80127cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80127d0:	2300      	movs	r3, #0
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3710      	adds	r7, #16
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
	...

080127dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80127dc:	b480      	push	{r7}
 80127de:	b085      	sub	sp, #20
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80127e6:	2300      	movs	r3, #0
 80127e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	2b0c      	cmp	r3, #12
 80127ee:	d831      	bhi.n	8012854 <HAL_TIM_ReadCapturedValue+0x78>
 80127f0:	a201      	add	r2, pc, #4	; (adr r2, 80127f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80127f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127f6:	bf00      	nop
 80127f8:	0801282d 	.word	0x0801282d
 80127fc:	08012855 	.word	0x08012855
 8012800:	08012855 	.word	0x08012855
 8012804:	08012855 	.word	0x08012855
 8012808:	08012837 	.word	0x08012837
 801280c:	08012855 	.word	0x08012855
 8012810:	08012855 	.word	0x08012855
 8012814:	08012855 	.word	0x08012855
 8012818:	08012841 	.word	0x08012841
 801281c:	08012855 	.word	0x08012855
 8012820:	08012855 	.word	0x08012855
 8012824:	08012855 	.word	0x08012855
 8012828:	0801284b 	.word	0x0801284b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012832:	60fb      	str	r3, [r7, #12]

      break;
 8012834:	e00f      	b.n	8012856 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801283c:	60fb      	str	r3, [r7, #12]

      break;
 801283e:	e00a      	b.n	8012856 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012846:	60fb      	str	r3, [r7, #12]

      break;
 8012848:	e005      	b.n	8012856 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012850:	60fb      	str	r3, [r7, #12]

      break;
 8012852:	e000      	b.n	8012856 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8012854:	bf00      	nop
  }

  return tmpreg;
 8012856:	68fb      	ldr	r3, [r7, #12]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3714      	adds	r7, #20
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr

08012864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801286c:	bf00      	nop
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr

08012878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012878:	b480      	push	{r7}
 801287a:	b083      	sub	sp, #12
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012880:	bf00      	nop
 8012882:	370c      	adds	r7, #12
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr

0801288c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801288c:	b480      	push	{r7}
 801288e:	b083      	sub	sp, #12
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012894:	bf00      	nop
 8012896:	370c      	adds	r7, #12
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr

080128a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4a40      	ldr	r2, [pc, #256]	; (80129b4 <TIM_Base_SetConfig+0x114>)
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d013      	beq.n	80128e0 <TIM_Base_SetConfig+0x40>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128be:	d00f      	beq.n	80128e0 <TIM_Base_SetConfig+0x40>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4a3d      	ldr	r2, [pc, #244]	; (80129b8 <TIM_Base_SetConfig+0x118>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d00b      	beq.n	80128e0 <TIM_Base_SetConfig+0x40>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4a3c      	ldr	r2, [pc, #240]	; (80129bc <TIM_Base_SetConfig+0x11c>)
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d007      	beq.n	80128e0 <TIM_Base_SetConfig+0x40>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4a3b      	ldr	r2, [pc, #236]	; (80129c0 <TIM_Base_SetConfig+0x120>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d003      	beq.n	80128e0 <TIM_Base_SetConfig+0x40>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4a3a      	ldr	r2, [pc, #232]	; (80129c4 <TIM_Base_SetConfig+0x124>)
 80128dc:	4293      	cmp	r3, r2
 80128de:	d108      	bne.n	80128f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	4313      	orrs	r3, r2
 80128f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4a2f      	ldr	r2, [pc, #188]	; (80129b4 <TIM_Base_SetConfig+0x114>)
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d02b      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012900:	d027      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	4a2c      	ldr	r2, [pc, #176]	; (80129b8 <TIM_Base_SetConfig+0x118>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d023      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4a2b      	ldr	r2, [pc, #172]	; (80129bc <TIM_Base_SetConfig+0x11c>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d01f      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4a2a      	ldr	r2, [pc, #168]	; (80129c0 <TIM_Base_SetConfig+0x120>)
 8012916:	4293      	cmp	r3, r2
 8012918:	d01b      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4a29      	ldr	r2, [pc, #164]	; (80129c4 <TIM_Base_SetConfig+0x124>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d017      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4a28      	ldr	r2, [pc, #160]	; (80129c8 <TIM_Base_SetConfig+0x128>)
 8012926:	4293      	cmp	r3, r2
 8012928:	d013      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4a27      	ldr	r2, [pc, #156]	; (80129cc <TIM_Base_SetConfig+0x12c>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d00f      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	4a26      	ldr	r2, [pc, #152]	; (80129d0 <TIM_Base_SetConfig+0x130>)
 8012936:	4293      	cmp	r3, r2
 8012938:	d00b      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	4a25      	ldr	r2, [pc, #148]	; (80129d4 <TIM_Base_SetConfig+0x134>)
 801293e:	4293      	cmp	r3, r2
 8012940:	d007      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4a24      	ldr	r2, [pc, #144]	; (80129d8 <TIM_Base_SetConfig+0x138>)
 8012946:	4293      	cmp	r3, r2
 8012948:	d003      	beq.n	8012952 <TIM_Base_SetConfig+0xb2>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	4a23      	ldr	r2, [pc, #140]	; (80129dc <TIM_Base_SetConfig+0x13c>)
 801294e:	4293      	cmp	r3, r2
 8012950:	d108      	bne.n	8012964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	68fa      	ldr	r2, [r7, #12]
 8012960:	4313      	orrs	r3, r2
 8012962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	695b      	ldr	r3, [r3, #20]
 801296e:	4313      	orrs	r3, r2
 8012970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	689a      	ldr	r2, [r3, #8]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	4a0a      	ldr	r2, [pc, #40]	; (80129b4 <TIM_Base_SetConfig+0x114>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d003      	beq.n	8012998 <TIM_Base_SetConfig+0xf8>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	4a0c      	ldr	r2, [pc, #48]	; (80129c4 <TIM_Base_SetConfig+0x124>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d103      	bne.n	80129a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	691a      	ldr	r2, [r3, #16]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2201      	movs	r2, #1
 80129a4:	615a      	str	r2, [r3, #20]
}
 80129a6:	bf00      	nop
 80129a8:	3714      	adds	r7, #20
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop
 80129b4:	40010000 	.word	0x40010000
 80129b8:	40000400 	.word	0x40000400
 80129bc:	40000800 	.word	0x40000800
 80129c0:	40000c00 	.word	0x40000c00
 80129c4:	40010400 	.word	0x40010400
 80129c8:	40014000 	.word	0x40014000
 80129cc:	40014400 	.word	0x40014400
 80129d0:	40014800 	.word	0x40014800
 80129d4:	40001800 	.word	0x40001800
 80129d8:	40001c00 	.word	0x40001c00
 80129dc:	40002000 	.word	0x40002000

080129e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b087      	sub	sp, #28
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6a1b      	ldr	r3, [r3, #32]
 80129ee:	f023 0201 	bic.w	r2, r3, #1
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6a1b      	ldr	r3, [r3, #32]
 80129fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	699b      	ldr	r3, [r3, #24]
 8012a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	f023 0303 	bic.w	r3, r3, #3
 8012a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	4313      	orrs	r3, r2
 8012a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	f023 0302 	bic.w	r3, r3, #2
 8012a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	689b      	ldr	r3, [r3, #8]
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	4313      	orrs	r3, r2
 8012a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	4a20      	ldr	r2, [pc, #128]	; (8012ab8 <TIM_OC1_SetConfig+0xd8>)
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	d003      	beq.n	8012a44 <TIM_OC1_SetConfig+0x64>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	4a1f      	ldr	r2, [pc, #124]	; (8012abc <TIM_OC1_SetConfig+0xdc>)
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d10c      	bne.n	8012a5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	f023 0308 	bic.w	r3, r3, #8
 8012a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	697a      	ldr	r2, [r7, #20]
 8012a52:	4313      	orrs	r3, r2
 8012a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	f023 0304 	bic.w	r3, r3, #4
 8012a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4a15      	ldr	r2, [pc, #84]	; (8012ab8 <TIM_OC1_SetConfig+0xd8>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d003      	beq.n	8012a6e <TIM_OC1_SetConfig+0x8e>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	4a14      	ldr	r2, [pc, #80]	; (8012abc <TIM_OC1_SetConfig+0xdc>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d111      	bne.n	8012a92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	695b      	ldr	r3, [r3, #20]
 8012a82:	693a      	ldr	r2, [r7, #16]
 8012a84:	4313      	orrs	r3, r2
 8012a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	699b      	ldr	r3, [r3, #24]
 8012a8c:	693a      	ldr	r2, [r7, #16]
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	693a      	ldr	r2, [r7, #16]
 8012a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	68fa      	ldr	r2, [r7, #12]
 8012a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	685a      	ldr	r2, [r3, #4]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	697a      	ldr	r2, [r7, #20]
 8012aaa:	621a      	str	r2, [r3, #32]
}
 8012aac:	bf00      	nop
 8012aae:	371c      	adds	r7, #28
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr
 8012ab8:	40010000 	.word	0x40010000
 8012abc:	40010400 	.word	0x40010400

08012ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b087      	sub	sp, #28
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a1b      	ldr	r3, [r3, #32]
 8012ace:	f023 0210 	bic.w	r2, r3, #16
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6a1b      	ldr	r3, [r3, #32]
 8012ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	699b      	ldr	r3, [r3, #24]
 8012ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	021b      	lsls	r3, r3, #8
 8012afe:	68fa      	ldr	r2, [r7, #12]
 8012b00:	4313      	orrs	r3, r2
 8012b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	f023 0320 	bic.w	r3, r3, #32
 8012b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	011b      	lsls	r3, r3, #4
 8012b12:	697a      	ldr	r2, [r7, #20]
 8012b14:	4313      	orrs	r3, r2
 8012b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	4a22      	ldr	r2, [pc, #136]	; (8012ba4 <TIM_OC2_SetConfig+0xe4>)
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	d003      	beq.n	8012b28 <TIM_OC2_SetConfig+0x68>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4a21      	ldr	r2, [pc, #132]	; (8012ba8 <TIM_OC2_SetConfig+0xe8>)
 8012b24:	4293      	cmp	r3, r2
 8012b26:	d10d      	bne.n	8012b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	011b      	lsls	r3, r3, #4
 8012b36:	697a      	ldr	r2, [r7, #20]
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4a17      	ldr	r2, [pc, #92]	; (8012ba4 <TIM_OC2_SetConfig+0xe4>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d003      	beq.n	8012b54 <TIM_OC2_SetConfig+0x94>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	4a16      	ldr	r2, [pc, #88]	; (8012ba8 <TIM_OC2_SetConfig+0xe8>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d113      	bne.n	8012b7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	695b      	ldr	r3, [r3, #20]
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	693a      	ldr	r2, [r7, #16]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	699b      	ldr	r3, [r3, #24]
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	693a      	ldr	r2, [r7, #16]
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	693a      	ldr	r2, [r7, #16]
 8012b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	685a      	ldr	r2, [r3, #4]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	697a      	ldr	r2, [r7, #20]
 8012b94:	621a      	str	r2, [r3, #32]
}
 8012b96:	bf00      	nop
 8012b98:	371c      	adds	r7, #28
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr
 8012ba2:	bf00      	nop
 8012ba4:	40010000 	.word	0x40010000
 8012ba8:	40010400 	.word	0x40010400

08012bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b087      	sub	sp, #28
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6a1b      	ldr	r3, [r3, #32]
 8012bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a1b      	ldr	r3, [r3, #32]
 8012bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	69db      	ldr	r3, [r3, #28]
 8012bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f023 0303 	bic.w	r3, r3, #3
 8012be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	4313      	orrs	r3, r2
 8012bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	021b      	lsls	r3, r3, #8
 8012bfc:	697a      	ldr	r2, [r7, #20]
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	4a21      	ldr	r2, [pc, #132]	; (8012c8c <TIM_OC3_SetConfig+0xe0>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d003      	beq.n	8012c12 <TIM_OC3_SetConfig+0x66>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4a20      	ldr	r2, [pc, #128]	; (8012c90 <TIM_OC3_SetConfig+0xe4>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d10d      	bne.n	8012c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	68db      	ldr	r3, [r3, #12]
 8012c1e:	021b      	lsls	r3, r3, #8
 8012c20:	697a      	ldr	r2, [r7, #20]
 8012c22:	4313      	orrs	r3, r2
 8012c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	4a16      	ldr	r2, [pc, #88]	; (8012c8c <TIM_OC3_SetConfig+0xe0>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d003      	beq.n	8012c3e <TIM_OC3_SetConfig+0x92>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	4a15      	ldr	r2, [pc, #84]	; (8012c90 <TIM_OC3_SetConfig+0xe4>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d113      	bne.n	8012c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	695b      	ldr	r3, [r3, #20]
 8012c52:	011b      	lsls	r3, r3, #4
 8012c54:	693a      	ldr	r2, [r7, #16]
 8012c56:	4313      	orrs	r3, r2
 8012c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	699b      	ldr	r3, [r3, #24]
 8012c5e:	011b      	lsls	r3, r3, #4
 8012c60:	693a      	ldr	r2, [r7, #16]
 8012c62:	4313      	orrs	r3, r2
 8012c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	693a      	ldr	r2, [r7, #16]
 8012c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	68fa      	ldr	r2, [r7, #12]
 8012c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	685a      	ldr	r2, [r3, #4]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	697a      	ldr	r2, [r7, #20]
 8012c7e:	621a      	str	r2, [r3, #32]
}
 8012c80:	bf00      	nop
 8012c82:	371c      	adds	r7, #28
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr
 8012c8c:	40010000 	.word	0x40010000
 8012c90:	40010400 	.word	0x40010400

08012c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b087      	sub	sp, #28
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6a1b      	ldr	r3, [r3, #32]
 8012ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6a1b      	ldr	r3, [r3, #32]
 8012cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	69db      	ldr	r3, [r3, #28]
 8012cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	021b      	lsls	r3, r3, #8
 8012cd2:	68fa      	ldr	r2, [r7, #12]
 8012cd4:	4313      	orrs	r3, r2
 8012cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	031b      	lsls	r3, r3, #12
 8012ce6:	693a      	ldr	r2, [r7, #16]
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	4a12      	ldr	r2, [pc, #72]	; (8012d38 <TIM_OC4_SetConfig+0xa4>)
 8012cf0:	4293      	cmp	r3, r2
 8012cf2:	d003      	beq.n	8012cfc <TIM_OC4_SetConfig+0x68>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	4a11      	ldr	r2, [pc, #68]	; (8012d3c <TIM_OC4_SetConfig+0xa8>)
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	d109      	bne.n	8012d10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	695b      	ldr	r3, [r3, #20]
 8012d08:	019b      	lsls	r3, r3, #6
 8012d0a:	697a      	ldr	r2, [r7, #20]
 8012d0c:	4313      	orrs	r3, r2
 8012d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	697a      	ldr	r2, [r7, #20]
 8012d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	685a      	ldr	r2, [r3, #4]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	693a      	ldr	r2, [r7, #16]
 8012d28:	621a      	str	r2, [r3, #32]
}
 8012d2a:	bf00      	nop
 8012d2c:	371c      	adds	r7, #28
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr
 8012d36:	bf00      	nop
 8012d38:	40010000 	.word	0x40010000
 8012d3c:	40010400 	.word	0x40010400

08012d40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b087      	sub	sp, #28
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	607a      	str	r2, [r7, #4]
 8012d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	6a1b      	ldr	r3, [r3, #32]
 8012d52:	f023 0201 	bic.w	r2, r3, #1
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	699b      	ldr	r3, [r3, #24]
 8012d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	6a1b      	ldr	r3, [r3, #32]
 8012d64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	4a28      	ldr	r2, [pc, #160]	; (8012e0c <TIM_TI1_SetConfig+0xcc>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d01b      	beq.n	8012da6 <TIM_TI1_SetConfig+0x66>
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d74:	d017      	beq.n	8012da6 <TIM_TI1_SetConfig+0x66>
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	4a25      	ldr	r2, [pc, #148]	; (8012e10 <TIM_TI1_SetConfig+0xd0>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d013      	beq.n	8012da6 <TIM_TI1_SetConfig+0x66>
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	4a24      	ldr	r2, [pc, #144]	; (8012e14 <TIM_TI1_SetConfig+0xd4>)
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d00f      	beq.n	8012da6 <TIM_TI1_SetConfig+0x66>
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	4a23      	ldr	r2, [pc, #140]	; (8012e18 <TIM_TI1_SetConfig+0xd8>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d00b      	beq.n	8012da6 <TIM_TI1_SetConfig+0x66>
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	4a22      	ldr	r2, [pc, #136]	; (8012e1c <TIM_TI1_SetConfig+0xdc>)
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d007      	beq.n	8012da6 <TIM_TI1_SetConfig+0x66>
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	4a21      	ldr	r2, [pc, #132]	; (8012e20 <TIM_TI1_SetConfig+0xe0>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d003      	beq.n	8012da6 <TIM_TI1_SetConfig+0x66>
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	4a20      	ldr	r2, [pc, #128]	; (8012e24 <TIM_TI1_SetConfig+0xe4>)
 8012da2:	4293      	cmp	r3, r2
 8012da4:	d101      	bne.n	8012daa <TIM_TI1_SetConfig+0x6a>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e000      	b.n	8012dac <TIM_TI1_SetConfig+0x6c>
 8012daa:	2300      	movs	r3, #0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d008      	beq.n	8012dc2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	f023 0303 	bic.w	r3, r3, #3
 8012db6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8012db8:	697a      	ldr	r2, [r7, #20]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4313      	orrs	r3, r2
 8012dbe:	617b      	str	r3, [r7, #20]
 8012dc0:	e003      	b.n	8012dca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	f043 0301 	orr.w	r3, r3, #1
 8012dc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	011b      	lsls	r3, r3, #4
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	697a      	ldr	r2, [r7, #20]
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	f023 030a 	bic.w	r3, r3, #10
 8012de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	f003 030a 	and.w	r3, r3, #10
 8012dec:	693a      	ldr	r2, [r7, #16]
 8012dee:	4313      	orrs	r3, r2
 8012df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	697a      	ldr	r2, [r7, #20]
 8012df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	693a      	ldr	r2, [r7, #16]
 8012dfc:	621a      	str	r2, [r3, #32]
}
 8012dfe:	bf00      	nop
 8012e00:	371c      	adds	r7, #28
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr
 8012e0a:	bf00      	nop
 8012e0c:	40010000 	.word	0x40010000
 8012e10:	40000400 	.word	0x40000400
 8012e14:	40000800 	.word	0x40000800
 8012e18:	40000c00 	.word	0x40000c00
 8012e1c:	40010400 	.word	0x40010400
 8012e20:	40014000 	.word	0x40014000
 8012e24:	40001800 	.word	0x40001800

08012e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b087      	sub	sp, #28
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	6a1b      	ldr	r3, [r3, #32]
 8012e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	6a1b      	ldr	r3, [r3, #32]
 8012e3e:	f023 0201 	bic.w	r2, r3, #1
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	699b      	ldr	r3, [r3, #24]
 8012e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	011b      	lsls	r3, r3, #4
 8012e58:	693a      	ldr	r2, [r7, #16]
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	f023 030a 	bic.w	r3, r3, #10
 8012e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012e66:	697a      	ldr	r2, [r7, #20]
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	4313      	orrs	r3, r2
 8012e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	693a      	ldr	r2, [r7, #16]
 8012e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	697a      	ldr	r2, [r7, #20]
 8012e78:	621a      	str	r2, [r3, #32]
}
 8012e7a:	bf00      	nop
 8012e7c:	371c      	adds	r7, #28
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012e86:	b480      	push	{r7}
 8012e88:	b087      	sub	sp, #28
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	60f8      	str	r0, [r7, #12]
 8012e8e:	60b9      	str	r1, [r7, #8]
 8012e90:	607a      	str	r2, [r7, #4]
 8012e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6a1b      	ldr	r3, [r3, #32]
 8012e98:	f023 0210 	bic.w	r2, r3, #16
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	699b      	ldr	r3, [r3, #24]
 8012ea4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	6a1b      	ldr	r3, [r3, #32]
 8012eaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012eb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	021b      	lsls	r3, r3, #8
 8012eb8:	697a      	ldr	r2, [r7, #20]
 8012eba:	4313      	orrs	r3, r2
 8012ebc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	031b      	lsls	r3, r3, #12
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	697a      	ldr	r2, [r7, #20]
 8012ece:	4313      	orrs	r3, r2
 8012ed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012ed8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	011b      	lsls	r3, r3, #4
 8012ede:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012ee2:	693a      	ldr	r2, [r7, #16]
 8012ee4:	4313      	orrs	r3, r2
 8012ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	697a      	ldr	r2, [r7, #20]
 8012eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	693a      	ldr	r2, [r7, #16]
 8012ef2:	621a      	str	r2, [r3, #32]
}
 8012ef4:	bf00      	nop
 8012ef6:	371c      	adds	r7, #28
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efe:	4770      	bx	lr

08012f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b087      	sub	sp, #28
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6a1b      	ldr	r3, [r3, #32]
 8012f10:	f023 0210 	bic.w	r2, r3, #16
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	699b      	ldr	r3, [r3, #24]
 8012f1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	6a1b      	ldr	r3, [r3, #32]
 8012f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012f2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	031b      	lsls	r3, r3, #12
 8012f30:	697a      	ldr	r2, [r7, #20]
 8012f32:	4313      	orrs	r3, r2
 8012f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	011b      	lsls	r3, r3, #4
 8012f42:	693a      	ldr	r2, [r7, #16]
 8012f44:	4313      	orrs	r3, r2
 8012f46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	697a      	ldr	r2, [r7, #20]
 8012f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	693a      	ldr	r2, [r7, #16]
 8012f52:	621a      	str	r2, [r3, #32]
}
 8012f54:	bf00      	nop
 8012f56:	371c      	adds	r7, #28
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr

08012f60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b087      	sub	sp, #28
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
 8012f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	6a1b      	ldr	r3, [r3, #32]
 8012f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	69db      	ldr	r3, [r3, #28]
 8012f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	6a1b      	ldr	r3, [r3, #32]
 8012f84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	f023 0303 	bic.w	r3, r3, #3
 8012f8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8012f8e:	697a      	ldr	r2, [r7, #20]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	4313      	orrs	r3, r2
 8012f94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012f9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	011b      	lsls	r3, r3, #4
 8012fa2:	b2db      	uxtb	r3, r3
 8012fa4:	697a      	ldr	r2, [r7, #20]
 8012fa6:	4313      	orrs	r3, r2
 8012fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8012fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	021b      	lsls	r3, r3, #8
 8012fb6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	4313      	orrs	r3, r2
 8012fbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	697a      	ldr	r2, [r7, #20]
 8012fc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	693a      	ldr	r2, [r7, #16]
 8012fca:	621a      	str	r2, [r3, #32]
}
 8012fcc:	bf00      	nop
 8012fce:	371c      	adds	r7, #28
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b087      	sub	sp, #28
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	607a      	str	r2, [r7, #4]
 8012fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	6a1b      	ldr	r3, [r3, #32]
 8012fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	69db      	ldr	r3, [r3, #28]
 8012ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	6a1b      	ldr	r3, [r3, #32]
 8012ffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013004:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	021b      	lsls	r3, r3, #8
 801300a:	697a      	ldr	r2, [r7, #20]
 801300c:	4313      	orrs	r3, r2
 801300e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013016:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	031b      	lsls	r3, r3, #12
 801301c:	b29b      	uxth	r3, r3
 801301e:	697a      	ldr	r2, [r7, #20]
 8013020:	4313      	orrs	r3, r2
 8013022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801302a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	031b      	lsls	r3, r3, #12
 8013030:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8013034:	693a      	ldr	r2, [r7, #16]
 8013036:	4313      	orrs	r3, r2
 8013038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	697a      	ldr	r2, [r7, #20]
 801303e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	693a      	ldr	r2, [r7, #16]
 8013044:	621a      	str	r2, [r3, #32]
}
 8013046:	bf00      	nop
 8013048:	371c      	adds	r7, #28
 801304a:	46bd      	mov	sp, r7
 801304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013050:	4770      	bx	lr

08013052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013052:	b480      	push	{r7}
 8013054:	b085      	sub	sp, #20
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
 801305a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	689b      	ldr	r3, [r3, #8]
 8013060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801306a:	683a      	ldr	r2, [r7, #0]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	4313      	orrs	r3, r2
 8013070:	f043 0307 	orr.w	r3, r3, #7
 8013074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	68fa      	ldr	r2, [r7, #12]
 801307a:	609a      	str	r2, [r3, #8]
}
 801307c:	bf00      	nop
 801307e:	3714      	adds	r7, #20
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr

08013088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013088:	b480      	push	{r7}
 801308a:	b087      	sub	sp, #28
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	689b      	ldr	r3, [r3, #8]
 801309a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80130a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	021a      	lsls	r2, r3, #8
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	431a      	orrs	r2, r3
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	4313      	orrs	r3, r2
 80130b0:	697a      	ldr	r2, [r7, #20]
 80130b2:	4313      	orrs	r3, r2
 80130b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	697a      	ldr	r2, [r7, #20]
 80130ba:	609a      	str	r2, [r3, #8]
}
 80130bc:	bf00      	nop
 80130be:	371c      	adds	r7, #28
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr

080130c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80130c8:	b480      	push	{r7}
 80130ca:	b087      	sub	sp, #28
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	f003 031f 	and.w	r3, r3, #31
 80130da:	2201      	movs	r2, #1
 80130dc:	fa02 f303 	lsl.w	r3, r2, r3
 80130e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	6a1a      	ldr	r2, [r3, #32]
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	43db      	mvns	r3, r3
 80130ea:	401a      	ands	r2, r3
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	6a1a      	ldr	r2, [r3, #32]
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	f003 031f 	and.w	r3, r3, #31
 80130fa:	6879      	ldr	r1, [r7, #4]
 80130fc:	fa01 f303 	lsl.w	r3, r1, r3
 8013100:	431a      	orrs	r2, r3
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	621a      	str	r2, [r3, #32]
}
 8013106:	bf00      	nop
 8013108:	371c      	adds	r7, #28
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
	...

08013114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013114:	b480      	push	{r7}
 8013116:	b085      	sub	sp, #20
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013124:	2b01      	cmp	r3, #1
 8013126:	d101      	bne.n	801312c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013128:	2302      	movs	r3, #2
 801312a:	e05a      	b.n	80131e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2201      	movs	r2, #1
 8013130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2202      	movs	r2, #2
 8013138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	68fa      	ldr	r2, [r7, #12]
 801315a:	4313      	orrs	r3, r2
 801315c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	68fa      	ldr	r2, [r7, #12]
 8013164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	4a21      	ldr	r2, [pc, #132]	; (80131f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801316c:	4293      	cmp	r3, r2
 801316e:	d022      	beq.n	80131b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013178:	d01d      	beq.n	80131b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4a1d      	ldr	r2, [pc, #116]	; (80131f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013180:	4293      	cmp	r3, r2
 8013182:	d018      	beq.n	80131b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4a1b      	ldr	r2, [pc, #108]	; (80131f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801318a:	4293      	cmp	r3, r2
 801318c:	d013      	beq.n	80131b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	4a1a      	ldr	r2, [pc, #104]	; (80131fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013194:	4293      	cmp	r3, r2
 8013196:	d00e      	beq.n	80131b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	4a18      	ldr	r2, [pc, #96]	; (8013200 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d009      	beq.n	80131b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4a17      	ldr	r2, [pc, #92]	; (8013204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80131a8:	4293      	cmp	r3, r2
 80131aa:	d004      	beq.n	80131b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4a15      	ldr	r2, [pc, #84]	; (8013208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d10c      	bne.n	80131d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80131bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	68ba      	ldr	r2, [r7, #8]
 80131c4:	4313      	orrs	r3, r2
 80131c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	68ba      	ldr	r2, [r7, #8]
 80131ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2201      	movs	r2, #1
 80131d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80131e0:	2300      	movs	r3, #0
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3714      	adds	r7, #20
 80131e6:	46bd      	mov	sp, r7
 80131e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ec:	4770      	bx	lr
 80131ee:	bf00      	nop
 80131f0:	40010000 	.word	0x40010000
 80131f4:	40000400 	.word	0x40000400
 80131f8:	40000800 	.word	0x40000800
 80131fc:	40000c00 	.word	0x40000c00
 8013200:	40010400 	.word	0x40010400
 8013204:	40014000 	.word	0x40014000
 8013208:	40001800 	.word	0x40001800

0801320c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801320c:	b480      	push	{r7}
 801320e:	b085      	sub	sp, #20
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
 8013214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013216:	2300      	movs	r3, #0
 8013218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013220:	2b01      	cmp	r3, #1
 8013222:	d101      	bne.n	8013228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013224:	2302      	movs	r3, #2
 8013226:	e03d      	b.n	80132a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2201      	movs	r2, #1
 801322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	68db      	ldr	r3, [r3, #12]
 801323a:	4313      	orrs	r3, r2
 801323c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	4313      	orrs	r3, r2
 801324a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	4313      	orrs	r3, r2
 8013258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	4313      	orrs	r3, r2
 8013266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	691b      	ldr	r3, [r3, #16]
 8013272:	4313      	orrs	r3, r2
 8013274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	695b      	ldr	r3, [r3, #20]
 8013280:	4313      	orrs	r3, r2
 8013282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	69db      	ldr	r3, [r3, #28]
 801328e:	4313      	orrs	r3, r2
 8013290:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	68fa      	ldr	r2, [r7, #12]
 8013298:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2200      	movs	r2, #0
 801329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3714      	adds	r7, #20
 80132a8:	46bd      	mov	sp, r7
 80132aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ae:	4770      	bx	lr

080132b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80132b0:	b480      	push	{r7}
 80132b2:	b083      	sub	sp, #12
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80132b8:	bf00      	nop
 80132ba:	370c      	adds	r7, #12
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80132cc:	bf00      	nop
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d101      	bne.n	80132ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80132e6:	2301      	movs	r3, #1
 80132e8:	e03f      	b.n	801336a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d106      	bne.n	8013304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f7f8 f9ae 	bl	800b660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2224      	movs	r2, #36	; 0x24
 8013308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	68da      	ldr	r2, [r3, #12]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801331a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f000 fb8b 	bl	8013a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	691a      	ldr	r2, [r3, #16]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	695a      	ldr	r2, [r3, #20]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	68da      	ldr	r2, [r3, #12]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2200      	movs	r2, #0
 8013356:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2220      	movs	r2, #32
 801335c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2220      	movs	r2, #32
 8013364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8013368:	2300      	movs	r3, #0
}
 801336a:	4618      	mov	r0, r3
 801336c:	3708      	adds	r7, #8
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
	...

08013374 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b086      	sub	sp, #24
 8013378:	af00      	add	r7, sp, #0
 801337a:	60f8      	str	r0, [r7, #12]
 801337c:	60b9      	str	r1, [r7, #8]
 801337e:	4613      	mov	r3, r2
 8013380:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013388:	b2db      	uxtb	r3, r3
 801338a:	2b20      	cmp	r3, #32
 801338c:	d166      	bne.n	801345c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d002      	beq.n	801339a <HAL_UART_Receive_DMA+0x26>
 8013394:	88fb      	ldrh	r3, [r7, #6]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d101      	bne.n	801339e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801339a:	2301      	movs	r3, #1
 801339c:	e05f      	b.n	801345e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d101      	bne.n	80133ac <HAL_UART_Receive_DMA+0x38>
 80133a8:	2302      	movs	r3, #2
 80133aa:	e058      	b.n	801345e <HAL_UART_Receive_DMA+0xea>
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	2201      	movs	r2, #1
 80133b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80133b4:	68ba      	ldr	r2, [r7, #8]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	88fa      	ldrh	r2, [r7, #6]
 80133be:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2200      	movs	r2, #0
 80133c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2222      	movs	r2, #34	; 0x22
 80133ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133d2:	4a25      	ldr	r2, [pc, #148]	; (8013468 <HAL_UART_Receive_DMA+0xf4>)
 80133d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133da:	4a24      	ldr	r2, [pc, #144]	; (801346c <HAL_UART_Receive_DMA+0xf8>)
 80133dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133e2:	4a23      	ldr	r2, [pc, #140]	; (8013470 <HAL_UART_Receive_DMA+0xfc>)
 80133e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133ea:	2200      	movs	r2, #0
 80133ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80133ee:	f107 0308 	add.w	r3, r7, #8
 80133f2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	3304      	adds	r3, #4
 80133fe:	4619      	mov	r1, r3
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	88fb      	ldrh	r3, [r7, #6]
 8013406:	f7f8 ffbd 	bl	800c384 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 801340a:	2300      	movs	r3, #0
 801340c:	613b      	str	r3, [r7, #16]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	613b      	str	r3, [r7, #16]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	613b      	str	r3, [r7, #16]
 801341e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2200      	movs	r2, #0
 8013424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	68da      	ldr	r2, [r3, #12]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013436:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	695a      	ldr	r2, [r3, #20]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f042 0201 	orr.w	r2, r2, #1
 8013446:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	695a      	ldr	r2, [r3, #20]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013456:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8013458:	2300      	movs	r3, #0
 801345a:	e000      	b.n	801345e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801345c:	2302      	movs	r3, #2
  }
}
 801345e:	4618      	mov	r0, r3
 8013460:	3718      	adds	r7, #24
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	080136b1 	.word	0x080136b1
 801346c:	08013719 	.word	0x08013719
 8013470:	08013735 	.word	0x08013735

08013474 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b088      	sub	sp, #32
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	68db      	ldr	r3, [r3, #12]
 801348a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	695b      	ldr	r3, [r3, #20]
 8013492:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8013494:	2300      	movs	r3, #0
 8013496:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8013498:	2300      	movs	r3, #0
 801349a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	f003 030f 	and.w	r3, r3, #15
 80134a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d10d      	bne.n	80134c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80134aa:	69fb      	ldr	r3, [r7, #28]
 80134ac:	f003 0320 	and.w	r3, r3, #32
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d008      	beq.n	80134c6 <HAL_UART_IRQHandler+0x52>
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	f003 0320 	and.w	r3, r3, #32
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d003      	beq.n	80134c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f000 fa38 	bl	8013934 <UART_Receive_IT>
      return;
 80134c4:	e0d1      	b.n	801366a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	f000 80b0 	beq.w	801362e <HAL_UART_IRQHandler+0x1ba>
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	f003 0301 	and.w	r3, r3, #1
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d105      	bne.n	80134e4 <HAL_UART_IRQHandler+0x70>
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 80a5 	beq.w	801362e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80134e4:	69fb      	ldr	r3, [r7, #28]
 80134e6:	f003 0301 	and.w	r3, r3, #1
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d00a      	beq.n	8013504 <HAL_UART_IRQHandler+0x90>
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d005      	beq.n	8013504 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134fc:	f043 0201 	orr.w	r2, r3, #1
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	f003 0304 	and.w	r3, r3, #4
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00a      	beq.n	8013524 <HAL_UART_IRQHandler+0xb0>
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	f003 0301 	and.w	r3, r3, #1
 8013514:	2b00      	cmp	r3, #0
 8013516:	d005      	beq.n	8013524 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801351c:	f043 0202 	orr.w	r2, r3, #2
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	f003 0302 	and.w	r3, r3, #2
 801352a:	2b00      	cmp	r3, #0
 801352c:	d00a      	beq.n	8013544 <HAL_UART_IRQHandler+0xd0>
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	f003 0301 	and.w	r3, r3, #1
 8013534:	2b00      	cmp	r3, #0
 8013536:	d005      	beq.n	8013544 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801353c:	f043 0204 	orr.w	r2, r3, #4
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	f003 0308 	and.w	r3, r3, #8
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00f      	beq.n	801356e <HAL_UART_IRQHandler+0xfa>
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	f003 0320 	and.w	r3, r3, #32
 8013554:	2b00      	cmp	r3, #0
 8013556:	d104      	bne.n	8013562 <HAL_UART_IRQHandler+0xee>
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	f003 0301 	and.w	r3, r3, #1
 801355e:	2b00      	cmp	r3, #0
 8013560:	d005      	beq.n	801356e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013566:	f043 0208 	orr.w	r2, r3, #8
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013572:	2b00      	cmp	r3, #0
 8013574:	d078      	beq.n	8013668 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	f003 0320 	and.w	r3, r3, #32
 801357c:	2b00      	cmp	r3, #0
 801357e:	d007      	beq.n	8013590 <HAL_UART_IRQHandler+0x11c>
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	f003 0320 	and.w	r3, r3, #32
 8013586:	2b00      	cmp	r3, #0
 8013588:	d002      	beq.n	8013590 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f000 f9d2 	bl	8013934 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	695b      	ldr	r3, [r3, #20]
 8013596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801359a:	2b40      	cmp	r3, #64	; 0x40
 801359c:	bf0c      	ite	eq
 801359e:	2301      	moveq	r3, #1
 80135a0:	2300      	movne	r3, #0
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135aa:	f003 0308 	and.w	r3, r3, #8
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d102      	bne.n	80135b8 <HAL_UART_IRQHandler+0x144>
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d031      	beq.n	801361c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f000 f91b 	bl	80137f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	695b      	ldr	r3, [r3, #20]
 80135c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135c8:	2b40      	cmp	r3, #64	; 0x40
 80135ca:	d123      	bne.n	8013614 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	695a      	ldr	r2, [r3, #20]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80135da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d013      	beq.n	801360c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135e8:	4a21      	ldr	r2, [pc, #132]	; (8013670 <HAL_UART_IRQHandler+0x1fc>)
 80135ea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7f8 ff1f 	bl	800c434 <HAL_DMA_Abort_IT>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d016      	beq.n	801362a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013606:	4610      	mov	r0, r2
 8013608:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801360a:	e00e      	b.n	801362a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f000 f845 	bl	801369c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013612:	e00a      	b.n	801362a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 f841 	bl	801369c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801361a:	e006      	b.n	801362a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f000 f83d 	bl	801369c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2200      	movs	r2, #0
 8013626:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8013628:	e01e      	b.n	8013668 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801362a:	bf00      	nop
    return;
 801362c:	e01c      	b.n	8013668 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013634:	2b00      	cmp	r3, #0
 8013636:	d008      	beq.n	801364a <HAL_UART_IRQHandler+0x1d6>
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801363e:	2b00      	cmp	r3, #0
 8013640:	d003      	beq.n	801364a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f000 f908 	bl	8013858 <UART_Transmit_IT>
    return;
 8013648:	e00f      	b.n	801366a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801364a:	69fb      	ldr	r3, [r7, #28]
 801364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013650:	2b00      	cmp	r3, #0
 8013652:	d00a      	beq.n	801366a <HAL_UART_IRQHandler+0x1f6>
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801365a:	2b00      	cmp	r3, #0
 801365c:	d005      	beq.n	801366a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f000 f950 	bl	8013904 <UART_EndTransmit_IT>
    return;
 8013664:	bf00      	nop
 8013666:	e000      	b.n	801366a <HAL_UART_IRQHandler+0x1f6>
    return;
 8013668:	bf00      	nop
  }
}
 801366a:	3720      	adds	r7, #32
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	08013831 	.word	0x08013831

08013674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013674:	b480      	push	{r7}
 8013676:	b083      	sub	sp, #12
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801367c:	bf00      	nop
 801367e:	370c      	adds	r7, #12
 8013680:	46bd      	mov	sp, r7
 8013682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013686:	4770      	bx	lr

08013688 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013688:	b480      	push	{r7}
 801368a:	b083      	sub	sp, #12
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8013690:	bf00      	nop
 8013692:	370c      	adds	r7, #12
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr

0801369c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801369c:	b480      	push	{r7}
 801369e:	b083      	sub	sp, #12
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80136a4:	bf00      	nop
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr

080136b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d11e      	bne.n	801370a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	2200      	movs	r2, #0
 80136d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	68da      	ldr	r2, [r3, #12]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80136e0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	695a      	ldr	r2, [r3, #20]
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	f022 0201 	bic.w	r2, r2, #1
 80136f0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	695a      	ldr	r2, [r3, #20]
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013700:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	2220      	movs	r2, #32
 8013706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801370a:	68f8      	ldr	r0, [r7, #12]
 801370c:	f7f5 fee2 	bl	80094d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013710:	bf00      	nop
 8013712:	3710      	adds	r7, #16
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013724:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f7ff ffae 	bl	8013688 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801372c:	bf00      	nop
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801373c:	2300      	movs	r3, #0
 801373e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013744:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	695b      	ldr	r3, [r3, #20]
 801374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013750:	2b80      	cmp	r3, #128	; 0x80
 8013752:	bf0c      	ite	eq
 8013754:	2301      	moveq	r3, #1
 8013756:	2300      	movne	r3, #0
 8013758:	b2db      	uxtb	r3, r3
 801375a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013762:	b2db      	uxtb	r3, r3
 8013764:	2b21      	cmp	r3, #33	; 0x21
 8013766:	d108      	bne.n	801377a <UART_DMAError+0x46>
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d005      	beq.n	801377a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	2200      	movs	r2, #0
 8013772:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013774:	68b8      	ldr	r0, [r7, #8]
 8013776:	f000 f827 	bl	80137c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	695b      	ldr	r3, [r3, #20]
 8013780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013784:	2b40      	cmp	r3, #64	; 0x40
 8013786:	bf0c      	ite	eq
 8013788:	2301      	moveq	r3, #1
 801378a:	2300      	movne	r3, #0
 801378c:	b2db      	uxtb	r3, r3
 801378e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013796:	b2db      	uxtb	r3, r3
 8013798:	2b22      	cmp	r3, #34	; 0x22
 801379a:	d108      	bne.n	80137ae <UART_DMAError+0x7a>
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d005      	beq.n	80137ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	2200      	movs	r2, #0
 80137a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80137a8:	68b8      	ldr	r0, [r7, #8]
 80137aa:	f000 f823 	bl	80137f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137b2:	f043 0210 	orr.w	r2, r3, #16
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80137ba:	68b8      	ldr	r0, [r7, #8]
 80137bc:	f7ff ff6e 	bl	801369c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80137c0:	bf00      	nop
 80137c2:	3710      	adds	r7, #16
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	68da      	ldr	r2, [r3, #12]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80137de:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2220      	movs	r2, #32
 80137e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80137e8:	bf00      	nop
 80137ea:	370c      	adds	r7, #12
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr

080137f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	68da      	ldr	r2, [r3, #12]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801380a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	695a      	ldr	r2, [r3, #20]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f022 0201 	bic.w	r2, r2, #1
 801381a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2220      	movs	r2, #32
 8013820:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8013824:	bf00      	nop
 8013826:	370c      	adds	r7, #12
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801383c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2200      	movs	r2, #0
 8013842:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	2200      	movs	r2, #0
 8013848:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801384a:	68f8      	ldr	r0, [r7, #12]
 801384c:	f7ff ff26 	bl	801369c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013850:	bf00      	nop
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013866:	b2db      	uxtb	r3, r3
 8013868:	2b21      	cmp	r3, #33	; 0x21
 801386a:	d144      	bne.n	80138f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	689b      	ldr	r3, [r3, #8]
 8013870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013874:	d11a      	bne.n	80138ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6a1b      	ldr	r3, [r3, #32]
 801387a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	881b      	ldrh	r3, [r3, #0]
 8013880:	461a      	mov	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801388a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	691b      	ldr	r3, [r3, #16]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d105      	bne.n	80138a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6a1b      	ldr	r3, [r3, #32]
 8013898:	1c9a      	adds	r2, r3, #2
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	621a      	str	r2, [r3, #32]
 801389e:	e00e      	b.n	80138be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6a1b      	ldr	r3, [r3, #32]
 80138a4:	1c5a      	adds	r2, r3, #1
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	621a      	str	r2, [r3, #32]
 80138aa:	e008      	b.n	80138be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6a1b      	ldr	r3, [r3, #32]
 80138b0:	1c59      	adds	r1, r3, #1
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	6211      	str	r1, [r2, #32]
 80138b6:	781a      	ldrb	r2, [r3, #0]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	3b01      	subs	r3, #1
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	4619      	mov	r1, r3
 80138cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d10f      	bne.n	80138f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	68da      	ldr	r2, [r3, #12]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80138e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	68da      	ldr	r2, [r3, #12]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80138f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	e000      	b.n	80138f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80138f6:	2302      	movs	r3, #2
  }
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3714      	adds	r7, #20
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr

08013904 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	68da      	ldr	r2, [r3, #12]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801391a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2220      	movs	r2, #32
 8013920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7ff fea5 	bl	8013674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801392a:	2300      	movs	r3, #0
}
 801392c:	4618      	mov	r0, r3
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b084      	sub	sp, #16
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013942:	b2db      	uxtb	r3, r3
 8013944:	2b22      	cmp	r3, #34	; 0x22
 8013946:	d171      	bne.n	8013a2c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013950:	d123      	bne.n	801399a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013956:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	691b      	ldr	r3, [r3, #16]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d10e      	bne.n	801397e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	b29b      	uxth	r3, r3
 8013968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801396c:	b29a      	uxth	r2, r3
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013976:	1c9a      	adds	r2, r3, #2
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	629a      	str	r2, [r3, #40]	; 0x28
 801397c:	e029      	b.n	80139d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	b29b      	uxth	r3, r3
 8013986:	b2db      	uxtb	r3, r3
 8013988:	b29a      	uxth	r2, r3
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013992:	1c5a      	adds	r2, r3, #1
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	629a      	str	r2, [r3, #40]	; 0x28
 8013998:	e01b      	b.n	80139d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	691b      	ldr	r3, [r3, #16]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d10a      	bne.n	80139b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	6858      	ldr	r0, [r3, #4]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139ac:	1c59      	adds	r1, r3, #1
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	6291      	str	r1, [r2, #40]	; 0x28
 80139b2:	b2c2      	uxtb	r2, r0
 80139b4:	701a      	strb	r2, [r3, #0]
 80139b6:	e00c      	b.n	80139d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	b2da      	uxtb	r2, r3
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139c4:	1c58      	adds	r0, r3, #1
 80139c6:	6879      	ldr	r1, [r7, #4]
 80139c8:	6288      	str	r0, [r1, #40]	; 0x28
 80139ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80139ce:	b2d2      	uxtb	r2, r2
 80139d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	3b01      	subs	r3, #1
 80139da:	b29b      	uxth	r3, r3
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	4619      	mov	r1, r3
 80139e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d120      	bne.n	8013a28 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	68da      	ldr	r2, [r3, #12]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f022 0220 	bic.w	r2, r2, #32
 80139f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	68da      	ldr	r2, [r3, #12]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013a04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	695a      	ldr	r2, [r3, #20]
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f022 0201 	bic.w	r2, r2, #1
 8013a14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2220      	movs	r2, #32
 8013a1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f7f5 fd58 	bl	80094d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	e002      	b.n	8013a2e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	e000      	b.n	8013a2e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8013a2c:	2302      	movs	r3, #2
  }
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3710      	adds	r7, #16
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}
	...

08013a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3c:	b085      	sub	sp, #20
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	691b      	ldr	r3, [r3, #16]
 8013a48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	68da      	ldr	r2, [r3, #12]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	430a      	orrs	r2, r1
 8013a56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	689a      	ldr	r2, [r3, #8]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	431a      	orrs	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	695b      	ldr	r3, [r3, #20]
 8013a66:	431a      	orrs	r2, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	69db      	ldr	r3, [r3, #28]
 8013a6c:	4313      	orrs	r3, r2
 8013a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8013a7a:	f023 030c 	bic.w	r3, r3, #12
 8013a7e:	687a      	ldr	r2, [r7, #4]
 8013a80:	6812      	ldr	r2, [r2, #0]
 8013a82:	68f9      	ldr	r1, [r7, #12]
 8013a84:	430b      	orrs	r3, r1
 8013a86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	695b      	ldr	r3, [r3, #20]
 8013a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	699a      	ldr	r2, [r3, #24]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	430a      	orrs	r2, r1
 8013a9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	69db      	ldr	r3, [r3, #28]
 8013aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013aa6:	f040 818b 	bne.w	8013dc0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4ac1      	ldr	r2, [pc, #772]	; (8013db4 <UART_SetConfig+0x37c>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d005      	beq.n	8013ac0 <UART_SetConfig+0x88>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	4abf      	ldr	r2, [pc, #764]	; (8013db8 <UART_SetConfig+0x380>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	f040 80bd 	bne.w	8013c3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013ac0:	f7fc fdf0 	bl	80106a4 <HAL_RCC_GetPCLK2Freq>
 8013ac4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	461d      	mov	r5, r3
 8013aca:	f04f 0600 	mov.w	r6, #0
 8013ace:	46a8      	mov	r8, r5
 8013ad0:	46b1      	mov	r9, r6
 8013ad2:	eb18 0308 	adds.w	r3, r8, r8
 8013ad6:	eb49 0409 	adc.w	r4, r9, r9
 8013ada:	4698      	mov	r8, r3
 8013adc:	46a1      	mov	r9, r4
 8013ade:	eb18 0805 	adds.w	r8, r8, r5
 8013ae2:	eb49 0906 	adc.w	r9, r9, r6
 8013ae6:	f04f 0100 	mov.w	r1, #0
 8013aea:	f04f 0200 	mov.w	r2, #0
 8013aee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013af2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013af6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013afa:	4688      	mov	r8, r1
 8013afc:	4691      	mov	r9, r2
 8013afe:	eb18 0005 	adds.w	r0, r8, r5
 8013b02:	eb49 0106 	adc.w	r1, r9, r6
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	461d      	mov	r5, r3
 8013b0c:	f04f 0600 	mov.w	r6, #0
 8013b10:	196b      	adds	r3, r5, r5
 8013b12:	eb46 0406 	adc.w	r4, r6, r6
 8013b16:	461a      	mov	r2, r3
 8013b18:	4623      	mov	r3, r4
 8013b1a:	f7ed fa23 	bl	8000f64 <__aeabi_uldivmod>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	460c      	mov	r4, r1
 8013b22:	461a      	mov	r2, r3
 8013b24:	4ba5      	ldr	r3, [pc, #660]	; (8013dbc <UART_SetConfig+0x384>)
 8013b26:	fba3 2302 	umull	r2, r3, r3, r2
 8013b2a:	095b      	lsrs	r3, r3, #5
 8013b2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	461d      	mov	r5, r3
 8013b34:	f04f 0600 	mov.w	r6, #0
 8013b38:	46a9      	mov	r9, r5
 8013b3a:	46b2      	mov	sl, r6
 8013b3c:	eb19 0309 	adds.w	r3, r9, r9
 8013b40:	eb4a 040a 	adc.w	r4, sl, sl
 8013b44:	4699      	mov	r9, r3
 8013b46:	46a2      	mov	sl, r4
 8013b48:	eb19 0905 	adds.w	r9, r9, r5
 8013b4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8013b50:	f04f 0100 	mov.w	r1, #0
 8013b54:	f04f 0200 	mov.w	r2, #0
 8013b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013b5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013b60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013b64:	4689      	mov	r9, r1
 8013b66:	4692      	mov	sl, r2
 8013b68:	eb19 0005 	adds.w	r0, r9, r5
 8013b6c:	eb4a 0106 	adc.w	r1, sl, r6
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	461d      	mov	r5, r3
 8013b76:	f04f 0600 	mov.w	r6, #0
 8013b7a:	196b      	adds	r3, r5, r5
 8013b7c:	eb46 0406 	adc.w	r4, r6, r6
 8013b80:	461a      	mov	r2, r3
 8013b82:	4623      	mov	r3, r4
 8013b84:	f7ed f9ee 	bl	8000f64 <__aeabi_uldivmod>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	460c      	mov	r4, r1
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	4b8b      	ldr	r3, [pc, #556]	; (8013dbc <UART_SetConfig+0x384>)
 8013b90:	fba3 1302 	umull	r1, r3, r3, r2
 8013b94:	095b      	lsrs	r3, r3, #5
 8013b96:	2164      	movs	r1, #100	; 0x64
 8013b98:	fb01 f303 	mul.w	r3, r1, r3
 8013b9c:	1ad3      	subs	r3, r2, r3
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	3332      	adds	r3, #50	; 0x32
 8013ba2:	4a86      	ldr	r2, [pc, #536]	; (8013dbc <UART_SetConfig+0x384>)
 8013ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8013ba8:	095b      	lsrs	r3, r3, #5
 8013baa:	005b      	lsls	r3, r3, #1
 8013bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013bb0:	4498      	add	r8, r3
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	461d      	mov	r5, r3
 8013bb6:	f04f 0600 	mov.w	r6, #0
 8013bba:	46a9      	mov	r9, r5
 8013bbc:	46b2      	mov	sl, r6
 8013bbe:	eb19 0309 	adds.w	r3, r9, r9
 8013bc2:	eb4a 040a 	adc.w	r4, sl, sl
 8013bc6:	4699      	mov	r9, r3
 8013bc8:	46a2      	mov	sl, r4
 8013bca:	eb19 0905 	adds.w	r9, r9, r5
 8013bce:	eb4a 0a06 	adc.w	sl, sl, r6
 8013bd2:	f04f 0100 	mov.w	r1, #0
 8013bd6:	f04f 0200 	mov.w	r2, #0
 8013bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013bde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013be2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013be6:	4689      	mov	r9, r1
 8013be8:	4692      	mov	sl, r2
 8013bea:	eb19 0005 	adds.w	r0, r9, r5
 8013bee:	eb4a 0106 	adc.w	r1, sl, r6
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	461d      	mov	r5, r3
 8013bf8:	f04f 0600 	mov.w	r6, #0
 8013bfc:	196b      	adds	r3, r5, r5
 8013bfe:	eb46 0406 	adc.w	r4, r6, r6
 8013c02:	461a      	mov	r2, r3
 8013c04:	4623      	mov	r3, r4
 8013c06:	f7ed f9ad 	bl	8000f64 <__aeabi_uldivmod>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	460c      	mov	r4, r1
 8013c0e:	461a      	mov	r2, r3
 8013c10:	4b6a      	ldr	r3, [pc, #424]	; (8013dbc <UART_SetConfig+0x384>)
 8013c12:	fba3 1302 	umull	r1, r3, r3, r2
 8013c16:	095b      	lsrs	r3, r3, #5
 8013c18:	2164      	movs	r1, #100	; 0x64
 8013c1a:	fb01 f303 	mul.w	r3, r1, r3
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	00db      	lsls	r3, r3, #3
 8013c22:	3332      	adds	r3, #50	; 0x32
 8013c24:	4a65      	ldr	r2, [pc, #404]	; (8013dbc <UART_SetConfig+0x384>)
 8013c26:	fba2 2303 	umull	r2, r3, r2, r3
 8013c2a:	095b      	lsrs	r3, r3, #5
 8013c2c:	f003 0207 	and.w	r2, r3, #7
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4442      	add	r2, r8
 8013c36:	609a      	str	r2, [r3, #8]
 8013c38:	e26f      	b.n	801411a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013c3a:	f7fc fd1f 	bl	801067c <HAL_RCC_GetPCLK1Freq>
 8013c3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	461d      	mov	r5, r3
 8013c44:	f04f 0600 	mov.w	r6, #0
 8013c48:	46a8      	mov	r8, r5
 8013c4a:	46b1      	mov	r9, r6
 8013c4c:	eb18 0308 	adds.w	r3, r8, r8
 8013c50:	eb49 0409 	adc.w	r4, r9, r9
 8013c54:	4698      	mov	r8, r3
 8013c56:	46a1      	mov	r9, r4
 8013c58:	eb18 0805 	adds.w	r8, r8, r5
 8013c5c:	eb49 0906 	adc.w	r9, r9, r6
 8013c60:	f04f 0100 	mov.w	r1, #0
 8013c64:	f04f 0200 	mov.w	r2, #0
 8013c68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013c6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013c70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013c74:	4688      	mov	r8, r1
 8013c76:	4691      	mov	r9, r2
 8013c78:	eb18 0005 	adds.w	r0, r8, r5
 8013c7c:	eb49 0106 	adc.w	r1, r9, r6
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	461d      	mov	r5, r3
 8013c86:	f04f 0600 	mov.w	r6, #0
 8013c8a:	196b      	adds	r3, r5, r5
 8013c8c:	eb46 0406 	adc.w	r4, r6, r6
 8013c90:	461a      	mov	r2, r3
 8013c92:	4623      	mov	r3, r4
 8013c94:	f7ed f966 	bl	8000f64 <__aeabi_uldivmod>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	460c      	mov	r4, r1
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	4b47      	ldr	r3, [pc, #284]	; (8013dbc <UART_SetConfig+0x384>)
 8013ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8013ca4:	095b      	lsrs	r3, r3, #5
 8013ca6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	461d      	mov	r5, r3
 8013cae:	f04f 0600 	mov.w	r6, #0
 8013cb2:	46a9      	mov	r9, r5
 8013cb4:	46b2      	mov	sl, r6
 8013cb6:	eb19 0309 	adds.w	r3, r9, r9
 8013cba:	eb4a 040a 	adc.w	r4, sl, sl
 8013cbe:	4699      	mov	r9, r3
 8013cc0:	46a2      	mov	sl, r4
 8013cc2:	eb19 0905 	adds.w	r9, r9, r5
 8013cc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8013cca:	f04f 0100 	mov.w	r1, #0
 8013cce:	f04f 0200 	mov.w	r2, #0
 8013cd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013cd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013cda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013cde:	4689      	mov	r9, r1
 8013ce0:	4692      	mov	sl, r2
 8013ce2:	eb19 0005 	adds.w	r0, r9, r5
 8013ce6:	eb4a 0106 	adc.w	r1, sl, r6
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	461d      	mov	r5, r3
 8013cf0:	f04f 0600 	mov.w	r6, #0
 8013cf4:	196b      	adds	r3, r5, r5
 8013cf6:	eb46 0406 	adc.w	r4, r6, r6
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	4623      	mov	r3, r4
 8013cfe:	f7ed f931 	bl	8000f64 <__aeabi_uldivmod>
 8013d02:	4603      	mov	r3, r0
 8013d04:	460c      	mov	r4, r1
 8013d06:	461a      	mov	r2, r3
 8013d08:	4b2c      	ldr	r3, [pc, #176]	; (8013dbc <UART_SetConfig+0x384>)
 8013d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8013d0e:	095b      	lsrs	r3, r3, #5
 8013d10:	2164      	movs	r1, #100	; 0x64
 8013d12:	fb01 f303 	mul.w	r3, r1, r3
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	00db      	lsls	r3, r3, #3
 8013d1a:	3332      	adds	r3, #50	; 0x32
 8013d1c:	4a27      	ldr	r2, [pc, #156]	; (8013dbc <UART_SetConfig+0x384>)
 8013d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8013d22:	095b      	lsrs	r3, r3, #5
 8013d24:	005b      	lsls	r3, r3, #1
 8013d26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013d2a:	4498      	add	r8, r3
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	461d      	mov	r5, r3
 8013d30:	f04f 0600 	mov.w	r6, #0
 8013d34:	46a9      	mov	r9, r5
 8013d36:	46b2      	mov	sl, r6
 8013d38:	eb19 0309 	adds.w	r3, r9, r9
 8013d3c:	eb4a 040a 	adc.w	r4, sl, sl
 8013d40:	4699      	mov	r9, r3
 8013d42:	46a2      	mov	sl, r4
 8013d44:	eb19 0905 	adds.w	r9, r9, r5
 8013d48:	eb4a 0a06 	adc.w	sl, sl, r6
 8013d4c:	f04f 0100 	mov.w	r1, #0
 8013d50:	f04f 0200 	mov.w	r2, #0
 8013d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013d58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013d5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013d60:	4689      	mov	r9, r1
 8013d62:	4692      	mov	sl, r2
 8013d64:	eb19 0005 	adds.w	r0, r9, r5
 8013d68:	eb4a 0106 	adc.w	r1, sl, r6
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	461d      	mov	r5, r3
 8013d72:	f04f 0600 	mov.w	r6, #0
 8013d76:	196b      	adds	r3, r5, r5
 8013d78:	eb46 0406 	adc.w	r4, r6, r6
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	4623      	mov	r3, r4
 8013d80:	f7ed f8f0 	bl	8000f64 <__aeabi_uldivmod>
 8013d84:	4603      	mov	r3, r0
 8013d86:	460c      	mov	r4, r1
 8013d88:	461a      	mov	r2, r3
 8013d8a:	4b0c      	ldr	r3, [pc, #48]	; (8013dbc <UART_SetConfig+0x384>)
 8013d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8013d90:	095b      	lsrs	r3, r3, #5
 8013d92:	2164      	movs	r1, #100	; 0x64
 8013d94:	fb01 f303 	mul.w	r3, r1, r3
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	00db      	lsls	r3, r3, #3
 8013d9c:	3332      	adds	r3, #50	; 0x32
 8013d9e:	4a07      	ldr	r2, [pc, #28]	; (8013dbc <UART_SetConfig+0x384>)
 8013da0:	fba2 2303 	umull	r2, r3, r2, r3
 8013da4:	095b      	lsrs	r3, r3, #5
 8013da6:	f003 0207 	and.w	r2, r3, #7
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	4442      	add	r2, r8
 8013db0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8013db2:	e1b2      	b.n	801411a <UART_SetConfig+0x6e2>
 8013db4:	40011000 	.word	0x40011000
 8013db8:	40011400 	.word	0x40011400
 8013dbc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	4ad7      	ldr	r2, [pc, #860]	; (8014124 <UART_SetConfig+0x6ec>)
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d005      	beq.n	8013dd6 <UART_SetConfig+0x39e>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	4ad6      	ldr	r2, [pc, #856]	; (8014128 <UART_SetConfig+0x6f0>)
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	f040 80d1 	bne.w	8013f78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8013dd6:	f7fc fc65 	bl	80106a4 <HAL_RCC_GetPCLK2Freq>
 8013dda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	469a      	mov	sl, r3
 8013de0:	f04f 0b00 	mov.w	fp, #0
 8013de4:	46d0      	mov	r8, sl
 8013de6:	46d9      	mov	r9, fp
 8013de8:	eb18 0308 	adds.w	r3, r8, r8
 8013dec:	eb49 0409 	adc.w	r4, r9, r9
 8013df0:	4698      	mov	r8, r3
 8013df2:	46a1      	mov	r9, r4
 8013df4:	eb18 080a 	adds.w	r8, r8, sl
 8013df8:	eb49 090b 	adc.w	r9, r9, fp
 8013dfc:	f04f 0100 	mov.w	r1, #0
 8013e00:	f04f 0200 	mov.w	r2, #0
 8013e04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013e08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013e0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013e10:	4688      	mov	r8, r1
 8013e12:	4691      	mov	r9, r2
 8013e14:	eb1a 0508 	adds.w	r5, sl, r8
 8013e18:	eb4b 0609 	adc.w	r6, fp, r9
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	4619      	mov	r1, r3
 8013e22:	f04f 0200 	mov.w	r2, #0
 8013e26:	f04f 0300 	mov.w	r3, #0
 8013e2a:	f04f 0400 	mov.w	r4, #0
 8013e2e:	0094      	lsls	r4, r2, #2
 8013e30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013e34:	008b      	lsls	r3, r1, #2
 8013e36:	461a      	mov	r2, r3
 8013e38:	4623      	mov	r3, r4
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	4631      	mov	r1, r6
 8013e3e:	f7ed f891 	bl	8000f64 <__aeabi_uldivmod>
 8013e42:	4603      	mov	r3, r0
 8013e44:	460c      	mov	r4, r1
 8013e46:	461a      	mov	r2, r3
 8013e48:	4bb8      	ldr	r3, [pc, #736]	; (801412c <UART_SetConfig+0x6f4>)
 8013e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8013e4e:	095b      	lsrs	r3, r3, #5
 8013e50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	469b      	mov	fp, r3
 8013e58:	f04f 0c00 	mov.w	ip, #0
 8013e5c:	46d9      	mov	r9, fp
 8013e5e:	46e2      	mov	sl, ip
 8013e60:	eb19 0309 	adds.w	r3, r9, r9
 8013e64:	eb4a 040a 	adc.w	r4, sl, sl
 8013e68:	4699      	mov	r9, r3
 8013e6a:	46a2      	mov	sl, r4
 8013e6c:	eb19 090b 	adds.w	r9, r9, fp
 8013e70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013e74:	f04f 0100 	mov.w	r1, #0
 8013e78:	f04f 0200 	mov.w	r2, #0
 8013e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013e80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013e84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013e88:	4689      	mov	r9, r1
 8013e8a:	4692      	mov	sl, r2
 8013e8c:	eb1b 0509 	adds.w	r5, fp, r9
 8013e90:	eb4c 060a 	adc.w	r6, ip, sl
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	4619      	mov	r1, r3
 8013e9a:	f04f 0200 	mov.w	r2, #0
 8013e9e:	f04f 0300 	mov.w	r3, #0
 8013ea2:	f04f 0400 	mov.w	r4, #0
 8013ea6:	0094      	lsls	r4, r2, #2
 8013ea8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013eac:	008b      	lsls	r3, r1, #2
 8013eae:	461a      	mov	r2, r3
 8013eb0:	4623      	mov	r3, r4
 8013eb2:	4628      	mov	r0, r5
 8013eb4:	4631      	mov	r1, r6
 8013eb6:	f7ed f855 	bl	8000f64 <__aeabi_uldivmod>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	460c      	mov	r4, r1
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	4b9a      	ldr	r3, [pc, #616]	; (801412c <UART_SetConfig+0x6f4>)
 8013ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8013ec6:	095b      	lsrs	r3, r3, #5
 8013ec8:	2164      	movs	r1, #100	; 0x64
 8013eca:	fb01 f303 	mul.w	r3, r1, r3
 8013ece:	1ad3      	subs	r3, r2, r3
 8013ed0:	011b      	lsls	r3, r3, #4
 8013ed2:	3332      	adds	r3, #50	; 0x32
 8013ed4:	4a95      	ldr	r2, [pc, #596]	; (801412c <UART_SetConfig+0x6f4>)
 8013ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8013eda:	095b      	lsrs	r3, r3, #5
 8013edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ee0:	4498      	add	r8, r3
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	469b      	mov	fp, r3
 8013ee6:	f04f 0c00 	mov.w	ip, #0
 8013eea:	46d9      	mov	r9, fp
 8013eec:	46e2      	mov	sl, ip
 8013eee:	eb19 0309 	adds.w	r3, r9, r9
 8013ef2:	eb4a 040a 	adc.w	r4, sl, sl
 8013ef6:	4699      	mov	r9, r3
 8013ef8:	46a2      	mov	sl, r4
 8013efa:	eb19 090b 	adds.w	r9, r9, fp
 8013efe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013f02:	f04f 0100 	mov.w	r1, #0
 8013f06:	f04f 0200 	mov.w	r2, #0
 8013f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013f0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013f12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013f16:	4689      	mov	r9, r1
 8013f18:	4692      	mov	sl, r2
 8013f1a:	eb1b 0509 	adds.w	r5, fp, r9
 8013f1e:	eb4c 060a 	adc.w	r6, ip, sl
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	4619      	mov	r1, r3
 8013f28:	f04f 0200 	mov.w	r2, #0
 8013f2c:	f04f 0300 	mov.w	r3, #0
 8013f30:	f04f 0400 	mov.w	r4, #0
 8013f34:	0094      	lsls	r4, r2, #2
 8013f36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013f3a:	008b      	lsls	r3, r1, #2
 8013f3c:	461a      	mov	r2, r3
 8013f3e:	4623      	mov	r3, r4
 8013f40:	4628      	mov	r0, r5
 8013f42:	4631      	mov	r1, r6
 8013f44:	f7ed f80e 	bl	8000f64 <__aeabi_uldivmod>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	460c      	mov	r4, r1
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	4b77      	ldr	r3, [pc, #476]	; (801412c <UART_SetConfig+0x6f4>)
 8013f50:	fba3 1302 	umull	r1, r3, r3, r2
 8013f54:	095b      	lsrs	r3, r3, #5
 8013f56:	2164      	movs	r1, #100	; 0x64
 8013f58:	fb01 f303 	mul.w	r3, r1, r3
 8013f5c:	1ad3      	subs	r3, r2, r3
 8013f5e:	011b      	lsls	r3, r3, #4
 8013f60:	3332      	adds	r3, #50	; 0x32
 8013f62:	4a72      	ldr	r2, [pc, #456]	; (801412c <UART_SetConfig+0x6f4>)
 8013f64:	fba2 2303 	umull	r2, r3, r2, r3
 8013f68:	095b      	lsrs	r3, r3, #5
 8013f6a:	f003 020f 	and.w	r2, r3, #15
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4442      	add	r2, r8
 8013f74:	609a      	str	r2, [r3, #8]
 8013f76:	e0d0      	b.n	801411a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8013f78:	f7fc fb80 	bl	801067c <HAL_RCC_GetPCLK1Freq>
 8013f7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	469a      	mov	sl, r3
 8013f82:	f04f 0b00 	mov.w	fp, #0
 8013f86:	46d0      	mov	r8, sl
 8013f88:	46d9      	mov	r9, fp
 8013f8a:	eb18 0308 	adds.w	r3, r8, r8
 8013f8e:	eb49 0409 	adc.w	r4, r9, r9
 8013f92:	4698      	mov	r8, r3
 8013f94:	46a1      	mov	r9, r4
 8013f96:	eb18 080a 	adds.w	r8, r8, sl
 8013f9a:	eb49 090b 	adc.w	r9, r9, fp
 8013f9e:	f04f 0100 	mov.w	r1, #0
 8013fa2:	f04f 0200 	mov.w	r2, #0
 8013fa6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013faa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013fae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013fb2:	4688      	mov	r8, r1
 8013fb4:	4691      	mov	r9, r2
 8013fb6:	eb1a 0508 	adds.w	r5, sl, r8
 8013fba:	eb4b 0609 	adc.w	r6, fp, r9
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	f04f 0200 	mov.w	r2, #0
 8013fc8:	f04f 0300 	mov.w	r3, #0
 8013fcc:	f04f 0400 	mov.w	r4, #0
 8013fd0:	0094      	lsls	r4, r2, #2
 8013fd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013fd6:	008b      	lsls	r3, r1, #2
 8013fd8:	461a      	mov	r2, r3
 8013fda:	4623      	mov	r3, r4
 8013fdc:	4628      	mov	r0, r5
 8013fde:	4631      	mov	r1, r6
 8013fe0:	f7ec ffc0 	bl	8000f64 <__aeabi_uldivmod>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	460c      	mov	r4, r1
 8013fe8:	461a      	mov	r2, r3
 8013fea:	4b50      	ldr	r3, [pc, #320]	; (801412c <UART_SetConfig+0x6f4>)
 8013fec:	fba3 2302 	umull	r2, r3, r3, r2
 8013ff0:	095b      	lsrs	r3, r3, #5
 8013ff2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	469b      	mov	fp, r3
 8013ffa:	f04f 0c00 	mov.w	ip, #0
 8013ffe:	46d9      	mov	r9, fp
 8014000:	46e2      	mov	sl, ip
 8014002:	eb19 0309 	adds.w	r3, r9, r9
 8014006:	eb4a 040a 	adc.w	r4, sl, sl
 801400a:	4699      	mov	r9, r3
 801400c:	46a2      	mov	sl, r4
 801400e:	eb19 090b 	adds.w	r9, r9, fp
 8014012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014016:	f04f 0100 	mov.w	r1, #0
 801401a:	f04f 0200 	mov.w	r2, #0
 801401e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801402a:	4689      	mov	r9, r1
 801402c:	4692      	mov	sl, r2
 801402e:	eb1b 0509 	adds.w	r5, fp, r9
 8014032:	eb4c 060a 	adc.w	r6, ip, sl
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	4619      	mov	r1, r3
 801403c:	f04f 0200 	mov.w	r2, #0
 8014040:	f04f 0300 	mov.w	r3, #0
 8014044:	f04f 0400 	mov.w	r4, #0
 8014048:	0094      	lsls	r4, r2, #2
 801404a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801404e:	008b      	lsls	r3, r1, #2
 8014050:	461a      	mov	r2, r3
 8014052:	4623      	mov	r3, r4
 8014054:	4628      	mov	r0, r5
 8014056:	4631      	mov	r1, r6
 8014058:	f7ec ff84 	bl	8000f64 <__aeabi_uldivmod>
 801405c:	4603      	mov	r3, r0
 801405e:	460c      	mov	r4, r1
 8014060:	461a      	mov	r2, r3
 8014062:	4b32      	ldr	r3, [pc, #200]	; (801412c <UART_SetConfig+0x6f4>)
 8014064:	fba3 1302 	umull	r1, r3, r3, r2
 8014068:	095b      	lsrs	r3, r3, #5
 801406a:	2164      	movs	r1, #100	; 0x64
 801406c:	fb01 f303 	mul.w	r3, r1, r3
 8014070:	1ad3      	subs	r3, r2, r3
 8014072:	011b      	lsls	r3, r3, #4
 8014074:	3332      	adds	r3, #50	; 0x32
 8014076:	4a2d      	ldr	r2, [pc, #180]	; (801412c <UART_SetConfig+0x6f4>)
 8014078:	fba2 2303 	umull	r2, r3, r2, r3
 801407c:	095b      	lsrs	r3, r3, #5
 801407e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014082:	4498      	add	r8, r3
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	469b      	mov	fp, r3
 8014088:	f04f 0c00 	mov.w	ip, #0
 801408c:	46d9      	mov	r9, fp
 801408e:	46e2      	mov	sl, ip
 8014090:	eb19 0309 	adds.w	r3, r9, r9
 8014094:	eb4a 040a 	adc.w	r4, sl, sl
 8014098:	4699      	mov	r9, r3
 801409a:	46a2      	mov	sl, r4
 801409c:	eb19 090b 	adds.w	r9, r9, fp
 80140a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80140a4:	f04f 0100 	mov.w	r1, #0
 80140a8:	f04f 0200 	mov.w	r2, #0
 80140ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80140b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80140b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80140b8:	4689      	mov	r9, r1
 80140ba:	4692      	mov	sl, r2
 80140bc:	eb1b 0509 	adds.w	r5, fp, r9
 80140c0:	eb4c 060a 	adc.w	r6, ip, sl
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	4619      	mov	r1, r3
 80140ca:	f04f 0200 	mov.w	r2, #0
 80140ce:	f04f 0300 	mov.w	r3, #0
 80140d2:	f04f 0400 	mov.w	r4, #0
 80140d6:	0094      	lsls	r4, r2, #2
 80140d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80140dc:	008b      	lsls	r3, r1, #2
 80140de:	461a      	mov	r2, r3
 80140e0:	4623      	mov	r3, r4
 80140e2:	4628      	mov	r0, r5
 80140e4:	4631      	mov	r1, r6
 80140e6:	f7ec ff3d 	bl	8000f64 <__aeabi_uldivmod>
 80140ea:	4603      	mov	r3, r0
 80140ec:	460c      	mov	r4, r1
 80140ee:	461a      	mov	r2, r3
 80140f0:	4b0e      	ldr	r3, [pc, #56]	; (801412c <UART_SetConfig+0x6f4>)
 80140f2:	fba3 1302 	umull	r1, r3, r3, r2
 80140f6:	095b      	lsrs	r3, r3, #5
 80140f8:	2164      	movs	r1, #100	; 0x64
 80140fa:	fb01 f303 	mul.w	r3, r1, r3
 80140fe:	1ad3      	subs	r3, r2, r3
 8014100:	011b      	lsls	r3, r3, #4
 8014102:	3332      	adds	r3, #50	; 0x32
 8014104:	4a09      	ldr	r2, [pc, #36]	; (801412c <UART_SetConfig+0x6f4>)
 8014106:	fba2 2303 	umull	r2, r3, r2, r3
 801410a:	095b      	lsrs	r3, r3, #5
 801410c:	f003 020f 	and.w	r2, r3, #15
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	4442      	add	r2, r8
 8014116:	609a      	str	r2, [r3, #8]
}
 8014118:	e7ff      	b.n	801411a <UART_SetConfig+0x6e2>
 801411a:	bf00      	nop
 801411c:	3714      	adds	r7, #20
 801411e:	46bd      	mov	sp, r7
 8014120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014124:	40011000 	.word	0x40011000
 8014128:	40011400 	.word	0x40011400
 801412c:	51eb851f 	.word	0x51eb851f

08014130 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8014130:	b084      	sub	sp, #16
 8014132:	b480      	push	{r7}
 8014134:	b085      	sub	sp, #20
 8014136:	af00      	add	r7, sp, #0
 8014138:	6078      	str	r0, [r7, #4]
 801413a:	f107 001c 	add.w	r0, r7, #28
 801413e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8014146:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8014148:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801414a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801414e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8014150:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8014152:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8014154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8014156:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801415a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801415c:	68fa      	ldr	r2, [r7, #12]
 801415e:	4313      	orrs	r3, r2
 8014160:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801416a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801416e:	68fa      	ldr	r2, [r7, #12]
 8014170:	431a      	orrs	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8014176:	2300      	movs	r3, #0
}
 8014178:	4618      	mov	r0, r3
 801417a:	3714      	adds	r7, #20
 801417c:	46bd      	mov	sp, r7
 801417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014182:	b004      	add	sp, #16
 8014184:	4770      	bx	lr

08014186 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8014186:	b480      	push	{r7}
 8014188:	b083      	sub	sp, #12
 801418a:	af00      	add	r7, sp, #0
 801418c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8014194:	4618      	mov	r0, r3
 8014196:	370c      	adds	r7, #12
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr

080141a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80141a0:	b480      	push	{r7}
 80141a2:	b083      	sub	sp, #12
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80141b4:	2300      	movs	r3, #0
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	370c      	adds	r7, #12
 80141ba:	46bd      	mov	sp, r7
 80141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c0:	4770      	bx	lr

080141c2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80141c2:	b580      	push	{r7, lr}
 80141c4:	b082      	sub	sp, #8
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2203      	movs	r2, #3
 80141ce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80141d0:	2002      	movs	r0, #2
 80141d2:	f7f7 fcb3 	bl	800bb3c <HAL_Delay>
  
  return HAL_OK;
 80141d6:	2300      	movs	r3, #0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80141e0:	b480      	push	{r7}
 80141e2:	b083      	sub	sp, #12
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	f003 0303 	and.w	r3, r3, #3
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	370c      	adds	r7, #12
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr

080141fc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80141fc:	b480      	push	{r7}
 80141fe:	b085      	sub	sp, #20
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	681a      	ldr	r2, [r3, #0]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801421a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8014220:	431a      	orrs	r2, r3
                       Command->CPSM);
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8014226:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014228:	68fa      	ldr	r2, [r7, #12]
 801422a:	4313      	orrs	r3, r2
 801422c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014236:	f023 030f 	bic.w	r3, r3, #15
 801423a:	68fa      	ldr	r2, [r7, #12]
 801423c:	431a      	orrs	r2, r3
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8014242:	2300      	movs	r3, #0
}
 8014244:	4618      	mov	r0, r3
 8014246:	3714      	adds	r7, #20
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8014250:	b480      	push	{r7}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	691b      	ldr	r3, [r3, #16]
 801425c:	b2db      	uxtb	r3, r3
}
 801425e:	4618      	mov	r0, r3
 8014260:	370c      	adds	r7, #12
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr

0801426a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801426a:	b480      	push	{r7}
 801426c:	b085      	sub	sp, #20
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
 8014272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	3314      	adds	r3, #20
 8014278:	461a      	mov	r2, r3
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	4413      	add	r3, r2
 801427e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681b      	ldr	r3, [r3, #0]
}  
 8014284:	4618      	mov	r0, r3
 8014286:	3714      	adds	r7, #20
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr

08014290 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8014290:	b480      	push	{r7}
 8014292:	b085      	sub	sp, #20
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801429a:	2300      	movs	r3, #0
 801429c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	681a      	ldr	r2, [r3, #0]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	685a      	ldr	r2, [r3, #4]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80142b2:	683b      	ldr	r3, [r7, #0]
 80142b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80142b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80142bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80142c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80142c4:	68fa      	ldr	r2, [r7, #12]
 80142c6:	4313      	orrs	r3, r2
 80142c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	431a      	orrs	r2, r3
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80142da:	2300      	movs	r3, #0

}
 80142dc:	4618      	mov	r0, r3
 80142de:	3714      	adds	r7, #20
 80142e0:	46bd      	mov	sp, r7
 80142e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e6:	4770      	bx	lr

080142e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b088      	sub	sp, #32
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80142f6:	2310      	movs	r3, #16
 80142f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80142fa:	2340      	movs	r3, #64	; 0x40
 80142fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80142fe:	2300      	movs	r3, #0
 8014300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014306:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014308:	f107 0308 	add.w	r3, r7, #8
 801430c:	4619      	mov	r1, r3
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f7ff ff74 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8014314:	f241 3288 	movw	r2, #5000	; 0x1388
 8014318:	2110      	movs	r1, #16
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 fa40 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014322:	69fb      	ldr	r3, [r7, #28]
}
 8014324:	4618      	mov	r0, r3
 8014326:	3720      	adds	r7, #32
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b088      	sub	sp, #32
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801433a:	2311      	movs	r3, #17
 801433c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801433e:	2340      	movs	r3, #64	; 0x40
 8014340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014342:	2300      	movs	r3, #0
 8014344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801434a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801434c:	f107 0308 	add.w	r3, r7, #8
 8014350:	4619      	mov	r1, r3
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff ff52 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8014358:	f241 3288 	movw	r2, #5000	; 0x1388
 801435c:	2111      	movs	r1, #17
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 fa1e 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014366:	69fb      	ldr	r3, [r7, #28]
}
 8014368:	4618      	mov	r0, r3
 801436a:	3720      	adds	r7, #32
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b088      	sub	sp, #32
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801437e:	2312      	movs	r3, #18
 8014380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014382:	2340      	movs	r3, #64	; 0x40
 8014384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014386:	2300      	movs	r3, #0
 8014388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801438a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801438e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014390:	f107 0308 	add.w	r3, r7, #8
 8014394:	4619      	mov	r1, r3
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f7ff ff30 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80143a0:	2112      	movs	r1, #18
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f000 f9fc 	bl	80147a0 <SDMMC_GetCmdResp1>
 80143a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80143aa:	69fb      	ldr	r3, [r7, #28]
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3720      	adds	r7, #32
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b088      	sub	sp, #32
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80143c2:	2318      	movs	r3, #24
 80143c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80143c6:	2340      	movs	r3, #64	; 0x40
 80143c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80143ca:	2300      	movs	r3, #0
 80143cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80143ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80143d4:	f107 0308 	add.w	r3, r7, #8
 80143d8:	4619      	mov	r1, r3
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f7ff ff0e 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80143e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80143e4:	2118      	movs	r1, #24
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 f9da 	bl	80147a0 <SDMMC_GetCmdResp1>
 80143ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80143ee:	69fb      	ldr	r3, [r7, #28]
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3720      	adds	r7, #32
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b088      	sub	sp, #32
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8014406:	2319      	movs	r3, #25
 8014408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801440a:	2340      	movs	r3, #64	; 0x40
 801440c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801440e:	2300      	movs	r3, #0
 8014410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014416:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014418:	f107 0308 	add.w	r3, r7, #8
 801441c:	4619      	mov	r1, r3
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f7ff feec 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8014424:	f241 3288 	movw	r2, #5000	; 0x1388
 8014428:	2119      	movs	r1, #25
 801442a:	6878      	ldr	r0, [r7, #4]
 801442c:	f000 f9b8 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014432:	69fb      	ldr	r3, [r7, #28]
}
 8014434:	4618      	mov	r0, r3
 8014436:	3720      	adds	r7, #32
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b088      	sub	sp, #32
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8014444:	2300      	movs	r3, #0
 8014446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8014448:	230c      	movs	r3, #12
 801444a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801444c:	2340      	movs	r3, #64	; 0x40
 801444e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014450:	2300      	movs	r3, #0
 8014452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014458:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801445a:	f107 0308 	add.w	r3, r7, #8
 801445e:	4619      	mov	r1, r3
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7ff fecb 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8014466:	4a05      	ldr	r2, [pc, #20]	; (801447c <SDMMC_CmdStopTransfer+0x40>)
 8014468:	210c      	movs	r1, #12
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 f998 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014472:	69fb      	ldr	r3, [r7, #28]
}
 8014474:	4618      	mov	r0, r3
 8014476:	3720      	adds	r7, #32
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	05f5e100 	.word	0x05f5e100

08014480 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b08a      	sub	sp, #40	; 0x28
 8014484:	af00      	add	r7, sp, #0
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014490:	2307      	movs	r3, #7
 8014492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014494:	2340      	movs	r3, #64	; 0x40
 8014496:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014498:	2300      	movs	r3, #0
 801449a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801449c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80144a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80144a2:	f107 0310 	add.w	r3, r7, #16
 80144a6:	4619      	mov	r1, r3
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f7ff fea7 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80144ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80144b2:	2107      	movs	r1, #7
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f000 f973 	bl	80147a0 <SDMMC_GetCmdResp1>
 80144ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80144bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3728      	adds	r7, #40	; 0x28
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b088      	sub	sp, #32
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80144ce:	2300      	movs	r3, #0
 80144d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80144d2:	2300      	movs	r3, #0
 80144d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80144d6:	2300      	movs	r3, #0
 80144d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80144da:	2300      	movs	r3, #0
 80144dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80144de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80144e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80144e4:	f107 0308 	add.w	r3, r7, #8
 80144e8:	4619      	mov	r1, r3
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7ff fe86 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f000 f92d 	bl	8014750 <SDMMC_GetCmdError>
 80144f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144f8:	69fb      	ldr	r3, [r7, #28]
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3720      	adds	r7, #32
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b088      	sub	sp, #32
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801450a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801450e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014510:	2308      	movs	r3, #8
 8014512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014514:	2340      	movs	r3, #64	; 0x40
 8014516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014518:	2300      	movs	r3, #0
 801451a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801451c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014522:	f107 0308 	add.w	r3, r7, #8
 8014526:	4619      	mov	r1, r3
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f7ff fe67 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 fb16 	bl	8014b60 <SDMMC_GetCmdResp7>
 8014534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014536:	69fb      	ldr	r3, [r7, #28]
}
 8014538:	4618      	mov	r0, r3
 801453a:	3720      	adds	r7, #32
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b088      	sub	sp, #32
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801454e:	2337      	movs	r3, #55	; 0x37
 8014550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014552:	2340      	movs	r3, #64	; 0x40
 8014554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014556:	2300      	movs	r3, #0
 8014558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801455a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801455e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014560:	f107 0308 	add.w	r3, r7, #8
 8014564:	4619      	mov	r1, r3
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f7ff fe48 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014570:	2137      	movs	r1, #55	; 0x37
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f000 f914 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801457a:	69fb      	ldr	r3, [r7, #28]
}
 801457c:	4618      	mov	r0, r3
 801457e:	3720      	adds	r7, #32
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b088      	sub	sp, #32
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801459a:	2329      	movs	r3, #41	; 0x29
 801459c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801459e:	2340      	movs	r3, #64	; 0x40
 80145a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80145a2:	2300      	movs	r3, #0
 80145a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80145a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80145ac:	f107 0308 	add.w	r3, r7, #8
 80145b0:	4619      	mov	r1, r3
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f7ff fe22 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f000 fa23 	bl	8014a04 <SDMMC_GetCmdResp3>
 80145be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145c0:	69fb      	ldr	r3, [r7, #28]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3720      	adds	r7, #32
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}

080145ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80145ca:	b580      	push	{r7, lr}
 80145cc:	b088      	sub	sp, #32
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	6078      	str	r0, [r7, #4]
 80145d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80145d8:	2306      	movs	r3, #6
 80145da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80145dc:	2340      	movs	r3, #64	; 0x40
 80145de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80145e0:	2300      	movs	r3, #0
 80145e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80145e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80145ea:	f107 0308 	add.w	r3, r7, #8
 80145ee:	4619      	mov	r1, r3
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7ff fe03 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80145f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80145fa:	2106      	movs	r1, #6
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 f8cf 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014604:	69fb      	ldr	r3, [r7, #28]
}
 8014606:	4618      	mov	r0, r3
 8014608:	3720      	adds	r7, #32
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}

0801460e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801460e:	b580      	push	{r7, lr}
 8014610:	b088      	sub	sp, #32
 8014612:	af00      	add	r7, sp, #0
 8014614:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8014616:	2300      	movs	r3, #0
 8014618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801461a:	2333      	movs	r3, #51	; 0x33
 801461c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801461e:	2340      	movs	r3, #64	; 0x40
 8014620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014622:	2300      	movs	r3, #0
 8014624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801462a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801462c:	f107 0308 	add.w	r3, r7, #8
 8014630:	4619      	mov	r1, r3
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7ff fde2 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8014638:	f241 3288 	movw	r2, #5000	; 0x1388
 801463c:	2133      	movs	r1, #51	; 0x33
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 f8ae 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014646:	69fb      	ldr	r3, [r7, #28]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3720      	adds	r7, #32
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}

08014650 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b088      	sub	sp, #32
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8014658:	2300      	movs	r3, #0
 801465a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801465c:	2302      	movs	r3, #2
 801465e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8014660:	23c0      	movs	r3, #192	; 0xc0
 8014662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014664:	2300      	movs	r3, #0
 8014666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801466c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801466e:	f107 0308 	add.w	r3, r7, #8
 8014672:	4619      	mov	r1, r3
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f7ff fdc1 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f000 f97c 	bl	8014978 <SDMMC_GetCmdResp2>
 8014680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014682:	69fb      	ldr	r3, [r7, #28]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3720      	adds	r7, #32
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b088      	sub	sp, #32
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801469a:	2309      	movs	r3, #9
 801469c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801469e:	23c0      	movs	r3, #192	; 0xc0
 80146a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80146a2:	2300      	movs	r3, #0
 80146a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80146a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80146ac:	f107 0308 	add.w	r3, r7, #8
 80146b0:	4619      	mov	r1, r3
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff fda2 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f000 f95d 	bl	8014978 <SDMMC_GetCmdResp2>
 80146be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146c0:	69fb      	ldr	r3, [r7, #28]
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3720      	adds	r7, #32
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}

080146ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80146ca:	b580      	push	{r7, lr}
 80146cc:	b088      	sub	sp, #32
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
 80146d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80146d4:	2300      	movs	r3, #0
 80146d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80146d8:	2303      	movs	r3, #3
 80146da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80146dc:	2340      	movs	r3, #64	; 0x40
 80146de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80146e0:	2300      	movs	r3, #0
 80146e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80146e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80146ea:	f107 0308 	add.w	r3, r7, #8
 80146ee:	4619      	mov	r1, r3
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f7ff fd83 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80146f6:	683a      	ldr	r2, [r7, #0]
 80146f8:	2103      	movs	r1, #3
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 f9bc 	bl	8014a78 <SDMMC_GetCmdResp6>
 8014700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014702:	69fb      	ldr	r3, [r7, #28]
}
 8014704:	4618      	mov	r0, r3
 8014706:	3720      	adds	r7, #32
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b088      	sub	sp, #32
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801471a:	230d      	movs	r3, #13
 801471c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801471e:	2340      	movs	r3, #64	; 0x40
 8014720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014722:	2300      	movs	r3, #0
 8014724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801472a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801472c:	f107 0308 	add.w	r3, r7, #8
 8014730:	4619      	mov	r1, r3
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f7ff fd62 	bl	80141fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8014738:	f241 3288 	movw	r2, #5000	; 0x1388
 801473c:	210d      	movs	r1, #13
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 f82e 	bl	80147a0 <SDMMC_GetCmdResp1>
 8014744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014746:	69fb      	ldr	r3, [r7, #28]
}
 8014748:	4618      	mov	r0, r3
 801474a:	3720      	adds	r7, #32
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8014750:	b490      	push	{r4, r7}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014758:	4b0f      	ldr	r3, [pc, #60]	; (8014798 <SDMMC_GetCmdError+0x48>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	4a0f      	ldr	r2, [pc, #60]	; (801479c <SDMMC_GetCmdError+0x4c>)
 801475e:	fba2 2303 	umull	r2, r3, r2, r3
 8014762:	0a5b      	lsrs	r3, r3, #9
 8014764:	f241 3288 	movw	r2, #5000	; 0x1388
 8014768:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801476c:	4623      	mov	r3, r4
 801476e:	1e5c      	subs	r4, r3, #1
 8014770:	2b00      	cmp	r3, #0
 8014772:	d102      	bne.n	801477a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014778:	e009      	b.n	801478e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014782:	2b00      	cmp	r3, #0
 8014784:	d0f2      	beq.n	801476c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	22c5      	movs	r2, #197	; 0xc5
 801478a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801478c:	2300      	movs	r3, #0
}
 801478e:	4618      	mov	r0, r3
 8014790:	3708      	adds	r7, #8
 8014792:	46bd      	mov	sp, r7
 8014794:	bc90      	pop	{r4, r7}
 8014796:	4770      	bx	lr
 8014798:	200000cc 	.word	0x200000cc
 801479c:	10624dd3 	.word	0x10624dd3

080147a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80147a0:	b590      	push	{r4, r7, lr}
 80147a2:	b087      	sub	sp, #28
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	460b      	mov	r3, r1
 80147aa:	607a      	str	r2, [r7, #4]
 80147ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80147ae:	4b6f      	ldr	r3, [pc, #444]	; (801496c <SDMMC_GetCmdResp1+0x1cc>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	4a6f      	ldr	r2, [pc, #444]	; (8014970 <SDMMC_GetCmdResp1+0x1d0>)
 80147b4:	fba2 2303 	umull	r2, r3, r2, r3
 80147b8:	0a5b      	lsrs	r3, r3, #9
 80147ba:	687a      	ldr	r2, [r7, #4]
 80147bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80147c0:	4623      	mov	r3, r4
 80147c2:	1e5c      	subs	r4, r3, #1
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d102      	bne.n	80147ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80147c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80147cc:	e0c9      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147d2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d0f0      	beq.n	80147c0 <SDMMC_GetCmdResp1+0x20>
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d1eb      	bne.n	80147c0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147ec:	f003 0304 	and.w	r3, r3, #4
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d004      	beq.n	80147fe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2204      	movs	r2, #4
 80147f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80147fa:	2304      	movs	r3, #4
 80147fc:	e0b1      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014802:	f003 0301 	and.w	r3, r3, #1
 8014806:	2b00      	cmp	r3, #0
 8014808:	d004      	beq.n	8014814 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2201      	movs	r2, #1
 801480e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014810:	2301      	movs	r3, #1
 8014812:	e0a6      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	22c5      	movs	r2, #197	; 0xc5
 8014818:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801481a:	68f8      	ldr	r0, [r7, #12]
 801481c:	f7ff fd18 	bl	8014250 <SDIO_GetCommandResponse>
 8014820:	4603      	mov	r3, r0
 8014822:	461a      	mov	r2, r3
 8014824:	7afb      	ldrb	r3, [r7, #11]
 8014826:	4293      	cmp	r3, r2
 8014828:	d001      	beq.n	801482e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801482a:	2301      	movs	r3, #1
 801482c:	e099      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801482e:	2100      	movs	r1, #0
 8014830:	68f8      	ldr	r0, [r7, #12]
 8014832:	f7ff fd1a 	bl	801426a <SDIO_GetResponse>
 8014836:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014838:	693a      	ldr	r2, [r7, #16]
 801483a:	4b4e      	ldr	r3, [pc, #312]	; (8014974 <SDMMC_GetCmdResp1+0x1d4>)
 801483c:	4013      	ands	r3, r2
 801483e:	2b00      	cmp	r3, #0
 8014840:	d101      	bne.n	8014846 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8014842:	2300      	movs	r3, #0
 8014844:	e08d      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	2b00      	cmp	r3, #0
 801484a:	da02      	bge.n	8014852 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801484c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014850:	e087      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014858:	2b00      	cmp	r3, #0
 801485a:	d001      	beq.n	8014860 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801485c:	2340      	movs	r3, #64	; 0x40
 801485e:	e080      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014866:	2b00      	cmp	r3, #0
 8014868:	d001      	beq.n	801486e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801486a:	2380      	movs	r3, #128	; 0x80
 801486c:	e079      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801486e:	693b      	ldr	r3, [r7, #16]
 8014870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014874:	2b00      	cmp	r3, #0
 8014876:	d002      	beq.n	801487e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014878:	f44f 7380 	mov.w	r3, #256	; 0x100
 801487c:	e071      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014884:	2b00      	cmp	r3, #0
 8014886:	d002      	beq.n	801488e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014888:	f44f 7300 	mov.w	r3, #512	; 0x200
 801488c:	e069      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014894:	2b00      	cmp	r3, #0
 8014896:	d002      	beq.n	801489e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801489c:	e061      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d002      	beq.n	80148ae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80148a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80148ac:	e059      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d002      	beq.n	80148be <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80148b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80148bc:	e051      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d002      	beq.n	80148ce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80148c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80148cc:	e049      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d002      	beq.n	80148de <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80148d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80148dc:	e041      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d002      	beq.n	80148ee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80148e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148ec:	e039      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d002      	beq.n	80148fe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80148f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80148fc:	e031      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014908:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801490c:	e029      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014914:	2b00      	cmp	r3, #0
 8014916:	d002      	beq.n	801491e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801491c:	e021      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014924:	2b00      	cmp	r3, #0
 8014926:	d002      	beq.n	801492e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014928:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801492c:	e019      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014938:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801493c:	e011      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014944:	2b00      	cmp	r3, #0
 8014946:	d002      	beq.n	801494e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801494c:	e009      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	f003 0308 	and.w	r3, r3, #8
 8014954:	2b00      	cmp	r3, #0
 8014956:	d002      	beq.n	801495e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014958:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801495c:	e001      	b.n	8014962 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801495e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014962:	4618      	mov	r0, r3
 8014964:	371c      	adds	r7, #28
 8014966:	46bd      	mov	sp, r7
 8014968:	bd90      	pop	{r4, r7, pc}
 801496a:	bf00      	nop
 801496c:	200000cc 	.word	0x200000cc
 8014970:	10624dd3 	.word	0x10624dd3
 8014974:	fdffe008 	.word	0xfdffe008

08014978 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8014978:	b490      	push	{r4, r7}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014980:	4b1e      	ldr	r3, [pc, #120]	; (80149fc <SDMMC_GetCmdResp2+0x84>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	4a1e      	ldr	r2, [pc, #120]	; (8014a00 <SDMMC_GetCmdResp2+0x88>)
 8014986:	fba2 2303 	umull	r2, r3, r2, r3
 801498a:	0a5b      	lsrs	r3, r3, #9
 801498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014990:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8014994:	4623      	mov	r3, r4
 8014996:	1e5c      	subs	r4, r3, #1
 8014998:	2b00      	cmp	r3, #0
 801499a:	d102      	bne.n	80149a2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801499c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80149a0:	e026      	b.n	80149f0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d0f0      	beq.n	8014994 <SDMMC_GetCmdResp2+0x1c>
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d1eb      	bne.n	8014994 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149c0:	f003 0304 	and.w	r3, r3, #4
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d004      	beq.n	80149d2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2204      	movs	r2, #4
 80149cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80149ce:	2304      	movs	r3, #4
 80149d0:	e00e      	b.n	80149f0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149d6:	f003 0301 	and.w	r3, r3, #1
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d004      	beq.n	80149e8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2201      	movs	r2, #1
 80149e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80149e4:	2301      	movs	r3, #1
 80149e6:	e003      	b.n	80149f0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	22c5      	movs	r2, #197	; 0xc5
 80149ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80149ee:	2300      	movs	r3, #0
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bc90      	pop	{r4, r7}
 80149f8:	4770      	bx	lr
 80149fa:	bf00      	nop
 80149fc:	200000cc 	.word	0x200000cc
 8014a00:	10624dd3 	.word	0x10624dd3

08014a04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8014a04:	b490      	push	{r4, r7}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014a0c:	4b18      	ldr	r3, [pc, #96]	; (8014a70 <SDMMC_GetCmdResp3+0x6c>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	4a18      	ldr	r2, [pc, #96]	; (8014a74 <SDMMC_GetCmdResp3+0x70>)
 8014a12:	fba2 2303 	umull	r2, r3, r2, r3
 8014a16:	0a5b      	lsrs	r3, r3, #9
 8014a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8014a20:	4623      	mov	r3, r4
 8014a22:	1e5c      	subs	r4, r3, #1
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d102      	bne.n	8014a2e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014a2c:	e01b      	b.n	8014a66 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a32:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d0f0      	beq.n	8014a20 <SDMMC_GetCmdResp3+0x1c>
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d1eb      	bne.n	8014a20 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a4c:	f003 0304 	and.w	r3, r3, #4
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d004      	beq.n	8014a5e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2204      	movs	r2, #4
 8014a58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014a5a:	2304      	movs	r3, #4
 8014a5c:	e003      	b.n	8014a66 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	22c5      	movs	r2, #197	; 0xc5
 8014a62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014a64:	2300      	movs	r3, #0
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bc90      	pop	{r4, r7}
 8014a6e:	4770      	bx	lr
 8014a70:	200000cc 	.word	0x200000cc
 8014a74:	10624dd3 	.word	0x10624dd3

08014a78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014a78:	b590      	push	{r4, r7, lr}
 8014a7a:	b087      	sub	sp, #28
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	460b      	mov	r3, r1
 8014a82:	607a      	str	r2, [r7, #4]
 8014a84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014a86:	4b34      	ldr	r3, [pc, #208]	; (8014b58 <SDMMC_GetCmdResp6+0xe0>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	4a34      	ldr	r2, [pc, #208]	; (8014b5c <SDMMC_GetCmdResp6+0xe4>)
 8014a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8014a90:	0a5b      	lsrs	r3, r3, #9
 8014a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a96:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8014a9a:	4623      	mov	r3, r4
 8014a9c:	1e5c      	subs	r4, r3, #1
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d102      	bne.n	8014aa8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014aa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014aa6:	e052      	b.n	8014b4e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014aac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d0f0      	beq.n	8014a9a <SDMMC_GetCmdResp6+0x22>
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d1eb      	bne.n	8014a9a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ac6:	f003 0304 	and.w	r3, r3, #4
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d004      	beq.n	8014ad8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	2204      	movs	r2, #4
 8014ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014ad4:	2304      	movs	r3, #4
 8014ad6:	e03a      	b.n	8014b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014adc:	f003 0301 	and.w	r3, r3, #1
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d004      	beq.n	8014aee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014aea:	2301      	movs	r3, #1
 8014aec:	e02f      	b.n	8014b4e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8014aee:	68f8      	ldr	r0, [r7, #12]
 8014af0:	f7ff fbae 	bl	8014250 <SDIO_GetCommandResponse>
 8014af4:	4603      	mov	r3, r0
 8014af6:	461a      	mov	r2, r3
 8014af8:	7afb      	ldrb	r3, [r7, #11]
 8014afa:	4293      	cmp	r3, r2
 8014afc:	d001      	beq.n	8014b02 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014afe:	2301      	movs	r3, #1
 8014b00:	e025      	b.n	8014b4e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	22c5      	movs	r2, #197	; 0xc5
 8014b06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8014b08:	2100      	movs	r1, #0
 8014b0a:	68f8      	ldr	r0, [r7, #12]
 8014b0c:	f7ff fbad 	bl	801426a <SDIO_GetResponse>
 8014b10:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d106      	bne.n	8014b2a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	0c1b      	lsrs	r3, r3, #16
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8014b26:	2300      	movs	r3, #0
 8014b28:	e011      	b.n	8014b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d002      	beq.n	8014b3a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014b38:	e009      	b.n	8014b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014b3a:	693b      	ldr	r3, [r7, #16]
 8014b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d002      	beq.n	8014b4a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014b48:	e001      	b.n	8014b4e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	371c      	adds	r7, #28
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd90      	pop	{r4, r7, pc}
 8014b56:	bf00      	nop
 8014b58:	200000cc 	.word	0x200000cc
 8014b5c:	10624dd3 	.word	0x10624dd3

08014b60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8014b60:	b490      	push	{r4, r7}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014b68:	4b21      	ldr	r3, [pc, #132]	; (8014bf0 <SDMMC_GetCmdResp7+0x90>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	4a21      	ldr	r2, [pc, #132]	; (8014bf4 <SDMMC_GetCmdResp7+0x94>)
 8014b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8014b72:	0a5b      	lsrs	r3, r3, #9
 8014b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8014b7c:	4623      	mov	r3, r4
 8014b7e:	1e5c      	subs	r4, r3, #1
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d102      	bne.n	8014b8a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b88:	e02c      	b.n	8014be4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b8e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d0f0      	beq.n	8014b7c <SDMMC_GetCmdResp7+0x1c>
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d1eb      	bne.n	8014b7c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ba8:	f003 0304 	and.w	r3, r3, #4
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d004      	beq.n	8014bba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2204      	movs	r2, #4
 8014bb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014bb6:	2304      	movs	r3, #4
 8014bb8:	e014      	b.n	8014be4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bbe:	f003 0301 	and.w	r3, r3, #1
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d004      	beq.n	8014bd0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	2201      	movs	r2, #1
 8014bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e009      	b.n	8014be4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d002      	beq.n	8014be2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2240      	movs	r2, #64	; 0x40
 8014be0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014be2:	2300      	movs	r3, #0
  
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bc90      	pop	{r4, r7}
 8014bec:	4770      	bx	lr
 8014bee:	bf00      	nop
 8014bf0:	200000cc 	.word	0x200000cc
 8014bf4:	10624dd3 	.word	0x10624dd3

08014bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014bf8:	b084      	sub	sp, #16
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
 8014c02:	f107 001c 	add.w	r0, r7, #28
 8014c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d122      	bne.n	8014c56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	68db      	ldr	r3, [r3, #12]
 8014c20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8014c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	d105      	bne.n	8014c4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f000 fa4e 	bl	80150ec <USB_CoreReset>
 8014c50:	4603      	mov	r3, r0
 8014c52:	73fb      	strb	r3, [r7, #15]
 8014c54:	e01a      	b.n	8014c8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f000 fa42 	bl	80150ec <USB_CoreReset>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d106      	bne.n	8014c80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8014c7e:	e005      	b.n	8014c8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d10b      	bne.n	8014caa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	689b      	ldr	r3, [r3, #8]
 8014c96:	f043 0206 	orr.w	r2, r3, #6
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	689b      	ldr	r3, [r3, #8]
 8014ca2:	f043 0220 	orr.w	r2, r3, #32
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014cb6:	b004      	add	sp, #16
 8014cb8:	4770      	bx	lr

08014cba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cba:	b480      	push	{r7}
 8014cbc:	b083      	sub	sp, #12
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	689b      	ldr	r3, [r3, #8]
 8014cc6:	f023 0201 	bic.w	r2, r3, #1
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014cce:	2300      	movs	r3, #0
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	370c      	adds	r7, #12
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cda:	4770      	bx	lr

08014cdc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b082      	sub	sp, #8
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	460b      	mov	r3, r1
 8014ce6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	68db      	ldr	r3, [r3, #12]
 8014cec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014cf4:	78fb      	ldrb	r3, [r7, #3]
 8014cf6:	2b01      	cmp	r3, #1
 8014cf8:	d106      	bne.n	8014d08 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	68db      	ldr	r3, [r3, #12]
 8014cfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	60da      	str	r2, [r3, #12]
 8014d06:	e00b      	b.n	8014d20 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8014d08:	78fb      	ldrb	r3, [r7, #3]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d106      	bne.n	8014d1c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	60da      	str	r2, [r3, #12]
 8014d1a:	e001      	b.n	8014d20 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	e003      	b.n	8014d28 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8014d20:	2032      	movs	r0, #50	; 0x32
 8014d22:	f7f6 ff0b 	bl	800bb3c <HAL_Delay>

  return HAL_OK;
 8014d26:	2300      	movs	r3, #0
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3708      	adds	r7, #8
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014d30:	b084      	sub	sp, #16
 8014d32:	b580      	push	{r7, lr}
 8014d34:	b086      	sub	sp, #24
 8014d36:	af00      	add	r7, sp, #0
 8014d38:	6078      	str	r0, [r7, #4]
 8014d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014d42:	2300      	movs	r3, #0
 8014d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	613b      	str	r3, [r7, #16]
 8014d4e:	e009      	b.n	8014d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	3340      	adds	r3, #64	; 0x40
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	4413      	add	r3, r2
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	3301      	adds	r3, #1
 8014d62:	613b      	str	r3, [r7, #16]
 8014d64:	693b      	ldr	r3, [r7, #16]
 8014d66:	2b0e      	cmp	r3, #14
 8014d68:	d9f2      	bls.n	8014d50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d11c      	bne.n	8014daa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d7e:	f043 0302 	orr.w	r3, r3, #2
 8014d82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014da0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	639a      	str	r2, [r3, #56]	; 0x38
 8014da8:	e00b      	b.n	8014dc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014dc8:	461a      	mov	r2, r3
 8014dca:	2300      	movs	r3, #0
 8014dcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ddc:	461a      	mov	r2, r3
 8014dde:	680b      	ldr	r3, [r1, #0]
 8014de0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d10c      	bne.n	8014e02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d104      	bne.n	8014df8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014dee:	2100      	movs	r1, #0
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f000 f949 	bl	8015088 <USB_SetDevSpeed>
 8014df6:	e008      	b.n	8014e0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014df8:	2101      	movs	r1, #1
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f000 f944 	bl	8015088 <USB_SetDevSpeed>
 8014e00:	e003      	b.n	8014e0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014e02:	2103      	movs	r1, #3
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f000 f93f 	bl	8015088 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014e0a:	2110      	movs	r1, #16
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f000 f8f3 	bl	8014ff8 <USB_FlushTxFifo>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d001      	beq.n	8014e1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f000 f911 	bl	8015044 <USB_FlushRxFifo>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d001      	beq.n	8014e2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e32:	461a      	mov	r2, r3
 8014e34:	2300      	movs	r3, #0
 8014e36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e3e:	461a      	mov	r2, r3
 8014e40:	2300      	movs	r3, #0
 8014e42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e4a:	461a      	mov	r2, r3
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014e50:	2300      	movs	r3, #0
 8014e52:	613b      	str	r3, [r7, #16]
 8014e54:	e043      	b.n	8014ede <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014e56:	693b      	ldr	r3, [r7, #16]
 8014e58:	015a      	lsls	r2, r3, #5
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	4413      	add	r3, r2
 8014e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e6c:	d118      	bne.n	8014ea0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d10a      	bne.n	8014e8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	015a      	lsls	r2, r3, #5
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	4413      	add	r3, r2
 8014e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e80:	461a      	mov	r2, r3
 8014e82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014e86:	6013      	str	r3, [r2, #0]
 8014e88:	e013      	b.n	8014eb2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014e8a:	693b      	ldr	r3, [r7, #16]
 8014e8c:	015a      	lsls	r2, r3, #5
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	4413      	add	r3, r2
 8014e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e96:	461a      	mov	r2, r3
 8014e98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014e9c:	6013      	str	r3, [r2, #0]
 8014e9e:	e008      	b.n	8014eb2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	015a      	lsls	r2, r3, #5
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eac:	461a      	mov	r2, r3
 8014eae:	2300      	movs	r3, #0
 8014eb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	015a      	lsls	r2, r3, #5
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	4413      	add	r3, r2
 8014eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	015a      	lsls	r2, r3, #5
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	4413      	add	r3, r2
 8014ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014ed6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	3301      	adds	r3, #1
 8014edc:	613b      	str	r3, [r7, #16]
 8014ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee0:	693a      	ldr	r2, [r7, #16]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	d3b7      	bcc.n	8014e56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	613b      	str	r3, [r7, #16]
 8014eea:	e043      	b.n	8014f74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	015a      	lsls	r2, r3, #5
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f02:	d118      	bne.n	8014f36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d10a      	bne.n	8014f20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	015a      	lsls	r2, r3, #5
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	4413      	add	r3, r2
 8014f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f16:	461a      	mov	r2, r3
 8014f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014f1c:	6013      	str	r3, [r2, #0]
 8014f1e:	e013      	b.n	8014f48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	015a      	lsls	r2, r3, #5
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	4413      	add	r3, r2
 8014f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014f32:	6013      	str	r3, [r2, #0]
 8014f34:	e008      	b.n	8014f48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	015a      	lsls	r2, r3, #5
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	4413      	add	r3, r2
 8014f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f42:	461a      	mov	r2, r3
 8014f44:	2300      	movs	r3, #0
 8014f46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	015a      	lsls	r2, r3, #5
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	4413      	add	r3, r2
 8014f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f54:	461a      	mov	r2, r3
 8014f56:	2300      	movs	r3, #0
 8014f58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	015a      	lsls	r2, r3, #5
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	4413      	add	r3, r2
 8014f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f66:	461a      	mov	r2, r3
 8014f68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014f6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	3301      	adds	r3, #1
 8014f72:	613b      	str	r3, [r7, #16]
 8014f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f76:	693a      	ldr	r2, [r7, #16]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d3b7      	bcc.n	8014eec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2200      	movs	r2, #0
 8014f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8014f9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d105      	bne.n	8014fb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	699b      	ldr	r3, [r3, #24]
 8014fa8:	f043 0210 	orr.w	r2, r3, #16
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	699a      	ldr	r2, [r3, #24]
 8014fb4:	4b0f      	ldr	r3, [pc, #60]	; (8014ff4 <USB_DevInit+0x2c4>)
 8014fb6:	4313      	orrs	r3, r2
 8014fb8:	687a      	ldr	r2, [r7, #4]
 8014fba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d005      	beq.n	8014fce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	699b      	ldr	r3, [r3, #24]
 8014fc6:	f043 0208 	orr.w	r2, r3, #8
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fd0:	2b01      	cmp	r3, #1
 8014fd2:	d107      	bne.n	8014fe4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	699b      	ldr	r3, [r3, #24]
 8014fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014fdc:	f043 0304 	orr.w	r3, r3, #4
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3718      	adds	r7, #24
 8014fea:	46bd      	mov	sp, r7
 8014fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014ff0:	b004      	add	sp, #16
 8014ff2:	4770      	bx	lr
 8014ff4:	803c3800 	.word	0x803c3800

08014ff8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b085      	sub	sp, #20
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8015002:	2300      	movs	r3, #0
 8015004:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	019b      	lsls	r3, r3, #6
 801500a:	f043 0220 	orr.w	r2, r3, #32
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	3301      	adds	r3, #1
 8015016:	60fb      	str	r3, [r7, #12]
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	4a09      	ldr	r2, [pc, #36]	; (8015040 <USB_FlushTxFifo+0x48>)
 801501c:	4293      	cmp	r3, r2
 801501e:	d901      	bls.n	8015024 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8015020:	2303      	movs	r3, #3
 8015022:	e006      	b.n	8015032 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	691b      	ldr	r3, [r3, #16]
 8015028:	f003 0320 	and.w	r3, r3, #32
 801502c:	2b20      	cmp	r3, #32
 801502e:	d0f0      	beq.n	8015012 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8015030:	2300      	movs	r3, #0
}
 8015032:	4618      	mov	r0, r3
 8015034:	3714      	adds	r7, #20
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr
 801503e:	bf00      	nop
 8015040:	00030d40 	.word	0x00030d40

08015044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015044:	b480      	push	{r7}
 8015046:	b085      	sub	sp, #20
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801504c:	2300      	movs	r3, #0
 801504e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2210      	movs	r2, #16
 8015054:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	3301      	adds	r3, #1
 801505a:	60fb      	str	r3, [r7, #12]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	4a09      	ldr	r2, [pc, #36]	; (8015084 <USB_FlushRxFifo+0x40>)
 8015060:	4293      	cmp	r3, r2
 8015062:	d901      	bls.n	8015068 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8015064:	2303      	movs	r3, #3
 8015066:	e006      	b.n	8015076 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	691b      	ldr	r3, [r3, #16]
 801506c:	f003 0310 	and.w	r3, r3, #16
 8015070:	2b10      	cmp	r3, #16
 8015072:	d0f0      	beq.n	8015056 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8015074:	2300      	movs	r3, #0
}
 8015076:	4618      	mov	r0, r3
 8015078:	3714      	adds	r7, #20
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr
 8015082:	bf00      	nop
 8015084:	00030d40 	.word	0x00030d40

08015088 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015088:	b480      	push	{r7}
 801508a:	b085      	sub	sp, #20
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	460b      	mov	r3, r1
 8015092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801509e:	681a      	ldr	r2, [r3, #0]
 80150a0:	78fb      	ldrb	r3, [r7, #3]
 80150a2:	68f9      	ldr	r1, [r7, #12]
 80150a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80150a8:	4313      	orrs	r3, r2
 80150aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80150ac:	2300      	movs	r3, #0
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3714      	adds	r7, #20
 80150b2:	46bd      	mov	sp, r7
 80150b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b8:	4770      	bx	lr

080150ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b084      	sub	sp, #16
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	68fa      	ldr	r2, [r7, #12]
 80150d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80150d4:	f043 0302 	orr.w	r3, r3, #2
 80150d8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80150da:	2003      	movs	r0, #3
 80150dc:	f7f6 fd2e 	bl	800bb3c <HAL_Delay>

  return HAL_OK;
 80150e0:	2300      	movs	r3, #0
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3710      	adds	r7, #16
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
	...

080150ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80150ec:	b480      	push	{r7}
 80150ee:	b085      	sub	sp, #20
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80150f4:	2300      	movs	r3, #0
 80150f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	3301      	adds	r3, #1
 80150fc:	60fb      	str	r3, [r7, #12]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	4a13      	ldr	r2, [pc, #76]	; (8015150 <USB_CoreReset+0x64>)
 8015102:	4293      	cmp	r3, r2
 8015104:	d901      	bls.n	801510a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015106:	2303      	movs	r3, #3
 8015108:	e01b      	b.n	8015142 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	691b      	ldr	r3, [r3, #16]
 801510e:	2b00      	cmp	r3, #0
 8015110:	daf2      	bge.n	80150f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015112:	2300      	movs	r3, #0
 8015114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	691b      	ldr	r3, [r3, #16]
 801511a:	f043 0201 	orr.w	r2, r3, #1
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	3301      	adds	r3, #1
 8015126:	60fb      	str	r3, [r7, #12]
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	4a09      	ldr	r2, [pc, #36]	; (8015150 <USB_CoreReset+0x64>)
 801512c:	4293      	cmp	r3, r2
 801512e:	d901      	bls.n	8015134 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015130:	2303      	movs	r3, #3
 8015132:	e006      	b.n	8015142 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	691b      	ldr	r3, [r3, #16]
 8015138:	f003 0301 	and.w	r3, r3, #1
 801513c:	2b01      	cmp	r3, #1
 801513e:	d0f0      	beq.n	8015122 <USB_CoreReset+0x36>

  return HAL_OK;
 8015140:	2300      	movs	r3, #0
}
 8015142:	4618      	mov	r0, r3
 8015144:	3714      	adds	r7, #20
 8015146:	46bd      	mov	sp, r7
 8015148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop
 8015150:	00030d40 	.word	0x00030d40

08015154 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015158:	4904      	ldr	r1, [pc, #16]	; (801516c <MX_FATFS_Init+0x18>)
 801515a:	4805      	ldr	r0, [pc, #20]	; (8015170 <MX_FATFS_Init+0x1c>)
 801515c:	f002 fda6 	bl	8017cac <FATFS_LinkDriver>
 8015160:	4603      	mov	r3, r0
 8015162:	461a      	mov	r2, r3
 8015164:	4b03      	ldr	r3, [pc, #12]	; (8015174 <MX_FATFS_Init+0x20>)
 8015166:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8015168:	bf00      	nop
 801516a:	bd80      	pop	{r7, pc}
 801516c:	2000d178 	.word	0x2000d178
 8015170:	080226d8 	.word	0x080226d8
 8015174:	2000d174 	.word	0x2000d174

08015178 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8015178:	b480      	push	{r7}
 801517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801517c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801517e:	4618      	mov	r0, r3
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr

08015188 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801518e:	2300      	movs	r3, #0
 8015190:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8015192:	f000 f896 	bl	80152c2 <BSP_SD_IsDetected>
 8015196:	4603      	mov	r3, r0
 8015198:	2b01      	cmp	r3, #1
 801519a:	d001      	beq.n	80151a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801519c:	2301      	movs	r3, #1
 801519e:	e012      	b.n	80151c6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80151a0:	480b      	ldr	r0, [pc, #44]	; (80151d0 <BSP_SD_Init+0x48>)
 80151a2:	f7fb fac5 	bl	8010730 <HAL_SD_Init>
 80151a6:	4603      	mov	r3, r0
 80151a8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80151aa:	79fb      	ldrb	r3, [r7, #7]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d109      	bne.n	80151c4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80151b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80151b4:	4806      	ldr	r0, [pc, #24]	; (80151d0 <BSP_SD_Init+0x48>)
 80151b6:	f7fc f885 	bl	80112c4 <HAL_SD_ConfigWideBusOperation>
 80151ba:	4603      	mov	r3, r0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d001      	beq.n	80151c4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80151c0:	2301      	movs	r3, #1
 80151c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80151c4:	79fb      	ldrb	r3, [r7, #7]
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3708      	adds	r7, #8
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	bf00      	nop
 80151d0:	2000c88c 	.word	0x2000c88c

080151d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80151e0:	2300      	movs	r3, #0
 80151e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	68ba      	ldr	r2, [r7, #8]
 80151e8:	68f9      	ldr	r1, [r7, #12]
 80151ea:	4806      	ldr	r0, [pc, #24]	; (8015204 <BSP_SD_ReadBlocks_DMA+0x30>)
 80151ec:	f7fb fb30 	bl	8010850 <HAL_SD_ReadBlocks_DMA>
 80151f0:	4603      	mov	r3, r0
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d001      	beq.n	80151fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80151f6:	2301      	movs	r3, #1
 80151f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80151fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3718      	adds	r7, #24
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	2000c88c 	.word	0x2000c88c

08015208 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b086      	sub	sp, #24
 801520c:	af00      	add	r7, sp, #0
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015214:	2300      	movs	r3, #0
 8015216:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	68ba      	ldr	r2, [r7, #8]
 801521c:	68f9      	ldr	r1, [r7, #12]
 801521e:	4806      	ldr	r0, [pc, #24]	; (8015238 <BSP_SD_WriteBlocks_DMA+0x30>)
 8015220:	f7fb fc00 	bl	8010a24 <HAL_SD_WriteBlocks_DMA>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d001      	beq.n	801522e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801522a:	2301      	movs	r3, #1
 801522c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801522e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015230:	4618      	mov	r0, r3
 8015232:	3718      	adds	r7, #24
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	2000c88c 	.word	0x2000c88c

0801523c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015240:	4805      	ldr	r0, [pc, #20]	; (8015258 <BSP_SD_GetCardState+0x1c>)
 8015242:	f7fc f8bb 	bl	80113bc <HAL_SD_GetCardState>
 8015246:	4603      	mov	r3, r0
 8015248:	2b04      	cmp	r3, #4
 801524a:	bf14      	ite	ne
 801524c:	2301      	movne	r3, #1
 801524e:	2300      	moveq	r3, #0
 8015250:	b2db      	uxtb	r3, r3
}
 8015252:	4618      	mov	r0, r3
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	2000c88c 	.word	0x2000c88c

0801525c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8015264:	6879      	ldr	r1, [r7, #4]
 8015266:	4803      	ldr	r0, [pc, #12]	; (8015274 <BSP_SD_GetCardInfo+0x18>)
 8015268:	f7fc f800 	bl	801126c <HAL_SD_GetCardInfo>
}
 801526c:	bf00      	nop
 801526e:	3708      	adds	r7, #8
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	2000c88c 	.word	0x2000c88c

08015278 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8015280:	f000 f818 	bl	80152b4 <BSP_SD_AbortCallback>
}
 8015284:	bf00      	nop
 8015286:	3708      	adds	r7, #8
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}

0801528c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b082      	sub	sp, #8
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015294:	f000 f9b4 	bl	8015600 <BSP_SD_WriteCpltCallback>
}
 8015298:	bf00      	nop
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}

080152a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80152a8:	f000 f9bc 	bl	8015624 <BSP_SD_ReadCpltCallback>
}
 80152ac:	bf00      	nop
 80152ae:	3708      	adds	r7, #8
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd80      	pop	{r7, pc}

080152b4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80152b4:	b480      	push	{r7}
 80152b6:	af00      	add	r7, sp, #0

}
 80152b8:	bf00      	nop
 80152ba:	46bd      	mov	sp, r7
 80152bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c0:	4770      	bx	lr

080152c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80152c2:	b580      	push	{r7, lr}
 80152c4:	b082      	sub	sp, #8
 80152c6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80152c8:	2301      	movs	r3, #1
 80152ca:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80152cc:	f000 f80c 	bl	80152e8 <BSP_PlatformIsDetected>
 80152d0:	4603      	mov	r3, r0
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d101      	bne.n	80152da <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80152d6:	2300      	movs	r3, #0
 80152d8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80152da:	79fb      	ldrb	r3, [r7, #7]
 80152dc:	b2db      	uxtb	r3, r3
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3708      	adds	r7, #8
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}
	...

080152e8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80152ee:	2301      	movs	r3, #1
 80152f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80152f2:	2108      	movs	r1, #8
 80152f4:	4806      	ldr	r0, [pc, #24]	; (8015310 <BSP_PlatformIsDetected+0x28>)
 80152f6:	f7f7 fceb 	bl	800ccd0 <HAL_GPIO_ReadPin>
 80152fa:	4603      	mov	r3, r0
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d001      	beq.n	8015304 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8015300:	2300      	movs	r3, #0
 8015302:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8015304:	79fb      	ldrb	r3, [r7, #7]
}
 8015306:	4618      	mov	r0, r3
 8015308:	3708      	adds	r7, #8
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	40021800 	.word	0x40021800

08015314 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b084      	sub	sp, #16
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 801531c:	f002 fdb0 	bl	8017e80 <osKernelGetTickCount>
 8015320:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8015322:	e006      	b.n	8015332 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015324:	f7ff ff8a 	bl	801523c <BSP_SD_GetCardState>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d101      	bne.n	8015332 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801532e:	2300      	movs	r3, #0
 8015330:	e009      	b.n	8015346 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8015332:	f002 fda5 	bl	8017e80 <osKernelGetTickCount>
 8015336:	4602      	mov	r2, r0
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	1ad3      	subs	r3, r2, r3
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	429a      	cmp	r2, r3
 8015340:	d8f0      	bhi.n	8015324 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015346:	4618      	mov	r0, r3
 8015348:	3710      	adds	r7, #16
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
	...

08015350 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	4603      	mov	r3, r0
 8015358:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801535a:	4b0b      	ldr	r3, [pc, #44]	; (8015388 <SD_CheckStatus+0x38>)
 801535c:	2201      	movs	r2, #1
 801535e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015360:	f7ff ff6c 	bl	801523c <BSP_SD_GetCardState>
 8015364:	4603      	mov	r3, r0
 8015366:	2b00      	cmp	r3, #0
 8015368:	d107      	bne.n	801537a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801536a:	4b07      	ldr	r3, [pc, #28]	; (8015388 <SD_CheckStatus+0x38>)
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	b2db      	uxtb	r3, r3
 8015370:	f023 0301 	bic.w	r3, r3, #1
 8015374:	b2da      	uxtb	r2, r3
 8015376:	4b04      	ldr	r3, [pc, #16]	; (8015388 <SD_CheckStatus+0x38>)
 8015378:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801537a:	4b03      	ldr	r3, [pc, #12]	; (8015388 <SD_CheckStatus+0x38>)
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	b2db      	uxtb	r3, r3
}
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	200000d5 	.word	0x200000d5

0801538c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	4603      	mov	r3, r0
 8015394:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8015396:	4b1c      	ldr	r3, [pc, #112]	; (8015408 <SD_initialize+0x7c>)
 8015398:	2201      	movs	r2, #1
 801539a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801539c:	f002 fd18 	bl	8017dd0 <osKernelGetState>
 80153a0:	4603      	mov	r3, r0
 80153a2:	2b02      	cmp	r3, #2
 80153a4:	d129      	bne.n	80153fa <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80153a6:	f7ff feef 	bl	8015188 <BSP_SD_Init>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d107      	bne.n	80153c0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80153b0:	79fb      	ldrb	r3, [r7, #7]
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7ff ffcc 	bl	8015350 <SD_CheckStatus>
 80153b8:	4603      	mov	r3, r0
 80153ba:	461a      	mov	r2, r3
 80153bc:	4b12      	ldr	r3, [pc, #72]	; (8015408 <SD_initialize+0x7c>)
 80153be:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80153c0:	4b11      	ldr	r3, [pc, #68]	; (8015408 <SD_initialize+0x7c>)
 80153c2:	781b      	ldrb	r3, [r3, #0]
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	2b01      	cmp	r3, #1
 80153c8:	d017      	beq.n	80153fa <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80153ca:	4b10      	ldr	r3, [pc, #64]	; (801540c <SD_initialize+0x80>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d107      	bne.n	80153e2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80153d2:	2200      	movs	r2, #0
 80153d4:	2102      	movs	r1, #2
 80153d6:	200a      	movs	r0, #10
 80153d8:	f003 f916 	bl	8018608 <osMessageQueueNew>
 80153dc:	4602      	mov	r2, r0
 80153de:	4b0b      	ldr	r3, [pc, #44]	; (801540c <SD_initialize+0x80>)
 80153e0:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 80153e2:	4b0a      	ldr	r3, [pc, #40]	; (801540c <SD_initialize+0x80>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d107      	bne.n	80153fa <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80153ea:	4b07      	ldr	r3, [pc, #28]	; (8015408 <SD_initialize+0x7c>)
 80153ec:	781b      	ldrb	r3, [r3, #0]
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	f043 0301 	orr.w	r3, r3, #1
 80153f4:	b2da      	uxtb	r2, r3
 80153f6:	4b04      	ldr	r3, [pc, #16]	; (8015408 <SD_initialize+0x7c>)
 80153f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80153fa:	4b03      	ldr	r3, [pc, #12]	; (8015408 <SD_initialize+0x7c>)
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	b2db      	uxtb	r3, r3
}
 8015400:	4618      	mov	r0, r3
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	200000d5 	.word	0x200000d5
 801540c:	20000b70 	.word	0x20000b70

08015410 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b082      	sub	sp, #8
 8015414:	af00      	add	r7, sp, #0
 8015416:	4603      	mov	r3, r0
 8015418:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801541a:	79fb      	ldrb	r3, [r7, #7]
 801541c:	4618      	mov	r0, r3
 801541e:	f7ff ff97 	bl	8015350 <SD_CheckStatus>
 8015422:	4603      	mov	r3, r0
}
 8015424:	4618      	mov	r0, r3
 8015426:	3708      	adds	r7, #8
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}

0801542c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b088      	sub	sp, #32
 8015430:	af00      	add	r7, sp, #0
 8015432:	60b9      	str	r1, [r7, #8]
 8015434:	607a      	str	r2, [r7, #4]
 8015436:	603b      	str	r3, [r7, #0]
 8015438:	4603      	mov	r3, r0
 801543a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801543c:	2301      	movs	r3, #1
 801543e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015440:	f247 5030 	movw	r0, #30000	; 0x7530
 8015444:	f7ff ff66 	bl	8015314 <SD_CheckStatusWithTimeout>
 8015448:	4603      	mov	r3, r0
 801544a:	2b00      	cmp	r3, #0
 801544c:	da01      	bge.n	8015452 <SD_read+0x26>
  {
    return res;
 801544e:	7ffb      	ldrb	r3, [r7, #31]
 8015450:	e02f      	b.n	80154b2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8015452:	683a      	ldr	r2, [r7, #0]
 8015454:	6879      	ldr	r1, [r7, #4]
 8015456:	68b8      	ldr	r0, [r7, #8]
 8015458:	f7ff febc 	bl	80151d4 <BSP_SD_ReadBlocks_DMA>
 801545c:	4603      	mov	r3, r0
 801545e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8015460:	7fbb      	ldrb	r3, [r7, #30]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d124      	bne.n	80154b0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8015466:	4b15      	ldr	r3, [pc, #84]	; (80154bc <SD_read+0x90>)
 8015468:	6818      	ldr	r0, [r3, #0]
 801546a:	f107 0112 	add.w	r1, r7, #18
 801546e:	f247 5330 	movw	r3, #30000	; 0x7530
 8015472:	2200      	movs	r2, #0
 8015474:	f003 f9c2 	bl	80187fc <osMessageQueueGet>
 8015478:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d117      	bne.n	80154b0 <SD_read+0x84>
 8015480:	8a7b      	ldrh	r3, [r7, #18]
 8015482:	2b01      	cmp	r3, #1
 8015484:	d114      	bne.n	80154b0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8015486:	f002 fcfb 	bl	8017e80 <osKernelGetTickCount>
 801548a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801548c:	e007      	b.n	801549e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801548e:	f7ff fed5 	bl	801523c <BSP_SD_GetCardState>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	d102      	bne.n	801549e <SD_read+0x72>
              {
                res = RES_OK;
 8015498:	2300      	movs	r3, #0
 801549a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801549c:	e008      	b.n	80154b0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801549e:	f002 fcef 	bl	8017e80 <osKernelGetTickCount>
 80154a2:	4602      	mov	r2, r0
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	1ad3      	subs	r3, r2, r3
 80154a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80154ac:	4293      	cmp	r3, r2
 80154ae:	d9ee      	bls.n	801548e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80154b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	3720      	adds	r7, #32
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	20000b70 	.word	0x20000b70

080154c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b088      	sub	sp, #32
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60b9      	str	r1, [r7, #8]
 80154c8:	607a      	str	r2, [r7, #4]
 80154ca:	603b      	str	r3, [r7, #0]
 80154cc:	4603      	mov	r3, r0
 80154ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80154d0:	2301      	movs	r3, #1
 80154d2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80154d4:	f247 5030 	movw	r0, #30000	; 0x7530
 80154d8:	f7ff ff1c 	bl	8015314 <SD_CheckStatusWithTimeout>
 80154dc:	4603      	mov	r3, r0
 80154de:	2b00      	cmp	r3, #0
 80154e0:	da01      	bge.n	80154e6 <SD_write+0x26>
  {
    return res;
 80154e2:	7ffb      	ldrb	r3, [r7, #31]
 80154e4:	e02d      	b.n	8015542 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	6879      	ldr	r1, [r7, #4]
 80154ea:	68b8      	ldr	r0, [r7, #8]
 80154ec:	f7ff fe8c 	bl	8015208 <BSP_SD_WriteBlocks_DMA>
 80154f0:	4603      	mov	r3, r0
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d124      	bne.n	8015540 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80154f6:	4b15      	ldr	r3, [pc, #84]	; (801554c <SD_write+0x8c>)
 80154f8:	6818      	ldr	r0, [r3, #0]
 80154fa:	f107 0112 	add.w	r1, r7, #18
 80154fe:	f247 5330 	movw	r3, #30000	; 0x7530
 8015502:	2200      	movs	r2, #0
 8015504:	f003 f97a 	bl	80187fc <osMessageQueueGet>
 8015508:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d117      	bne.n	8015540 <SD_write+0x80>
 8015510:	8a7b      	ldrh	r3, [r7, #18]
 8015512:	2b02      	cmp	r3, #2
 8015514:	d114      	bne.n	8015540 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8015516:	f002 fcb3 	bl	8017e80 <osKernelGetTickCount>
 801551a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801551c:	e007      	b.n	801552e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801551e:	f7ff fe8d 	bl	801523c <BSP_SD_GetCardState>
 8015522:	4603      	mov	r3, r0
 8015524:	2b00      	cmp	r3, #0
 8015526:	d102      	bne.n	801552e <SD_write+0x6e>
          {
            res = RES_OK;
 8015528:	2300      	movs	r3, #0
 801552a:	77fb      	strb	r3, [r7, #31]
            break;
 801552c:	e008      	b.n	8015540 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801552e:	f002 fca7 	bl	8017e80 <osKernelGetTickCount>
 8015532:	4602      	mov	r2, r0
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	f247 522f 	movw	r2, #29999	; 0x752f
 801553c:	4293      	cmp	r3, r2
 801553e:	d9ee      	bls.n	801551e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8015540:	7ffb      	ldrb	r3, [r7, #31]
}
 8015542:	4618      	mov	r0, r3
 8015544:	3720      	adds	r7, #32
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	20000b70 	.word	0x20000b70

08015550 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b08c      	sub	sp, #48	; 0x30
 8015554:	af00      	add	r7, sp, #0
 8015556:	4603      	mov	r3, r0
 8015558:	603a      	str	r2, [r7, #0]
 801555a:	71fb      	strb	r3, [r7, #7]
 801555c:	460b      	mov	r3, r1
 801555e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015560:	2301      	movs	r3, #1
 8015562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015566:	4b25      	ldr	r3, [pc, #148]	; (80155fc <SD_ioctl+0xac>)
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	b2db      	uxtb	r3, r3
 801556c:	f003 0301 	and.w	r3, r3, #1
 8015570:	2b00      	cmp	r3, #0
 8015572:	d001      	beq.n	8015578 <SD_ioctl+0x28>
 8015574:	2303      	movs	r3, #3
 8015576:	e03c      	b.n	80155f2 <SD_ioctl+0xa2>

  switch (cmd)
 8015578:	79bb      	ldrb	r3, [r7, #6]
 801557a:	2b03      	cmp	r3, #3
 801557c:	d834      	bhi.n	80155e8 <SD_ioctl+0x98>
 801557e:	a201      	add	r2, pc, #4	; (adr r2, 8015584 <SD_ioctl+0x34>)
 8015580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015584:	08015595 	.word	0x08015595
 8015588:	0801559d 	.word	0x0801559d
 801558c:	080155b5 	.word	0x080155b5
 8015590:	080155cf 	.word	0x080155cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015594:	2300      	movs	r3, #0
 8015596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801559a:	e028      	b.n	80155ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801559c:	f107 030c 	add.w	r3, r7, #12
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff fe5b 	bl	801525c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80155a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80155ac:	2300      	movs	r3, #0
 80155ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80155b2:	e01c      	b.n	80155ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80155b4:	f107 030c 	add.w	r3, r7, #12
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7ff fe4f 	bl	801525c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80155be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80155c6:	2300      	movs	r3, #0
 80155c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80155cc:	e00f      	b.n	80155ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80155ce:	f107 030c 	add.w	r3, r7, #12
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7ff fe42 	bl	801525c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80155d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155da:	0a5a      	lsrs	r2, r3, #9
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80155e0:	2300      	movs	r3, #0
 80155e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80155e6:	e002      	b.n	80155ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80155e8:	2304      	movs	r3, #4
 80155ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80155ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3730      	adds	r7, #48	; 0x30
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	200000d5 	.word	0x200000d5

08015600 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8015606:	2302      	movs	r3, #2
 8015608:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801560a:	4b05      	ldr	r3, [pc, #20]	; (8015620 <BSP_SD_WriteCpltCallback+0x20>)
 801560c:	6818      	ldr	r0, [r3, #0]
 801560e:	1db9      	adds	r1, r7, #6
 8015610:	2300      	movs	r3, #0
 8015612:	2200      	movs	r2, #0
 8015614:	f003 f87e 	bl	8018714 <osMessageQueuePut>
#endif
}
 8015618:	bf00      	nop
 801561a:	3708      	adds	r7, #8
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}
 8015620:	20000b70 	.word	0x20000b70

08015624 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b082      	sub	sp, #8
 8015628:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801562a:	2301      	movs	r3, #1
 801562c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801562e:	4b05      	ldr	r3, [pc, #20]	; (8015644 <BSP_SD_ReadCpltCallback+0x20>)
 8015630:	6818      	ldr	r0, [r3, #0]
 8015632:	1db9      	adds	r1, r7, #6
 8015634:	2300      	movs	r3, #0
 8015636:	2200      	movs	r2, #0
 8015638:	f003 f86c 	bl	8018714 <osMessageQueuePut>
#endif
}
 801563c:	bf00      	nop
 801563e:	3708      	adds	r7, #8
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}
 8015644:	20000b70 	.word	0x20000b70

08015648 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b084      	sub	sp, #16
 801564c:	af00      	add	r7, sp, #0
 801564e:	4603      	mov	r3, r0
 8015650:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8015652:	79fb      	ldrb	r3, [r7, #7]
 8015654:	4a08      	ldr	r2, [pc, #32]	; (8015678 <disk_status+0x30>)
 8015656:	009b      	lsls	r3, r3, #2
 8015658:	4413      	add	r3, r2
 801565a:	685b      	ldr	r3, [r3, #4]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	79fa      	ldrb	r2, [r7, #7]
 8015660:	4905      	ldr	r1, [pc, #20]	; (8015678 <disk_status+0x30>)
 8015662:	440a      	add	r2, r1
 8015664:	7a12      	ldrb	r2, [r2, #8]
 8015666:	4610      	mov	r0, r2
 8015668:	4798      	blx	r3
 801566a:	4603      	mov	r3, r0
 801566c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801566e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015670:	4618      	mov	r0, r3
 8015672:	3710      	adds	r7, #16
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	20000b9c 	.word	0x20000b9c

0801567c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	4603      	mov	r3, r0
 8015684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015686:	2300      	movs	r3, #0
 8015688:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801568a:	79fb      	ldrb	r3, [r7, #7]
 801568c:	4a0d      	ldr	r2, [pc, #52]	; (80156c4 <disk_initialize+0x48>)
 801568e:	5cd3      	ldrb	r3, [r2, r3]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d111      	bne.n	80156b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015694:	79fb      	ldrb	r3, [r7, #7]
 8015696:	4a0b      	ldr	r2, [pc, #44]	; (80156c4 <disk_initialize+0x48>)
 8015698:	2101      	movs	r1, #1
 801569a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801569c:	79fb      	ldrb	r3, [r7, #7]
 801569e:	4a09      	ldr	r2, [pc, #36]	; (80156c4 <disk_initialize+0x48>)
 80156a0:	009b      	lsls	r3, r3, #2
 80156a2:	4413      	add	r3, r2
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	79fa      	ldrb	r2, [r7, #7]
 80156aa:	4906      	ldr	r1, [pc, #24]	; (80156c4 <disk_initialize+0x48>)
 80156ac:	440a      	add	r2, r1
 80156ae:	7a12      	ldrb	r2, [r2, #8]
 80156b0:	4610      	mov	r0, r2
 80156b2:	4798      	blx	r3
 80156b4:	4603      	mov	r3, r0
 80156b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80156b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3710      	adds	r7, #16
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	bf00      	nop
 80156c4:	20000b9c 	.word	0x20000b9c

080156c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80156c8:	b590      	push	{r4, r7, lr}
 80156ca:	b087      	sub	sp, #28
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	60b9      	str	r1, [r7, #8]
 80156d0:	607a      	str	r2, [r7, #4]
 80156d2:	603b      	str	r3, [r7, #0]
 80156d4:	4603      	mov	r3, r0
 80156d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80156d8:	7bfb      	ldrb	r3, [r7, #15]
 80156da:	4a0a      	ldr	r2, [pc, #40]	; (8015704 <disk_read+0x3c>)
 80156dc:	009b      	lsls	r3, r3, #2
 80156de:	4413      	add	r3, r2
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	689c      	ldr	r4, [r3, #8]
 80156e4:	7bfb      	ldrb	r3, [r7, #15]
 80156e6:	4a07      	ldr	r2, [pc, #28]	; (8015704 <disk_read+0x3c>)
 80156e8:	4413      	add	r3, r2
 80156ea:	7a18      	ldrb	r0, [r3, #8]
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	68b9      	ldr	r1, [r7, #8]
 80156f2:	47a0      	blx	r4
 80156f4:	4603      	mov	r3, r0
 80156f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80156f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	371c      	adds	r7, #28
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd90      	pop	{r4, r7, pc}
 8015702:	bf00      	nop
 8015704:	20000b9c 	.word	0x20000b9c

08015708 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015708:	b590      	push	{r4, r7, lr}
 801570a:	b087      	sub	sp, #28
 801570c:	af00      	add	r7, sp, #0
 801570e:	60b9      	str	r1, [r7, #8]
 8015710:	607a      	str	r2, [r7, #4]
 8015712:	603b      	str	r3, [r7, #0]
 8015714:	4603      	mov	r3, r0
 8015716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015718:	7bfb      	ldrb	r3, [r7, #15]
 801571a:	4a0a      	ldr	r2, [pc, #40]	; (8015744 <disk_write+0x3c>)
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	4413      	add	r3, r2
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	68dc      	ldr	r4, [r3, #12]
 8015724:	7bfb      	ldrb	r3, [r7, #15]
 8015726:	4a07      	ldr	r2, [pc, #28]	; (8015744 <disk_write+0x3c>)
 8015728:	4413      	add	r3, r2
 801572a:	7a18      	ldrb	r0, [r3, #8]
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	687a      	ldr	r2, [r7, #4]
 8015730:	68b9      	ldr	r1, [r7, #8]
 8015732:	47a0      	blx	r4
 8015734:	4603      	mov	r3, r0
 8015736:	75fb      	strb	r3, [r7, #23]
  return res;
 8015738:	7dfb      	ldrb	r3, [r7, #23]
}
 801573a:	4618      	mov	r0, r3
 801573c:	371c      	adds	r7, #28
 801573e:	46bd      	mov	sp, r7
 8015740:	bd90      	pop	{r4, r7, pc}
 8015742:	bf00      	nop
 8015744:	20000b9c 	.word	0x20000b9c

08015748 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b084      	sub	sp, #16
 801574c:	af00      	add	r7, sp, #0
 801574e:	4603      	mov	r3, r0
 8015750:	603a      	str	r2, [r7, #0]
 8015752:	71fb      	strb	r3, [r7, #7]
 8015754:	460b      	mov	r3, r1
 8015756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015758:	79fb      	ldrb	r3, [r7, #7]
 801575a:	4a09      	ldr	r2, [pc, #36]	; (8015780 <disk_ioctl+0x38>)
 801575c:	009b      	lsls	r3, r3, #2
 801575e:	4413      	add	r3, r2
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	691b      	ldr	r3, [r3, #16]
 8015764:	79fa      	ldrb	r2, [r7, #7]
 8015766:	4906      	ldr	r1, [pc, #24]	; (8015780 <disk_ioctl+0x38>)
 8015768:	440a      	add	r2, r1
 801576a:	7a10      	ldrb	r0, [r2, #8]
 801576c:	79b9      	ldrb	r1, [r7, #6]
 801576e:	683a      	ldr	r2, [r7, #0]
 8015770:	4798      	blx	r3
 8015772:	4603      	mov	r3, r0
 8015774:	73fb      	strb	r3, [r7, #15]
  return res;
 8015776:	7bfb      	ldrb	r3, [r7, #15]
}
 8015778:	4618      	mov	r0, r3
 801577a:	3710      	adds	r7, #16
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	20000b9c 	.word	0x20000b9c

08015784 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015784:	b480      	push	{r7}
 8015786:	b085      	sub	sp, #20
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	3301      	adds	r3, #1
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015794:	89fb      	ldrh	r3, [r7, #14]
 8015796:	021b      	lsls	r3, r3, #8
 8015798:	b21a      	sxth	r2, r3
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	b21b      	sxth	r3, r3
 80157a0:	4313      	orrs	r3, r2
 80157a2:	b21b      	sxth	r3, r3
 80157a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80157a6:	89fb      	ldrh	r3, [r7, #14]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3714      	adds	r7, #20
 80157ac:	46bd      	mov	sp, r7
 80157ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b2:	4770      	bx	lr

080157b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80157b4:	b480      	push	{r7}
 80157b6:	b085      	sub	sp, #20
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	3303      	adds	r3, #3
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	021b      	lsls	r3, r3, #8
 80157c8:	687a      	ldr	r2, [r7, #4]
 80157ca:	3202      	adds	r2, #2
 80157cc:	7812      	ldrb	r2, [r2, #0]
 80157ce:	4313      	orrs	r3, r2
 80157d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	021b      	lsls	r3, r3, #8
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	3201      	adds	r2, #1
 80157da:	7812      	ldrb	r2, [r2, #0]
 80157dc:	4313      	orrs	r3, r2
 80157de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	021b      	lsls	r3, r3, #8
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	7812      	ldrb	r2, [r2, #0]
 80157e8:	4313      	orrs	r3, r2
 80157ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80157ec:	68fb      	ldr	r3, [r7, #12]
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3714      	adds	r7, #20
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80157fa:	b480      	push	{r7}
 80157fc:	b083      	sub	sp, #12
 80157fe:	af00      	add	r7, sp, #0
 8015800:	6078      	str	r0, [r7, #4]
 8015802:	460b      	mov	r3, r1
 8015804:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	1c5a      	adds	r2, r3, #1
 801580a:	607a      	str	r2, [r7, #4]
 801580c:	887a      	ldrh	r2, [r7, #2]
 801580e:	b2d2      	uxtb	r2, r2
 8015810:	701a      	strb	r2, [r3, #0]
 8015812:	887b      	ldrh	r3, [r7, #2]
 8015814:	0a1b      	lsrs	r3, r3, #8
 8015816:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	1c5a      	adds	r2, r3, #1
 801581c:	607a      	str	r2, [r7, #4]
 801581e:	887a      	ldrh	r2, [r7, #2]
 8015820:	b2d2      	uxtb	r2, r2
 8015822:	701a      	strb	r2, [r3, #0]
}
 8015824:	bf00      	nop
 8015826:	370c      	adds	r7, #12
 8015828:	46bd      	mov	sp, r7
 801582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582e:	4770      	bx	lr

08015830 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	1c5a      	adds	r2, r3, #1
 801583e:	607a      	str	r2, [r7, #4]
 8015840:	683a      	ldr	r2, [r7, #0]
 8015842:	b2d2      	uxtb	r2, r2
 8015844:	701a      	strb	r2, [r3, #0]
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	0a1b      	lsrs	r3, r3, #8
 801584a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	1c5a      	adds	r2, r3, #1
 8015850:	607a      	str	r2, [r7, #4]
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	b2d2      	uxtb	r2, r2
 8015856:	701a      	strb	r2, [r3, #0]
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	0a1b      	lsrs	r3, r3, #8
 801585c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	1c5a      	adds	r2, r3, #1
 8015862:	607a      	str	r2, [r7, #4]
 8015864:	683a      	ldr	r2, [r7, #0]
 8015866:	b2d2      	uxtb	r2, r2
 8015868:	701a      	strb	r2, [r3, #0]
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	0a1b      	lsrs	r3, r3, #8
 801586e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	1c5a      	adds	r2, r3, #1
 8015874:	607a      	str	r2, [r7, #4]
 8015876:	683a      	ldr	r2, [r7, #0]
 8015878:	b2d2      	uxtb	r2, r2
 801587a:	701a      	strb	r2, [r3, #0]
}
 801587c:	bf00      	nop
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr

08015888 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015888:	b480      	push	{r7}
 801588a:	b087      	sub	sp, #28
 801588c:	af00      	add	r7, sp, #0
 801588e:	60f8      	str	r0, [r7, #12]
 8015890:	60b9      	str	r1, [r7, #8]
 8015892:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d00d      	beq.n	80158be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80158a2:	693a      	ldr	r2, [r7, #16]
 80158a4:	1c53      	adds	r3, r2, #1
 80158a6:	613b      	str	r3, [r7, #16]
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	1c59      	adds	r1, r3, #1
 80158ac:	6179      	str	r1, [r7, #20]
 80158ae:	7812      	ldrb	r2, [r2, #0]
 80158b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	3b01      	subs	r3, #1
 80158b6:	607b      	str	r3, [r7, #4]
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d1f1      	bne.n	80158a2 <mem_cpy+0x1a>
	}
}
 80158be:	bf00      	nop
 80158c0:	371c      	adds	r7, #28
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr

080158ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80158ca:	b480      	push	{r7}
 80158cc:	b087      	sub	sp, #28
 80158ce:	af00      	add	r7, sp, #0
 80158d0:	60f8      	str	r0, [r7, #12]
 80158d2:	60b9      	str	r1, [r7, #8]
 80158d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	1c5a      	adds	r2, r3, #1
 80158de:	617a      	str	r2, [r7, #20]
 80158e0:	68ba      	ldr	r2, [r7, #8]
 80158e2:	b2d2      	uxtb	r2, r2
 80158e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	3b01      	subs	r3, #1
 80158ea:	607b      	str	r3, [r7, #4]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d1f3      	bne.n	80158da <mem_set+0x10>
}
 80158f2:	bf00      	nop
 80158f4:	371c      	adds	r7, #28
 80158f6:	46bd      	mov	sp, r7
 80158f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fc:	4770      	bx	lr

080158fe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80158fe:	b480      	push	{r7}
 8015900:	b089      	sub	sp, #36	; 0x24
 8015902:	af00      	add	r7, sp, #0
 8015904:	60f8      	str	r0, [r7, #12]
 8015906:	60b9      	str	r1, [r7, #8]
 8015908:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	61fb      	str	r3, [r7, #28]
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015912:	2300      	movs	r3, #0
 8015914:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	1c5a      	adds	r2, r3, #1
 801591a:	61fa      	str	r2, [r7, #28]
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	4619      	mov	r1, r3
 8015920:	69bb      	ldr	r3, [r7, #24]
 8015922:	1c5a      	adds	r2, r3, #1
 8015924:	61ba      	str	r2, [r7, #24]
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	1acb      	subs	r3, r1, r3
 801592a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	3b01      	subs	r3, #1
 8015930:	607b      	str	r3, [r7, #4]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d002      	beq.n	801593e <mem_cmp+0x40>
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d0eb      	beq.n	8015916 <mem_cmp+0x18>

	return r;
 801593e:	697b      	ldr	r3, [r7, #20]
}
 8015940:	4618      	mov	r0, r3
 8015942:	3724      	adds	r7, #36	; 0x24
 8015944:	46bd      	mov	sp, r7
 8015946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594a:	4770      	bx	lr

0801594c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015956:	e002      	b.n	801595e <chk_chr+0x12>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	3301      	adds	r3, #1
 801595c:	607b      	str	r3, [r7, #4]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d005      	beq.n	8015972 <chk_chr+0x26>
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	461a      	mov	r2, r3
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	4293      	cmp	r3, r2
 8015970:	d1f2      	bne.n	8015958 <chk_chr+0xc>
	return *str;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	781b      	ldrb	r3, [r3, #0]
}
 8015976:	4618      	mov	r0, r3
 8015978:	370c      	adds	r7, #12
 801597a:	46bd      	mov	sp, r7
 801597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015980:	4770      	bx	lr

08015982 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8015982:	b580      	push	{r7, lr}
 8015984:	b082      	sub	sp, #8
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d009      	beq.n	80159a4 <lock_fs+0x22>
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	691b      	ldr	r3, [r3, #16]
 8015994:	4618      	mov	r0, r3
 8015996:	f002 f9bf 	bl	8017d18 <ff_req_grant>
 801599a:	4603      	mov	r3, r0
 801599c:	2b00      	cmp	r3, #0
 801599e:	d001      	beq.n	80159a4 <lock_fs+0x22>
 80159a0:	2301      	movs	r3, #1
 80159a2:	e000      	b.n	80159a6 <lock_fs+0x24>
 80159a4:	2300      	movs	r3, #0
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3708      	adds	r7, #8
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}

080159ae <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b082      	sub	sp, #8
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
 80159b6:	460b      	mov	r3, r1
 80159b8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d00d      	beq.n	80159dc <unlock_fs+0x2e>
 80159c0:	78fb      	ldrb	r3, [r7, #3]
 80159c2:	2b0c      	cmp	r3, #12
 80159c4:	d00a      	beq.n	80159dc <unlock_fs+0x2e>
 80159c6:	78fb      	ldrb	r3, [r7, #3]
 80159c8:	2b0b      	cmp	r3, #11
 80159ca:	d007      	beq.n	80159dc <unlock_fs+0x2e>
 80159cc:	78fb      	ldrb	r3, [r7, #3]
 80159ce:	2b0f      	cmp	r3, #15
 80159d0:	d004      	beq.n	80159dc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	691b      	ldr	r3, [r3, #16]
 80159d6:	4618      	mov	r0, r3
 80159d8:	f002 f9b3 	bl	8017d42 <ff_rel_grant>
	}
}
 80159dc:	bf00      	nop
 80159de:	3708      	adds	r7, #8
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}

080159e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80159e4:	b480      	push	{r7}
 80159e6:	b085      	sub	sp, #20
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80159ee:	2300      	movs	r3, #0
 80159f0:	60bb      	str	r3, [r7, #8]
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	60fb      	str	r3, [r7, #12]
 80159f6:	e029      	b.n	8015a4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80159f8:	4a27      	ldr	r2, [pc, #156]	; (8015a98 <chk_lock+0xb4>)
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	011b      	lsls	r3, r3, #4
 80159fe:	4413      	add	r3, r2
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d01d      	beq.n	8015a42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015a06:	4a24      	ldr	r2, [pc, #144]	; (8015a98 <chk_lock+0xb4>)
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	011b      	lsls	r3, r3, #4
 8015a0c:	4413      	add	r3, r2
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	429a      	cmp	r2, r3
 8015a16:	d116      	bne.n	8015a46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015a18:	4a1f      	ldr	r2, [pc, #124]	; (8015a98 <chk_lock+0xb4>)
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	011b      	lsls	r3, r3, #4
 8015a1e:	4413      	add	r3, r2
 8015a20:	3304      	adds	r3, #4
 8015a22:	681a      	ldr	r2, [r3, #0]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d10c      	bne.n	8015a46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015a2c:	4a1a      	ldr	r2, [pc, #104]	; (8015a98 <chk_lock+0xb4>)
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	011b      	lsls	r3, r3, #4
 8015a32:	4413      	add	r3, r2
 8015a34:	3308      	adds	r3, #8
 8015a36:	681a      	ldr	r2, [r3, #0]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	d102      	bne.n	8015a46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015a40:	e007      	b.n	8015a52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8015a42:	2301      	movs	r3, #1
 8015a44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	3301      	adds	r3, #1
 8015a4a:	60fb      	str	r3, [r7, #12]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d9d2      	bls.n	80159f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2b02      	cmp	r3, #2
 8015a56:	d109      	bne.n	8015a6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d102      	bne.n	8015a64 <chk_lock+0x80>
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	2b02      	cmp	r3, #2
 8015a62:	d101      	bne.n	8015a68 <chk_lock+0x84>
 8015a64:	2300      	movs	r3, #0
 8015a66:	e010      	b.n	8015a8a <chk_lock+0xa6>
 8015a68:	2312      	movs	r3, #18
 8015a6a:	e00e      	b.n	8015a8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d108      	bne.n	8015a84 <chk_lock+0xa0>
 8015a72:	4a09      	ldr	r2, [pc, #36]	; (8015a98 <chk_lock+0xb4>)
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	011b      	lsls	r3, r3, #4
 8015a78:	4413      	add	r3, r2
 8015a7a:	330c      	adds	r3, #12
 8015a7c:	881b      	ldrh	r3, [r3, #0]
 8015a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a82:	d101      	bne.n	8015a88 <chk_lock+0xa4>
 8015a84:	2310      	movs	r3, #16
 8015a86:	e000      	b.n	8015a8a <chk_lock+0xa6>
 8015a88:	2300      	movs	r3, #0
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3714      	adds	r7, #20
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a94:	4770      	bx	lr
 8015a96:	bf00      	nop
 8015a98:	20000b7c 	.word	0x20000b7c

08015a9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	607b      	str	r3, [r7, #4]
 8015aa6:	e002      	b.n	8015aae <enq_lock+0x12>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	3301      	adds	r3, #1
 8015aac:	607b      	str	r3, [r7, #4]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2b01      	cmp	r3, #1
 8015ab2:	d806      	bhi.n	8015ac2 <enq_lock+0x26>
 8015ab4:	4a09      	ldr	r2, [pc, #36]	; (8015adc <enq_lock+0x40>)
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	011b      	lsls	r3, r3, #4
 8015aba:	4413      	add	r3, r2
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d1f2      	bne.n	8015aa8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2b02      	cmp	r3, #2
 8015ac6:	bf14      	ite	ne
 8015ac8:	2301      	movne	r3, #1
 8015aca:	2300      	moveq	r3, #0
 8015acc:	b2db      	uxtb	r3, r3
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	370c      	adds	r7, #12
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad8:	4770      	bx	lr
 8015ada:	bf00      	nop
 8015adc:	20000b7c 	.word	0x20000b7c

08015ae0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	b085      	sub	sp, #20
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015aea:	2300      	movs	r3, #0
 8015aec:	60fb      	str	r3, [r7, #12]
 8015aee:	e01f      	b.n	8015b30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015af0:	4a41      	ldr	r2, [pc, #260]	; (8015bf8 <inc_lock+0x118>)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	011b      	lsls	r3, r3, #4
 8015af6:	4413      	add	r3, r2
 8015af8:	681a      	ldr	r2, [r3, #0]
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	429a      	cmp	r2, r3
 8015b00:	d113      	bne.n	8015b2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015b02:	4a3d      	ldr	r2, [pc, #244]	; (8015bf8 <inc_lock+0x118>)
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	011b      	lsls	r3, r3, #4
 8015b08:	4413      	add	r3, r2
 8015b0a:	3304      	adds	r3, #4
 8015b0c:	681a      	ldr	r2, [r3, #0]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d109      	bne.n	8015b2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8015b16:	4a38      	ldr	r2, [pc, #224]	; (8015bf8 <inc_lock+0x118>)
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	011b      	lsls	r3, r3, #4
 8015b1c:	4413      	add	r3, r2
 8015b1e:	3308      	adds	r3, #8
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d006      	beq.n	8015b38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	3301      	adds	r3, #1
 8015b2e:	60fb      	str	r3, [r7, #12]
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	2b01      	cmp	r3, #1
 8015b34:	d9dc      	bls.n	8015af0 <inc_lock+0x10>
 8015b36:	e000      	b.n	8015b3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015b38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2b02      	cmp	r3, #2
 8015b3e:	d132      	bne.n	8015ba6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015b40:	2300      	movs	r3, #0
 8015b42:	60fb      	str	r3, [r7, #12]
 8015b44:	e002      	b.n	8015b4c <inc_lock+0x6c>
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	3301      	adds	r3, #1
 8015b4a:	60fb      	str	r3, [r7, #12]
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	2b01      	cmp	r3, #1
 8015b50:	d806      	bhi.n	8015b60 <inc_lock+0x80>
 8015b52:	4a29      	ldr	r2, [pc, #164]	; (8015bf8 <inc_lock+0x118>)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	011b      	lsls	r3, r3, #4
 8015b58:	4413      	add	r3, r2
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d1f2      	bne.n	8015b46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	2b02      	cmp	r3, #2
 8015b64:	d101      	bne.n	8015b6a <inc_lock+0x8a>
 8015b66:	2300      	movs	r3, #0
 8015b68:	e040      	b.n	8015bec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	4922      	ldr	r1, [pc, #136]	; (8015bf8 <inc_lock+0x118>)
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	011b      	lsls	r3, r3, #4
 8015b74:	440b      	add	r3, r1
 8015b76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	689a      	ldr	r2, [r3, #8]
 8015b7c:	491e      	ldr	r1, [pc, #120]	; (8015bf8 <inc_lock+0x118>)
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	011b      	lsls	r3, r3, #4
 8015b82:	440b      	add	r3, r1
 8015b84:	3304      	adds	r3, #4
 8015b86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	695a      	ldr	r2, [r3, #20]
 8015b8c:	491a      	ldr	r1, [pc, #104]	; (8015bf8 <inc_lock+0x118>)
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	011b      	lsls	r3, r3, #4
 8015b92:	440b      	add	r3, r1
 8015b94:	3308      	adds	r3, #8
 8015b96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015b98:	4a17      	ldr	r2, [pc, #92]	; (8015bf8 <inc_lock+0x118>)
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	011b      	lsls	r3, r3, #4
 8015b9e:	4413      	add	r3, r2
 8015ba0:	330c      	adds	r3, #12
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d009      	beq.n	8015bc0 <inc_lock+0xe0>
 8015bac:	4a12      	ldr	r2, [pc, #72]	; (8015bf8 <inc_lock+0x118>)
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	011b      	lsls	r3, r3, #4
 8015bb2:	4413      	add	r3, r2
 8015bb4:	330c      	adds	r3, #12
 8015bb6:	881b      	ldrh	r3, [r3, #0]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d001      	beq.n	8015bc0 <inc_lock+0xe0>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	e015      	b.n	8015bec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d108      	bne.n	8015bd8 <inc_lock+0xf8>
 8015bc6:	4a0c      	ldr	r2, [pc, #48]	; (8015bf8 <inc_lock+0x118>)
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	011b      	lsls	r3, r3, #4
 8015bcc:	4413      	add	r3, r2
 8015bce:	330c      	adds	r3, #12
 8015bd0:	881b      	ldrh	r3, [r3, #0]
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	e001      	b.n	8015bdc <inc_lock+0xfc>
 8015bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015bdc:	4906      	ldr	r1, [pc, #24]	; (8015bf8 <inc_lock+0x118>)
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	011b      	lsls	r3, r3, #4
 8015be2:	440b      	add	r3, r1
 8015be4:	330c      	adds	r3, #12
 8015be6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	3301      	adds	r3, #1
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3714      	adds	r7, #20
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr
 8015bf8:	20000b7c 	.word	0x20000b7c

08015bfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b085      	sub	sp, #20
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	3b01      	subs	r3, #1
 8015c08:	607b      	str	r3, [r7, #4]
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d825      	bhi.n	8015c5c <dec_lock+0x60>
		n = Files[i].ctr;
 8015c10:	4a17      	ldr	r2, [pc, #92]	; (8015c70 <dec_lock+0x74>)
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	011b      	lsls	r3, r3, #4
 8015c16:	4413      	add	r3, r2
 8015c18:	330c      	adds	r3, #12
 8015c1a:	881b      	ldrh	r3, [r3, #0]
 8015c1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015c1e:	89fb      	ldrh	r3, [r7, #14]
 8015c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c24:	d101      	bne.n	8015c2a <dec_lock+0x2e>
 8015c26:	2300      	movs	r3, #0
 8015c28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015c2a:	89fb      	ldrh	r3, [r7, #14]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d002      	beq.n	8015c36 <dec_lock+0x3a>
 8015c30:	89fb      	ldrh	r3, [r7, #14]
 8015c32:	3b01      	subs	r3, #1
 8015c34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015c36:	4a0e      	ldr	r2, [pc, #56]	; (8015c70 <dec_lock+0x74>)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	011b      	lsls	r3, r3, #4
 8015c3c:	4413      	add	r3, r2
 8015c3e:	330c      	adds	r3, #12
 8015c40:	89fa      	ldrh	r2, [r7, #14]
 8015c42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015c44:	89fb      	ldrh	r3, [r7, #14]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d105      	bne.n	8015c56 <dec_lock+0x5a>
 8015c4a:	4a09      	ldr	r2, [pc, #36]	; (8015c70 <dec_lock+0x74>)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	011b      	lsls	r3, r3, #4
 8015c50:	4413      	add	r3, r2
 8015c52:	2200      	movs	r2, #0
 8015c54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015c56:	2300      	movs	r3, #0
 8015c58:	737b      	strb	r3, [r7, #13]
 8015c5a:	e001      	b.n	8015c60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015c5c:	2302      	movs	r3, #2
 8015c5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015c60:	7b7b      	ldrb	r3, [r7, #13]
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3714      	adds	r7, #20
 8015c66:	46bd      	mov	sp, r7
 8015c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop
 8015c70:	20000b7c 	.word	0x20000b7c

08015c74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015c74:	b480      	push	{r7}
 8015c76:	b085      	sub	sp, #20
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	60fb      	str	r3, [r7, #12]
 8015c80:	e010      	b.n	8015ca4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015c82:	4a0d      	ldr	r2, [pc, #52]	; (8015cb8 <clear_lock+0x44>)
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	011b      	lsls	r3, r3, #4
 8015c88:	4413      	add	r3, r2
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	687a      	ldr	r2, [r7, #4]
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d105      	bne.n	8015c9e <clear_lock+0x2a>
 8015c92:	4a09      	ldr	r2, [pc, #36]	; (8015cb8 <clear_lock+0x44>)
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	011b      	lsls	r3, r3, #4
 8015c98:	4413      	add	r3, r2
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	60fb      	str	r3, [r7, #12]
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d9eb      	bls.n	8015c82 <clear_lock+0xe>
	}
}
 8015caa:	bf00      	nop
 8015cac:	3714      	adds	r7, #20
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb4:	4770      	bx	lr
 8015cb6:	bf00      	nop
 8015cb8:	20000b7c 	.word	0x20000b7c

08015cbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	78db      	ldrb	r3, [r3, #3]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d034      	beq.n	8015d3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	7858      	ldrb	r0, [r3, #1]
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	697a      	ldr	r2, [r7, #20]
 8015ce4:	f7ff fd10 	bl	8015708 <disk_write>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d002      	beq.n	8015cf4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	73fb      	strb	r3, [r7, #15]
 8015cf2:	e022      	b.n	8015d3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cfe:	697a      	ldr	r2, [r7, #20]
 8015d00:	1ad2      	subs	r2, r2, r3
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6a1b      	ldr	r3, [r3, #32]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d217      	bcs.n	8015d3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	789b      	ldrb	r3, [r3, #2]
 8015d0e:	613b      	str	r3, [r7, #16]
 8015d10:	e010      	b.n	8015d34 <sync_window+0x78>
					wsect += fs->fsize;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	6a1b      	ldr	r3, [r3, #32]
 8015d16:	697a      	ldr	r2, [r7, #20]
 8015d18:	4413      	add	r3, r2
 8015d1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	7858      	ldrb	r0, [r3, #1]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015d26:	2301      	movs	r3, #1
 8015d28:	697a      	ldr	r2, [r7, #20]
 8015d2a:	f7ff fced 	bl	8015708 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	3b01      	subs	r3, #1
 8015d32:	613b      	str	r3, [r7, #16]
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	d8eb      	bhi.n	8015d12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	3718      	adds	r7, #24
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d56:	683a      	ldr	r2, [r7, #0]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d01b      	beq.n	8015d94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f7ff ffad 	bl	8015cbc <sync_window>
 8015d62:	4603      	mov	r3, r0
 8015d64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015d66:	7bfb      	ldrb	r3, [r7, #15]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d113      	bne.n	8015d94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	7858      	ldrb	r0, [r3, #1]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015d76:	2301      	movs	r3, #1
 8015d78:	683a      	ldr	r2, [r7, #0]
 8015d7a:	f7ff fca5 	bl	80156c8 <disk_read>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d004      	beq.n	8015d8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015d84:	f04f 33ff 	mov.w	r3, #4294967295
 8015d88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	683a      	ldr	r2, [r7, #0]
 8015d92:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8015d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
	...

08015da0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7ff ff87 	bl	8015cbc <sync_window>
 8015dae:	4603      	mov	r3, r0
 8015db0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015db2:	7bfb      	ldrb	r3, [r7, #15]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d159      	bne.n	8015e6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	781b      	ldrb	r3, [r3, #0]
 8015dbc:	2b03      	cmp	r3, #3
 8015dbe:	d149      	bne.n	8015e54 <sync_fs+0xb4>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	791b      	ldrb	r3, [r3, #4]
 8015dc4:	2b01      	cmp	r3, #1
 8015dc6:	d145      	bne.n	8015e54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	899b      	ldrh	r3, [r3, #12]
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	2100      	movs	r1, #0
 8015dd6:	f7ff fd78 	bl	80158ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	3338      	adds	r3, #56	; 0x38
 8015dde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015de2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ff fd07 	bl	80157fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	3338      	adds	r3, #56	; 0x38
 8015df0:	4921      	ldr	r1, [pc, #132]	; (8015e78 <sync_fs+0xd8>)
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7ff fd1c 	bl	8015830 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	3338      	adds	r3, #56	; 0x38
 8015dfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015e00:	491e      	ldr	r1, [pc, #120]	; (8015e7c <sync_fs+0xdc>)
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7ff fd14 	bl	8015830 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	3338      	adds	r3, #56	; 0x38
 8015e0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	699b      	ldr	r3, [r3, #24]
 8015e14:	4619      	mov	r1, r3
 8015e16:	4610      	mov	r0, r2
 8015e18:	f7ff fd0a 	bl	8015830 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	3338      	adds	r3, #56	; 0x38
 8015e20:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	695b      	ldr	r3, [r3, #20]
 8015e28:	4619      	mov	r1, r3
 8015e2a:	4610      	mov	r0, r2
 8015e2c:	f7ff fd00 	bl	8015830 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e34:	1c5a      	adds	r2, r3, #1
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	7858      	ldrb	r0, [r3, #1]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015e48:	2301      	movs	r3, #1
 8015e4a:	f7ff fc5d 	bl	8015708 <disk_write>
			fs->fsi_flag = 0;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2200      	movs	r2, #0
 8015e52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	785b      	ldrb	r3, [r3, #1]
 8015e58:	2200      	movs	r2, #0
 8015e5a:	2100      	movs	r1, #0
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7ff fc73 	bl	8015748 <disk_ioctl>
 8015e62:	4603      	mov	r3, r0
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d001      	beq.n	8015e6c <sync_fs+0xcc>
 8015e68:	2301      	movs	r3, #1
 8015e6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3710      	adds	r7, #16
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	bf00      	nop
 8015e78:	41615252 	.word	0x41615252
 8015e7c:	61417272 	.word	0x61417272

08015e80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015e80:	b480      	push	{r7}
 8015e82:	b083      	sub	sp, #12
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
 8015e88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	3b02      	subs	r3, #2
 8015e8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	69db      	ldr	r3, [r3, #28]
 8015e94:	3b02      	subs	r3, #2
 8015e96:	683a      	ldr	r2, [r7, #0]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d301      	bcc.n	8015ea0 <clust2sect+0x20>
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	e008      	b.n	8015eb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	895b      	ldrh	r3, [r3, #10]
 8015ea4:	461a      	mov	r2, r3
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	fb03 f202 	mul.w	r2, r3, r2
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eb0:	4413      	add	r3, r2
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	370c      	adds	r7, #12
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebc:	4770      	bx	lr

08015ebe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b086      	sub	sp, #24
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	6078      	str	r0, [r7, #4]
 8015ec6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d904      	bls.n	8015ede <get_fat+0x20>
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	69db      	ldr	r3, [r3, #28]
 8015ed8:	683a      	ldr	r2, [r7, #0]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d302      	bcc.n	8015ee4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015ede:	2301      	movs	r3, #1
 8015ee0:	617b      	str	r3, [r7, #20]
 8015ee2:	e0b7      	b.n	8016054 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ee8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d05a      	beq.n	8015fa8 <get_fat+0xea>
 8015ef2:	2b03      	cmp	r3, #3
 8015ef4:	d07d      	beq.n	8015ff2 <get_fat+0x134>
 8015ef6:	2b01      	cmp	r3, #1
 8015ef8:	f040 80a2 	bne.w	8016040 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	60fb      	str	r3, [r7, #12]
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	085b      	lsrs	r3, r3, #1
 8015f04:	68fa      	ldr	r2, [r7, #12]
 8015f06:	4413      	add	r3, r2
 8015f08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015f0a:	693b      	ldr	r3, [r7, #16]
 8015f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015f0e:	693b      	ldr	r3, [r7, #16]
 8015f10:	899b      	ldrh	r3, [r3, #12]
 8015f12:	4619      	mov	r1, r3
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f1a:	4413      	add	r3, r2
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	6938      	ldr	r0, [r7, #16]
 8015f20:	f7ff ff10 	bl	8015d44 <move_window>
 8015f24:	4603      	mov	r3, r0
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	f040 808d 	bne.w	8016046 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	1c5a      	adds	r2, r3, #1
 8015f30:	60fa      	str	r2, [r7, #12]
 8015f32:	693a      	ldr	r2, [r7, #16]
 8015f34:	8992      	ldrh	r2, [r2, #12]
 8015f36:	fbb3 f1f2 	udiv	r1, r3, r2
 8015f3a:	fb02 f201 	mul.w	r2, r2, r1
 8015f3e:	1a9b      	subs	r3, r3, r2
 8015f40:	693a      	ldr	r2, [r7, #16]
 8015f42:	4413      	add	r3, r2
 8015f44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015f48:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015f4a:	693b      	ldr	r3, [r7, #16]
 8015f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015f4e:	693b      	ldr	r3, [r7, #16]
 8015f50:	899b      	ldrh	r3, [r3, #12]
 8015f52:	4619      	mov	r1, r3
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f5a:	4413      	add	r3, r2
 8015f5c:	4619      	mov	r1, r3
 8015f5e:	6938      	ldr	r0, [r7, #16]
 8015f60:	f7ff fef0 	bl	8015d44 <move_window>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d16f      	bne.n	801604a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	899b      	ldrh	r3, [r3, #12]
 8015f6e:	461a      	mov	r2, r3
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8015f76:	fb02 f201 	mul.w	r2, r2, r1
 8015f7a:	1a9b      	subs	r3, r3, r2
 8015f7c:	693a      	ldr	r2, [r7, #16]
 8015f7e:	4413      	add	r3, r2
 8015f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015f84:	021b      	lsls	r3, r3, #8
 8015f86:	461a      	mov	r2, r3
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	4313      	orrs	r3, r2
 8015f8c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	f003 0301 	and.w	r3, r3, #1
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d002      	beq.n	8015f9e <get_fat+0xe0>
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	091b      	lsrs	r3, r3, #4
 8015f9c:	e002      	b.n	8015fa4 <get_fat+0xe6>
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015fa4:	617b      	str	r3, [r7, #20]
			break;
 8015fa6:	e055      	b.n	8016054 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	899b      	ldrh	r3, [r3, #12]
 8015fb0:	085b      	lsrs	r3, r3, #1
 8015fb2:	b29b      	uxth	r3, r3
 8015fb4:	4619      	mov	r1, r3
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8015fbc:	4413      	add	r3, r2
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	6938      	ldr	r0, [r7, #16]
 8015fc2:	f7ff febf 	bl	8015d44 <move_window>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d140      	bne.n	801604e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015fcc:	693b      	ldr	r3, [r7, #16]
 8015fce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	005b      	lsls	r3, r3, #1
 8015fd6:	693a      	ldr	r2, [r7, #16]
 8015fd8:	8992      	ldrh	r2, [r2, #12]
 8015fda:	fbb3 f0f2 	udiv	r0, r3, r2
 8015fde:	fb02 f200 	mul.w	r2, r2, r0
 8015fe2:	1a9b      	subs	r3, r3, r2
 8015fe4:	440b      	add	r3, r1
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7ff fbcc 	bl	8015784 <ld_word>
 8015fec:	4603      	mov	r3, r0
 8015fee:	617b      	str	r3, [r7, #20]
			break;
 8015ff0:	e030      	b.n	8016054 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	899b      	ldrh	r3, [r3, #12]
 8015ffa:	089b      	lsrs	r3, r3, #2
 8015ffc:	b29b      	uxth	r3, r3
 8015ffe:	4619      	mov	r1, r3
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	fbb3 f3f1 	udiv	r3, r3, r1
 8016006:	4413      	add	r3, r2
 8016008:	4619      	mov	r1, r3
 801600a:	6938      	ldr	r0, [r7, #16]
 801600c:	f7ff fe9a 	bl	8015d44 <move_window>
 8016010:	4603      	mov	r3, r0
 8016012:	2b00      	cmp	r3, #0
 8016014:	d11d      	bne.n	8016052 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	009b      	lsls	r3, r3, #2
 8016020:	693a      	ldr	r2, [r7, #16]
 8016022:	8992      	ldrh	r2, [r2, #12]
 8016024:	fbb3 f0f2 	udiv	r0, r3, r2
 8016028:	fb02 f200 	mul.w	r2, r2, r0
 801602c:	1a9b      	subs	r3, r3, r2
 801602e:	440b      	add	r3, r1
 8016030:	4618      	mov	r0, r3
 8016032:	f7ff fbbf 	bl	80157b4 <ld_dword>
 8016036:	4603      	mov	r3, r0
 8016038:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801603c:	617b      	str	r3, [r7, #20]
			break;
 801603e:	e009      	b.n	8016054 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016040:	2301      	movs	r3, #1
 8016042:	617b      	str	r3, [r7, #20]
 8016044:	e006      	b.n	8016054 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016046:	bf00      	nop
 8016048:	e004      	b.n	8016054 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801604a:	bf00      	nop
 801604c:	e002      	b.n	8016054 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801604e:	bf00      	nop
 8016050:	e000      	b.n	8016054 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016052:	bf00      	nop
		}
	}

	return val;
 8016054:	697b      	ldr	r3, [r7, #20]
}
 8016056:	4618      	mov	r0, r3
 8016058:	3718      	adds	r7, #24
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}

0801605e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801605e:	b590      	push	{r4, r7, lr}
 8016060:	b089      	sub	sp, #36	; 0x24
 8016062:	af00      	add	r7, sp, #0
 8016064:	60f8      	str	r0, [r7, #12]
 8016066:	60b9      	str	r1, [r7, #8]
 8016068:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801606a:	2302      	movs	r3, #2
 801606c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801606e:	68bb      	ldr	r3, [r7, #8]
 8016070:	2b01      	cmp	r3, #1
 8016072:	f240 8106 	bls.w	8016282 <put_fat+0x224>
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	69db      	ldr	r3, [r3, #28]
 801607a:	68ba      	ldr	r2, [r7, #8]
 801607c:	429a      	cmp	r2, r3
 801607e:	f080 8100 	bcs.w	8016282 <put_fat+0x224>
		switch (fs->fs_type) {
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	781b      	ldrb	r3, [r3, #0]
 8016086:	2b02      	cmp	r3, #2
 8016088:	f000 8088 	beq.w	801619c <put_fat+0x13e>
 801608c:	2b03      	cmp	r3, #3
 801608e:	f000 80b0 	beq.w	80161f2 <put_fat+0x194>
 8016092:	2b01      	cmp	r3, #1
 8016094:	f040 80f5 	bne.w	8016282 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	61bb      	str	r3, [r7, #24]
 801609c:	69bb      	ldr	r3, [r7, #24]
 801609e:	085b      	lsrs	r3, r3, #1
 80160a0:	69ba      	ldr	r2, [r7, #24]
 80160a2:	4413      	add	r3, r2
 80160a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	899b      	ldrh	r3, [r3, #12]
 80160ae:	4619      	mov	r1, r3
 80160b0:	69bb      	ldr	r3, [r7, #24]
 80160b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80160b6:	4413      	add	r3, r2
 80160b8:	4619      	mov	r1, r3
 80160ba:	68f8      	ldr	r0, [r7, #12]
 80160bc:	f7ff fe42 	bl	8015d44 <move_window>
 80160c0:	4603      	mov	r3, r0
 80160c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80160c4:	7ffb      	ldrb	r3, [r7, #31]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	f040 80d4 	bne.w	8016274 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80160d2:	69bb      	ldr	r3, [r7, #24]
 80160d4:	1c5a      	adds	r2, r3, #1
 80160d6:	61ba      	str	r2, [r7, #24]
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	8992      	ldrh	r2, [r2, #12]
 80160dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80160e0:	fb02 f200 	mul.w	r2, r2, r0
 80160e4:	1a9b      	subs	r3, r3, r2
 80160e6:	440b      	add	r3, r1
 80160e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	f003 0301 	and.w	r3, r3, #1
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00d      	beq.n	8016110 <put_fat+0xb2>
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	b25b      	sxtb	r3, r3
 80160fa:	f003 030f 	and.w	r3, r3, #15
 80160fe:	b25a      	sxtb	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	b2db      	uxtb	r3, r3
 8016104:	011b      	lsls	r3, r3, #4
 8016106:	b25b      	sxtb	r3, r3
 8016108:	4313      	orrs	r3, r2
 801610a:	b25b      	sxtb	r3, r3
 801610c:	b2db      	uxtb	r3, r3
 801610e:	e001      	b.n	8016114 <put_fat+0xb6>
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	b2db      	uxtb	r3, r3
 8016114:	697a      	ldr	r2, [r7, #20]
 8016116:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	2201      	movs	r2, #1
 801611c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	899b      	ldrh	r3, [r3, #12]
 8016126:	4619      	mov	r1, r3
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	fbb3 f3f1 	udiv	r3, r3, r1
 801612e:	4413      	add	r3, r2
 8016130:	4619      	mov	r1, r3
 8016132:	68f8      	ldr	r0, [r7, #12]
 8016134:	f7ff fe06 	bl	8015d44 <move_window>
 8016138:	4603      	mov	r3, r0
 801613a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801613c:	7ffb      	ldrb	r3, [r7, #31]
 801613e:	2b00      	cmp	r3, #0
 8016140:	f040 809a 	bne.w	8016278 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	899b      	ldrh	r3, [r3, #12]
 801614e:	461a      	mov	r2, r3
 8016150:	69bb      	ldr	r3, [r7, #24]
 8016152:	fbb3 f0f2 	udiv	r0, r3, r2
 8016156:	fb02 f200 	mul.w	r2, r2, r0
 801615a:	1a9b      	subs	r3, r3, r2
 801615c:	440b      	add	r3, r1
 801615e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	f003 0301 	and.w	r3, r3, #1
 8016166:	2b00      	cmp	r3, #0
 8016168:	d003      	beq.n	8016172 <put_fat+0x114>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	091b      	lsrs	r3, r3, #4
 801616e:	b2db      	uxtb	r3, r3
 8016170:	e00e      	b.n	8016190 <put_fat+0x132>
 8016172:	697b      	ldr	r3, [r7, #20]
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	b25b      	sxtb	r3, r3
 8016178:	f023 030f 	bic.w	r3, r3, #15
 801617c:	b25a      	sxtb	r2, r3
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	0a1b      	lsrs	r3, r3, #8
 8016182:	b25b      	sxtb	r3, r3
 8016184:	f003 030f 	and.w	r3, r3, #15
 8016188:	b25b      	sxtb	r3, r3
 801618a:	4313      	orrs	r3, r2
 801618c:	b25b      	sxtb	r3, r3
 801618e:	b2db      	uxtb	r3, r3
 8016190:	697a      	ldr	r2, [r7, #20]
 8016192:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	2201      	movs	r2, #1
 8016198:	70da      	strb	r2, [r3, #3]
			break;
 801619a:	e072      	b.n	8016282 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	899b      	ldrh	r3, [r3, #12]
 80161a4:	085b      	lsrs	r3, r3, #1
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	4619      	mov	r1, r3
 80161aa:	68bb      	ldr	r3, [r7, #8]
 80161ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80161b0:	4413      	add	r3, r2
 80161b2:	4619      	mov	r1, r3
 80161b4:	68f8      	ldr	r0, [r7, #12]
 80161b6:	f7ff fdc5 	bl	8015d44 <move_window>
 80161ba:	4603      	mov	r3, r0
 80161bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80161be:	7ffb      	ldrb	r3, [r7, #31]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d15b      	bne.n	801627c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80161ca:	68bb      	ldr	r3, [r7, #8]
 80161cc:	005b      	lsls	r3, r3, #1
 80161ce:	68fa      	ldr	r2, [r7, #12]
 80161d0:	8992      	ldrh	r2, [r2, #12]
 80161d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80161d6:	fb02 f200 	mul.w	r2, r2, r0
 80161da:	1a9b      	subs	r3, r3, r2
 80161dc:	440b      	add	r3, r1
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	b292      	uxth	r2, r2
 80161e2:	4611      	mov	r1, r2
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7ff fb08 	bl	80157fa <st_word>
			fs->wflag = 1;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2201      	movs	r2, #1
 80161ee:	70da      	strb	r2, [r3, #3]
			break;
 80161f0:	e047      	b.n	8016282 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	899b      	ldrh	r3, [r3, #12]
 80161fa:	089b      	lsrs	r3, r3, #2
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	4619      	mov	r1, r3
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	fbb3 f3f1 	udiv	r3, r3, r1
 8016206:	4413      	add	r3, r2
 8016208:	4619      	mov	r1, r3
 801620a:	68f8      	ldr	r0, [r7, #12]
 801620c:	f7ff fd9a 	bl	8015d44 <move_window>
 8016210:	4603      	mov	r3, r0
 8016212:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016214:	7ffb      	ldrb	r3, [r7, #31]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d132      	bne.n	8016280 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	009b      	lsls	r3, r3, #2
 801622a:	68fa      	ldr	r2, [r7, #12]
 801622c:	8992      	ldrh	r2, [r2, #12]
 801622e:	fbb3 f0f2 	udiv	r0, r3, r2
 8016232:	fb02 f200 	mul.w	r2, r2, r0
 8016236:	1a9b      	subs	r3, r3, r2
 8016238:	440b      	add	r3, r1
 801623a:	4618      	mov	r0, r3
 801623c:	f7ff faba 	bl	80157b4 <ld_dword>
 8016240:	4603      	mov	r3, r0
 8016242:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016246:	4323      	orrs	r3, r4
 8016248:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016250:	68bb      	ldr	r3, [r7, #8]
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	68fa      	ldr	r2, [r7, #12]
 8016256:	8992      	ldrh	r2, [r2, #12]
 8016258:	fbb3 f0f2 	udiv	r0, r3, r2
 801625c:	fb02 f200 	mul.w	r2, r2, r0
 8016260:	1a9b      	subs	r3, r3, r2
 8016262:	440b      	add	r3, r1
 8016264:	6879      	ldr	r1, [r7, #4]
 8016266:	4618      	mov	r0, r3
 8016268:	f7ff fae2 	bl	8015830 <st_dword>
			fs->wflag = 1;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	2201      	movs	r2, #1
 8016270:	70da      	strb	r2, [r3, #3]
			break;
 8016272:	e006      	b.n	8016282 <put_fat+0x224>
			if (res != FR_OK) break;
 8016274:	bf00      	nop
 8016276:	e004      	b.n	8016282 <put_fat+0x224>
			if (res != FR_OK) break;
 8016278:	bf00      	nop
 801627a:	e002      	b.n	8016282 <put_fat+0x224>
			if (res != FR_OK) break;
 801627c:	bf00      	nop
 801627e:	e000      	b.n	8016282 <put_fat+0x224>
			if (res != FR_OK) break;
 8016280:	bf00      	nop
		}
	}
	return res;
 8016282:	7ffb      	ldrb	r3, [r7, #31]
}
 8016284:	4618      	mov	r0, r3
 8016286:	3724      	adds	r7, #36	; 0x24
 8016288:	46bd      	mov	sp, r7
 801628a:	bd90      	pop	{r4, r7, pc}

0801628c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b088      	sub	sp, #32
 8016290:	af00      	add	r7, sp, #0
 8016292:	60f8      	str	r0, [r7, #12]
 8016294:	60b9      	str	r1, [r7, #8]
 8016296:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016298:	2300      	movs	r3, #0
 801629a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d904      	bls.n	80162b2 <remove_chain+0x26>
 80162a8:	69bb      	ldr	r3, [r7, #24]
 80162aa:	69db      	ldr	r3, [r3, #28]
 80162ac:	68ba      	ldr	r2, [r7, #8]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d301      	bcc.n	80162b6 <remove_chain+0x2a>
 80162b2:	2302      	movs	r3, #2
 80162b4:	e04b      	b.n	801634e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d00c      	beq.n	80162d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80162bc:	f04f 32ff 	mov.w	r2, #4294967295
 80162c0:	6879      	ldr	r1, [r7, #4]
 80162c2:	69b8      	ldr	r0, [r7, #24]
 80162c4:	f7ff fecb 	bl	801605e <put_fat>
 80162c8:	4603      	mov	r3, r0
 80162ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80162cc:	7ffb      	ldrb	r3, [r7, #31]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d001      	beq.n	80162d6 <remove_chain+0x4a>
 80162d2:	7ffb      	ldrb	r3, [r7, #31]
 80162d4:	e03b      	b.n	801634e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80162d6:	68b9      	ldr	r1, [r7, #8]
 80162d8:	68f8      	ldr	r0, [r7, #12]
 80162da:	f7ff fdf0 	bl	8015ebe <get_fat>
 80162de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d031      	beq.n	801634a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d101      	bne.n	80162f0 <remove_chain+0x64>
 80162ec:	2302      	movs	r3, #2
 80162ee:	e02e      	b.n	801634e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162f6:	d101      	bne.n	80162fc <remove_chain+0x70>
 80162f8:	2301      	movs	r3, #1
 80162fa:	e028      	b.n	801634e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80162fc:	2200      	movs	r2, #0
 80162fe:	68b9      	ldr	r1, [r7, #8]
 8016300:	69b8      	ldr	r0, [r7, #24]
 8016302:	f7ff feac 	bl	801605e <put_fat>
 8016306:	4603      	mov	r3, r0
 8016308:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801630a:	7ffb      	ldrb	r3, [r7, #31]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d001      	beq.n	8016314 <remove_chain+0x88>
 8016310:	7ffb      	ldrb	r3, [r7, #31]
 8016312:	e01c      	b.n	801634e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016314:	69bb      	ldr	r3, [r7, #24]
 8016316:	699a      	ldr	r2, [r3, #24]
 8016318:	69bb      	ldr	r3, [r7, #24]
 801631a:	69db      	ldr	r3, [r3, #28]
 801631c:	3b02      	subs	r3, #2
 801631e:	429a      	cmp	r2, r3
 8016320:	d20b      	bcs.n	801633a <remove_chain+0xae>
			fs->free_clst++;
 8016322:	69bb      	ldr	r3, [r7, #24]
 8016324:	699b      	ldr	r3, [r3, #24]
 8016326:	1c5a      	adds	r2, r3, #1
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801632c:	69bb      	ldr	r3, [r7, #24]
 801632e:	791b      	ldrb	r3, [r3, #4]
 8016330:	f043 0301 	orr.w	r3, r3, #1
 8016334:	b2da      	uxtb	r2, r3
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801633e:	69bb      	ldr	r3, [r7, #24]
 8016340:	69db      	ldr	r3, [r3, #28]
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	429a      	cmp	r2, r3
 8016346:	d3c6      	bcc.n	80162d6 <remove_chain+0x4a>
 8016348:	e000      	b.n	801634c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801634a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801634c:	2300      	movs	r3, #0
}
 801634e:	4618      	mov	r0, r3
 8016350:	3720      	adds	r7, #32
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b088      	sub	sp, #32
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
 801635e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d10d      	bne.n	8016388 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801636c:	693b      	ldr	r3, [r7, #16]
 801636e:	695b      	ldr	r3, [r3, #20]
 8016370:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016372:	69bb      	ldr	r3, [r7, #24]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d004      	beq.n	8016382 <create_chain+0x2c>
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	69db      	ldr	r3, [r3, #28]
 801637c:	69ba      	ldr	r2, [r7, #24]
 801637e:	429a      	cmp	r2, r3
 8016380:	d31b      	bcc.n	80163ba <create_chain+0x64>
 8016382:	2301      	movs	r3, #1
 8016384:	61bb      	str	r3, [r7, #24]
 8016386:	e018      	b.n	80163ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff fd97 	bl	8015ebe <get_fat>
 8016390:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	2b01      	cmp	r3, #1
 8016396:	d801      	bhi.n	801639c <create_chain+0x46>
 8016398:	2301      	movs	r3, #1
 801639a:	e070      	b.n	801647e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163a2:	d101      	bne.n	80163a8 <create_chain+0x52>
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	e06a      	b.n	801647e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	69db      	ldr	r3, [r3, #28]
 80163ac:	68fa      	ldr	r2, [r7, #12]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d201      	bcs.n	80163b6 <create_chain+0x60>
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	e063      	b.n	801647e <create_chain+0x128>
		scl = clst;
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80163ba:	69bb      	ldr	r3, [r7, #24]
 80163bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80163be:	69fb      	ldr	r3, [r7, #28]
 80163c0:	3301      	adds	r3, #1
 80163c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	69db      	ldr	r3, [r3, #28]
 80163c8:	69fa      	ldr	r2, [r7, #28]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d307      	bcc.n	80163de <create_chain+0x88>
				ncl = 2;
 80163ce:	2302      	movs	r3, #2
 80163d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80163d2:	69fa      	ldr	r2, [r7, #28]
 80163d4:	69bb      	ldr	r3, [r7, #24]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d901      	bls.n	80163de <create_chain+0x88>
 80163da:	2300      	movs	r3, #0
 80163dc:	e04f      	b.n	801647e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80163de:	69f9      	ldr	r1, [r7, #28]
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f7ff fd6c 	bl	8015ebe <get_fat>
 80163e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d00e      	beq.n	801640c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2b01      	cmp	r3, #1
 80163f2:	d003      	beq.n	80163fc <create_chain+0xa6>
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163fa:	d101      	bne.n	8016400 <create_chain+0xaa>
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	e03e      	b.n	801647e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8016400:	69fa      	ldr	r2, [r7, #28]
 8016402:	69bb      	ldr	r3, [r7, #24]
 8016404:	429a      	cmp	r2, r3
 8016406:	d1da      	bne.n	80163be <create_chain+0x68>
 8016408:	2300      	movs	r3, #0
 801640a:	e038      	b.n	801647e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801640c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801640e:	f04f 32ff 	mov.w	r2, #4294967295
 8016412:	69f9      	ldr	r1, [r7, #28]
 8016414:	6938      	ldr	r0, [r7, #16]
 8016416:	f7ff fe22 	bl	801605e <put_fat>
 801641a:	4603      	mov	r3, r0
 801641c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801641e:	7dfb      	ldrb	r3, [r7, #23]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d109      	bne.n	8016438 <create_chain+0xe2>
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d006      	beq.n	8016438 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801642a:	69fa      	ldr	r2, [r7, #28]
 801642c:	6839      	ldr	r1, [r7, #0]
 801642e:	6938      	ldr	r0, [r7, #16]
 8016430:	f7ff fe15 	bl	801605e <put_fat>
 8016434:	4603      	mov	r3, r0
 8016436:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016438:	7dfb      	ldrb	r3, [r7, #23]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d116      	bne.n	801646c <create_chain+0x116>
		fs->last_clst = ncl;
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	69fa      	ldr	r2, [r7, #28]
 8016442:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016444:	693b      	ldr	r3, [r7, #16]
 8016446:	699a      	ldr	r2, [r3, #24]
 8016448:	693b      	ldr	r3, [r7, #16]
 801644a:	69db      	ldr	r3, [r3, #28]
 801644c:	3b02      	subs	r3, #2
 801644e:	429a      	cmp	r2, r3
 8016450:	d804      	bhi.n	801645c <create_chain+0x106>
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	699b      	ldr	r3, [r3, #24]
 8016456:	1e5a      	subs	r2, r3, #1
 8016458:	693b      	ldr	r3, [r7, #16]
 801645a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	791b      	ldrb	r3, [r3, #4]
 8016460:	f043 0301 	orr.w	r3, r3, #1
 8016464:	b2da      	uxtb	r2, r3
 8016466:	693b      	ldr	r3, [r7, #16]
 8016468:	711a      	strb	r2, [r3, #4]
 801646a:	e007      	b.n	801647c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801646c:	7dfb      	ldrb	r3, [r7, #23]
 801646e:	2b01      	cmp	r3, #1
 8016470:	d102      	bne.n	8016478 <create_chain+0x122>
 8016472:	f04f 33ff 	mov.w	r3, #4294967295
 8016476:	e000      	b.n	801647a <create_chain+0x124>
 8016478:	2301      	movs	r3, #1
 801647a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801647c:	69fb      	ldr	r3, [r7, #28]
}
 801647e:	4618      	mov	r0, r3
 8016480:	3720      	adds	r7, #32
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}

08016486 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016486:	b480      	push	{r7}
 8016488:	b087      	sub	sp, #28
 801648a:	af00      	add	r7, sp, #0
 801648c:	6078      	str	r0, [r7, #4]
 801648e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801649a:	3304      	adds	r3, #4
 801649c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	899b      	ldrh	r3, [r3, #12]
 80164a2:	461a      	mov	r2, r3
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80164aa:	68fa      	ldr	r2, [r7, #12]
 80164ac:	8952      	ldrh	r2, [r2, #10]
 80164ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80164b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80164b4:	693b      	ldr	r3, [r7, #16]
 80164b6:	1d1a      	adds	r2, r3, #4
 80164b8:	613a      	str	r2, [r7, #16]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d101      	bne.n	80164c8 <clmt_clust+0x42>
 80164c4:	2300      	movs	r3, #0
 80164c6:	e010      	b.n	80164ea <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80164c8:	697a      	ldr	r2, [r7, #20]
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d307      	bcc.n	80164e0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80164d0:	697a      	ldr	r2, [r7, #20]
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	1ad3      	subs	r3, r2, r3
 80164d6:	617b      	str	r3, [r7, #20]
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	3304      	adds	r3, #4
 80164dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80164de:	e7e9      	b.n	80164b4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80164e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80164e2:	693b      	ldr	r3, [r7, #16]
 80164e4:	681a      	ldr	r2, [r3, #0]
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	4413      	add	r3, r2
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	371c      	adds	r7, #28
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr

080164f6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b086      	sub	sp, #24
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	6078      	str	r0, [r7, #4]
 80164fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801650c:	d204      	bcs.n	8016518 <dir_sdi+0x22>
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	f003 031f 	and.w	r3, r3, #31
 8016514:	2b00      	cmp	r3, #0
 8016516:	d001      	beq.n	801651c <dir_sdi+0x26>
		return FR_INT_ERR;
 8016518:	2302      	movs	r3, #2
 801651a:	e071      	b.n	8016600 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	683a      	ldr	r2, [r7, #0]
 8016520:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	689b      	ldr	r3, [r3, #8]
 8016526:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d106      	bne.n	801653c <dir_sdi+0x46>
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	2b02      	cmp	r3, #2
 8016534:	d902      	bls.n	801653c <dir_sdi+0x46>
		clst = fs->dirbase;
 8016536:	693b      	ldr	r3, [r7, #16]
 8016538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801653a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d10c      	bne.n	801655c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	095b      	lsrs	r3, r3, #5
 8016546:	693a      	ldr	r2, [r7, #16]
 8016548:	8912      	ldrh	r2, [r2, #8]
 801654a:	4293      	cmp	r3, r2
 801654c:	d301      	bcc.n	8016552 <dir_sdi+0x5c>
 801654e:	2302      	movs	r3, #2
 8016550:	e056      	b.n	8016600 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	61da      	str	r2, [r3, #28]
 801655a:	e02d      	b.n	80165b8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801655c:	693b      	ldr	r3, [r7, #16]
 801655e:	895b      	ldrh	r3, [r3, #10]
 8016560:	461a      	mov	r2, r3
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	899b      	ldrh	r3, [r3, #12]
 8016566:	fb03 f302 	mul.w	r3, r3, r2
 801656a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801656c:	e019      	b.n	80165a2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	6979      	ldr	r1, [r7, #20]
 8016572:	4618      	mov	r0, r3
 8016574:	f7ff fca3 	bl	8015ebe <get_fat>
 8016578:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016580:	d101      	bne.n	8016586 <dir_sdi+0x90>
 8016582:	2301      	movs	r3, #1
 8016584:	e03c      	b.n	8016600 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	2b01      	cmp	r3, #1
 801658a:	d904      	bls.n	8016596 <dir_sdi+0xa0>
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	69db      	ldr	r3, [r3, #28]
 8016590:	697a      	ldr	r2, [r7, #20]
 8016592:	429a      	cmp	r2, r3
 8016594:	d301      	bcc.n	801659a <dir_sdi+0xa4>
 8016596:	2302      	movs	r3, #2
 8016598:	e032      	b.n	8016600 <dir_sdi+0x10a>
			ofs -= csz;
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	1ad3      	subs	r3, r2, r3
 80165a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80165a2:	683a      	ldr	r2, [r7, #0]
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d2e1      	bcs.n	801656e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80165aa:	6979      	ldr	r1, [r7, #20]
 80165ac:	6938      	ldr	r0, [r7, #16]
 80165ae:	f7ff fc67 	bl	8015e80 <clust2sect>
 80165b2:	4602      	mov	r2, r0
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	697a      	ldr	r2, [r7, #20]
 80165bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	69db      	ldr	r3, [r3, #28]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d101      	bne.n	80165ca <dir_sdi+0xd4>
 80165c6:	2302      	movs	r3, #2
 80165c8:	e01a      	b.n	8016600 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	69da      	ldr	r2, [r3, #28]
 80165ce:	693b      	ldr	r3, [r7, #16]
 80165d0:	899b      	ldrh	r3, [r3, #12]
 80165d2:	4619      	mov	r1, r3
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80165da:	441a      	add	r2, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80165e0:	693b      	ldr	r3, [r7, #16]
 80165e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	899b      	ldrh	r3, [r3, #12]
 80165ea:	461a      	mov	r2, r3
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80165f2:	fb02 f200 	mul.w	r2, r2, r0
 80165f6:	1a9b      	subs	r3, r3, r2
 80165f8:	18ca      	adds	r2, r1, r3
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80165fe:	2300      	movs	r3, #0
}
 8016600:	4618      	mov	r0, r3
 8016602:	3718      	adds	r7, #24
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}

08016608 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b086      	sub	sp, #24
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	695b      	ldr	r3, [r3, #20]
 801661c:	3320      	adds	r3, #32
 801661e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	69db      	ldr	r3, [r3, #28]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d003      	beq.n	8016630 <dir_next+0x28>
 8016628:	68bb      	ldr	r3, [r7, #8]
 801662a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801662e:	d301      	bcc.n	8016634 <dir_next+0x2c>
 8016630:	2304      	movs	r3, #4
 8016632:	e0bb      	b.n	80167ac <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	899b      	ldrh	r3, [r3, #12]
 8016638:	461a      	mov	r2, r3
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016640:	fb02 f201 	mul.w	r2, r2, r1
 8016644:	1a9b      	subs	r3, r3, r2
 8016646:	2b00      	cmp	r3, #0
 8016648:	f040 809d 	bne.w	8016786 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	69db      	ldr	r3, [r3, #28]
 8016650:	1c5a      	adds	r2, r3, #1
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	699b      	ldr	r3, [r3, #24]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d10b      	bne.n	8016676 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	095b      	lsrs	r3, r3, #5
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	8912      	ldrh	r2, [r2, #8]
 8016666:	4293      	cmp	r3, r2
 8016668:	f0c0 808d 	bcc.w	8016786 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2200      	movs	r2, #0
 8016670:	61da      	str	r2, [r3, #28]
 8016672:	2304      	movs	r3, #4
 8016674:	e09a      	b.n	80167ac <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	899b      	ldrh	r3, [r3, #12]
 801667a:	461a      	mov	r2, r3
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	8952      	ldrh	r2, [r2, #10]
 8016686:	3a01      	subs	r2, #1
 8016688:	4013      	ands	r3, r2
 801668a:	2b00      	cmp	r3, #0
 801668c:	d17b      	bne.n	8016786 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801668e:	687a      	ldr	r2, [r7, #4]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	699b      	ldr	r3, [r3, #24]
 8016694:	4619      	mov	r1, r3
 8016696:	4610      	mov	r0, r2
 8016698:	f7ff fc11 	bl	8015ebe <get_fat>
 801669c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d801      	bhi.n	80166a8 <dir_next+0xa0>
 80166a4:	2302      	movs	r3, #2
 80166a6:	e081      	b.n	80167ac <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ae:	d101      	bne.n	80166b4 <dir_next+0xac>
 80166b0:	2301      	movs	r3, #1
 80166b2:	e07b      	b.n	80167ac <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	69db      	ldr	r3, [r3, #28]
 80166b8:	697a      	ldr	r2, [r7, #20]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d359      	bcc.n	8016772 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80166be:	683b      	ldr	r3, [r7, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d104      	bne.n	80166ce <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2200      	movs	r2, #0
 80166c8:	61da      	str	r2, [r3, #28]
 80166ca:	2304      	movs	r3, #4
 80166cc:	e06e      	b.n	80167ac <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	699b      	ldr	r3, [r3, #24]
 80166d4:	4619      	mov	r1, r3
 80166d6:	4610      	mov	r0, r2
 80166d8:	f7ff fe3d 	bl	8016356 <create_chain>
 80166dc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d101      	bne.n	80166e8 <dir_next+0xe0>
 80166e4:	2307      	movs	r3, #7
 80166e6:	e061      	b.n	80167ac <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80166e8:	697b      	ldr	r3, [r7, #20]
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	d101      	bne.n	80166f2 <dir_next+0xea>
 80166ee:	2302      	movs	r3, #2
 80166f0:	e05c      	b.n	80167ac <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166f8:	d101      	bne.n	80166fe <dir_next+0xf6>
 80166fa:	2301      	movs	r3, #1
 80166fc:	e056      	b.n	80167ac <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80166fe:	68f8      	ldr	r0, [r7, #12]
 8016700:	f7ff fadc 	bl	8015cbc <sync_window>
 8016704:	4603      	mov	r3, r0
 8016706:	2b00      	cmp	r3, #0
 8016708:	d001      	beq.n	801670e <dir_next+0x106>
 801670a:	2301      	movs	r3, #1
 801670c:	e04e      	b.n	80167ac <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	899b      	ldrh	r3, [r3, #12]
 8016718:	461a      	mov	r2, r3
 801671a:	2100      	movs	r1, #0
 801671c:	f7ff f8d5 	bl	80158ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016720:	2300      	movs	r3, #0
 8016722:	613b      	str	r3, [r7, #16]
 8016724:	6979      	ldr	r1, [r7, #20]
 8016726:	68f8      	ldr	r0, [r7, #12]
 8016728:	f7ff fbaa 	bl	8015e80 <clust2sect>
 801672c:	4602      	mov	r2, r0
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	635a      	str	r2, [r3, #52]	; 0x34
 8016732:	e012      	b.n	801675a <dir_next+0x152>
						fs->wflag = 1;
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2201      	movs	r2, #1
 8016738:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801673a:	68f8      	ldr	r0, [r7, #12]
 801673c:	f7ff fabe 	bl	8015cbc <sync_window>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d001      	beq.n	801674a <dir_next+0x142>
 8016746:	2301      	movs	r3, #1
 8016748:	e030      	b.n	80167ac <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	3301      	adds	r3, #1
 801674e:	613b      	str	r3, [r7, #16]
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016754:	1c5a      	adds	r2, r3, #1
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	635a      	str	r2, [r3, #52]	; 0x34
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	895b      	ldrh	r3, [r3, #10]
 801675e:	461a      	mov	r2, r3
 8016760:	693b      	ldr	r3, [r7, #16]
 8016762:	4293      	cmp	r3, r2
 8016764:	d3e6      	bcc.n	8016734 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801676a:	693b      	ldr	r3, [r7, #16]
 801676c:	1ad2      	subs	r2, r2, r3
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	697a      	ldr	r2, [r7, #20]
 8016776:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016778:	6979      	ldr	r1, [r7, #20]
 801677a:	68f8      	ldr	r0, [r7, #12]
 801677c:	f7ff fb80 	bl	8015e80 <clust2sect>
 8016780:	4602      	mov	r2, r0
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	68ba      	ldr	r2, [r7, #8]
 801678a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	899b      	ldrh	r3, [r3, #12]
 8016796:	461a      	mov	r2, r3
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	fbb3 f0f2 	udiv	r0, r3, r2
 801679e:	fb02 f200 	mul.w	r2, r2, r0
 80167a2:	1a9b      	subs	r3, r3, r2
 80167a4:	18ca      	adds	r2, r1, r3
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80167aa:	2300      	movs	r3, #0
}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3718      	adds	r7, #24
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}

080167b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b086      	sub	sp, #24
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80167c4:	2100      	movs	r1, #0
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f7ff fe95 	bl	80164f6 <dir_sdi>
 80167cc:	4603      	mov	r3, r0
 80167ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80167d0:	7dfb      	ldrb	r3, [r7, #23]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d12b      	bne.n	801682e <dir_alloc+0x7a>
		n = 0;
 80167d6:	2300      	movs	r3, #0
 80167d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	69db      	ldr	r3, [r3, #28]
 80167de:	4619      	mov	r1, r3
 80167e0:	68f8      	ldr	r0, [r7, #12]
 80167e2:	f7ff faaf 	bl	8015d44 <move_window>
 80167e6:	4603      	mov	r3, r0
 80167e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80167ea:	7dfb      	ldrb	r3, [r7, #23]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d11d      	bne.n	801682c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	6a1b      	ldr	r3, [r3, #32]
 80167f4:	781b      	ldrb	r3, [r3, #0]
 80167f6:	2be5      	cmp	r3, #229	; 0xe5
 80167f8:	d004      	beq.n	8016804 <dir_alloc+0x50>
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6a1b      	ldr	r3, [r3, #32]
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d107      	bne.n	8016814 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	3301      	adds	r3, #1
 8016808:	613b      	str	r3, [r7, #16]
 801680a:	693a      	ldr	r2, [r7, #16]
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	429a      	cmp	r2, r3
 8016810:	d102      	bne.n	8016818 <dir_alloc+0x64>
 8016812:	e00c      	b.n	801682e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016814:	2300      	movs	r3, #0
 8016816:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016818:	2101      	movs	r1, #1
 801681a:	6878      	ldr	r0, [r7, #4]
 801681c:	f7ff fef4 	bl	8016608 <dir_next>
 8016820:	4603      	mov	r3, r0
 8016822:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016824:	7dfb      	ldrb	r3, [r7, #23]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d0d7      	beq.n	80167da <dir_alloc+0x26>
 801682a:	e000      	b.n	801682e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801682c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801682e:	7dfb      	ldrb	r3, [r7, #23]
 8016830:	2b04      	cmp	r3, #4
 8016832:	d101      	bne.n	8016838 <dir_alloc+0x84>
 8016834:	2307      	movs	r3, #7
 8016836:	75fb      	strb	r3, [r7, #23]
	return res;
 8016838:	7dfb      	ldrb	r3, [r7, #23]
}
 801683a:	4618      	mov	r0, r3
 801683c:	3718      	adds	r7, #24
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}

08016842 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016842:	b580      	push	{r7, lr}
 8016844:	b084      	sub	sp, #16
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
 801684a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	331a      	adds	r3, #26
 8016850:	4618      	mov	r0, r3
 8016852:	f7fe ff97 	bl	8015784 <ld_word>
 8016856:	4603      	mov	r3, r0
 8016858:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	781b      	ldrb	r3, [r3, #0]
 801685e:	2b03      	cmp	r3, #3
 8016860:	d109      	bne.n	8016876 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	3314      	adds	r3, #20
 8016866:	4618      	mov	r0, r3
 8016868:	f7fe ff8c 	bl	8015784 <ld_word>
 801686c:	4603      	mov	r3, r0
 801686e:	041b      	lsls	r3, r3, #16
 8016870:	68fa      	ldr	r2, [r7, #12]
 8016872:	4313      	orrs	r3, r2
 8016874:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016876:	68fb      	ldr	r3, [r7, #12]
}
 8016878:	4618      	mov	r0, r3
 801687a:	3710      	adds	r7, #16
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}

08016880 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b084      	sub	sp, #16
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	331a      	adds	r3, #26
 8016890:	687a      	ldr	r2, [r7, #4]
 8016892:	b292      	uxth	r2, r2
 8016894:	4611      	mov	r1, r2
 8016896:	4618      	mov	r0, r3
 8016898:	f7fe ffaf 	bl	80157fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	2b03      	cmp	r3, #3
 80168a2:	d109      	bne.n	80168b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80168a4:	68bb      	ldr	r3, [r7, #8]
 80168a6:	f103 0214 	add.w	r2, r3, #20
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	0c1b      	lsrs	r3, r3, #16
 80168ae:	b29b      	uxth	r3, r3
 80168b0:	4619      	mov	r1, r3
 80168b2:	4610      	mov	r0, r2
 80168b4:	f7fe ffa1 	bl	80157fa <st_word>
	}
}
 80168b8:	bf00      	nop
 80168ba:	3710      	adds	r7, #16
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b086      	sub	sp, #24
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80168ce:	2100      	movs	r1, #0
 80168d0:	6878      	ldr	r0, [r7, #4]
 80168d2:	f7ff fe10 	bl	80164f6 <dir_sdi>
 80168d6:	4603      	mov	r3, r0
 80168d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80168da:	7dfb      	ldrb	r3, [r7, #23]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d001      	beq.n	80168e4 <dir_find+0x24>
 80168e0:	7dfb      	ldrb	r3, [r7, #23]
 80168e2:	e03e      	b.n	8016962 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	69db      	ldr	r3, [r3, #28]
 80168e8:	4619      	mov	r1, r3
 80168ea:	6938      	ldr	r0, [r7, #16]
 80168ec:	f7ff fa2a 	bl	8015d44 <move_window>
 80168f0:	4603      	mov	r3, r0
 80168f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80168f4:	7dfb      	ldrb	r3, [r7, #23]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d12f      	bne.n	801695a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6a1b      	ldr	r3, [r3, #32]
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016902:	7bfb      	ldrb	r3, [r7, #15]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d102      	bne.n	801690e <dir_find+0x4e>
 8016908:	2304      	movs	r3, #4
 801690a:	75fb      	strb	r3, [r7, #23]
 801690c:	e028      	b.n	8016960 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	6a1b      	ldr	r3, [r3, #32]
 8016912:	330b      	adds	r3, #11
 8016914:	781b      	ldrb	r3, [r3, #0]
 8016916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801691a:	b2da      	uxtb	r2, r3
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	6a1b      	ldr	r3, [r3, #32]
 8016924:	330b      	adds	r3, #11
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	f003 0308 	and.w	r3, r3, #8
 801692c:	2b00      	cmp	r3, #0
 801692e:	d10a      	bne.n	8016946 <dir_find+0x86>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6a18      	ldr	r0, [r3, #32]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	3324      	adds	r3, #36	; 0x24
 8016938:	220b      	movs	r2, #11
 801693a:	4619      	mov	r1, r3
 801693c:	f7fe ffdf 	bl	80158fe <mem_cmp>
 8016940:	4603      	mov	r3, r0
 8016942:	2b00      	cmp	r3, #0
 8016944:	d00b      	beq.n	801695e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016946:	2100      	movs	r1, #0
 8016948:	6878      	ldr	r0, [r7, #4]
 801694a:	f7ff fe5d 	bl	8016608 <dir_next>
 801694e:	4603      	mov	r3, r0
 8016950:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016952:	7dfb      	ldrb	r3, [r7, #23]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d0c5      	beq.n	80168e4 <dir_find+0x24>
 8016958:	e002      	b.n	8016960 <dir_find+0xa0>
		if (res != FR_OK) break;
 801695a:	bf00      	nop
 801695c:	e000      	b.n	8016960 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801695e:	bf00      	nop

	return res;
 8016960:	7dfb      	ldrb	r3, [r7, #23]
}
 8016962:	4618      	mov	r0, r3
 8016964:	3718      	adds	r7, #24
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b084      	sub	sp, #16
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8016978:	2101      	movs	r1, #1
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f7ff ff1a 	bl	80167b4 <dir_alloc>
 8016980:	4603      	mov	r3, r0
 8016982:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016984:	7bfb      	ldrb	r3, [r7, #15]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d11c      	bne.n	80169c4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	69db      	ldr	r3, [r3, #28]
 801698e:	4619      	mov	r1, r3
 8016990:	68b8      	ldr	r0, [r7, #8]
 8016992:	f7ff f9d7 	bl	8015d44 <move_window>
 8016996:	4603      	mov	r3, r0
 8016998:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801699a:	7bfb      	ldrb	r3, [r7, #15]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d111      	bne.n	80169c4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6a1b      	ldr	r3, [r3, #32]
 80169a4:	2220      	movs	r2, #32
 80169a6:	2100      	movs	r1, #0
 80169a8:	4618      	mov	r0, r3
 80169aa:	f7fe ff8e 	bl	80158ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6a18      	ldr	r0, [r3, #32]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	3324      	adds	r3, #36	; 0x24
 80169b6:	220b      	movs	r2, #11
 80169b8:	4619      	mov	r1, r3
 80169ba:	f7fe ff65 	bl	8015888 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	2201      	movs	r2, #1
 80169c2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80169c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
	...

080169d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b088      	sub	sp, #32
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
 80169d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	60fb      	str	r3, [r7, #12]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	3324      	adds	r3, #36	; 0x24
 80169e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80169e6:	220b      	movs	r2, #11
 80169e8:	2120      	movs	r1, #32
 80169ea:	68b8      	ldr	r0, [r7, #8]
 80169ec:	f7fe ff6d 	bl	80158ca <mem_set>
	si = i = 0; ni = 8;
 80169f0:	2300      	movs	r3, #0
 80169f2:	613b      	str	r3, [r7, #16]
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	617b      	str	r3, [r7, #20]
 80169f8:	2308      	movs	r3, #8
 80169fa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	1c5a      	adds	r2, r3, #1
 8016a00:	617a      	str	r2, [r7, #20]
 8016a02:	68fa      	ldr	r2, [r7, #12]
 8016a04:	4413      	add	r3, r2
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016a0a:	7ffb      	ldrb	r3, [r7, #31]
 8016a0c:	2b20      	cmp	r3, #32
 8016a0e:	d94b      	bls.n	8016aa8 <create_name+0xd8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8016a10:	7ffb      	ldrb	r3, [r7, #31]
 8016a12:	2b2f      	cmp	r3, #47	; 0x2f
 8016a14:	d006      	beq.n	8016a24 <create_name+0x54>
 8016a16:	7ffb      	ldrb	r3, [r7, #31]
 8016a18:	2b5c      	cmp	r3, #92	; 0x5c
 8016a1a:	d110      	bne.n	8016a3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016a1c:	e002      	b.n	8016a24 <create_name+0x54>
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	3301      	adds	r3, #1
 8016a22:	617b      	str	r3, [r7, #20]
 8016a24:	68fa      	ldr	r2, [r7, #12]
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	4413      	add	r3, r2
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	2b2f      	cmp	r3, #47	; 0x2f
 8016a2e:	d0f6      	beq.n	8016a1e <create_name+0x4e>
 8016a30:	68fa      	ldr	r2, [r7, #12]
 8016a32:	697b      	ldr	r3, [r7, #20]
 8016a34:	4413      	add	r3, r2
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	2b5c      	cmp	r3, #92	; 0x5c
 8016a3a:	d0f0      	beq.n	8016a1e <create_name+0x4e>
			break;
 8016a3c:	e035      	b.n	8016aaa <create_name+0xda>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8016a3e:	7ffb      	ldrb	r3, [r7, #31]
 8016a40:	2b2e      	cmp	r3, #46	; 0x2e
 8016a42:	d003      	beq.n	8016a4c <create_name+0x7c>
 8016a44:	693a      	ldr	r2, [r7, #16]
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d30c      	bcc.n	8016a66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8016a4c:	69bb      	ldr	r3, [r7, #24]
 8016a4e:	2b0b      	cmp	r3, #11
 8016a50:	d002      	beq.n	8016a58 <create_name+0x88>
 8016a52:	7ffb      	ldrb	r3, [r7, #31]
 8016a54:	2b2e      	cmp	r3, #46	; 0x2e
 8016a56:	d001      	beq.n	8016a5c <create_name+0x8c>
 8016a58:	2306      	movs	r3, #6
 8016a5a:	e041      	b.n	8016ae0 <create_name+0x110>
			i = 8; ni = 11;				/* Goto extension */
 8016a5c:	2308      	movs	r3, #8
 8016a5e:	613b      	str	r3, [r7, #16]
 8016a60:	230b      	movs	r3, #11
 8016a62:	61bb      	str	r3, [r7, #24]
			continue;
 8016a64:	e01f      	b.n	8016aa6 <create_name+0xd6>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016a66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	da01      	bge.n	8016a72 <create_name+0xa2>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
 8016a6e:	2306      	movs	r3, #6
 8016a70:	e036      	b.n	8016ae0 <create_name+0x110>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016a72:	7ffb      	ldrb	r3, [r7, #31]
 8016a74:	4619      	mov	r1, r3
 8016a76:	481c      	ldr	r0, [pc, #112]	; (8016ae8 <create_name+0x118>)
 8016a78:	f7fe ff68 	bl	801594c <chk_chr>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d001      	beq.n	8016a86 <create_name+0xb6>
 8016a82:	2306      	movs	r3, #6
 8016a84:	e02c      	b.n	8016ae0 <create_name+0x110>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8016a86:	7ffb      	ldrb	r3, [r7, #31]
 8016a88:	2b60      	cmp	r3, #96	; 0x60
 8016a8a:	d905      	bls.n	8016a98 <create_name+0xc8>
 8016a8c:	7ffb      	ldrb	r3, [r7, #31]
 8016a8e:	2b7a      	cmp	r3, #122	; 0x7a
 8016a90:	d802      	bhi.n	8016a98 <create_name+0xc8>
 8016a92:	7ffb      	ldrb	r3, [r7, #31]
 8016a94:	3b20      	subs	r3, #32
 8016a96:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	1c5a      	adds	r2, r3, #1
 8016a9c:	613a      	str	r2, [r7, #16]
 8016a9e:	68ba      	ldr	r2, [r7, #8]
 8016aa0:	4413      	add	r3, r2
 8016aa2:	7ffa      	ldrb	r2, [r7, #31]
 8016aa4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8016aa6:	e7a9      	b.n	80169fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016aa8:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016aaa:	68fa      	ldr	r2, [r7, #12]
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	441a      	add	r2, r3
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d101      	bne.n	8016abe <create_name+0xee>
 8016aba:	2306      	movs	r3, #6
 8016abc:	e010      	b.n	8016ae0 <create_name+0x110>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	781b      	ldrb	r3, [r3, #0]
 8016ac2:	2be5      	cmp	r3, #229	; 0xe5
 8016ac4:	d102      	bne.n	8016acc <create_name+0xfc>
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	2205      	movs	r2, #5
 8016aca:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016acc:	7ffb      	ldrb	r3, [r7, #31]
 8016ace:	2b20      	cmp	r3, #32
 8016ad0:	d801      	bhi.n	8016ad6 <create_name+0x106>
 8016ad2:	2204      	movs	r2, #4
 8016ad4:	e000      	b.n	8016ad8 <create_name+0x108>
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	330b      	adds	r3, #11
 8016adc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016ade:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3720      	adds	r7, #32
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	08021fc8 	.word	0x08021fc8

08016aec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b086      	sub	sp, #24
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016b00:	e002      	b.n	8016b08 <follow_path+0x1c>
 8016b02:	683b      	ldr	r3, [r7, #0]
 8016b04:	3301      	adds	r3, #1
 8016b06:	603b      	str	r3, [r7, #0]
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8016b0e:	d0f8      	beq.n	8016b02 <follow_path+0x16>
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	2b5c      	cmp	r3, #92	; 0x5c
 8016b16:	d0f4      	beq.n	8016b02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	2b1f      	cmp	r3, #31
 8016b24:	d80a      	bhi.n	8016b3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2280      	movs	r2, #128	; 0x80
 8016b2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016b2e:	2100      	movs	r1, #0
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7ff fce0 	bl	80164f6 <dir_sdi>
 8016b36:	4603      	mov	r3, r0
 8016b38:	75fb      	strb	r3, [r7, #23]
 8016b3a:	e048      	b.n	8016bce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016b3c:	463b      	mov	r3, r7
 8016b3e:	4619      	mov	r1, r3
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f7ff ff45 	bl	80169d0 <create_name>
 8016b46:	4603      	mov	r3, r0
 8016b48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016b4a:	7dfb      	ldrb	r3, [r7, #23]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d139      	bne.n	8016bc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f7ff feb5 	bl	80168c0 <dir_find>
 8016b56:	4603      	mov	r3, r0
 8016b58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016b60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016b62:	7dfb      	ldrb	r3, [r7, #23]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d00a      	beq.n	8016b7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016b68:	7dfb      	ldrb	r3, [r7, #23]
 8016b6a:	2b04      	cmp	r3, #4
 8016b6c:	d12c      	bne.n	8016bc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016b6e:	7afb      	ldrb	r3, [r7, #11]
 8016b70:	f003 0304 	and.w	r3, r3, #4
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d127      	bne.n	8016bc8 <follow_path+0xdc>
 8016b78:	2305      	movs	r3, #5
 8016b7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016b7c:	e024      	b.n	8016bc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016b7e:	7afb      	ldrb	r3, [r7, #11]
 8016b80:	f003 0304 	and.w	r3, r3, #4
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d121      	bne.n	8016bcc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	799b      	ldrb	r3, [r3, #6]
 8016b8c:	f003 0310 	and.w	r3, r3, #16
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d102      	bne.n	8016b9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016b94:	2305      	movs	r3, #5
 8016b96:	75fb      	strb	r3, [r7, #23]
 8016b98:	e019      	b.n	8016bce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	695b      	ldr	r3, [r3, #20]
 8016ba4:	68fa      	ldr	r2, [r7, #12]
 8016ba6:	8992      	ldrh	r2, [r2, #12]
 8016ba8:	fbb3 f0f2 	udiv	r0, r3, r2
 8016bac:	fb02 f200 	mul.w	r2, r2, r0
 8016bb0:	1a9b      	subs	r3, r3, r2
 8016bb2:	440b      	add	r3, r1
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f7ff fe43 	bl	8016842 <ld_clust>
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016bc2:	e7bb      	b.n	8016b3c <follow_path+0x50>
			if (res != FR_OK) break;
 8016bc4:	bf00      	nop
 8016bc6:	e002      	b.n	8016bce <follow_path+0xe2>
				break;
 8016bc8:	bf00      	nop
 8016bca:	e000      	b.n	8016bce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016bcc:	bf00      	nop
			}
		}
	}

	return res;
 8016bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3718      	adds	r7, #24
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b087      	sub	sp, #28
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016be0:	f04f 33ff 	mov.w	r3, #4294967295
 8016be4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d031      	beq.n	8016c52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	617b      	str	r3, [r7, #20]
 8016bf4:	e002      	b.n	8016bfc <get_ldnumber+0x24>
 8016bf6:	697b      	ldr	r3, [r7, #20]
 8016bf8:	3301      	adds	r3, #1
 8016bfa:	617b      	str	r3, [r7, #20]
 8016bfc:	697b      	ldr	r3, [r7, #20]
 8016bfe:	781b      	ldrb	r3, [r3, #0]
 8016c00:	2b20      	cmp	r3, #32
 8016c02:	d903      	bls.n	8016c0c <get_ldnumber+0x34>
 8016c04:	697b      	ldr	r3, [r7, #20]
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	2b3a      	cmp	r3, #58	; 0x3a
 8016c0a:	d1f4      	bne.n	8016bf6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	781b      	ldrb	r3, [r3, #0]
 8016c10:	2b3a      	cmp	r3, #58	; 0x3a
 8016c12:	d11c      	bne.n	8016c4e <get_ldnumber+0x76>
			tp = *path;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	1c5a      	adds	r2, r3, #1
 8016c1e:	60fa      	str	r2, [r7, #12]
 8016c20:	781b      	ldrb	r3, [r3, #0]
 8016c22:	3b30      	subs	r3, #48	; 0x30
 8016c24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	2b09      	cmp	r3, #9
 8016c2a:	d80e      	bhi.n	8016c4a <get_ldnumber+0x72>
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d10a      	bne.n	8016c4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d107      	bne.n	8016c4a <get_ldnumber+0x72>
					vol = (int)i;
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016c3e:	697b      	ldr	r3, [r7, #20]
 8016c40:	3301      	adds	r3, #1
 8016c42:	617b      	str	r3, [r7, #20]
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	697a      	ldr	r2, [r7, #20]
 8016c48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	e002      	b.n	8016c54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016c4e:	2300      	movs	r3, #0
 8016c50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016c52:	693b      	ldr	r3, [r7, #16]
}
 8016c54:	4618      	mov	r0, r3
 8016c56:	371c      	adds	r7, #28
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5e:	4770      	bx	lr

08016c60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	70da      	strb	r2, [r3, #3]
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f04f 32ff 	mov.w	r2, #4294967295
 8016c76:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016c78:	6839      	ldr	r1, [r7, #0]
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f7ff f862 	bl	8015d44 <move_window>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d001      	beq.n	8016c8a <check_fs+0x2a>
 8016c86:	2304      	movs	r3, #4
 8016c88:	e038      	b.n	8016cfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	3338      	adds	r3, #56	; 0x38
 8016c8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7fe fd76 	bl	8015784 <ld_word>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d001      	beq.n	8016ca8 <check_fs+0x48>
 8016ca4:	2303      	movs	r3, #3
 8016ca6:	e029      	b.n	8016cfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cae:	2be9      	cmp	r3, #233	; 0xe9
 8016cb0:	d009      	beq.n	8016cc6 <check_fs+0x66>
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cb8:	2beb      	cmp	r3, #235	; 0xeb
 8016cba:	d11e      	bne.n	8016cfa <check_fs+0x9a>
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016cc2:	2b90      	cmp	r3, #144	; 0x90
 8016cc4:	d119      	bne.n	8016cfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	3338      	adds	r3, #56	; 0x38
 8016cca:	3336      	adds	r3, #54	; 0x36
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7fe fd71 	bl	80157b4 <ld_dword>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016cd8:	4a0a      	ldr	r2, [pc, #40]	; (8016d04 <check_fs+0xa4>)
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	d101      	bne.n	8016ce2 <check_fs+0x82>
 8016cde:	2300      	movs	r3, #0
 8016ce0:	e00c      	b.n	8016cfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	3338      	adds	r3, #56	; 0x38
 8016ce6:	3352      	adds	r3, #82	; 0x52
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f7fe fd63 	bl	80157b4 <ld_dword>
 8016cee:	4602      	mov	r2, r0
 8016cf0:	4b05      	ldr	r3, [pc, #20]	; (8016d08 <check_fs+0xa8>)
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d101      	bne.n	8016cfa <check_fs+0x9a>
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	e000      	b.n	8016cfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016cfa:	2302      	movs	r3, #2
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	3708      	adds	r7, #8
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}
 8016d04:	00544146 	.word	0x00544146
 8016d08:	33544146 	.word	0x33544146

08016d0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b096      	sub	sp, #88	; 0x58
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	60b9      	str	r1, [r7, #8]
 8016d16:	4613      	mov	r3, r2
 8016d18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016d20:	68f8      	ldr	r0, [r7, #12]
 8016d22:	f7ff ff59 	bl	8016bd8 <get_ldnumber>
 8016d26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	da01      	bge.n	8016d32 <find_volume+0x26>
 8016d2e:	230b      	movs	r3, #11
 8016d30:	e26c      	b.n	801720c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016d32:	4aa4      	ldr	r2, [pc, #656]	; (8016fc4 <find_volume+0x2b8>)
 8016d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d101      	bne.n	8016d46 <find_volume+0x3a>
 8016d42:	230c      	movs	r3, #12
 8016d44:	e262      	b.n	801720c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8016d46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016d48:	f7fe fe1b 	bl	8015982 <lock_fs>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d101      	bne.n	8016d56 <find_volume+0x4a>
 8016d52:	230f      	movs	r3, #15
 8016d54:	e25a      	b.n	801720c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8016d56:	68bb      	ldr	r3, [r7, #8]
 8016d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016d5c:	79fb      	ldrb	r3, [r7, #7]
 8016d5e:	f023 0301 	bic.w	r3, r3, #1
 8016d62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d66:	781b      	ldrb	r3, [r3, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d01a      	beq.n	8016da2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8016d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d6e:	785b      	ldrb	r3, [r3, #1]
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7fe fc69 	bl	8015648 <disk_status>
 8016d76:	4603      	mov	r3, r0
 8016d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d80:	f003 0301 	and.w	r3, r3, #1
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d10c      	bne.n	8016da2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016d88:	79fb      	ldrb	r3, [r7, #7]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d007      	beq.n	8016d9e <find_volume+0x92>
 8016d8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d92:	f003 0304 	and.w	r3, r3, #4
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d001      	beq.n	8016d9e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8016d9a:	230a      	movs	r3, #10
 8016d9c:	e236      	b.n	801720c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8016d9e:	2300      	movs	r3, #0
 8016da0:	e234      	b.n	801720c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da4:	2200      	movs	r2, #0
 8016da6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016daa:	b2da      	uxtb	r2, r3
 8016dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db2:	785b      	ldrb	r3, [r3, #1]
 8016db4:	4618      	mov	r0, r3
 8016db6:	f7fe fc61 	bl	801567c <disk_initialize>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016dc4:	f003 0301 	and.w	r3, r3, #1
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d001      	beq.n	8016dd0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016dcc:	2303      	movs	r3, #3
 8016dce:	e21d      	b.n	801720c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016dd0:	79fb      	ldrb	r3, [r7, #7]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d007      	beq.n	8016de6 <find_volume+0xda>
 8016dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016dda:	f003 0304 	and.w	r3, r3, #4
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d001      	beq.n	8016de6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8016de2:	230a      	movs	r3, #10
 8016de4:	e212      	b.n	801720c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8016de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016de8:	7858      	ldrb	r0, [r3, #1]
 8016dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dec:	330c      	adds	r3, #12
 8016dee:	461a      	mov	r2, r3
 8016df0:	2102      	movs	r1, #2
 8016df2:	f7fe fca9 	bl	8015748 <disk_ioctl>
 8016df6:	4603      	mov	r3, r0
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d001      	beq.n	8016e00 <find_volume+0xf4>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	e205      	b.n	801720c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e02:	899b      	ldrh	r3, [r3, #12]
 8016e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016e08:	d80d      	bhi.n	8016e26 <find_volume+0x11a>
 8016e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e0c:	899b      	ldrh	r3, [r3, #12]
 8016e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e12:	d308      	bcc.n	8016e26 <find_volume+0x11a>
 8016e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e16:	899b      	ldrh	r3, [r3, #12]
 8016e18:	461a      	mov	r2, r3
 8016e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e1c:	899b      	ldrh	r3, [r3, #12]
 8016e1e:	3b01      	subs	r3, #1
 8016e20:	4013      	ands	r3, r2
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d001      	beq.n	8016e2a <find_volume+0x11e>
 8016e26:	2301      	movs	r3, #1
 8016e28:	e1f0      	b.n	801720c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016e2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016e30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e32:	f7ff ff15 	bl	8016c60 <check_fs>
 8016e36:	4603      	mov	r3, r0
 8016e38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e40:	2b02      	cmp	r3, #2
 8016e42:	d14b      	bne.n	8016edc <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016e44:	2300      	movs	r3, #0
 8016e46:	643b      	str	r3, [r7, #64]	; 0x40
 8016e48:	e01f      	b.n	8016e8a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e52:	011b      	lsls	r3, r3, #4
 8016e54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016e58:	4413      	add	r3, r2
 8016e5a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e5e:	3304      	adds	r3, #4
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d006      	beq.n	8016e74 <find_volume+0x168>
 8016e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e68:	3308      	adds	r3, #8
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f7fe fca2 	bl	80157b4 <ld_dword>
 8016e70:	4602      	mov	r2, r0
 8016e72:	e000      	b.n	8016e76 <find_volume+0x16a>
 8016e74:	2200      	movs	r2, #0
 8016e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e78:	009b      	lsls	r3, r3, #2
 8016e7a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016e7e:	440b      	add	r3, r1
 8016e80:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e86:	3301      	adds	r3, #1
 8016e88:	643b      	str	r3, [r7, #64]	; 0x40
 8016e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e8c:	2b03      	cmp	r3, #3
 8016e8e:	d9dc      	bls.n	8016e4a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016e90:	2300      	movs	r3, #0
 8016e92:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d002      	beq.n	8016ea0 <find_volume+0x194>
 8016e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e9c:	3b01      	subs	r3, #1
 8016e9e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ea2:	009b      	lsls	r3, r3, #2
 8016ea4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016ea8:	4413      	add	r3, r2
 8016eaa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016eae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d005      	beq.n	8016ec2 <find_volume+0x1b6>
 8016eb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016eb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016eba:	f7ff fed1 	bl	8016c60 <check_fs>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	e000      	b.n	8016ec4 <find_volume+0x1b8>
 8016ec2:	2303      	movs	r3, #3
 8016ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d905      	bls.n	8016edc <find_volume+0x1d0>
 8016ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8016ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ed8:	2b03      	cmp	r3, #3
 8016eda:	d9e1      	bls.n	8016ea0 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016edc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ee0:	2b04      	cmp	r3, #4
 8016ee2:	d101      	bne.n	8016ee8 <find_volume+0x1dc>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	e191      	b.n	801720c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016eec:	2b01      	cmp	r3, #1
 8016eee:	d901      	bls.n	8016ef4 <find_volume+0x1e8>
 8016ef0:	230d      	movs	r3, #13
 8016ef2:	e18b      	b.n	801720c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	3338      	adds	r3, #56	; 0x38
 8016ef8:	330b      	adds	r3, #11
 8016efa:	4618      	mov	r0, r3
 8016efc:	f7fe fc42 	bl	8015784 <ld_word>
 8016f00:	4603      	mov	r3, r0
 8016f02:	461a      	mov	r2, r3
 8016f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f06:	899b      	ldrh	r3, [r3, #12]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d001      	beq.n	8016f10 <find_volume+0x204>
 8016f0c:	230d      	movs	r3, #13
 8016f0e:	e17d      	b.n	801720c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f12:	3338      	adds	r3, #56	; 0x38
 8016f14:	3316      	adds	r3, #22
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7fe fc34 	bl	8015784 <ld_word>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d106      	bne.n	8016f34 <find_volume+0x228>
 8016f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f28:	3338      	adds	r3, #56	; 0x38
 8016f2a:	3324      	adds	r3, #36	; 0x24
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f7fe fc41 	bl	80157b4 <ld_dword>
 8016f32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f38:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f46:	789b      	ldrb	r3, [r3, #2]
 8016f48:	2b01      	cmp	r3, #1
 8016f4a:	d005      	beq.n	8016f58 <find_volume+0x24c>
 8016f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4e:	789b      	ldrb	r3, [r3, #2]
 8016f50:	2b02      	cmp	r3, #2
 8016f52:	d001      	beq.n	8016f58 <find_volume+0x24c>
 8016f54:	230d      	movs	r3, #13
 8016f56:	e159      	b.n	801720c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f5a:	789b      	ldrb	r3, [r3, #2]
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f60:	fb02 f303 	mul.w	r3, r2, r3
 8016f64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f6c:	b29a      	uxth	r2, r3
 8016f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f74:	895b      	ldrh	r3, [r3, #10]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d008      	beq.n	8016f8c <find_volume+0x280>
 8016f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7c:	895b      	ldrh	r3, [r3, #10]
 8016f7e:	461a      	mov	r2, r3
 8016f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f82:	895b      	ldrh	r3, [r3, #10]
 8016f84:	3b01      	subs	r3, #1
 8016f86:	4013      	ands	r3, r2
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d001      	beq.n	8016f90 <find_volume+0x284>
 8016f8c:	230d      	movs	r3, #13
 8016f8e:	e13d      	b.n	801720c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f92:	3338      	adds	r3, #56	; 0x38
 8016f94:	3311      	adds	r3, #17
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7fe fbf4 	bl	8015784 <ld_word>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa6:	891b      	ldrh	r3, [r3, #8]
 8016fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016faa:	8992      	ldrh	r2, [r2, #12]
 8016fac:	0952      	lsrs	r2, r2, #5
 8016fae:	b292      	uxth	r2, r2
 8016fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8016fb4:	fb02 f201 	mul.w	r2, r2, r1
 8016fb8:	1a9b      	subs	r3, r3, r2
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d003      	beq.n	8016fc8 <find_volume+0x2bc>
 8016fc0:	230d      	movs	r3, #13
 8016fc2:	e123      	b.n	801720c <find_volume+0x500>
 8016fc4:	20000b74 	.word	0x20000b74

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fca:	3338      	adds	r3, #56	; 0x38
 8016fcc:	3313      	adds	r3, #19
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f7fe fbd8 	bl	8015784 <ld_word>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d106      	bne.n	8016fec <find_volume+0x2e0>
 8016fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fe0:	3338      	adds	r3, #56	; 0x38
 8016fe2:	3320      	adds	r3, #32
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7fe fbe5 	bl	80157b4 <ld_dword>
 8016fea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fee:	3338      	adds	r3, #56	; 0x38
 8016ff0:	330e      	adds	r3, #14
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7fe fbc6 	bl	8015784 <ld_word>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016ffc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d101      	bne.n	8017006 <find_volume+0x2fa>
 8017002:	230d      	movs	r3, #13
 8017004:	e102      	b.n	801720c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017006:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801700a:	4413      	add	r3, r2
 801700c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801700e:	8911      	ldrh	r1, [r2, #8]
 8017010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017012:	8992      	ldrh	r2, [r2, #12]
 8017014:	0952      	lsrs	r2, r2, #5
 8017016:	b292      	uxth	r2, r2
 8017018:	fbb1 f2f2 	udiv	r2, r1, r2
 801701c:	b292      	uxth	r2, r2
 801701e:	4413      	add	r3, r2
 8017020:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017026:	429a      	cmp	r2, r3
 8017028:	d201      	bcs.n	801702e <find_volume+0x322>
 801702a:	230d      	movs	r3, #13
 801702c:	e0ee      	b.n	801720c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801702e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017032:	1ad3      	subs	r3, r2, r3
 8017034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017036:	8952      	ldrh	r2, [r2, #10]
 8017038:	fbb3 f3f2 	udiv	r3, r3, r2
 801703c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017040:	2b00      	cmp	r3, #0
 8017042:	d101      	bne.n	8017048 <find_volume+0x33c>
 8017044:	230d      	movs	r3, #13
 8017046:	e0e1      	b.n	801720c <find_volume+0x500>
		fmt = FS_FAT32;
 8017048:	2303      	movs	r3, #3
 801704a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017050:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017054:	4293      	cmp	r3, r2
 8017056:	d802      	bhi.n	801705e <find_volume+0x352>
 8017058:	2302      	movs	r3, #2
 801705a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017060:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017064:	4293      	cmp	r3, r2
 8017066:	d802      	bhi.n	801706e <find_volume+0x362>
 8017068:	2301      	movs	r3, #1
 801706a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017070:	1c9a      	adds	r2, r3, #2
 8017072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017074:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8017076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017078:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801707a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801707c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801707e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017080:	441a      	add	r2, r3
 8017082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017084:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8017086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708a:	441a      	add	r2, r3
 801708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801708e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8017090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017094:	2b03      	cmp	r3, #3
 8017096:	d11e      	bne.n	80170d6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801709a:	3338      	adds	r3, #56	; 0x38
 801709c:	332a      	adds	r3, #42	; 0x2a
 801709e:	4618      	mov	r0, r3
 80170a0:	f7fe fb70 	bl	8015784 <ld_word>
 80170a4:	4603      	mov	r3, r0
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d001      	beq.n	80170ae <find_volume+0x3a2>
 80170aa:	230d      	movs	r3, #13
 80170ac:	e0ae      	b.n	801720c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80170ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b0:	891b      	ldrh	r3, [r3, #8]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d001      	beq.n	80170ba <find_volume+0x3ae>
 80170b6:	230d      	movs	r3, #13
 80170b8:	e0a8      	b.n	801720c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80170ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170bc:	3338      	adds	r3, #56	; 0x38
 80170be:	332c      	adds	r3, #44	; 0x2c
 80170c0:	4618      	mov	r0, r3
 80170c2:	f7fe fb77 	bl	80157b4 <ld_dword>
 80170c6:	4602      	mov	r2, r0
 80170c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ca:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80170cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ce:	69db      	ldr	r3, [r3, #28]
 80170d0:	009b      	lsls	r3, r3, #2
 80170d2:	647b      	str	r3, [r7, #68]	; 0x44
 80170d4:	e01f      	b.n	8017116 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80170d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d8:	891b      	ldrh	r3, [r3, #8]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d101      	bne.n	80170e2 <find_volume+0x3d6>
 80170de:	230d      	movs	r3, #13
 80170e0:	e094      	b.n	801720c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80170e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80170e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170e8:	441a      	add	r2, r3
 80170ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ec:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80170ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80170f2:	2b02      	cmp	r3, #2
 80170f4:	d103      	bne.n	80170fe <find_volume+0x3f2>
 80170f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f8:	69db      	ldr	r3, [r3, #28]
 80170fa:	005b      	lsls	r3, r3, #1
 80170fc:	e00a      	b.n	8017114 <find_volume+0x408>
 80170fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017100:	69da      	ldr	r2, [r3, #28]
 8017102:	4613      	mov	r3, r2
 8017104:	005b      	lsls	r3, r3, #1
 8017106:	4413      	add	r3, r2
 8017108:	085a      	lsrs	r2, r3, #1
 801710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710c:	69db      	ldr	r3, [r3, #28]
 801710e:	f003 0301 	and.w	r3, r3, #1
 8017112:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017114:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017118:	6a1a      	ldr	r2, [r3, #32]
 801711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801711c:	899b      	ldrh	r3, [r3, #12]
 801711e:	4619      	mov	r1, r3
 8017120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017122:	440b      	add	r3, r1
 8017124:	3b01      	subs	r3, #1
 8017126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017128:	8989      	ldrh	r1, [r1, #12]
 801712a:	fbb3 f3f1 	udiv	r3, r3, r1
 801712e:	429a      	cmp	r2, r3
 8017130:	d201      	bcs.n	8017136 <find_volume+0x42a>
 8017132:	230d      	movs	r3, #13
 8017134:	e06a      	b.n	801720c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017138:	f04f 32ff 	mov.w	r2, #4294967295
 801713c:	619a      	str	r2, [r3, #24]
 801713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017140:	699a      	ldr	r2, [r3, #24]
 8017142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017144:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8017146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017148:	2280      	movs	r2, #128	; 0x80
 801714a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801714c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017150:	2b03      	cmp	r3, #3
 8017152:	d149      	bne.n	80171e8 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017156:	3338      	adds	r3, #56	; 0x38
 8017158:	3330      	adds	r3, #48	; 0x30
 801715a:	4618      	mov	r0, r3
 801715c:	f7fe fb12 	bl	8015784 <ld_word>
 8017160:	4603      	mov	r3, r0
 8017162:	2b01      	cmp	r3, #1
 8017164:	d140      	bne.n	80171e8 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017168:	3301      	adds	r3, #1
 801716a:	4619      	mov	r1, r3
 801716c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801716e:	f7fe fde9 	bl	8015d44 <move_window>
 8017172:	4603      	mov	r3, r0
 8017174:	2b00      	cmp	r3, #0
 8017176:	d137      	bne.n	80171e8 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8017178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801717a:	2200      	movs	r2, #0
 801717c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017180:	3338      	adds	r3, #56	; 0x38
 8017182:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017186:	4618      	mov	r0, r3
 8017188:	f7fe fafc 	bl	8015784 <ld_word>
 801718c:	4603      	mov	r3, r0
 801718e:	461a      	mov	r2, r3
 8017190:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017194:	429a      	cmp	r2, r3
 8017196:	d127      	bne.n	80171e8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801719a:	3338      	adds	r3, #56	; 0x38
 801719c:	4618      	mov	r0, r3
 801719e:	f7fe fb09 	bl	80157b4 <ld_dword>
 80171a2:	4602      	mov	r2, r0
 80171a4:	4b1b      	ldr	r3, [pc, #108]	; (8017214 <find_volume+0x508>)
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d11e      	bne.n	80171e8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80171aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ac:	3338      	adds	r3, #56	; 0x38
 80171ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80171b2:	4618      	mov	r0, r3
 80171b4:	f7fe fafe 	bl	80157b4 <ld_dword>
 80171b8:	4602      	mov	r2, r0
 80171ba:	4b17      	ldr	r3, [pc, #92]	; (8017218 <find_volume+0x50c>)
 80171bc:	429a      	cmp	r2, r3
 80171be:	d113      	bne.n	80171e8 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80171c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171c2:	3338      	adds	r3, #56	; 0x38
 80171c4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7fe faf3 	bl	80157b4 <ld_dword>
 80171ce:	4602      	mov	r2, r0
 80171d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80171d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d6:	3338      	adds	r3, #56	; 0x38
 80171d8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80171dc:	4618      	mov	r0, r3
 80171de:	f7fe fae9 	bl	80157b4 <ld_dword>
 80171e2:	4602      	mov	r2, r0
 80171e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171e6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80171e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80171ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80171f0:	4b0a      	ldr	r3, [pc, #40]	; (801721c <find_volume+0x510>)
 80171f2:	881b      	ldrh	r3, [r3, #0]
 80171f4:	3301      	adds	r3, #1
 80171f6:	b29a      	uxth	r2, r3
 80171f8:	4b08      	ldr	r3, [pc, #32]	; (801721c <find_volume+0x510>)
 80171fa:	801a      	strh	r2, [r3, #0]
 80171fc:	4b07      	ldr	r3, [pc, #28]	; (801721c <find_volume+0x510>)
 80171fe:	881a      	ldrh	r2, [r3, #0]
 8017200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017202:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017206:	f7fe fd35 	bl	8015c74 <clear_lock>
#endif
	return FR_OK;
 801720a:	2300      	movs	r3, #0
}
 801720c:	4618      	mov	r0, r3
 801720e:	3758      	adds	r7, #88	; 0x58
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}
 8017214:	41615252 	.word	0x41615252
 8017218:	61417272 	.word	0x61417272
 801721c:	20000b78 	.word	0x20000b78

08017220 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b084      	sub	sp, #16
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
 8017228:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801722a:	2309      	movs	r3, #9
 801722c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d02e      	beq.n	8017292 <validate+0x72>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d02a      	beq.n	8017292 <validate+0x72>
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	781b      	ldrb	r3, [r3, #0]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d025      	beq.n	8017292 <validate+0x72>
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	889a      	ldrh	r2, [r3, #4]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	88db      	ldrh	r3, [r3, #6]
 8017250:	429a      	cmp	r2, r3
 8017252:	d11e      	bne.n	8017292 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	4618      	mov	r0, r3
 801725a:	f7fe fb92 	bl	8015982 <lock_fs>
 801725e:	4603      	mov	r3, r0
 8017260:	2b00      	cmp	r3, #0
 8017262:	d014      	beq.n	801728e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	785b      	ldrb	r3, [r3, #1]
 801726a:	4618      	mov	r0, r3
 801726c:	f7fe f9ec 	bl	8015648 <disk_status>
 8017270:	4603      	mov	r3, r0
 8017272:	f003 0301 	and.w	r3, r3, #1
 8017276:	2b00      	cmp	r3, #0
 8017278:	d102      	bne.n	8017280 <validate+0x60>
				res = FR_OK;
 801727a:	2300      	movs	r3, #0
 801727c:	73fb      	strb	r3, [r7, #15]
 801727e:	e008      	b.n	8017292 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	2100      	movs	r1, #0
 8017286:	4618      	mov	r0, r3
 8017288:	f7fe fb91 	bl	80159ae <unlock_fs>
 801728c:	e001      	b.n	8017292 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801728e:	230f      	movs	r3, #15
 8017290:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017292:	7bfb      	ldrb	r3, [r7, #15]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d102      	bne.n	801729e <validate+0x7e>
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	e000      	b.n	80172a0 <validate+0x80>
 801729e:	2300      	movs	r3, #0
 80172a0:	683a      	ldr	r2, [r7, #0]
 80172a2:	6013      	str	r3, [r2, #0]
	return res;
 80172a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a6:	4618      	mov	r0, r3
 80172a8:	3710      	adds	r7, #16
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}
	...

080172b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b088      	sub	sp, #32
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	60b9      	str	r1, [r7, #8]
 80172ba:	4613      	mov	r3, r2
 80172bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80172c2:	f107 0310 	add.w	r3, r7, #16
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7ff fc86 	bl	8016bd8 <get_ldnumber>
 80172cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80172ce:	69fb      	ldr	r3, [r7, #28]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	da01      	bge.n	80172d8 <f_mount+0x28>
 80172d4:	230b      	movs	r3, #11
 80172d6:	e048      	b.n	801736a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80172d8:	4a26      	ldr	r2, [pc, #152]	; (8017374 <f_mount+0xc4>)
 80172da:	69fb      	ldr	r3, [r7, #28]
 80172dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80172e2:	69bb      	ldr	r3, [r7, #24]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d00f      	beq.n	8017308 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80172e8:	69b8      	ldr	r0, [r7, #24]
 80172ea:	f7fe fcc3 	bl	8015c74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	691b      	ldr	r3, [r3, #16]
 80172f2:	4618      	mov	r0, r3
 80172f4:	f000 fd04 	bl	8017d00 <ff_del_syncobj>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d101      	bne.n	8017302 <f_mount+0x52>
 80172fe:	2302      	movs	r3, #2
 8017300:	e033      	b.n	801736a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017302:	69bb      	ldr	r3, [r7, #24]
 8017304:	2200      	movs	r2, #0
 8017306:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00f      	beq.n	801732e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	2200      	movs	r2, #0
 8017312:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8017314:	69fb      	ldr	r3, [r7, #28]
 8017316:	b2da      	uxtb	r2, r3
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	3310      	adds	r3, #16
 801731c:	4619      	mov	r1, r3
 801731e:	4610      	mov	r0, r2
 8017320:	f000 fcd3 	bl	8017cca <ff_cre_syncobj>
 8017324:	4603      	mov	r3, r0
 8017326:	2b00      	cmp	r3, #0
 8017328:	d101      	bne.n	801732e <f_mount+0x7e>
 801732a:	2302      	movs	r3, #2
 801732c:	e01d      	b.n	801736a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801732e:	68fa      	ldr	r2, [r7, #12]
 8017330:	4910      	ldr	r1, [pc, #64]	; (8017374 <f_mount+0xc4>)
 8017332:	69fb      	ldr	r3, [r7, #28]
 8017334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d002      	beq.n	8017344 <f_mount+0x94>
 801733e:	79fb      	ldrb	r3, [r7, #7]
 8017340:	2b01      	cmp	r3, #1
 8017342:	d001      	beq.n	8017348 <f_mount+0x98>
 8017344:	2300      	movs	r3, #0
 8017346:	e010      	b.n	801736a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017348:	f107 010c 	add.w	r1, r7, #12
 801734c:	f107 0308 	add.w	r3, r7, #8
 8017350:	2200      	movs	r2, #0
 8017352:	4618      	mov	r0, r3
 8017354:	f7ff fcda 	bl	8016d0c <find_volume>
 8017358:	4603      	mov	r3, r0
 801735a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	7dfa      	ldrb	r2, [r7, #23]
 8017360:	4611      	mov	r1, r2
 8017362:	4618      	mov	r0, r3
 8017364:	f7fe fb23 	bl	80159ae <unlock_fs>
 8017368:	7dfb      	ldrb	r3, [r7, #23]
}
 801736a:	4618      	mov	r0, r3
 801736c:	3720      	adds	r7, #32
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}
 8017372:	bf00      	nop
 8017374:	20000b74 	.word	0x20000b74

08017378 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b098      	sub	sp, #96	; 0x60
 801737c:	af00      	add	r7, sp, #0
 801737e:	60f8      	str	r0, [r7, #12]
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	4613      	mov	r3, r2
 8017384:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d101      	bne.n	8017390 <f_open+0x18>
 801738c:	2309      	movs	r3, #9
 801738e:	e1c2      	b.n	8017716 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017390:	79fb      	ldrb	r3, [r7, #7]
 8017392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017396:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017398:	79fa      	ldrb	r2, [r7, #7]
 801739a:	f107 0110 	add.w	r1, r7, #16
 801739e:	f107 0308 	add.w	r3, r7, #8
 80173a2:	4618      	mov	r0, r3
 80173a4:	f7ff fcb2 	bl	8016d0c <find_volume>
 80173a8:	4603      	mov	r3, r0
 80173aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80173ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	f040 819f 	bne.w	80176f6 <f_open+0x37e>
		dj.obj.fs = fs;
 80173b8:	693b      	ldr	r3, [r7, #16]
 80173ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80173bc:	68ba      	ldr	r2, [r7, #8]
 80173be:	f107 0314 	add.w	r3, r7, #20
 80173c2:	4611      	mov	r1, r2
 80173c4:	4618      	mov	r0, r3
 80173c6:	f7ff fb91 	bl	8016aec <follow_path>
 80173ca:	4603      	mov	r3, r0
 80173cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80173d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d11a      	bne.n	801740e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80173d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80173dc:	b25b      	sxtb	r3, r3
 80173de:	2b00      	cmp	r3, #0
 80173e0:	da03      	bge.n	80173ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80173e2:	2306      	movs	r3, #6
 80173e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80173e8:	e011      	b.n	801740e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80173ea:	79fb      	ldrb	r3, [r7, #7]
 80173ec:	f023 0301 	bic.w	r3, r3, #1
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	bf14      	ite	ne
 80173f4:	2301      	movne	r3, #1
 80173f6:	2300      	moveq	r3, #0
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	461a      	mov	r2, r3
 80173fc:	f107 0314 	add.w	r3, r7, #20
 8017400:	4611      	mov	r1, r2
 8017402:	4618      	mov	r0, r3
 8017404:	f7fe faee 	bl	80159e4 <chk_lock>
 8017408:	4603      	mov	r3, r0
 801740a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801740e:	79fb      	ldrb	r3, [r7, #7]
 8017410:	f003 031c 	and.w	r3, r3, #28
 8017414:	2b00      	cmp	r3, #0
 8017416:	d07f      	beq.n	8017518 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801741c:	2b00      	cmp	r3, #0
 801741e:	d017      	beq.n	8017450 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017424:	2b04      	cmp	r3, #4
 8017426:	d10e      	bne.n	8017446 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017428:	f7fe fb38 	bl	8015a9c <enq_lock>
 801742c:	4603      	mov	r3, r0
 801742e:	2b00      	cmp	r3, #0
 8017430:	d006      	beq.n	8017440 <f_open+0xc8>
 8017432:	f107 0314 	add.w	r3, r7, #20
 8017436:	4618      	mov	r0, r3
 8017438:	f7ff fa97 	bl	801696a <dir_register>
 801743c:	4603      	mov	r3, r0
 801743e:	e000      	b.n	8017442 <f_open+0xca>
 8017440:	2312      	movs	r3, #18
 8017442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017446:	79fb      	ldrb	r3, [r7, #7]
 8017448:	f043 0308 	orr.w	r3, r3, #8
 801744c:	71fb      	strb	r3, [r7, #7]
 801744e:	e010      	b.n	8017472 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017450:	7ebb      	ldrb	r3, [r7, #26]
 8017452:	f003 0311 	and.w	r3, r3, #17
 8017456:	2b00      	cmp	r3, #0
 8017458:	d003      	beq.n	8017462 <f_open+0xea>
					res = FR_DENIED;
 801745a:	2307      	movs	r3, #7
 801745c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017460:	e007      	b.n	8017472 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017462:	79fb      	ldrb	r3, [r7, #7]
 8017464:	f003 0304 	and.w	r3, r3, #4
 8017468:	2b00      	cmp	r3, #0
 801746a:	d002      	beq.n	8017472 <f_open+0xfa>
 801746c:	2308      	movs	r3, #8
 801746e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017476:	2b00      	cmp	r3, #0
 8017478:	d168      	bne.n	801754c <f_open+0x1d4>
 801747a:	79fb      	ldrb	r3, [r7, #7]
 801747c:	f003 0308 	and.w	r3, r3, #8
 8017480:	2b00      	cmp	r3, #0
 8017482:	d063      	beq.n	801754c <f_open+0x1d4>
				dw = GET_FATTIME();
 8017484:	f7fd fe78 	bl	8015178 <get_fattime>
 8017488:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801748c:	330e      	adds	r3, #14
 801748e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017490:	4618      	mov	r0, r3
 8017492:	f7fe f9cd 	bl	8015830 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017498:	3316      	adds	r3, #22
 801749a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801749c:	4618      	mov	r0, r3
 801749e:	f7fe f9c7 	bl	8015830 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80174a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a4:	330b      	adds	r3, #11
 80174a6:	2220      	movs	r2, #32
 80174a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174ae:	4611      	mov	r1, r2
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7ff f9c6 	bl	8016842 <ld_clust>
 80174b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80174bc:	2200      	movs	r2, #0
 80174be:	4618      	mov	r0, r3
 80174c0:	f7ff f9de 	bl	8016880 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80174c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174c6:	331c      	adds	r3, #28
 80174c8:	2100      	movs	r1, #0
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7fe f9b0 	bl	8015830 <st_dword>
					fs->wflag = 1;
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	2201      	movs	r2, #1
 80174d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80174d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d037      	beq.n	801754c <f_open+0x1d4>
						dw = fs->winsect;
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80174e2:	f107 0314 	add.w	r3, r7, #20
 80174e6:	2200      	movs	r2, #0
 80174e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7fe fece 	bl	801628c <remove_chain>
 80174f0:	4603      	mov	r3, r0
 80174f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80174f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d126      	bne.n	801754c <f_open+0x1d4>
							res = move_window(fs, dw);
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017502:	4618      	mov	r0, r3
 8017504:	f7fe fc1e 	bl	8015d44 <move_window>
 8017508:	4603      	mov	r3, r0
 801750a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801750e:	693b      	ldr	r3, [r7, #16]
 8017510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017512:	3a01      	subs	r2, #1
 8017514:	615a      	str	r2, [r3, #20]
 8017516:	e019      	b.n	801754c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801751c:	2b00      	cmp	r3, #0
 801751e:	d115      	bne.n	801754c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017520:	7ebb      	ldrb	r3, [r7, #26]
 8017522:	f003 0310 	and.w	r3, r3, #16
 8017526:	2b00      	cmp	r3, #0
 8017528:	d003      	beq.n	8017532 <f_open+0x1ba>
					res = FR_NO_FILE;
 801752a:	2304      	movs	r3, #4
 801752c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017530:	e00c      	b.n	801754c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017532:	79fb      	ldrb	r3, [r7, #7]
 8017534:	f003 0302 	and.w	r3, r3, #2
 8017538:	2b00      	cmp	r3, #0
 801753a:	d007      	beq.n	801754c <f_open+0x1d4>
 801753c:	7ebb      	ldrb	r3, [r7, #26]
 801753e:	f003 0301 	and.w	r3, r3, #1
 8017542:	2b00      	cmp	r3, #0
 8017544:	d002      	beq.n	801754c <f_open+0x1d4>
						res = FR_DENIED;
 8017546:	2307      	movs	r3, #7
 8017548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801754c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017550:	2b00      	cmp	r3, #0
 8017552:	d128      	bne.n	80175a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017554:	79fb      	ldrb	r3, [r7, #7]
 8017556:	f003 0308 	and.w	r3, r3, #8
 801755a:	2b00      	cmp	r3, #0
 801755c:	d003      	beq.n	8017566 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801755e:	79fb      	ldrb	r3, [r7, #7]
 8017560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017564:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801756e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017574:	79fb      	ldrb	r3, [r7, #7]
 8017576:	f023 0301 	bic.w	r3, r3, #1
 801757a:	2b00      	cmp	r3, #0
 801757c:	bf14      	ite	ne
 801757e:	2301      	movne	r3, #1
 8017580:	2300      	moveq	r3, #0
 8017582:	b2db      	uxtb	r3, r3
 8017584:	461a      	mov	r2, r3
 8017586:	f107 0314 	add.w	r3, r7, #20
 801758a:	4611      	mov	r1, r2
 801758c:	4618      	mov	r0, r3
 801758e:	f7fe faa7 	bl	8015ae0 <inc_lock>
 8017592:	4602      	mov	r2, r0
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	691b      	ldr	r3, [r3, #16]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d102      	bne.n	80175a6 <f_open+0x22e>
 80175a0:	2302      	movs	r3, #2
 80175a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80175a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	f040 80a3 	bne.w	80176f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175b4:	4611      	mov	r1, r2
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7ff f943 	bl	8016842 <ld_clust>
 80175bc:	4602      	mov	r2, r0
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80175c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175c4:	331c      	adds	r3, #28
 80175c6:	4618      	mov	r0, r3
 80175c8:	f7fe f8f4 	bl	80157b4 <ld_dword>
 80175cc:	4602      	mov	r2, r0
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	2200      	movs	r2, #0
 80175d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80175d8:	693a      	ldr	r2, [r7, #16]
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	88da      	ldrh	r2, [r3, #6]
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	79fa      	ldrb	r2, [r7, #7]
 80175ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	2200      	movs	r2, #0
 80175f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	2200      	movs	r2, #0
 80175f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	2200      	movs	r2, #0
 80175fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	3330      	adds	r3, #48	; 0x30
 8017602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017606:	2100      	movs	r1, #0
 8017608:	4618      	mov	r0, r3
 801760a:	f7fe f95e 	bl	80158ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801760e:	79fb      	ldrb	r3, [r7, #7]
 8017610:	f003 0320 	and.w	r3, r3, #32
 8017614:	2b00      	cmp	r3, #0
 8017616:	d06e      	beq.n	80176f6 <f_open+0x37e>
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	68db      	ldr	r3, [r3, #12]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d06a      	beq.n	80176f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	68da      	ldr	r2, [r3, #12]
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017628:	693b      	ldr	r3, [r7, #16]
 801762a:	895b      	ldrh	r3, [r3, #10]
 801762c:	461a      	mov	r2, r3
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	899b      	ldrh	r3, [r3, #12]
 8017632:	fb03 f302 	mul.w	r3, r3, r2
 8017636:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	689b      	ldr	r3, [r3, #8]
 801763c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	68db      	ldr	r3, [r3, #12]
 8017642:	657b      	str	r3, [r7, #84]	; 0x54
 8017644:	e016      	b.n	8017674 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801764a:	4618      	mov	r0, r3
 801764c:	f7fe fc37 	bl	8015ebe <get_fat>
 8017650:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8017652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017654:	2b01      	cmp	r3, #1
 8017656:	d802      	bhi.n	801765e <f_open+0x2e6>
 8017658:	2302      	movs	r3, #2
 801765a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801765e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017664:	d102      	bne.n	801766c <f_open+0x2f4>
 8017666:	2301      	movs	r3, #1
 8017668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801766c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801766e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	657b      	str	r3, [r7, #84]	; 0x54
 8017674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017678:	2b00      	cmp	r3, #0
 801767a:	d103      	bne.n	8017684 <f_open+0x30c>
 801767c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801767e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017680:	429a      	cmp	r2, r3
 8017682:	d8e0      	bhi.n	8017646 <f_open+0x2ce>
				}
				fp->clust = clst;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017688:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801768a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801768e:	2b00      	cmp	r3, #0
 8017690:	d131      	bne.n	80176f6 <f_open+0x37e>
 8017692:	693b      	ldr	r3, [r7, #16]
 8017694:	899b      	ldrh	r3, [r3, #12]
 8017696:	461a      	mov	r2, r3
 8017698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801769a:	fbb3 f1f2 	udiv	r1, r3, r2
 801769e:	fb02 f201 	mul.w	r2, r2, r1
 80176a2:	1a9b      	subs	r3, r3, r2
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d026      	beq.n	80176f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7fe fbe7 	bl	8015e80 <clust2sect>
 80176b2:	6478      	str	r0, [r7, #68]	; 0x44
 80176b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d103      	bne.n	80176c2 <f_open+0x34a>
						res = FR_INT_ERR;
 80176ba:	2302      	movs	r3, #2
 80176bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80176c0:	e019      	b.n	80176f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	899b      	ldrh	r3, [r3, #12]
 80176c6:	461a      	mov	r2, r3
 80176c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80176ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176d0:	441a      	add	r2, r3
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	7858      	ldrb	r0, [r3, #1]
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	6a1a      	ldr	r2, [r3, #32]
 80176e4:	2301      	movs	r3, #1
 80176e6:	f7fd ffef 	bl	80156c8 <disk_read>
 80176ea:	4603      	mov	r3, r0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d002      	beq.n	80176f6 <f_open+0x37e>
 80176f0:	2301      	movs	r3, #1
 80176f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80176f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d002      	beq.n	8017704 <f_open+0x38c>
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	2200      	movs	r2, #0
 8017702:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801770a:	4611      	mov	r1, r2
 801770c:	4618      	mov	r0, r3
 801770e:	f7fe f94e 	bl	80159ae <unlock_fs>
 8017712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8017716:	4618      	mov	r0, r3
 8017718:	3760      	adds	r7, #96	; 0x60
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}

0801771e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801771e:	b580      	push	{r7, lr}
 8017720:	b08c      	sub	sp, #48	; 0x30
 8017722:	af00      	add	r7, sp, #0
 8017724:	60f8      	str	r0, [r7, #12]
 8017726:	60b9      	str	r1, [r7, #8]
 8017728:	607a      	str	r2, [r7, #4]
 801772a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	2200      	movs	r2, #0
 8017734:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	f107 0210 	add.w	r2, r7, #16
 801773c:	4611      	mov	r1, r2
 801773e:	4618      	mov	r0, r3
 8017740:	f7ff fd6e 	bl	8017220 <validate>
 8017744:	4603      	mov	r3, r0
 8017746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801774a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801774e:	2b00      	cmp	r3, #0
 8017750:	d107      	bne.n	8017762 <f_write+0x44>
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	7d5b      	ldrb	r3, [r3, #21]
 8017756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801775a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801775e:	2b00      	cmp	r3, #0
 8017760:	d009      	beq.n	8017776 <f_write+0x58>
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017768:	4611      	mov	r1, r2
 801776a:	4618      	mov	r0, r3
 801776c:	f7fe f91f 	bl	80159ae <unlock_fs>
 8017770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017774:	e192      	b.n	8017a9c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	7d1b      	ldrb	r3, [r3, #20]
 801777a:	f003 0302 	and.w	r3, r3, #2
 801777e:	2b00      	cmp	r3, #0
 8017780:	d106      	bne.n	8017790 <f_write+0x72>
 8017782:	693b      	ldr	r3, [r7, #16]
 8017784:	2107      	movs	r1, #7
 8017786:	4618      	mov	r0, r3
 8017788:	f7fe f911 	bl	80159ae <unlock_fs>
 801778c:	2307      	movs	r3, #7
 801778e:	e185      	b.n	8017a9c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	699a      	ldr	r2, [r3, #24]
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	441a      	add	r2, r3
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	699b      	ldr	r3, [r3, #24]
 801779c:	429a      	cmp	r2, r3
 801779e:	f080 816a 	bcs.w	8017a76 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	699b      	ldr	r3, [r3, #24]
 80177a6:	43db      	mvns	r3, r3
 80177a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80177aa:	e164      	b.n	8017a76 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	699b      	ldr	r3, [r3, #24]
 80177b0:	693a      	ldr	r2, [r7, #16]
 80177b2:	8992      	ldrh	r2, [r2, #12]
 80177b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80177b8:	fb02 f201 	mul.w	r2, r2, r1
 80177bc:	1a9b      	subs	r3, r3, r2
 80177be:	2b00      	cmp	r3, #0
 80177c0:	f040 810f 	bne.w	80179e2 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	699b      	ldr	r3, [r3, #24]
 80177c8:	693a      	ldr	r2, [r7, #16]
 80177ca:	8992      	ldrh	r2, [r2, #12]
 80177cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80177d0:	693a      	ldr	r2, [r7, #16]
 80177d2:	8952      	ldrh	r2, [r2, #10]
 80177d4:	3a01      	subs	r2, #1
 80177d6:	4013      	ands	r3, r2
 80177d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80177da:	69bb      	ldr	r3, [r7, #24]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d14d      	bne.n	801787c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	699b      	ldr	r3, [r3, #24]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d10c      	bne.n	8017802 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	689b      	ldr	r3, [r3, #8]
 80177ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80177ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d11a      	bne.n	801782a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	2100      	movs	r1, #0
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fe fdac 	bl	8016356 <create_chain>
 80177fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8017800:	e013      	b.n	801782a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017806:	2b00      	cmp	r3, #0
 8017808:	d007      	beq.n	801781a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	699b      	ldr	r3, [r3, #24]
 801780e:	4619      	mov	r1, r3
 8017810:	68f8      	ldr	r0, [r7, #12]
 8017812:	f7fe fe38 	bl	8016486 <clmt_clust>
 8017816:	62b8      	str	r0, [r7, #40]	; 0x28
 8017818:	e007      	b.n	801782a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801781a:	68fa      	ldr	r2, [r7, #12]
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	69db      	ldr	r3, [r3, #28]
 8017820:	4619      	mov	r1, r3
 8017822:	4610      	mov	r0, r2
 8017824:	f7fe fd97 	bl	8016356 <create_chain>
 8017828:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801782c:	2b00      	cmp	r3, #0
 801782e:	f000 8127 	beq.w	8017a80 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017834:	2b01      	cmp	r3, #1
 8017836:	d109      	bne.n	801784c <f_write+0x12e>
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	2202      	movs	r2, #2
 801783c:	755a      	strb	r2, [r3, #21]
 801783e:	693b      	ldr	r3, [r7, #16]
 8017840:	2102      	movs	r1, #2
 8017842:	4618      	mov	r0, r3
 8017844:	f7fe f8b3 	bl	80159ae <unlock_fs>
 8017848:	2302      	movs	r3, #2
 801784a:	e127      	b.n	8017a9c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017852:	d109      	bne.n	8017868 <f_write+0x14a>
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	2201      	movs	r2, #1
 8017858:	755a      	strb	r2, [r3, #21]
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	2101      	movs	r1, #1
 801785e:	4618      	mov	r0, r3
 8017860:	f7fe f8a5 	bl	80159ae <unlock_fs>
 8017864:	2301      	movs	r3, #1
 8017866:	e119      	b.n	8017a9c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801786c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	689b      	ldr	r3, [r3, #8]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d102      	bne.n	801787c <f_write+0x15e>
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801787a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	7d1b      	ldrb	r3, [r3, #20]
 8017880:	b25b      	sxtb	r3, r3
 8017882:	2b00      	cmp	r3, #0
 8017884:	da1d      	bge.n	80178c2 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017886:	693b      	ldr	r3, [r7, #16]
 8017888:	7858      	ldrb	r0, [r3, #1]
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	6a1a      	ldr	r2, [r3, #32]
 8017894:	2301      	movs	r3, #1
 8017896:	f7fd ff37 	bl	8015708 <disk_write>
 801789a:	4603      	mov	r3, r0
 801789c:	2b00      	cmp	r3, #0
 801789e:	d009      	beq.n	80178b4 <f_write+0x196>
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	2201      	movs	r2, #1
 80178a4:	755a      	strb	r2, [r3, #21]
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	2101      	movs	r1, #1
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7fe f87f 	bl	80159ae <unlock_fs>
 80178b0:	2301      	movs	r3, #1
 80178b2:	e0f3      	b.n	8017a9c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	7d1b      	ldrb	r3, [r3, #20]
 80178b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80178bc:	b2da      	uxtb	r2, r3
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80178c2:	693a      	ldr	r2, [r7, #16]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	69db      	ldr	r3, [r3, #28]
 80178c8:	4619      	mov	r1, r3
 80178ca:	4610      	mov	r0, r2
 80178cc:	f7fe fad8 	bl	8015e80 <clust2sect>
 80178d0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80178d2:	697b      	ldr	r3, [r7, #20]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d109      	bne.n	80178ec <f_write+0x1ce>
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2202      	movs	r2, #2
 80178dc:	755a      	strb	r2, [r3, #21]
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	2102      	movs	r1, #2
 80178e2:	4618      	mov	r0, r3
 80178e4:	f7fe f863 	bl	80159ae <unlock_fs>
 80178e8:	2302      	movs	r3, #2
 80178ea:	e0d7      	b.n	8017a9c <f_write+0x37e>
			sect += csect;
 80178ec:	697a      	ldr	r2, [r7, #20]
 80178ee:	69bb      	ldr	r3, [r7, #24]
 80178f0:	4413      	add	r3, r2
 80178f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80178f4:	693b      	ldr	r3, [r7, #16]
 80178f6:	899b      	ldrh	r3, [r3, #12]
 80178f8:	461a      	mov	r2, r3
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8017900:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017902:	6a3b      	ldr	r3, [r7, #32]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d048      	beq.n	801799a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017908:	69ba      	ldr	r2, [r7, #24]
 801790a:	6a3b      	ldr	r3, [r7, #32]
 801790c:	4413      	add	r3, r2
 801790e:	693a      	ldr	r2, [r7, #16]
 8017910:	8952      	ldrh	r2, [r2, #10]
 8017912:	4293      	cmp	r3, r2
 8017914:	d905      	bls.n	8017922 <f_write+0x204>
					cc = fs->csize - csect;
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	895b      	ldrh	r3, [r3, #10]
 801791a:	461a      	mov	r2, r3
 801791c:	69bb      	ldr	r3, [r7, #24]
 801791e:	1ad3      	subs	r3, r2, r3
 8017920:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017922:	693b      	ldr	r3, [r7, #16]
 8017924:	7858      	ldrb	r0, [r3, #1]
 8017926:	6a3b      	ldr	r3, [r7, #32]
 8017928:	697a      	ldr	r2, [r7, #20]
 801792a:	69f9      	ldr	r1, [r7, #28]
 801792c:	f7fd feec 	bl	8015708 <disk_write>
 8017930:	4603      	mov	r3, r0
 8017932:	2b00      	cmp	r3, #0
 8017934:	d009      	beq.n	801794a <f_write+0x22c>
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	2201      	movs	r2, #1
 801793a:	755a      	strb	r2, [r3, #21]
 801793c:	693b      	ldr	r3, [r7, #16]
 801793e:	2101      	movs	r1, #1
 8017940:	4618      	mov	r0, r3
 8017942:	f7fe f834 	bl	80159ae <unlock_fs>
 8017946:	2301      	movs	r3, #1
 8017948:	e0a8      	b.n	8017a9c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	6a1a      	ldr	r2, [r3, #32]
 801794e:	697b      	ldr	r3, [r7, #20]
 8017950:	1ad3      	subs	r3, r2, r3
 8017952:	6a3a      	ldr	r2, [r7, #32]
 8017954:	429a      	cmp	r2, r3
 8017956:	d918      	bls.n	801798a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	6a1a      	ldr	r2, [r3, #32]
 8017962:	697b      	ldr	r3, [r7, #20]
 8017964:	1ad3      	subs	r3, r2, r3
 8017966:	693a      	ldr	r2, [r7, #16]
 8017968:	8992      	ldrh	r2, [r2, #12]
 801796a:	fb02 f303 	mul.w	r3, r2, r3
 801796e:	69fa      	ldr	r2, [r7, #28]
 8017970:	18d1      	adds	r1, r2, r3
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	899b      	ldrh	r3, [r3, #12]
 8017976:	461a      	mov	r2, r3
 8017978:	f7fd ff86 	bl	8015888 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	7d1b      	ldrb	r3, [r3, #20]
 8017980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017984:	b2da      	uxtb	r2, r3
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801798a:	693b      	ldr	r3, [r7, #16]
 801798c:	899b      	ldrh	r3, [r3, #12]
 801798e:	461a      	mov	r2, r3
 8017990:	6a3b      	ldr	r3, [r7, #32]
 8017992:	fb02 f303 	mul.w	r3, r2, r3
 8017996:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017998:	e050      	b.n	8017a3c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	6a1b      	ldr	r3, [r3, #32]
 801799e:	697a      	ldr	r2, [r7, #20]
 80179a0:	429a      	cmp	r2, r3
 80179a2:	d01b      	beq.n	80179dc <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	699a      	ldr	r2, [r3, #24]
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d215      	bcs.n	80179dc <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80179b0:	693b      	ldr	r3, [r7, #16]
 80179b2:	7858      	ldrb	r0, [r3, #1]
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80179ba:	2301      	movs	r3, #1
 80179bc:	697a      	ldr	r2, [r7, #20]
 80179be:	f7fd fe83 	bl	80156c8 <disk_read>
 80179c2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d009      	beq.n	80179dc <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	2201      	movs	r2, #1
 80179cc:	755a      	strb	r2, [r3, #21]
 80179ce:	693b      	ldr	r3, [r7, #16]
 80179d0:	2101      	movs	r1, #1
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7fd ffeb 	bl	80159ae <unlock_fs>
 80179d8:	2301      	movs	r3, #1
 80179da:	e05f      	b.n	8017a9c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	697a      	ldr	r2, [r7, #20]
 80179e0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80179e2:	693b      	ldr	r3, [r7, #16]
 80179e4:	899b      	ldrh	r3, [r3, #12]
 80179e6:	4618      	mov	r0, r3
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	699b      	ldr	r3, [r3, #24]
 80179ec:	693a      	ldr	r2, [r7, #16]
 80179ee:	8992      	ldrh	r2, [r2, #12]
 80179f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80179f4:	fb02 f201 	mul.w	r2, r2, r1
 80179f8:	1a9b      	subs	r3, r3, r2
 80179fa:	1ac3      	subs	r3, r0, r3
 80179fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80179fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	429a      	cmp	r2, r3
 8017a04:	d901      	bls.n	8017a0a <f_write+0x2ec>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	699b      	ldr	r3, [r3, #24]
 8017a14:	693a      	ldr	r2, [r7, #16]
 8017a16:	8992      	ldrh	r2, [r2, #12]
 8017a18:	fbb3 f0f2 	udiv	r0, r3, r2
 8017a1c:	fb02 f200 	mul.w	r2, r2, r0
 8017a20:	1a9b      	subs	r3, r3, r2
 8017a22:	440b      	add	r3, r1
 8017a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a26:	69f9      	ldr	r1, [r7, #28]
 8017a28:	4618      	mov	r0, r3
 8017a2a:	f7fd ff2d 	bl	8015888 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	7d1b      	ldrb	r3, [r3, #20]
 8017a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017a36:	b2da      	uxtb	r2, r3
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017a3c:	69fa      	ldr	r2, [r7, #28]
 8017a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a40:	4413      	add	r3, r2
 8017a42:	61fb      	str	r3, [r7, #28]
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	699a      	ldr	r2, [r3, #24]
 8017a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4a:	441a      	add	r2, r3
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	619a      	str	r2, [r3, #24]
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	68da      	ldr	r2, [r3, #12]
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	699b      	ldr	r3, [r3, #24]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	bf38      	it	cc
 8017a5c:	461a      	movcc	r2, r3
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	60da      	str	r2, [r3, #12]
 8017a62:	683b      	ldr	r3, [r7, #0]
 8017a64:	681a      	ldr	r2, [r3, #0]
 8017a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a68:	441a      	add	r2, r3
 8017a6a:	683b      	ldr	r3, [r7, #0]
 8017a6c:	601a      	str	r2, [r3, #0]
 8017a6e:	687a      	ldr	r2, [r7, #4]
 8017a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a72:	1ad3      	subs	r3, r2, r3
 8017a74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	f47f ae97 	bne.w	80177ac <f_write+0x8e>
 8017a7e:	e000      	b.n	8017a82 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017a80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	7d1b      	ldrb	r3, [r3, #20]
 8017a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a8a:	b2da      	uxtb	r2, r3
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017a90:	693b      	ldr	r3, [r7, #16]
 8017a92:	2100      	movs	r1, #0
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7fd ff8a 	bl	80159ae <unlock_fs>
 8017a9a:	2300      	movs	r3, #0
}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	3730      	adds	r7, #48	; 0x30
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b086      	sub	sp, #24
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	f107 0208 	add.w	r2, r7, #8
 8017ab2:	4611      	mov	r1, r2
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	f7ff fbb3 	bl	8017220 <validate>
 8017aba:	4603      	mov	r3, r0
 8017abc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017abe:	7dfb      	ldrb	r3, [r7, #23]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d16d      	bne.n	8017ba0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	7d1b      	ldrb	r3, [r3, #20]
 8017ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d067      	beq.n	8017ba0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	7d1b      	ldrb	r3, [r3, #20]
 8017ad4:	b25b      	sxtb	r3, r3
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	da1a      	bge.n	8017b10 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	7858      	ldrb	r0, [r3, #1]
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	6a1a      	ldr	r2, [r3, #32]
 8017ae8:	2301      	movs	r3, #1
 8017aea:	f7fd fe0d 	bl	8015708 <disk_write>
 8017aee:	4603      	mov	r3, r0
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d006      	beq.n	8017b02 <f_sync+0x5e>
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	2101      	movs	r1, #1
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7fd ff58 	bl	80159ae <unlock_fs>
 8017afe:	2301      	movs	r3, #1
 8017b00:	e055      	b.n	8017bae <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	7d1b      	ldrb	r3, [r3, #20]
 8017b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b0a:	b2da      	uxtb	r2, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017b10:	f7fd fb32 	bl	8015178 <get_fattime>
 8017b14:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017b16:	68ba      	ldr	r2, [r7, #8]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b1c:	4619      	mov	r1, r3
 8017b1e:	4610      	mov	r0, r2
 8017b20:	f7fe f910 	bl	8015d44 <move_window>
 8017b24:	4603      	mov	r3, r0
 8017b26:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017b28:	7dfb      	ldrb	r3, [r7, #23]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d138      	bne.n	8017ba0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b32:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	330b      	adds	r3, #11
 8017b38:	781a      	ldrb	r2, [r3, #0]
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	330b      	adds	r3, #11
 8017b3e:	f042 0220 	orr.w	r2, r2, #32
 8017b42:	b2d2      	uxtb	r2, r2
 8017b44:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6818      	ldr	r0, [r3, #0]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	689b      	ldr	r3, [r3, #8]
 8017b4e:	461a      	mov	r2, r3
 8017b50:	68f9      	ldr	r1, [r7, #12]
 8017b52:	f7fe fe95 	bl	8016880 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	f103 021c 	add.w	r2, r3, #28
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	68db      	ldr	r3, [r3, #12]
 8017b60:	4619      	mov	r1, r3
 8017b62:	4610      	mov	r0, r2
 8017b64:	f7fd fe64 	bl	8015830 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	3316      	adds	r3, #22
 8017b6c:	6939      	ldr	r1, [r7, #16]
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7fd fe5e 	bl	8015830 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	3312      	adds	r3, #18
 8017b78:	2100      	movs	r1, #0
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7fd fe3d 	bl	80157fa <st_word>
					fs->wflag = 1;
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	2201      	movs	r2, #1
 8017b84:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7fe f909 	bl	8015da0 <sync_fs>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	7d1b      	ldrb	r3, [r3, #20]
 8017b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017b9a:	b2da      	uxtb	r2, r3
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017ba0:	68bb      	ldr	r3, [r7, #8]
 8017ba2:	7dfa      	ldrb	r2, [r7, #23]
 8017ba4:	4611      	mov	r1, r2
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f7fd ff01 	bl	80159ae <unlock_fs>
 8017bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8017bae:	4618      	mov	r0, r3
 8017bb0:	3718      	adds	r7, #24
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}

08017bb6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017bb6:	b580      	push	{r7, lr}
 8017bb8:	b084      	sub	sp, #16
 8017bba:	af00      	add	r7, sp, #0
 8017bbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017bbe:	6878      	ldr	r0, [r7, #4]
 8017bc0:	f7ff ff70 	bl	8017aa4 <f_sync>
 8017bc4:	4603      	mov	r3, r0
 8017bc6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017bc8:	7bfb      	ldrb	r3, [r7, #15]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d11d      	bne.n	8017c0a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f107 0208 	add.w	r2, r7, #8
 8017bd4:	4611      	mov	r1, r2
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f7ff fb22 	bl	8017220 <validate>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017be0:	7bfb      	ldrb	r3, [r7, #15]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d111      	bne.n	8017c0a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	691b      	ldr	r3, [r3, #16]
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7fe f806 	bl	8015bfc <dec_lock>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017bf4:	7bfb      	ldrb	r3, [r7, #15]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d102      	bne.n	8017c00 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	2100      	movs	r1, #0
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7fd fed2 	bl	80159ae <unlock_fs>
#endif
		}
	}
	return res;
 8017c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3710      	adds	r7, #16
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}

08017c14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017c14:	b480      	push	{r7}
 8017c16:	b087      	sub	sp, #28
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	60f8      	str	r0, [r7, #12]
 8017c1c:	60b9      	str	r1, [r7, #8]
 8017c1e:	4613      	mov	r3, r2
 8017c20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017c22:	2301      	movs	r3, #1
 8017c24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017c26:	2300      	movs	r3, #0
 8017c28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017c2a:	4b1f      	ldr	r3, [pc, #124]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c2c:	7a5b      	ldrb	r3, [r3, #9]
 8017c2e:	b2db      	uxtb	r3, r3
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d131      	bne.n	8017c98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017c34:	4b1c      	ldr	r3, [pc, #112]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c36:	7a5b      	ldrb	r3, [r3, #9]
 8017c38:	b2db      	uxtb	r3, r3
 8017c3a:	461a      	mov	r2, r3
 8017c3c:	4b1a      	ldr	r3, [pc, #104]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c3e:	2100      	movs	r1, #0
 8017c40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017c42:	4b19      	ldr	r3, [pc, #100]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c44:	7a5b      	ldrb	r3, [r3, #9]
 8017c46:	b2db      	uxtb	r3, r3
 8017c48:	4a17      	ldr	r2, [pc, #92]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c4a:	009b      	lsls	r3, r3, #2
 8017c4c:	4413      	add	r3, r2
 8017c4e:	68fa      	ldr	r2, [r7, #12]
 8017c50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017c52:	4b15      	ldr	r3, [pc, #84]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c54:	7a5b      	ldrb	r3, [r3, #9]
 8017c56:	b2db      	uxtb	r3, r3
 8017c58:	461a      	mov	r2, r3
 8017c5a:	4b13      	ldr	r3, [pc, #76]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c5c:	4413      	add	r3, r2
 8017c5e:	79fa      	ldrb	r2, [r7, #7]
 8017c60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017c62:	4b11      	ldr	r3, [pc, #68]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c64:	7a5b      	ldrb	r3, [r3, #9]
 8017c66:	b2db      	uxtb	r3, r3
 8017c68:	1c5a      	adds	r2, r3, #1
 8017c6a:	b2d1      	uxtb	r1, r2
 8017c6c:	4a0e      	ldr	r2, [pc, #56]	; (8017ca8 <FATFS_LinkDriverEx+0x94>)
 8017c6e:	7251      	strb	r1, [r2, #9]
 8017c70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017c72:	7dbb      	ldrb	r3, [r7, #22]
 8017c74:	3330      	adds	r3, #48	; 0x30
 8017c76:	b2da      	uxtb	r2, r3
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	3301      	adds	r3, #1
 8017c80:	223a      	movs	r2, #58	; 0x3a
 8017c82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017c84:	68bb      	ldr	r3, [r7, #8]
 8017c86:	3302      	adds	r3, #2
 8017c88:	222f      	movs	r2, #47	; 0x2f
 8017c8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	3303      	adds	r3, #3
 8017c90:	2200      	movs	r2, #0
 8017c92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017c94:	2300      	movs	r3, #0
 8017c96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	371c      	adds	r7, #28
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca4:	4770      	bx	lr
 8017ca6:	bf00      	nop
 8017ca8:	20000b9c 	.word	0x20000b9c

08017cac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b082      	sub	sp, #8
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
 8017cb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	6839      	ldr	r1, [r7, #0]
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f7ff ffaa 	bl	8017c14 <FATFS_LinkDriverEx>
 8017cc0:	4603      	mov	r3, r0
}
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	3708      	adds	r7, #8
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd80      	pop	{r7, pc}

08017cca <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8017cca:	b580      	push	{r7, lr}
 8017ccc:	b084      	sub	sp, #16
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	6039      	str	r1, [r7, #0]
 8017cd4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	2101      	movs	r1, #1
 8017cda:	2001      	movs	r0, #1
 8017cdc:	f000 fb02 	bl	80182e4 <osSemaphoreNew>
 8017ce0:	4602      	mov	r2, r0
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8017ce6:	683b      	ldr	r3, [r7, #0]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	bf14      	ite	ne
 8017cee:	2301      	movne	r3, #1
 8017cf0:	2300      	moveq	r3, #0
 8017cf2:	b2db      	uxtb	r3, r3
 8017cf4:	60fb      	str	r3, [r7, #12]

    return ret;
 8017cf6:	68fb      	ldr	r3, [r7, #12]
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	3710      	adds	r7, #16
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b082      	sub	sp, #8
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8017d08:	6878      	ldr	r0, [r7, #4]
 8017d0a:	f000 fc47 	bl	801859c <osSemaphoreDelete>
#endif
    return 1;
 8017d0e:	2301      	movs	r3, #1
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	3708      	adds	r7, #8
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}

08017d18 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b084      	sub	sp, #16
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8017d20:	2300      	movs	r3, #0
 8017d22:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8017d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f000 fb79 	bl	8018420 <osSemaphoreAcquire>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d101      	bne.n	8017d38 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8017d34:	2301      	movs	r3, #1
 8017d36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8017d38:	68fb      	ldr	r3, [r7, #12]
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3710      	adds	r7, #16
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}

08017d42 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8017d42:	b580      	push	{r7, lr}
 8017d44:	b082      	sub	sp, #8
 8017d46:	af00      	add	r7, sp, #0
 8017d48:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8017d4a:	6878      	ldr	r0, [r7, #4]
 8017d4c:	f000 fbce 	bl	80184ec <osSemaphoreRelease>
#endif
}
 8017d50:	bf00      	nop
 8017d52:	3708      	adds	r7, #8
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}

08017d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017d58:	b480      	push	{r7}
 8017d5a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8017d5c:	bf00      	nop
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d64:	4770      	bx	lr
	...

08017d68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017d68:	b480      	push	{r7}
 8017d6a:	b085      	sub	sp, #20
 8017d6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017d6e:	f3ef 8305 	mrs	r3, IPSR
 8017d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8017d74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d10f      	bne.n	8017d9a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8017d7e:	607b      	str	r3, [r7, #4]
  return(result);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d105      	bne.n	8017d92 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017d86:	f3ef 8311 	mrs	r3, BASEPRI
 8017d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8017d8c:	683b      	ldr	r3, [r7, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d007      	beq.n	8017da2 <osKernelInitialize+0x3a>
 8017d92:	4b0e      	ldr	r3, [pc, #56]	; (8017dcc <osKernelInitialize+0x64>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	2b02      	cmp	r3, #2
 8017d98:	d103      	bne.n	8017da2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8017d9a:	f06f 0305 	mvn.w	r3, #5
 8017d9e:	60fb      	str	r3, [r7, #12]
 8017da0:	e00c      	b.n	8017dbc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017da2:	4b0a      	ldr	r3, [pc, #40]	; (8017dcc <osKernelInitialize+0x64>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d105      	bne.n	8017db6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017daa:	4b08      	ldr	r3, [pc, #32]	; (8017dcc <osKernelInitialize+0x64>)
 8017dac:	2201      	movs	r2, #1
 8017dae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017db0:	2300      	movs	r3, #0
 8017db2:	60fb      	str	r3, [r7, #12]
 8017db4:	e002      	b.n	8017dbc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8017db6:	f04f 33ff 	mov.w	r3, #4294967295
 8017dba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8017dbc:	68fb      	ldr	r3, [r7, #12]
}
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	3714      	adds	r7, #20
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc8:	4770      	bx	lr
 8017dca:	bf00      	nop
 8017dcc:	20000ba8 	.word	0x20000ba8

08017dd0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b082      	sub	sp, #8
 8017dd4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8017dd6:	f002 fd8b 	bl	801a8f0 <xTaskGetSchedulerState>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d004      	beq.n	8017dea <osKernelGetState+0x1a>
 8017de0:	2b02      	cmp	r3, #2
 8017de2:	d105      	bne.n	8017df0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8017de4:	2302      	movs	r3, #2
 8017de6:	607b      	str	r3, [r7, #4]
      break;
 8017de8:	e00c      	b.n	8017e04 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8017dea:	2303      	movs	r3, #3
 8017dec:	607b      	str	r3, [r7, #4]
      break;
 8017dee:	e009      	b.n	8017e04 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8017df0:	4b07      	ldr	r3, [pc, #28]	; (8017e10 <osKernelGetState+0x40>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b01      	cmp	r3, #1
 8017df6:	d102      	bne.n	8017dfe <osKernelGetState+0x2e>
        state = osKernelReady;
 8017df8:	2301      	movs	r3, #1
 8017dfa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8017dfc:	e001      	b.n	8017e02 <osKernelGetState+0x32>
        state = osKernelInactive;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	607b      	str	r3, [r7, #4]
      break;
 8017e02:	bf00      	nop
  }

  return (state);
 8017e04:	687b      	ldr	r3, [r7, #4]
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3708      	adds	r7, #8
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	20000ba8 	.word	0x20000ba8

08017e14 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b084      	sub	sp, #16
 8017e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e1a:	f3ef 8305 	mrs	r3, IPSR
 8017e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017e20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d10f      	bne.n	8017e46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e26:	f3ef 8310 	mrs	r3, PRIMASK
 8017e2a:	607b      	str	r3, [r7, #4]
  return(result);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d105      	bne.n	8017e3e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017e32:	f3ef 8311 	mrs	r3, BASEPRI
 8017e36:	603b      	str	r3, [r7, #0]
  return(result);
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d007      	beq.n	8017e4e <osKernelStart+0x3a>
 8017e3e:	4b0f      	ldr	r3, [pc, #60]	; (8017e7c <osKernelStart+0x68>)
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	2b02      	cmp	r3, #2
 8017e44:	d103      	bne.n	8017e4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8017e46:	f06f 0305 	mvn.w	r3, #5
 8017e4a:	60fb      	str	r3, [r7, #12]
 8017e4c:	e010      	b.n	8017e70 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017e4e:	4b0b      	ldr	r3, [pc, #44]	; (8017e7c <osKernelStart+0x68>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	2b01      	cmp	r3, #1
 8017e54:	d109      	bne.n	8017e6a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017e56:	f7ff ff7f 	bl	8017d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017e5a:	4b08      	ldr	r3, [pc, #32]	; (8017e7c <osKernelStart+0x68>)
 8017e5c:	2202      	movs	r2, #2
 8017e5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017e60:	f002 f8fe 	bl	801a060 <vTaskStartScheduler>
      stat = osOK;
 8017e64:	2300      	movs	r3, #0
 8017e66:	60fb      	str	r3, [r7, #12]
 8017e68:	e002      	b.n	8017e70 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8017e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8017e70:	68fb      	ldr	r3, [r7, #12]
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3710      	adds	r7, #16
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	20000ba8 	.word	0x20000ba8

08017e80 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b084      	sub	sp, #16
 8017e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e86:	f3ef 8305 	mrs	r3, IPSR
 8017e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8017e8c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d10f      	bne.n	8017eb2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e92:	f3ef 8310 	mrs	r3, PRIMASK
 8017e96:	607b      	str	r3, [r7, #4]
  return(result);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d105      	bne.n	8017eaa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8017ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8017ea4:	683b      	ldr	r3, [r7, #0]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d007      	beq.n	8017eba <osKernelGetTickCount+0x3a>
 8017eaa:	4b08      	ldr	r3, [pc, #32]	; (8017ecc <osKernelGetTickCount+0x4c>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	2b02      	cmp	r3, #2
 8017eb0:	d103      	bne.n	8017eba <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8017eb2:	f002 f9f3 	bl	801a29c <xTaskGetTickCountFromISR>
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	e002      	b.n	8017ec0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8017eba:	f002 f9df 	bl	801a27c <xTaskGetTickCount>
 8017ebe:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8017ec0:	68fb      	ldr	r3, [r7, #12]
}
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	3710      	adds	r7, #16
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bd80      	pop	{r7, pc}
 8017eca:	bf00      	nop
 8017ecc:	20000ba8 	.word	0x20000ba8

08017ed0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b090      	sub	sp, #64	; 0x40
 8017ed4:	af04      	add	r7, sp, #16
 8017ed6:	60f8      	str	r0, [r7, #12]
 8017ed8:	60b9      	str	r1, [r7, #8]
 8017eda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017edc:	2300      	movs	r3, #0
 8017ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017ee0:	f3ef 8305 	mrs	r3, IPSR
 8017ee4:	61fb      	str	r3, [r7, #28]
  return(result);
 8017ee6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	f040 808f 	bne.w	801800c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017eee:	f3ef 8310 	mrs	r3, PRIMASK
 8017ef2:	61bb      	str	r3, [r7, #24]
  return(result);
 8017ef4:	69bb      	ldr	r3, [r7, #24]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d105      	bne.n	8017f06 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8017efa:	f3ef 8311 	mrs	r3, BASEPRI
 8017efe:	617b      	str	r3, [r7, #20]
  return(result);
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d003      	beq.n	8017f0e <osThreadNew+0x3e>
 8017f06:	4b44      	ldr	r3, [pc, #272]	; (8018018 <osThreadNew+0x148>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	2b02      	cmp	r3, #2
 8017f0c:	d07e      	beq.n	801800c <osThreadNew+0x13c>
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d07b      	beq.n	801800c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8017f14:	2380      	movs	r3, #128	; 0x80
 8017f16:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8017f18:	2318      	movs	r3, #24
 8017f1a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8017f20:	f04f 33ff 	mov.w	r3, #4294967295
 8017f24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d045      	beq.n	8017fb8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d002      	beq.n	8017f3a <osThreadNew+0x6a>
        name = attr->name;
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	699b      	ldr	r3, [r3, #24]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d002      	beq.n	8017f48 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	699b      	ldr	r3, [r3, #24]
 8017f46:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d008      	beq.n	8017f60 <osThreadNew+0x90>
 8017f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f50:	2b38      	cmp	r3, #56	; 0x38
 8017f52:	d805      	bhi.n	8017f60 <osThreadNew+0x90>
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	685b      	ldr	r3, [r3, #4]
 8017f58:	f003 0301 	and.w	r3, r3, #1
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d001      	beq.n	8017f64 <osThreadNew+0x94>
        return (NULL);
 8017f60:	2300      	movs	r3, #0
 8017f62:	e054      	b.n	801800e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	695b      	ldr	r3, [r3, #20]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d003      	beq.n	8017f74 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	695b      	ldr	r3, [r3, #20]
 8017f70:	089b      	lsrs	r3, r3, #2
 8017f72:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	689b      	ldr	r3, [r3, #8]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d00e      	beq.n	8017f9a <osThreadNew+0xca>
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	2b5b      	cmp	r3, #91	; 0x5b
 8017f82:	d90a      	bls.n	8017f9a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d006      	beq.n	8017f9a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	695b      	ldr	r3, [r3, #20]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d002      	beq.n	8017f9a <osThreadNew+0xca>
        mem = 1;
 8017f94:	2301      	movs	r3, #1
 8017f96:	623b      	str	r3, [r7, #32]
 8017f98:	e010      	b.n	8017fbc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	689b      	ldr	r3, [r3, #8]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d10c      	bne.n	8017fbc <osThreadNew+0xec>
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	68db      	ldr	r3, [r3, #12]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d108      	bne.n	8017fbc <osThreadNew+0xec>
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	691b      	ldr	r3, [r3, #16]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d104      	bne.n	8017fbc <osThreadNew+0xec>
          mem = 0;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	623b      	str	r3, [r7, #32]
 8017fb6:	e001      	b.n	8017fbc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8017fbc:	6a3b      	ldr	r3, [r7, #32]
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	d110      	bne.n	8017fe4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8017fc6:	687a      	ldr	r2, [r7, #4]
 8017fc8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017fca:	9202      	str	r2, [sp, #8]
 8017fcc:	9301      	str	r3, [sp, #4]
 8017fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd0:	9300      	str	r3, [sp, #0]
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017fd8:	68f8      	ldr	r0, [r7, #12]
 8017fda:	f001 fdf5 	bl	8019bc8 <xTaskCreateStatic>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	613b      	str	r3, [r7, #16]
 8017fe2:	e013      	b.n	801800c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8017fe4:	6a3b      	ldr	r3, [r7, #32]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d110      	bne.n	801800c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fec:	b29a      	uxth	r2, r3
 8017fee:	f107 0310 	add.w	r3, r7, #16
 8017ff2:	9301      	str	r3, [sp, #4]
 8017ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff6:	9300      	str	r3, [sp, #0]
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ffc:	68f8      	ldr	r0, [r7, #12]
 8017ffe:	f001 fe3d 	bl	8019c7c <xTaskCreate>
 8018002:	4603      	mov	r3, r0
 8018004:	2b01      	cmp	r3, #1
 8018006:	d001      	beq.n	801800c <osThreadNew+0x13c>
          hTask = NULL;
 8018008:	2300      	movs	r3, #0
 801800a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801800c:	693b      	ldr	r3, [r7, #16]
}
 801800e:	4618      	mov	r0, r3
 8018010:	3730      	adds	r7, #48	; 0x30
 8018012:	46bd      	mov	sp, r7
 8018014:	bd80      	pop	{r7, pc}
 8018016:	bf00      	nop
 8018018:	20000ba8 	.word	0x20000ba8

0801801c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 801801c:	b580      	push	{r7, lr}
 801801e:	b08a      	sub	sp, #40	; 0x28
 8018020:	af02      	add	r7, sp, #8
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 801802a:	69fb      	ldr	r3, [r7, #28]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d002      	beq.n	8018036 <osThreadFlagsSet+0x1a>
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	2b00      	cmp	r3, #0
 8018034:	da03      	bge.n	801803e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8018036:	f06f 0303 	mvn.w	r3, #3
 801803a:	60fb      	str	r3, [r7, #12]
 801803c:	e046      	b.n	80180cc <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 801803e:	f04f 33ff 	mov.w	r3, #4294967295
 8018042:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018044:	f3ef 8305 	mrs	r3, IPSR
 8018048:	61bb      	str	r3, [r7, #24]
  return(result);
 801804a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 801804c:	2b00      	cmp	r3, #0
 801804e:	d10f      	bne.n	8018070 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018050:	f3ef 8310 	mrs	r3, PRIMASK
 8018054:	617b      	str	r3, [r7, #20]
  return(result);
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d105      	bne.n	8018068 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801805c:	f3ef 8311 	mrs	r3, BASEPRI
 8018060:	613b      	str	r3, [r7, #16]
  return(result);
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d024      	beq.n	80180b2 <osThreadFlagsSet+0x96>
 8018068:	4b1b      	ldr	r3, [pc, #108]	; (80180d8 <osThreadFlagsSet+0xbc>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	2b02      	cmp	r3, #2
 801806e:	d120      	bne.n	80180b2 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8018070:	2300      	movs	r3, #0
 8018072:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8018074:	f107 0308 	add.w	r3, r7, #8
 8018078:	9300      	str	r3, [sp, #0]
 801807a:	2300      	movs	r3, #0
 801807c:	2201      	movs	r2, #1
 801807e:	6839      	ldr	r1, [r7, #0]
 8018080:	69f8      	ldr	r0, [r7, #28]
 8018082:	f002 fec9 	bl	801ae18 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8018086:	f107 020c 	add.w	r2, r7, #12
 801808a:	2300      	movs	r3, #0
 801808c:	9300      	str	r3, [sp, #0]
 801808e:	4613      	mov	r3, r2
 8018090:	2200      	movs	r2, #0
 8018092:	2100      	movs	r1, #0
 8018094:	69f8      	ldr	r0, [r7, #28]
 8018096:	f002 febf 	bl	801ae18 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801809a:	68bb      	ldr	r3, [r7, #8]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d015      	beq.n	80180cc <osThreadFlagsSet+0xb0>
 80180a0:	4b0e      	ldr	r3, [pc, #56]	; (80180dc <osThreadFlagsSet+0xc0>)
 80180a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180a6:	601a      	str	r2, [r3, #0]
 80180a8:	f3bf 8f4f 	dsb	sy
 80180ac:	f3bf 8f6f 	isb	sy
 80180b0:	e00c      	b.n	80180cc <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80180b2:	2300      	movs	r3, #0
 80180b4:	2201      	movs	r2, #1
 80180b6:	6839      	ldr	r1, [r7, #0]
 80180b8:	69f8      	ldr	r0, [r7, #28]
 80180ba:	f002 fdf9 	bl	801acb0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80180be:	f107 030c 	add.w	r3, r7, #12
 80180c2:	2200      	movs	r2, #0
 80180c4:	2100      	movs	r1, #0
 80180c6:	69f8      	ldr	r0, [r7, #28]
 80180c8:	f002 fdf2 	bl	801acb0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80180cc:	68fb      	ldr	r3, [r7, #12]
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	3720      	adds	r7, #32
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd80      	pop	{r7, pc}
 80180d6:	bf00      	nop
 80180d8:	20000ba8 	.word	0x20000ba8
 80180dc:	e000ed04 	.word	0xe000ed04

080180e0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b08e      	sub	sp, #56	; 0x38
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	60f8      	str	r0, [r7, #12]
 80180e8:	60b9      	str	r1, [r7, #8]
 80180ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80180ec:	f3ef 8305 	mrs	r3, IPSR
 80180f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80180f2:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d10f      	bne.n	8018118 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80180f8:	f3ef 8310 	mrs	r3, PRIMASK
 80180fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80180fe:	69bb      	ldr	r3, [r7, #24]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d105      	bne.n	8018110 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018104:	f3ef 8311 	mrs	r3, BASEPRI
 8018108:	617b      	str	r3, [r7, #20]
  return(result);
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d007      	beq.n	8018120 <osThreadFlagsWait+0x40>
 8018110:	4b3c      	ldr	r3, [pc, #240]	; (8018204 <osThreadFlagsWait+0x124>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	2b02      	cmp	r3, #2
 8018116:	d103      	bne.n	8018120 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8018118:	f06f 0305 	mvn.w	r3, #5
 801811c:	637b      	str	r3, [r7, #52]	; 0x34
 801811e:	e06b      	b.n	80181f8 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	2b00      	cmp	r3, #0
 8018124:	da03      	bge.n	801812e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8018126:	f06f 0303 	mvn.w	r3, #3
 801812a:	637b      	str	r3, [r7, #52]	; 0x34
 801812c:	e064      	b.n	80181f8 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	f003 0302 	and.w	r3, r3, #2
 8018134:	2b00      	cmp	r3, #0
 8018136:	d002      	beq.n	801813e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8018138:	2300      	movs	r3, #0
 801813a:	633b      	str	r3, [r7, #48]	; 0x30
 801813c:	e001      	b.n	8018142 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8018142:	2300      	movs	r3, #0
 8018144:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 801814a:	f002 f897 	bl	801a27c <xTaskGetTickCount>
 801814e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8018150:	f107 0210 	add.w	r2, r7, #16
 8018154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018158:	2000      	movs	r0, #0
 801815a:	f002 fd4f 	bl	801abfc <xTaskNotifyWait>
 801815e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8018160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018162:	2b01      	cmp	r3, #1
 8018164:	d137      	bne.n	80181d6 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8018166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	4013      	ands	r3, r2
 801816c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018172:	4313      	orrs	r3, r2
 8018174:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8018176:	68bb      	ldr	r3, [r7, #8]
 8018178:	f003 0301 	and.w	r3, r3, #1
 801817c:	2b00      	cmp	r3, #0
 801817e:	d00c      	beq.n	801819a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8018180:	68fa      	ldr	r2, [r7, #12]
 8018182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018184:	4013      	ands	r3, r2
 8018186:	68fa      	ldr	r2, [r7, #12]
 8018188:	429a      	cmp	r2, r3
 801818a:	d032      	beq.n	80181f2 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d10f      	bne.n	80181b2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8018192:	f06f 0302 	mvn.w	r3, #2
 8018196:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8018198:	e02e      	b.n	80181f8 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 801819a:	68fa      	ldr	r2, [r7, #12]
 801819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801819e:	4013      	ands	r3, r2
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d128      	bne.n	80181f6 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d103      	bne.n	80181b2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80181aa:	f06f 0302 	mvn.w	r3, #2
 80181ae:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80181b0:	e022      	b.n	80181f8 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80181b2:	f002 f863 	bl	801a27c <xTaskGetTickCount>
 80181b6:	4602      	mov	r2, r0
 80181b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ba:	1ad3      	subs	r3, r2, r3
 80181bc:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80181be:	6a3a      	ldr	r2, [r7, #32]
 80181c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d902      	bls.n	80181cc <osThreadFlagsWait+0xec>
          tout  = 0;
 80181c6:	2300      	movs	r3, #0
 80181c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181ca:	e00e      	b.n	80181ea <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80181cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181ce:	6a3b      	ldr	r3, [r7, #32]
 80181d0:	1ad3      	subs	r3, r2, r3
 80181d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181d4:	e009      	b.n	80181ea <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d103      	bne.n	80181e4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 80181dc:	f06f 0302 	mvn.w	r3, #2
 80181e0:	637b      	str	r3, [r7, #52]	; 0x34
 80181e2:	e002      	b.n	80181ea <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80181e4:	f06f 0301 	mvn.w	r3, #1
 80181e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80181ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d1af      	bne.n	8018150 <osThreadFlagsWait+0x70>
 80181f0:	e002      	b.n	80181f8 <osThreadFlagsWait+0x118>
            break;
 80181f2:	bf00      	nop
 80181f4:	e000      	b.n	80181f8 <osThreadFlagsWait+0x118>
            break;
 80181f6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80181f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80181fa:	4618      	mov	r0, r3
 80181fc:	3738      	adds	r7, #56	; 0x38
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}
 8018202:	bf00      	nop
 8018204:	20000ba8 	.word	0x20000ba8

08018208 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8018208:	b580      	push	{r7, lr}
 801820a:	b086      	sub	sp, #24
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018210:	f3ef 8305 	mrs	r3, IPSR
 8018214:	613b      	str	r3, [r7, #16]
  return(result);
 8018216:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018218:	2b00      	cmp	r3, #0
 801821a:	d10f      	bne.n	801823c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801821c:	f3ef 8310 	mrs	r3, PRIMASK
 8018220:	60fb      	str	r3, [r7, #12]
  return(result);
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d105      	bne.n	8018234 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018228:	f3ef 8311 	mrs	r3, BASEPRI
 801822c:	60bb      	str	r3, [r7, #8]
  return(result);
 801822e:	68bb      	ldr	r3, [r7, #8]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d007      	beq.n	8018244 <osDelay+0x3c>
 8018234:	4b0a      	ldr	r3, [pc, #40]	; (8018260 <osDelay+0x58>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	2b02      	cmp	r3, #2
 801823a:	d103      	bne.n	8018244 <osDelay+0x3c>
    stat = osErrorISR;
 801823c:	f06f 0305 	mvn.w	r3, #5
 8018240:	617b      	str	r3, [r7, #20]
 8018242:	e007      	b.n	8018254 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8018244:	2300      	movs	r3, #0
 8018246:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d002      	beq.n	8018254 <osDelay+0x4c>
      vTaskDelay(ticks);
 801824e:	6878      	ldr	r0, [r7, #4]
 8018250:	f001 fed2 	bl	8019ff8 <vTaskDelay>
    }
  }

  return (stat);
 8018254:	697b      	ldr	r3, [r7, #20]
}
 8018256:	4618      	mov	r0, r3
 8018258:	3718      	adds	r7, #24
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}
 801825e:	bf00      	nop
 8018260:	20000ba8 	.word	0x20000ba8

08018264 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8018264:	b580      	push	{r7, lr}
 8018266:	b088      	sub	sp, #32
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801826c:	f3ef 8305 	mrs	r3, IPSR
 8018270:	617b      	str	r3, [r7, #20]
  return(result);
 8018272:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018274:	2b00      	cmp	r3, #0
 8018276:	d10f      	bne.n	8018298 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018278:	f3ef 8310 	mrs	r3, PRIMASK
 801827c:	613b      	str	r3, [r7, #16]
  return(result);
 801827e:	693b      	ldr	r3, [r7, #16]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d105      	bne.n	8018290 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018284:	f3ef 8311 	mrs	r3, BASEPRI
 8018288:	60fb      	str	r3, [r7, #12]
  return(result);
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d007      	beq.n	80182a0 <osDelayUntil+0x3c>
 8018290:	4b13      	ldr	r3, [pc, #76]	; (80182e0 <osDelayUntil+0x7c>)
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	2b02      	cmp	r3, #2
 8018296:	d103      	bne.n	80182a0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8018298:	f06f 0305 	mvn.w	r3, #5
 801829c:	61fb      	str	r3, [r7, #28]
 801829e:	e019      	b.n	80182d4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80182a0:	2300      	movs	r3, #0
 80182a2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80182a4:	f001 ffea 	bl	801a27c <xTaskGetTickCount>
 80182a8:	4603      	mov	r3, r0
 80182aa:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80182ac:	68bb      	ldr	r3, [r7, #8]
 80182ae:	687a      	ldr	r2, [r7, #4]
 80182b0:	1ad3      	subs	r3, r2, r3
 80182b2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80182b4:	69bb      	ldr	r3, [r7, #24]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d009      	beq.n	80182ce <osDelayUntil+0x6a>
 80182ba:	69bb      	ldr	r3, [r7, #24]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	db06      	blt.n	80182ce <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80182c0:	f107 0308 	add.w	r3, r7, #8
 80182c4:	69b9      	ldr	r1, [r7, #24]
 80182c6:	4618      	mov	r0, r3
 80182c8:	f001 fe1c 	bl	8019f04 <vTaskDelayUntil>
 80182cc:	e002      	b.n	80182d4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80182ce:	f06f 0303 	mvn.w	r3, #3
 80182d2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80182d4:	69fb      	ldr	r3, [r7, #28]
}
 80182d6:	4618      	mov	r0, r3
 80182d8:	3720      	adds	r7, #32
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd80      	pop	{r7, pc}
 80182de:	bf00      	nop
 80182e0:	20000ba8 	.word	0x20000ba8

080182e4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b08c      	sub	sp, #48	; 0x30
 80182e8:	af02      	add	r7, sp, #8
 80182ea:	60f8      	str	r0, [r7, #12]
 80182ec:	60b9      	str	r1, [r7, #8]
 80182ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80182f0:	2300      	movs	r3, #0
 80182f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80182f4:	f3ef 8305 	mrs	r3, IPSR
 80182f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80182fa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	f040 8087 	bne.w	8018410 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018302:	f3ef 8310 	mrs	r3, PRIMASK
 8018306:	617b      	str	r3, [r7, #20]
  return(result);
 8018308:	697b      	ldr	r3, [r7, #20]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d105      	bne.n	801831a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801830e:	f3ef 8311 	mrs	r3, BASEPRI
 8018312:	613b      	str	r3, [r7, #16]
  return(result);
 8018314:	693b      	ldr	r3, [r7, #16]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d003      	beq.n	8018322 <osSemaphoreNew+0x3e>
 801831a:	4b40      	ldr	r3, [pc, #256]	; (801841c <osSemaphoreNew+0x138>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b02      	cmp	r3, #2
 8018320:	d076      	beq.n	8018410 <osSemaphoreNew+0x12c>
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d073      	beq.n	8018410 <osSemaphoreNew+0x12c>
 8018328:	68ba      	ldr	r2, [r7, #8]
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	429a      	cmp	r2, r3
 801832e:	d86f      	bhi.n	8018410 <osSemaphoreNew+0x12c>
    mem = -1;
 8018330:	f04f 33ff 	mov.w	r3, #4294967295
 8018334:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d015      	beq.n	8018368 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	689b      	ldr	r3, [r3, #8]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d006      	beq.n	8018352 <osSemaphoreNew+0x6e>
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	68db      	ldr	r3, [r3, #12]
 8018348:	2b4f      	cmp	r3, #79	; 0x4f
 801834a:	d902      	bls.n	8018352 <osSemaphoreNew+0x6e>
        mem = 1;
 801834c:	2301      	movs	r3, #1
 801834e:	623b      	str	r3, [r7, #32]
 8018350:	e00c      	b.n	801836c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	689b      	ldr	r3, [r3, #8]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d108      	bne.n	801836c <osSemaphoreNew+0x88>
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	68db      	ldr	r3, [r3, #12]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d104      	bne.n	801836c <osSemaphoreNew+0x88>
          mem = 0;
 8018362:	2300      	movs	r3, #0
 8018364:	623b      	str	r3, [r7, #32]
 8018366:	e001      	b.n	801836c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8018368:	2300      	movs	r3, #0
 801836a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801836c:	6a3b      	ldr	r3, [r7, #32]
 801836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018372:	d04d      	beq.n	8018410 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	2b01      	cmp	r3, #1
 8018378:	d129      	bne.n	80183ce <osSemaphoreNew+0xea>
        if (mem == 1) {
 801837a:	6a3b      	ldr	r3, [r7, #32]
 801837c:	2b01      	cmp	r3, #1
 801837e:	d10b      	bne.n	8018398 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	689a      	ldr	r2, [r3, #8]
 8018384:	2303      	movs	r3, #3
 8018386:	9300      	str	r3, [sp, #0]
 8018388:	4613      	mov	r3, r2
 801838a:	2200      	movs	r2, #0
 801838c:	2100      	movs	r1, #0
 801838e:	2001      	movs	r0, #1
 8018390:	f000 fc72 	bl	8018c78 <xQueueGenericCreateStatic>
 8018394:	6278      	str	r0, [r7, #36]	; 0x24
 8018396:	e005      	b.n	80183a4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8018398:	2203      	movs	r2, #3
 801839a:	2100      	movs	r1, #0
 801839c:	2001      	movs	r0, #1
 801839e:	f000 fcde 	bl	8018d5e <xQueueGenericCreate>
 80183a2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80183a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d022      	beq.n	80183f0 <osSemaphoreNew+0x10c>
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d01f      	beq.n	80183f0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80183b0:	2300      	movs	r3, #0
 80183b2:	2200      	movs	r2, #0
 80183b4:	2100      	movs	r1, #0
 80183b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183b8:	f000 fd9a 	bl	8018ef0 <xQueueGenericSend>
 80183bc:	4603      	mov	r3, r0
 80183be:	2b01      	cmp	r3, #1
 80183c0:	d016      	beq.n	80183f0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80183c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183c4:	f001 fa2f 	bl	8019826 <vQueueDelete>
            hSemaphore = NULL;
 80183c8:	2300      	movs	r3, #0
 80183ca:	627b      	str	r3, [r7, #36]	; 0x24
 80183cc:	e010      	b.n	80183f0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80183ce:	6a3b      	ldr	r3, [r7, #32]
 80183d0:	2b01      	cmp	r3, #1
 80183d2:	d108      	bne.n	80183e6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	689b      	ldr	r3, [r3, #8]
 80183d8:	461a      	mov	r2, r3
 80183da:	68b9      	ldr	r1, [r7, #8]
 80183dc:	68f8      	ldr	r0, [r7, #12]
 80183de:	f000 fd20 	bl	8018e22 <xQueueCreateCountingSemaphoreStatic>
 80183e2:	6278      	str	r0, [r7, #36]	; 0x24
 80183e4:	e004      	b.n	80183f0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80183e6:	68b9      	ldr	r1, [r7, #8]
 80183e8:	68f8      	ldr	r0, [r7, #12]
 80183ea:	f000 fd4f 	bl	8018e8c <xQueueCreateCountingSemaphore>
 80183ee:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80183f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d00c      	beq.n	8018410 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d003      	beq.n	8018404 <osSemaphoreNew+0x120>
          name = attr->name;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	61fb      	str	r3, [r7, #28]
 8018402:	e001      	b.n	8018408 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8018404:	2300      	movs	r3, #0
 8018406:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8018408:	69f9      	ldr	r1, [r7, #28]
 801840a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801840c:	f001 fb56 	bl	8019abc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8018410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018412:	4618      	mov	r0, r3
 8018414:	3728      	adds	r7, #40	; 0x28
 8018416:	46bd      	mov	sp, r7
 8018418:	bd80      	pop	{r7, pc}
 801841a:	bf00      	nop
 801841c:	20000ba8 	.word	0x20000ba8

08018420 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8018420:	b580      	push	{r7, lr}
 8018422:	b088      	sub	sp, #32
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
 8018428:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801842e:	2300      	movs	r3, #0
 8018430:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8018432:	69bb      	ldr	r3, [r7, #24]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d103      	bne.n	8018440 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8018438:	f06f 0303 	mvn.w	r3, #3
 801843c:	61fb      	str	r3, [r7, #28]
 801843e:	e04b      	b.n	80184d8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018440:	f3ef 8305 	mrs	r3, IPSR
 8018444:	617b      	str	r3, [r7, #20]
  return(result);
 8018446:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8018448:	2b00      	cmp	r3, #0
 801844a:	d10f      	bne.n	801846c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801844c:	f3ef 8310 	mrs	r3, PRIMASK
 8018450:	613b      	str	r3, [r7, #16]
  return(result);
 8018452:	693b      	ldr	r3, [r7, #16]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d105      	bne.n	8018464 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018458:	f3ef 8311 	mrs	r3, BASEPRI
 801845c:	60fb      	str	r3, [r7, #12]
  return(result);
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d026      	beq.n	80184b2 <osSemaphoreAcquire+0x92>
 8018464:	4b1f      	ldr	r3, [pc, #124]	; (80184e4 <osSemaphoreAcquire+0xc4>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2b02      	cmp	r3, #2
 801846a:	d122      	bne.n	80184b2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d003      	beq.n	801847a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8018472:	f06f 0303 	mvn.w	r3, #3
 8018476:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8018478:	e02d      	b.n	80184d6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801847a:	2300      	movs	r3, #0
 801847c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801847e:	f107 0308 	add.w	r3, r7, #8
 8018482:	461a      	mov	r2, r3
 8018484:	2100      	movs	r1, #0
 8018486:	69b8      	ldr	r0, [r7, #24]
 8018488:	f001 f92e 	bl	80196e8 <xQueueReceiveFromISR>
 801848c:	4603      	mov	r3, r0
 801848e:	2b01      	cmp	r3, #1
 8018490:	d003      	beq.n	801849a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8018492:	f06f 0302 	mvn.w	r3, #2
 8018496:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8018498:	e01d      	b.n	80184d6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d01a      	beq.n	80184d6 <osSemaphoreAcquire+0xb6>
 80184a0:	4b11      	ldr	r3, [pc, #68]	; (80184e8 <osSemaphoreAcquire+0xc8>)
 80184a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184a6:	601a      	str	r2, [r3, #0]
 80184a8:	f3bf 8f4f 	dsb	sy
 80184ac:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80184b0:	e011      	b.n	80184d6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80184b2:	6839      	ldr	r1, [r7, #0]
 80184b4:	69b8      	ldr	r0, [r7, #24]
 80184b6:	f001 f80f 	bl	80194d8 <xQueueSemaphoreTake>
 80184ba:	4603      	mov	r3, r0
 80184bc:	2b01      	cmp	r3, #1
 80184be:	d00b      	beq.n	80184d8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d003      	beq.n	80184ce <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80184c6:	f06f 0301 	mvn.w	r3, #1
 80184ca:	61fb      	str	r3, [r7, #28]
 80184cc:	e004      	b.n	80184d8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80184ce:	f06f 0302 	mvn.w	r3, #2
 80184d2:	61fb      	str	r3, [r7, #28]
 80184d4:	e000      	b.n	80184d8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80184d6:	bf00      	nop
      }
    }
  }

  return (stat);
 80184d8:	69fb      	ldr	r3, [r7, #28]
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3720      	adds	r7, #32
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	20000ba8 	.word	0x20000ba8
 80184e8:	e000ed04 	.word	0xe000ed04

080184ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b088      	sub	sp, #32
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80184f8:	2300      	movs	r3, #0
 80184fa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80184fc:	69bb      	ldr	r3, [r7, #24]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d103      	bne.n	801850a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8018502:	f06f 0303 	mvn.w	r3, #3
 8018506:	61fb      	str	r3, [r7, #28]
 8018508:	e03e      	b.n	8018588 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801850a:	f3ef 8305 	mrs	r3, IPSR
 801850e:	617b      	str	r3, [r7, #20]
  return(result);
 8018510:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8018512:	2b00      	cmp	r3, #0
 8018514:	d10f      	bne.n	8018536 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018516:	f3ef 8310 	mrs	r3, PRIMASK
 801851a:	613b      	str	r3, [r7, #16]
  return(result);
 801851c:	693b      	ldr	r3, [r7, #16]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d105      	bne.n	801852e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018522:	f3ef 8311 	mrs	r3, BASEPRI
 8018526:	60fb      	str	r3, [r7, #12]
  return(result);
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d01e      	beq.n	801856c <osSemaphoreRelease+0x80>
 801852e:	4b19      	ldr	r3, [pc, #100]	; (8018594 <osSemaphoreRelease+0xa8>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	2b02      	cmp	r3, #2
 8018534:	d11a      	bne.n	801856c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8018536:	2300      	movs	r3, #0
 8018538:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801853a:	f107 0308 	add.w	r3, r7, #8
 801853e:	4619      	mov	r1, r3
 8018540:	69b8      	ldr	r0, [r7, #24]
 8018542:	f000 fe63 	bl	801920c <xQueueGiveFromISR>
 8018546:	4603      	mov	r3, r0
 8018548:	2b01      	cmp	r3, #1
 801854a:	d003      	beq.n	8018554 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801854c:	f06f 0302 	mvn.w	r3, #2
 8018550:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8018552:	e018      	b.n	8018586 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8018554:	68bb      	ldr	r3, [r7, #8]
 8018556:	2b00      	cmp	r3, #0
 8018558:	d015      	beq.n	8018586 <osSemaphoreRelease+0x9a>
 801855a:	4b0f      	ldr	r3, [pc, #60]	; (8018598 <osSemaphoreRelease+0xac>)
 801855c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018560:	601a      	str	r2, [r3, #0]
 8018562:	f3bf 8f4f 	dsb	sy
 8018566:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801856a:	e00c      	b.n	8018586 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801856c:	2300      	movs	r3, #0
 801856e:	2200      	movs	r2, #0
 8018570:	2100      	movs	r1, #0
 8018572:	69b8      	ldr	r0, [r7, #24]
 8018574:	f000 fcbc 	bl	8018ef0 <xQueueGenericSend>
 8018578:	4603      	mov	r3, r0
 801857a:	2b01      	cmp	r3, #1
 801857c:	d004      	beq.n	8018588 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801857e:	f06f 0302 	mvn.w	r3, #2
 8018582:	61fb      	str	r3, [r7, #28]
 8018584:	e000      	b.n	8018588 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8018586:	bf00      	nop
    }
  }

  return (stat);
 8018588:	69fb      	ldr	r3, [r7, #28]
}
 801858a:	4618      	mov	r0, r3
 801858c:	3720      	adds	r7, #32
 801858e:	46bd      	mov	sp, r7
 8018590:	bd80      	pop	{r7, pc}
 8018592:	bf00      	nop
 8018594:	20000ba8 	.word	0x20000ba8
 8018598:	e000ed04 	.word	0xe000ed04

0801859c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801859c:	b580      	push	{r7, lr}
 801859e:	b088      	sub	sp, #32
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80185a8:	f3ef 8305 	mrs	r3, IPSR
 80185ac:	617b      	str	r3, [r7, #20]
  return(result);
 80185ae:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d10f      	bne.n	80185d4 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185b4:	f3ef 8310 	mrs	r3, PRIMASK
 80185b8:	613b      	str	r3, [r7, #16]
  return(result);
 80185ba:	693b      	ldr	r3, [r7, #16]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d105      	bne.n	80185cc <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80185c0:	f3ef 8311 	mrs	r3, BASEPRI
 80185c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d007      	beq.n	80185dc <osSemaphoreDelete+0x40>
 80185cc:	4b0d      	ldr	r3, [pc, #52]	; (8018604 <osSemaphoreDelete+0x68>)
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2b02      	cmp	r3, #2
 80185d2:	d103      	bne.n	80185dc <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80185d4:	f06f 0305 	mvn.w	r3, #5
 80185d8:	61fb      	str	r3, [r7, #28]
 80185da:	e00e      	b.n	80185fa <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80185dc:	69bb      	ldr	r3, [r7, #24]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d103      	bne.n	80185ea <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80185e2:	f06f 0303 	mvn.w	r3, #3
 80185e6:	61fb      	str	r3, [r7, #28]
 80185e8:	e007      	b.n	80185fa <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80185ea:	69b8      	ldr	r0, [r7, #24]
 80185ec:	f001 fa8e 	bl	8019b0c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80185f0:	2300      	movs	r3, #0
 80185f2:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80185f4:	69b8      	ldr	r0, [r7, #24]
 80185f6:	f001 f916 	bl	8019826 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80185fa:	69fb      	ldr	r3, [r7, #28]
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3720      	adds	r7, #32
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}
 8018604:	20000ba8 	.word	0x20000ba8

08018608 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8018608:	b580      	push	{r7, lr}
 801860a:	b08c      	sub	sp, #48	; 0x30
 801860c:	af02      	add	r7, sp, #8
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8018614:	2300      	movs	r3, #0
 8018616:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018618:	f3ef 8305 	mrs	r3, IPSR
 801861c:	61bb      	str	r3, [r7, #24]
  return(result);
 801861e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8018620:	2b00      	cmp	r3, #0
 8018622:	d170      	bne.n	8018706 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018624:	f3ef 8310 	mrs	r3, PRIMASK
 8018628:	617b      	str	r3, [r7, #20]
  return(result);
 801862a:	697b      	ldr	r3, [r7, #20]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d105      	bne.n	801863c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018630:	f3ef 8311 	mrs	r3, BASEPRI
 8018634:	613b      	str	r3, [r7, #16]
  return(result);
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d003      	beq.n	8018644 <osMessageQueueNew+0x3c>
 801863c:	4b34      	ldr	r3, [pc, #208]	; (8018710 <osMessageQueueNew+0x108>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	2b02      	cmp	r3, #2
 8018642:	d060      	beq.n	8018706 <osMessageQueueNew+0xfe>
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d05d      	beq.n	8018706 <osMessageQueueNew+0xfe>
 801864a:	68bb      	ldr	r3, [r7, #8]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d05a      	beq.n	8018706 <osMessageQueueNew+0xfe>
    mem = -1;
 8018650:	f04f 33ff 	mov.w	r3, #4294967295
 8018654:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d029      	beq.n	80186b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	689b      	ldr	r3, [r3, #8]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d012      	beq.n	801868a <osMessageQueueNew+0x82>
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	2b4f      	cmp	r3, #79	; 0x4f
 801866a:	d90e      	bls.n	801868a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018670:	2b00      	cmp	r3, #0
 8018672:	d00a      	beq.n	801868a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	695a      	ldr	r2, [r3, #20]
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	68b9      	ldr	r1, [r7, #8]
 801867c:	fb01 f303 	mul.w	r3, r1, r3
 8018680:	429a      	cmp	r2, r3
 8018682:	d302      	bcc.n	801868a <osMessageQueueNew+0x82>
        mem = 1;
 8018684:	2301      	movs	r3, #1
 8018686:	623b      	str	r3, [r7, #32]
 8018688:	e014      	b.n	80186b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	689b      	ldr	r3, [r3, #8]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d110      	bne.n	80186b4 <osMessageQueueNew+0xac>
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	68db      	ldr	r3, [r3, #12]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d10c      	bne.n	80186b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d108      	bne.n	80186b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	695b      	ldr	r3, [r3, #20]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d104      	bne.n	80186b4 <osMessageQueueNew+0xac>
          mem = 0;
 80186aa:	2300      	movs	r3, #0
 80186ac:	623b      	str	r3, [r7, #32]
 80186ae:	e001      	b.n	80186b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80186b0:	2300      	movs	r3, #0
 80186b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80186b4:	6a3b      	ldr	r3, [r7, #32]
 80186b6:	2b01      	cmp	r3, #1
 80186b8:	d10c      	bne.n	80186d4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	691a      	ldr	r2, [r3, #16]
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6899      	ldr	r1, [r3, #8]
 80186c2:	2300      	movs	r3, #0
 80186c4:	9300      	str	r3, [sp, #0]
 80186c6:	460b      	mov	r3, r1
 80186c8:	68b9      	ldr	r1, [r7, #8]
 80186ca:	68f8      	ldr	r0, [r7, #12]
 80186cc:	f000 fad4 	bl	8018c78 <xQueueGenericCreateStatic>
 80186d0:	6278      	str	r0, [r7, #36]	; 0x24
 80186d2:	e008      	b.n	80186e6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80186d4:	6a3b      	ldr	r3, [r7, #32]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d105      	bne.n	80186e6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80186da:	2200      	movs	r2, #0
 80186dc:	68b9      	ldr	r1, [r7, #8]
 80186de:	68f8      	ldr	r0, [r7, #12]
 80186e0:	f000 fb3d 	bl	8018d5e <xQueueGenericCreate>
 80186e4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80186e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d00c      	beq.n	8018706 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d003      	beq.n	80186fa <osMessageQueueNew+0xf2>
        name = attr->name;
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	61fb      	str	r3, [r7, #28]
 80186f8:	e001      	b.n	80186fe <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80186fa:	2300      	movs	r3, #0
 80186fc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80186fe:	69f9      	ldr	r1, [r7, #28]
 8018700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018702:	f001 f9db 	bl	8019abc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8018706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018708:	4618      	mov	r0, r3
 801870a:	3728      	adds	r7, #40	; 0x28
 801870c:	46bd      	mov	sp, r7
 801870e:	bd80      	pop	{r7, pc}
 8018710:	20000ba8 	.word	0x20000ba8

08018714 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8018714:	b580      	push	{r7, lr}
 8018716:	b08a      	sub	sp, #40	; 0x28
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	60b9      	str	r1, [r7, #8]
 801871e:	603b      	str	r3, [r7, #0]
 8018720:	4613      	mov	r3, r2
 8018722:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8018728:	2300      	movs	r3, #0
 801872a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801872c:	f3ef 8305 	mrs	r3, IPSR
 8018730:	61fb      	str	r3, [r7, #28]
  return(result);
 8018732:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8018734:	2b00      	cmp	r3, #0
 8018736:	d10f      	bne.n	8018758 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018738:	f3ef 8310 	mrs	r3, PRIMASK
 801873c:	61bb      	str	r3, [r7, #24]
  return(result);
 801873e:	69bb      	ldr	r3, [r7, #24]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d105      	bne.n	8018750 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018744:	f3ef 8311 	mrs	r3, BASEPRI
 8018748:	617b      	str	r3, [r7, #20]
  return(result);
 801874a:	697b      	ldr	r3, [r7, #20]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d02c      	beq.n	80187aa <osMessageQueuePut+0x96>
 8018750:	4b28      	ldr	r3, [pc, #160]	; (80187f4 <osMessageQueuePut+0xe0>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b02      	cmp	r3, #2
 8018756:	d128      	bne.n	80187aa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018758:	6a3b      	ldr	r3, [r7, #32]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d005      	beq.n	801876a <osMessageQueuePut+0x56>
 801875e:	68bb      	ldr	r3, [r7, #8]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d002      	beq.n	801876a <osMessageQueuePut+0x56>
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d003      	beq.n	8018772 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801876a:	f06f 0303 	mvn.w	r3, #3
 801876e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018770:	e039      	b.n	80187e6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8018772:	2300      	movs	r3, #0
 8018774:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018776:	f107 0210 	add.w	r2, r7, #16
 801877a:	2300      	movs	r3, #0
 801877c:	68b9      	ldr	r1, [r7, #8]
 801877e:	6a38      	ldr	r0, [r7, #32]
 8018780:	f000 fcb0 	bl	80190e4 <xQueueGenericSendFromISR>
 8018784:	4603      	mov	r3, r0
 8018786:	2b01      	cmp	r3, #1
 8018788:	d003      	beq.n	8018792 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801878a:	f06f 0302 	mvn.w	r3, #2
 801878e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018790:	e029      	b.n	80187e6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d026      	beq.n	80187e6 <osMessageQueuePut+0xd2>
 8018798:	4b17      	ldr	r3, [pc, #92]	; (80187f8 <osMessageQueuePut+0xe4>)
 801879a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801879e:	601a      	str	r2, [r3, #0]
 80187a0:	f3bf 8f4f 	dsb	sy
 80187a4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80187a8:	e01d      	b.n	80187e6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80187aa:	6a3b      	ldr	r3, [r7, #32]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d002      	beq.n	80187b6 <osMessageQueuePut+0xa2>
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d103      	bne.n	80187be <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80187b6:	f06f 0303 	mvn.w	r3, #3
 80187ba:	627b      	str	r3, [r7, #36]	; 0x24
 80187bc:	e014      	b.n	80187e8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80187be:	2300      	movs	r3, #0
 80187c0:	683a      	ldr	r2, [r7, #0]
 80187c2:	68b9      	ldr	r1, [r7, #8]
 80187c4:	6a38      	ldr	r0, [r7, #32]
 80187c6:	f000 fb93 	bl	8018ef0 <xQueueGenericSend>
 80187ca:	4603      	mov	r3, r0
 80187cc:	2b01      	cmp	r3, #1
 80187ce:	d00b      	beq.n	80187e8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d003      	beq.n	80187de <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80187d6:	f06f 0301 	mvn.w	r3, #1
 80187da:	627b      	str	r3, [r7, #36]	; 0x24
 80187dc:	e004      	b.n	80187e8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80187de:	f06f 0302 	mvn.w	r3, #2
 80187e2:	627b      	str	r3, [r7, #36]	; 0x24
 80187e4:	e000      	b.n	80187e8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80187e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80187e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80187ea:	4618      	mov	r0, r3
 80187ec:	3728      	adds	r7, #40	; 0x28
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	20000ba8 	.word	0x20000ba8
 80187f8:	e000ed04 	.word	0xe000ed04

080187fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b08a      	sub	sp, #40	; 0x28
 8018800:	af00      	add	r7, sp, #0
 8018802:	60f8      	str	r0, [r7, #12]
 8018804:	60b9      	str	r1, [r7, #8]
 8018806:	607a      	str	r2, [r7, #4]
 8018808:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801880e:	2300      	movs	r3, #0
 8018810:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018812:	f3ef 8305 	mrs	r3, IPSR
 8018816:	61fb      	str	r3, [r7, #28]
  return(result);
 8018818:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801881a:	2b00      	cmp	r3, #0
 801881c:	d10f      	bne.n	801883e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801881e:	f3ef 8310 	mrs	r3, PRIMASK
 8018822:	61bb      	str	r3, [r7, #24]
  return(result);
 8018824:	69bb      	ldr	r3, [r7, #24]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d105      	bne.n	8018836 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801882a:	f3ef 8311 	mrs	r3, BASEPRI
 801882e:	617b      	str	r3, [r7, #20]
  return(result);
 8018830:	697b      	ldr	r3, [r7, #20]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d02c      	beq.n	8018890 <osMessageQueueGet+0x94>
 8018836:	4b28      	ldr	r3, [pc, #160]	; (80188d8 <osMessageQueueGet+0xdc>)
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	2b02      	cmp	r3, #2
 801883c:	d128      	bne.n	8018890 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801883e:	6a3b      	ldr	r3, [r7, #32]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d005      	beq.n	8018850 <osMessageQueueGet+0x54>
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d002      	beq.n	8018850 <osMessageQueueGet+0x54>
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d003      	beq.n	8018858 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8018850:	f06f 0303 	mvn.w	r3, #3
 8018854:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018856:	e038      	b.n	80188ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8018858:	2300      	movs	r3, #0
 801885a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801885c:	f107 0310 	add.w	r3, r7, #16
 8018860:	461a      	mov	r2, r3
 8018862:	68b9      	ldr	r1, [r7, #8]
 8018864:	6a38      	ldr	r0, [r7, #32]
 8018866:	f000 ff3f 	bl	80196e8 <xQueueReceiveFromISR>
 801886a:	4603      	mov	r3, r0
 801886c:	2b01      	cmp	r3, #1
 801886e:	d003      	beq.n	8018878 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8018870:	f06f 0302 	mvn.w	r3, #2
 8018874:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018876:	e028      	b.n	80188ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8018878:	693b      	ldr	r3, [r7, #16]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d025      	beq.n	80188ca <osMessageQueueGet+0xce>
 801887e:	4b17      	ldr	r3, [pc, #92]	; (80188dc <osMessageQueueGet+0xe0>)
 8018880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018884:	601a      	str	r2, [r3, #0]
 8018886:	f3bf 8f4f 	dsb	sy
 801888a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801888e:	e01c      	b.n	80188ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018890:	6a3b      	ldr	r3, [r7, #32]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d002      	beq.n	801889c <osMessageQueueGet+0xa0>
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d103      	bne.n	80188a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801889c:	f06f 0303 	mvn.w	r3, #3
 80188a0:	627b      	str	r3, [r7, #36]	; 0x24
 80188a2:	e013      	b.n	80188cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80188a4:	683a      	ldr	r2, [r7, #0]
 80188a6:	68b9      	ldr	r1, [r7, #8]
 80188a8:	6a38      	ldr	r0, [r7, #32]
 80188aa:	f000 fd39 	bl	8019320 <xQueueReceive>
 80188ae:	4603      	mov	r3, r0
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d00b      	beq.n	80188cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d003      	beq.n	80188c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80188ba:	f06f 0301 	mvn.w	r3, #1
 80188be:	627b      	str	r3, [r7, #36]	; 0x24
 80188c0:	e004      	b.n	80188cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80188c2:	f06f 0302 	mvn.w	r3, #2
 80188c6:	627b      	str	r3, [r7, #36]	; 0x24
 80188c8:	e000      	b.n	80188cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80188ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80188cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	3728      	adds	r7, #40	; 0x28
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}
 80188d6:	bf00      	nop
 80188d8:	20000ba8 	.word	0x20000ba8
 80188dc:	e000ed04 	.word	0xe000ed04

080188e0 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b08c      	sub	sp, #48	; 0x30
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 80188ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d102      	bne.n	80188f8 <osMessageQueueGetSpace+0x18>
    space = 0U;
 80188f2:	2300      	movs	r3, #0
 80188f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80188f6:	e033      	b.n	8018960 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80188f8:	f3ef 8305 	mrs	r3, IPSR
 80188fc:	623b      	str	r3, [r7, #32]
  return(result);
 80188fe:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8018900:	2b00      	cmp	r3, #0
 8018902:	d10f      	bne.n	8018924 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018904:	f3ef 8310 	mrs	r3, PRIMASK
 8018908:	61fb      	str	r3, [r7, #28]
  return(result);
 801890a:	69fb      	ldr	r3, [r7, #28]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d105      	bne.n	801891c <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018910:	f3ef 8311 	mrs	r3, BASEPRI
 8018914:	61bb      	str	r3, [r7, #24]
  return(result);
 8018916:	69bb      	ldr	r3, [r7, #24]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d01d      	beq.n	8018958 <osMessageQueueGetSpace+0x78>
 801891c:	4b13      	ldr	r3, [pc, #76]	; (801896c <osMessageQueueGetSpace+0x8c>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	2b02      	cmp	r3, #2
 8018922:	d119      	bne.n	8018958 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018924:	f3ef 8211 	mrs	r2, BASEPRI
 8018928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801892c:	f383 8811 	msr	BASEPRI, r3
 8018930:	f3bf 8f6f 	isb	sy
 8018934:	f3bf 8f4f 	dsb	sy
 8018938:	613a      	str	r2, [r7, #16]
 801893a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801893c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 801893e:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8018940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018948:	1ad3      	subs	r3, r2, r3
 801894a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018950:	697b      	ldr	r3, [r7, #20]
 8018952:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8018956:	e003      	b.n	8018960 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8018958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801895a:	f000 ff42 	bl	80197e2 <uxQueueSpacesAvailable>
 801895e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8018960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8018962:	4618      	mov	r0, r3
 8018964:	3730      	adds	r7, #48	; 0x30
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}
 801896a:	bf00      	nop
 801896c:	20000ba8 	.word	0x20000ba8

08018970 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8018970:	b580      	push	{r7, lr}
 8018972:	b088      	sub	sp, #32
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801897c:	f3ef 8305 	mrs	r3, IPSR
 8018980:	617b      	str	r3, [r7, #20]
  return(result);
 8018982:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018984:	2b00      	cmp	r3, #0
 8018986:	d10f      	bne.n	80189a8 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018988:	f3ef 8310 	mrs	r3, PRIMASK
 801898c:	613b      	str	r3, [r7, #16]
  return(result);
 801898e:	693b      	ldr	r3, [r7, #16]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d105      	bne.n	80189a0 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8018994:	f3ef 8311 	mrs	r3, BASEPRI
 8018998:	60fb      	str	r3, [r7, #12]
  return(result);
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d007      	beq.n	80189b0 <osMessageQueueReset+0x40>
 80189a0:	4b0c      	ldr	r3, [pc, #48]	; (80189d4 <osMessageQueueReset+0x64>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	2b02      	cmp	r3, #2
 80189a6:	d103      	bne.n	80189b0 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 80189a8:	f06f 0305 	mvn.w	r3, #5
 80189ac:	61fb      	str	r3, [r7, #28]
 80189ae:	e00c      	b.n	80189ca <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 80189b0:	69bb      	ldr	r3, [r7, #24]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d103      	bne.n	80189be <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 80189b6:	f06f 0303 	mvn.w	r3, #3
 80189ba:	61fb      	str	r3, [r7, #28]
 80189bc:	e005      	b.n	80189ca <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 80189be:	2300      	movs	r3, #0
 80189c0:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 80189c2:	2100      	movs	r1, #0
 80189c4:	69b8      	ldr	r0, [r7, #24]
 80189c6:	f000 f8ef 	bl	8018ba8 <xQueueGenericReset>
  }

  return (stat);
 80189ca:	69fb      	ldr	r3, [r7, #28]
}
 80189cc:	4618      	mov	r0, r3
 80189ce:	3720      	adds	r7, #32
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bd80      	pop	{r7, pc}
 80189d4:	20000ba8 	.word	0x20000ba8

080189d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80189d8:	b480      	push	{r7}
 80189da:	b085      	sub	sp, #20
 80189dc:	af00      	add	r7, sp, #0
 80189de:	60f8      	str	r0, [r7, #12]
 80189e0:	60b9      	str	r1, [r7, #8]
 80189e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	4a07      	ldr	r2, [pc, #28]	; (8018a04 <vApplicationGetIdleTaskMemory+0x2c>)
 80189e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	4a06      	ldr	r2, [pc, #24]	; (8018a08 <vApplicationGetIdleTaskMemory+0x30>)
 80189ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	2280      	movs	r2, #128	; 0x80
 80189f4:	601a      	str	r2, [r3, #0]
}
 80189f6:	bf00      	nop
 80189f8:	3714      	adds	r7, #20
 80189fa:	46bd      	mov	sp, r7
 80189fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a00:	4770      	bx	lr
 8018a02:	bf00      	nop
 8018a04:	20000bac 	.word	0x20000bac
 8018a08:	20000c08 	.word	0x20000c08

08018a0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8018a0c:	b480      	push	{r7}
 8018a0e:	b085      	sub	sp, #20
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	60f8      	str	r0, [r7, #12]
 8018a14:	60b9      	str	r1, [r7, #8]
 8018a16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	4a07      	ldr	r2, [pc, #28]	; (8018a38 <vApplicationGetTimerTaskMemory+0x2c>)
 8018a1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	4a06      	ldr	r2, [pc, #24]	; (8018a3c <vApplicationGetTimerTaskMemory+0x30>)
 8018a22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018a2a:	601a      	str	r2, [r3, #0]
}
 8018a2c:	bf00      	nop
 8018a2e:	3714      	adds	r7, #20
 8018a30:	46bd      	mov	sp, r7
 8018a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a36:	4770      	bx	lr
 8018a38:	20000e08 	.word	0x20000e08
 8018a3c:	20000e64 	.word	0x20000e64

08018a40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018a40:	b480      	push	{r7}
 8018a42:	b083      	sub	sp, #12
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	f103 0208 	add.w	r2, r3, #8
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	f04f 32ff 	mov.w	r2, #4294967295
 8018a58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	f103 0208 	add.w	r2, r3, #8
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	f103 0208 	add.w	r2, r3, #8
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	2200      	movs	r2, #0
 8018a72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018a74:	bf00      	nop
 8018a76:	370c      	adds	r7, #12
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7e:	4770      	bx	lr

08018a80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018a80:	b480      	push	{r7}
 8018a82:	b083      	sub	sp, #12
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018a8e:	bf00      	nop
 8018a90:	370c      	adds	r7, #12
 8018a92:	46bd      	mov	sp, r7
 8018a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a98:	4770      	bx	lr

08018a9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018a9a:	b480      	push	{r7}
 8018a9c:	b085      	sub	sp, #20
 8018a9e:	af00      	add	r7, sp, #0
 8018aa0:	6078      	str	r0, [r7, #4]
 8018aa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018aaa:	683b      	ldr	r3, [r7, #0]
 8018aac:	68fa      	ldr	r2, [r7, #12]
 8018aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	689a      	ldr	r2, [r3, #8]
 8018ab4:	683b      	ldr	r3, [r7, #0]
 8018ab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	689b      	ldr	r3, [r3, #8]
 8018abc:	683a      	ldr	r2, [r7, #0]
 8018abe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	683a      	ldr	r2, [r7, #0]
 8018ac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	687a      	ldr	r2, [r7, #4]
 8018aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	1c5a      	adds	r2, r3, #1
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	601a      	str	r2, [r3, #0]
}
 8018ad6:	bf00      	nop
 8018ad8:	3714      	adds	r7, #20
 8018ada:	46bd      	mov	sp, r7
 8018adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae0:	4770      	bx	lr

08018ae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018ae2:	b480      	push	{r7}
 8018ae4:	b085      	sub	sp, #20
 8018ae6:	af00      	add	r7, sp, #0
 8018ae8:	6078      	str	r0, [r7, #4]
 8018aea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018af8:	d103      	bne.n	8018b02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	691b      	ldr	r3, [r3, #16]
 8018afe:	60fb      	str	r3, [r7, #12]
 8018b00:	e00c      	b.n	8018b1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	3308      	adds	r3, #8
 8018b06:	60fb      	str	r3, [r7, #12]
 8018b08:	e002      	b.n	8018b10 <vListInsert+0x2e>
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	60fb      	str	r3, [r7, #12]
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	685b      	ldr	r3, [r3, #4]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	68ba      	ldr	r2, [r7, #8]
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	d2f6      	bcs.n	8018b0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	685a      	ldr	r2, [r3, #4]
 8018b20:	683b      	ldr	r3, [r7, #0]
 8018b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018b24:	683b      	ldr	r3, [r7, #0]
 8018b26:	685b      	ldr	r3, [r3, #4]
 8018b28:	683a      	ldr	r2, [r7, #0]
 8018b2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018b2c:	683b      	ldr	r3, [r7, #0]
 8018b2e:	68fa      	ldr	r2, [r7, #12]
 8018b30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	683a      	ldr	r2, [r7, #0]
 8018b36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	687a      	ldr	r2, [r7, #4]
 8018b3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	1c5a      	adds	r2, r3, #1
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	601a      	str	r2, [r3, #0]
}
 8018b48:	bf00      	nop
 8018b4a:	3714      	adds	r7, #20
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b52:	4770      	bx	lr

08018b54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018b54:	b480      	push	{r7}
 8018b56:	b085      	sub	sp, #20
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	691b      	ldr	r3, [r3, #16]
 8018b60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	685b      	ldr	r3, [r3, #4]
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	6892      	ldr	r2, [r2, #8]
 8018b6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	689b      	ldr	r3, [r3, #8]
 8018b70:	687a      	ldr	r2, [r7, #4]
 8018b72:	6852      	ldr	r2, [r2, #4]
 8018b74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	685b      	ldr	r3, [r3, #4]
 8018b7a:	687a      	ldr	r2, [r7, #4]
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	d103      	bne.n	8018b88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	689a      	ldr	r2, [r3, #8]
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	1e5a      	subs	r2, r3, #1
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	681b      	ldr	r3, [r3, #0]
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3714      	adds	r7, #20
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba6:	4770      	bx	lr

08018ba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b084      	sub	sp, #16
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
 8018bb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d109      	bne.n	8018bd0 <xQueueGenericReset+0x28>
	__asm volatile
 8018bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bc0:	f383 8811 	msr	BASEPRI, r3
 8018bc4:	f3bf 8f6f 	isb	sy
 8018bc8:	f3bf 8f4f 	dsb	sy
 8018bcc:	60bb      	str	r3, [r7, #8]
 8018bce:	e7fe      	b.n	8018bce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8018bd0:	f002 febc 	bl	801b94c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	681a      	ldr	r2, [r3, #0]
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bdc:	68f9      	ldr	r1, [r7, #12]
 8018bde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018be0:	fb01 f303 	mul.w	r3, r1, r3
 8018be4:	441a      	add	r2, r3
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	2200      	movs	r2, #0
 8018bee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	681a      	ldr	r2, [r3, #0]
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c00:	3b01      	subs	r3, #1
 8018c02:	68f9      	ldr	r1, [r7, #12]
 8018c04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018c06:	fb01 f303 	mul.w	r3, r1, r3
 8018c0a:	441a      	add	r2, r3
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	22ff      	movs	r2, #255	; 0xff
 8018c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	22ff      	movs	r2, #255	; 0xff
 8018c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018c20:	683b      	ldr	r3, [r7, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d114      	bne.n	8018c50 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	691b      	ldr	r3, [r3, #16]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d01a      	beq.n	8018c64 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	3310      	adds	r3, #16
 8018c32:	4618      	mov	r0, r3
 8018c34:	f001 fca6 	bl	801a584 <xTaskRemoveFromEventList>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d012      	beq.n	8018c64 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018c3e:	4b0d      	ldr	r3, [pc, #52]	; (8018c74 <xQueueGenericReset+0xcc>)
 8018c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c44:	601a      	str	r2, [r3, #0]
 8018c46:	f3bf 8f4f 	dsb	sy
 8018c4a:	f3bf 8f6f 	isb	sy
 8018c4e:	e009      	b.n	8018c64 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	3310      	adds	r3, #16
 8018c54:	4618      	mov	r0, r3
 8018c56:	f7ff fef3 	bl	8018a40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	3324      	adds	r3, #36	; 0x24
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7ff feee 	bl	8018a40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018c64:	f002 fea0 	bl	801b9a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018c68:	2301      	movs	r3, #1
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3710      	adds	r7, #16
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}
 8018c72:	bf00      	nop
 8018c74:	e000ed04 	.word	0xe000ed04

08018c78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b08e      	sub	sp, #56	; 0x38
 8018c7c:	af02      	add	r7, sp, #8
 8018c7e:	60f8      	str	r0, [r7, #12]
 8018c80:	60b9      	str	r1, [r7, #8]
 8018c82:	607a      	str	r2, [r7, #4]
 8018c84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d109      	bne.n	8018ca0 <xQueueGenericCreateStatic+0x28>
 8018c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c90:	f383 8811 	msr	BASEPRI, r3
 8018c94:	f3bf 8f6f 	isb	sy
 8018c98:	f3bf 8f4f 	dsb	sy
 8018c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c9e:	e7fe      	b.n	8018c9e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d109      	bne.n	8018cba <xQueueGenericCreateStatic+0x42>
 8018ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018caa:	f383 8811 	msr	BASEPRI, r3
 8018cae:	f3bf 8f6f 	isb	sy
 8018cb2:	f3bf 8f4f 	dsb	sy
 8018cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8018cb8:	e7fe      	b.n	8018cb8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d002      	beq.n	8018cc6 <xQueueGenericCreateStatic+0x4e>
 8018cc0:	68bb      	ldr	r3, [r7, #8]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d001      	beq.n	8018cca <xQueueGenericCreateStatic+0x52>
 8018cc6:	2301      	movs	r3, #1
 8018cc8:	e000      	b.n	8018ccc <xQueueGenericCreateStatic+0x54>
 8018cca:	2300      	movs	r3, #0
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d109      	bne.n	8018ce4 <xQueueGenericCreateStatic+0x6c>
 8018cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cd4:	f383 8811 	msr	BASEPRI, r3
 8018cd8:	f3bf 8f6f 	isb	sy
 8018cdc:	f3bf 8f4f 	dsb	sy
 8018ce0:	623b      	str	r3, [r7, #32]
 8018ce2:	e7fe      	b.n	8018ce2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d102      	bne.n	8018cf0 <xQueueGenericCreateStatic+0x78>
 8018cea:	68bb      	ldr	r3, [r7, #8]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d101      	bne.n	8018cf4 <xQueueGenericCreateStatic+0x7c>
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	e000      	b.n	8018cf6 <xQueueGenericCreateStatic+0x7e>
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d109      	bne.n	8018d0e <xQueueGenericCreateStatic+0x96>
 8018cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cfe:	f383 8811 	msr	BASEPRI, r3
 8018d02:	f3bf 8f6f 	isb	sy
 8018d06:	f3bf 8f4f 	dsb	sy
 8018d0a:	61fb      	str	r3, [r7, #28]
 8018d0c:	e7fe      	b.n	8018d0c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018d0e:	2350      	movs	r3, #80	; 0x50
 8018d10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018d12:	697b      	ldr	r3, [r7, #20]
 8018d14:	2b50      	cmp	r3, #80	; 0x50
 8018d16:	d009      	beq.n	8018d2c <xQueueGenericCreateStatic+0xb4>
 8018d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d1c:	f383 8811 	msr	BASEPRI, r3
 8018d20:	f3bf 8f6f 	isb	sy
 8018d24:	f3bf 8f4f 	dsb	sy
 8018d28:	61bb      	str	r3, [r7, #24]
 8018d2a:	e7fe      	b.n	8018d2a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018d2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d00d      	beq.n	8018d54 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d3a:	2201      	movs	r2, #1
 8018d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018d40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d46:	9300      	str	r3, [sp, #0]
 8018d48:	4613      	mov	r3, r2
 8018d4a:	687a      	ldr	r2, [r7, #4]
 8018d4c:	68b9      	ldr	r1, [r7, #8]
 8018d4e:	68f8      	ldr	r0, [r7, #12]
 8018d50:	f000 f844 	bl	8018ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8018d56:	4618      	mov	r0, r3
 8018d58:	3730      	adds	r7, #48	; 0x30
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}

08018d5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018d5e:	b580      	push	{r7, lr}
 8018d60:	b08a      	sub	sp, #40	; 0x28
 8018d62:	af02      	add	r7, sp, #8
 8018d64:	60f8      	str	r0, [r7, #12]
 8018d66:	60b9      	str	r1, [r7, #8]
 8018d68:	4613      	mov	r3, r2
 8018d6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d109      	bne.n	8018d86 <xQueueGenericCreate+0x28>
 8018d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d76:	f383 8811 	msr	BASEPRI, r3
 8018d7a:	f3bf 8f6f 	isb	sy
 8018d7e:	f3bf 8f4f 	dsb	sy
 8018d82:	613b      	str	r3, [r7, #16]
 8018d84:	e7fe      	b.n	8018d84 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8018d86:	68bb      	ldr	r3, [r7, #8]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d102      	bne.n	8018d92 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	61fb      	str	r3, [r7, #28]
 8018d90:	e004      	b.n	8018d9c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	68ba      	ldr	r2, [r7, #8]
 8018d96:	fb02 f303 	mul.w	r3, r2, r3
 8018d9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018d9c:	69fb      	ldr	r3, [r7, #28]
 8018d9e:	3350      	adds	r3, #80	; 0x50
 8018da0:	4618      	mov	r0, r3
 8018da2:	f002 feed 	bl	801bb80 <pvPortMalloc>
 8018da6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018da8:	69bb      	ldr	r3, [r7, #24]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d011      	beq.n	8018dd2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018dae:	69bb      	ldr	r3, [r7, #24]
 8018db0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	3350      	adds	r3, #80	; 0x50
 8018db6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018db8:	69bb      	ldr	r3, [r7, #24]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018dc0:	79fa      	ldrb	r2, [r7, #7]
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	9300      	str	r3, [sp, #0]
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	697a      	ldr	r2, [r7, #20]
 8018dca:	68b9      	ldr	r1, [r7, #8]
 8018dcc:	68f8      	ldr	r0, [r7, #12]
 8018dce:	f000 f805 	bl	8018ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	3720      	adds	r7, #32
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bd80      	pop	{r7, pc}

08018ddc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b084      	sub	sp, #16
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	60f8      	str	r0, [r7, #12]
 8018de4:	60b9      	str	r1, [r7, #8]
 8018de6:	607a      	str	r2, [r7, #4]
 8018de8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d103      	bne.n	8018df8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018df0:	69bb      	ldr	r3, [r7, #24]
 8018df2:	69ba      	ldr	r2, [r7, #24]
 8018df4:	601a      	str	r2, [r3, #0]
 8018df6:	e002      	b.n	8018dfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018df8:	69bb      	ldr	r3, [r7, #24]
 8018dfa:	687a      	ldr	r2, [r7, #4]
 8018dfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018dfe:	69bb      	ldr	r3, [r7, #24]
 8018e00:	68fa      	ldr	r2, [r7, #12]
 8018e02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018e04:	69bb      	ldr	r3, [r7, #24]
 8018e06:	68ba      	ldr	r2, [r7, #8]
 8018e08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018e0a:	2101      	movs	r1, #1
 8018e0c:	69b8      	ldr	r0, [r7, #24]
 8018e0e:	f7ff fecb 	bl	8018ba8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8018e12:	69bb      	ldr	r3, [r7, #24]
 8018e14:	78fa      	ldrb	r2, [r7, #3]
 8018e16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018e1a:	bf00      	nop
 8018e1c:	3710      	adds	r7, #16
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}

08018e22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8018e22:	b580      	push	{r7, lr}
 8018e24:	b08a      	sub	sp, #40	; 0x28
 8018e26:	af02      	add	r7, sp, #8
 8018e28:	60f8      	str	r0, [r7, #12]
 8018e2a:	60b9      	str	r1, [r7, #8]
 8018e2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d109      	bne.n	8018e48 <xQueueCreateCountingSemaphoreStatic+0x26>
 8018e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e38:	f383 8811 	msr	BASEPRI, r3
 8018e3c:	f3bf 8f6f 	isb	sy
 8018e40:	f3bf 8f4f 	dsb	sy
 8018e44:	61bb      	str	r3, [r7, #24]
 8018e46:	e7fe      	b.n	8018e46 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018e48:	68ba      	ldr	r2, [r7, #8]
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	429a      	cmp	r2, r3
 8018e4e:	d909      	bls.n	8018e64 <xQueueCreateCountingSemaphoreStatic+0x42>
 8018e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e54:	f383 8811 	msr	BASEPRI, r3
 8018e58:	f3bf 8f6f 	isb	sy
 8018e5c:	f3bf 8f4f 	dsb	sy
 8018e60:	617b      	str	r3, [r7, #20]
 8018e62:	e7fe      	b.n	8018e62 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018e64:	2302      	movs	r3, #2
 8018e66:	9300      	str	r3, [sp, #0]
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	2100      	movs	r1, #0
 8018e6e:	68f8      	ldr	r0, [r7, #12]
 8018e70:	f7ff ff02 	bl	8018c78 <xQueueGenericCreateStatic>
 8018e74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8018e76:	69fb      	ldr	r3, [r7, #28]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d002      	beq.n	8018e82 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018e7c:	69fb      	ldr	r3, [r7, #28]
 8018e7e:	68ba      	ldr	r2, [r7, #8]
 8018e80:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018e82:	69fb      	ldr	r3, [r7, #28]
	}
 8018e84:	4618      	mov	r0, r3
 8018e86:	3720      	adds	r7, #32
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	bd80      	pop	{r7, pc}

08018e8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d109      	bne.n	8018eb0 <xQueueCreateCountingSemaphore+0x24>
 8018e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ea0:	f383 8811 	msr	BASEPRI, r3
 8018ea4:	f3bf 8f6f 	isb	sy
 8018ea8:	f3bf 8f4f 	dsb	sy
 8018eac:	613b      	str	r3, [r7, #16]
 8018eae:	e7fe      	b.n	8018eae <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018eb0:	683a      	ldr	r2, [r7, #0]
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	d909      	bls.n	8018ecc <xQueueCreateCountingSemaphore+0x40>
 8018eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ebc:	f383 8811 	msr	BASEPRI, r3
 8018ec0:	f3bf 8f6f 	isb	sy
 8018ec4:	f3bf 8f4f 	dsb	sy
 8018ec8:	60fb      	str	r3, [r7, #12]
 8018eca:	e7fe      	b.n	8018eca <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018ecc:	2202      	movs	r2, #2
 8018ece:	2100      	movs	r1, #0
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f7ff ff44 	bl	8018d5e <xQueueGenericCreate>
 8018ed6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8018ed8:	697b      	ldr	r3, [r7, #20]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d002      	beq.n	8018ee4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	683a      	ldr	r2, [r7, #0]
 8018ee2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018ee4:	697b      	ldr	r3, [r7, #20]
	}
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	3718      	adds	r7, #24
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}
	...

08018ef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b08e      	sub	sp, #56	; 0x38
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	60f8      	str	r0, [r7, #12]
 8018ef8:	60b9      	str	r1, [r7, #8]
 8018efa:	607a      	str	r2, [r7, #4]
 8018efc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018efe:	2300      	movs	r3, #0
 8018f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d109      	bne.n	8018f20 <xQueueGenericSend+0x30>
 8018f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f10:	f383 8811 	msr	BASEPRI, r3
 8018f14:	f3bf 8f6f 	isb	sy
 8018f18:	f3bf 8f4f 	dsb	sy
 8018f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f1e:	e7fe      	b.n	8018f1e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d103      	bne.n	8018f2e <xQueueGenericSend+0x3e>
 8018f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d101      	bne.n	8018f32 <xQueueGenericSend+0x42>
 8018f2e:	2301      	movs	r3, #1
 8018f30:	e000      	b.n	8018f34 <xQueueGenericSend+0x44>
 8018f32:	2300      	movs	r3, #0
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d109      	bne.n	8018f4c <xQueueGenericSend+0x5c>
 8018f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f3c:	f383 8811 	msr	BASEPRI, r3
 8018f40:	f3bf 8f6f 	isb	sy
 8018f44:	f3bf 8f4f 	dsb	sy
 8018f48:	627b      	str	r3, [r7, #36]	; 0x24
 8018f4a:	e7fe      	b.n	8018f4a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	2b02      	cmp	r3, #2
 8018f50:	d103      	bne.n	8018f5a <xQueueGenericSend+0x6a>
 8018f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d101      	bne.n	8018f5e <xQueueGenericSend+0x6e>
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	e000      	b.n	8018f60 <xQueueGenericSend+0x70>
 8018f5e:	2300      	movs	r3, #0
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d109      	bne.n	8018f78 <xQueueGenericSend+0x88>
 8018f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f68:	f383 8811 	msr	BASEPRI, r3
 8018f6c:	f3bf 8f6f 	isb	sy
 8018f70:	f3bf 8f4f 	dsb	sy
 8018f74:	623b      	str	r3, [r7, #32]
 8018f76:	e7fe      	b.n	8018f76 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f78:	f001 fcba 	bl	801a8f0 <xTaskGetSchedulerState>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d102      	bne.n	8018f88 <xQueueGenericSend+0x98>
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d101      	bne.n	8018f8c <xQueueGenericSend+0x9c>
 8018f88:	2301      	movs	r3, #1
 8018f8a:	e000      	b.n	8018f8e <xQueueGenericSend+0x9e>
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d109      	bne.n	8018fa6 <xQueueGenericSend+0xb6>
 8018f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f96:	f383 8811 	msr	BASEPRI, r3
 8018f9a:	f3bf 8f6f 	isb	sy
 8018f9e:	f3bf 8f4f 	dsb	sy
 8018fa2:	61fb      	str	r3, [r7, #28]
 8018fa4:	e7fe      	b.n	8018fa4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018fa6:	f002 fcd1 	bl	801b94c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fb2:	429a      	cmp	r2, r3
 8018fb4:	d302      	bcc.n	8018fbc <xQueueGenericSend+0xcc>
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	2b02      	cmp	r3, #2
 8018fba:	d129      	bne.n	8019010 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018fbc:	683a      	ldr	r2, [r7, #0]
 8018fbe:	68b9      	ldr	r1, [r7, #8]
 8018fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018fc2:	f000 fc6a 	bl	801989a <prvCopyDataToQueue>
 8018fc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d010      	beq.n	8018ff2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fd2:	3324      	adds	r3, #36	; 0x24
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	f001 fad5 	bl	801a584 <xTaskRemoveFromEventList>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d013      	beq.n	8019008 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018fe0:	4b3f      	ldr	r3, [pc, #252]	; (80190e0 <xQueueGenericSend+0x1f0>)
 8018fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fe6:	601a      	str	r2, [r3, #0]
 8018fe8:	f3bf 8f4f 	dsb	sy
 8018fec:	f3bf 8f6f 	isb	sy
 8018ff0:	e00a      	b.n	8019008 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d007      	beq.n	8019008 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018ff8:	4b39      	ldr	r3, [pc, #228]	; (80190e0 <xQueueGenericSend+0x1f0>)
 8018ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ffe:	601a      	str	r2, [r3, #0]
 8019000:	f3bf 8f4f 	dsb	sy
 8019004:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019008:	f002 fcce 	bl	801b9a8 <vPortExitCritical>
				return pdPASS;
 801900c:	2301      	movs	r3, #1
 801900e:	e063      	b.n	80190d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d103      	bne.n	801901e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019016:	f002 fcc7 	bl	801b9a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801901a:	2300      	movs	r3, #0
 801901c:	e05c      	b.n	80190d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019020:	2b00      	cmp	r3, #0
 8019022:	d106      	bne.n	8019032 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019024:	f107 0314 	add.w	r3, r7, #20
 8019028:	4618      	mov	r0, r3
 801902a:	f001 fb0d 	bl	801a648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801902e:	2301      	movs	r3, #1
 8019030:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019032:	f002 fcb9 	bl	801b9a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019036:	f001 f877 	bl	801a128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801903a:	f002 fc87 	bl	801b94c <vPortEnterCritical>
 801903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019044:	b25b      	sxtb	r3, r3
 8019046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801904a:	d103      	bne.n	8019054 <xQueueGenericSend+0x164>
 801904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801904e:	2200      	movs	r2, #0
 8019050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801905a:	b25b      	sxtb	r3, r3
 801905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019060:	d103      	bne.n	801906a <xQueueGenericSend+0x17a>
 8019062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019064:	2200      	movs	r2, #0
 8019066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801906a:	f002 fc9d 	bl	801b9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801906e:	1d3a      	adds	r2, r7, #4
 8019070:	f107 0314 	add.w	r3, r7, #20
 8019074:	4611      	mov	r1, r2
 8019076:	4618      	mov	r0, r3
 8019078:	f001 fafc 	bl	801a674 <xTaskCheckForTimeOut>
 801907c:	4603      	mov	r3, r0
 801907e:	2b00      	cmp	r3, #0
 8019080:	d124      	bne.n	80190cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019084:	f000 fd01 	bl	8019a8a <prvIsQueueFull>
 8019088:	4603      	mov	r3, r0
 801908a:	2b00      	cmp	r3, #0
 801908c:	d018      	beq.n	80190c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019090:	3310      	adds	r3, #16
 8019092:	687a      	ldr	r2, [r7, #4]
 8019094:	4611      	mov	r1, r2
 8019096:	4618      	mov	r0, r3
 8019098:	f001 fa26 	bl	801a4e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801909c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801909e:	f000 fc8c 	bl	80199ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80190a2:	f001 f84f 	bl	801a144 <xTaskResumeAll>
 80190a6:	4603      	mov	r3, r0
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	f47f af7c 	bne.w	8018fa6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80190ae:	4b0c      	ldr	r3, [pc, #48]	; (80190e0 <xQueueGenericSend+0x1f0>)
 80190b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190b4:	601a      	str	r2, [r3, #0]
 80190b6:	f3bf 8f4f 	dsb	sy
 80190ba:	f3bf 8f6f 	isb	sy
 80190be:	e772      	b.n	8018fa6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80190c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190c2:	f000 fc7a 	bl	80199ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80190c6:	f001 f83d 	bl	801a144 <xTaskResumeAll>
 80190ca:	e76c      	b.n	8018fa6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80190cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190ce:	f000 fc74 	bl	80199ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80190d2:	f001 f837 	bl	801a144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80190d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80190d8:	4618      	mov	r0, r3
 80190da:	3738      	adds	r7, #56	; 0x38
 80190dc:	46bd      	mov	sp, r7
 80190de:	bd80      	pop	{r7, pc}
 80190e0:	e000ed04 	.word	0xe000ed04

080190e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b08e      	sub	sp, #56	; 0x38
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	60f8      	str	r0, [r7, #12]
 80190ec:	60b9      	str	r1, [r7, #8]
 80190ee:	607a      	str	r2, [r7, #4]
 80190f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80190f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d109      	bne.n	8019110 <xQueueGenericSendFromISR+0x2c>
 80190fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019100:	f383 8811 	msr	BASEPRI, r3
 8019104:	f3bf 8f6f 	isb	sy
 8019108:	f3bf 8f4f 	dsb	sy
 801910c:	627b      	str	r3, [r7, #36]	; 0x24
 801910e:	e7fe      	b.n	801910e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d103      	bne.n	801911e <xQueueGenericSendFromISR+0x3a>
 8019116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801911a:	2b00      	cmp	r3, #0
 801911c:	d101      	bne.n	8019122 <xQueueGenericSendFromISR+0x3e>
 801911e:	2301      	movs	r3, #1
 8019120:	e000      	b.n	8019124 <xQueueGenericSendFromISR+0x40>
 8019122:	2300      	movs	r3, #0
 8019124:	2b00      	cmp	r3, #0
 8019126:	d109      	bne.n	801913c <xQueueGenericSendFromISR+0x58>
 8019128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801912c:	f383 8811 	msr	BASEPRI, r3
 8019130:	f3bf 8f6f 	isb	sy
 8019134:	f3bf 8f4f 	dsb	sy
 8019138:	623b      	str	r3, [r7, #32]
 801913a:	e7fe      	b.n	801913a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	2b02      	cmp	r3, #2
 8019140:	d103      	bne.n	801914a <xQueueGenericSendFromISR+0x66>
 8019142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019146:	2b01      	cmp	r3, #1
 8019148:	d101      	bne.n	801914e <xQueueGenericSendFromISR+0x6a>
 801914a:	2301      	movs	r3, #1
 801914c:	e000      	b.n	8019150 <xQueueGenericSendFromISR+0x6c>
 801914e:	2300      	movs	r3, #0
 8019150:	2b00      	cmp	r3, #0
 8019152:	d109      	bne.n	8019168 <xQueueGenericSendFromISR+0x84>
 8019154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019158:	f383 8811 	msr	BASEPRI, r3
 801915c:	f3bf 8f6f 	isb	sy
 8019160:	f3bf 8f4f 	dsb	sy
 8019164:	61fb      	str	r3, [r7, #28]
 8019166:	e7fe      	b.n	8019166 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019168:	f002 fccc 	bl	801bb04 <vPortValidateInterruptPriority>
	__asm volatile
 801916c:	f3ef 8211 	mrs	r2, BASEPRI
 8019170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019174:	f383 8811 	msr	BASEPRI, r3
 8019178:	f3bf 8f6f 	isb	sy
 801917c:	f3bf 8f4f 	dsb	sy
 8019180:	61ba      	str	r2, [r7, #24]
 8019182:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019184:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019186:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801918a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801918e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019190:	429a      	cmp	r2, r3
 8019192:	d302      	bcc.n	801919a <xQueueGenericSendFromISR+0xb6>
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	2b02      	cmp	r3, #2
 8019198:	d12c      	bne.n	80191f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801919c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80191a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80191a4:	683a      	ldr	r2, [r7, #0]
 80191a6:	68b9      	ldr	r1, [r7, #8]
 80191a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191aa:	f000 fb76 	bl	801989a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80191ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80191b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191b6:	d112      	bne.n	80191de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80191b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d016      	beq.n	80191ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80191c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191c2:	3324      	adds	r3, #36	; 0x24
 80191c4:	4618      	mov	r0, r3
 80191c6:	f001 f9dd 	bl	801a584 <xTaskRemoveFromEventList>
 80191ca:	4603      	mov	r3, r0
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d00e      	beq.n	80191ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d00b      	beq.n	80191ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	2201      	movs	r2, #1
 80191da:	601a      	str	r2, [r3, #0]
 80191dc:	e007      	b.n	80191ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80191de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80191e2:	3301      	adds	r3, #1
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	b25a      	sxtb	r2, r3
 80191e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80191ee:	2301      	movs	r3, #1
 80191f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80191f2:	e001      	b.n	80191f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80191f4:	2300      	movs	r3, #0
 80191f6:	637b      	str	r3, [r7, #52]	; 0x34
 80191f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80191fc:	693b      	ldr	r3, [r7, #16]
 80191fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019204:	4618      	mov	r0, r3
 8019206:	3738      	adds	r7, #56	; 0x38
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}

0801920c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b08e      	sub	sp, #56	; 0x38
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801921c:	2b00      	cmp	r3, #0
 801921e:	d109      	bne.n	8019234 <xQueueGiveFromISR+0x28>
	__asm volatile
 8019220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019224:	f383 8811 	msr	BASEPRI, r3
 8019228:	f3bf 8f6f 	isb	sy
 801922c:	f3bf 8f4f 	dsb	sy
 8019230:	623b      	str	r3, [r7, #32]
 8019232:	e7fe      	b.n	8019232 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019238:	2b00      	cmp	r3, #0
 801923a:	d009      	beq.n	8019250 <xQueueGiveFromISR+0x44>
 801923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019240:	f383 8811 	msr	BASEPRI, r3
 8019244:	f3bf 8f6f 	isb	sy
 8019248:	f3bf 8f4f 	dsb	sy
 801924c:	61fb      	str	r3, [r7, #28]
 801924e:	e7fe      	b.n	801924e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d103      	bne.n	8019260 <xQueueGiveFromISR+0x54>
 8019258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801925a:	689b      	ldr	r3, [r3, #8]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d101      	bne.n	8019264 <xQueueGiveFromISR+0x58>
 8019260:	2301      	movs	r3, #1
 8019262:	e000      	b.n	8019266 <xQueueGiveFromISR+0x5a>
 8019264:	2300      	movs	r3, #0
 8019266:	2b00      	cmp	r3, #0
 8019268:	d109      	bne.n	801927e <xQueueGiveFromISR+0x72>
 801926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801926e:	f383 8811 	msr	BASEPRI, r3
 8019272:	f3bf 8f6f 	isb	sy
 8019276:	f3bf 8f4f 	dsb	sy
 801927a:	61bb      	str	r3, [r7, #24]
 801927c:	e7fe      	b.n	801927c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801927e:	f002 fc41 	bl	801bb04 <vPortValidateInterruptPriority>
	__asm volatile
 8019282:	f3ef 8211 	mrs	r2, BASEPRI
 8019286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801928a:	f383 8811 	msr	BASEPRI, r3
 801928e:	f3bf 8f6f 	isb	sy
 8019292:	f3bf 8f4f 	dsb	sy
 8019296:	617a      	str	r2, [r7, #20]
 8019298:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801929a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801929c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80192a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d22b      	bcs.n	8019306 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80192ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80192b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80192b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ba:	1c5a      	adds	r2, r3, #1
 80192bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80192c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80192c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192c8:	d112      	bne.n	80192f0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80192ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d016      	beq.n	8019300 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80192d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d4:	3324      	adds	r3, #36	; 0x24
 80192d6:	4618      	mov	r0, r3
 80192d8:	f001 f954 	bl	801a584 <xTaskRemoveFromEventList>
 80192dc:	4603      	mov	r3, r0
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d00e      	beq.n	8019300 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80192e2:	683b      	ldr	r3, [r7, #0]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d00b      	beq.n	8019300 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80192e8:	683b      	ldr	r3, [r7, #0]
 80192ea:	2201      	movs	r2, #1
 80192ec:	601a      	str	r2, [r3, #0]
 80192ee:	e007      	b.n	8019300 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80192f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192f4:	3301      	adds	r3, #1
 80192f6:	b2db      	uxtb	r3, r3
 80192f8:	b25a      	sxtb	r2, r3
 80192fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019300:	2301      	movs	r3, #1
 8019302:	637b      	str	r3, [r7, #52]	; 0x34
 8019304:	e001      	b.n	801930a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019306:	2300      	movs	r3, #0
 8019308:	637b      	str	r3, [r7, #52]	; 0x34
 801930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801930c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019316:	4618      	mov	r0, r3
 8019318:	3738      	adds	r7, #56	; 0x38
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}
	...

08019320 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b08c      	sub	sp, #48	; 0x30
 8019324:	af00      	add	r7, sp, #0
 8019326:	60f8      	str	r0, [r7, #12]
 8019328:	60b9      	str	r1, [r7, #8]
 801932a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801932c:	2300      	movs	r3, #0
 801932e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019336:	2b00      	cmp	r3, #0
 8019338:	d109      	bne.n	801934e <xQueueReceive+0x2e>
	__asm volatile
 801933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801933e:	f383 8811 	msr	BASEPRI, r3
 8019342:	f3bf 8f6f 	isb	sy
 8019346:	f3bf 8f4f 	dsb	sy
 801934a:	623b      	str	r3, [r7, #32]
 801934c:	e7fe      	b.n	801934c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801934e:	68bb      	ldr	r3, [r7, #8]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d103      	bne.n	801935c <xQueueReceive+0x3c>
 8019354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019358:	2b00      	cmp	r3, #0
 801935a:	d101      	bne.n	8019360 <xQueueReceive+0x40>
 801935c:	2301      	movs	r3, #1
 801935e:	e000      	b.n	8019362 <xQueueReceive+0x42>
 8019360:	2300      	movs	r3, #0
 8019362:	2b00      	cmp	r3, #0
 8019364:	d109      	bne.n	801937a <xQueueReceive+0x5a>
 8019366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801936a:	f383 8811 	msr	BASEPRI, r3
 801936e:	f3bf 8f6f 	isb	sy
 8019372:	f3bf 8f4f 	dsb	sy
 8019376:	61fb      	str	r3, [r7, #28]
 8019378:	e7fe      	b.n	8019378 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801937a:	f001 fab9 	bl	801a8f0 <xTaskGetSchedulerState>
 801937e:	4603      	mov	r3, r0
 8019380:	2b00      	cmp	r3, #0
 8019382:	d102      	bne.n	801938a <xQueueReceive+0x6a>
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d101      	bne.n	801938e <xQueueReceive+0x6e>
 801938a:	2301      	movs	r3, #1
 801938c:	e000      	b.n	8019390 <xQueueReceive+0x70>
 801938e:	2300      	movs	r3, #0
 8019390:	2b00      	cmp	r3, #0
 8019392:	d109      	bne.n	80193a8 <xQueueReceive+0x88>
 8019394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019398:	f383 8811 	msr	BASEPRI, r3
 801939c:	f3bf 8f6f 	isb	sy
 80193a0:	f3bf 8f4f 	dsb	sy
 80193a4:	61bb      	str	r3, [r7, #24]
 80193a6:	e7fe      	b.n	80193a6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80193a8:	f002 fad0 	bl	801b94c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80193ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80193b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d01f      	beq.n	80193f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80193b8:	68b9      	ldr	r1, [r7, #8]
 80193ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193bc:	f000 fad7 	bl	801996e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80193c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193c2:	1e5a      	subs	r2, r3, #1
 80193c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80193c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ca:	691b      	ldr	r3, [r3, #16]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d00f      	beq.n	80193f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80193d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d2:	3310      	adds	r3, #16
 80193d4:	4618      	mov	r0, r3
 80193d6:	f001 f8d5 	bl	801a584 <xTaskRemoveFromEventList>
 80193da:	4603      	mov	r3, r0
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d007      	beq.n	80193f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80193e0:	4b3c      	ldr	r3, [pc, #240]	; (80194d4 <xQueueReceive+0x1b4>)
 80193e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193e6:	601a      	str	r2, [r3, #0]
 80193e8:	f3bf 8f4f 	dsb	sy
 80193ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80193f0:	f002 fada 	bl	801b9a8 <vPortExitCritical>
				return pdPASS;
 80193f4:	2301      	movs	r3, #1
 80193f6:	e069      	b.n	80194cc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d103      	bne.n	8019406 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80193fe:	f002 fad3 	bl	801b9a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019402:	2300      	movs	r3, #0
 8019404:	e062      	b.n	80194cc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019408:	2b00      	cmp	r3, #0
 801940a:	d106      	bne.n	801941a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801940c:	f107 0310 	add.w	r3, r7, #16
 8019410:	4618      	mov	r0, r3
 8019412:	f001 f919 	bl	801a648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019416:	2301      	movs	r3, #1
 8019418:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801941a:	f002 fac5 	bl	801b9a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801941e:	f000 fe83 	bl	801a128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019422:	f002 fa93 	bl	801b94c <vPortEnterCritical>
 8019426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801942c:	b25b      	sxtb	r3, r3
 801942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019432:	d103      	bne.n	801943c <xQueueReceive+0x11c>
 8019434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019436:	2200      	movs	r2, #0
 8019438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801943e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019442:	b25b      	sxtb	r3, r3
 8019444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019448:	d103      	bne.n	8019452 <xQueueReceive+0x132>
 801944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944c:	2200      	movs	r2, #0
 801944e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019452:	f002 faa9 	bl	801b9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019456:	1d3a      	adds	r2, r7, #4
 8019458:	f107 0310 	add.w	r3, r7, #16
 801945c:	4611      	mov	r1, r2
 801945e:	4618      	mov	r0, r3
 8019460:	f001 f908 	bl	801a674 <xTaskCheckForTimeOut>
 8019464:	4603      	mov	r3, r0
 8019466:	2b00      	cmp	r3, #0
 8019468:	d123      	bne.n	80194b2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801946a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801946c:	f000 faf7 	bl	8019a5e <prvIsQueueEmpty>
 8019470:	4603      	mov	r3, r0
 8019472:	2b00      	cmp	r3, #0
 8019474:	d017      	beq.n	80194a6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019478:	3324      	adds	r3, #36	; 0x24
 801947a:	687a      	ldr	r2, [r7, #4]
 801947c:	4611      	mov	r1, r2
 801947e:	4618      	mov	r0, r3
 8019480:	f001 f832 	bl	801a4e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019486:	f000 fa98 	bl	80199ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801948a:	f000 fe5b 	bl	801a144 <xTaskResumeAll>
 801948e:	4603      	mov	r3, r0
 8019490:	2b00      	cmp	r3, #0
 8019492:	d189      	bne.n	80193a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8019494:	4b0f      	ldr	r3, [pc, #60]	; (80194d4 <xQueueReceive+0x1b4>)
 8019496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801949a:	601a      	str	r2, [r3, #0]
 801949c:	f3bf 8f4f 	dsb	sy
 80194a0:	f3bf 8f6f 	isb	sy
 80194a4:	e780      	b.n	80193a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80194a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194a8:	f000 fa87 	bl	80199ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80194ac:	f000 fe4a 	bl	801a144 <xTaskResumeAll>
 80194b0:	e77a      	b.n	80193a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80194b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194b4:	f000 fa81 	bl	80199ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80194b8:	f000 fe44 	bl	801a144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80194bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194be:	f000 face 	bl	8019a5e <prvIsQueueEmpty>
 80194c2:	4603      	mov	r3, r0
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	f43f af6f 	beq.w	80193a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80194ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	3730      	adds	r7, #48	; 0x30
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}
 80194d4:	e000ed04 	.word	0xe000ed04

080194d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b08e      	sub	sp, #56	; 0x38
 80194dc:	af00      	add	r7, sp, #0
 80194de:	6078      	str	r0, [r7, #4]
 80194e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80194e2:	2300      	movs	r3, #0
 80194e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80194ea:	2300      	movs	r3, #0
 80194ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80194ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d109      	bne.n	8019508 <xQueueSemaphoreTake+0x30>
 80194f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194f8:	f383 8811 	msr	BASEPRI, r3
 80194fc:	f3bf 8f6f 	isb	sy
 8019500:	f3bf 8f4f 	dsb	sy
 8019504:	623b      	str	r3, [r7, #32]
 8019506:	e7fe      	b.n	8019506 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801950c:	2b00      	cmp	r3, #0
 801950e:	d009      	beq.n	8019524 <xQueueSemaphoreTake+0x4c>
 8019510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019514:	f383 8811 	msr	BASEPRI, r3
 8019518:	f3bf 8f6f 	isb	sy
 801951c:	f3bf 8f4f 	dsb	sy
 8019520:	61fb      	str	r3, [r7, #28]
 8019522:	e7fe      	b.n	8019522 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019524:	f001 f9e4 	bl	801a8f0 <xTaskGetSchedulerState>
 8019528:	4603      	mov	r3, r0
 801952a:	2b00      	cmp	r3, #0
 801952c:	d102      	bne.n	8019534 <xQueueSemaphoreTake+0x5c>
 801952e:	683b      	ldr	r3, [r7, #0]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d101      	bne.n	8019538 <xQueueSemaphoreTake+0x60>
 8019534:	2301      	movs	r3, #1
 8019536:	e000      	b.n	801953a <xQueueSemaphoreTake+0x62>
 8019538:	2300      	movs	r3, #0
 801953a:	2b00      	cmp	r3, #0
 801953c:	d109      	bne.n	8019552 <xQueueSemaphoreTake+0x7a>
 801953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019542:	f383 8811 	msr	BASEPRI, r3
 8019546:	f3bf 8f6f 	isb	sy
 801954a:	f3bf 8f4f 	dsb	sy
 801954e:	61bb      	str	r3, [r7, #24]
 8019550:	e7fe      	b.n	8019550 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019552:	f002 f9fb 	bl	801b94c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801955a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801955e:	2b00      	cmp	r3, #0
 8019560:	d024      	beq.n	80195ac <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019564:	1e5a      	subs	r2, r3, #1
 8019566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019568:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d104      	bne.n	801957c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019572:	f001 fb2f 	bl	801abd4 <pvTaskIncrementMutexHeldCount>
 8019576:	4602      	mov	r2, r0
 8019578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801957a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801957e:	691b      	ldr	r3, [r3, #16]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d00f      	beq.n	80195a4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019586:	3310      	adds	r3, #16
 8019588:	4618      	mov	r0, r3
 801958a:	f000 fffb 	bl	801a584 <xTaskRemoveFromEventList>
 801958e:	4603      	mov	r3, r0
 8019590:	2b00      	cmp	r3, #0
 8019592:	d007      	beq.n	80195a4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019594:	4b53      	ldr	r3, [pc, #332]	; (80196e4 <xQueueSemaphoreTake+0x20c>)
 8019596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801959a:	601a      	str	r2, [r3, #0]
 801959c:	f3bf 8f4f 	dsb	sy
 80195a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80195a4:	f002 fa00 	bl	801b9a8 <vPortExitCritical>
				return pdPASS;
 80195a8:	2301      	movs	r3, #1
 80195aa:	e096      	b.n	80196da <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80195ac:	683b      	ldr	r3, [r7, #0]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d110      	bne.n	80195d4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80195b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d009      	beq.n	80195cc <xQueueSemaphoreTake+0xf4>
 80195b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195bc:	f383 8811 	msr	BASEPRI, r3
 80195c0:	f3bf 8f6f 	isb	sy
 80195c4:	f3bf 8f4f 	dsb	sy
 80195c8:	617b      	str	r3, [r7, #20]
 80195ca:	e7fe      	b.n	80195ca <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80195cc:	f002 f9ec 	bl	801b9a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80195d0:	2300      	movs	r3, #0
 80195d2:	e082      	b.n	80196da <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80195d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d106      	bne.n	80195e8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80195da:	f107 030c 	add.w	r3, r7, #12
 80195de:	4618      	mov	r0, r3
 80195e0:	f001 f832 	bl	801a648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80195e4:	2301      	movs	r3, #1
 80195e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80195e8:	f002 f9de 	bl	801b9a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80195ec:	f000 fd9c 	bl	801a128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80195f0:	f002 f9ac 	bl	801b94c <vPortEnterCritical>
 80195f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80195fa:	b25b      	sxtb	r3, r3
 80195fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019600:	d103      	bne.n	801960a <xQueueSemaphoreTake+0x132>
 8019602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019604:	2200      	movs	r2, #0
 8019606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801960c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019610:	b25b      	sxtb	r3, r3
 8019612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019616:	d103      	bne.n	8019620 <xQueueSemaphoreTake+0x148>
 8019618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801961a:	2200      	movs	r2, #0
 801961c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019620:	f002 f9c2 	bl	801b9a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019624:	463a      	mov	r2, r7
 8019626:	f107 030c 	add.w	r3, r7, #12
 801962a:	4611      	mov	r1, r2
 801962c:	4618      	mov	r0, r3
 801962e:	f001 f821 	bl	801a674 <xTaskCheckForTimeOut>
 8019632:	4603      	mov	r3, r0
 8019634:	2b00      	cmp	r3, #0
 8019636:	d132      	bne.n	801969e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801963a:	f000 fa10 	bl	8019a5e <prvIsQueueEmpty>
 801963e:	4603      	mov	r3, r0
 8019640:	2b00      	cmp	r3, #0
 8019642:	d026      	beq.n	8019692 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d109      	bne.n	8019660 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801964c:	f002 f97e 	bl	801b94c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019652:	689b      	ldr	r3, [r3, #8]
 8019654:	4618      	mov	r0, r3
 8019656:	f001 f969 	bl	801a92c <xTaskPriorityInherit>
 801965a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801965c:	f002 f9a4 	bl	801b9a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019662:	3324      	adds	r3, #36	; 0x24
 8019664:	683a      	ldr	r2, [r7, #0]
 8019666:	4611      	mov	r1, r2
 8019668:	4618      	mov	r0, r3
 801966a:	f000 ff3d 	bl	801a4e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801966e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019670:	f000 f9a3 	bl	80199ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019674:	f000 fd66 	bl	801a144 <xTaskResumeAll>
 8019678:	4603      	mov	r3, r0
 801967a:	2b00      	cmp	r3, #0
 801967c:	f47f af69 	bne.w	8019552 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8019680:	4b18      	ldr	r3, [pc, #96]	; (80196e4 <xQueueSemaphoreTake+0x20c>)
 8019682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019686:	601a      	str	r2, [r3, #0]
 8019688:	f3bf 8f4f 	dsb	sy
 801968c:	f3bf 8f6f 	isb	sy
 8019690:	e75f      	b.n	8019552 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019694:	f000 f991 	bl	80199ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019698:	f000 fd54 	bl	801a144 <xTaskResumeAll>
 801969c:	e759      	b.n	8019552 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801969e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196a0:	f000 f98b 	bl	80199ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80196a4:	f000 fd4e 	bl	801a144 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80196a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196aa:	f000 f9d8 	bl	8019a5e <prvIsQueueEmpty>
 80196ae:	4603      	mov	r3, r0
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	f43f af4e 	beq.w	8019552 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80196b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d00d      	beq.n	80196d8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80196bc:	f002 f946 	bl	801b94c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80196c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196c2:	f000 f8d2 	bl	801986a <prvGetDisinheritPriorityAfterTimeout>
 80196c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80196c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ca:	689b      	ldr	r3, [r3, #8]
 80196cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80196ce:	4618      	mov	r0, r3
 80196d0:	f001 fa00 	bl	801aad4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80196d4:	f002 f968 	bl	801b9a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80196d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3738      	adds	r7, #56	; 0x38
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	e000ed04 	.word	0xe000ed04

080196e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80196e8:	b580      	push	{r7, lr}
 80196ea:	b08e      	sub	sp, #56	; 0x38
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	60f8      	str	r0, [r7, #12]
 80196f0:	60b9      	str	r1, [r7, #8]
 80196f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80196f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d109      	bne.n	8019712 <xQueueReceiveFromISR+0x2a>
 80196fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019702:	f383 8811 	msr	BASEPRI, r3
 8019706:	f3bf 8f6f 	isb	sy
 801970a:	f3bf 8f4f 	dsb	sy
 801970e:	623b      	str	r3, [r7, #32]
 8019710:	e7fe      	b.n	8019710 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d103      	bne.n	8019720 <xQueueReceiveFromISR+0x38>
 8019718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801971c:	2b00      	cmp	r3, #0
 801971e:	d101      	bne.n	8019724 <xQueueReceiveFromISR+0x3c>
 8019720:	2301      	movs	r3, #1
 8019722:	e000      	b.n	8019726 <xQueueReceiveFromISR+0x3e>
 8019724:	2300      	movs	r3, #0
 8019726:	2b00      	cmp	r3, #0
 8019728:	d109      	bne.n	801973e <xQueueReceiveFromISR+0x56>
 801972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801972e:	f383 8811 	msr	BASEPRI, r3
 8019732:	f3bf 8f6f 	isb	sy
 8019736:	f3bf 8f4f 	dsb	sy
 801973a:	61fb      	str	r3, [r7, #28]
 801973c:	e7fe      	b.n	801973c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801973e:	f002 f9e1 	bl	801bb04 <vPortValidateInterruptPriority>
	__asm volatile
 8019742:	f3ef 8211 	mrs	r2, BASEPRI
 8019746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801974a:	f383 8811 	msr	BASEPRI, r3
 801974e:	f3bf 8f6f 	isb	sy
 8019752:	f3bf 8f4f 	dsb	sy
 8019756:	61ba      	str	r2, [r7, #24]
 8019758:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801975a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801975c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019762:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019766:	2b00      	cmp	r3, #0
 8019768:	d02f      	beq.n	80197ca <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801976c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019774:	68b9      	ldr	r1, [r7, #8]
 8019776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019778:	f000 f8f9 	bl	801996e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801977e:	1e5a      	subs	r2, r3, #1
 8019780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019782:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019784:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801978c:	d112      	bne.n	80197b4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019790:	691b      	ldr	r3, [r3, #16]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d016      	beq.n	80197c4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019798:	3310      	adds	r3, #16
 801979a:	4618      	mov	r0, r3
 801979c:	f000 fef2 	bl	801a584 <xTaskRemoveFromEventList>
 80197a0:	4603      	mov	r3, r0
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d00e      	beq.n	80197c4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d00b      	beq.n	80197c4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	2201      	movs	r2, #1
 80197b0:	601a      	str	r2, [r3, #0]
 80197b2:	e007      	b.n	80197c4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80197b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197b8:	3301      	adds	r3, #1
 80197ba:	b2db      	uxtb	r3, r3
 80197bc:	b25a      	sxtb	r2, r3
 80197be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80197c4:	2301      	movs	r3, #1
 80197c6:	637b      	str	r3, [r7, #52]	; 0x34
 80197c8:	e001      	b.n	80197ce <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80197ca:	2300      	movs	r3, #0
 80197cc:	637b      	str	r3, [r7, #52]	; 0x34
 80197ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80197d2:	693b      	ldr	r3, [r7, #16]
 80197d4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80197d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80197da:	4618      	mov	r0, r3
 80197dc:	3738      	adds	r7, #56	; 0x38
 80197de:	46bd      	mov	sp, r7
 80197e0:	bd80      	pop	{r7, pc}

080197e2 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80197e2:	b580      	push	{r7, lr}
 80197e4:	b086      	sub	sp, #24
 80197e6:	af00      	add	r7, sp, #0
 80197e8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80197ee:	697b      	ldr	r3, [r7, #20]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d109      	bne.n	8019808 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 80197f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197f8:	f383 8811 	msr	BASEPRI, r3
 80197fc:	f3bf 8f6f 	isb	sy
 8019800:	f3bf 8f4f 	dsb	sy
 8019804:	60fb      	str	r3, [r7, #12]
 8019806:	e7fe      	b.n	8019806 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8019808:	f002 f8a0 	bl	801b94c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 801980c:	697b      	ldr	r3, [r7, #20]
 801980e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019810:	697b      	ldr	r3, [r7, #20]
 8019812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019814:	1ad3      	subs	r3, r2, r3
 8019816:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8019818:	f002 f8c6 	bl	801b9a8 <vPortExitCritical>

	return uxReturn;
 801981c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801981e:	4618      	mov	r0, r3
 8019820:	3718      	adds	r7, #24
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}

08019826 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8019826:	b580      	push	{r7, lr}
 8019828:	b084      	sub	sp, #16
 801982a:	af00      	add	r7, sp, #0
 801982c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d109      	bne.n	801984c <vQueueDelete+0x26>
 8019838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801983c:	f383 8811 	msr	BASEPRI, r3
 8019840:	f3bf 8f6f 	isb	sy
 8019844:	f3bf 8f4f 	dsb	sy
 8019848:	60bb      	str	r3, [r7, #8]
 801984a:	e7fe      	b.n	801984a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801984c:	68f8      	ldr	r0, [r7, #12]
 801984e:	f000 f95d 	bl	8019b0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019858:	2b00      	cmp	r3, #0
 801985a:	d102      	bne.n	8019862 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801985c:	68f8      	ldr	r0, [r7, #12]
 801985e:	f002 fa51 	bl	801bd04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8019862:	bf00      	nop
 8019864:	3710      	adds	r7, #16
 8019866:	46bd      	mov	sp, r7
 8019868:	bd80      	pop	{r7, pc}

0801986a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801986a:	b480      	push	{r7}
 801986c:	b085      	sub	sp, #20
 801986e:	af00      	add	r7, sp, #0
 8019870:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019876:	2b00      	cmp	r3, #0
 8019878:	d006      	beq.n	8019888 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8019884:	60fb      	str	r3, [r7, #12]
 8019886:	e001      	b.n	801988c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8019888:	2300      	movs	r3, #0
 801988a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801988c:	68fb      	ldr	r3, [r7, #12]
	}
 801988e:	4618      	mov	r0, r3
 8019890:	3714      	adds	r7, #20
 8019892:	46bd      	mov	sp, r7
 8019894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019898:	4770      	bx	lr

0801989a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801989a:	b580      	push	{r7, lr}
 801989c:	b086      	sub	sp, #24
 801989e:	af00      	add	r7, sp, #0
 80198a0:	60f8      	str	r0, [r7, #12]
 80198a2:	60b9      	str	r1, [r7, #8]
 80198a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80198a6:	2300      	movs	r3, #0
 80198a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d10d      	bne.n	80198d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d14d      	bne.n	801995c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	689b      	ldr	r3, [r3, #8]
 80198c4:	4618      	mov	r0, r3
 80198c6:	f001 f899 	bl	801a9fc <xTaskPriorityDisinherit>
 80198ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	2200      	movs	r2, #0
 80198d0:	609a      	str	r2, [r3, #8]
 80198d2:	e043      	b.n	801995c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d119      	bne.n	801990e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	6858      	ldr	r0, [r3, #4]
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198e2:	461a      	mov	r2, r3
 80198e4:	68b9      	ldr	r1, [r7, #8]
 80198e6:	f003 ff51 	bl	801d78c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	685a      	ldr	r2, [r3, #4]
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198f2:	441a      	add	r2, r3
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	685a      	ldr	r2, [r3, #4]
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	689b      	ldr	r3, [r3, #8]
 8019900:	429a      	cmp	r2, r3
 8019902:	d32b      	bcc.n	801995c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	681a      	ldr	r2, [r3, #0]
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	605a      	str	r2, [r3, #4]
 801990c:	e026      	b.n	801995c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	68d8      	ldr	r0, [r3, #12]
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019916:	461a      	mov	r2, r3
 8019918:	68b9      	ldr	r1, [r7, #8]
 801991a:	f003 ff37 	bl	801d78c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	68da      	ldr	r2, [r3, #12]
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019926:	425b      	negs	r3, r3
 8019928:	441a      	add	r2, r3
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	68da      	ldr	r2, [r3, #12]
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	429a      	cmp	r2, r3
 8019938:	d207      	bcs.n	801994a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	689a      	ldr	r2, [r3, #8]
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019942:	425b      	negs	r3, r3
 8019944:	441a      	add	r2, r3
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	2b02      	cmp	r3, #2
 801994e:	d105      	bne.n	801995c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019950:	693b      	ldr	r3, [r7, #16]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d002      	beq.n	801995c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019956:	693b      	ldr	r3, [r7, #16]
 8019958:	3b01      	subs	r3, #1
 801995a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801995c:	693b      	ldr	r3, [r7, #16]
 801995e:	1c5a      	adds	r2, r3, #1
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019964:	697b      	ldr	r3, [r7, #20]
}
 8019966:	4618      	mov	r0, r3
 8019968:	3718      	adds	r7, #24
 801996a:	46bd      	mov	sp, r7
 801996c:	bd80      	pop	{r7, pc}

0801996e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801996e:	b580      	push	{r7, lr}
 8019970:	b082      	sub	sp, #8
 8019972:	af00      	add	r7, sp, #0
 8019974:	6078      	str	r0, [r7, #4]
 8019976:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801997c:	2b00      	cmp	r3, #0
 801997e:	d018      	beq.n	80199b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	68da      	ldr	r2, [r3, #12]
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019988:	441a      	add	r2, r3
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	68da      	ldr	r2, [r3, #12]
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	689b      	ldr	r3, [r3, #8]
 8019996:	429a      	cmp	r2, r3
 8019998:	d303      	bcc.n	80199a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681a      	ldr	r2, [r3, #0]
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	68d9      	ldr	r1, [r3, #12]
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199aa:	461a      	mov	r2, r3
 80199ac:	6838      	ldr	r0, [r7, #0]
 80199ae:	f003 feed 	bl	801d78c <memcpy>
	}
}
 80199b2:	bf00      	nop
 80199b4:	3708      	adds	r7, #8
 80199b6:	46bd      	mov	sp, r7
 80199b8:	bd80      	pop	{r7, pc}

080199ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80199ba:	b580      	push	{r7, lr}
 80199bc:	b084      	sub	sp, #16
 80199be:	af00      	add	r7, sp, #0
 80199c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80199c2:	f001 ffc3 	bl	801b94c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80199cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80199ce:	e011      	b.n	80199f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d012      	beq.n	80199fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	3324      	adds	r3, #36	; 0x24
 80199dc:	4618      	mov	r0, r3
 80199de:	f000 fdd1 	bl	801a584 <xTaskRemoveFromEventList>
 80199e2:	4603      	mov	r3, r0
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d001      	beq.n	80199ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80199e8:	f000 fea4 	bl	801a734 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80199ec:	7bfb      	ldrb	r3, [r7, #15]
 80199ee:	3b01      	subs	r3, #1
 80199f0:	b2db      	uxtb	r3, r3
 80199f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80199f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	dce9      	bgt.n	80199d0 <prvUnlockQueue+0x16>
 80199fc:	e000      	b.n	8019a00 <prvUnlockQueue+0x46>
					break;
 80199fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	22ff      	movs	r2, #255	; 0xff
 8019a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019a08:	f001 ffce 	bl	801b9a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019a0c:	f001 ff9e 	bl	801b94c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019a16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019a18:	e011      	b.n	8019a3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	691b      	ldr	r3, [r3, #16]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d012      	beq.n	8019a48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	3310      	adds	r3, #16
 8019a26:	4618      	mov	r0, r3
 8019a28:	f000 fdac 	bl	801a584 <xTaskRemoveFromEventList>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d001      	beq.n	8019a36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019a32:	f000 fe7f 	bl	801a734 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019a36:	7bbb      	ldrb	r3, [r7, #14]
 8019a38:	3b01      	subs	r3, #1
 8019a3a:	b2db      	uxtb	r3, r3
 8019a3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	dce9      	bgt.n	8019a1a <prvUnlockQueue+0x60>
 8019a46:	e000      	b.n	8019a4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019a48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	22ff      	movs	r2, #255	; 0xff
 8019a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019a52:	f001 ffa9 	bl	801b9a8 <vPortExitCritical>
}
 8019a56:	bf00      	nop
 8019a58:	3710      	adds	r7, #16
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}

08019a5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019a5e:	b580      	push	{r7, lr}
 8019a60:	b084      	sub	sp, #16
 8019a62:	af00      	add	r7, sp, #0
 8019a64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019a66:	f001 ff71 	bl	801b94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d102      	bne.n	8019a78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019a72:	2301      	movs	r3, #1
 8019a74:	60fb      	str	r3, [r7, #12]
 8019a76:	e001      	b.n	8019a7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019a78:	2300      	movs	r3, #0
 8019a7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019a7c:	f001 ff94 	bl	801b9a8 <vPortExitCritical>

	return xReturn;
 8019a80:	68fb      	ldr	r3, [r7, #12]
}
 8019a82:	4618      	mov	r0, r3
 8019a84:	3710      	adds	r7, #16
 8019a86:	46bd      	mov	sp, r7
 8019a88:	bd80      	pop	{r7, pc}

08019a8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019a8a:	b580      	push	{r7, lr}
 8019a8c:	b084      	sub	sp, #16
 8019a8e:	af00      	add	r7, sp, #0
 8019a90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019a92:	f001 ff5b 	bl	801b94c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a9e:	429a      	cmp	r2, r3
 8019aa0:	d102      	bne.n	8019aa8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019aa2:	2301      	movs	r3, #1
 8019aa4:	60fb      	str	r3, [r7, #12]
 8019aa6:	e001      	b.n	8019aac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019aac:	f001 ff7c 	bl	801b9a8 <vPortExitCritical>

	return xReturn;
 8019ab0:	68fb      	ldr	r3, [r7, #12]
}
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	3710      	adds	r7, #16
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}
	...

08019abc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8019abc:	b480      	push	{r7}
 8019abe:	b085      	sub	sp, #20
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	60fb      	str	r3, [r7, #12]
 8019aca:	e014      	b.n	8019af6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019acc:	4a0e      	ldr	r2, [pc, #56]	; (8019b08 <vQueueAddToRegistry+0x4c>)
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d10b      	bne.n	8019af0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019ad8:	490b      	ldr	r1, [pc, #44]	; (8019b08 <vQueueAddToRegistry+0x4c>)
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	683a      	ldr	r2, [r7, #0]
 8019ade:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019ae2:	4a09      	ldr	r2, [pc, #36]	; (8019b08 <vQueueAddToRegistry+0x4c>)
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	00db      	lsls	r3, r3, #3
 8019ae8:	4413      	add	r3, r2
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019aee:	e005      	b.n	8019afc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	3301      	adds	r3, #1
 8019af4:	60fb      	str	r3, [r7, #12]
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	2b07      	cmp	r3, #7
 8019afa:	d9e7      	bls.n	8019acc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019afc:	bf00      	nop
 8019afe:	3714      	adds	r7, #20
 8019b00:	46bd      	mov	sp, r7
 8019b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b06:	4770      	bx	lr
 8019b08:	2000f1e4 	.word	0x2000f1e4

08019b0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019b0c:	b480      	push	{r7}
 8019b0e:	b085      	sub	sp, #20
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019b14:	2300      	movs	r3, #0
 8019b16:	60fb      	str	r3, [r7, #12]
 8019b18:	e016      	b.n	8019b48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8019b1a:	4a10      	ldr	r2, [pc, #64]	; (8019b5c <vQueueUnregisterQueue+0x50>)
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	00db      	lsls	r3, r3, #3
 8019b20:	4413      	add	r3, r2
 8019b22:	685b      	ldr	r3, [r3, #4]
 8019b24:	687a      	ldr	r2, [r7, #4]
 8019b26:	429a      	cmp	r2, r3
 8019b28:	d10b      	bne.n	8019b42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8019b2a:	4a0c      	ldr	r2, [pc, #48]	; (8019b5c <vQueueUnregisterQueue+0x50>)
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	2100      	movs	r1, #0
 8019b30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8019b34:	4a09      	ldr	r2, [pc, #36]	; (8019b5c <vQueueUnregisterQueue+0x50>)
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	00db      	lsls	r3, r3, #3
 8019b3a:	4413      	add	r3, r2
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	605a      	str	r2, [r3, #4]
				break;
 8019b40:	e005      	b.n	8019b4e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	3301      	adds	r3, #1
 8019b46:	60fb      	str	r3, [r7, #12]
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	2b07      	cmp	r3, #7
 8019b4c:	d9e5      	bls.n	8019b1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8019b4e:	bf00      	nop
 8019b50:	3714      	adds	r7, #20
 8019b52:	46bd      	mov	sp, r7
 8019b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b58:	4770      	bx	lr
 8019b5a:	bf00      	nop
 8019b5c:	2000f1e4 	.word	0x2000f1e4

08019b60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b086      	sub	sp, #24
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	60f8      	str	r0, [r7, #12]
 8019b68:	60b9      	str	r1, [r7, #8]
 8019b6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019b70:	f001 feec 	bl	801b94c <vPortEnterCritical>
 8019b74:	697b      	ldr	r3, [r7, #20]
 8019b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019b7a:	b25b      	sxtb	r3, r3
 8019b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b80:	d103      	bne.n	8019b8a <vQueueWaitForMessageRestricted+0x2a>
 8019b82:	697b      	ldr	r3, [r7, #20]
 8019b84:	2200      	movs	r2, #0
 8019b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019b8a:	697b      	ldr	r3, [r7, #20]
 8019b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019b90:	b25b      	sxtb	r3, r3
 8019b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b96:	d103      	bne.n	8019ba0 <vQueueWaitForMessageRestricted+0x40>
 8019b98:	697b      	ldr	r3, [r7, #20]
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019ba0:	f001 ff02 	bl	801b9a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019ba4:	697b      	ldr	r3, [r7, #20]
 8019ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d106      	bne.n	8019bba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019bac:	697b      	ldr	r3, [r7, #20]
 8019bae:	3324      	adds	r3, #36	; 0x24
 8019bb0:	687a      	ldr	r2, [r7, #4]
 8019bb2:	68b9      	ldr	r1, [r7, #8]
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f000 fcbb 	bl	801a530 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8019bba:	6978      	ldr	r0, [r7, #20]
 8019bbc:	f7ff fefd 	bl	80199ba <prvUnlockQueue>
	}
 8019bc0:	bf00      	nop
 8019bc2:	3718      	adds	r7, #24
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd80      	pop	{r7, pc}

08019bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b08e      	sub	sp, #56	; 0x38
 8019bcc:	af04      	add	r7, sp, #16
 8019bce:	60f8      	str	r0, [r7, #12]
 8019bd0:	60b9      	str	r1, [r7, #8]
 8019bd2:	607a      	str	r2, [r7, #4]
 8019bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d109      	bne.n	8019bf0 <xTaskCreateStatic+0x28>
 8019bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019be0:	f383 8811 	msr	BASEPRI, r3
 8019be4:	f3bf 8f6f 	isb	sy
 8019be8:	f3bf 8f4f 	dsb	sy
 8019bec:	623b      	str	r3, [r7, #32]
 8019bee:	e7fe      	b.n	8019bee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8019bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d109      	bne.n	8019c0a <xTaskCreateStatic+0x42>
 8019bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bfa:	f383 8811 	msr	BASEPRI, r3
 8019bfe:	f3bf 8f6f 	isb	sy
 8019c02:	f3bf 8f4f 	dsb	sy
 8019c06:	61fb      	str	r3, [r7, #28]
 8019c08:	e7fe      	b.n	8019c08 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019c0a:	235c      	movs	r3, #92	; 0x5c
 8019c0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	2b5c      	cmp	r3, #92	; 0x5c
 8019c12:	d009      	beq.n	8019c28 <xTaskCreateStatic+0x60>
 8019c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c18:	f383 8811 	msr	BASEPRI, r3
 8019c1c:	f3bf 8f6f 	isb	sy
 8019c20:	f3bf 8f4f 	dsb	sy
 8019c24:	61bb      	str	r3, [r7, #24]
 8019c26:	e7fe      	b.n	8019c26 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019c28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d01e      	beq.n	8019c6e <xTaskCreateStatic+0xa6>
 8019c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d01b      	beq.n	8019c6e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019c3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	2202      	movs	r2, #2
 8019c44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019c48:	2300      	movs	r3, #0
 8019c4a:	9303      	str	r3, [sp, #12]
 8019c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4e:	9302      	str	r3, [sp, #8]
 8019c50:	f107 0314 	add.w	r3, r7, #20
 8019c54:	9301      	str	r3, [sp, #4]
 8019c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c58:	9300      	str	r3, [sp, #0]
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	687a      	ldr	r2, [r7, #4]
 8019c5e:	68b9      	ldr	r1, [r7, #8]
 8019c60:	68f8      	ldr	r0, [r7, #12]
 8019c62:	f000 f850 	bl	8019d06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c68:	f000 f8dc 	bl	8019e24 <prvAddNewTaskToReadyList>
 8019c6c:	e001      	b.n	8019c72 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8019c6e:	2300      	movs	r3, #0
 8019c70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019c72:	697b      	ldr	r3, [r7, #20]
	}
 8019c74:	4618      	mov	r0, r3
 8019c76:	3728      	adds	r7, #40	; 0x28
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}

08019c7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b08c      	sub	sp, #48	; 0x30
 8019c80:	af04      	add	r7, sp, #16
 8019c82:	60f8      	str	r0, [r7, #12]
 8019c84:	60b9      	str	r1, [r7, #8]
 8019c86:	603b      	str	r3, [r7, #0]
 8019c88:	4613      	mov	r3, r2
 8019c8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019c8c:	88fb      	ldrh	r3, [r7, #6]
 8019c8e:	009b      	lsls	r3, r3, #2
 8019c90:	4618      	mov	r0, r3
 8019c92:	f001 ff75 	bl	801bb80 <pvPortMalloc>
 8019c96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019c98:	697b      	ldr	r3, [r7, #20]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d00e      	beq.n	8019cbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019c9e:	205c      	movs	r0, #92	; 0x5c
 8019ca0:	f001 ff6e 	bl	801bb80 <pvPortMalloc>
 8019ca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019ca6:	69fb      	ldr	r3, [r7, #28]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d003      	beq.n	8019cb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019cac:	69fb      	ldr	r3, [r7, #28]
 8019cae:	697a      	ldr	r2, [r7, #20]
 8019cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8019cb2:	e005      	b.n	8019cc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019cb4:	6978      	ldr	r0, [r7, #20]
 8019cb6:	f002 f825 	bl	801bd04 <vPortFree>
 8019cba:	e001      	b.n	8019cc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019cc0:	69fb      	ldr	r3, [r7, #28]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d017      	beq.n	8019cf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019cc6:	69fb      	ldr	r3, [r7, #28]
 8019cc8:	2200      	movs	r2, #0
 8019cca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019cce:	88fa      	ldrh	r2, [r7, #6]
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	9303      	str	r3, [sp, #12]
 8019cd4:	69fb      	ldr	r3, [r7, #28]
 8019cd6:	9302      	str	r3, [sp, #8]
 8019cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cda:	9301      	str	r3, [sp, #4]
 8019cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cde:	9300      	str	r3, [sp, #0]
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	68b9      	ldr	r1, [r7, #8]
 8019ce4:	68f8      	ldr	r0, [r7, #12]
 8019ce6:	f000 f80e 	bl	8019d06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019cea:	69f8      	ldr	r0, [r7, #28]
 8019cec:	f000 f89a 	bl	8019e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019cf0:	2301      	movs	r3, #1
 8019cf2:	61bb      	str	r3, [r7, #24]
 8019cf4:	e002      	b.n	8019cfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8019cfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019cfc:	69bb      	ldr	r3, [r7, #24]
	}
 8019cfe:	4618      	mov	r0, r3
 8019d00:	3720      	adds	r7, #32
 8019d02:	46bd      	mov	sp, r7
 8019d04:	bd80      	pop	{r7, pc}

08019d06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019d06:	b580      	push	{r7, lr}
 8019d08:	b088      	sub	sp, #32
 8019d0a:	af00      	add	r7, sp, #0
 8019d0c:	60f8      	str	r0, [r7, #12]
 8019d0e:	60b9      	str	r1, [r7, #8]
 8019d10:	607a      	str	r2, [r7, #4]
 8019d12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	009b      	lsls	r3, r3, #2
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	21a5      	movs	r1, #165	; 0xa5
 8019d20:	f003 fd3f 	bl	801d7a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019d2e:	3b01      	subs	r3, #1
 8019d30:	009b      	lsls	r3, r3, #2
 8019d32:	4413      	add	r3, r2
 8019d34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019d36:	69bb      	ldr	r3, [r7, #24]
 8019d38:	f023 0307 	bic.w	r3, r3, #7
 8019d3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019d3e:	69bb      	ldr	r3, [r7, #24]
 8019d40:	f003 0307 	and.w	r3, r3, #7
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d009      	beq.n	8019d5c <prvInitialiseNewTask+0x56>
 8019d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d4c:	f383 8811 	msr	BASEPRI, r3
 8019d50:	f3bf 8f6f 	isb	sy
 8019d54:	f3bf 8f4f 	dsb	sy
 8019d58:	617b      	str	r3, [r7, #20]
 8019d5a:	e7fe      	b.n	8019d5a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019d5c:	68bb      	ldr	r3, [r7, #8]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d01f      	beq.n	8019da2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019d62:	2300      	movs	r3, #0
 8019d64:	61fb      	str	r3, [r7, #28]
 8019d66:	e012      	b.n	8019d8e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019d68:	68ba      	ldr	r2, [r7, #8]
 8019d6a:	69fb      	ldr	r3, [r7, #28]
 8019d6c:	4413      	add	r3, r2
 8019d6e:	7819      	ldrb	r1, [r3, #0]
 8019d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d72:	69fb      	ldr	r3, [r7, #28]
 8019d74:	4413      	add	r3, r2
 8019d76:	3334      	adds	r3, #52	; 0x34
 8019d78:	460a      	mov	r2, r1
 8019d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019d7c:	68ba      	ldr	r2, [r7, #8]
 8019d7e:	69fb      	ldr	r3, [r7, #28]
 8019d80:	4413      	add	r3, r2
 8019d82:	781b      	ldrb	r3, [r3, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d006      	beq.n	8019d96 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	3301      	adds	r3, #1
 8019d8c:	61fb      	str	r3, [r7, #28]
 8019d8e:	69fb      	ldr	r3, [r7, #28]
 8019d90:	2b0f      	cmp	r3, #15
 8019d92:	d9e9      	bls.n	8019d68 <prvInitialiseNewTask+0x62>
 8019d94:	e000      	b.n	8019d98 <prvInitialiseNewTask+0x92>
			{
				break;
 8019d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d9a:	2200      	movs	r2, #0
 8019d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019da0:	e003      	b.n	8019daa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019da4:	2200      	movs	r2, #0
 8019da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dac:	2b37      	cmp	r3, #55	; 0x37
 8019dae:	d901      	bls.n	8019db4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019db0:	2337      	movs	r3, #55	; 0x37
 8019db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dc8:	3304      	adds	r3, #4
 8019dca:	4618      	mov	r0, r3
 8019dcc:	f7fe fe58 	bl	8018a80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dd2:	3318      	adds	r3, #24
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f7fe fe53 	bl	8018a80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019df2:	2200      	movs	r2, #0
 8019df4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019df8:	2200      	movs	r2, #0
 8019dfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019dfe:	683a      	ldr	r2, [r7, #0]
 8019e00:	68f9      	ldr	r1, [r7, #12]
 8019e02:	69b8      	ldr	r0, [r7, #24]
 8019e04:	f001 fc7a 	bl	801b6fc <pxPortInitialiseStack>
 8019e08:	4602      	mov	r2, r0
 8019e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d002      	beq.n	8019e1a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019e1a:	bf00      	nop
 8019e1c:	3720      	adds	r7, #32
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	bd80      	pop	{r7, pc}
	...

08019e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b082      	sub	sp, #8
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019e2c:	f001 fd8e 	bl	801b94c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019e30:	4b2d      	ldr	r3, [pc, #180]	; (8019ee8 <prvAddNewTaskToReadyList+0xc4>)
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	3301      	adds	r3, #1
 8019e36:	4a2c      	ldr	r2, [pc, #176]	; (8019ee8 <prvAddNewTaskToReadyList+0xc4>)
 8019e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019e3a:	4b2c      	ldr	r3, [pc, #176]	; (8019eec <prvAddNewTaskToReadyList+0xc8>)
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d109      	bne.n	8019e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019e42:	4a2a      	ldr	r2, [pc, #168]	; (8019eec <prvAddNewTaskToReadyList+0xc8>)
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019e48:	4b27      	ldr	r3, [pc, #156]	; (8019ee8 <prvAddNewTaskToReadyList+0xc4>)
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	2b01      	cmp	r3, #1
 8019e4e:	d110      	bne.n	8019e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019e50:	f000 fc94 	bl	801a77c <prvInitialiseTaskLists>
 8019e54:	e00d      	b.n	8019e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019e56:	4b26      	ldr	r3, [pc, #152]	; (8019ef0 <prvAddNewTaskToReadyList+0xcc>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d109      	bne.n	8019e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019e5e:	4b23      	ldr	r3, [pc, #140]	; (8019eec <prvAddNewTaskToReadyList+0xc8>)
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e68:	429a      	cmp	r2, r3
 8019e6a:	d802      	bhi.n	8019e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019e6c:	4a1f      	ldr	r2, [pc, #124]	; (8019eec <prvAddNewTaskToReadyList+0xc8>)
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019e72:	4b20      	ldr	r3, [pc, #128]	; (8019ef4 <prvAddNewTaskToReadyList+0xd0>)
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	3301      	adds	r3, #1
 8019e78:	4a1e      	ldr	r2, [pc, #120]	; (8019ef4 <prvAddNewTaskToReadyList+0xd0>)
 8019e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019e7c:	4b1d      	ldr	r3, [pc, #116]	; (8019ef4 <prvAddNewTaskToReadyList+0xd0>)
 8019e7e:	681a      	ldr	r2, [r3, #0]
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e88:	4b1b      	ldr	r3, [pc, #108]	; (8019ef8 <prvAddNewTaskToReadyList+0xd4>)
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	d903      	bls.n	8019e98 <prvAddNewTaskToReadyList+0x74>
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e94:	4a18      	ldr	r2, [pc, #96]	; (8019ef8 <prvAddNewTaskToReadyList+0xd4>)
 8019e96:	6013      	str	r3, [r2, #0]
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e9c:	4613      	mov	r3, r2
 8019e9e:	009b      	lsls	r3, r3, #2
 8019ea0:	4413      	add	r3, r2
 8019ea2:	009b      	lsls	r3, r3, #2
 8019ea4:	4a15      	ldr	r2, [pc, #84]	; (8019efc <prvAddNewTaskToReadyList+0xd8>)
 8019ea6:	441a      	add	r2, r3
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	3304      	adds	r3, #4
 8019eac:	4619      	mov	r1, r3
 8019eae:	4610      	mov	r0, r2
 8019eb0:	f7fe fdf3 	bl	8018a9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019eb4:	f001 fd78 	bl	801b9a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019eb8:	4b0d      	ldr	r3, [pc, #52]	; (8019ef0 <prvAddNewTaskToReadyList+0xcc>)
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d00e      	beq.n	8019ede <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019ec0:	4b0a      	ldr	r3, [pc, #40]	; (8019eec <prvAddNewTaskToReadyList+0xc8>)
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	d207      	bcs.n	8019ede <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019ece:	4b0c      	ldr	r3, [pc, #48]	; (8019f00 <prvAddNewTaskToReadyList+0xdc>)
 8019ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ed4:	601a      	str	r2, [r3, #0]
 8019ed6:	f3bf 8f4f 	dsb	sy
 8019eda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019ede:	bf00      	nop
 8019ee0:	3708      	adds	r7, #8
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	20001738 	.word	0x20001738
 8019eec:	20001264 	.word	0x20001264
 8019ef0:	20001744 	.word	0x20001744
 8019ef4:	20001754 	.word	0x20001754
 8019ef8:	20001740 	.word	0x20001740
 8019efc:	20001268 	.word	0x20001268
 8019f00:	e000ed04 	.word	0xe000ed04

08019f04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b08a      	sub	sp, #40	; 0x28
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
 8019f0c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d109      	bne.n	8019f2c <vTaskDelayUntil+0x28>
 8019f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f1c:	f383 8811 	msr	BASEPRI, r3
 8019f20:	f3bf 8f6f 	isb	sy
 8019f24:	f3bf 8f4f 	dsb	sy
 8019f28:	617b      	str	r3, [r7, #20]
 8019f2a:	e7fe      	b.n	8019f2a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d109      	bne.n	8019f46 <vTaskDelayUntil+0x42>
 8019f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f36:	f383 8811 	msr	BASEPRI, r3
 8019f3a:	f3bf 8f6f 	isb	sy
 8019f3e:	f3bf 8f4f 	dsb	sy
 8019f42:	613b      	str	r3, [r7, #16]
 8019f44:	e7fe      	b.n	8019f44 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8019f46:	4b29      	ldr	r3, [pc, #164]	; (8019fec <vTaskDelayUntil+0xe8>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d009      	beq.n	8019f62 <vTaskDelayUntil+0x5e>
 8019f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f52:	f383 8811 	msr	BASEPRI, r3
 8019f56:	f3bf 8f6f 	isb	sy
 8019f5a:	f3bf 8f4f 	dsb	sy
 8019f5e:	60fb      	str	r3, [r7, #12]
 8019f60:	e7fe      	b.n	8019f60 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8019f62:	f000 f8e1 	bl	801a128 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8019f66:	4b22      	ldr	r3, [pc, #136]	; (8019ff0 <vTaskDelayUntil+0xec>)
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	683a      	ldr	r2, [r7, #0]
 8019f72:	4413      	add	r3, r2
 8019f74:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	6a3a      	ldr	r2, [r7, #32]
 8019f7c:	429a      	cmp	r2, r3
 8019f7e:	d20b      	bcs.n	8019f98 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	69fa      	ldr	r2, [r7, #28]
 8019f86:	429a      	cmp	r2, r3
 8019f88:	d211      	bcs.n	8019fae <vTaskDelayUntil+0xaa>
 8019f8a:	69fa      	ldr	r2, [r7, #28]
 8019f8c:	6a3b      	ldr	r3, [r7, #32]
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d90d      	bls.n	8019fae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8019f92:	2301      	movs	r3, #1
 8019f94:	627b      	str	r3, [r7, #36]	; 0x24
 8019f96:	e00a      	b.n	8019fae <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	69fa      	ldr	r2, [r7, #28]
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	d303      	bcc.n	8019faa <vTaskDelayUntil+0xa6>
 8019fa2:	69fa      	ldr	r2, [r7, #28]
 8019fa4:	6a3b      	ldr	r3, [r7, #32]
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d901      	bls.n	8019fae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8019faa:	2301      	movs	r3, #1
 8019fac:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	69fa      	ldr	r2, [r7, #28]
 8019fb2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8019fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d006      	beq.n	8019fc8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8019fba:	69fa      	ldr	r2, [r7, #28]
 8019fbc:	6a3b      	ldr	r3, [r7, #32]
 8019fbe:	1ad3      	subs	r3, r2, r3
 8019fc0:	2100      	movs	r1, #0
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f001 f800 	bl	801afc8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8019fc8:	f000 f8bc 	bl	801a144 <xTaskResumeAll>
 8019fcc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019fce:	69bb      	ldr	r3, [r7, #24]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d107      	bne.n	8019fe4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8019fd4:	4b07      	ldr	r3, [pc, #28]	; (8019ff4 <vTaskDelayUntil+0xf0>)
 8019fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019fda:	601a      	str	r2, [r3, #0]
 8019fdc:	f3bf 8f4f 	dsb	sy
 8019fe0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019fe4:	bf00      	nop
 8019fe6:	3728      	adds	r7, #40	; 0x28
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	20001760 	.word	0x20001760
 8019ff0:	2000173c 	.word	0x2000173c
 8019ff4:	e000ed04 	.word	0xe000ed04

08019ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b084      	sub	sp, #16
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a000:	2300      	movs	r3, #0
 801a002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d016      	beq.n	801a038 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a00a:	4b13      	ldr	r3, [pc, #76]	; (801a058 <vTaskDelay+0x60>)
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d009      	beq.n	801a026 <vTaskDelay+0x2e>
 801a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a016:	f383 8811 	msr	BASEPRI, r3
 801a01a:	f3bf 8f6f 	isb	sy
 801a01e:	f3bf 8f4f 	dsb	sy
 801a022:	60bb      	str	r3, [r7, #8]
 801a024:	e7fe      	b.n	801a024 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801a026:	f000 f87f 	bl	801a128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a02a:	2100      	movs	r1, #0
 801a02c:	6878      	ldr	r0, [r7, #4]
 801a02e:	f000 ffcb 	bl	801afc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a032:	f000 f887 	bl	801a144 <xTaskResumeAll>
 801a036:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d107      	bne.n	801a04e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801a03e:	4b07      	ldr	r3, [pc, #28]	; (801a05c <vTaskDelay+0x64>)
 801a040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a044:	601a      	str	r2, [r3, #0]
 801a046:	f3bf 8f4f 	dsb	sy
 801a04a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a04e:	bf00      	nop
 801a050:	3710      	adds	r7, #16
 801a052:	46bd      	mov	sp, r7
 801a054:	bd80      	pop	{r7, pc}
 801a056:	bf00      	nop
 801a058:	20001760 	.word	0x20001760
 801a05c:	e000ed04 	.word	0xe000ed04

0801a060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b08a      	sub	sp, #40	; 0x28
 801a064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a066:	2300      	movs	r3, #0
 801a068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a06a:	2300      	movs	r3, #0
 801a06c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a06e:	463a      	mov	r2, r7
 801a070:	1d39      	adds	r1, r7, #4
 801a072:	f107 0308 	add.w	r3, r7, #8
 801a076:	4618      	mov	r0, r3
 801a078:	f7fe fcae 	bl	80189d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a07c:	6839      	ldr	r1, [r7, #0]
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	68ba      	ldr	r2, [r7, #8]
 801a082:	9202      	str	r2, [sp, #8]
 801a084:	9301      	str	r3, [sp, #4]
 801a086:	2300      	movs	r3, #0
 801a088:	9300      	str	r3, [sp, #0]
 801a08a:	2300      	movs	r3, #0
 801a08c:	460a      	mov	r2, r1
 801a08e:	4920      	ldr	r1, [pc, #128]	; (801a110 <vTaskStartScheduler+0xb0>)
 801a090:	4820      	ldr	r0, [pc, #128]	; (801a114 <vTaskStartScheduler+0xb4>)
 801a092:	f7ff fd99 	bl	8019bc8 <xTaskCreateStatic>
 801a096:	4602      	mov	r2, r0
 801a098:	4b1f      	ldr	r3, [pc, #124]	; (801a118 <vTaskStartScheduler+0xb8>)
 801a09a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a09c:	4b1e      	ldr	r3, [pc, #120]	; (801a118 <vTaskStartScheduler+0xb8>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d002      	beq.n	801a0aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a0a4:	2301      	movs	r3, #1
 801a0a6:	617b      	str	r3, [r7, #20]
 801a0a8:	e001      	b.n	801a0ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a0ae:	697b      	ldr	r3, [r7, #20]
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	d102      	bne.n	801a0ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801a0b4:	f000 ffdc 	bl	801b070 <xTimerCreateTimerTask>
 801a0b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a0ba:	697b      	ldr	r3, [r7, #20]
 801a0bc:	2b01      	cmp	r3, #1
 801a0be:	d115      	bne.n	801a0ec <vTaskStartScheduler+0x8c>
 801a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0c4:	f383 8811 	msr	BASEPRI, r3
 801a0c8:	f3bf 8f6f 	isb	sy
 801a0cc:	f3bf 8f4f 	dsb	sy
 801a0d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a0d2:	4b12      	ldr	r3, [pc, #72]	; (801a11c <vTaskStartScheduler+0xbc>)
 801a0d4:	f04f 32ff 	mov.w	r2, #4294967295
 801a0d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a0da:	4b11      	ldr	r3, [pc, #68]	; (801a120 <vTaskStartScheduler+0xc0>)
 801a0dc:	2201      	movs	r2, #1
 801a0de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a0e0:	4b10      	ldr	r3, [pc, #64]	; (801a124 <vTaskStartScheduler+0xc4>)
 801a0e2:	2200      	movs	r2, #0
 801a0e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a0e6:	f001 fb93 	bl	801b810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a0ea:	e00d      	b.n	801a108 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a0ec:	697b      	ldr	r3, [r7, #20]
 801a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0f2:	d109      	bne.n	801a108 <vTaskStartScheduler+0xa8>
 801a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0f8:	f383 8811 	msr	BASEPRI, r3
 801a0fc:	f3bf 8f6f 	isb	sy
 801a100:	f3bf 8f4f 	dsb	sy
 801a104:	60fb      	str	r3, [r7, #12]
 801a106:	e7fe      	b.n	801a106 <vTaskStartScheduler+0xa6>
}
 801a108:	bf00      	nop
 801a10a:	3718      	adds	r7, #24
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}
 801a110:	0802200c 	.word	0x0802200c
 801a114:	0801a74d 	.word	0x0801a74d
 801a118:	2000175c 	.word	0x2000175c
 801a11c:	20001758 	.word	0x20001758
 801a120:	20001744 	.word	0x20001744
 801a124:	2000173c 	.word	0x2000173c

0801a128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a128:	b480      	push	{r7}
 801a12a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801a12c:	4b04      	ldr	r3, [pc, #16]	; (801a140 <vTaskSuspendAll+0x18>)
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	3301      	adds	r3, #1
 801a132:	4a03      	ldr	r2, [pc, #12]	; (801a140 <vTaskSuspendAll+0x18>)
 801a134:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801a136:	bf00      	nop
 801a138:	46bd      	mov	sp, r7
 801a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13e:	4770      	bx	lr
 801a140:	20001760 	.word	0x20001760

0801a144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a144:	b580      	push	{r7, lr}
 801a146:	b084      	sub	sp, #16
 801a148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a14a:	2300      	movs	r3, #0
 801a14c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a14e:	2300      	movs	r3, #0
 801a150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a152:	4b41      	ldr	r3, [pc, #260]	; (801a258 <xTaskResumeAll+0x114>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d109      	bne.n	801a16e <xTaskResumeAll+0x2a>
 801a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a15e:	f383 8811 	msr	BASEPRI, r3
 801a162:	f3bf 8f6f 	isb	sy
 801a166:	f3bf 8f4f 	dsb	sy
 801a16a:	603b      	str	r3, [r7, #0]
 801a16c:	e7fe      	b.n	801a16c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a16e:	f001 fbed 	bl	801b94c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a172:	4b39      	ldr	r3, [pc, #228]	; (801a258 <xTaskResumeAll+0x114>)
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	3b01      	subs	r3, #1
 801a178:	4a37      	ldr	r2, [pc, #220]	; (801a258 <xTaskResumeAll+0x114>)
 801a17a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a17c:	4b36      	ldr	r3, [pc, #216]	; (801a258 <xTaskResumeAll+0x114>)
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d162      	bne.n	801a24a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a184:	4b35      	ldr	r3, [pc, #212]	; (801a25c <xTaskResumeAll+0x118>)
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d05e      	beq.n	801a24a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a18c:	e02f      	b.n	801a1ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a18e:	4b34      	ldr	r3, [pc, #208]	; (801a260 <xTaskResumeAll+0x11c>)
 801a190:	68db      	ldr	r3, [r3, #12]
 801a192:	68db      	ldr	r3, [r3, #12]
 801a194:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	3318      	adds	r3, #24
 801a19a:	4618      	mov	r0, r3
 801a19c:	f7fe fcda 	bl	8018b54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	3304      	adds	r3, #4
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	f7fe fcd5 	bl	8018b54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1ae:	4b2d      	ldr	r3, [pc, #180]	; (801a264 <xTaskResumeAll+0x120>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	429a      	cmp	r2, r3
 801a1b4:	d903      	bls.n	801a1be <xTaskResumeAll+0x7a>
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1ba:	4a2a      	ldr	r2, [pc, #168]	; (801a264 <xTaskResumeAll+0x120>)
 801a1bc:	6013      	str	r3, [r2, #0]
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1c2:	4613      	mov	r3, r2
 801a1c4:	009b      	lsls	r3, r3, #2
 801a1c6:	4413      	add	r3, r2
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	4a27      	ldr	r2, [pc, #156]	; (801a268 <xTaskResumeAll+0x124>)
 801a1cc:	441a      	add	r2, r3
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	3304      	adds	r3, #4
 801a1d2:	4619      	mov	r1, r3
 801a1d4:	4610      	mov	r0, r2
 801a1d6:	f7fe fc60 	bl	8018a9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1de:	4b23      	ldr	r3, [pc, #140]	; (801a26c <xTaskResumeAll+0x128>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1e4:	429a      	cmp	r2, r3
 801a1e6:	d302      	bcc.n	801a1ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801a1e8:	4b21      	ldr	r3, [pc, #132]	; (801a270 <xTaskResumeAll+0x12c>)
 801a1ea:	2201      	movs	r2, #1
 801a1ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a1ee:	4b1c      	ldr	r3, [pc, #112]	; (801a260 <xTaskResumeAll+0x11c>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d1cb      	bne.n	801a18e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d001      	beq.n	801a200 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a1fc:	f000 fb58 	bl	801a8b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801a200:	4b1c      	ldr	r3, [pc, #112]	; (801a274 <xTaskResumeAll+0x130>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d010      	beq.n	801a22e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a20c:	f000 f858 	bl	801a2c0 <xTaskIncrementTick>
 801a210:	4603      	mov	r3, r0
 801a212:	2b00      	cmp	r3, #0
 801a214:	d002      	beq.n	801a21c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801a216:	4b16      	ldr	r3, [pc, #88]	; (801a270 <xTaskResumeAll+0x12c>)
 801a218:	2201      	movs	r2, #1
 801a21a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	3b01      	subs	r3, #1
 801a220:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d1f1      	bne.n	801a20c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801a228:	4b12      	ldr	r3, [pc, #72]	; (801a274 <xTaskResumeAll+0x130>)
 801a22a:	2200      	movs	r2, #0
 801a22c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a22e:	4b10      	ldr	r3, [pc, #64]	; (801a270 <xTaskResumeAll+0x12c>)
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d009      	beq.n	801a24a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a236:	2301      	movs	r3, #1
 801a238:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a23a:	4b0f      	ldr	r3, [pc, #60]	; (801a278 <xTaskResumeAll+0x134>)
 801a23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a240:	601a      	str	r2, [r3, #0]
 801a242:	f3bf 8f4f 	dsb	sy
 801a246:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a24a:	f001 fbad 	bl	801b9a8 <vPortExitCritical>

	return xAlreadyYielded;
 801a24e:	68bb      	ldr	r3, [r7, #8]
}
 801a250:	4618      	mov	r0, r3
 801a252:	3710      	adds	r7, #16
 801a254:	46bd      	mov	sp, r7
 801a256:	bd80      	pop	{r7, pc}
 801a258:	20001760 	.word	0x20001760
 801a25c:	20001738 	.word	0x20001738
 801a260:	200016f8 	.word	0x200016f8
 801a264:	20001740 	.word	0x20001740
 801a268:	20001268 	.word	0x20001268
 801a26c:	20001264 	.word	0x20001264
 801a270:	2000174c 	.word	0x2000174c
 801a274:	20001748 	.word	0x20001748
 801a278:	e000ed04 	.word	0xe000ed04

0801a27c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a27c:	b480      	push	{r7}
 801a27e:	b083      	sub	sp, #12
 801a280:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a282:	4b05      	ldr	r3, [pc, #20]	; (801a298 <xTaskGetTickCount+0x1c>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a288:	687b      	ldr	r3, [r7, #4]
}
 801a28a:	4618      	mov	r0, r3
 801a28c:	370c      	adds	r7, #12
 801a28e:	46bd      	mov	sp, r7
 801a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a294:	4770      	bx	lr
 801a296:	bf00      	nop
 801a298:	2000173c 	.word	0x2000173c

0801a29c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b082      	sub	sp, #8
 801a2a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a2a2:	f001 fc2f 	bl	801bb04 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801a2aa:	4b04      	ldr	r3, [pc, #16]	; (801a2bc <xTaskGetTickCountFromISR+0x20>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a2b0:	683b      	ldr	r3, [r7, #0]
}
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	3708      	adds	r7, #8
 801a2b6:	46bd      	mov	sp, r7
 801a2b8:	bd80      	pop	{r7, pc}
 801a2ba:	bf00      	nop
 801a2bc:	2000173c 	.word	0x2000173c

0801a2c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b086      	sub	sp, #24
 801a2c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a2ca:	4b4e      	ldr	r3, [pc, #312]	; (801a404 <xTaskIncrementTick+0x144>)
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	f040 8088 	bne.w	801a3e4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a2d4:	4b4c      	ldr	r3, [pc, #304]	; (801a408 <xTaskIncrementTick+0x148>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	3301      	adds	r3, #1
 801a2da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a2dc:	4a4a      	ldr	r2, [pc, #296]	; (801a408 <xTaskIncrementTick+0x148>)
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d11f      	bne.n	801a328 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801a2e8:	4b48      	ldr	r3, [pc, #288]	; (801a40c <xTaskIncrementTick+0x14c>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d009      	beq.n	801a306 <xTaskIncrementTick+0x46>
 801a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2f6:	f383 8811 	msr	BASEPRI, r3
 801a2fa:	f3bf 8f6f 	isb	sy
 801a2fe:	f3bf 8f4f 	dsb	sy
 801a302:	603b      	str	r3, [r7, #0]
 801a304:	e7fe      	b.n	801a304 <xTaskIncrementTick+0x44>
 801a306:	4b41      	ldr	r3, [pc, #260]	; (801a40c <xTaskIncrementTick+0x14c>)
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	60fb      	str	r3, [r7, #12]
 801a30c:	4b40      	ldr	r3, [pc, #256]	; (801a410 <xTaskIncrementTick+0x150>)
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	4a3e      	ldr	r2, [pc, #248]	; (801a40c <xTaskIncrementTick+0x14c>)
 801a312:	6013      	str	r3, [r2, #0]
 801a314:	4a3e      	ldr	r2, [pc, #248]	; (801a410 <xTaskIncrementTick+0x150>)
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	6013      	str	r3, [r2, #0]
 801a31a:	4b3e      	ldr	r3, [pc, #248]	; (801a414 <xTaskIncrementTick+0x154>)
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	3301      	adds	r3, #1
 801a320:	4a3c      	ldr	r2, [pc, #240]	; (801a414 <xTaskIncrementTick+0x154>)
 801a322:	6013      	str	r3, [r2, #0]
 801a324:	f000 fac4 	bl	801a8b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a328:	4b3b      	ldr	r3, [pc, #236]	; (801a418 <xTaskIncrementTick+0x158>)
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	693a      	ldr	r2, [r7, #16]
 801a32e:	429a      	cmp	r2, r3
 801a330:	d349      	bcc.n	801a3c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a332:	4b36      	ldr	r3, [pc, #216]	; (801a40c <xTaskIncrementTick+0x14c>)
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d104      	bne.n	801a346 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a33c:	4b36      	ldr	r3, [pc, #216]	; (801a418 <xTaskIncrementTick+0x158>)
 801a33e:	f04f 32ff 	mov.w	r2, #4294967295
 801a342:	601a      	str	r2, [r3, #0]
					break;
 801a344:	e03f      	b.n	801a3c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a346:	4b31      	ldr	r3, [pc, #196]	; (801a40c <xTaskIncrementTick+0x14c>)
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	68db      	ldr	r3, [r3, #12]
 801a34c:	68db      	ldr	r3, [r3, #12]
 801a34e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a350:	68bb      	ldr	r3, [r7, #8]
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a356:	693a      	ldr	r2, [r7, #16]
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	429a      	cmp	r2, r3
 801a35c:	d203      	bcs.n	801a366 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a35e:	4a2e      	ldr	r2, [pc, #184]	; (801a418 <xTaskIncrementTick+0x158>)
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a364:	e02f      	b.n	801a3c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a366:	68bb      	ldr	r3, [r7, #8]
 801a368:	3304      	adds	r3, #4
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7fe fbf2 	bl	8018b54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a370:	68bb      	ldr	r3, [r7, #8]
 801a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a374:	2b00      	cmp	r3, #0
 801a376:	d004      	beq.n	801a382 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	3318      	adds	r3, #24
 801a37c:	4618      	mov	r0, r3
 801a37e:	f7fe fbe9 	bl	8018b54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a382:	68bb      	ldr	r3, [r7, #8]
 801a384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a386:	4b25      	ldr	r3, [pc, #148]	; (801a41c <xTaskIncrementTick+0x15c>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	429a      	cmp	r2, r3
 801a38c:	d903      	bls.n	801a396 <xTaskIncrementTick+0xd6>
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a392:	4a22      	ldr	r2, [pc, #136]	; (801a41c <xTaskIncrementTick+0x15c>)
 801a394:	6013      	str	r3, [r2, #0]
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a39a:	4613      	mov	r3, r2
 801a39c:	009b      	lsls	r3, r3, #2
 801a39e:	4413      	add	r3, r2
 801a3a0:	009b      	lsls	r3, r3, #2
 801a3a2:	4a1f      	ldr	r2, [pc, #124]	; (801a420 <xTaskIncrementTick+0x160>)
 801a3a4:	441a      	add	r2, r3
 801a3a6:	68bb      	ldr	r3, [r7, #8]
 801a3a8:	3304      	adds	r3, #4
 801a3aa:	4619      	mov	r1, r3
 801a3ac:	4610      	mov	r0, r2
 801a3ae:	f7fe fb74 	bl	8018a9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a3b2:	68bb      	ldr	r3, [r7, #8]
 801a3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3b6:	4b1b      	ldr	r3, [pc, #108]	; (801a424 <xTaskIncrementTick+0x164>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d3b8      	bcc.n	801a332 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a3c4:	e7b5      	b.n	801a332 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a3c6:	4b17      	ldr	r3, [pc, #92]	; (801a424 <xTaskIncrementTick+0x164>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3cc:	4914      	ldr	r1, [pc, #80]	; (801a420 <xTaskIncrementTick+0x160>)
 801a3ce:	4613      	mov	r3, r2
 801a3d0:	009b      	lsls	r3, r3, #2
 801a3d2:	4413      	add	r3, r2
 801a3d4:	009b      	lsls	r3, r3, #2
 801a3d6:	440b      	add	r3, r1
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	2b01      	cmp	r3, #1
 801a3dc:	d907      	bls.n	801a3ee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801a3de:	2301      	movs	r3, #1
 801a3e0:	617b      	str	r3, [r7, #20]
 801a3e2:	e004      	b.n	801a3ee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801a3e4:	4b10      	ldr	r3, [pc, #64]	; (801a428 <xTaskIncrementTick+0x168>)
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	3301      	adds	r3, #1
 801a3ea:	4a0f      	ldr	r2, [pc, #60]	; (801a428 <xTaskIncrementTick+0x168>)
 801a3ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801a3ee:	4b0f      	ldr	r3, [pc, #60]	; (801a42c <xTaskIncrementTick+0x16c>)
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d001      	beq.n	801a3fa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801a3f6:	2301      	movs	r3, #1
 801a3f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801a3fa:	697b      	ldr	r3, [r7, #20]
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	3718      	adds	r7, #24
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}
 801a404:	20001760 	.word	0x20001760
 801a408:	2000173c 	.word	0x2000173c
 801a40c:	200016f0 	.word	0x200016f0
 801a410:	200016f4 	.word	0x200016f4
 801a414:	20001750 	.word	0x20001750
 801a418:	20001758 	.word	0x20001758
 801a41c:	20001740 	.word	0x20001740
 801a420:	20001268 	.word	0x20001268
 801a424:	20001264 	.word	0x20001264
 801a428:	20001748 	.word	0x20001748
 801a42c:	2000174c 	.word	0x2000174c

0801a430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a430:	b480      	push	{r7}
 801a432:	b085      	sub	sp, #20
 801a434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a436:	4b27      	ldr	r3, [pc, #156]	; (801a4d4 <vTaskSwitchContext+0xa4>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d003      	beq.n	801a446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a43e:	4b26      	ldr	r3, [pc, #152]	; (801a4d8 <vTaskSwitchContext+0xa8>)
 801a440:	2201      	movs	r2, #1
 801a442:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a444:	e040      	b.n	801a4c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801a446:	4b24      	ldr	r3, [pc, #144]	; (801a4d8 <vTaskSwitchContext+0xa8>)
 801a448:	2200      	movs	r2, #0
 801a44a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a44c:	4b23      	ldr	r3, [pc, #140]	; (801a4dc <vTaskSwitchContext+0xac>)
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	60fb      	str	r3, [r7, #12]
 801a452:	e00f      	b.n	801a474 <vTaskSwitchContext+0x44>
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d109      	bne.n	801a46e <vTaskSwitchContext+0x3e>
 801a45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a45e:	f383 8811 	msr	BASEPRI, r3
 801a462:	f3bf 8f6f 	isb	sy
 801a466:	f3bf 8f4f 	dsb	sy
 801a46a:	607b      	str	r3, [r7, #4]
 801a46c:	e7fe      	b.n	801a46c <vTaskSwitchContext+0x3c>
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	3b01      	subs	r3, #1
 801a472:	60fb      	str	r3, [r7, #12]
 801a474:	491a      	ldr	r1, [pc, #104]	; (801a4e0 <vTaskSwitchContext+0xb0>)
 801a476:	68fa      	ldr	r2, [r7, #12]
 801a478:	4613      	mov	r3, r2
 801a47a:	009b      	lsls	r3, r3, #2
 801a47c:	4413      	add	r3, r2
 801a47e:	009b      	lsls	r3, r3, #2
 801a480:	440b      	add	r3, r1
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d0e5      	beq.n	801a454 <vTaskSwitchContext+0x24>
 801a488:	68fa      	ldr	r2, [r7, #12]
 801a48a:	4613      	mov	r3, r2
 801a48c:	009b      	lsls	r3, r3, #2
 801a48e:	4413      	add	r3, r2
 801a490:	009b      	lsls	r3, r3, #2
 801a492:	4a13      	ldr	r2, [pc, #76]	; (801a4e0 <vTaskSwitchContext+0xb0>)
 801a494:	4413      	add	r3, r2
 801a496:	60bb      	str	r3, [r7, #8]
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	685a      	ldr	r2, [r3, #4]
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	605a      	str	r2, [r3, #4]
 801a4a2:	68bb      	ldr	r3, [r7, #8]
 801a4a4:	685a      	ldr	r2, [r3, #4]
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	3308      	adds	r3, #8
 801a4aa:	429a      	cmp	r2, r3
 801a4ac:	d104      	bne.n	801a4b8 <vTaskSwitchContext+0x88>
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	685b      	ldr	r3, [r3, #4]
 801a4b2:	685a      	ldr	r2, [r3, #4]
 801a4b4:	68bb      	ldr	r3, [r7, #8]
 801a4b6:	605a      	str	r2, [r3, #4]
 801a4b8:	68bb      	ldr	r3, [r7, #8]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	68db      	ldr	r3, [r3, #12]
 801a4be:	4a09      	ldr	r2, [pc, #36]	; (801a4e4 <vTaskSwitchContext+0xb4>)
 801a4c0:	6013      	str	r3, [r2, #0]
 801a4c2:	4a06      	ldr	r2, [pc, #24]	; (801a4dc <vTaskSwitchContext+0xac>)
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	6013      	str	r3, [r2, #0]
}
 801a4c8:	bf00      	nop
 801a4ca:	3714      	adds	r7, #20
 801a4cc:	46bd      	mov	sp, r7
 801a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d2:	4770      	bx	lr
 801a4d4:	20001760 	.word	0x20001760
 801a4d8:	2000174c 	.word	0x2000174c
 801a4dc:	20001740 	.word	0x20001740
 801a4e0:	20001268 	.word	0x20001268
 801a4e4:	20001264 	.word	0x20001264

0801a4e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b084      	sub	sp, #16
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
 801a4f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d109      	bne.n	801a50c <vTaskPlaceOnEventList+0x24>
 801a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4fc:	f383 8811 	msr	BASEPRI, r3
 801a500:	f3bf 8f6f 	isb	sy
 801a504:	f3bf 8f4f 	dsb	sy
 801a508:	60fb      	str	r3, [r7, #12]
 801a50a:	e7fe      	b.n	801a50a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a50c:	4b07      	ldr	r3, [pc, #28]	; (801a52c <vTaskPlaceOnEventList+0x44>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	3318      	adds	r3, #24
 801a512:	4619      	mov	r1, r3
 801a514:	6878      	ldr	r0, [r7, #4]
 801a516:	f7fe fae4 	bl	8018ae2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a51a:	2101      	movs	r1, #1
 801a51c:	6838      	ldr	r0, [r7, #0]
 801a51e:	f000 fd53 	bl	801afc8 <prvAddCurrentTaskToDelayedList>
}
 801a522:	bf00      	nop
 801a524:	3710      	adds	r7, #16
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}
 801a52a:	bf00      	nop
 801a52c:	20001264 	.word	0x20001264

0801a530 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a530:	b580      	push	{r7, lr}
 801a532:	b086      	sub	sp, #24
 801a534:	af00      	add	r7, sp, #0
 801a536:	60f8      	str	r0, [r7, #12]
 801a538:	60b9      	str	r1, [r7, #8]
 801a53a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d109      	bne.n	801a556 <vTaskPlaceOnEventListRestricted+0x26>
 801a542:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a546:	f383 8811 	msr	BASEPRI, r3
 801a54a:	f3bf 8f6f 	isb	sy
 801a54e:	f3bf 8f4f 	dsb	sy
 801a552:	617b      	str	r3, [r7, #20]
 801a554:	e7fe      	b.n	801a554 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a556:	4b0a      	ldr	r3, [pc, #40]	; (801a580 <vTaskPlaceOnEventListRestricted+0x50>)
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	3318      	adds	r3, #24
 801a55c:	4619      	mov	r1, r3
 801a55e:	68f8      	ldr	r0, [r7, #12]
 801a560:	f7fe fa9b 	bl	8018a9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d002      	beq.n	801a570 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801a56a:	f04f 33ff 	mov.w	r3, #4294967295
 801a56e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a570:	6879      	ldr	r1, [r7, #4]
 801a572:	68b8      	ldr	r0, [r7, #8]
 801a574:	f000 fd28 	bl	801afc8 <prvAddCurrentTaskToDelayedList>
	}
 801a578:	bf00      	nop
 801a57a:	3718      	adds	r7, #24
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bd80      	pop	{r7, pc}
 801a580:	20001264 	.word	0x20001264

0801a584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a584:	b580      	push	{r7, lr}
 801a586:	b086      	sub	sp, #24
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	68db      	ldr	r3, [r3, #12]
 801a590:	68db      	ldr	r3, [r3, #12]
 801a592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a594:	693b      	ldr	r3, [r7, #16]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d109      	bne.n	801a5ae <xTaskRemoveFromEventList+0x2a>
 801a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a59e:	f383 8811 	msr	BASEPRI, r3
 801a5a2:	f3bf 8f6f 	isb	sy
 801a5a6:	f3bf 8f4f 	dsb	sy
 801a5aa:	60fb      	str	r3, [r7, #12]
 801a5ac:	e7fe      	b.n	801a5ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a5ae:	693b      	ldr	r3, [r7, #16]
 801a5b0:	3318      	adds	r3, #24
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f7fe face 	bl	8018b54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a5b8:	4b1d      	ldr	r3, [pc, #116]	; (801a630 <xTaskRemoveFromEventList+0xac>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d11d      	bne.n	801a5fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a5c0:	693b      	ldr	r3, [r7, #16]
 801a5c2:	3304      	adds	r3, #4
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f7fe fac5 	bl	8018b54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a5ca:	693b      	ldr	r3, [r7, #16]
 801a5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5ce:	4b19      	ldr	r3, [pc, #100]	; (801a634 <xTaskRemoveFromEventList+0xb0>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	429a      	cmp	r2, r3
 801a5d4:	d903      	bls.n	801a5de <xTaskRemoveFromEventList+0x5a>
 801a5d6:	693b      	ldr	r3, [r7, #16]
 801a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5da:	4a16      	ldr	r2, [pc, #88]	; (801a634 <xTaskRemoveFromEventList+0xb0>)
 801a5dc:	6013      	str	r3, [r2, #0]
 801a5de:	693b      	ldr	r3, [r7, #16]
 801a5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5e2:	4613      	mov	r3, r2
 801a5e4:	009b      	lsls	r3, r3, #2
 801a5e6:	4413      	add	r3, r2
 801a5e8:	009b      	lsls	r3, r3, #2
 801a5ea:	4a13      	ldr	r2, [pc, #76]	; (801a638 <xTaskRemoveFromEventList+0xb4>)
 801a5ec:	441a      	add	r2, r3
 801a5ee:	693b      	ldr	r3, [r7, #16]
 801a5f0:	3304      	adds	r3, #4
 801a5f2:	4619      	mov	r1, r3
 801a5f4:	4610      	mov	r0, r2
 801a5f6:	f7fe fa50 	bl	8018a9a <vListInsertEnd>
 801a5fa:	e005      	b.n	801a608 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	3318      	adds	r3, #24
 801a600:	4619      	mov	r1, r3
 801a602:	480e      	ldr	r0, [pc, #56]	; (801a63c <xTaskRemoveFromEventList+0xb8>)
 801a604:	f7fe fa49 	bl	8018a9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a608:	693b      	ldr	r3, [r7, #16]
 801a60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a60c:	4b0c      	ldr	r3, [pc, #48]	; (801a640 <xTaskRemoveFromEventList+0xbc>)
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a612:	429a      	cmp	r2, r3
 801a614:	d905      	bls.n	801a622 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a616:	2301      	movs	r3, #1
 801a618:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a61a:	4b0a      	ldr	r3, [pc, #40]	; (801a644 <xTaskRemoveFromEventList+0xc0>)
 801a61c:	2201      	movs	r2, #1
 801a61e:	601a      	str	r2, [r3, #0]
 801a620:	e001      	b.n	801a626 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801a622:	2300      	movs	r3, #0
 801a624:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a626:	697b      	ldr	r3, [r7, #20]
}
 801a628:	4618      	mov	r0, r3
 801a62a:	3718      	adds	r7, #24
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}
 801a630:	20001760 	.word	0x20001760
 801a634:	20001740 	.word	0x20001740
 801a638:	20001268 	.word	0x20001268
 801a63c:	200016f8 	.word	0x200016f8
 801a640:	20001264 	.word	0x20001264
 801a644:	2000174c 	.word	0x2000174c

0801a648 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a648:	b480      	push	{r7}
 801a64a:	b083      	sub	sp, #12
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a650:	4b06      	ldr	r3, [pc, #24]	; (801a66c <vTaskInternalSetTimeOutState+0x24>)
 801a652:	681a      	ldr	r2, [r3, #0]
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a658:	4b05      	ldr	r3, [pc, #20]	; (801a670 <vTaskInternalSetTimeOutState+0x28>)
 801a65a:	681a      	ldr	r2, [r3, #0]
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	605a      	str	r2, [r3, #4]
}
 801a660:	bf00      	nop
 801a662:	370c      	adds	r7, #12
 801a664:	46bd      	mov	sp, r7
 801a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66a:	4770      	bx	lr
 801a66c:	20001750 	.word	0x20001750
 801a670:	2000173c 	.word	0x2000173c

0801a674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b088      	sub	sp, #32
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
 801a67c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d109      	bne.n	801a698 <xTaskCheckForTimeOut+0x24>
 801a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a688:	f383 8811 	msr	BASEPRI, r3
 801a68c:	f3bf 8f6f 	isb	sy
 801a690:	f3bf 8f4f 	dsb	sy
 801a694:	613b      	str	r3, [r7, #16]
 801a696:	e7fe      	b.n	801a696 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d109      	bne.n	801a6b2 <xTaskCheckForTimeOut+0x3e>
 801a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6a2:	f383 8811 	msr	BASEPRI, r3
 801a6a6:	f3bf 8f6f 	isb	sy
 801a6aa:	f3bf 8f4f 	dsb	sy
 801a6ae:	60fb      	str	r3, [r7, #12]
 801a6b0:	e7fe      	b.n	801a6b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801a6b2:	f001 f94b 	bl	801b94c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a6b6:	4b1d      	ldr	r3, [pc, #116]	; (801a72c <xTaskCheckForTimeOut+0xb8>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	685b      	ldr	r3, [r3, #4]
 801a6c0:	69ba      	ldr	r2, [r7, #24]
 801a6c2:	1ad3      	subs	r3, r2, r3
 801a6c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a6c6:	683b      	ldr	r3, [r7, #0]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6ce:	d102      	bne.n	801a6d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	61fb      	str	r3, [r7, #28]
 801a6d4:	e023      	b.n	801a71e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	4b15      	ldr	r3, [pc, #84]	; (801a730 <xTaskCheckForTimeOut+0xbc>)
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	429a      	cmp	r2, r3
 801a6e0:	d007      	beq.n	801a6f2 <xTaskCheckForTimeOut+0x7e>
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	685b      	ldr	r3, [r3, #4]
 801a6e6:	69ba      	ldr	r2, [r7, #24]
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d302      	bcc.n	801a6f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	61fb      	str	r3, [r7, #28]
 801a6f0:	e015      	b.n	801a71e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a6f2:	683b      	ldr	r3, [r7, #0]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	697a      	ldr	r2, [r7, #20]
 801a6f8:	429a      	cmp	r2, r3
 801a6fa:	d20b      	bcs.n	801a714 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a6fc:	683b      	ldr	r3, [r7, #0]
 801a6fe:	681a      	ldr	r2, [r3, #0]
 801a700:	697b      	ldr	r3, [r7, #20]
 801a702:	1ad2      	subs	r2, r2, r3
 801a704:	683b      	ldr	r3, [r7, #0]
 801a706:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a708:	6878      	ldr	r0, [r7, #4]
 801a70a:	f7ff ff9d 	bl	801a648 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a70e:	2300      	movs	r3, #0
 801a710:	61fb      	str	r3, [r7, #28]
 801a712:	e004      	b.n	801a71e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	2200      	movs	r2, #0
 801a718:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a71a:	2301      	movs	r3, #1
 801a71c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a71e:	f001 f943 	bl	801b9a8 <vPortExitCritical>

	return xReturn;
 801a722:	69fb      	ldr	r3, [r7, #28]
}
 801a724:	4618      	mov	r0, r3
 801a726:	3720      	adds	r7, #32
 801a728:	46bd      	mov	sp, r7
 801a72a:	bd80      	pop	{r7, pc}
 801a72c:	2000173c 	.word	0x2000173c
 801a730:	20001750 	.word	0x20001750

0801a734 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a734:	b480      	push	{r7}
 801a736:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a738:	4b03      	ldr	r3, [pc, #12]	; (801a748 <vTaskMissedYield+0x14>)
 801a73a:	2201      	movs	r2, #1
 801a73c:	601a      	str	r2, [r3, #0]
}
 801a73e:	bf00      	nop
 801a740:	46bd      	mov	sp, r7
 801a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a746:	4770      	bx	lr
 801a748:	2000174c 	.word	0x2000174c

0801a74c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b082      	sub	sp, #8
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a754:	f000 f852 	bl	801a7fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a758:	4b06      	ldr	r3, [pc, #24]	; (801a774 <prvIdleTask+0x28>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	2b01      	cmp	r3, #1
 801a75e:	d9f9      	bls.n	801a754 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a760:	4b05      	ldr	r3, [pc, #20]	; (801a778 <prvIdleTask+0x2c>)
 801a762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a766:	601a      	str	r2, [r3, #0]
 801a768:	f3bf 8f4f 	dsb	sy
 801a76c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a770:	e7f0      	b.n	801a754 <prvIdleTask+0x8>
 801a772:	bf00      	nop
 801a774:	20001268 	.word	0x20001268
 801a778:	e000ed04 	.word	0xe000ed04

0801a77c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b082      	sub	sp, #8
 801a780:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a782:	2300      	movs	r3, #0
 801a784:	607b      	str	r3, [r7, #4]
 801a786:	e00c      	b.n	801a7a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a788:	687a      	ldr	r2, [r7, #4]
 801a78a:	4613      	mov	r3, r2
 801a78c:	009b      	lsls	r3, r3, #2
 801a78e:	4413      	add	r3, r2
 801a790:	009b      	lsls	r3, r3, #2
 801a792:	4a12      	ldr	r2, [pc, #72]	; (801a7dc <prvInitialiseTaskLists+0x60>)
 801a794:	4413      	add	r3, r2
 801a796:	4618      	mov	r0, r3
 801a798:	f7fe f952 	bl	8018a40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	3301      	adds	r3, #1
 801a7a0:	607b      	str	r3, [r7, #4]
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	2b37      	cmp	r3, #55	; 0x37
 801a7a6:	d9ef      	bls.n	801a788 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a7a8:	480d      	ldr	r0, [pc, #52]	; (801a7e0 <prvInitialiseTaskLists+0x64>)
 801a7aa:	f7fe f949 	bl	8018a40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a7ae:	480d      	ldr	r0, [pc, #52]	; (801a7e4 <prvInitialiseTaskLists+0x68>)
 801a7b0:	f7fe f946 	bl	8018a40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a7b4:	480c      	ldr	r0, [pc, #48]	; (801a7e8 <prvInitialiseTaskLists+0x6c>)
 801a7b6:	f7fe f943 	bl	8018a40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a7ba:	480c      	ldr	r0, [pc, #48]	; (801a7ec <prvInitialiseTaskLists+0x70>)
 801a7bc:	f7fe f940 	bl	8018a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a7c0:	480b      	ldr	r0, [pc, #44]	; (801a7f0 <prvInitialiseTaskLists+0x74>)
 801a7c2:	f7fe f93d 	bl	8018a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a7c6:	4b0b      	ldr	r3, [pc, #44]	; (801a7f4 <prvInitialiseTaskLists+0x78>)
 801a7c8:	4a05      	ldr	r2, [pc, #20]	; (801a7e0 <prvInitialiseTaskLists+0x64>)
 801a7ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a7cc:	4b0a      	ldr	r3, [pc, #40]	; (801a7f8 <prvInitialiseTaskLists+0x7c>)
 801a7ce:	4a05      	ldr	r2, [pc, #20]	; (801a7e4 <prvInitialiseTaskLists+0x68>)
 801a7d0:	601a      	str	r2, [r3, #0]
}
 801a7d2:	bf00      	nop
 801a7d4:	3708      	adds	r7, #8
 801a7d6:	46bd      	mov	sp, r7
 801a7d8:	bd80      	pop	{r7, pc}
 801a7da:	bf00      	nop
 801a7dc:	20001268 	.word	0x20001268
 801a7e0:	200016c8 	.word	0x200016c8
 801a7e4:	200016dc 	.word	0x200016dc
 801a7e8:	200016f8 	.word	0x200016f8
 801a7ec:	2000170c 	.word	0x2000170c
 801a7f0:	20001724 	.word	0x20001724
 801a7f4:	200016f0 	.word	0x200016f0
 801a7f8:	200016f4 	.word	0x200016f4

0801a7fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a7fc:	b580      	push	{r7, lr}
 801a7fe:	b082      	sub	sp, #8
 801a800:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a802:	e019      	b.n	801a838 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a804:	f001 f8a2 	bl	801b94c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a808:	4b0f      	ldr	r3, [pc, #60]	; (801a848 <prvCheckTasksWaitingTermination+0x4c>)
 801a80a:	68db      	ldr	r3, [r3, #12]
 801a80c:	68db      	ldr	r3, [r3, #12]
 801a80e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	3304      	adds	r3, #4
 801a814:	4618      	mov	r0, r3
 801a816:	f7fe f99d 	bl	8018b54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a81a:	4b0c      	ldr	r3, [pc, #48]	; (801a84c <prvCheckTasksWaitingTermination+0x50>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	3b01      	subs	r3, #1
 801a820:	4a0a      	ldr	r2, [pc, #40]	; (801a84c <prvCheckTasksWaitingTermination+0x50>)
 801a822:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a824:	4b0a      	ldr	r3, [pc, #40]	; (801a850 <prvCheckTasksWaitingTermination+0x54>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	3b01      	subs	r3, #1
 801a82a:	4a09      	ldr	r2, [pc, #36]	; (801a850 <prvCheckTasksWaitingTermination+0x54>)
 801a82c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a82e:	f001 f8bb 	bl	801b9a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a832:	6878      	ldr	r0, [r7, #4]
 801a834:	f000 f80e 	bl	801a854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a838:	4b05      	ldr	r3, [pc, #20]	; (801a850 <prvCheckTasksWaitingTermination+0x54>)
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d1e1      	bne.n	801a804 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a840:	bf00      	nop
 801a842:	3708      	adds	r7, #8
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}
 801a848:	2000170c 	.word	0x2000170c
 801a84c:	20001738 	.word	0x20001738
 801a850:	20001720 	.word	0x20001720

0801a854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a854:	b580      	push	{r7, lr}
 801a856:	b084      	sub	sp, #16
 801a858:	af00      	add	r7, sp, #0
 801a85a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a862:	2b00      	cmp	r3, #0
 801a864:	d108      	bne.n	801a878 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a86a:	4618      	mov	r0, r3
 801a86c:	f001 fa4a 	bl	801bd04 <vPortFree>
				vPortFree( pxTCB );
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	f001 fa47 	bl	801bd04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a876:	e017      	b.n	801a8a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a87e:	2b01      	cmp	r3, #1
 801a880:	d103      	bne.n	801a88a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a882:	6878      	ldr	r0, [r7, #4]
 801a884:	f001 fa3e 	bl	801bd04 <vPortFree>
	}
 801a888:	e00e      	b.n	801a8a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a890:	2b02      	cmp	r3, #2
 801a892:	d009      	beq.n	801a8a8 <prvDeleteTCB+0x54>
 801a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a898:	f383 8811 	msr	BASEPRI, r3
 801a89c:	f3bf 8f6f 	isb	sy
 801a8a0:	f3bf 8f4f 	dsb	sy
 801a8a4:	60fb      	str	r3, [r7, #12]
 801a8a6:	e7fe      	b.n	801a8a6 <prvDeleteTCB+0x52>
	}
 801a8a8:	bf00      	nop
 801a8aa:	3710      	adds	r7, #16
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}

0801a8b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a8b0:	b480      	push	{r7}
 801a8b2:	b083      	sub	sp, #12
 801a8b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a8b6:	4b0c      	ldr	r3, [pc, #48]	; (801a8e8 <prvResetNextTaskUnblockTime+0x38>)
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d104      	bne.n	801a8ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a8c0:	4b0a      	ldr	r3, [pc, #40]	; (801a8ec <prvResetNextTaskUnblockTime+0x3c>)
 801a8c2:	f04f 32ff 	mov.w	r2, #4294967295
 801a8c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a8c8:	e008      	b.n	801a8dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a8ca:	4b07      	ldr	r3, [pc, #28]	; (801a8e8 <prvResetNextTaskUnblockTime+0x38>)
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	68db      	ldr	r3, [r3, #12]
 801a8d0:	68db      	ldr	r3, [r3, #12]
 801a8d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	685b      	ldr	r3, [r3, #4]
 801a8d8:	4a04      	ldr	r2, [pc, #16]	; (801a8ec <prvResetNextTaskUnblockTime+0x3c>)
 801a8da:	6013      	str	r3, [r2, #0]
}
 801a8dc:	bf00      	nop
 801a8de:	370c      	adds	r7, #12
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e6:	4770      	bx	lr
 801a8e8:	200016f0 	.word	0x200016f0
 801a8ec:	20001758 	.word	0x20001758

0801a8f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a8f0:	b480      	push	{r7}
 801a8f2:	b083      	sub	sp, #12
 801a8f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a8f6:	4b0b      	ldr	r3, [pc, #44]	; (801a924 <xTaskGetSchedulerState+0x34>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d102      	bne.n	801a904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a8fe:	2301      	movs	r3, #1
 801a900:	607b      	str	r3, [r7, #4]
 801a902:	e008      	b.n	801a916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a904:	4b08      	ldr	r3, [pc, #32]	; (801a928 <xTaskGetSchedulerState+0x38>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d102      	bne.n	801a912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a90c:	2302      	movs	r3, #2
 801a90e:	607b      	str	r3, [r7, #4]
 801a910:	e001      	b.n	801a916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a912:	2300      	movs	r3, #0
 801a914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a916:	687b      	ldr	r3, [r7, #4]
	}
 801a918:	4618      	mov	r0, r3
 801a91a:	370c      	adds	r7, #12
 801a91c:	46bd      	mov	sp, r7
 801a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a922:	4770      	bx	lr
 801a924:	20001744 	.word	0x20001744
 801a928:	20001760 	.word	0x20001760

0801a92c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b084      	sub	sp, #16
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a938:	2300      	movs	r3, #0
 801a93a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d051      	beq.n	801a9e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a946:	4b2a      	ldr	r3, [pc, #168]	; (801a9f0 <xTaskPriorityInherit+0xc4>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a94c:	429a      	cmp	r2, r3
 801a94e:	d241      	bcs.n	801a9d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	699b      	ldr	r3, [r3, #24]
 801a954:	2b00      	cmp	r3, #0
 801a956:	db06      	blt.n	801a966 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a958:	4b25      	ldr	r3, [pc, #148]	; (801a9f0 <xTaskPriorityInherit+0xc4>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a95e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a962:	68bb      	ldr	r3, [r7, #8]
 801a964:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	6959      	ldr	r1, [r3, #20]
 801a96a:	68bb      	ldr	r3, [r7, #8]
 801a96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a96e:	4613      	mov	r3, r2
 801a970:	009b      	lsls	r3, r3, #2
 801a972:	4413      	add	r3, r2
 801a974:	009b      	lsls	r3, r3, #2
 801a976:	4a1f      	ldr	r2, [pc, #124]	; (801a9f4 <xTaskPriorityInherit+0xc8>)
 801a978:	4413      	add	r3, r2
 801a97a:	4299      	cmp	r1, r3
 801a97c:	d122      	bne.n	801a9c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	3304      	adds	r3, #4
 801a982:	4618      	mov	r0, r3
 801a984:	f7fe f8e6 	bl	8018b54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a988:	4b19      	ldr	r3, [pc, #100]	; (801a9f0 <xTaskPriorityInherit+0xc4>)
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a992:	68bb      	ldr	r3, [r7, #8]
 801a994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a996:	4b18      	ldr	r3, [pc, #96]	; (801a9f8 <xTaskPriorityInherit+0xcc>)
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	429a      	cmp	r2, r3
 801a99c:	d903      	bls.n	801a9a6 <xTaskPriorityInherit+0x7a>
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9a2:	4a15      	ldr	r2, [pc, #84]	; (801a9f8 <xTaskPriorityInherit+0xcc>)
 801a9a4:	6013      	str	r3, [r2, #0]
 801a9a6:	68bb      	ldr	r3, [r7, #8]
 801a9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9aa:	4613      	mov	r3, r2
 801a9ac:	009b      	lsls	r3, r3, #2
 801a9ae:	4413      	add	r3, r2
 801a9b0:	009b      	lsls	r3, r3, #2
 801a9b2:	4a10      	ldr	r2, [pc, #64]	; (801a9f4 <xTaskPriorityInherit+0xc8>)
 801a9b4:	441a      	add	r2, r3
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	3304      	adds	r3, #4
 801a9ba:	4619      	mov	r1, r3
 801a9bc:	4610      	mov	r0, r2
 801a9be:	f7fe f86c 	bl	8018a9a <vListInsertEnd>
 801a9c2:	e004      	b.n	801a9ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a9c4:	4b0a      	ldr	r3, [pc, #40]	; (801a9f0 <xTaskPriorityInherit+0xc4>)
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a9ce:	2301      	movs	r3, #1
 801a9d0:	60fb      	str	r3, [r7, #12]
 801a9d2:	e008      	b.n	801a9e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a9d8:	4b05      	ldr	r3, [pc, #20]	; (801a9f0 <xTaskPriorityInherit+0xc4>)
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9de:	429a      	cmp	r2, r3
 801a9e0:	d201      	bcs.n	801a9e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a9e2:	2301      	movs	r3, #1
 801a9e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a9e6:	68fb      	ldr	r3, [r7, #12]
	}
 801a9e8:	4618      	mov	r0, r3
 801a9ea:	3710      	adds	r7, #16
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	20001264 	.word	0x20001264
 801a9f4:	20001268 	.word	0x20001268
 801a9f8:	20001740 	.word	0x20001740

0801a9fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b086      	sub	sp, #24
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d054      	beq.n	801aabc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801aa12:	4b2d      	ldr	r3, [pc, #180]	; (801aac8 <xTaskPriorityDisinherit+0xcc>)
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	693a      	ldr	r2, [r7, #16]
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d009      	beq.n	801aa30 <xTaskPriorityDisinherit+0x34>
 801aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa20:	f383 8811 	msr	BASEPRI, r3
 801aa24:	f3bf 8f6f 	isb	sy
 801aa28:	f3bf 8f4f 	dsb	sy
 801aa2c:	60fb      	str	r3, [r7, #12]
 801aa2e:	e7fe      	b.n	801aa2e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801aa30:	693b      	ldr	r3, [r7, #16]
 801aa32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d109      	bne.n	801aa4c <xTaskPriorityDisinherit+0x50>
 801aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa3c:	f383 8811 	msr	BASEPRI, r3
 801aa40:	f3bf 8f6f 	isb	sy
 801aa44:	f3bf 8f4f 	dsb	sy
 801aa48:	60bb      	str	r3, [r7, #8]
 801aa4a:	e7fe      	b.n	801aa4a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801aa4c:	693b      	ldr	r3, [r7, #16]
 801aa4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa50:	1e5a      	subs	r2, r3, #1
 801aa52:	693b      	ldr	r3, [r7, #16]
 801aa54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801aa56:	693b      	ldr	r3, [r7, #16]
 801aa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa5a:	693b      	ldr	r3, [r7, #16]
 801aa5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa5e:	429a      	cmp	r2, r3
 801aa60:	d02c      	beq.n	801aabc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801aa62:	693b      	ldr	r3, [r7, #16]
 801aa64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d128      	bne.n	801aabc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aa6a:	693b      	ldr	r3, [r7, #16]
 801aa6c:	3304      	adds	r3, #4
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f7fe f870 	bl	8018b54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801aa74:	693b      	ldr	r3, [r7, #16]
 801aa76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801aa78:	693b      	ldr	r3, [r7, #16]
 801aa7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa7c:	693b      	ldr	r3, [r7, #16]
 801aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801aa84:	693b      	ldr	r3, [r7, #16]
 801aa86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801aa88:	693b      	ldr	r3, [r7, #16]
 801aa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa8c:	4b0f      	ldr	r3, [pc, #60]	; (801aacc <xTaskPriorityDisinherit+0xd0>)
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	429a      	cmp	r2, r3
 801aa92:	d903      	bls.n	801aa9c <xTaskPriorityDisinherit+0xa0>
 801aa94:	693b      	ldr	r3, [r7, #16]
 801aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa98:	4a0c      	ldr	r2, [pc, #48]	; (801aacc <xTaskPriorityDisinherit+0xd0>)
 801aa9a:	6013      	str	r3, [r2, #0]
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aaa0:	4613      	mov	r3, r2
 801aaa2:	009b      	lsls	r3, r3, #2
 801aaa4:	4413      	add	r3, r2
 801aaa6:	009b      	lsls	r3, r3, #2
 801aaa8:	4a09      	ldr	r2, [pc, #36]	; (801aad0 <xTaskPriorityDisinherit+0xd4>)
 801aaaa:	441a      	add	r2, r3
 801aaac:	693b      	ldr	r3, [r7, #16]
 801aaae:	3304      	adds	r3, #4
 801aab0:	4619      	mov	r1, r3
 801aab2:	4610      	mov	r0, r2
 801aab4:	f7fd fff1 	bl	8018a9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801aab8:	2301      	movs	r3, #1
 801aaba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801aabc:	697b      	ldr	r3, [r7, #20]
	}
 801aabe:	4618      	mov	r0, r3
 801aac0:	3718      	adds	r7, #24
 801aac2:	46bd      	mov	sp, r7
 801aac4:	bd80      	pop	{r7, pc}
 801aac6:	bf00      	nop
 801aac8:	20001264 	.word	0x20001264
 801aacc:	20001740 	.word	0x20001740
 801aad0:	20001268 	.word	0x20001268

0801aad4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b088      	sub	sp, #32
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]
 801aadc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801aae2:	2301      	movs	r3, #1
 801aae4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d068      	beq.n	801abbe <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801aaec:	69bb      	ldr	r3, [r7, #24]
 801aaee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d109      	bne.n	801ab08 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aaf8:	f383 8811 	msr	BASEPRI, r3
 801aafc:	f3bf 8f6f 	isb	sy
 801ab00:	f3bf 8f4f 	dsb	sy
 801ab04:	60fb      	str	r3, [r7, #12]
 801ab06:	e7fe      	b.n	801ab06 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801ab08:	69bb      	ldr	r3, [r7, #24]
 801ab0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab0c:	683a      	ldr	r2, [r7, #0]
 801ab0e:	429a      	cmp	r2, r3
 801ab10:	d902      	bls.n	801ab18 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	61fb      	str	r3, [r7, #28]
 801ab16:	e002      	b.n	801ab1e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801ab18:	69bb      	ldr	r3, [r7, #24]
 801ab1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801ab1e:	69bb      	ldr	r3, [r7, #24]
 801ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab22:	69fa      	ldr	r2, [r7, #28]
 801ab24:	429a      	cmp	r2, r3
 801ab26:	d04a      	beq.n	801abbe <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801ab28:	69bb      	ldr	r3, [r7, #24]
 801ab2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ab2c:	697a      	ldr	r2, [r7, #20]
 801ab2e:	429a      	cmp	r2, r3
 801ab30:	d145      	bne.n	801abbe <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801ab32:	4b25      	ldr	r3, [pc, #148]	; (801abc8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	69ba      	ldr	r2, [r7, #24]
 801ab38:	429a      	cmp	r2, r3
 801ab3a:	d109      	bne.n	801ab50 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab40:	f383 8811 	msr	BASEPRI, r3
 801ab44:	f3bf 8f6f 	isb	sy
 801ab48:	f3bf 8f4f 	dsb	sy
 801ab4c:	60bb      	str	r3, [r7, #8]
 801ab4e:	e7fe      	b.n	801ab4e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801ab50:	69bb      	ldr	r3, [r7, #24]
 801ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801ab56:	69bb      	ldr	r3, [r7, #24]
 801ab58:	69fa      	ldr	r2, [r7, #28]
 801ab5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ab5c:	69bb      	ldr	r3, [r7, #24]
 801ab5e:	699b      	ldr	r3, [r3, #24]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	db04      	blt.n	801ab6e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ab64:	69fb      	ldr	r3, [r7, #28]
 801ab66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ab6a:	69bb      	ldr	r3, [r7, #24]
 801ab6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ab6e:	69bb      	ldr	r3, [r7, #24]
 801ab70:	6959      	ldr	r1, [r3, #20]
 801ab72:	693a      	ldr	r2, [r7, #16]
 801ab74:	4613      	mov	r3, r2
 801ab76:	009b      	lsls	r3, r3, #2
 801ab78:	4413      	add	r3, r2
 801ab7a:	009b      	lsls	r3, r3, #2
 801ab7c:	4a13      	ldr	r2, [pc, #76]	; (801abcc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801ab7e:	4413      	add	r3, r2
 801ab80:	4299      	cmp	r1, r3
 801ab82:	d11c      	bne.n	801abbe <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ab84:	69bb      	ldr	r3, [r7, #24]
 801ab86:	3304      	adds	r3, #4
 801ab88:	4618      	mov	r0, r3
 801ab8a:	f7fd ffe3 	bl	8018b54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801ab8e:	69bb      	ldr	r3, [r7, #24]
 801ab90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab92:	4b0f      	ldr	r3, [pc, #60]	; (801abd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	429a      	cmp	r2, r3
 801ab98:	d903      	bls.n	801aba2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 801ab9a:	69bb      	ldr	r3, [r7, #24]
 801ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab9e:	4a0c      	ldr	r2, [pc, #48]	; (801abd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801aba0:	6013      	str	r3, [r2, #0]
 801aba2:	69bb      	ldr	r3, [r7, #24]
 801aba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aba6:	4613      	mov	r3, r2
 801aba8:	009b      	lsls	r3, r3, #2
 801abaa:	4413      	add	r3, r2
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	4a07      	ldr	r2, [pc, #28]	; (801abcc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801abb0:	441a      	add	r2, r3
 801abb2:	69bb      	ldr	r3, [r7, #24]
 801abb4:	3304      	adds	r3, #4
 801abb6:	4619      	mov	r1, r3
 801abb8:	4610      	mov	r0, r2
 801abba:	f7fd ff6e 	bl	8018a9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801abbe:	bf00      	nop
 801abc0:	3720      	adds	r7, #32
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}
 801abc6:	bf00      	nop
 801abc8:	20001264 	.word	0x20001264
 801abcc:	20001268 	.word	0x20001268
 801abd0:	20001740 	.word	0x20001740

0801abd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801abd4:	b480      	push	{r7}
 801abd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801abd8:	4b07      	ldr	r3, [pc, #28]	; (801abf8 <pvTaskIncrementMutexHeldCount+0x24>)
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d004      	beq.n	801abea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801abe0:	4b05      	ldr	r3, [pc, #20]	; (801abf8 <pvTaskIncrementMutexHeldCount+0x24>)
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801abe6:	3201      	adds	r2, #1
 801abe8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801abea:	4b03      	ldr	r3, [pc, #12]	; (801abf8 <pvTaskIncrementMutexHeldCount+0x24>)
 801abec:	681b      	ldr	r3, [r3, #0]
	}
 801abee:	4618      	mov	r0, r3
 801abf0:	46bd      	mov	sp, r7
 801abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf6:	4770      	bx	lr
 801abf8:	20001264 	.word	0x20001264

0801abfc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b086      	sub	sp, #24
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	60f8      	str	r0, [r7, #12]
 801ac04:	60b9      	str	r1, [r7, #8]
 801ac06:	607a      	str	r2, [r7, #4]
 801ac08:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801ac0a:	f000 fe9f 	bl	801b94c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801ac0e:	4b26      	ldr	r3, [pc, #152]	; (801aca8 <xTaskNotifyWait+0xac>)
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ac16:	b2db      	uxtb	r3, r3
 801ac18:	2b02      	cmp	r3, #2
 801ac1a:	d01a      	beq.n	801ac52 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801ac1c:	4b22      	ldr	r3, [pc, #136]	; (801aca8 <xTaskNotifyWait+0xac>)
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801ac22:	68fa      	ldr	r2, [r7, #12]
 801ac24:	43d2      	mvns	r2, r2
 801ac26:	400a      	ands	r2, r1
 801ac28:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801ac2a:	4b1f      	ldr	r3, [pc, #124]	; (801aca8 <xTaskNotifyWait+0xac>)
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2201      	movs	r2, #1
 801ac30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 801ac34:	683b      	ldr	r3, [r7, #0]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d00b      	beq.n	801ac52 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ac3a:	2101      	movs	r1, #1
 801ac3c:	6838      	ldr	r0, [r7, #0]
 801ac3e:	f000 f9c3 	bl	801afc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801ac42:	4b1a      	ldr	r3, [pc, #104]	; (801acac <xTaskNotifyWait+0xb0>)
 801ac44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ac48:	601a      	str	r2, [r3, #0]
 801ac4a:	f3bf 8f4f 	dsb	sy
 801ac4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801ac52:	f000 fea9 	bl	801b9a8 <vPortExitCritical>

		taskENTER_CRITICAL();
 801ac56:	f000 fe79 	bl	801b94c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d004      	beq.n	801ac6a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801ac60:	4b11      	ldr	r3, [pc, #68]	; (801aca8 <xTaskNotifyWait+0xac>)
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801ac6a:	4b0f      	ldr	r3, [pc, #60]	; (801aca8 <xTaskNotifyWait+0xac>)
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ac72:	b2db      	uxtb	r3, r3
 801ac74:	2b02      	cmp	r3, #2
 801ac76:	d002      	beq.n	801ac7e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801ac78:	2300      	movs	r3, #0
 801ac7a:	617b      	str	r3, [r7, #20]
 801ac7c:	e008      	b.n	801ac90 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801ac7e:	4b0a      	ldr	r3, [pc, #40]	; (801aca8 <xTaskNotifyWait+0xac>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801ac84:	68ba      	ldr	r2, [r7, #8]
 801ac86:	43d2      	mvns	r2, r2
 801ac88:	400a      	ands	r2, r1
 801ac8a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 801ac8c:	2301      	movs	r3, #1
 801ac8e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ac90:	4b05      	ldr	r3, [pc, #20]	; (801aca8 <xTaskNotifyWait+0xac>)
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	2200      	movs	r2, #0
 801ac96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801ac9a:	f000 fe85 	bl	801b9a8 <vPortExitCritical>

		return xReturn;
 801ac9e:	697b      	ldr	r3, [r7, #20]
	}
 801aca0:	4618      	mov	r0, r3
 801aca2:	3718      	adds	r7, #24
 801aca4:	46bd      	mov	sp, r7
 801aca6:	bd80      	pop	{r7, pc}
 801aca8:	20001264 	.word	0x20001264
 801acac:	e000ed04 	.word	0xe000ed04

0801acb0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b08a      	sub	sp, #40	; 0x28
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	60f8      	str	r0, [r7, #12]
 801acb8:	60b9      	str	r1, [r7, #8]
 801acba:	603b      	str	r3, [r7, #0]
 801acbc:	4613      	mov	r3, r2
 801acbe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801acc0:	2301      	movs	r3, #1
 801acc2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d109      	bne.n	801acde <xTaskGenericNotify+0x2e>
 801acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acce:	f383 8811 	msr	BASEPRI, r3
 801acd2:	f3bf 8f6f 	isb	sy
 801acd6:	f3bf 8f4f 	dsb	sy
 801acda:	61bb      	str	r3, [r7, #24]
 801acdc:	e7fe      	b.n	801acdc <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801ace2:	f000 fe33 	bl	801b94c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d003      	beq.n	801acf4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801acec:	6a3b      	ldr	r3, [r7, #32]
 801acee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801acf0:	683b      	ldr	r3, [r7, #0]
 801acf2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801acf4:	6a3b      	ldr	r3, [r7, #32]
 801acf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801acfa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801acfc:	6a3b      	ldr	r3, [r7, #32]
 801acfe:	2202      	movs	r2, #2
 801ad00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801ad04:	79fb      	ldrb	r3, [r7, #7]
 801ad06:	2b04      	cmp	r3, #4
 801ad08:	d827      	bhi.n	801ad5a <xTaskGenericNotify+0xaa>
 801ad0a:	a201      	add	r2, pc, #4	; (adr r2, 801ad10 <xTaskGenericNotify+0x60>)
 801ad0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad10:	0801ad79 	.word	0x0801ad79
 801ad14:	0801ad25 	.word	0x0801ad25
 801ad18:	0801ad33 	.word	0x0801ad33
 801ad1c:	0801ad3f 	.word	0x0801ad3f
 801ad20:	0801ad47 	.word	0x0801ad47
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801ad24:	6a3b      	ldr	r3, [r7, #32]
 801ad26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	431a      	orrs	r2, r3
 801ad2c:	6a3b      	ldr	r3, [r7, #32]
 801ad2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801ad30:	e025      	b.n	801ad7e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801ad32:	6a3b      	ldr	r3, [r7, #32]
 801ad34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad36:	1c5a      	adds	r2, r3, #1
 801ad38:	6a3b      	ldr	r3, [r7, #32]
 801ad3a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801ad3c:	e01f      	b.n	801ad7e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801ad3e:	6a3b      	ldr	r3, [r7, #32]
 801ad40:	68ba      	ldr	r2, [r7, #8]
 801ad42:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801ad44:	e01b      	b.n	801ad7e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801ad46:	7ffb      	ldrb	r3, [r7, #31]
 801ad48:	2b02      	cmp	r3, #2
 801ad4a:	d003      	beq.n	801ad54 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801ad4c:	6a3b      	ldr	r3, [r7, #32]
 801ad4e:	68ba      	ldr	r2, [r7, #8]
 801ad50:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801ad52:	e014      	b.n	801ad7e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 801ad54:	2300      	movs	r3, #0
 801ad56:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801ad58:	e011      	b.n	801ad7e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801ad5a:	6a3b      	ldr	r3, [r7, #32]
 801ad5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad62:	d00b      	beq.n	801ad7c <xTaskGenericNotify+0xcc>
 801ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad68:	f383 8811 	msr	BASEPRI, r3
 801ad6c:	f3bf 8f6f 	isb	sy
 801ad70:	f3bf 8f4f 	dsb	sy
 801ad74:	617b      	str	r3, [r7, #20]
 801ad76:	e7fe      	b.n	801ad76 <xTaskGenericNotify+0xc6>
					break;
 801ad78:	bf00      	nop
 801ad7a:	e000      	b.n	801ad7e <xTaskGenericNotify+0xce>

					break;
 801ad7c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801ad7e:	7ffb      	ldrb	r3, [r7, #31]
 801ad80:	2b01      	cmp	r3, #1
 801ad82:	d139      	bne.n	801adf8 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ad84:	6a3b      	ldr	r3, [r7, #32]
 801ad86:	3304      	adds	r3, #4
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f7fd fee3 	bl	8018b54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801ad8e:	6a3b      	ldr	r3, [r7, #32]
 801ad90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad92:	4b1d      	ldr	r3, [pc, #116]	; (801ae08 <xTaskGenericNotify+0x158>)
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d903      	bls.n	801ada2 <xTaskGenericNotify+0xf2>
 801ad9a:	6a3b      	ldr	r3, [r7, #32]
 801ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad9e:	4a1a      	ldr	r2, [pc, #104]	; (801ae08 <xTaskGenericNotify+0x158>)
 801ada0:	6013      	str	r3, [r2, #0]
 801ada2:	6a3b      	ldr	r3, [r7, #32]
 801ada4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ada6:	4613      	mov	r3, r2
 801ada8:	009b      	lsls	r3, r3, #2
 801adaa:	4413      	add	r3, r2
 801adac:	009b      	lsls	r3, r3, #2
 801adae:	4a17      	ldr	r2, [pc, #92]	; (801ae0c <xTaskGenericNotify+0x15c>)
 801adb0:	441a      	add	r2, r3
 801adb2:	6a3b      	ldr	r3, [r7, #32]
 801adb4:	3304      	adds	r3, #4
 801adb6:	4619      	mov	r1, r3
 801adb8:	4610      	mov	r0, r2
 801adba:	f7fd fe6e 	bl	8018a9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801adbe:	6a3b      	ldr	r3, [r7, #32]
 801adc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d009      	beq.n	801adda <xTaskGenericNotify+0x12a>
 801adc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adca:	f383 8811 	msr	BASEPRI, r3
 801adce:	f3bf 8f6f 	isb	sy
 801add2:	f3bf 8f4f 	dsb	sy
 801add6:	613b      	str	r3, [r7, #16]
 801add8:	e7fe      	b.n	801add8 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801adda:	6a3b      	ldr	r3, [r7, #32]
 801addc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adde:	4b0c      	ldr	r3, [pc, #48]	; (801ae10 <xTaskGenericNotify+0x160>)
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ade4:	429a      	cmp	r2, r3
 801ade6:	d907      	bls.n	801adf8 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801ade8:	4b0a      	ldr	r3, [pc, #40]	; (801ae14 <xTaskGenericNotify+0x164>)
 801adea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801adee:	601a      	str	r2, [r3, #0]
 801adf0:	f3bf 8f4f 	dsb	sy
 801adf4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801adf8:	f000 fdd6 	bl	801b9a8 <vPortExitCritical>

		return xReturn;
 801adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801adfe:	4618      	mov	r0, r3
 801ae00:	3728      	adds	r7, #40	; 0x28
 801ae02:	46bd      	mov	sp, r7
 801ae04:	bd80      	pop	{r7, pc}
 801ae06:	bf00      	nop
 801ae08:	20001740 	.word	0x20001740
 801ae0c:	20001268 	.word	0x20001268
 801ae10:	20001264 	.word	0x20001264
 801ae14:	e000ed04 	.word	0xe000ed04

0801ae18 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b08e      	sub	sp, #56	; 0x38
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	60b9      	str	r1, [r7, #8]
 801ae22:	603b      	str	r3, [r7, #0]
 801ae24:	4613      	mov	r3, r2
 801ae26:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801ae28:	2301      	movs	r3, #1
 801ae2a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d109      	bne.n	801ae46 <xTaskGenericNotifyFromISR+0x2e>
 801ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae36:	f383 8811 	msr	BASEPRI, r3
 801ae3a:	f3bf 8f6f 	isb	sy
 801ae3e:	f3bf 8f4f 	dsb	sy
 801ae42:	627b      	str	r3, [r7, #36]	; 0x24
 801ae44:	e7fe      	b.n	801ae44 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ae46:	f000 fe5d 	bl	801bb04 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801ae4e:	f3ef 8211 	mrs	r2, BASEPRI
 801ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae56:	f383 8811 	msr	BASEPRI, r3
 801ae5a:	f3bf 8f6f 	isb	sy
 801ae5e:	f3bf 8f4f 	dsb	sy
 801ae62:	623a      	str	r2, [r7, #32]
 801ae64:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801ae66:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ae68:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801ae6a:	683b      	ldr	r3, [r7, #0]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d003      	beq.n	801ae78 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ae74:	683b      	ldr	r3, [r7, #0]
 801ae76:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ae7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae84:	2202      	movs	r2, #2
 801ae86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801ae8a:	79fb      	ldrb	r3, [r7, #7]
 801ae8c:	2b04      	cmp	r3, #4
 801ae8e:	d829      	bhi.n	801aee4 <xTaskGenericNotifyFromISR+0xcc>
 801ae90:	a201      	add	r2, pc, #4	; (adr r2, 801ae98 <xTaskGenericNotifyFromISR+0x80>)
 801ae92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae96:	bf00      	nop
 801ae98:	0801af03 	.word	0x0801af03
 801ae9c:	0801aead 	.word	0x0801aead
 801aea0:	0801aebb 	.word	0x0801aebb
 801aea4:	0801aec7 	.word	0x0801aec7
 801aea8:	0801aecf 	.word	0x0801aecf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801aeb0:	68bb      	ldr	r3, [r7, #8]
 801aeb2:	431a      	orrs	r2, r3
 801aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801aeb8:	e026      	b.n	801af08 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aebe:	1c5a      	adds	r2, r3, #1
 801aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801aec4:	e020      	b.n	801af08 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec8:	68ba      	ldr	r2, [r7, #8]
 801aeca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801aecc:	e01c      	b.n	801af08 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801aece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aed2:	2b02      	cmp	r3, #2
 801aed4:	d003      	beq.n	801aede <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed8:	68ba      	ldr	r2, [r7, #8]
 801aeda:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801aedc:	e014      	b.n	801af08 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801aede:	2300      	movs	r3, #0
 801aee0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801aee2:	e011      	b.n	801af08 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aeec:	d00b      	beq.n	801af06 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aef2:	f383 8811 	msr	BASEPRI, r3
 801aef6:	f3bf 8f6f 	isb	sy
 801aefa:	f3bf 8f4f 	dsb	sy
 801aefe:	61bb      	str	r3, [r7, #24]
 801af00:	e7fe      	b.n	801af00 <xTaskGenericNotifyFromISR+0xe8>
					break;
 801af02:	bf00      	nop
 801af04:	e000      	b.n	801af08 <xTaskGenericNotifyFromISR+0xf0>
					break;
 801af06:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801af08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	d145      	bne.n	801af9c <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af14:	2b00      	cmp	r3, #0
 801af16:	d009      	beq.n	801af2c <xTaskGenericNotifyFromISR+0x114>
 801af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af1c:	f383 8811 	msr	BASEPRI, r3
 801af20:	f3bf 8f6f 	isb	sy
 801af24:	f3bf 8f4f 	dsb	sy
 801af28:	617b      	str	r3, [r7, #20]
 801af2a:	e7fe      	b.n	801af2a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801af2c:	4b20      	ldr	r3, [pc, #128]	; (801afb0 <xTaskGenericNotifyFromISR+0x198>)
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	2b00      	cmp	r3, #0
 801af32:	d11d      	bne.n	801af70 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af36:	3304      	adds	r3, #4
 801af38:	4618      	mov	r0, r3
 801af3a:	f7fd fe0b 	bl	8018b54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af42:	4b1c      	ldr	r3, [pc, #112]	; (801afb4 <xTaskGenericNotifyFromISR+0x19c>)
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	429a      	cmp	r2, r3
 801af48:	d903      	bls.n	801af52 <xTaskGenericNotifyFromISR+0x13a>
 801af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af4e:	4a19      	ldr	r2, [pc, #100]	; (801afb4 <xTaskGenericNotifyFromISR+0x19c>)
 801af50:	6013      	str	r3, [r2, #0]
 801af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af56:	4613      	mov	r3, r2
 801af58:	009b      	lsls	r3, r3, #2
 801af5a:	4413      	add	r3, r2
 801af5c:	009b      	lsls	r3, r3, #2
 801af5e:	4a16      	ldr	r2, [pc, #88]	; (801afb8 <xTaskGenericNotifyFromISR+0x1a0>)
 801af60:	441a      	add	r2, r3
 801af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af64:	3304      	adds	r3, #4
 801af66:	4619      	mov	r1, r3
 801af68:	4610      	mov	r0, r2
 801af6a:	f7fd fd96 	bl	8018a9a <vListInsertEnd>
 801af6e:	e005      	b.n	801af7c <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af72:	3318      	adds	r3, #24
 801af74:	4619      	mov	r1, r3
 801af76:	4811      	ldr	r0, [pc, #68]	; (801afbc <xTaskGenericNotifyFromISR+0x1a4>)
 801af78:	f7fd fd8f 	bl	8018a9a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af80:	4b0f      	ldr	r3, [pc, #60]	; (801afc0 <xTaskGenericNotifyFromISR+0x1a8>)
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af86:	429a      	cmp	r2, r3
 801af88:	d908      	bls.n	801af9c <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801af8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d002      	beq.n	801af96 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801af90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af92:	2201      	movs	r2, #1
 801af94:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801af96:	4b0b      	ldr	r3, [pc, #44]	; (801afc4 <xTaskGenericNotifyFromISR+0x1ac>)
 801af98:	2201      	movs	r2, #1
 801af9a:	601a      	str	r2, [r3, #0]
 801af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af9e:	613b      	str	r3, [r7, #16]
	__asm volatile
 801afa0:	693b      	ldr	r3, [r7, #16]
 801afa2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801afa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801afa8:	4618      	mov	r0, r3
 801afaa:	3738      	adds	r7, #56	; 0x38
 801afac:	46bd      	mov	sp, r7
 801afae:	bd80      	pop	{r7, pc}
 801afb0:	20001760 	.word	0x20001760
 801afb4:	20001740 	.word	0x20001740
 801afb8:	20001268 	.word	0x20001268
 801afbc:	200016f8 	.word	0x200016f8
 801afc0:	20001264 	.word	0x20001264
 801afc4:	2000174c 	.word	0x2000174c

0801afc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b084      	sub	sp, #16
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
 801afd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801afd2:	4b21      	ldr	r3, [pc, #132]	; (801b058 <prvAddCurrentTaskToDelayedList+0x90>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801afd8:	4b20      	ldr	r3, [pc, #128]	; (801b05c <prvAddCurrentTaskToDelayedList+0x94>)
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	3304      	adds	r3, #4
 801afde:	4618      	mov	r0, r3
 801afe0:	f7fd fdb8 	bl	8018b54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afea:	d10a      	bne.n	801b002 <prvAddCurrentTaskToDelayedList+0x3a>
 801afec:	683b      	ldr	r3, [r7, #0]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d007      	beq.n	801b002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801aff2:	4b1a      	ldr	r3, [pc, #104]	; (801b05c <prvAddCurrentTaskToDelayedList+0x94>)
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	3304      	adds	r3, #4
 801aff8:	4619      	mov	r1, r3
 801affa:	4819      	ldr	r0, [pc, #100]	; (801b060 <prvAddCurrentTaskToDelayedList+0x98>)
 801affc:	f7fd fd4d 	bl	8018a9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b000:	e026      	b.n	801b050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b002:	68fa      	ldr	r2, [r7, #12]
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	4413      	add	r3, r2
 801b008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b00a:	4b14      	ldr	r3, [pc, #80]	; (801b05c <prvAddCurrentTaskToDelayedList+0x94>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	68ba      	ldr	r2, [r7, #8]
 801b010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b012:	68ba      	ldr	r2, [r7, #8]
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	429a      	cmp	r2, r3
 801b018:	d209      	bcs.n	801b02e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b01a:	4b12      	ldr	r3, [pc, #72]	; (801b064 <prvAddCurrentTaskToDelayedList+0x9c>)
 801b01c:	681a      	ldr	r2, [r3, #0]
 801b01e:	4b0f      	ldr	r3, [pc, #60]	; (801b05c <prvAddCurrentTaskToDelayedList+0x94>)
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	3304      	adds	r3, #4
 801b024:	4619      	mov	r1, r3
 801b026:	4610      	mov	r0, r2
 801b028:	f7fd fd5b 	bl	8018ae2 <vListInsert>
}
 801b02c:	e010      	b.n	801b050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b02e:	4b0e      	ldr	r3, [pc, #56]	; (801b068 <prvAddCurrentTaskToDelayedList+0xa0>)
 801b030:	681a      	ldr	r2, [r3, #0]
 801b032:	4b0a      	ldr	r3, [pc, #40]	; (801b05c <prvAddCurrentTaskToDelayedList+0x94>)
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	3304      	adds	r3, #4
 801b038:	4619      	mov	r1, r3
 801b03a:	4610      	mov	r0, r2
 801b03c:	f7fd fd51 	bl	8018ae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b040:	4b0a      	ldr	r3, [pc, #40]	; (801b06c <prvAddCurrentTaskToDelayedList+0xa4>)
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	68ba      	ldr	r2, [r7, #8]
 801b046:	429a      	cmp	r2, r3
 801b048:	d202      	bcs.n	801b050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801b04a:	4a08      	ldr	r2, [pc, #32]	; (801b06c <prvAddCurrentTaskToDelayedList+0xa4>)
 801b04c:	68bb      	ldr	r3, [r7, #8]
 801b04e:	6013      	str	r3, [r2, #0]
}
 801b050:	bf00      	nop
 801b052:	3710      	adds	r7, #16
 801b054:	46bd      	mov	sp, r7
 801b056:	bd80      	pop	{r7, pc}
 801b058:	2000173c 	.word	0x2000173c
 801b05c:	20001264 	.word	0x20001264
 801b060:	20001724 	.word	0x20001724
 801b064:	200016f4 	.word	0x200016f4
 801b068:	200016f0 	.word	0x200016f0
 801b06c:	20001758 	.word	0x20001758

0801b070 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b08a      	sub	sp, #40	; 0x28
 801b074:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801b076:	2300      	movs	r3, #0
 801b078:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b07a:	f000 faff 	bl	801b67c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b07e:	4b1c      	ldr	r3, [pc, #112]	; (801b0f0 <xTimerCreateTimerTask+0x80>)
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d021      	beq.n	801b0ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b086:	2300      	movs	r3, #0
 801b088:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b08a:	2300      	movs	r3, #0
 801b08c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b08e:	1d3a      	adds	r2, r7, #4
 801b090:	f107 0108 	add.w	r1, r7, #8
 801b094:	f107 030c 	add.w	r3, r7, #12
 801b098:	4618      	mov	r0, r3
 801b09a:	f7fd fcb7 	bl	8018a0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b09e:	6879      	ldr	r1, [r7, #4]
 801b0a0:	68bb      	ldr	r3, [r7, #8]
 801b0a2:	68fa      	ldr	r2, [r7, #12]
 801b0a4:	9202      	str	r2, [sp, #8]
 801b0a6:	9301      	str	r3, [sp, #4]
 801b0a8:	230a      	movs	r3, #10
 801b0aa:	9300      	str	r3, [sp, #0]
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	460a      	mov	r2, r1
 801b0b0:	4910      	ldr	r1, [pc, #64]	; (801b0f4 <xTimerCreateTimerTask+0x84>)
 801b0b2:	4811      	ldr	r0, [pc, #68]	; (801b0f8 <xTimerCreateTimerTask+0x88>)
 801b0b4:	f7fe fd88 	bl	8019bc8 <xTaskCreateStatic>
 801b0b8:	4602      	mov	r2, r0
 801b0ba:	4b10      	ldr	r3, [pc, #64]	; (801b0fc <xTimerCreateTimerTask+0x8c>)
 801b0bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801b0be:	4b0f      	ldr	r3, [pc, #60]	; (801b0fc <xTimerCreateTimerTask+0x8c>)
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d001      	beq.n	801b0ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801b0c6:	2301      	movs	r3, #1
 801b0c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801b0ca:	697b      	ldr	r3, [r7, #20]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d109      	bne.n	801b0e4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 801b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0d4:	f383 8811 	msr	BASEPRI, r3
 801b0d8:	f3bf 8f6f 	isb	sy
 801b0dc:	f3bf 8f4f 	dsb	sy
 801b0e0:	613b      	str	r3, [r7, #16]
 801b0e2:	e7fe      	b.n	801b0e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 801b0e4:	697b      	ldr	r3, [r7, #20]
}
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	3718      	adds	r7, #24
 801b0ea:	46bd      	mov	sp, r7
 801b0ec:	bd80      	pop	{r7, pc}
 801b0ee:	bf00      	nop
 801b0f0:	20001794 	.word	0x20001794
 801b0f4:	08022014 	.word	0x08022014
 801b0f8:	0801b231 	.word	0x0801b231
 801b0fc:	20001798 	.word	0x20001798

0801b100 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801b100:	b580      	push	{r7, lr}
 801b102:	b08a      	sub	sp, #40	; 0x28
 801b104:	af00      	add	r7, sp, #0
 801b106:	60f8      	str	r0, [r7, #12]
 801b108:	60b9      	str	r1, [r7, #8]
 801b10a:	607a      	str	r2, [r7, #4]
 801b10c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801b10e:	2300      	movs	r3, #0
 801b110:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d109      	bne.n	801b12c <xTimerGenericCommand+0x2c>
 801b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b11c:	f383 8811 	msr	BASEPRI, r3
 801b120:	f3bf 8f6f 	isb	sy
 801b124:	f3bf 8f4f 	dsb	sy
 801b128:	623b      	str	r3, [r7, #32]
 801b12a:	e7fe      	b.n	801b12a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801b12c:	4b19      	ldr	r3, [pc, #100]	; (801b194 <xTimerGenericCommand+0x94>)
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d02a      	beq.n	801b18a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	2b05      	cmp	r3, #5
 801b144:	dc18      	bgt.n	801b178 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b146:	f7ff fbd3 	bl	801a8f0 <xTaskGetSchedulerState>
 801b14a:	4603      	mov	r3, r0
 801b14c:	2b02      	cmp	r3, #2
 801b14e:	d109      	bne.n	801b164 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b150:	4b10      	ldr	r3, [pc, #64]	; (801b194 <xTimerGenericCommand+0x94>)
 801b152:	6818      	ldr	r0, [r3, #0]
 801b154:	f107 0110 	add.w	r1, r7, #16
 801b158:	2300      	movs	r3, #0
 801b15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b15c:	f7fd fec8 	bl	8018ef0 <xQueueGenericSend>
 801b160:	6278      	str	r0, [r7, #36]	; 0x24
 801b162:	e012      	b.n	801b18a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b164:	4b0b      	ldr	r3, [pc, #44]	; (801b194 <xTimerGenericCommand+0x94>)
 801b166:	6818      	ldr	r0, [r3, #0]
 801b168:	f107 0110 	add.w	r1, r7, #16
 801b16c:	2300      	movs	r3, #0
 801b16e:	2200      	movs	r2, #0
 801b170:	f7fd febe 	bl	8018ef0 <xQueueGenericSend>
 801b174:	6278      	str	r0, [r7, #36]	; 0x24
 801b176:	e008      	b.n	801b18a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b178:	4b06      	ldr	r3, [pc, #24]	; (801b194 <xTimerGenericCommand+0x94>)
 801b17a:	6818      	ldr	r0, [r3, #0]
 801b17c:	f107 0110 	add.w	r1, r7, #16
 801b180:	2300      	movs	r3, #0
 801b182:	683a      	ldr	r2, [r7, #0]
 801b184:	f7fd ffae 	bl	80190e4 <xQueueGenericSendFromISR>
 801b188:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b18c:	4618      	mov	r0, r3
 801b18e:	3728      	adds	r7, #40	; 0x28
 801b190:	46bd      	mov	sp, r7
 801b192:	bd80      	pop	{r7, pc}
 801b194:	20001794 	.word	0x20001794

0801b198 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b088      	sub	sp, #32
 801b19c:	af02      	add	r7, sp, #8
 801b19e:	6078      	str	r0, [r7, #4]
 801b1a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1a2:	4b22      	ldr	r3, [pc, #136]	; (801b22c <prvProcessExpiredTimer+0x94>)
 801b1a4:	681b      	ldr	r3, [r3, #0]
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	68db      	ldr	r3, [r3, #12]
 801b1aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b1ac:	697b      	ldr	r3, [r7, #20]
 801b1ae:	3304      	adds	r3, #4
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f7fd fccf 	bl	8018b54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1bc:	f003 0304 	and.w	r3, r3, #4
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d021      	beq.n	801b208 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b1c4:	697b      	ldr	r3, [r7, #20]
 801b1c6:	699a      	ldr	r2, [r3, #24]
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	18d1      	adds	r1, r2, r3
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	683a      	ldr	r2, [r7, #0]
 801b1d0:	6978      	ldr	r0, [r7, #20]
 801b1d2:	f000 f8d1 	bl	801b378 <prvInsertTimerInActiveList>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d01e      	beq.n	801b21a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b1dc:	2300      	movs	r3, #0
 801b1de:	9300      	str	r3, [sp, #0]
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	687a      	ldr	r2, [r7, #4]
 801b1e4:	2100      	movs	r1, #0
 801b1e6:	6978      	ldr	r0, [r7, #20]
 801b1e8:	f7ff ff8a 	bl	801b100 <xTimerGenericCommand>
 801b1ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801b1ee:	693b      	ldr	r3, [r7, #16]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d112      	bne.n	801b21a <prvProcessExpiredTimer+0x82>
 801b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1f8:	f383 8811 	msr	BASEPRI, r3
 801b1fc:	f3bf 8f6f 	isb	sy
 801b200:	f3bf 8f4f 	dsb	sy
 801b204:	60fb      	str	r3, [r7, #12]
 801b206:	e7fe      	b.n	801b206 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b208:	697b      	ldr	r3, [r7, #20]
 801b20a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b20e:	f023 0301 	bic.w	r3, r3, #1
 801b212:	b2da      	uxtb	r2, r3
 801b214:	697b      	ldr	r3, [r7, #20]
 801b216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b21a:	697b      	ldr	r3, [r7, #20]
 801b21c:	6a1b      	ldr	r3, [r3, #32]
 801b21e:	6978      	ldr	r0, [r7, #20]
 801b220:	4798      	blx	r3
}
 801b222:	bf00      	nop
 801b224:	3718      	adds	r7, #24
 801b226:	46bd      	mov	sp, r7
 801b228:	bd80      	pop	{r7, pc}
 801b22a:	bf00      	nop
 801b22c:	2000178c 	.word	0x2000178c

0801b230 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801b230:	b580      	push	{r7, lr}
 801b232:	b084      	sub	sp, #16
 801b234:	af00      	add	r7, sp, #0
 801b236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b238:	f107 0308 	add.w	r3, r7, #8
 801b23c:	4618      	mov	r0, r3
 801b23e:	f000 f857 	bl	801b2f0 <prvGetNextExpireTime>
 801b242:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b244:	68bb      	ldr	r3, [r7, #8]
 801b246:	4619      	mov	r1, r3
 801b248:	68f8      	ldr	r0, [r7, #12]
 801b24a:	f000 f803 	bl	801b254 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801b24e:	f000 f8d5 	bl	801b3fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b252:	e7f1      	b.n	801b238 <prvTimerTask+0x8>

0801b254 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b084      	sub	sp, #16
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
 801b25c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801b25e:	f7fe ff63 	bl	801a128 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b262:	f107 0308 	add.w	r3, r7, #8
 801b266:	4618      	mov	r0, r3
 801b268:	f000 f866 	bl	801b338 <prvSampleTimeNow>
 801b26c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d130      	bne.n	801b2d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b274:	683b      	ldr	r3, [r7, #0]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d10a      	bne.n	801b290 <prvProcessTimerOrBlockTask+0x3c>
 801b27a:	687a      	ldr	r2, [r7, #4]
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	429a      	cmp	r2, r3
 801b280:	d806      	bhi.n	801b290 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801b282:	f7fe ff5f 	bl	801a144 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b286:	68f9      	ldr	r1, [r7, #12]
 801b288:	6878      	ldr	r0, [r7, #4]
 801b28a:	f7ff ff85 	bl	801b198 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801b28e:	e024      	b.n	801b2da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801b290:	683b      	ldr	r3, [r7, #0]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d008      	beq.n	801b2a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b296:	4b13      	ldr	r3, [pc, #76]	; (801b2e4 <prvProcessTimerOrBlockTask+0x90>)
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d101      	bne.n	801b2a4 <prvProcessTimerOrBlockTask+0x50>
 801b2a0:	2301      	movs	r3, #1
 801b2a2:	e000      	b.n	801b2a6 <prvProcessTimerOrBlockTask+0x52>
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b2a8:	4b0f      	ldr	r3, [pc, #60]	; (801b2e8 <prvProcessTimerOrBlockTask+0x94>)
 801b2aa:	6818      	ldr	r0, [r3, #0]
 801b2ac:	687a      	ldr	r2, [r7, #4]
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	1ad3      	subs	r3, r2, r3
 801b2b2:	683a      	ldr	r2, [r7, #0]
 801b2b4:	4619      	mov	r1, r3
 801b2b6:	f7fe fc53 	bl	8019b60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b2ba:	f7fe ff43 	bl	801a144 <xTaskResumeAll>
 801b2be:	4603      	mov	r3, r0
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d10a      	bne.n	801b2da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801b2c4:	4b09      	ldr	r3, [pc, #36]	; (801b2ec <prvProcessTimerOrBlockTask+0x98>)
 801b2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b2ca:	601a      	str	r2, [r3, #0]
 801b2cc:	f3bf 8f4f 	dsb	sy
 801b2d0:	f3bf 8f6f 	isb	sy
}
 801b2d4:	e001      	b.n	801b2da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801b2d6:	f7fe ff35 	bl	801a144 <xTaskResumeAll>
}
 801b2da:	bf00      	nop
 801b2dc:	3710      	adds	r7, #16
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	bd80      	pop	{r7, pc}
 801b2e2:	bf00      	nop
 801b2e4:	20001790 	.word	0x20001790
 801b2e8:	20001794 	.word	0x20001794
 801b2ec:	e000ed04 	.word	0xe000ed04

0801b2f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801b2f0:	b480      	push	{r7}
 801b2f2:	b085      	sub	sp, #20
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b2f8:	4b0e      	ldr	r3, [pc, #56]	; (801b334 <prvGetNextExpireTime+0x44>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d101      	bne.n	801b306 <prvGetNextExpireTime+0x16>
 801b302:	2201      	movs	r2, #1
 801b304:	e000      	b.n	801b308 <prvGetNextExpireTime+0x18>
 801b306:	2200      	movs	r2, #0
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d105      	bne.n	801b320 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b314:	4b07      	ldr	r3, [pc, #28]	; (801b334 <prvGetNextExpireTime+0x44>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	68db      	ldr	r3, [r3, #12]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	60fb      	str	r3, [r7, #12]
 801b31e:	e001      	b.n	801b324 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b320:	2300      	movs	r3, #0
 801b322:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b324:	68fb      	ldr	r3, [r7, #12]
}
 801b326:	4618      	mov	r0, r3
 801b328:	3714      	adds	r7, #20
 801b32a:	46bd      	mov	sp, r7
 801b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b330:	4770      	bx	lr
 801b332:	bf00      	nop
 801b334:	2000178c 	.word	0x2000178c

0801b338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b084      	sub	sp, #16
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b340:	f7fe ff9c 	bl	801a27c <xTaskGetTickCount>
 801b344:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b346:	4b0b      	ldr	r3, [pc, #44]	; (801b374 <prvSampleTimeNow+0x3c>)
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	68fa      	ldr	r2, [r7, #12]
 801b34c:	429a      	cmp	r2, r3
 801b34e:	d205      	bcs.n	801b35c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b350:	f000 f930 	bl	801b5b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	2201      	movs	r2, #1
 801b358:	601a      	str	r2, [r3, #0]
 801b35a:	e002      	b.n	801b362 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	2200      	movs	r2, #0
 801b360:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b362:	4a04      	ldr	r2, [pc, #16]	; (801b374 <prvSampleTimeNow+0x3c>)
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b368:	68fb      	ldr	r3, [r7, #12]
}
 801b36a:	4618      	mov	r0, r3
 801b36c:	3710      	adds	r7, #16
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}
 801b372:	bf00      	nop
 801b374:	2000179c 	.word	0x2000179c

0801b378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b086      	sub	sp, #24
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	60f8      	str	r0, [r7, #12]
 801b380:	60b9      	str	r1, [r7, #8]
 801b382:	607a      	str	r2, [r7, #4]
 801b384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b386:	2300      	movs	r3, #0
 801b388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	68ba      	ldr	r2, [r7, #8]
 801b38e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	68fa      	ldr	r2, [r7, #12]
 801b394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b396:	68ba      	ldr	r2, [r7, #8]
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	429a      	cmp	r2, r3
 801b39c:	d812      	bhi.n	801b3c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b39e:	687a      	ldr	r2, [r7, #4]
 801b3a0:	683b      	ldr	r3, [r7, #0]
 801b3a2:	1ad2      	subs	r2, r2, r3
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	699b      	ldr	r3, [r3, #24]
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	d302      	bcc.n	801b3b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b3ac:	2301      	movs	r3, #1
 801b3ae:	617b      	str	r3, [r7, #20]
 801b3b0:	e01b      	b.n	801b3ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b3b2:	4b10      	ldr	r3, [pc, #64]	; (801b3f4 <prvInsertTimerInActiveList+0x7c>)
 801b3b4:	681a      	ldr	r2, [r3, #0]
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	3304      	adds	r3, #4
 801b3ba:	4619      	mov	r1, r3
 801b3bc:	4610      	mov	r0, r2
 801b3be:	f7fd fb90 	bl	8018ae2 <vListInsert>
 801b3c2:	e012      	b.n	801b3ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b3c4:	687a      	ldr	r2, [r7, #4]
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	429a      	cmp	r2, r3
 801b3ca:	d206      	bcs.n	801b3da <prvInsertTimerInActiveList+0x62>
 801b3cc:	68ba      	ldr	r2, [r7, #8]
 801b3ce:	683b      	ldr	r3, [r7, #0]
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d302      	bcc.n	801b3da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b3d4:	2301      	movs	r3, #1
 801b3d6:	617b      	str	r3, [r7, #20]
 801b3d8:	e007      	b.n	801b3ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b3da:	4b07      	ldr	r3, [pc, #28]	; (801b3f8 <prvInsertTimerInActiveList+0x80>)
 801b3dc:	681a      	ldr	r2, [r3, #0]
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	3304      	adds	r3, #4
 801b3e2:	4619      	mov	r1, r3
 801b3e4:	4610      	mov	r0, r2
 801b3e6:	f7fd fb7c 	bl	8018ae2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b3ea:	697b      	ldr	r3, [r7, #20]
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3718      	adds	r7, #24
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}
 801b3f4:	20001790 	.word	0x20001790
 801b3f8:	2000178c 	.word	0x2000178c

0801b3fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b08e      	sub	sp, #56	; 0x38
 801b400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b402:	e0c6      	b.n	801b592 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	2b00      	cmp	r3, #0
 801b408:	da17      	bge.n	801b43a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801b40a:	1d3b      	adds	r3, r7, #4
 801b40c:	3304      	adds	r3, #4
 801b40e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b412:	2b00      	cmp	r3, #0
 801b414:	d109      	bne.n	801b42a <prvProcessReceivedCommands+0x2e>
 801b416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b41a:	f383 8811 	msr	BASEPRI, r3
 801b41e:	f3bf 8f6f 	isb	sy
 801b422:	f3bf 8f4f 	dsb	sy
 801b426:	61fb      	str	r3, [r7, #28]
 801b428:	e7fe      	b.n	801b428 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b430:	6850      	ldr	r0, [r2, #4]
 801b432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b434:	6892      	ldr	r2, [r2, #8]
 801b436:	4611      	mov	r1, r2
 801b438:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	f2c0 80a7 	blt.w	801b590 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b448:	695b      	ldr	r3, [r3, #20]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d004      	beq.n	801b458 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b450:	3304      	adds	r3, #4
 801b452:	4618      	mov	r0, r3
 801b454:	f7fd fb7e 	bl	8018b54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b458:	463b      	mov	r3, r7
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7ff ff6c 	bl	801b338 <prvSampleTimeNow>
 801b460:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	2b09      	cmp	r3, #9
 801b466:	f200 8094 	bhi.w	801b592 <prvProcessReceivedCommands+0x196>
 801b46a:	a201      	add	r2, pc, #4	; (adr r2, 801b470 <prvProcessReceivedCommands+0x74>)
 801b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b470:	0801b499 	.word	0x0801b499
 801b474:	0801b499 	.word	0x0801b499
 801b478:	0801b499 	.word	0x0801b499
 801b47c:	0801b50b 	.word	0x0801b50b
 801b480:	0801b51f 	.word	0x0801b51f
 801b484:	0801b567 	.word	0x0801b567
 801b488:	0801b499 	.word	0x0801b499
 801b48c:	0801b499 	.word	0x0801b499
 801b490:	0801b50b 	.word	0x0801b50b
 801b494:	0801b51f 	.word	0x0801b51f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b49a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b49e:	f043 0301 	orr.w	r3, r3, #1
 801b4a2:	b2da      	uxtb	r2, r3
 801b4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b4aa:	68ba      	ldr	r2, [r7, #8]
 801b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4ae:	699b      	ldr	r3, [r3, #24]
 801b4b0:	18d1      	adds	r1, r2, r3
 801b4b2:	68bb      	ldr	r3, [r7, #8]
 801b4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b4b8:	f7ff ff5e 	bl	801b378 <prvInsertTimerInActiveList>
 801b4bc:	4603      	mov	r3, r0
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d067      	beq.n	801b592 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4c4:	6a1b      	ldr	r3, [r3, #32]
 801b4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b4c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b4d0:	f003 0304 	and.w	r3, r3, #4
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d05c      	beq.n	801b592 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b4d8:	68ba      	ldr	r2, [r7, #8]
 801b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4dc:	699b      	ldr	r3, [r3, #24]
 801b4de:	441a      	add	r2, r3
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	9300      	str	r3, [sp, #0]
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	2100      	movs	r1, #0
 801b4e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b4ea:	f7ff fe09 	bl	801b100 <xTimerGenericCommand>
 801b4ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801b4f0:	6a3b      	ldr	r3, [r7, #32]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d14d      	bne.n	801b592 <prvProcessReceivedCommands+0x196>
 801b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4fa:	f383 8811 	msr	BASEPRI, r3
 801b4fe:	f3bf 8f6f 	isb	sy
 801b502:	f3bf 8f4f 	dsb	sy
 801b506:	61bb      	str	r3, [r7, #24]
 801b508:	e7fe      	b.n	801b508 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b510:	f023 0301 	bic.w	r3, r3, #1
 801b514:	b2da      	uxtb	r2, r3
 801b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b518:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b51c:	e039      	b.n	801b592 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b524:	f043 0301 	orr.w	r3, r3, #1
 801b528:	b2da      	uxtb	r2, r3
 801b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b52c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b530:	68ba      	ldr	r2, [r7, #8]
 801b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b534:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b538:	699b      	ldr	r3, [r3, #24]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d109      	bne.n	801b552 <prvProcessReceivedCommands+0x156>
 801b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b542:	f383 8811 	msr	BASEPRI, r3
 801b546:	f3bf 8f6f 	isb	sy
 801b54a:	f3bf 8f4f 	dsb	sy
 801b54e:	617b      	str	r3, [r7, #20]
 801b550:	e7fe      	b.n	801b550 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b554:	699a      	ldr	r2, [r3, #24]
 801b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b558:	18d1      	adds	r1, r2, r3
 801b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b55e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b560:	f7ff ff0a 	bl	801b378 <prvInsertTimerInActiveList>
					break;
 801b564:	e015      	b.n	801b592 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b56c:	f003 0302 	and.w	r3, r3, #2
 801b570:	2b00      	cmp	r3, #0
 801b572:	d103      	bne.n	801b57c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801b574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b576:	f000 fbc5 	bl	801bd04 <vPortFree>
 801b57a:	e00a      	b.n	801b592 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b57e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b582:	f023 0301 	bic.w	r3, r3, #1
 801b586:	b2da      	uxtb	r2, r3
 801b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b58a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b58e:	e000      	b.n	801b592 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b590:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b592:	4b07      	ldr	r3, [pc, #28]	; (801b5b0 <prvProcessReceivedCommands+0x1b4>)
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	1d39      	adds	r1, r7, #4
 801b598:	2200      	movs	r2, #0
 801b59a:	4618      	mov	r0, r3
 801b59c:	f7fd fec0 	bl	8019320 <xQueueReceive>
 801b5a0:	4603      	mov	r3, r0
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	f47f af2e 	bne.w	801b404 <prvProcessReceivedCommands+0x8>
	}
}
 801b5a8:	bf00      	nop
 801b5aa:	3730      	adds	r7, #48	; 0x30
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}
 801b5b0:	20001794 	.word	0x20001794

0801b5b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b088      	sub	sp, #32
 801b5b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b5ba:	e047      	b.n	801b64c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b5bc:	4b2d      	ldr	r3, [pc, #180]	; (801b674 <prvSwitchTimerLists+0xc0>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	68db      	ldr	r3, [r3, #12]
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b5c6:	4b2b      	ldr	r3, [pc, #172]	; (801b674 <prvSwitchTimerLists+0xc0>)
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	68db      	ldr	r3, [r3, #12]
 801b5cc:	68db      	ldr	r3, [r3, #12]
 801b5ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	3304      	adds	r3, #4
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	f7fd fabd 	bl	8018b54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	6a1b      	ldr	r3, [r3, #32]
 801b5de:	68f8      	ldr	r0, [r7, #12]
 801b5e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b5e8:	f003 0304 	and.w	r3, r3, #4
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d02d      	beq.n	801b64c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	699b      	ldr	r3, [r3, #24]
 801b5f4:	693a      	ldr	r2, [r7, #16]
 801b5f6:	4413      	add	r3, r2
 801b5f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b5fa:	68ba      	ldr	r2, [r7, #8]
 801b5fc:	693b      	ldr	r3, [r7, #16]
 801b5fe:	429a      	cmp	r2, r3
 801b600:	d90e      	bls.n	801b620 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	68ba      	ldr	r2, [r7, #8]
 801b606:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	68fa      	ldr	r2, [r7, #12]
 801b60c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b60e:	4b19      	ldr	r3, [pc, #100]	; (801b674 <prvSwitchTimerLists+0xc0>)
 801b610:	681a      	ldr	r2, [r3, #0]
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	3304      	adds	r3, #4
 801b616:	4619      	mov	r1, r3
 801b618:	4610      	mov	r0, r2
 801b61a:	f7fd fa62 	bl	8018ae2 <vListInsert>
 801b61e:	e015      	b.n	801b64c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b620:	2300      	movs	r3, #0
 801b622:	9300      	str	r3, [sp, #0]
 801b624:	2300      	movs	r3, #0
 801b626:	693a      	ldr	r2, [r7, #16]
 801b628:	2100      	movs	r1, #0
 801b62a:	68f8      	ldr	r0, [r7, #12]
 801b62c:	f7ff fd68 	bl	801b100 <xTimerGenericCommand>
 801b630:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d109      	bne.n	801b64c <prvSwitchTimerLists+0x98>
 801b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b63c:	f383 8811 	msr	BASEPRI, r3
 801b640:	f3bf 8f6f 	isb	sy
 801b644:	f3bf 8f4f 	dsb	sy
 801b648:	603b      	str	r3, [r7, #0]
 801b64a:	e7fe      	b.n	801b64a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b64c:	4b09      	ldr	r3, [pc, #36]	; (801b674 <prvSwitchTimerLists+0xc0>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d1b2      	bne.n	801b5bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b656:	4b07      	ldr	r3, [pc, #28]	; (801b674 <prvSwitchTimerLists+0xc0>)
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b65c:	4b06      	ldr	r3, [pc, #24]	; (801b678 <prvSwitchTimerLists+0xc4>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	4a04      	ldr	r2, [pc, #16]	; (801b674 <prvSwitchTimerLists+0xc0>)
 801b662:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b664:	4a04      	ldr	r2, [pc, #16]	; (801b678 <prvSwitchTimerLists+0xc4>)
 801b666:	697b      	ldr	r3, [r7, #20]
 801b668:	6013      	str	r3, [r2, #0]
}
 801b66a:	bf00      	nop
 801b66c:	3718      	adds	r7, #24
 801b66e:	46bd      	mov	sp, r7
 801b670:	bd80      	pop	{r7, pc}
 801b672:	bf00      	nop
 801b674:	2000178c 	.word	0x2000178c
 801b678:	20001790 	.word	0x20001790

0801b67c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	b082      	sub	sp, #8
 801b680:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b682:	f000 f963 	bl	801b94c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b686:	4b15      	ldr	r3, [pc, #84]	; (801b6dc <prvCheckForValidListAndQueue+0x60>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d120      	bne.n	801b6d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b68e:	4814      	ldr	r0, [pc, #80]	; (801b6e0 <prvCheckForValidListAndQueue+0x64>)
 801b690:	f7fd f9d6 	bl	8018a40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b694:	4813      	ldr	r0, [pc, #76]	; (801b6e4 <prvCheckForValidListAndQueue+0x68>)
 801b696:	f7fd f9d3 	bl	8018a40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b69a:	4b13      	ldr	r3, [pc, #76]	; (801b6e8 <prvCheckForValidListAndQueue+0x6c>)
 801b69c:	4a10      	ldr	r2, [pc, #64]	; (801b6e0 <prvCheckForValidListAndQueue+0x64>)
 801b69e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b6a0:	4b12      	ldr	r3, [pc, #72]	; (801b6ec <prvCheckForValidListAndQueue+0x70>)
 801b6a2:	4a10      	ldr	r2, [pc, #64]	; (801b6e4 <prvCheckForValidListAndQueue+0x68>)
 801b6a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	9300      	str	r3, [sp, #0]
 801b6aa:	4b11      	ldr	r3, [pc, #68]	; (801b6f0 <prvCheckForValidListAndQueue+0x74>)
 801b6ac:	4a11      	ldr	r2, [pc, #68]	; (801b6f4 <prvCheckForValidListAndQueue+0x78>)
 801b6ae:	2110      	movs	r1, #16
 801b6b0:	200a      	movs	r0, #10
 801b6b2:	f7fd fae1 	bl	8018c78 <xQueueGenericCreateStatic>
 801b6b6:	4602      	mov	r2, r0
 801b6b8:	4b08      	ldr	r3, [pc, #32]	; (801b6dc <prvCheckForValidListAndQueue+0x60>)
 801b6ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b6bc:	4b07      	ldr	r3, [pc, #28]	; (801b6dc <prvCheckForValidListAndQueue+0x60>)
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d005      	beq.n	801b6d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b6c4:	4b05      	ldr	r3, [pc, #20]	; (801b6dc <prvCheckForValidListAndQueue+0x60>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	490b      	ldr	r1, [pc, #44]	; (801b6f8 <prvCheckForValidListAndQueue+0x7c>)
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f7fe f9f6 	bl	8019abc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b6d0:	f000 f96a 	bl	801b9a8 <vPortExitCritical>
}
 801b6d4:	bf00      	nop
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	bd80      	pop	{r7, pc}
 801b6da:	bf00      	nop
 801b6dc:	20001794 	.word	0x20001794
 801b6e0:	20001764 	.word	0x20001764
 801b6e4:	20001778 	.word	0x20001778
 801b6e8:	2000178c 	.word	0x2000178c
 801b6ec:	20001790 	.word	0x20001790
 801b6f0:	20001840 	.word	0x20001840
 801b6f4:	200017a0 	.word	0x200017a0
 801b6f8:	0802201c 	.word	0x0802201c

0801b6fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b6fc:	b480      	push	{r7}
 801b6fe:	b085      	sub	sp, #20
 801b700:	af00      	add	r7, sp, #0
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	60b9      	str	r1, [r7, #8]
 801b706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	3b04      	subs	r3, #4
 801b70c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	3b04      	subs	r3, #4
 801b71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	f023 0201 	bic.w	r2, r3, #1
 801b722:	68fb      	ldr	r3, [r7, #12]
 801b724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	3b04      	subs	r3, #4
 801b72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b72c:	4a0c      	ldr	r2, [pc, #48]	; (801b760 <pxPortInitialiseStack+0x64>)
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	3b14      	subs	r3, #20
 801b736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b738:	687a      	ldr	r2, [r7, #4]
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	3b04      	subs	r3, #4
 801b742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	f06f 0202 	mvn.w	r2, #2
 801b74a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	3b20      	subs	r3, #32
 801b750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b752:	68fb      	ldr	r3, [r7, #12]
}
 801b754:	4618      	mov	r0, r3
 801b756:	3714      	adds	r7, #20
 801b758:	46bd      	mov	sp, r7
 801b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75e:	4770      	bx	lr
 801b760:	0801b765 	.word	0x0801b765

0801b764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b764:	b480      	push	{r7}
 801b766:	b085      	sub	sp, #20
 801b768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b76a:	2300      	movs	r3, #0
 801b76c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b76e:	4b11      	ldr	r3, [pc, #68]	; (801b7b4 <prvTaskExitError+0x50>)
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b776:	d009      	beq.n	801b78c <prvTaskExitError+0x28>
 801b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b77c:	f383 8811 	msr	BASEPRI, r3
 801b780:	f3bf 8f6f 	isb	sy
 801b784:	f3bf 8f4f 	dsb	sy
 801b788:	60fb      	str	r3, [r7, #12]
 801b78a:	e7fe      	b.n	801b78a <prvTaskExitError+0x26>
 801b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b790:	f383 8811 	msr	BASEPRI, r3
 801b794:	f3bf 8f6f 	isb	sy
 801b798:	f3bf 8f4f 	dsb	sy
 801b79c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b79e:	bf00      	nop
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d0fc      	beq.n	801b7a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b7a6:	bf00      	nop
 801b7a8:	3714      	adds	r7, #20
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b0:	4770      	bx	lr
 801b7b2:	bf00      	nop
 801b7b4:	200000d8 	.word	0x200000d8
	...

0801b7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b7c0:	4b07      	ldr	r3, [pc, #28]	; (801b7e0 <pxCurrentTCBConst2>)
 801b7c2:	6819      	ldr	r1, [r3, #0]
 801b7c4:	6808      	ldr	r0, [r1, #0]
 801b7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ca:	f380 8809 	msr	PSP, r0
 801b7ce:	f3bf 8f6f 	isb	sy
 801b7d2:	f04f 0000 	mov.w	r0, #0
 801b7d6:	f380 8811 	msr	BASEPRI, r0
 801b7da:	4770      	bx	lr
 801b7dc:	f3af 8000 	nop.w

0801b7e0 <pxCurrentTCBConst2>:
 801b7e0:	20001264 	.word	0x20001264
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b7e4:	bf00      	nop
 801b7e6:	bf00      	nop

0801b7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b7e8:	4808      	ldr	r0, [pc, #32]	; (801b80c <prvPortStartFirstTask+0x24>)
 801b7ea:	6800      	ldr	r0, [r0, #0]
 801b7ec:	6800      	ldr	r0, [r0, #0]
 801b7ee:	f380 8808 	msr	MSP, r0
 801b7f2:	f04f 0000 	mov.w	r0, #0
 801b7f6:	f380 8814 	msr	CONTROL, r0
 801b7fa:	b662      	cpsie	i
 801b7fc:	b661      	cpsie	f
 801b7fe:	f3bf 8f4f 	dsb	sy
 801b802:	f3bf 8f6f 	isb	sy
 801b806:	df00      	svc	0
 801b808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b80a:	bf00      	nop
 801b80c:	e000ed08 	.word	0xe000ed08

0801b810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b810:	b580      	push	{r7, lr}
 801b812:	b086      	sub	sp, #24
 801b814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b816:	4b44      	ldr	r3, [pc, #272]	; (801b928 <xPortStartScheduler+0x118>)
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	4a44      	ldr	r2, [pc, #272]	; (801b92c <xPortStartScheduler+0x11c>)
 801b81c:	4293      	cmp	r3, r2
 801b81e:	d109      	bne.n	801b834 <xPortStartScheduler+0x24>
 801b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b824:	f383 8811 	msr	BASEPRI, r3
 801b828:	f3bf 8f6f 	isb	sy
 801b82c:	f3bf 8f4f 	dsb	sy
 801b830:	613b      	str	r3, [r7, #16]
 801b832:	e7fe      	b.n	801b832 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b834:	4b3c      	ldr	r3, [pc, #240]	; (801b928 <xPortStartScheduler+0x118>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	4a3d      	ldr	r2, [pc, #244]	; (801b930 <xPortStartScheduler+0x120>)
 801b83a:	4293      	cmp	r3, r2
 801b83c:	d109      	bne.n	801b852 <xPortStartScheduler+0x42>
 801b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b842:	f383 8811 	msr	BASEPRI, r3
 801b846:	f3bf 8f6f 	isb	sy
 801b84a:	f3bf 8f4f 	dsb	sy
 801b84e:	60fb      	str	r3, [r7, #12]
 801b850:	e7fe      	b.n	801b850 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b852:	4b38      	ldr	r3, [pc, #224]	; (801b934 <xPortStartScheduler+0x124>)
 801b854:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b856:	697b      	ldr	r3, [r7, #20]
 801b858:	781b      	ldrb	r3, [r3, #0]
 801b85a:	b2db      	uxtb	r3, r3
 801b85c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b85e:	697b      	ldr	r3, [r7, #20]
 801b860:	22ff      	movs	r2, #255	; 0xff
 801b862:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b864:	697b      	ldr	r3, [r7, #20]
 801b866:	781b      	ldrb	r3, [r3, #0]
 801b868:	b2db      	uxtb	r3, r3
 801b86a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b86c:	78fb      	ldrb	r3, [r7, #3]
 801b86e:	b2db      	uxtb	r3, r3
 801b870:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b874:	b2da      	uxtb	r2, r3
 801b876:	4b30      	ldr	r3, [pc, #192]	; (801b938 <xPortStartScheduler+0x128>)
 801b878:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b87a:	4b30      	ldr	r3, [pc, #192]	; (801b93c <xPortStartScheduler+0x12c>)
 801b87c:	2207      	movs	r2, #7
 801b87e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b880:	e009      	b.n	801b896 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801b882:	4b2e      	ldr	r3, [pc, #184]	; (801b93c <xPortStartScheduler+0x12c>)
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	3b01      	subs	r3, #1
 801b888:	4a2c      	ldr	r2, [pc, #176]	; (801b93c <xPortStartScheduler+0x12c>)
 801b88a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b88c:	78fb      	ldrb	r3, [r7, #3]
 801b88e:	b2db      	uxtb	r3, r3
 801b890:	005b      	lsls	r3, r3, #1
 801b892:	b2db      	uxtb	r3, r3
 801b894:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b896:	78fb      	ldrb	r3, [r7, #3]
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b89e:	2b80      	cmp	r3, #128	; 0x80
 801b8a0:	d0ef      	beq.n	801b882 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b8a2:	4b26      	ldr	r3, [pc, #152]	; (801b93c <xPortStartScheduler+0x12c>)
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	f1c3 0307 	rsb	r3, r3, #7
 801b8aa:	2b04      	cmp	r3, #4
 801b8ac:	d009      	beq.n	801b8c2 <xPortStartScheduler+0xb2>
 801b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8b2:	f383 8811 	msr	BASEPRI, r3
 801b8b6:	f3bf 8f6f 	isb	sy
 801b8ba:	f3bf 8f4f 	dsb	sy
 801b8be:	60bb      	str	r3, [r7, #8]
 801b8c0:	e7fe      	b.n	801b8c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b8c2:	4b1e      	ldr	r3, [pc, #120]	; (801b93c <xPortStartScheduler+0x12c>)
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	021b      	lsls	r3, r3, #8
 801b8c8:	4a1c      	ldr	r2, [pc, #112]	; (801b93c <xPortStartScheduler+0x12c>)
 801b8ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b8cc:	4b1b      	ldr	r3, [pc, #108]	; (801b93c <xPortStartScheduler+0x12c>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b8d4:	4a19      	ldr	r2, [pc, #100]	; (801b93c <xPortStartScheduler+0x12c>)
 801b8d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	b2da      	uxtb	r2, r3
 801b8dc:	697b      	ldr	r3, [r7, #20]
 801b8de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b8e0:	4b17      	ldr	r3, [pc, #92]	; (801b940 <xPortStartScheduler+0x130>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	4a16      	ldr	r2, [pc, #88]	; (801b940 <xPortStartScheduler+0x130>)
 801b8e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b8ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b8ec:	4b14      	ldr	r3, [pc, #80]	; (801b940 <xPortStartScheduler+0x130>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	4a13      	ldr	r2, [pc, #76]	; (801b940 <xPortStartScheduler+0x130>)
 801b8f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b8f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b8f8:	f000 f8d6 	bl	801baa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b8fc:	4b11      	ldr	r3, [pc, #68]	; (801b944 <xPortStartScheduler+0x134>)
 801b8fe:	2200      	movs	r2, #0
 801b900:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b902:	f000 f8f5 	bl	801baf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b906:	4b10      	ldr	r3, [pc, #64]	; (801b948 <xPortStartScheduler+0x138>)
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	4a0f      	ldr	r2, [pc, #60]	; (801b948 <xPortStartScheduler+0x138>)
 801b90c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b910:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b912:	f7ff ff69 	bl	801b7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b916:	f7fe fd8b 	bl	801a430 <vTaskSwitchContext>
	prvTaskExitError();
 801b91a:	f7ff ff23 	bl	801b764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b91e:	2300      	movs	r3, #0
}
 801b920:	4618      	mov	r0, r3
 801b922:	3718      	adds	r7, #24
 801b924:	46bd      	mov	sp, r7
 801b926:	bd80      	pop	{r7, pc}
 801b928:	e000ed00 	.word	0xe000ed00
 801b92c:	410fc271 	.word	0x410fc271
 801b930:	410fc270 	.word	0x410fc270
 801b934:	e000e400 	.word	0xe000e400
 801b938:	20001890 	.word	0x20001890
 801b93c:	20001894 	.word	0x20001894
 801b940:	e000ed20 	.word	0xe000ed20
 801b944:	200000d8 	.word	0x200000d8
 801b948:	e000ef34 	.word	0xe000ef34

0801b94c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b94c:	b480      	push	{r7}
 801b94e:	b083      	sub	sp, #12
 801b950:	af00      	add	r7, sp, #0
 801b952:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b956:	f383 8811 	msr	BASEPRI, r3
 801b95a:	f3bf 8f6f 	isb	sy
 801b95e:	f3bf 8f4f 	dsb	sy
 801b962:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b964:	4b0e      	ldr	r3, [pc, #56]	; (801b9a0 <vPortEnterCritical+0x54>)
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	3301      	adds	r3, #1
 801b96a:	4a0d      	ldr	r2, [pc, #52]	; (801b9a0 <vPortEnterCritical+0x54>)
 801b96c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b96e:	4b0c      	ldr	r3, [pc, #48]	; (801b9a0 <vPortEnterCritical+0x54>)
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	2b01      	cmp	r3, #1
 801b974:	d10e      	bne.n	801b994 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b976:	4b0b      	ldr	r3, [pc, #44]	; (801b9a4 <vPortEnterCritical+0x58>)
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	b2db      	uxtb	r3, r3
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d009      	beq.n	801b994 <vPortEnterCritical+0x48>
 801b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b984:	f383 8811 	msr	BASEPRI, r3
 801b988:	f3bf 8f6f 	isb	sy
 801b98c:	f3bf 8f4f 	dsb	sy
 801b990:	603b      	str	r3, [r7, #0]
 801b992:	e7fe      	b.n	801b992 <vPortEnterCritical+0x46>
	}
}
 801b994:	bf00      	nop
 801b996:	370c      	adds	r7, #12
 801b998:	46bd      	mov	sp, r7
 801b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b99e:	4770      	bx	lr
 801b9a0:	200000d8 	.word	0x200000d8
 801b9a4:	e000ed04 	.word	0xe000ed04

0801b9a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b9a8:	b480      	push	{r7}
 801b9aa:	b083      	sub	sp, #12
 801b9ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b9ae:	4b11      	ldr	r3, [pc, #68]	; (801b9f4 <vPortExitCritical+0x4c>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d109      	bne.n	801b9ca <vPortExitCritical+0x22>
 801b9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9ba:	f383 8811 	msr	BASEPRI, r3
 801b9be:	f3bf 8f6f 	isb	sy
 801b9c2:	f3bf 8f4f 	dsb	sy
 801b9c6:	607b      	str	r3, [r7, #4]
 801b9c8:	e7fe      	b.n	801b9c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801b9ca:	4b0a      	ldr	r3, [pc, #40]	; (801b9f4 <vPortExitCritical+0x4c>)
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	3b01      	subs	r3, #1
 801b9d0:	4a08      	ldr	r2, [pc, #32]	; (801b9f4 <vPortExitCritical+0x4c>)
 801b9d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b9d4:	4b07      	ldr	r3, [pc, #28]	; (801b9f4 <vPortExitCritical+0x4c>)
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d104      	bne.n	801b9e6 <vPortExitCritical+0x3e>
 801b9dc:	2300      	movs	r3, #0
 801b9de:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b9e0:	683b      	ldr	r3, [r7, #0]
 801b9e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801b9e6:	bf00      	nop
 801b9e8:	370c      	adds	r7, #12
 801b9ea:	46bd      	mov	sp, r7
 801b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f0:	4770      	bx	lr
 801b9f2:	bf00      	nop
 801b9f4:	200000d8 	.word	0x200000d8
	...

0801ba00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801ba00:	f3ef 8009 	mrs	r0, PSP
 801ba04:	f3bf 8f6f 	isb	sy
 801ba08:	4b15      	ldr	r3, [pc, #84]	; (801ba60 <pxCurrentTCBConst>)
 801ba0a:	681a      	ldr	r2, [r3, #0]
 801ba0c:	f01e 0f10 	tst.w	lr, #16
 801ba10:	bf08      	it	eq
 801ba12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801ba16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba1a:	6010      	str	r0, [r2, #0]
 801ba1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801ba20:	f04f 0050 	mov.w	r0, #80	; 0x50
 801ba24:	f380 8811 	msr	BASEPRI, r0
 801ba28:	f3bf 8f4f 	dsb	sy
 801ba2c:	f3bf 8f6f 	isb	sy
 801ba30:	f7fe fcfe 	bl	801a430 <vTaskSwitchContext>
 801ba34:	f04f 0000 	mov.w	r0, #0
 801ba38:	f380 8811 	msr	BASEPRI, r0
 801ba3c:	bc09      	pop	{r0, r3}
 801ba3e:	6819      	ldr	r1, [r3, #0]
 801ba40:	6808      	ldr	r0, [r1, #0]
 801ba42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba46:	f01e 0f10 	tst.w	lr, #16
 801ba4a:	bf08      	it	eq
 801ba4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801ba50:	f380 8809 	msr	PSP, r0
 801ba54:	f3bf 8f6f 	isb	sy
 801ba58:	4770      	bx	lr
 801ba5a:	bf00      	nop
 801ba5c:	f3af 8000 	nop.w

0801ba60 <pxCurrentTCBConst>:
 801ba60:	20001264 	.word	0x20001264
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801ba64:	bf00      	nop
 801ba66:	bf00      	nop

0801ba68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801ba68:	b580      	push	{r7, lr}
 801ba6a:	b082      	sub	sp, #8
 801ba6c:	af00      	add	r7, sp, #0
	__asm volatile
 801ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba72:	f383 8811 	msr	BASEPRI, r3
 801ba76:	f3bf 8f6f 	isb	sy
 801ba7a:	f3bf 8f4f 	dsb	sy
 801ba7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801ba80:	f7fe fc1e 	bl	801a2c0 <xTaskIncrementTick>
 801ba84:	4603      	mov	r3, r0
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d003      	beq.n	801ba92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801ba8a:	4b06      	ldr	r3, [pc, #24]	; (801baa4 <SysTick_Handler+0x3c>)
 801ba8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ba90:	601a      	str	r2, [r3, #0]
 801ba92:	2300      	movs	r3, #0
 801ba94:	603b      	str	r3, [r7, #0]
	__asm volatile
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801ba9c:	bf00      	nop
 801ba9e:	3708      	adds	r7, #8
 801baa0:	46bd      	mov	sp, r7
 801baa2:	bd80      	pop	{r7, pc}
 801baa4:	e000ed04 	.word	0xe000ed04

0801baa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801baa8:	b480      	push	{r7}
 801baaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801baac:	4b0b      	ldr	r3, [pc, #44]	; (801badc <vPortSetupTimerInterrupt+0x34>)
 801baae:	2200      	movs	r2, #0
 801bab0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801bab2:	4b0b      	ldr	r3, [pc, #44]	; (801bae0 <vPortSetupTimerInterrupt+0x38>)
 801bab4:	2200      	movs	r2, #0
 801bab6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801bab8:	4b0a      	ldr	r3, [pc, #40]	; (801bae4 <vPortSetupTimerInterrupt+0x3c>)
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	4a0a      	ldr	r2, [pc, #40]	; (801bae8 <vPortSetupTimerInterrupt+0x40>)
 801babe:	fba2 2303 	umull	r2, r3, r2, r3
 801bac2:	099b      	lsrs	r3, r3, #6
 801bac4:	4a09      	ldr	r2, [pc, #36]	; (801baec <vPortSetupTimerInterrupt+0x44>)
 801bac6:	3b01      	subs	r3, #1
 801bac8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801baca:	4b04      	ldr	r3, [pc, #16]	; (801badc <vPortSetupTimerInterrupt+0x34>)
 801bacc:	2207      	movs	r2, #7
 801bace:	601a      	str	r2, [r3, #0]
}
 801bad0:	bf00      	nop
 801bad2:	46bd      	mov	sp, r7
 801bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad8:	4770      	bx	lr
 801bada:	bf00      	nop
 801badc:	e000e010 	.word	0xe000e010
 801bae0:	e000e018 	.word	0xe000e018
 801bae4:	200000cc 	.word	0x200000cc
 801bae8:	10624dd3 	.word	0x10624dd3
 801baec:	e000e014 	.word	0xe000e014

0801baf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801baf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801bb00 <vPortEnableVFP+0x10>
 801baf4:	6801      	ldr	r1, [r0, #0]
 801baf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801bafa:	6001      	str	r1, [r0, #0]
 801bafc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801bafe:	bf00      	nop
 801bb00:	e000ed88 	.word	0xe000ed88

0801bb04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801bb04:	b480      	push	{r7}
 801bb06:	b085      	sub	sp, #20
 801bb08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801bb0a:	f3ef 8305 	mrs	r3, IPSR
 801bb0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	2b0f      	cmp	r3, #15
 801bb14:	d913      	bls.n	801bb3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801bb16:	4a16      	ldr	r2, [pc, #88]	; (801bb70 <vPortValidateInterruptPriority+0x6c>)
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	4413      	add	r3, r2
 801bb1c:	781b      	ldrb	r3, [r3, #0]
 801bb1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801bb20:	4b14      	ldr	r3, [pc, #80]	; (801bb74 <vPortValidateInterruptPriority+0x70>)
 801bb22:	781b      	ldrb	r3, [r3, #0]
 801bb24:	7afa      	ldrb	r2, [r7, #11]
 801bb26:	429a      	cmp	r2, r3
 801bb28:	d209      	bcs.n	801bb3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb2e:	f383 8811 	msr	BASEPRI, r3
 801bb32:	f3bf 8f6f 	isb	sy
 801bb36:	f3bf 8f4f 	dsb	sy
 801bb3a:	607b      	str	r3, [r7, #4]
 801bb3c:	e7fe      	b.n	801bb3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801bb3e:	4b0e      	ldr	r3, [pc, #56]	; (801bb78 <vPortValidateInterruptPriority+0x74>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801bb46:	4b0d      	ldr	r3, [pc, #52]	; (801bb7c <vPortValidateInterruptPriority+0x78>)
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	429a      	cmp	r2, r3
 801bb4c:	d909      	bls.n	801bb62 <vPortValidateInterruptPriority+0x5e>
 801bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb52:	f383 8811 	msr	BASEPRI, r3
 801bb56:	f3bf 8f6f 	isb	sy
 801bb5a:	f3bf 8f4f 	dsb	sy
 801bb5e:	603b      	str	r3, [r7, #0]
 801bb60:	e7fe      	b.n	801bb60 <vPortValidateInterruptPriority+0x5c>
	}
 801bb62:	bf00      	nop
 801bb64:	3714      	adds	r7, #20
 801bb66:	46bd      	mov	sp, r7
 801bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb6c:	4770      	bx	lr
 801bb6e:	bf00      	nop
 801bb70:	e000e3f0 	.word	0xe000e3f0
 801bb74:	20001890 	.word	0x20001890
 801bb78:	e000ed0c 	.word	0xe000ed0c
 801bb7c:	20001894 	.word	0x20001894

0801bb80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b08a      	sub	sp, #40	; 0x28
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801bb88:	2300      	movs	r3, #0
 801bb8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801bb8c:	f7fe facc 	bl	801a128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801bb90:	4b57      	ldr	r3, [pc, #348]	; (801bcf0 <pvPortMalloc+0x170>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d101      	bne.n	801bb9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801bb98:	f000 f90c 	bl	801bdb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801bb9c:	4b55      	ldr	r3, [pc, #340]	; (801bcf4 <pvPortMalloc+0x174>)
 801bb9e:	681a      	ldr	r2, [r3, #0]
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	4013      	ands	r3, r2
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	f040 808c 	bne.w	801bcc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d01c      	beq.n	801bbea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 801bbb0:	2208      	movs	r2, #8
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	4413      	add	r3, r2
 801bbb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	f003 0307 	and.w	r3, r3, #7
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d013      	beq.n	801bbea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	f023 0307 	bic.w	r3, r3, #7
 801bbc8:	3308      	adds	r3, #8
 801bbca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	f003 0307 	and.w	r3, r3, #7
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d009      	beq.n	801bbea <pvPortMalloc+0x6a>
 801bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbda:	f383 8811 	msr	BASEPRI, r3
 801bbde:	f3bf 8f6f 	isb	sy
 801bbe2:	f3bf 8f4f 	dsb	sy
 801bbe6:	617b      	str	r3, [r7, #20]
 801bbe8:	e7fe      	b.n	801bbe8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d068      	beq.n	801bcc2 <pvPortMalloc+0x142>
 801bbf0:	4b41      	ldr	r3, [pc, #260]	; (801bcf8 <pvPortMalloc+0x178>)
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	687a      	ldr	r2, [r7, #4]
 801bbf6:	429a      	cmp	r2, r3
 801bbf8:	d863      	bhi.n	801bcc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801bbfa:	4b40      	ldr	r3, [pc, #256]	; (801bcfc <pvPortMalloc+0x17c>)
 801bbfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801bbfe:	4b3f      	ldr	r3, [pc, #252]	; (801bcfc <pvPortMalloc+0x17c>)
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801bc04:	e004      	b.n	801bc10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc12:	685b      	ldr	r3, [r3, #4]
 801bc14:	687a      	ldr	r2, [r7, #4]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d903      	bls.n	801bc22 <pvPortMalloc+0xa2>
 801bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d1f1      	bne.n	801bc06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801bc22:	4b33      	ldr	r3, [pc, #204]	; (801bcf0 <pvPortMalloc+0x170>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d04a      	beq.n	801bcc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801bc2c:	6a3b      	ldr	r3, [r7, #32]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	2208      	movs	r2, #8
 801bc32:	4413      	add	r3, r2
 801bc34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc38:	681a      	ldr	r2, [r3, #0]
 801bc3a:	6a3b      	ldr	r3, [r7, #32]
 801bc3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc40:	685a      	ldr	r2, [r3, #4]
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	1ad2      	subs	r2, r2, r3
 801bc46:	2308      	movs	r3, #8
 801bc48:	005b      	lsls	r3, r3, #1
 801bc4a:	429a      	cmp	r2, r3
 801bc4c:	d91e      	bls.n	801bc8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801bc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	4413      	add	r3, r2
 801bc54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801bc56:	69bb      	ldr	r3, [r7, #24]
 801bc58:	f003 0307 	and.w	r3, r3, #7
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d009      	beq.n	801bc74 <pvPortMalloc+0xf4>
 801bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc64:	f383 8811 	msr	BASEPRI, r3
 801bc68:	f3bf 8f6f 	isb	sy
 801bc6c:	f3bf 8f4f 	dsb	sy
 801bc70:	613b      	str	r3, [r7, #16]
 801bc72:	e7fe      	b.n	801bc72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc76:	685a      	ldr	r2, [r3, #4]
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	1ad2      	subs	r2, r2, r3
 801bc7c:	69bb      	ldr	r3, [r7, #24]
 801bc7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc82:	687a      	ldr	r2, [r7, #4]
 801bc84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801bc86:	69b8      	ldr	r0, [r7, #24]
 801bc88:	f000 f8f6 	bl	801be78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801bc8c:	4b1a      	ldr	r3, [pc, #104]	; (801bcf8 <pvPortMalloc+0x178>)
 801bc8e:	681a      	ldr	r2, [r3, #0]
 801bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc92:	685b      	ldr	r3, [r3, #4]
 801bc94:	1ad3      	subs	r3, r2, r3
 801bc96:	4a18      	ldr	r2, [pc, #96]	; (801bcf8 <pvPortMalloc+0x178>)
 801bc98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801bc9a:	4b17      	ldr	r3, [pc, #92]	; (801bcf8 <pvPortMalloc+0x178>)
 801bc9c:	681a      	ldr	r2, [r3, #0]
 801bc9e:	4b18      	ldr	r3, [pc, #96]	; (801bd00 <pvPortMalloc+0x180>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	429a      	cmp	r2, r3
 801bca4:	d203      	bcs.n	801bcae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801bca6:	4b14      	ldr	r3, [pc, #80]	; (801bcf8 <pvPortMalloc+0x178>)
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	4a15      	ldr	r2, [pc, #84]	; (801bd00 <pvPortMalloc+0x180>)
 801bcac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcb0:	685a      	ldr	r2, [r3, #4]
 801bcb2:	4b10      	ldr	r3, [pc, #64]	; (801bcf4 <pvPortMalloc+0x174>)
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	431a      	orrs	r2, r3
 801bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcbe:	2200      	movs	r2, #0
 801bcc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801bcc2:	f7fe fa3f 	bl	801a144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801bcc6:	69fb      	ldr	r3, [r7, #28]
 801bcc8:	f003 0307 	and.w	r3, r3, #7
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d009      	beq.n	801bce4 <pvPortMalloc+0x164>
 801bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcd4:	f383 8811 	msr	BASEPRI, r3
 801bcd8:	f3bf 8f6f 	isb	sy
 801bcdc:	f3bf 8f4f 	dsb	sy
 801bce0:	60fb      	str	r3, [r7, #12]
 801bce2:	e7fe      	b.n	801bce2 <pvPortMalloc+0x162>
	return pvReturn;
 801bce4:	69fb      	ldr	r3, [r7, #28]
}
 801bce6:	4618      	mov	r0, r3
 801bce8:	3728      	adds	r7, #40	; 0x28
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}
 801bcee:	bf00      	nop
 801bcf0:	200054a0 	.word	0x200054a0
 801bcf4:	200054ac 	.word	0x200054ac
 801bcf8:	200054a4 	.word	0x200054a4
 801bcfc:	20005498 	.word	0x20005498
 801bd00:	200054a8 	.word	0x200054a8

0801bd04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b086      	sub	sp, #24
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d046      	beq.n	801bda4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801bd16:	2308      	movs	r3, #8
 801bd18:	425b      	negs	r3, r3
 801bd1a:	697a      	ldr	r2, [r7, #20]
 801bd1c:	4413      	add	r3, r2
 801bd1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801bd20:	697b      	ldr	r3, [r7, #20]
 801bd22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801bd24:	693b      	ldr	r3, [r7, #16]
 801bd26:	685a      	ldr	r2, [r3, #4]
 801bd28:	4b20      	ldr	r3, [pc, #128]	; (801bdac <vPortFree+0xa8>)
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	4013      	ands	r3, r2
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d109      	bne.n	801bd46 <vPortFree+0x42>
 801bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd36:	f383 8811 	msr	BASEPRI, r3
 801bd3a:	f3bf 8f6f 	isb	sy
 801bd3e:	f3bf 8f4f 	dsb	sy
 801bd42:	60fb      	str	r3, [r7, #12]
 801bd44:	e7fe      	b.n	801bd44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801bd46:	693b      	ldr	r3, [r7, #16]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d009      	beq.n	801bd62 <vPortFree+0x5e>
 801bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd52:	f383 8811 	msr	BASEPRI, r3
 801bd56:	f3bf 8f6f 	isb	sy
 801bd5a:	f3bf 8f4f 	dsb	sy
 801bd5e:	60bb      	str	r3, [r7, #8]
 801bd60:	e7fe      	b.n	801bd60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801bd62:	693b      	ldr	r3, [r7, #16]
 801bd64:	685a      	ldr	r2, [r3, #4]
 801bd66:	4b11      	ldr	r3, [pc, #68]	; (801bdac <vPortFree+0xa8>)
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	4013      	ands	r3, r2
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d019      	beq.n	801bda4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801bd70:	693b      	ldr	r3, [r7, #16]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d115      	bne.n	801bda4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801bd78:	693b      	ldr	r3, [r7, #16]
 801bd7a:	685a      	ldr	r2, [r3, #4]
 801bd7c:	4b0b      	ldr	r3, [pc, #44]	; (801bdac <vPortFree+0xa8>)
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	43db      	mvns	r3, r3
 801bd82:	401a      	ands	r2, r3
 801bd84:	693b      	ldr	r3, [r7, #16]
 801bd86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801bd88:	f7fe f9ce 	bl	801a128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801bd8c:	693b      	ldr	r3, [r7, #16]
 801bd8e:	685a      	ldr	r2, [r3, #4]
 801bd90:	4b07      	ldr	r3, [pc, #28]	; (801bdb0 <vPortFree+0xac>)
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	4413      	add	r3, r2
 801bd96:	4a06      	ldr	r2, [pc, #24]	; (801bdb0 <vPortFree+0xac>)
 801bd98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801bd9a:	6938      	ldr	r0, [r7, #16]
 801bd9c:	f000 f86c 	bl	801be78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801bda0:	f7fe f9d0 	bl	801a144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801bda4:	bf00      	nop
 801bda6:	3718      	adds	r7, #24
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	bd80      	pop	{r7, pc}
 801bdac:	200054ac 	.word	0x200054ac
 801bdb0:	200054a4 	.word	0x200054a4

0801bdb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801bdb4:	b480      	push	{r7}
 801bdb6:	b085      	sub	sp, #20
 801bdb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801bdba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801bdbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801bdc0:	4b27      	ldr	r3, [pc, #156]	; (801be60 <prvHeapInit+0xac>)
 801bdc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	f003 0307 	and.w	r3, r3, #7
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d00c      	beq.n	801bde8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	3307      	adds	r3, #7
 801bdd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	f023 0307 	bic.w	r3, r3, #7
 801bdda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801bddc:	68ba      	ldr	r2, [r7, #8]
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	1ad3      	subs	r3, r2, r3
 801bde2:	4a1f      	ldr	r2, [pc, #124]	; (801be60 <prvHeapInit+0xac>)
 801bde4:	4413      	add	r3, r2
 801bde6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801bde8:	68fb      	ldr	r3, [r7, #12]
 801bdea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801bdec:	4a1d      	ldr	r2, [pc, #116]	; (801be64 <prvHeapInit+0xb0>)
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bdf2:	4b1c      	ldr	r3, [pc, #112]	; (801be64 <prvHeapInit+0xb0>)
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	68ba      	ldr	r2, [r7, #8]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801be00:	2208      	movs	r2, #8
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	1a9b      	subs	r3, r3, r2
 801be06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	f023 0307 	bic.w	r3, r3, #7
 801be0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	4a15      	ldr	r2, [pc, #84]	; (801be68 <prvHeapInit+0xb4>)
 801be14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801be16:	4b14      	ldr	r3, [pc, #80]	; (801be68 <prvHeapInit+0xb4>)
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	2200      	movs	r2, #0
 801be1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801be1e:	4b12      	ldr	r3, [pc, #72]	; (801be68 <prvHeapInit+0xb4>)
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	2200      	movs	r2, #0
 801be24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801be2a:	683b      	ldr	r3, [r7, #0]
 801be2c:	68fa      	ldr	r2, [r7, #12]
 801be2e:	1ad2      	subs	r2, r2, r3
 801be30:	683b      	ldr	r3, [r7, #0]
 801be32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801be34:	4b0c      	ldr	r3, [pc, #48]	; (801be68 <prvHeapInit+0xb4>)
 801be36:	681a      	ldr	r2, [r3, #0]
 801be38:	683b      	ldr	r3, [r7, #0]
 801be3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	685b      	ldr	r3, [r3, #4]
 801be40:	4a0a      	ldr	r2, [pc, #40]	; (801be6c <prvHeapInit+0xb8>)
 801be42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801be44:	683b      	ldr	r3, [r7, #0]
 801be46:	685b      	ldr	r3, [r3, #4]
 801be48:	4a09      	ldr	r2, [pc, #36]	; (801be70 <prvHeapInit+0xbc>)
 801be4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801be4c:	4b09      	ldr	r3, [pc, #36]	; (801be74 <prvHeapInit+0xc0>)
 801be4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801be52:	601a      	str	r2, [r3, #0]
}
 801be54:	bf00      	nop
 801be56:	3714      	adds	r7, #20
 801be58:	46bd      	mov	sp, r7
 801be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be5e:	4770      	bx	lr
 801be60:	20001898 	.word	0x20001898
 801be64:	20005498 	.word	0x20005498
 801be68:	200054a0 	.word	0x200054a0
 801be6c:	200054a8 	.word	0x200054a8
 801be70:	200054a4 	.word	0x200054a4
 801be74:	200054ac 	.word	0x200054ac

0801be78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801be78:	b480      	push	{r7}
 801be7a:	b085      	sub	sp, #20
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801be80:	4b28      	ldr	r3, [pc, #160]	; (801bf24 <prvInsertBlockIntoFreeList+0xac>)
 801be82:	60fb      	str	r3, [r7, #12]
 801be84:	e002      	b.n	801be8c <prvInsertBlockIntoFreeList+0x14>
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	60fb      	str	r3, [r7, #12]
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	687a      	ldr	r2, [r7, #4]
 801be92:	429a      	cmp	r2, r3
 801be94:	d8f7      	bhi.n	801be86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	685b      	ldr	r3, [r3, #4]
 801be9e:	68ba      	ldr	r2, [r7, #8]
 801bea0:	4413      	add	r3, r2
 801bea2:	687a      	ldr	r2, [r7, #4]
 801bea4:	429a      	cmp	r2, r3
 801bea6:	d108      	bne.n	801beba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	685a      	ldr	r2, [r3, #4]
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	685b      	ldr	r3, [r3, #4]
 801beb0:	441a      	add	r2, r3
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	685b      	ldr	r3, [r3, #4]
 801bec2:	68ba      	ldr	r2, [r7, #8]
 801bec4:	441a      	add	r2, r3
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	429a      	cmp	r2, r3
 801becc:	d118      	bne.n	801bf00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	681a      	ldr	r2, [r3, #0]
 801bed2:	4b15      	ldr	r3, [pc, #84]	; (801bf28 <prvInsertBlockIntoFreeList+0xb0>)
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	429a      	cmp	r2, r3
 801bed8:	d00d      	beq.n	801bef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	685a      	ldr	r2, [r3, #4]
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	685b      	ldr	r3, [r3, #4]
 801bee4:	441a      	add	r2, r3
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	681a      	ldr	r2, [r3, #0]
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	601a      	str	r2, [r3, #0]
 801bef4:	e008      	b.n	801bf08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801bef6:	4b0c      	ldr	r3, [pc, #48]	; (801bf28 <prvInsertBlockIntoFreeList+0xb0>)
 801bef8:	681a      	ldr	r2, [r3, #0]
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	601a      	str	r2, [r3, #0]
 801befe:	e003      	b.n	801bf08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	681a      	ldr	r2, [r3, #0]
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801bf08:	68fa      	ldr	r2, [r7, #12]
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	429a      	cmp	r2, r3
 801bf0e:	d002      	beq.n	801bf16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801bf10:	68fb      	ldr	r3, [r7, #12]
 801bf12:	687a      	ldr	r2, [r7, #4]
 801bf14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bf16:	bf00      	nop
 801bf18:	3714      	adds	r7, #20
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf20:	4770      	bx	lr
 801bf22:	bf00      	nop
 801bf24:	20005498 	.word	0x20005498
 801bf28:	200054a0 	.word	0x200054a0

0801bf2c <ceilf>:
 801bf2c:	ee10 3a10 	vmov	r3, s0
 801bf30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801bf34:	0dca      	lsrs	r2, r1, #23
 801bf36:	3a7f      	subs	r2, #127	; 0x7f
 801bf38:	2a16      	cmp	r2, #22
 801bf3a:	dc2a      	bgt.n	801bf92 <ceilf+0x66>
 801bf3c:	2a00      	cmp	r2, #0
 801bf3e:	da11      	bge.n	801bf64 <ceilf+0x38>
 801bf40:	eddf 7a18 	vldr	s15, [pc, #96]	; 801bfa4 <ceilf+0x78>
 801bf44:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bf48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bf4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf50:	dd05      	ble.n	801bf5e <ceilf+0x32>
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	db23      	blt.n	801bf9e <ceilf+0x72>
 801bf56:	2900      	cmp	r1, #0
 801bf58:	bf18      	it	ne
 801bf5a:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801bf5e:	ee00 3a10 	vmov	s0, r3
 801bf62:	4770      	bx	lr
 801bf64:	4910      	ldr	r1, [pc, #64]	; (801bfa8 <ceilf+0x7c>)
 801bf66:	4111      	asrs	r1, r2
 801bf68:	420b      	tst	r3, r1
 801bf6a:	d0fa      	beq.n	801bf62 <ceilf+0x36>
 801bf6c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801bfa4 <ceilf+0x78>
 801bf70:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bf74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf7c:	ddef      	ble.n	801bf5e <ceilf+0x32>
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	bfc2      	ittt	gt
 801bf82:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801bf86:	fa40 f202 	asrgt.w	r2, r0, r2
 801bf8a:	189b      	addgt	r3, r3, r2
 801bf8c:	ea23 0301 	bic.w	r3, r3, r1
 801bf90:	e7e5      	b.n	801bf5e <ceilf+0x32>
 801bf92:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801bf96:	d3e4      	bcc.n	801bf62 <ceilf+0x36>
 801bf98:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bf9c:	4770      	bx	lr
 801bf9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801bfa2:	e7dc      	b.n	801bf5e <ceilf+0x32>
 801bfa4:	7149f2ca 	.word	0x7149f2ca
 801bfa8:	007fffff 	.word	0x007fffff

0801bfac <cosf>:
 801bfac:	ee10 3a10 	vmov	r3, s0
 801bfb0:	b507      	push	{r0, r1, r2, lr}
 801bfb2:	4a1c      	ldr	r2, [pc, #112]	; (801c024 <cosf+0x78>)
 801bfb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bfb8:	4293      	cmp	r3, r2
 801bfba:	dc04      	bgt.n	801bfc6 <cosf+0x1a>
 801bfbc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801c028 <cosf+0x7c>
 801bfc0:	f000 fe38 	bl	801cc34 <__kernel_cosf>
 801bfc4:	e004      	b.n	801bfd0 <cosf+0x24>
 801bfc6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bfca:	db04      	blt.n	801bfd6 <cosf+0x2a>
 801bfcc:	ee30 0a40 	vsub.f32	s0, s0, s0
 801bfd0:	b003      	add	sp, #12
 801bfd2:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfd6:	4668      	mov	r0, sp
 801bfd8:	f000 fd00 	bl	801c9dc <__ieee754_rem_pio2f>
 801bfdc:	f000 0003 	and.w	r0, r0, #3
 801bfe0:	2801      	cmp	r0, #1
 801bfe2:	d007      	beq.n	801bff4 <cosf+0x48>
 801bfe4:	2802      	cmp	r0, #2
 801bfe6:	d00e      	beq.n	801c006 <cosf+0x5a>
 801bfe8:	b9a0      	cbnz	r0, 801c014 <cosf+0x68>
 801bfea:	eddd 0a01 	vldr	s1, [sp, #4]
 801bfee:	ed9d 0a00 	vldr	s0, [sp]
 801bff2:	e7e5      	b.n	801bfc0 <cosf+0x14>
 801bff4:	eddd 0a01 	vldr	s1, [sp, #4]
 801bff8:	ed9d 0a00 	vldr	s0, [sp]
 801bffc:	f001 f8fa 	bl	801d1f4 <__kernel_sinf>
 801c000:	eeb1 0a40 	vneg.f32	s0, s0
 801c004:	e7e4      	b.n	801bfd0 <cosf+0x24>
 801c006:	eddd 0a01 	vldr	s1, [sp, #4]
 801c00a:	ed9d 0a00 	vldr	s0, [sp]
 801c00e:	f000 fe11 	bl	801cc34 <__kernel_cosf>
 801c012:	e7f5      	b.n	801c000 <cosf+0x54>
 801c014:	2001      	movs	r0, #1
 801c016:	eddd 0a01 	vldr	s1, [sp, #4]
 801c01a:	ed9d 0a00 	vldr	s0, [sp]
 801c01e:	f001 f8e9 	bl	801d1f4 <__kernel_sinf>
 801c022:	e7d5      	b.n	801bfd0 <cosf+0x24>
 801c024:	3f490fd8 	.word	0x3f490fd8
 801c028:	00000000 	.word	0x00000000

0801c02c <floorf>:
 801c02c:	ee10 3a10 	vmov	r3, s0
 801c030:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c034:	0dca      	lsrs	r2, r1, #23
 801c036:	3a7f      	subs	r2, #127	; 0x7f
 801c038:	2a16      	cmp	r2, #22
 801c03a:	dc2a      	bgt.n	801c092 <floorf+0x66>
 801c03c:	2a00      	cmp	r2, #0
 801c03e:	da11      	bge.n	801c064 <floorf+0x38>
 801c040:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c0a4 <floorf+0x78>
 801c044:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c048:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c050:	dd05      	ble.n	801c05e <floorf+0x32>
 801c052:	2b00      	cmp	r3, #0
 801c054:	da23      	bge.n	801c09e <floorf+0x72>
 801c056:	4a14      	ldr	r2, [pc, #80]	; (801c0a8 <floorf+0x7c>)
 801c058:	2900      	cmp	r1, #0
 801c05a:	bf18      	it	ne
 801c05c:	4613      	movne	r3, r2
 801c05e:	ee00 3a10 	vmov	s0, r3
 801c062:	4770      	bx	lr
 801c064:	4911      	ldr	r1, [pc, #68]	; (801c0ac <floorf+0x80>)
 801c066:	4111      	asrs	r1, r2
 801c068:	420b      	tst	r3, r1
 801c06a:	d0fa      	beq.n	801c062 <floorf+0x36>
 801c06c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c0a4 <floorf+0x78>
 801c070:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c074:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c07c:	ddef      	ble.n	801c05e <floorf+0x32>
 801c07e:	2b00      	cmp	r3, #0
 801c080:	bfbe      	ittt	lt
 801c082:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801c086:	fa40 f202 	asrlt.w	r2, r0, r2
 801c08a:	189b      	addlt	r3, r3, r2
 801c08c:	ea23 0301 	bic.w	r3, r3, r1
 801c090:	e7e5      	b.n	801c05e <floorf+0x32>
 801c092:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801c096:	d3e4      	bcc.n	801c062 <floorf+0x36>
 801c098:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c09c:	4770      	bx	lr
 801c09e:	2300      	movs	r3, #0
 801c0a0:	e7dd      	b.n	801c05e <floorf+0x32>
 801c0a2:	bf00      	nop
 801c0a4:	7149f2ca 	.word	0x7149f2ca
 801c0a8:	bf800000 	.word	0xbf800000
 801c0ac:	007fffff 	.word	0x007fffff

0801c0b0 <sinf>:
 801c0b0:	ee10 3a10 	vmov	r3, s0
 801c0b4:	b507      	push	{r0, r1, r2, lr}
 801c0b6:	4a1d      	ldr	r2, [pc, #116]	; (801c12c <sinf+0x7c>)
 801c0b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c0bc:	4293      	cmp	r3, r2
 801c0be:	dc05      	bgt.n	801c0cc <sinf+0x1c>
 801c0c0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801c130 <sinf+0x80>
 801c0c4:	2000      	movs	r0, #0
 801c0c6:	f001 f895 	bl	801d1f4 <__kernel_sinf>
 801c0ca:	e004      	b.n	801c0d6 <sinf+0x26>
 801c0cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c0d0:	db04      	blt.n	801c0dc <sinf+0x2c>
 801c0d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c0d6:	b003      	add	sp, #12
 801c0d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c0dc:	4668      	mov	r0, sp
 801c0de:	f000 fc7d 	bl	801c9dc <__ieee754_rem_pio2f>
 801c0e2:	f000 0003 	and.w	r0, r0, #3
 801c0e6:	2801      	cmp	r0, #1
 801c0e8:	d008      	beq.n	801c0fc <sinf+0x4c>
 801c0ea:	2802      	cmp	r0, #2
 801c0ec:	d00d      	beq.n	801c10a <sinf+0x5a>
 801c0ee:	b9b0      	cbnz	r0, 801c11e <sinf+0x6e>
 801c0f0:	2001      	movs	r0, #1
 801c0f2:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0f6:	ed9d 0a00 	vldr	s0, [sp]
 801c0fa:	e7e4      	b.n	801c0c6 <sinf+0x16>
 801c0fc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c100:	ed9d 0a00 	vldr	s0, [sp]
 801c104:	f000 fd96 	bl	801cc34 <__kernel_cosf>
 801c108:	e7e5      	b.n	801c0d6 <sinf+0x26>
 801c10a:	2001      	movs	r0, #1
 801c10c:	eddd 0a01 	vldr	s1, [sp, #4]
 801c110:	ed9d 0a00 	vldr	s0, [sp]
 801c114:	f001 f86e 	bl	801d1f4 <__kernel_sinf>
 801c118:	eeb1 0a40 	vneg.f32	s0, s0
 801c11c:	e7db      	b.n	801c0d6 <sinf+0x26>
 801c11e:	eddd 0a01 	vldr	s1, [sp, #4]
 801c122:	ed9d 0a00 	vldr	s0, [sp]
 801c126:	f000 fd85 	bl	801cc34 <__kernel_cosf>
 801c12a:	e7f5      	b.n	801c118 <sinf+0x68>
 801c12c:	3f490fd8 	.word	0x3f490fd8
 801c130:	00000000 	.word	0x00000000

0801c134 <asin>:
 801c134:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c136:	ed2d 8b02 	vpush	{d8}
 801c13a:	4e26      	ldr	r6, [pc, #152]	; (801c1d4 <asin+0xa0>)
 801c13c:	b08b      	sub	sp, #44	; 0x2c
 801c13e:	ec55 4b10 	vmov	r4, r5, d0
 801c142:	f000 f8ad 	bl	801c2a0 <__ieee754_asin>
 801c146:	f996 3000 	ldrsb.w	r3, [r6]
 801c14a:	eeb0 8a40 	vmov.f32	s16, s0
 801c14e:	eef0 8a60 	vmov.f32	s17, s1
 801c152:	3301      	adds	r3, #1
 801c154:	d036      	beq.n	801c1c4 <asin+0x90>
 801c156:	4622      	mov	r2, r4
 801c158:	462b      	mov	r3, r5
 801c15a:	4620      	mov	r0, r4
 801c15c:	4629      	mov	r1, r5
 801c15e:	f7e4 fcf5 	bl	8000b4c <__aeabi_dcmpun>
 801c162:	4607      	mov	r7, r0
 801c164:	bb70      	cbnz	r0, 801c1c4 <asin+0x90>
 801c166:	ec45 4b10 	vmov	d0, r4, r5
 801c16a:	f001 fa2d 	bl	801d5c8 <fabs>
 801c16e:	2200      	movs	r2, #0
 801c170:	4b19      	ldr	r3, [pc, #100]	; (801c1d8 <asin+0xa4>)
 801c172:	ec51 0b10 	vmov	r0, r1, d0
 801c176:	f7e4 fcdf 	bl	8000b38 <__aeabi_dcmpgt>
 801c17a:	b318      	cbz	r0, 801c1c4 <asin+0x90>
 801c17c:	2301      	movs	r3, #1
 801c17e:	9300      	str	r3, [sp, #0]
 801c180:	4816      	ldr	r0, [pc, #88]	; (801c1dc <asin+0xa8>)
 801c182:	4b17      	ldr	r3, [pc, #92]	; (801c1e0 <asin+0xac>)
 801c184:	9301      	str	r3, [sp, #4]
 801c186:	9708      	str	r7, [sp, #32]
 801c188:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c18c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c190:	f001 fa26 	bl	801d5e0 <nan>
 801c194:	f996 3000 	ldrsb.w	r3, [r6]
 801c198:	2b02      	cmp	r3, #2
 801c19a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801c19e:	d104      	bne.n	801c1aa <asin+0x76>
 801c1a0:	f001 fab8 	bl	801d714 <__errno>
 801c1a4:	2321      	movs	r3, #33	; 0x21
 801c1a6:	6003      	str	r3, [r0, #0]
 801c1a8:	e004      	b.n	801c1b4 <asin+0x80>
 801c1aa:	4668      	mov	r0, sp
 801c1ac:	f001 fa15 	bl	801d5da <matherr>
 801c1b0:	2800      	cmp	r0, #0
 801c1b2:	d0f5      	beq.n	801c1a0 <asin+0x6c>
 801c1b4:	9b08      	ldr	r3, [sp, #32]
 801c1b6:	b11b      	cbz	r3, 801c1c0 <asin+0x8c>
 801c1b8:	f001 faac 	bl	801d714 <__errno>
 801c1bc:	9b08      	ldr	r3, [sp, #32]
 801c1be:	6003      	str	r3, [r0, #0]
 801c1c0:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c1c4:	eeb0 0a48 	vmov.f32	s0, s16
 801c1c8:	eef0 0a68 	vmov.f32	s1, s17
 801c1cc:	b00b      	add	sp, #44	; 0x2c
 801c1ce:	ecbd 8b02 	vpop	{d8}
 801c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1d4:	200000dc 	.word	0x200000dc
 801c1d8:	3ff00000 	.word	0x3ff00000
 801c1dc:	08022b43 	.word	0x08022b43
 801c1e0:	080226ec 	.word	0x080226ec

0801c1e4 <atan2>:
 801c1e4:	f000 ba6c 	b.w	801c6c0 <__ieee754_atan2>

0801c1e8 <sqrt>:
 801c1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c1ec:	ed2d 8b02 	vpush	{d8}
 801c1f0:	b08b      	sub	sp, #44	; 0x2c
 801c1f2:	ec55 4b10 	vmov	r4, r5, d0
 801c1f6:	f000 fb41 	bl	801c87c <__ieee754_sqrt>
 801c1fa:	4b26      	ldr	r3, [pc, #152]	; (801c294 <sqrt+0xac>)
 801c1fc:	eeb0 8a40 	vmov.f32	s16, s0
 801c200:	eef0 8a60 	vmov.f32	s17, s1
 801c204:	f993 6000 	ldrsb.w	r6, [r3]
 801c208:	1c73      	adds	r3, r6, #1
 801c20a:	d02a      	beq.n	801c262 <sqrt+0x7a>
 801c20c:	4622      	mov	r2, r4
 801c20e:	462b      	mov	r3, r5
 801c210:	4620      	mov	r0, r4
 801c212:	4629      	mov	r1, r5
 801c214:	f7e4 fc9a 	bl	8000b4c <__aeabi_dcmpun>
 801c218:	4607      	mov	r7, r0
 801c21a:	bb10      	cbnz	r0, 801c262 <sqrt+0x7a>
 801c21c:	f04f 0800 	mov.w	r8, #0
 801c220:	f04f 0900 	mov.w	r9, #0
 801c224:	4642      	mov	r2, r8
 801c226:	464b      	mov	r3, r9
 801c228:	4620      	mov	r0, r4
 801c22a:	4629      	mov	r1, r5
 801c22c:	f7e4 fc66 	bl	8000afc <__aeabi_dcmplt>
 801c230:	b1b8      	cbz	r0, 801c262 <sqrt+0x7a>
 801c232:	2301      	movs	r3, #1
 801c234:	9300      	str	r3, [sp, #0]
 801c236:	4b18      	ldr	r3, [pc, #96]	; (801c298 <sqrt+0xb0>)
 801c238:	9301      	str	r3, [sp, #4]
 801c23a:	9708      	str	r7, [sp, #32]
 801c23c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c240:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c244:	b9b6      	cbnz	r6, 801c274 <sqrt+0x8c>
 801c246:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801c24a:	4668      	mov	r0, sp
 801c24c:	f001 f9c5 	bl	801d5da <matherr>
 801c250:	b1d0      	cbz	r0, 801c288 <sqrt+0xa0>
 801c252:	9b08      	ldr	r3, [sp, #32]
 801c254:	b11b      	cbz	r3, 801c25e <sqrt+0x76>
 801c256:	f001 fa5d 	bl	801d714 <__errno>
 801c25a:	9b08      	ldr	r3, [sp, #32]
 801c25c:	6003      	str	r3, [r0, #0]
 801c25e:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c262:	eeb0 0a48 	vmov.f32	s0, s16
 801c266:	eef0 0a68 	vmov.f32	s1, s17
 801c26a:	b00b      	add	sp, #44	; 0x2c
 801c26c:	ecbd 8b02 	vpop	{d8}
 801c270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c274:	4642      	mov	r2, r8
 801c276:	464b      	mov	r3, r9
 801c278:	4640      	mov	r0, r8
 801c27a:	4649      	mov	r1, r9
 801c27c:	f7e4 faf6 	bl	800086c <__aeabi_ddiv>
 801c280:	2e02      	cmp	r6, #2
 801c282:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c286:	d1e0      	bne.n	801c24a <sqrt+0x62>
 801c288:	f001 fa44 	bl	801d714 <__errno>
 801c28c:	2321      	movs	r3, #33	; 0x21
 801c28e:	6003      	str	r3, [r0, #0]
 801c290:	e7df      	b.n	801c252 <sqrt+0x6a>
 801c292:	bf00      	nop
 801c294:	200000dc 	.word	0x200000dc
 801c298:	080226f1 	.word	0x080226f1
 801c29c:	00000000 	.word	0x00000000

0801c2a0 <__ieee754_asin>:
 801c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a4:	ec55 4b10 	vmov	r4, r5, d0
 801c2a8:	4bcb      	ldr	r3, [pc, #812]	; (801c5d8 <__ieee754_asin+0x338>)
 801c2aa:	b087      	sub	sp, #28
 801c2ac:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801c2b0:	429f      	cmp	r7, r3
 801c2b2:	9501      	str	r5, [sp, #4]
 801c2b4:	dd31      	ble.n	801c31a <__ieee754_asin+0x7a>
 801c2b6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801c2ba:	ee10 3a10 	vmov	r3, s0
 801c2be:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801c2c2:	433b      	orrs	r3, r7
 801c2c4:	d117      	bne.n	801c2f6 <__ieee754_asin+0x56>
 801c2c6:	a3aa      	add	r3, pc, #680	; (adr r3, 801c570 <__ieee754_asin+0x2d0>)
 801c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2cc:	ee10 0a10 	vmov	r0, s0
 801c2d0:	4629      	mov	r1, r5
 801c2d2:	f7e4 f9a1 	bl	8000618 <__aeabi_dmul>
 801c2d6:	a3a8      	add	r3, pc, #672	; (adr r3, 801c578 <__ieee754_asin+0x2d8>)
 801c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2dc:	4606      	mov	r6, r0
 801c2de:	460f      	mov	r7, r1
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	4629      	mov	r1, r5
 801c2e4:	f7e4 f998 	bl	8000618 <__aeabi_dmul>
 801c2e8:	4602      	mov	r2, r0
 801c2ea:	460b      	mov	r3, r1
 801c2ec:	4630      	mov	r0, r6
 801c2ee:	4639      	mov	r1, r7
 801c2f0:	f7e3 ffdc 	bl	80002ac <__adddf3>
 801c2f4:	e00a      	b.n	801c30c <__ieee754_asin+0x6c>
 801c2f6:	ee10 2a10 	vmov	r2, s0
 801c2fa:	462b      	mov	r3, r5
 801c2fc:	4620      	mov	r0, r4
 801c2fe:	4629      	mov	r1, r5
 801c300:	f7e3 ffd2 	bl	80002a8 <__aeabi_dsub>
 801c304:	4602      	mov	r2, r0
 801c306:	460b      	mov	r3, r1
 801c308:	f7e4 fab0 	bl	800086c <__aeabi_ddiv>
 801c30c:	4604      	mov	r4, r0
 801c30e:	460d      	mov	r5, r1
 801c310:	ec45 4b10 	vmov	d0, r4, r5
 801c314:	b007      	add	sp, #28
 801c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c31a:	4bb0      	ldr	r3, [pc, #704]	; (801c5dc <__ieee754_asin+0x33c>)
 801c31c:	429f      	cmp	r7, r3
 801c31e:	dc11      	bgt.n	801c344 <__ieee754_asin+0xa4>
 801c320:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801c324:	f280 80ae 	bge.w	801c484 <__ieee754_asin+0x1e4>
 801c328:	a395      	add	r3, pc, #596	; (adr r3, 801c580 <__ieee754_asin+0x2e0>)
 801c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c32e:	ee10 0a10 	vmov	r0, s0
 801c332:	4629      	mov	r1, r5
 801c334:	f7e3 ffba 	bl	80002ac <__adddf3>
 801c338:	2200      	movs	r2, #0
 801c33a:	4ba9      	ldr	r3, [pc, #676]	; (801c5e0 <__ieee754_asin+0x340>)
 801c33c:	f7e4 fbfc 	bl	8000b38 <__aeabi_dcmpgt>
 801c340:	2800      	cmp	r0, #0
 801c342:	d1e5      	bne.n	801c310 <__ieee754_asin+0x70>
 801c344:	ec45 4b10 	vmov	d0, r4, r5
 801c348:	f001 f93e 	bl	801d5c8 <fabs>
 801c34c:	2000      	movs	r0, #0
 801c34e:	ec53 2b10 	vmov	r2, r3, d0
 801c352:	49a3      	ldr	r1, [pc, #652]	; (801c5e0 <__ieee754_asin+0x340>)
 801c354:	f7e3 ffa8 	bl	80002a8 <__aeabi_dsub>
 801c358:	2200      	movs	r2, #0
 801c35a:	4ba2      	ldr	r3, [pc, #648]	; (801c5e4 <__ieee754_asin+0x344>)
 801c35c:	f7e4 f95c 	bl	8000618 <__aeabi_dmul>
 801c360:	a389      	add	r3, pc, #548	; (adr r3, 801c588 <__ieee754_asin+0x2e8>)
 801c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c366:	4604      	mov	r4, r0
 801c368:	460d      	mov	r5, r1
 801c36a:	f7e4 f955 	bl	8000618 <__aeabi_dmul>
 801c36e:	a388      	add	r3, pc, #544	; (adr r3, 801c590 <__ieee754_asin+0x2f0>)
 801c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c374:	f7e3 ff9a 	bl	80002ac <__adddf3>
 801c378:	4622      	mov	r2, r4
 801c37a:	462b      	mov	r3, r5
 801c37c:	f7e4 f94c 	bl	8000618 <__aeabi_dmul>
 801c380:	a385      	add	r3, pc, #532	; (adr r3, 801c598 <__ieee754_asin+0x2f8>)
 801c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c386:	f7e3 ff8f 	bl	80002a8 <__aeabi_dsub>
 801c38a:	4622      	mov	r2, r4
 801c38c:	462b      	mov	r3, r5
 801c38e:	f7e4 f943 	bl	8000618 <__aeabi_dmul>
 801c392:	a383      	add	r3, pc, #524	; (adr r3, 801c5a0 <__ieee754_asin+0x300>)
 801c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c398:	f7e3 ff88 	bl	80002ac <__adddf3>
 801c39c:	4622      	mov	r2, r4
 801c39e:	462b      	mov	r3, r5
 801c3a0:	f7e4 f93a 	bl	8000618 <__aeabi_dmul>
 801c3a4:	a380      	add	r3, pc, #512	; (adr r3, 801c5a8 <__ieee754_asin+0x308>)
 801c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3aa:	f7e3 ff7d 	bl	80002a8 <__aeabi_dsub>
 801c3ae:	4622      	mov	r2, r4
 801c3b0:	462b      	mov	r3, r5
 801c3b2:	f7e4 f931 	bl	8000618 <__aeabi_dmul>
 801c3b6:	a37e      	add	r3, pc, #504	; (adr r3, 801c5b0 <__ieee754_asin+0x310>)
 801c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3bc:	f7e3 ff76 	bl	80002ac <__adddf3>
 801c3c0:	4622      	mov	r2, r4
 801c3c2:	462b      	mov	r3, r5
 801c3c4:	f7e4 f928 	bl	8000618 <__aeabi_dmul>
 801c3c8:	a37b      	add	r3, pc, #492	; (adr r3, 801c5b8 <__ieee754_asin+0x318>)
 801c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3ce:	4680      	mov	r8, r0
 801c3d0:	4689      	mov	r9, r1
 801c3d2:	4620      	mov	r0, r4
 801c3d4:	4629      	mov	r1, r5
 801c3d6:	f7e4 f91f 	bl	8000618 <__aeabi_dmul>
 801c3da:	a379      	add	r3, pc, #484	; (adr r3, 801c5c0 <__ieee754_asin+0x320>)
 801c3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3e0:	f7e3 ff62 	bl	80002a8 <__aeabi_dsub>
 801c3e4:	4622      	mov	r2, r4
 801c3e6:	462b      	mov	r3, r5
 801c3e8:	f7e4 f916 	bl	8000618 <__aeabi_dmul>
 801c3ec:	a376      	add	r3, pc, #472	; (adr r3, 801c5c8 <__ieee754_asin+0x328>)
 801c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f2:	f7e3 ff5b 	bl	80002ac <__adddf3>
 801c3f6:	4622      	mov	r2, r4
 801c3f8:	462b      	mov	r3, r5
 801c3fa:	f7e4 f90d 	bl	8000618 <__aeabi_dmul>
 801c3fe:	a374      	add	r3, pc, #464	; (adr r3, 801c5d0 <__ieee754_asin+0x330>)
 801c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c404:	f7e3 ff50 	bl	80002a8 <__aeabi_dsub>
 801c408:	4622      	mov	r2, r4
 801c40a:	462b      	mov	r3, r5
 801c40c:	f7e4 f904 	bl	8000618 <__aeabi_dmul>
 801c410:	4b73      	ldr	r3, [pc, #460]	; (801c5e0 <__ieee754_asin+0x340>)
 801c412:	2200      	movs	r2, #0
 801c414:	f7e3 ff4a 	bl	80002ac <__adddf3>
 801c418:	ec45 4b10 	vmov	d0, r4, r5
 801c41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c420:	f000 fa2c 	bl	801c87c <__ieee754_sqrt>
 801c424:	4b70      	ldr	r3, [pc, #448]	; (801c5e8 <__ieee754_asin+0x348>)
 801c426:	429f      	cmp	r7, r3
 801c428:	ec5b ab10 	vmov	sl, fp, d0
 801c42c:	f340 80de 	ble.w	801c5ec <__ieee754_asin+0x34c>
 801c430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c434:	4640      	mov	r0, r8
 801c436:	4649      	mov	r1, r9
 801c438:	f7e4 fa18 	bl	800086c <__aeabi_ddiv>
 801c43c:	4652      	mov	r2, sl
 801c43e:	465b      	mov	r3, fp
 801c440:	f7e4 f8ea 	bl	8000618 <__aeabi_dmul>
 801c444:	4652      	mov	r2, sl
 801c446:	465b      	mov	r3, fp
 801c448:	f7e3 ff30 	bl	80002ac <__adddf3>
 801c44c:	4602      	mov	r2, r0
 801c44e:	460b      	mov	r3, r1
 801c450:	f7e3 ff2c 	bl	80002ac <__adddf3>
 801c454:	a348      	add	r3, pc, #288	; (adr r3, 801c578 <__ieee754_asin+0x2d8>)
 801c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c45a:	f7e3 ff25 	bl	80002a8 <__aeabi_dsub>
 801c45e:	4602      	mov	r2, r0
 801c460:	460b      	mov	r3, r1
 801c462:	a143      	add	r1, pc, #268	; (adr r1, 801c570 <__ieee754_asin+0x2d0>)
 801c464:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c468:	f7e3 ff1e 	bl	80002a8 <__aeabi_dsub>
 801c46c:	9b01      	ldr	r3, [sp, #4]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	bfdc      	itt	le
 801c472:	4602      	movle	r2, r0
 801c474:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801c478:	4604      	mov	r4, r0
 801c47a:	460d      	mov	r5, r1
 801c47c:	bfdc      	itt	le
 801c47e:	4614      	movle	r4, r2
 801c480:	461d      	movle	r5, r3
 801c482:	e745      	b.n	801c310 <__ieee754_asin+0x70>
 801c484:	ee10 2a10 	vmov	r2, s0
 801c488:	ee10 0a10 	vmov	r0, s0
 801c48c:	462b      	mov	r3, r5
 801c48e:	4629      	mov	r1, r5
 801c490:	f7e4 f8c2 	bl	8000618 <__aeabi_dmul>
 801c494:	a33c      	add	r3, pc, #240	; (adr r3, 801c588 <__ieee754_asin+0x2e8>)
 801c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c49a:	4606      	mov	r6, r0
 801c49c:	460f      	mov	r7, r1
 801c49e:	f7e4 f8bb 	bl	8000618 <__aeabi_dmul>
 801c4a2:	a33b      	add	r3, pc, #236	; (adr r3, 801c590 <__ieee754_asin+0x2f0>)
 801c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4a8:	f7e3 ff00 	bl	80002ac <__adddf3>
 801c4ac:	4632      	mov	r2, r6
 801c4ae:	463b      	mov	r3, r7
 801c4b0:	f7e4 f8b2 	bl	8000618 <__aeabi_dmul>
 801c4b4:	a338      	add	r3, pc, #224	; (adr r3, 801c598 <__ieee754_asin+0x2f8>)
 801c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4ba:	f7e3 fef5 	bl	80002a8 <__aeabi_dsub>
 801c4be:	4632      	mov	r2, r6
 801c4c0:	463b      	mov	r3, r7
 801c4c2:	f7e4 f8a9 	bl	8000618 <__aeabi_dmul>
 801c4c6:	a336      	add	r3, pc, #216	; (adr r3, 801c5a0 <__ieee754_asin+0x300>)
 801c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4cc:	f7e3 feee 	bl	80002ac <__adddf3>
 801c4d0:	4632      	mov	r2, r6
 801c4d2:	463b      	mov	r3, r7
 801c4d4:	f7e4 f8a0 	bl	8000618 <__aeabi_dmul>
 801c4d8:	a333      	add	r3, pc, #204	; (adr r3, 801c5a8 <__ieee754_asin+0x308>)
 801c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4de:	f7e3 fee3 	bl	80002a8 <__aeabi_dsub>
 801c4e2:	4632      	mov	r2, r6
 801c4e4:	463b      	mov	r3, r7
 801c4e6:	f7e4 f897 	bl	8000618 <__aeabi_dmul>
 801c4ea:	a331      	add	r3, pc, #196	; (adr r3, 801c5b0 <__ieee754_asin+0x310>)
 801c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f0:	f7e3 fedc 	bl	80002ac <__adddf3>
 801c4f4:	4632      	mov	r2, r6
 801c4f6:	463b      	mov	r3, r7
 801c4f8:	f7e4 f88e 	bl	8000618 <__aeabi_dmul>
 801c4fc:	a32e      	add	r3, pc, #184	; (adr r3, 801c5b8 <__ieee754_asin+0x318>)
 801c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c502:	4680      	mov	r8, r0
 801c504:	4689      	mov	r9, r1
 801c506:	4630      	mov	r0, r6
 801c508:	4639      	mov	r1, r7
 801c50a:	f7e4 f885 	bl	8000618 <__aeabi_dmul>
 801c50e:	a32c      	add	r3, pc, #176	; (adr r3, 801c5c0 <__ieee754_asin+0x320>)
 801c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c514:	f7e3 fec8 	bl	80002a8 <__aeabi_dsub>
 801c518:	4632      	mov	r2, r6
 801c51a:	463b      	mov	r3, r7
 801c51c:	f7e4 f87c 	bl	8000618 <__aeabi_dmul>
 801c520:	a329      	add	r3, pc, #164	; (adr r3, 801c5c8 <__ieee754_asin+0x328>)
 801c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c526:	f7e3 fec1 	bl	80002ac <__adddf3>
 801c52a:	4632      	mov	r2, r6
 801c52c:	463b      	mov	r3, r7
 801c52e:	f7e4 f873 	bl	8000618 <__aeabi_dmul>
 801c532:	a327      	add	r3, pc, #156	; (adr r3, 801c5d0 <__ieee754_asin+0x330>)
 801c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c538:	f7e3 feb6 	bl	80002a8 <__aeabi_dsub>
 801c53c:	4632      	mov	r2, r6
 801c53e:	463b      	mov	r3, r7
 801c540:	f7e4 f86a 	bl	8000618 <__aeabi_dmul>
 801c544:	2200      	movs	r2, #0
 801c546:	4b26      	ldr	r3, [pc, #152]	; (801c5e0 <__ieee754_asin+0x340>)
 801c548:	f7e3 feb0 	bl	80002ac <__adddf3>
 801c54c:	4602      	mov	r2, r0
 801c54e:	460b      	mov	r3, r1
 801c550:	4640      	mov	r0, r8
 801c552:	4649      	mov	r1, r9
 801c554:	f7e4 f98a 	bl	800086c <__aeabi_ddiv>
 801c558:	4622      	mov	r2, r4
 801c55a:	462b      	mov	r3, r5
 801c55c:	f7e4 f85c 	bl	8000618 <__aeabi_dmul>
 801c560:	4602      	mov	r2, r0
 801c562:	460b      	mov	r3, r1
 801c564:	4620      	mov	r0, r4
 801c566:	4629      	mov	r1, r5
 801c568:	e6c2      	b.n	801c2f0 <__ieee754_asin+0x50>
 801c56a:	bf00      	nop
 801c56c:	f3af 8000 	nop.w
 801c570:	54442d18 	.word	0x54442d18
 801c574:	3ff921fb 	.word	0x3ff921fb
 801c578:	33145c07 	.word	0x33145c07
 801c57c:	3c91a626 	.word	0x3c91a626
 801c580:	8800759c 	.word	0x8800759c
 801c584:	7e37e43c 	.word	0x7e37e43c
 801c588:	0dfdf709 	.word	0x0dfdf709
 801c58c:	3f023de1 	.word	0x3f023de1
 801c590:	7501b288 	.word	0x7501b288
 801c594:	3f49efe0 	.word	0x3f49efe0
 801c598:	b5688f3b 	.word	0xb5688f3b
 801c59c:	3fa48228 	.word	0x3fa48228
 801c5a0:	0e884455 	.word	0x0e884455
 801c5a4:	3fc9c155 	.word	0x3fc9c155
 801c5a8:	03eb6f7d 	.word	0x03eb6f7d
 801c5ac:	3fd4d612 	.word	0x3fd4d612
 801c5b0:	55555555 	.word	0x55555555
 801c5b4:	3fc55555 	.word	0x3fc55555
 801c5b8:	b12e9282 	.word	0xb12e9282
 801c5bc:	3fb3b8c5 	.word	0x3fb3b8c5
 801c5c0:	1b8d0159 	.word	0x1b8d0159
 801c5c4:	3fe6066c 	.word	0x3fe6066c
 801c5c8:	9c598ac8 	.word	0x9c598ac8
 801c5cc:	40002ae5 	.word	0x40002ae5
 801c5d0:	1c8a2d4b 	.word	0x1c8a2d4b
 801c5d4:	40033a27 	.word	0x40033a27
 801c5d8:	3fefffff 	.word	0x3fefffff
 801c5dc:	3fdfffff 	.word	0x3fdfffff
 801c5e0:	3ff00000 	.word	0x3ff00000
 801c5e4:	3fe00000 	.word	0x3fe00000
 801c5e8:	3fef3332 	.word	0x3fef3332
 801c5ec:	ee10 2a10 	vmov	r2, s0
 801c5f0:	ee10 0a10 	vmov	r0, s0
 801c5f4:	465b      	mov	r3, fp
 801c5f6:	4659      	mov	r1, fp
 801c5f8:	f7e3 fe58 	bl	80002ac <__adddf3>
 801c5fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c604:	4640      	mov	r0, r8
 801c606:	4649      	mov	r1, r9
 801c608:	f7e4 f930 	bl	800086c <__aeabi_ddiv>
 801c60c:	4602      	mov	r2, r0
 801c60e:	460b      	mov	r3, r1
 801c610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c614:	f7e4 f800 	bl	8000618 <__aeabi_dmul>
 801c618:	2600      	movs	r6, #0
 801c61a:	4680      	mov	r8, r0
 801c61c:	4689      	mov	r9, r1
 801c61e:	4632      	mov	r2, r6
 801c620:	465b      	mov	r3, fp
 801c622:	4630      	mov	r0, r6
 801c624:	4659      	mov	r1, fp
 801c626:	f7e3 fff7 	bl	8000618 <__aeabi_dmul>
 801c62a:	4602      	mov	r2, r0
 801c62c:	460b      	mov	r3, r1
 801c62e:	4620      	mov	r0, r4
 801c630:	4629      	mov	r1, r5
 801c632:	f7e3 fe39 	bl	80002a8 <__aeabi_dsub>
 801c636:	4632      	mov	r2, r6
 801c638:	4604      	mov	r4, r0
 801c63a:	460d      	mov	r5, r1
 801c63c:	465b      	mov	r3, fp
 801c63e:	4650      	mov	r0, sl
 801c640:	4659      	mov	r1, fp
 801c642:	f7e3 fe33 	bl	80002ac <__adddf3>
 801c646:	4602      	mov	r2, r0
 801c648:	460b      	mov	r3, r1
 801c64a:	4620      	mov	r0, r4
 801c64c:	4629      	mov	r1, r5
 801c64e:	f7e4 f90d 	bl	800086c <__aeabi_ddiv>
 801c652:	4602      	mov	r2, r0
 801c654:	460b      	mov	r3, r1
 801c656:	f7e3 fe29 	bl	80002ac <__adddf3>
 801c65a:	4602      	mov	r2, r0
 801c65c:	460b      	mov	r3, r1
 801c65e:	a114      	add	r1, pc, #80	; (adr r1, 801c6b0 <__ieee754_asin+0x410>)
 801c660:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c664:	f7e3 fe20 	bl	80002a8 <__aeabi_dsub>
 801c668:	4602      	mov	r2, r0
 801c66a:	460b      	mov	r3, r1
 801c66c:	4640      	mov	r0, r8
 801c66e:	4649      	mov	r1, r9
 801c670:	f7e3 fe1a 	bl	80002a8 <__aeabi_dsub>
 801c674:	465f      	mov	r7, fp
 801c676:	4604      	mov	r4, r0
 801c678:	460d      	mov	r5, r1
 801c67a:	4632      	mov	r2, r6
 801c67c:	465b      	mov	r3, fp
 801c67e:	4630      	mov	r0, r6
 801c680:	4639      	mov	r1, r7
 801c682:	f7e3 fe13 	bl	80002ac <__adddf3>
 801c686:	4602      	mov	r2, r0
 801c688:	460b      	mov	r3, r1
 801c68a:	a10b      	add	r1, pc, #44	; (adr r1, 801c6b8 <__ieee754_asin+0x418>)
 801c68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c690:	f7e3 fe0a 	bl	80002a8 <__aeabi_dsub>
 801c694:	4602      	mov	r2, r0
 801c696:	460b      	mov	r3, r1
 801c698:	4620      	mov	r0, r4
 801c69a:	4629      	mov	r1, r5
 801c69c:	f7e3 fe04 	bl	80002a8 <__aeabi_dsub>
 801c6a0:	4602      	mov	r2, r0
 801c6a2:	460b      	mov	r3, r1
 801c6a4:	a104      	add	r1, pc, #16	; (adr r1, 801c6b8 <__ieee754_asin+0x418>)
 801c6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c6aa:	e6dd      	b.n	801c468 <__ieee754_asin+0x1c8>
 801c6ac:	f3af 8000 	nop.w
 801c6b0:	33145c07 	.word	0x33145c07
 801c6b4:	3c91a626 	.word	0x3c91a626
 801c6b8:	54442d18 	.word	0x54442d18
 801c6bc:	3fe921fb 	.word	0x3fe921fb

0801c6c0 <__ieee754_atan2>:
 801c6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6c4:	ec57 6b11 	vmov	r6, r7, d1
 801c6c8:	4273      	negs	r3, r6
 801c6ca:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801c6ce:	4333      	orrs	r3, r6
 801c6d0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801c878 <__ieee754_atan2+0x1b8>
 801c6d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801c6d8:	4573      	cmp	r3, lr
 801c6da:	ec51 0b10 	vmov	r0, r1, d0
 801c6de:	ee11 8a10 	vmov	r8, s2
 801c6e2:	d80a      	bhi.n	801c6fa <__ieee754_atan2+0x3a>
 801c6e4:	4244      	negs	r4, r0
 801c6e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c6ea:	4304      	orrs	r4, r0
 801c6ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801c6f0:	4574      	cmp	r4, lr
 801c6f2:	468c      	mov	ip, r1
 801c6f4:	ee10 9a10 	vmov	r9, s0
 801c6f8:	d907      	bls.n	801c70a <__ieee754_atan2+0x4a>
 801c6fa:	4632      	mov	r2, r6
 801c6fc:	463b      	mov	r3, r7
 801c6fe:	f7e3 fdd5 	bl	80002ac <__adddf3>
 801c702:	ec41 0b10 	vmov	d0, r0, r1
 801c706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c70a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801c70e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c712:	4334      	orrs	r4, r6
 801c714:	d103      	bne.n	801c71e <__ieee754_atan2+0x5e>
 801c716:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c71a:	f000 bdb5 	b.w	801d288 <atan>
 801c71e:	17bc      	asrs	r4, r7, #30
 801c720:	f004 0402 	and.w	r4, r4, #2
 801c724:	ea53 0909 	orrs.w	r9, r3, r9
 801c728:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801c72c:	d107      	bne.n	801c73e <__ieee754_atan2+0x7e>
 801c72e:	2c02      	cmp	r4, #2
 801c730:	d073      	beq.n	801c81a <__ieee754_atan2+0x15a>
 801c732:	2c03      	cmp	r4, #3
 801c734:	d1e5      	bne.n	801c702 <__ieee754_atan2+0x42>
 801c736:	a13e      	add	r1, pc, #248	; (adr r1, 801c830 <__ieee754_atan2+0x170>)
 801c738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c73c:	e7e1      	b.n	801c702 <__ieee754_atan2+0x42>
 801c73e:	ea52 0808 	orrs.w	r8, r2, r8
 801c742:	d106      	bne.n	801c752 <__ieee754_atan2+0x92>
 801c744:	f1bc 0f00 	cmp.w	ip, #0
 801c748:	da6b      	bge.n	801c822 <__ieee754_atan2+0x162>
 801c74a:	a13b      	add	r1, pc, #236	; (adr r1, 801c838 <__ieee754_atan2+0x178>)
 801c74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c750:	e7d7      	b.n	801c702 <__ieee754_atan2+0x42>
 801c752:	4572      	cmp	r2, lr
 801c754:	d120      	bne.n	801c798 <__ieee754_atan2+0xd8>
 801c756:	4293      	cmp	r3, r2
 801c758:	d111      	bne.n	801c77e <__ieee754_atan2+0xbe>
 801c75a:	2c02      	cmp	r4, #2
 801c75c:	d007      	beq.n	801c76e <__ieee754_atan2+0xae>
 801c75e:	2c03      	cmp	r4, #3
 801c760:	d009      	beq.n	801c776 <__ieee754_atan2+0xb6>
 801c762:	2c01      	cmp	r4, #1
 801c764:	d155      	bne.n	801c812 <__ieee754_atan2+0x152>
 801c766:	a136      	add	r1, pc, #216	; (adr r1, 801c840 <__ieee754_atan2+0x180>)
 801c768:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c76c:	e7c9      	b.n	801c702 <__ieee754_atan2+0x42>
 801c76e:	a136      	add	r1, pc, #216	; (adr r1, 801c848 <__ieee754_atan2+0x188>)
 801c770:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c774:	e7c5      	b.n	801c702 <__ieee754_atan2+0x42>
 801c776:	a136      	add	r1, pc, #216	; (adr r1, 801c850 <__ieee754_atan2+0x190>)
 801c778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c77c:	e7c1      	b.n	801c702 <__ieee754_atan2+0x42>
 801c77e:	2c02      	cmp	r4, #2
 801c780:	d04b      	beq.n	801c81a <__ieee754_atan2+0x15a>
 801c782:	2c03      	cmp	r4, #3
 801c784:	d0d7      	beq.n	801c736 <__ieee754_atan2+0x76>
 801c786:	2c01      	cmp	r4, #1
 801c788:	f04f 0000 	mov.w	r0, #0
 801c78c:	d102      	bne.n	801c794 <__ieee754_atan2+0xd4>
 801c78e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c792:	e7b6      	b.n	801c702 <__ieee754_atan2+0x42>
 801c794:	2100      	movs	r1, #0
 801c796:	e7b4      	b.n	801c702 <__ieee754_atan2+0x42>
 801c798:	4573      	cmp	r3, lr
 801c79a:	d0d3      	beq.n	801c744 <__ieee754_atan2+0x84>
 801c79c:	1a9b      	subs	r3, r3, r2
 801c79e:	151b      	asrs	r3, r3, #20
 801c7a0:	2b3c      	cmp	r3, #60	; 0x3c
 801c7a2:	dc1e      	bgt.n	801c7e2 <__ieee754_atan2+0x122>
 801c7a4:	2f00      	cmp	r7, #0
 801c7a6:	da01      	bge.n	801c7ac <__ieee754_atan2+0xec>
 801c7a8:	333c      	adds	r3, #60	; 0x3c
 801c7aa:	db1e      	blt.n	801c7ea <__ieee754_atan2+0x12a>
 801c7ac:	4632      	mov	r2, r6
 801c7ae:	463b      	mov	r3, r7
 801c7b0:	f7e4 f85c 	bl	800086c <__aeabi_ddiv>
 801c7b4:	ec41 0b10 	vmov	d0, r0, r1
 801c7b8:	f000 ff06 	bl	801d5c8 <fabs>
 801c7bc:	f000 fd64 	bl	801d288 <atan>
 801c7c0:	ec51 0b10 	vmov	r0, r1, d0
 801c7c4:	2c01      	cmp	r4, #1
 801c7c6:	d013      	beq.n	801c7f0 <__ieee754_atan2+0x130>
 801c7c8:	2c02      	cmp	r4, #2
 801c7ca:	d015      	beq.n	801c7f8 <__ieee754_atan2+0x138>
 801c7cc:	2c00      	cmp	r4, #0
 801c7ce:	d098      	beq.n	801c702 <__ieee754_atan2+0x42>
 801c7d0:	a321      	add	r3, pc, #132	; (adr r3, 801c858 <__ieee754_atan2+0x198>)
 801c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d6:	f7e3 fd67 	bl	80002a8 <__aeabi_dsub>
 801c7da:	a321      	add	r3, pc, #132	; (adr r3, 801c860 <__ieee754_atan2+0x1a0>)
 801c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7e0:	e014      	b.n	801c80c <__ieee754_atan2+0x14c>
 801c7e2:	a121      	add	r1, pc, #132	; (adr r1, 801c868 <__ieee754_atan2+0x1a8>)
 801c7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c7e8:	e7ec      	b.n	801c7c4 <__ieee754_atan2+0x104>
 801c7ea:	2000      	movs	r0, #0
 801c7ec:	2100      	movs	r1, #0
 801c7ee:	e7e9      	b.n	801c7c4 <__ieee754_atan2+0x104>
 801c7f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c7f4:	4619      	mov	r1, r3
 801c7f6:	e784      	b.n	801c702 <__ieee754_atan2+0x42>
 801c7f8:	a317      	add	r3, pc, #92	; (adr r3, 801c858 <__ieee754_atan2+0x198>)
 801c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7fe:	f7e3 fd53 	bl	80002a8 <__aeabi_dsub>
 801c802:	4602      	mov	r2, r0
 801c804:	460b      	mov	r3, r1
 801c806:	a116      	add	r1, pc, #88	; (adr r1, 801c860 <__ieee754_atan2+0x1a0>)
 801c808:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c80c:	f7e3 fd4c 	bl	80002a8 <__aeabi_dsub>
 801c810:	e777      	b.n	801c702 <__ieee754_atan2+0x42>
 801c812:	a117      	add	r1, pc, #92	; (adr r1, 801c870 <__ieee754_atan2+0x1b0>)
 801c814:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c818:	e773      	b.n	801c702 <__ieee754_atan2+0x42>
 801c81a:	a111      	add	r1, pc, #68	; (adr r1, 801c860 <__ieee754_atan2+0x1a0>)
 801c81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c820:	e76f      	b.n	801c702 <__ieee754_atan2+0x42>
 801c822:	a111      	add	r1, pc, #68	; (adr r1, 801c868 <__ieee754_atan2+0x1a8>)
 801c824:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c828:	e76b      	b.n	801c702 <__ieee754_atan2+0x42>
 801c82a:	bf00      	nop
 801c82c:	f3af 8000 	nop.w
 801c830:	54442d18 	.word	0x54442d18
 801c834:	c00921fb 	.word	0xc00921fb
 801c838:	54442d18 	.word	0x54442d18
 801c83c:	bff921fb 	.word	0xbff921fb
 801c840:	54442d18 	.word	0x54442d18
 801c844:	bfe921fb 	.word	0xbfe921fb
 801c848:	7f3321d2 	.word	0x7f3321d2
 801c84c:	4002d97c 	.word	0x4002d97c
 801c850:	7f3321d2 	.word	0x7f3321d2
 801c854:	c002d97c 	.word	0xc002d97c
 801c858:	33145c07 	.word	0x33145c07
 801c85c:	3ca1a626 	.word	0x3ca1a626
 801c860:	54442d18 	.word	0x54442d18
 801c864:	400921fb 	.word	0x400921fb
 801c868:	54442d18 	.word	0x54442d18
 801c86c:	3ff921fb 	.word	0x3ff921fb
 801c870:	54442d18 	.word	0x54442d18
 801c874:	3fe921fb 	.word	0x3fe921fb
 801c878:	7ff00000 	.word	0x7ff00000

0801c87c <__ieee754_sqrt>:
 801c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c880:	4955      	ldr	r1, [pc, #340]	; (801c9d8 <__ieee754_sqrt+0x15c>)
 801c882:	ec55 4b10 	vmov	r4, r5, d0
 801c886:	43a9      	bics	r1, r5
 801c888:	462b      	mov	r3, r5
 801c88a:	462a      	mov	r2, r5
 801c88c:	d112      	bne.n	801c8b4 <__ieee754_sqrt+0x38>
 801c88e:	ee10 2a10 	vmov	r2, s0
 801c892:	ee10 0a10 	vmov	r0, s0
 801c896:	4629      	mov	r1, r5
 801c898:	f7e3 febe 	bl	8000618 <__aeabi_dmul>
 801c89c:	4602      	mov	r2, r0
 801c89e:	460b      	mov	r3, r1
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	4629      	mov	r1, r5
 801c8a4:	f7e3 fd02 	bl	80002ac <__adddf3>
 801c8a8:	4604      	mov	r4, r0
 801c8aa:	460d      	mov	r5, r1
 801c8ac:	ec45 4b10 	vmov	d0, r4, r5
 801c8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8b4:	2d00      	cmp	r5, #0
 801c8b6:	ee10 0a10 	vmov	r0, s0
 801c8ba:	4621      	mov	r1, r4
 801c8bc:	dc0f      	bgt.n	801c8de <__ieee754_sqrt+0x62>
 801c8be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c8c2:	4330      	orrs	r0, r6
 801c8c4:	d0f2      	beq.n	801c8ac <__ieee754_sqrt+0x30>
 801c8c6:	b155      	cbz	r5, 801c8de <__ieee754_sqrt+0x62>
 801c8c8:	ee10 2a10 	vmov	r2, s0
 801c8cc:	4620      	mov	r0, r4
 801c8ce:	4629      	mov	r1, r5
 801c8d0:	f7e3 fcea 	bl	80002a8 <__aeabi_dsub>
 801c8d4:	4602      	mov	r2, r0
 801c8d6:	460b      	mov	r3, r1
 801c8d8:	f7e3 ffc8 	bl	800086c <__aeabi_ddiv>
 801c8dc:	e7e4      	b.n	801c8a8 <__ieee754_sqrt+0x2c>
 801c8de:	151b      	asrs	r3, r3, #20
 801c8e0:	d073      	beq.n	801c9ca <__ieee754_sqrt+0x14e>
 801c8e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c8e6:	07dd      	lsls	r5, r3, #31
 801c8e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c8ec:	bf48      	it	mi
 801c8ee:	0fc8      	lsrmi	r0, r1, #31
 801c8f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c8f4:	bf44      	itt	mi
 801c8f6:	0049      	lslmi	r1, r1, #1
 801c8f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c8fc:	2500      	movs	r5, #0
 801c8fe:	1058      	asrs	r0, r3, #1
 801c900:	0fcb      	lsrs	r3, r1, #31
 801c902:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c906:	0049      	lsls	r1, r1, #1
 801c908:	2316      	movs	r3, #22
 801c90a:	462c      	mov	r4, r5
 801c90c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c910:	19a7      	adds	r7, r4, r6
 801c912:	4297      	cmp	r7, r2
 801c914:	bfde      	ittt	le
 801c916:	19bc      	addle	r4, r7, r6
 801c918:	1bd2      	suble	r2, r2, r7
 801c91a:	19ad      	addle	r5, r5, r6
 801c91c:	0fcf      	lsrs	r7, r1, #31
 801c91e:	3b01      	subs	r3, #1
 801c920:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c924:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c928:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c92c:	d1f0      	bne.n	801c910 <__ieee754_sqrt+0x94>
 801c92e:	f04f 0c20 	mov.w	ip, #32
 801c932:	469e      	mov	lr, r3
 801c934:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c938:	42a2      	cmp	r2, r4
 801c93a:	eb06 070e 	add.w	r7, r6, lr
 801c93e:	dc02      	bgt.n	801c946 <__ieee754_sqrt+0xca>
 801c940:	d112      	bne.n	801c968 <__ieee754_sqrt+0xec>
 801c942:	428f      	cmp	r7, r1
 801c944:	d810      	bhi.n	801c968 <__ieee754_sqrt+0xec>
 801c946:	2f00      	cmp	r7, #0
 801c948:	eb07 0e06 	add.w	lr, r7, r6
 801c94c:	da42      	bge.n	801c9d4 <__ieee754_sqrt+0x158>
 801c94e:	f1be 0f00 	cmp.w	lr, #0
 801c952:	db3f      	blt.n	801c9d4 <__ieee754_sqrt+0x158>
 801c954:	f104 0801 	add.w	r8, r4, #1
 801c958:	1b12      	subs	r2, r2, r4
 801c95a:	428f      	cmp	r7, r1
 801c95c:	bf88      	it	hi
 801c95e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c962:	1bc9      	subs	r1, r1, r7
 801c964:	4433      	add	r3, r6
 801c966:	4644      	mov	r4, r8
 801c968:	0052      	lsls	r2, r2, #1
 801c96a:	f1bc 0c01 	subs.w	ip, ip, #1
 801c96e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c972:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c976:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c97a:	d1dd      	bne.n	801c938 <__ieee754_sqrt+0xbc>
 801c97c:	430a      	orrs	r2, r1
 801c97e:	d006      	beq.n	801c98e <__ieee754_sqrt+0x112>
 801c980:	1c5c      	adds	r4, r3, #1
 801c982:	bf13      	iteet	ne
 801c984:	3301      	addne	r3, #1
 801c986:	3501      	addeq	r5, #1
 801c988:	4663      	moveq	r3, ip
 801c98a:	f023 0301 	bicne.w	r3, r3, #1
 801c98e:	106a      	asrs	r2, r5, #1
 801c990:	085b      	lsrs	r3, r3, #1
 801c992:	07e9      	lsls	r1, r5, #31
 801c994:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c998:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c99c:	bf48      	it	mi
 801c99e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c9a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c9a6:	461c      	mov	r4, r3
 801c9a8:	e780      	b.n	801c8ac <__ieee754_sqrt+0x30>
 801c9aa:	0aca      	lsrs	r2, r1, #11
 801c9ac:	3815      	subs	r0, #21
 801c9ae:	0549      	lsls	r1, r1, #21
 801c9b0:	2a00      	cmp	r2, #0
 801c9b2:	d0fa      	beq.n	801c9aa <__ieee754_sqrt+0x12e>
 801c9b4:	02d6      	lsls	r6, r2, #11
 801c9b6:	d50a      	bpl.n	801c9ce <__ieee754_sqrt+0x152>
 801c9b8:	f1c3 0420 	rsb	r4, r3, #32
 801c9bc:	fa21 f404 	lsr.w	r4, r1, r4
 801c9c0:	1e5d      	subs	r5, r3, #1
 801c9c2:	4099      	lsls	r1, r3
 801c9c4:	4322      	orrs	r2, r4
 801c9c6:	1b43      	subs	r3, r0, r5
 801c9c8:	e78b      	b.n	801c8e2 <__ieee754_sqrt+0x66>
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	e7f0      	b.n	801c9b0 <__ieee754_sqrt+0x134>
 801c9ce:	0052      	lsls	r2, r2, #1
 801c9d0:	3301      	adds	r3, #1
 801c9d2:	e7ef      	b.n	801c9b4 <__ieee754_sqrt+0x138>
 801c9d4:	46a0      	mov	r8, r4
 801c9d6:	e7bf      	b.n	801c958 <__ieee754_sqrt+0xdc>
 801c9d8:	7ff00000 	.word	0x7ff00000

0801c9dc <__ieee754_rem_pio2f>:
 801c9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9de:	ee10 6a10 	vmov	r6, s0
 801c9e2:	4b86      	ldr	r3, [pc, #536]	; (801cbfc <__ieee754_rem_pio2f+0x220>)
 801c9e4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 801c9e8:	429c      	cmp	r4, r3
 801c9ea:	b087      	sub	sp, #28
 801c9ec:	4605      	mov	r5, r0
 801c9ee:	dc05      	bgt.n	801c9fc <__ieee754_rem_pio2f+0x20>
 801c9f0:	2300      	movs	r3, #0
 801c9f2:	ed85 0a00 	vstr	s0, [r5]
 801c9f6:	6043      	str	r3, [r0, #4]
 801c9f8:	2000      	movs	r0, #0
 801c9fa:	e020      	b.n	801ca3e <__ieee754_rem_pio2f+0x62>
 801c9fc:	4b80      	ldr	r3, [pc, #512]	; (801cc00 <__ieee754_rem_pio2f+0x224>)
 801c9fe:	429c      	cmp	r4, r3
 801ca00:	dc38      	bgt.n	801ca74 <__ieee754_rem_pio2f+0x98>
 801ca02:	2e00      	cmp	r6, #0
 801ca04:	f024 040f 	bic.w	r4, r4, #15
 801ca08:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 801cc04 <__ieee754_rem_pio2f+0x228>
 801ca0c:	4b7e      	ldr	r3, [pc, #504]	; (801cc08 <__ieee754_rem_pio2f+0x22c>)
 801ca0e:	dd18      	ble.n	801ca42 <__ieee754_rem_pio2f+0x66>
 801ca10:	429c      	cmp	r4, r3
 801ca12:	ee70 7a47 	vsub.f32	s15, s0, s14
 801ca16:	bf09      	itett	eq
 801ca18:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801cc0c <__ieee754_rem_pio2f+0x230>
 801ca1c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801cc10 <__ieee754_rem_pio2f+0x234>
 801ca20:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801ca24:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801cc14 <__ieee754_rem_pio2f+0x238>
 801ca28:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801ca2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ca30:	edc0 6a00 	vstr	s13, [r0]
 801ca34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca38:	edc0 7a01 	vstr	s15, [r0, #4]
 801ca3c:	2001      	movs	r0, #1
 801ca3e:	b007      	add	sp, #28
 801ca40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca42:	429c      	cmp	r4, r3
 801ca44:	ee70 7a07 	vadd.f32	s15, s0, s14
 801ca48:	bf09      	itett	eq
 801ca4a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801cc0c <__ieee754_rem_pio2f+0x230>
 801ca4e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801cc10 <__ieee754_rem_pio2f+0x234>
 801ca52:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801ca56:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801cc14 <__ieee754_rem_pio2f+0x238>
 801ca5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ca5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ca62:	edc0 6a00 	vstr	s13, [r0]
 801ca66:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ca6a:	edc0 7a01 	vstr	s15, [r0, #4]
 801ca6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ca72:	e7e4      	b.n	801ca3e <__ieee754_rem_pio2f+0x62>
 801ca74:	4b68      	ldr	r3, [pc, #416]	; (801cc18 <__ieee754_rem_pio2f+0x23c>)
 801ca76:	429c      	cmp	r4, r3
 801ca78:	dc71      	bgt.n	801cb5e <__ieee754_rem_pio2f+0x182>
 801ca7a:	f000 fdb9 	bl	801d5f0 <fabsf>
 801ca7e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801cc1c <__ieee754_rem_pio2f+0x240>
 801ca82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ca86:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ca8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca8e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801ca92:	ee17 0a90 	vmov	r0, s15
 801ca96:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801cc04 <__ieee754_rem_pio2f+0x228>
 801ca9a:	eeb1 7a46 	vneg.f32	s14, s12
 801ca9e:	eea7 0a27 	vfma.f32	s0, s14, s15
 801caa2:	281f      	cmp	r0, #31
 801caa4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801cc10 <__ieee754_rem_pio2f+0x234>
 801caa8:	ee66 7a27 	vmul.f32	s15, s12, s15
 801caac:	ee70 6a67 	vsub.f32	s13, s0, s15
 801cab0:	ee16 3a90 	vmov	r3, s13
 801cab4:	dc1c      	bgt.n	801caf0 <__ieee754_rem_pio2f+0x114>
 801cab6:	1e47      	subs	r7, r0, #1
 801cab8:	4959      	ldr	r1, [pc, #356]	; (801cc20 <__ieee754_rem_pio2f+0x244>)
 801caba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801cabe:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801cac2:	428a      	cmp	r2, r1
 801cac4:	d014      	beq.n	801caf0 <__ieee754_rem_pio2f+0x114>
 801cac6:	602b      	str	r3, [r5, #0]
 801cac8:	ed95 7a00 	vldr	s14, [r5]
 801cacc:	ee30 0a47 	vsub.f32	s0, s0, s14
 801cad0:	2e00      	cmp	r6, #0
 801cad2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cad6:	ed85 0a01 	vstr	s0, [r5, #4]
 801cada:	dab0      	bge.n	801ca3e <__ieee754_rem_pio2f+0x62>
 801cadc:	eeb1 7a47 	vneg.f32	s14, s14
 801cae0:	eeb1 0a40 	vneg.f32	s0, s0
 801cae4:	ed85 7a00 	vstr	s14, [r5]
 801cae8:	ed85 0a01 	vstr	s0, [r5, #4]
 801caec:	4240      	negs	r0, r0
 801caee:	e7a6      	b.n	801ca3e <__ieee754_rem_pio2f+0x62>
 801caf0:	15e4      	asrs	r4, r4, #23
 801caf2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801caf6:	1aa2      	subs	r2, r4, r2
 801caf8:	2a08      	cmp	r2, #8
 801cafa:	dde4      	ble.n	801cac6 <__ieee754_rem_pio2f+0xea>
 801cafc:	eddf 7a43 	vldr	s15, [pc, #268]	; 801cc0c <__ieee754_rem_pio2f+0x230>
 801cb00:	eef0 6a40 	vmov.f32	s13, s0
 801cb04:	eee7 6a27 	vfma.f32	s13, s14, s15
 801cb08:	ee30 0a66 	vsub.f32	s0, s0, s13
 801cb0c:	eea7 0a27 	vfma.f32	s0, s14, s15
 801cb10:	eddf 7a40 	vldr	s15, [pc, #256]	; 801cc14 <__ieee754_rem_pio2f+0x238>
 801cb14:	ee96 0a27 	vfnms.f32	s0, s12, s15
 801cb18:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801cb1c:	eef0 7a40 	vmov.f32	s15, s0
 801cb20:	ee15 3a90 	vmov	r3, s11
 801cb24:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801cb28:	1aa4      	subs	r4, r4, r2
 801cb2a:	2c19      	cmp	r4, #25
 801cb2c:	dc04      	bgt.n	801cb38 <__ieee754_rem_pio2f+0x15c>
 801cb2e:	edc5 5a00 	vstr	s11, [r5]
 801cb32:	eeb0 0a66 	vmov.f32	s0, s13
 801cb36:	e7c7      	b.n	801cac8 <__ieee754_rem_pio2f+0xec>
 801cb38:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801cc24 <__ieee754_rem_pio2f+0x248>
 801cb3c:	eeb0 0a66 	vmov.f32	s0, s13
 801cb40:	eea7 0a25 	vfma.f32	s0, s14, s11
 801cb44:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801cb48:	eee7 7a25 	vfma.f32	s15, s14, s11
 801cb4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801cc28 <__ieee754_rem_pio2f+0x24c>
 801cb50:	eed6 7a07 	vfnms.f32	s15, s12, s14
 801cb54:	ee30 7a67 	vsub.f32	s14, s0, s15
 801cb58:	ed85 7a00 	vstr	s14, [r5]
 801cb5c:	e7b4      	b.n	801cac8 <__ieee754_rem_pio2f+0xec>
 801cb5e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801cb62:	db06      	blt.n	801cb72 <__ieee754_rem_pio2f+0x196>
 801cb64:	ee70 7a40 	vsub.f32	s15, s0, s0
 801cb68:	edc0 7a01 	vstr	s15, [r0, #4]
 801cb6c:	edc0 7a00 	vstr	s15, [r0]
 801cb70:	e742      	b.n	801c9f8 <__ieee754_rem_pio2f+0x1c>
 801cb72:	15e2      	asrs	r2, r4, #23
 801cb74:	3a86      	subs	r2, #134	; 0x86
 801cb76:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801cb7a:	ee07 3a90 	vmov	s15, r3
 801cb7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cb82:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801cc2c <__ieee754_rem_pio2f+0x250>
 801cb86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cb8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb8e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801cb92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cb96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cb9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cb9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cba2:	ed8d 7a04 	vstr	s14, [sp, #16]
 801cba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cbaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 801cbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbb2:	edcd 7a05 	vstr	s15, [sp, #20]
 801cbb6:	d11e      	bne.n	801cbf6 <__ieee754_rem_pio2f+0x21a>
 801cbb8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801cbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbc0:	bf0c      	ite	eq
 801cbc2:	2301      	moveq	r3, #1
 801cbc4:	2302      	movne	r3, #2
 801cbc6:	491a      	ldr	r1, [pc, #104]	; (801cc30 <__ieee754_rem_pio2f+0x254>)
 801cbc8:	9101      	str	r1, [sp, #4]
 801cbca:	2102      	movs	r1, #2
 801cbcc:	9100      	str	r1, [sp, #0]
 801cbce:	a803      	add	r0, sp, #12
 801cbd0:	4629      	mov	r1, r5
 801cbd2:	f000 f88d 	bl	801ccf0 <__kernel_rem_pio2f>
 801cbd6:	2e00      	cmp	r6, #0
 801cbd8:	f6bf af31 	bge.w	801ca3e <__ieee754_rem_pio2f+0x62>
 801cbdc:	edd5 7a00 	vldr	s15, [r5]
 801cbe0:	eef1 7a67 	vneg.f32	s15, s15
 801cbe4:	edc5 7a00 	vstr	s15, [r5]
 801cbe8:	edd5 7a01 	vldr	s15, [r5, #4]
 801cbec:	eef1 7a67 	vneg.f32	s15, s15
 801cbf0:	edc5 7a01 	vstr	s15, [r5, #4]
 801cbf4:	e77a      	b.n	801caec <__ieee754_rem_pio2f+0x110>
 801cbf6:	2303      	movs	r3, #3
 801cbf8:	e7e5      	b.n	801cbc6 <__ieee754_rem_pio2f+0x1ea>
 801cbfa:	bf00      	nop
 801cbfc:	3f490fd8 	.word	0x3f490fd8
 801cc00:	4016cbe3 	.word	0x4016cbe3
 801cc04:	3fc90f80 	.word	0x3fc90f80
 801cc08:	3fc90fd0 	.word	0x3fc90fd0
 801cc0c:	37354400 	.word	0x37354400
 801cc10:	37354443 	.word	0x37354443
 801cc14:	2e85a308 	.word	0x2e85a308
 801cc18:	43490f80 	.word	0x43490f80
 801cc1c:	3f22f984 	.word	0x3f22f984
 801cc20:	080226f8 	.word	0x080226f8
 801cc24:	2e85a300 	.word	0x2e85a300
 801cc28:	248d3132 	.word	0x248d3132
 801cc2c:	43800000 	.word	0x43800000
 801cc30:	08022778 	.word	0x08022778

0801cc34 <__kernel_cosf>:
 801cc34:	ee10 3a10 	vmov	r3, s0
 801cc38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cc3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801cc40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cc44:	da05      	bge.n	801cc52 <__kernel_cosf+0x1e>
 801cc46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801cc4a:	ee17 2a90 	vmov	r2, s15
 801cc4e:	2a00      	cmp	r2, #0
 801cc50:	d03b      	beq.n	801ccca <__kernel_cosf+0x96>
 801cc52:	ee20 6a00 	vmul.f32	s12, s0, s0
 801cc56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cc5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801ccd0 <__kernel_cosf+0x9c>
 801cc5e:	4a1d      	ldr	r2, [pc, #116]	; (801ccd4 <__kernel_cosf+0xa0>)
 801cc60:	ee66 7a07 	vmul.f32	s15, s12, s14
 801cc64:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801ccd8 <__kernel_cosf+0xa4>
 801cc68:	eea6 7a25 	vfma.f32	s14, s12, s11
 801cc6c:	4293      	cmp	r3, r2
 801cc6e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 801ccdc <__kernel_cosf+0xa8>
 801cc72:	eee7 5a06 	vfma.f32	s11, s14, s12
 801cc76:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801cce0 <__kernel_cosf+0xac>
 801cc7a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801cc7e:	eddf 5a19 	vldr	s11, [pc, #100]	; 801cce4 <__kernel_cosf+0xb0>
 801cc82:	eee7 5a06 	vfma.f32	s11, s14, s12
 801cc86:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801cce8 <__kernel_cosf+0xb4>
 801cc8a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801cc8e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801cc92:	ee27 7a06 	vmul.f32	s14, s14, s12
 801cc96:	eee6 0a07 	vfma.f32	s1, s12, s14
 801cc9a:	dc04      	bgt.n	801cca6 <__kernel_cosf+0x72>
 801cc9c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 801cca0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 801cca4:	4770      	bx	lr
 801cca6:	4a11      	ldr	r2, [pc, #68]	; (801ccec <__kernel_cosf+0xb8>)
 801cca8:	4293      	cmp	r3, r2
 801ccaa:	bfda      	itte	le
 801ccac:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801ccb0:	ee07 3a10 	vmovle	s14, r3
 801ccb4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801ccb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ccbc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801ccc0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801ccc4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ccc8:	4770      	bx	lr
 801ccca:	eeb0 0a66 	vmov.f32	s0, s13
 801ccce:	4770      	bx	lr
 801ccd0:	ad47d74e 	.word	0xad47d74e
 801ccd4:	3e999999 	.word	0x3e999999
 801ccd8:	310f74f6 	.word	0x310f74f6
 801ccdc:	b493f27c 	.word	0xb493f27c
 801cce0:	37d00d01 	.word	0x37d00d01
 801cce4:	bab60b61 	.word	0xbab60b61
 801cce8:	3d2aaaab 	.word	0x3d2aaaab
 801ccec:	3f480000 	.word	0x3f480000

0801ccf0 <__kernel_rem_pio2f>:
 801ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccf4:	ed2d 8b04 	vpush	{d8-d9}
 801ccf8:	b0d7      	sub	sp, #348	; 0x15c
 801ccfa:	469b      	mov	fp, r3
 801ccfc:	460e      	mov	r6, r1
 801ccfe:	4bbe      	ldr	r3, [pc, #760]	; (801cff8 <__kernel_rem_pio2f+0x308>)
 801cd00:	9964      	ldr	r1, [sp, #400]	; 0x190
 801cd02:	9002      	str	r0, [sp, #8]
 801cd04:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801cd08:	9865      	ldr	r0, [sp, #404]	; 0x194
 801cd0a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 801d008 <__kernel_rem_pio2f+0x318>
 801cd0e:	1ed1      	subs	r1, r2, #3
 801cd10:	2308      	movs	r3, #8
 801cd12:	fb91 f1f3 	sdiv	r1, r1, r3
 801cd16:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801cd1a:	f10b 3aff 	add.w	sl, fp, #4294967295
 801cd1e:	1c4c      	adds	r4, r1, #1
 801cd20:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 801cd24:	eba1 050a 	sub.w	r5, r1, sl
 801cd28:	aa1a      	add	r2, sp, #104	; 0x68
 801cd2a:	eb09 070a 	add.w	r7, r9, sl
 801cd2e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801cd32:	4696      	mov	lr, r2
 801cd34:	2300      	movs	r3, #0
 801cd36:	42bb      	cmp	r3, r7
 801cd38:	dd0f      	ble.n	801cd5a <__kernel_rem_pio2f+0x6a>
 801cd3a:	af42      	add	r7, sp, #264	; 0x108
 801cd3c:	2200      	movs	r2, #0
 801cd3e:	454a      	cmp	r2, r9
 801cd40:	dc27      	bgt.n	801cd92 <__kernel_rem_pio2f+0xa2>
 801cd42:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801cd46:	eb0b 0302 	add.w	r3, fp, r2
 801cd4a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801cd4e:	9d02      	ldr	r5, [sp, #8]
 801cd50:	eddf 7aad 	vldr	s15, [pc, #692]	; 801d008 <__kernel_rem_pio2f+0x318>
 801cd54:	f04f 0c00 	mov.w	ip, #0
 801cd58:	e015      	b.n	801cd86 <__kernel_rem_pio2f+0x96>
 801cd5a:	42dd      	cmn	r5, r3
 801cd5c:	bf5d      	ittte	pl
 801cd5e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801cd62:	ee07 2a90 	vmovpl	s15, r2
 801cd66:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801cd6a:	eef0 7a47 	vmovmi.f32	s15, s14
 801cd6e:	ecee 7a01 	vstmia	lr!, {s15}
 801cd72:	3301      	adds	r3, #1
 801cd74:	e7df      	b.n	801cd36 <__kernel_rem_pio2f+0x46>
 801cd76:	ecf5 6a01 	vldmia	r5!, {s13}
 801cd7a:	ed33 7a01 	vldmdb	r3!, {s14}
 801cd7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cd82:	f10c 0c01 	add.w	ip, ip, #1
 801cd86:	45d4      	cmp	ip, sl
 801cd88:	ddf5      	ble.n	801cd76 <__kernel_rem_pio2f+0x86>
 801cd8a:	ece7 7a01 	vstmia	r7!, {s15}
 801cd8e:	3201      	adds	r2, #1
 801cd90:	e7d5      	b.n	801cd3e <__kernel_rem_pio2f+0x4e>
 801cd92:	ab06      	add	r3, sp, #24
 801cd94:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801cd98:	9304      	str	r3, [sp, #16]
 801cd9a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 801d004 <__kernel_rem_pio2f+0x314>
 801cd9e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 801d000 <__kernel_rem_pio2f+0x310>
 801cda2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801cda6:	9303      	str	r3, [sp, #12]
 801cda8:	464d      	mov	r5, r9
 801cdaa:	ab56      	add	r3, sp, #344	; 0x158
 801cdac:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 801cdb0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801cdb4:	3f01      	subs	r7, #1
 801cdb6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801cdba:	00bf      	lsls	r7, r7, #2
 801cdbc:	ab56      	add	r3, sp, #344	; 0x158
 801cdbe:	19da      	adds	r2, r3, r7
 801cdc0:	3a4c      	subs	r2, #76	; 0x4c
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	1ae9      	subs	r1, r5, r3
 801cdc6:	2900      	cmp	r1, #0
 801cdc8:	dc4c      	bgt.n	801ce64 <__kernel_rem_pio2f+0x174>
 801cdca:	4620      	mov	r0, r4
 801cdcc:	f000 fc18 	bl	801d600 <scalbnf>
 801cdd0:	eeb0 8a40 	vmov.f32	s16, s0
 801cdd4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801cdd8:	ee28 0a00 	vmul.f32	s0, s16, s0
 801cddc:	f7ff f926 	bl	801c02c <floorf>
 801cde0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801cde4:	eea0 8a67 	vfms.f32	s16, s0, s15
 801cde8:	2c00      	cmp	r4, #0
 801cdea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801cdee:	edcd 7a01 	vstr	s15, [sp, #4]
 801cdf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cdf6:	ee38 8a67 	vsub.f32	s16, s16, s15
 801cdfa:	dd48      	ble.n	801ce8e <__kernel_rem_pio2f+0x19e>
 801cdfc:	1e69      	subs	r1, r5, #1
 801cdfe:	ab06      	add	r3, sp, #24
 801ce00:	f1c4 0008 	rsb	r0, r4, #8
 801ce04:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 801ce08:	9a01      	ldr	r2, [sp, #4]
 801ce0a:	fa4c f300 	asr.w	r3, ip, r0
 801ce0e:	441a      	add	r2, r3
 801ce10:	4083      	lsls	r3, r0
 801ce12:	9201      	str	r2, [sp, #4]
 801ce14:	ebac 0203 	sub.w	r2, ip, r3
 801ce18:	ab06      	add	r3, sp, #24
 801ce1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801ce1e:	f1c4 0307 	rsb	r3, r4, #7
 801ce22:	fa42 f803 	asr.w	r8, r2, r3
 801ce26:	f1b8 0f00 	cmp.w	r8, #0
 801ce2a:	dd41      	ble.n	801ceb0 <__kernel_rem_pio2f+0x1c0>
 801ce2c:	9b01      	ldr	r3, [sp, #4]
 801ce2e:	2000      	movs	r0, #0
 801ce30:	3301      	adds	r3, #1
 801ce32:	9301      	str	r3, [sp, #4]
 801ce34:	4601      	mov	r1, r0
 801ce36:	4285      	cmp	r5, r0
 801ce38:	dc6d      	bgt.n	801cf16 <__kernel_rem_pio2f+0x226>
 801ce3a:	2c00      	cmp	r4, #0
 801ce3c:	dd04      	ble.n	801ce48 <__kernel_rem_pio2f+0x158>
 801ce3e:	2c01      	cmp	r4, #1
 801ce40:	d07e      	beq.n	801cf40 <__kernel_rem_pio2f+0x250>
 801ce42:	2c02      	cmp	r4, #2
 801ce44:	f000 8086 	beq.w	801cf54 <__kernel_rem_pio2f+0x264>
 801ce48:	f1b8 0f02 	cmp.w	r8, #2
 801ce4c:	d130      	bne.n	801ceb0 <__kernel_rem_pio2f+0x1c0>
 801ce4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ce52:	ee30 8a48 	vsub.f32	s16, s0, s16
 801ce56:	b359      	cbz	r1, 801ceb0 <__kernel_rem_pio2f+0x1c0>
 801ce58:	4620      	mov	r0, r4
 801ce5a:	f000 fbd1 	bl	801d600 <scalbnf>
 801ce5e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ce62:	e025      	b.n	801ceb0 <__kernel_rem_pio2f+0x1c0>
 801ce64:	ee60 7a28 	vmul.f32	s15, s0, s17
 801ce68:	a806      	add	r0, sp, #24
 801ce6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ce6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ce72:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801ce76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ce7a:	ee10 1a10 	vmov	r1, s0
 801ce7e:	ed32 0a01 	vldmdb	r2!, {s0}
 801ce82:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801ce86:	ee37 0a80 	vadd.f32	s0, s15, s0
 801ce8a:	3301      	adds	r3, #1
 801ce8c:	e79a      	b.n	801cdc4 <__kernel_rem_pio2f+0xd4>
 801ce8e:	d106      	bne.n	801ce9e <__kernel_rem_pio2f+0x1ae>
 801ce90:	1e6b      	subs	r3, r5, #1
 801ce92:	aa06      	add	r2, sp, #24
 801ce94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ce98:	ea4f 2822 	mov.w	r8, r2, asr #8
 801ce9c:	e7c3      	b.n	801ce26 <__kernel_rem_pio2f+0x136>
 801ce9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801cea2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801cea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceaa:	da31      	bge.n	801cf10 <__kernel_rem_pio2f+0x220>
 801ceac:	f04f 0800 	mov.w	r8, #0
 801ceb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ceb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceb8:	f040 80a8 	bne.w	801d00c <__kernel_rem_pio2f+0x31c>
 801cebc:	1e6b      	subs	r3, r5, #1
 801cebe:	4618      	mov	r0, r3
 801cec0:	2200      	movs	r2, #0
 801cec2:	4548      	cmp	r0, r9
 801cec4:	da4d      	bge.n	801cf62 <__kernel_rem_pio2f+0x272>
 801cec6:	2a00      	cmp	r2, #0
 801cec8:	f000 8087 	beq.w	801cfda <__kernel_rem_pio2f+0x2ea>
 801cecc:	aa06      	add	r2, sp, #24
 801cece:	3c08      	subs	r4, #8
 801ced0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ced4:	2900      	cmp	r1, #0
 801ced6:	f000 808d 	beq.w	801cff4 <__kernel_rem_pio2f+0x304>
 801ceda:	4620      	mov	r0, r4
 801cedc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801cee0:	9302      	str	r3, [sp, #8]
 801cee2:	f000 fb8d 	bl	801d600 <scalbnf>
 801cee6:	9b02      	ldr	r3, [sp, #8]
 801cee8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801d004 <__kernel_rem_pio2f+0x314>
 801ceec:	0099      	lsls	r1, r3, #2
 801ceee:	aa42      	add	r2, sp, #264	; 0x108
 801cef0:	1850      	adds	r0, r2, r1
 801cef2:	1d05      	adds	r5, r0, #4
 801cef4:	461c      	mov	r4, r3
 801cef6:	2c00      	cmp	r4, #0
 801cef8:	f280 80b8 	bge.w	801d06c <__kernel_rem_pio2f+0x37c>
 801cefc:	2500      	movs	r5, #0
 801cefe:	1b5c      	subs	r4, r3, r5
 801cf00:	2c00      	cmp	r4, #0
 801cf02:	f2c0 80d8 	blt.w	801d0b6 <__kernel_rem_pio2f+0x3c6>
 801cf06:	4f3d      	ldr	r7, [pc, #244]	; (801cffc <__kernel_rem_pio2f+0x30c>)
 801cf08:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801d008 <__kernel_rem_pio2f+0x318>
 801cf0c:	2400      	movs	r4, #0
 801cf0e:	e0c6      	b.n	801d09e <__kernel_rem_pio2f+0x3ae>
 801cf10:	f04f 0802 	mov.w	r8, #2
 801cf14:	e78a      	b.n	801ce2c <__kernel_rem_pio2f+0x13c>
 801cf16:	ab06      	add	r3, sp, #24
 801cf18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801cf1c:	b949      	cbnz	r1, 801cf32 <__kernel_rem_pio2f+0x242>
 801cf1e:	b12b      	cbz	r3, 801cf2c <__kernel_rem_pio2f+0x23c>
 801cf20:	aa06      	add	r2, sp, #24
 801cf22:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801cf26:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801cf2a:	2301      	movs	r3, #1
 801cf2c:	3001      	adds	r0, #1
 801cf2e:	4619      	mov	r1, r3
 801cf30:	e781      	b.n	801ce36 <__kernel_rem_pio2f+0x146>
 801cf32:	aa06      	add	r2, sp, #24
 801cf34:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801cf38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801cf3c:	460b      	mov	r3, r1
 801cf3e:	e7f5      	b.n	801cf2c <__kernel_rem_pio2f+0x23c>
 801cf40:	1e68      	subs	r0, r5, #1
 801cf42:	ab06      	add	r3, sp, #24
 801cf44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801cf48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cf4c:	aa06      	add	r2, sp, #24
 801cf4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801cf52:	e779      	b.n	801ce48 <__kernel_rem_pio2f+0x158>
 801cf54:	1e68      	subs	r0, r5, #1
 801cf56:	ab06      	add	r3, sp, #24
 801cf58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801cf5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cf60:	e7f4      	b.n	801cf4c <__kernel_rem_pio2f+0x25c>
 801cf62:	a906      	add	r1, sp, #24
 801cf64:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801cf68:	3801      	subs	r0, #1
 801cf6a:	430a      	orrs	r2, r1
 801cf6c:	e7a9      	b.n	801cec2 <__kernel_rem_pio2f+0x1d2>
 801cf6e:	f10c 0c01 	add.w	ip, ip, #1
 801cf72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801cf76:	2a00      	cmp	r2, #0
 801cf78:	d0f9      	beq.n	801cf6e <__kernel_rem_pio2f+0x27e>
 801cf7a:	eb0b 0305 	add.w	r3, fp, r5
 801cf7e:	aa1a      	add	r2, sp, #104	; 0x68
 801cf80:	009b      	lsls	r3, r3, #2
 801cf82:	1898      	adds	r0, r3, r2
 801cf84:	3004      	adds	r0, #4
 801cf86:	1c69      	adds	r1, r5, #1
 801cf88:	3704      	adds	r7, #4
 801cf8a:	2200      	movs	r2, #0
 801cf8c:	4465      	add	r5, ip
 801cf8e:	9005      	str	r0, [sp, #20]
 801cf90:	428d      	cmp	r5, r1
 801cf92:	f6ff af0a 	blt.w	801cdaa <__kernel_rem_pio2f+0xba>
 801cf96:	a81a      	add	r0, sp, #104	; 0x68
 801cf98:	eb02 0c03 	add.w	ip, r2, r3
 801cf9c:	4484      	add	ip, r0
 801cf9e:	9803      	ldr	r0, [sp, #12]
 801cfa0:	f8dd e008 	ldr.w	lr, [sp, #8]
 801cfa4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801cfa8:	9001      	str	r0, [sp, #4]
 801cfaa:	ee07 0a90 	vmov	s15, r0
 801cfae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfb2:	9805      	ldr	r0, [sp, #20]
 801cfb4:	edcc 7a00 	vstr	s15, [ip]
 801cfb8:	eddf 7a13 	vldr	s15, [pc, #76]	; 801d008 <__kernel_rem_pio2f+0x318>
 801cfbc:	eb00 0802 	add.w	r8, r0, r2
 801cfc0:	f04f 0c00 	mov.w	ip, #0
 801cfc4:	45d4      	cmp	ip, sl
 801cfc6:	dd0c      	ble.n	801cfe2 <__kernel_rem_pio2f+0x2f2>
 801cfc8:	eb02 0c07 	add.w	ip, r2, r7
 801cfcc:	a842      	add	r0, sp, #264	; 0x108
 801cfce:	4484      	add	ip, r0
 801cfd0:	edcc 7a01 	vstr	s15, [ip, #4]
 801cfd4:	3101      	adds	r1, #1
 801cfd6:	3204      	adds	r2, #4
 801cfd8:	e7da      	b.n	801cf90 <__kernel_rem_pio2f+0x2a0>
 801cfda:	9b04      	ldr	r3, [sp, #16]
 801cfdc:	f04f 0c01 	mov.w	ip, #1
 801cfe0:	e7c7      	b.n	801cf72 <__kernel_rem_pio2f+0x282>
 801cfe2:	ecfe 6a01 	vldmia	lr!, {s13}
 801cfe6:	ed38 7a01 	vldmdb	r8!, {s14}
 801cfea:	f10c 0c01 	add.w	ip, ip, #1
 801cfee:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cff2:	e7e7      	b.n	801cfc4 <__kernel_rem_pio2f+0x2d4>
 801cff4:	3b01      	subs	r3, #1
 801cff6:	e769      	b.n	801cecc <__kernel_rem_pio2f+0x1dc>
 801cff8:	08022abc 	.word	0x08022abc
 801cffc:	08022a90 	.word	0x08022a90
 801d000:	43800000 	.word	0x43800000
 801d004:	3b800000 	.word	0x3b800000
 801d008:	00000000 	.word	0x00000000
 801d00c:	4260      	negs	r0, r4
 801d00e:	eeb0 0a48 	vmov.f32	s0, s16
 801d012:	f000 faf5 	bl	801d600 <scalbnf>
 801d016:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 801d000 <__kernel_rem_pio2f+0x310>
 801d01a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d022:	db1a      	blt.n	801d05a <__kernel_rem_pio2f+0x36a>
 801d024:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801d004 <__kernel_rem_pio2f+0x314>
 801d028:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d02c:	aa06      	add	r2, sp, #24
 801d02e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d032:	a906      	add	r1, sp, #24
 801d034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d038:	3408      	adds	r4, #8
 801d03a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d042:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d046:	ee10 3a10 	vmov	r3, s0
 801d04a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801d04e:	1c6b      	adds	r3, r5, #1
 801d050:	ee17 2a90 	vmov	r2, s15
 801d054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801d058:	e73f      	b.n	801ceda <__kernel_rem_pio2f+0x1ea>
 801d05a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d05e:	aa06      	add	r2, sp, #24
 801d060:	ee10 3a10 	vmov	r3, s0
 801d064:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801d068:	462b      	mov	r3, r5
 801d06a:	e736      	b.n	801ceda <__kernel_rem_pio2f+0x1ea>
 801d06c:	aa06      	add	r2, sp, #24
 801d06e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801d072:	9202      	str	r2, [sp, #8]
 801d074:	ee07 2a90 	vmov	s15, r2
 801d078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d07c:	3c01      	subs	r4, #1
 801d07e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d082:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d086:	ed65 7a01 	vstmdb	r5!, {s15}
 801d08a:	e734      	b.n	801cef6 <__kernel_rem_pio2f+0x206>
 801d08c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801d090:	ecf7 6a01 	vldmia	r7!, {s13}
 801d094:	ed9c 7a00 	vldr	s14, [ip]
 801d098:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d09c:	3401      	adds	r4, #1
 801d09e:	454c      	cmp	r4, r9
 801d0a0:	dc01      	bgt.n	801d0a6 <__kernel_rem_pio2f+0x3b6>
 801d0a2:	42a5      	cmp	r5, r4
 801d0a4:	daf2      	bge.n	801d08c <__kernel_rem_pio2f+0x39c>
 801d0a6:	aa56      	add	r2, sp, #344	; 0x158
 801d0a8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 801d0ac:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 801d0b0:	3501      	adds	r5, #1
 801d0b2:	3804      	subs	r0, #4
 801d0b4:	e723      	b.n	801cefe <__kernel_rem_pio2f+0x20e>
 801d0b6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d0b8:	2a03      	cmp	r2, #3
 801d0ba:	d84d      	bhi.n	801d158 <__kernel_rem_pio2f+0x468>
 801d0bc:	e8df f002 	tbb	[pc, r2]
 801d0c0:	021f1f3e 	.word	0x021f1f3e
 801d0c4:	aa56      	add	r2, sp, #344	; 0x158
 801d0c6:	4411      	add	r1, r2
 801d0c8:	399c      	subs	r1, #156	; 0x9c
 801d0ca:	4608      	mov	r0, r1
 801d0cc:	461c      	mov	r4, r3
 801d0ce:	2c00      	cmp	r4, #0
 801d0d0:	dc5f      	bgt.n	801d192 <__kernel_rem_pio2f+0x4a2>
 801d0d2:	4608      	mov	r0, r1
 801d0d4:	461c      	mov	r4, r3
 801d0d6:	2c01      	cmp	r4, #1
 801d0d8:	dc6b      	bgt.n	801d1b2 <__kernel_rem_pio2f+0x4c2>
 801d0da:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 801d008 <__kernel_rem_pio2f+0x318>
 801d0de:	2b01      	cmp	r3, #1
 801d0e0:	dc77      	bgt.n	801d1d2 <__kernel_rem_pio2f+0x4e2>
 801d0e2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801d0e6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801d0ea:	f1b8 0f00 	cmp.w	r8, #0
 801d0ee:	d176      	bne.n	801d1de <__kernel_rem_pio2f+0x4ee>
 801d0f0:	edc6 6a00 	vstr	s13, [r6]
 801d0f4:	ed86 7a01 	vstr	s14, [r6, #4]
 801d0f8:	edc6 7a02 	vstr	s15, [r6, #8]
 801d0fc:	e02c      	b.n	801d158 <__kernel_rem_pio2f+0x468>
 801d0fe:	aa56      	add	r2, sp, #344	; 0x158
 801d100:	4411      	add	r1, r2
 801d102:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 801d008 <__kernel_rem_pio2f+0x318>
 801d106:	399c      	subs	r1, #156	; 0x9c
 801d108:	4618      	mov	r0, r3
 801d10a:	2800      	cmp	r0, #0
 801d10c:	da32      	bge.n	801d174 <__kernel_rem_pio2f+0x484>
 801d10e:	f1b8 0f00 	cmp.w	r8, #0
 801d112:	d035      	beq.n	801d180 <__kernel_rem_pio2f+0x490>
 801d114:	eef1 7a47 	vneg.f32	s15, s14
 801d118:	edc6 7a00 	vstr	s15, [r6]
 801d11c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801d120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d124:	a82f      	add	r0, sp, #188	; 0xbc
 801d126:	2101      	movs	r1, #1
 801d128:	428b      	cmp	r3, r1
 801d12a:	da2c      	bge.n	801d186 <__kernel_rem_pio2f+0x496>
 801d12c:	f1b8 0f00 	cmp.w	r8, #0
 801d130:	d001      	beq.n	801d136 <__kernel_rem_pio2f+0x446>
 801d132:	eef1 7a67 	vneg.f32	s15, s15
 801d136:	edc6 7a01 	vstr	s15, [r6, #4]
 801d13a:	e00d      	b.n	801d158 <__kernel_rem_pio2f+0x468>
 801d13c:	aa56      	add	r2, sp, #344	; 0x158
 801d13e:	4411      	add	r1, r2
 801d140:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801d008 <__kernel_rem_pio2f+0x318>
 801d144:	399c      	subs	r1, #156	; 0x9c
 801d146:	2b00      	cmp	r3, #0
 801d148:	da0e      	bge.n	801d168 <__kernel_rem_pio2f+0x478>
 801d14a:	f1b8 0f00 	cmp.w	r8, #0
 801d14e:	d001      	beq.n	801d154 <__kernel_rem_pio2f+0x464>
 801d150:	eef1 7a67 	vneg.f32	s15, s15
 801d154:	edc6 7a00 	vstr	s15, [r6]
 801d158:	9b01      	ldr	r3, [sp, #4]
 801d15a:	f003 0007 	and.w	r0, r3, #7
 801d15e:	b057      	add	sp, #348	; 0x15c
 801d160:	ecbd 8b04 	vpop	{d8-d9}
 801d164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d168:	ed31 7a01 	vldmdb	r1!, {s14}
 801d16c:	3b01      	subs	r3, #1
 801d16e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d172:	e7e8      	b.n	801d146 <__kernel_rem_pio2f+0x456>
 801d174:	ed71 7a01 	vldmdb	r1!, {s15}
 801d178:	3801      	subs	r0, #1
 801d17a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d17e:	e7c4      	b.n	801d10a <__kernel_rem_pio2f+0x41a>
 801d180:	eef0 7a47 	vmov.f32	s15, s14
 801d184:	e7c8      	b.n	801d118 <__kernel_rem_pio2f+0x428>
 801d186:	ecb0 7a01 	vldmia	r0!, {s14}
 801d18a:	3101      	adds	r1, #1
 801d18c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d190:	e7ca      	b.n	801d128 <__kernel_rem_pio2f+0x438>
 801d192:	ed50 7a02 	vldr	s15, [r0, #-8]
 801d196:	ed70 6a01 	vldmdb	r0!, {s13}
 801d19a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d19e:	3c01      	subs	r4, #1
 801d1a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d1a4:	ed00 7a01 	vstr	s14, [r0, #-4]
 801d1a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d1ac:	edc0 7a00 	vstr	s15, [r0]
 801d1b0:	e78d      	b.n	801d0ce <__kernel_rem_pio2f+0x3de>
 801d1b2:	ed50 7a02 	vldr	s15, [r0, #-8]
 801d1b6:	ed70 6a01 	vldmdb	r0!, {s13}
 801d1ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d1be:	3c01      	subs	r4, #1
 801d1c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d1c4:	ed00 7a01 	vstr	s14, [r0, #-4]
 801d1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d1cc:	edc0 7a00 	vstr	s15, [r0]
 801d1d0:	e781      	b.n	801d0d6 <__kernel_rem_pio2f+0x3e6>
 801d1d2:	ed31 7a01 	vldmdb	r1!, {s14}
 801d1d6:	3b01      	subs	r3, #1
 801d1d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d1dc:	e77f      	b.n	801d0de <__kernel_rem_pio2f+0x3ee>
 801d1de:	eef1 6a66 	vneg.f32	s13, s13
 801d1e2:	eeb1 7a47 	vneg.f32	s14, s14
 801d1e6:	edc6 6a00 	vstr	s13, [r6]
 801d1ea:	ed86 7a01 	vstr	s14, [r6, #4]
 801d1ee:	eef1 7a67 	vneg.f32	s15, s15
 801d1f2:	e781      	b.n	801d0f8 <__kernel_rem_pio2f+0x408>

0801d1f4 <__kernel_sinf>:
 801d1f4:	ee10 3a10 	vmov	r3, s0
 801d1f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d1fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d200:	da04      	bge.n	801d20c <__kernel_sinf+0x18>
 801d202:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d206:	ee17 3a90 	vmov	r3, s15
 801d20a:	b35b      	cbz	r3, 801d264 <__kernel_sinf+0x70>
 801d20c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d210:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d268 <__kernel_sinf+0x74>
 801d214:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801d26c <__kernel_sinf+0x78>
 801d218:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d21c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801d270 <__kernel_sinf+0x7c>
 801d220:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d224:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801d274 <__kernel_sinf+0x80>
 801d228:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d22c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801d278 <__kernel_sinf+0x84>
 801d230:	ee60 6a07 	vmul.f32	s13, s0, s14
 801d234:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d238:	b930      	cbnz	r0, 801d248 <__kernel_sinf+0x54>
 801d23a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801d27c <__kernel_sinf+0x88>
 801d23e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d242:	eea6 0a26 	vfma.f32	s0, s12, s13
 801d246:	4770      	bx	lr
 801d248:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801d24c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801d250:	eee0 7a86 	vfma.f32	s15, s1, s12
 801d254:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801d258:	eddf 7a09 	vldr	s15, [pc, #36]	; 801d280 <__kernel_sinf+0x8c>
 801d25c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801d260:	ee30 0a60 	vsub.f32	s0, s0, s1
 801d264:	4770      	bx	lr
 801d266:	bf00      	nop
 801d268:	2f2ec9d3 	.word	0x2f2ec9d3
 801d26c:	b2d72f34 	.word	0xb2d72f34
 801d270:	3638ef1b 	.word	0x3638ef1b
 801d274:	b9500d01 	.word	0xb9500d01
 801d278:	3c088889 	.word	0x3c088889
 801d27c:	be2aaaab 	.word	0xbe2aaaab
 801d280:	3e2aaaab 	.word	0x3e2aaaab
 801d284:	00000000 	.word	0x00000000

0801d288 <atan>:
 801d288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d28c:	ec55 4b10 	vmov	r4, r5, d0
 801d290:	4bc3      	ldr	r3, [pc, #780]	; (801d5a0 <atan+0x318>)
 801d292:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d296:	429e      	cmp	r6, r3
 801d298:	46ab      	mov	fp, r5
 801d29a:	dd18      	ble.n	801d2ce <atan+0x46>
 801d29c:	4bc1      	ldr	r3, [pc, #772]	; (801d5a4 <atan+0x31c>)
 801d29e:	429e      	cmp	r6, r3
 801d2a0:	dc01      	bgt.n	801d2a6 <atan+0x1e>
 801d2a2:	d109      	bne.n	801d2b8 <atan+0x30>
 801d2a4:	b144      	cbz	r4, 801d2b8 <atan+0x30>
 801d2a6:	4622      	mov	r2, r4
 801d2a8:	462b      	mov	r3, r5
 801d2aa:	4620      	mov	r0, r4
 801d2ac:	4629      	mov	r1, r5
 801d2ae:	f7e2 fffd 	bl	80002ac <__adddf3>
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	460d      	mov	r5, r1
 801d2b6:	e006      	b.n	801d2c6 <atan+0x3e>
 801d2b8:	f1bb 0f00 	cmp.w	fp, #0
 801d2bc:	f340 8131 	ble.w	801d522 <atan+0x29a>
 801d2c0:	a59b      	add	r5, pc, #620	; (adr r5, 801d530 <atan+0x2a8>)
 801d2c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d2c6:	ec45 4b10 	vmov	d0, r4, r5
 801d2ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ce:	4bb6      	ldr	r3, [pc, #728]	; (801d5a8 <atan+0x320>)
 801d2d0:	429e      	cmp	r6, r3
 801d2d2:	dc14      	bgt.n	801d2fe <atan+0x76>
 801d2d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d2d8:	429e      	cmp	r6, r3
 801d2da:	dc0d      	bgt.n	801d2f8 <atan+0x70>
 801d2dc:	a396      	add	r3, pc, #600	; (adr r3, 801d538 <atan+0x2b0>)
 801d2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e2:	ee10 0a10 	vmov	r0, s0
 801d2e6:	4629      	mov	r1, r5
 801d2e8:	f7e2 ffe0 	bl	80002ac <__adddf3>
 801d2ec:	2200      	movs	r2, #0
 801d2ee:	4baf      	ldr	r3, [pc, #700]	; (801d5ac <atan+0x324>)
 801d2f0:	f7e3 fc22 	bl	8000b38 <__aeabi_dcmpgt>
 801d2f4:	2800      	cmp	r0, #0
 801d2f6:	d1e6      	bne.n	801d2c6 <atan+0x3e>
 801d2f8:	f04f 3aff 	mov.w	sl, #4294967295
 801d2fc:	e02b      	b.n	801d356 <atan+0xce>
 801d2fe:	f000 f963 	bl	801d5c8 <fabs>
 801d302:	4bab      	ldr	r3, [pc, #684]	; (801d5b0 <atan+0x328>)
 801d304:	429e      	cmp	r6, r3
 801d306:	ec55 4b10 	vmov	r4, r5, d0
 801d30a:	f300 80bf 	bgt.w	801d48c <atan+0x204>
 801d30e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d312:	429e      	cmp	r6, r3
 801d314:	f300 80a0 	bgt.w	801d458 <atan+0x1d0>
 801d318:	ee10 2a10 	vmov	r2, s0
 801d31c:	ee10 0a10 	vmov	r0, s0
 801d320:	462b      	mov	r3, r5
 801d322:	4629      	mov	r1, r5
 801d324:	f7e2 ffc2 	bl	80002ac <__adddf3>
 801d328:	2200      	movs	r2, #0
 801d32a:	4ba0      	ldr	r3, [pc, #640]	; (801d5ac <atan+0x324>)
 801d32c:	f7e2 ffbc 	bl	80002a8 <__aeabi_dsub>
 801d330:	2200      	movs	r2, #0
 801d332:	4606      	mov	r6, r0
 801d334:	460f      	mov	r7, r1
 801d336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d33a:	4620      	mov	r0, r4
 801d33c:	4629      	mov	r1, r5
 801d33e:	f7e2 ffb5 	bl	80002ac <__adddf3>
 801d342:	4602      	mov	r2, r0
 801d344:	460b      	mov	r3, r1
 801d346:	4630      	mov	r0, r6
 801d348:	4639      	mov	r1, r7
 801d34a:	f7e3 fa8f 	bl	800086c <__aeabi_ddiv>
 801d34e:	f04f 0a00 	mov.w	sl, #0
 801d352:	4604      	mov	r4, r0
 801d354:	460d      	mov	r5, r1
 801d356:	4622      	mov	r2, r4
 801d358:	462b      	mov	r3, r5
 801d35a:	4620      	mov	r0, r4
 801d35c:	4629      	mov	r1, r5
 801d35e:	f7e3 f95b 	bl	8000618 <__aeabi_dmul>
 801d362:	4602      	mov	r2, r0
 801d364:	460b      	mov	r3, r1
 801d366:	4680      	mov	r8, r0
 801d368:	4689      	mov	r9, r1
 801d36a:	f7e3 f955 	bl	8000618 <__aeabi_dmul>
 801d36e:	a374      	add	r3, pc, #464	; (adr r3, 801d540 <atan+0x2b8>)
 801d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d374:	4606      	mov	r6, r0
 801d376:	460f      	mov	r7, r1
 801d378:	f7e3 f94e 	bl	8000618 <__aeabi_dmul>
 801d37c:	a372      	add	r3, pc, #456	; (adr r3, 801d548 <atan+0x2c0>)
 801d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d382:	f7e2 ff93 	bl	80002ac <__adddf3>
 801d386:	4632      	mov	r2, r6
 801d388:	463b      	mov	r3, r7
 801d38a:	f7e3 f945 	bl	8000618 <__aeabi_dmul>
 801d38e:	a370      	add	r3, pc, #448	; (adr r3, 801d550 <atan+0x2c8>)
 801d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d394:	f7e2 ff8a 	bl	80002ac <__adddf3>
 801d398:	4632      	mov	r2, r6
 801d39a:	463b      	mov	r3, r7
 801d39c:	f7e3 f93c 	bl	8000618 <__aeabi_dmul>
 801d3a0:	a36d      	add	r3, pc, #436	; (adr r3, 801d558 <atan+0x2d0>)
 801d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a6:	f7e2 ff81 	bl	80002ac <__adddf3>
 801d3aa:	4632      	mov	r2, r6
 801d3ac:	463b      	mov	r3, r7
 801d3ae:	f7e3 f933 	bl	8000618 <__aeabi_dmul>
 801d3b2:	a36b      	add	r3, pc, #428	; (adr r3, 801d560 <atan+0x2d8>)
 801d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3b8:	f7e2 ff78 	bl	80002ac <__adddf3>
 801d3bc:	4632      	mov	r2, r6
 801d3be:	463b      	mov	r3, r7
 801d3c0:	f7e3 f92a 	bl	8000618 <__aeabi_dmul>
 801d3c4:	a368      	add	r3, pc, #416	; (adr r3, 801d568 <atan+0x2e0>)
 801d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ca:	f7e2 ff6f 	bl	80002ac <__adddf3>
 801d3ce:	4642      	mov	r2, r8
 801d3d0:	464b      	mov	r3, r9
 801d3d2:	f7e3 f921 	bl	8000618 <__aeabi_dmul>
 801d3d6:	a366      	add	r3, pc, #408	; (adr r3, 801d570 <atan+0x2e8>)
 801d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3dc:	4680      	mov	r8, r0
 801d3de:	4689      	mov	r9, r1
 801d3e0:	4630      	mov	r0, r6
 801d3e2:	4639      	mov	r1, r7
 801d3e4:	f7e3 f918 	bl	8000618 <__aeabi_dmul>
 801d3e8:	a363      	add	r3, pc, #396	; (adr r3, 801d578 <atan+0x2f0>)
 801d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ee:	f7e2 ff5b 	bl	80002a8 <__aeabi_dsub>
 801d3f2:	4632      	mov	r2, r6
 801d3f4:	463b      	mov	r3, r7
 801d3f6:	f7e3 f90f 	bl	8000618 <__aeabi_dmul>
 801d3fa:	a361      	add	r3, pc, #388	; (adr r3, 801d580 <atan+0x2f8>)
 801d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d400:	f7e2 ff52 	bl	80002a8 <__aeabi_dsub>
 801d404:	4632      	mov	r2, r6
 801d406:	463b      	mov	r3, r7
 801d408:	f7e3 f906 	bl	8000618 <__aeabi_dmul>
 801d40c:	a35e      	add	r3, pc, #376	; (adr r3, 801d588 <atan+0x300>)
 801d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d412:	f7e2 ff49 	bl	80002a8 <__aeabi_dsub>
 801d416:	4632      	mov	r2, r6
 801d418:	463b      	mov	r3, r7
 801d41a:	f7e3 f8fd 	bl	8000618 <__aeabi_dmul>
 801d41e:	a35c      	add	r3, pc, #368	; (adr r3, 801d590 <atan+0x308>)
 801d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d424:	f7e2 ff40 	bl	80002a8 <__aeabi_dsub>
 801d428:	4632      	mov	r2, r6
 801d42a:	463b      	mov	r3, r7
 801d42c:	f7e3 f8f4 	bl	8000618 <__aeabi_dmul>
 801d430:	4602      	mov	r2, r0
 801d432:	460b      	mov	r3, r1
 801d434:	4640      	mov	r0, r8
 801d436:	4649      	mov	r1, r9
 801d438:	f7e2 ff38 	bl	80002ac <__adddf3>
 801d43c:	4622      	mov	r2, r4
 801d43e:	462b      	mov	r3, r5
 801d440:	f7e3 f8ea 	bl	8000618 <__aeabi_dmul>
 801d444:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d448:	4602      	mov	r2, r0
 801d44a:	460b      	mov	r3, r1
 801d44c:	d14b      	bne.n	801d4e6 <atan+0x25e>
 801d44e:	4620      	mov	r0, r4
 801d450:	4629      	mov	r1, r5
 801d452:	f7e2 ff29 	bl	80002a8 <__aeabi_dsub>
 801d456:	e72c      	b.n	801d2b2 <atan+0x2a>
 801d458:	ee10 0a10 	vmov	r0, s0
 801d45c:	2200      	movs	r2, #0
 801d45e:	4b53      	ldr	r3, [pc, #332]	; (801d5ac <atan+0x324>)
 801d460:	4629      	mov	r1, r5
 801d462:	f7e2 ff21 	bl	80002a8 <__aeabi_dsub>
 801d466:	2200      	movs	r2, #0
 801d468:	4606      	mov	r6, r0
 801d46a:	460f      	mov	r7, r1
 801d46c:	4b4f      	ldr	r3, [pc, #316]	; (801d5ac <atan+0x324>)
 801d46e:	4620      	mov	r0, r4
 801d470:	4629      	mov	r1, r5
 801d472:	f7e2 ff1b 	bl	80002ac <__adddf3>
 801d476:	4602      	mov	r2, r0
 801d478:	460b      	mov	r3, r1
 801d47a:	4630      	mov	r0, r6
 801d47c:	4639      	mov	r1, r7
 801d47e:	f7e3 f9f5 	bl	800086c <__aeabi_ddiv>
 801d482:	f04f 0a01 	mov.w	sl, #1
 801d486:	4604      	mov	r4, r0
 801d488:	460d      	mov	r5, r1
 801d48a:	e764      	b.n	801d356 <atan+0xce>
 801d48c:	4b49      	ldr	r3, [pc, #292]	; (801d5b4 <atan+0x32c>)
 801d48e:	429e      	cmp	r6, r3
 801d490:	dc1d      	bgt.n	801d4ce <atan+0x246>
 801d492:	ee10 0a10 	vmov	r0, s0
 801d496:	2200      	movs	r2, #0
 801d498:	4b47      	ldr	r3, [pc, #284]	; (801d5b8 <atan+0x330>)
 801d49a:	4629      	mov	r1, r5
 801d49c:	f7e2 ff04 	bl	80002a8 <__aeabi_dsub>
 801d4a0:	2200      	movs	r2, #0
 801d4a2:	4606      	mov	r6, r0
 801d4a4:	460f      	mov	r7, r1
 801d4a6:	4b44      	ldr	r3, [pc, #272]	; (801d5b8 <atan+0x330>)
 801d4a8:	4620      	mov	r0, r4
 801d4aa:	4629      	mov	r1, r5
 801d4ac:	f7e3 f8b4 	bl	8000618 <__aeabi_dmul>
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	4b3e      	ldr	r3, [pc, #248]	; (801d5ac <atan+0x324>)
 801d4b4:	f7e2 fefa 	bl	80002ac <__adddf3>
 801d4b8:	4602      	mov	r2, r0
 801d4ba:	460b      	mov	r3, r1
 801d4bc:	4630      	mov	r0, r6
 801d4be:	4639      	mov	r1, r7
 801d4c0:	f7e3 f9d4 	bl	800086c <__aeabi_ddiv>
 801d4c4:	f04f 0a02 	mov.w	sl, #2
 801d4c8:	4604      	mov	r4, r0
 801d4ca:	460d      	mov	r5, r1
 801d4cc:	e743      	b.n	801d356 <atan+0xce>
 801d4ce:	462b      	mov	r3, r5
 801d4d0:	ee10 2a10 	vmov	r2, s0
 801d4d4:	2000      	movs	r0, #0
 801d4d6:	4939      	ldr	r1, [pc, #228]	; (801d5bc <atan+0x334>)
 801d4d8:	f7e3 f9c8 	bl	800086c <__aeabi_ddiv>
 801d4dc:	f04f 0a03 	mov.w	sl, #3
 801d4e0:	4604      	mov	r4, r0
 801d4e2:	460d      	mov	r5, r1
 801d4e4:	e737      	b.n	801d356 <atan+0xce>
 801d4e6:	4b36      	ldr	r3, [pc, #216]	; (801d5c0 <atan+0x338>)
 801d4e8:	4e36      	ldr	r6, [pc, #216]	; (801d5c4 <atan+0x33c>)
 801d4ea:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d4ee:	4456      	add	r6, sl
 801d4f0:	449a      	add	sl, r3
 801d4f2:	e9da 2300 	ldrd	r2, r3, [sl]
 801d4f6:	f7e2 fed7 	bl	80002a8 <__aeabi_dsub>
 801d4fa:	4622      	mov	r2, r4
 801d4fc:	462b      	mov	r3, r5
 801d4fe:	f7e2 fed3 	bl	80002a8 <__aeabi_dsub>
 801d502:	4602      	mov	r2, r0
 801d504:	460b      	mov	r3, r1
 801d506:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d50a:	f7e2 fecd 	bl	80002a8 <__aeabi_dsub>
 801d50e:	f1bb 0f00 	cmp.w	fp, #0
 801d512:	4604      	mov	r4, r0
 801d514:	460d      	mov	r5, r1
 801d516:	f6bf aed6 	bge.w	801d2c6 <atan+0x3e>
 801d51a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d51e:	461d      	mov	r5, r3
 801d520:	e6d1      	b.n	801d2c6 <atan+0x3e>
 801d522:	a51d      	add	r5, pc, #116	; (adr r5, 801d598 <atan+0x310>)
 801d524:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d528:	e6cd      	b.n	801d2c6 <atan+0x3e>
 801d52a:	bf00      	nop
 801d52c:	f3af 8000 	nop.w
 801d530:	54442d18 	.word	0x54442d18
 801d534:	3ff921fb 	.word	0x3ff921fb
 801d538:	8800759c 	.word	0x8800759c
 801d53c:	7e37e43c 	.word	0x7e37e43c
 801d540:	e322da11 	.word	0xe322da11
 801d544:	3f90ad3a 	.word	0x3f90ad3a
 801d548:	24760deb 	.word	0x24760deb
 801d54c:	3fa97b4b 	.word	0x3fa97b4b
 801d550:	a0d03d51 	.word	0xa0d03d51
 801d554:	3fb10d66 	.word	0x3fb10d66
 801d558:	c54c206e 	.word	0xc54c206e
 801d55c:	3fb745cd 	.word	0x3fb745cd
 801d560:	920083ff 	.word	0x920083ff
 801d564:	3fc24924 	.word	0x3fc24924
 801d568:	5555550d 	.word	0x5555550d
 801d56c:	3fd55555 	.word	0x3fd55555
 801d570:	2c6a6c2f 	.word	0x2c6a6c2f
 801d574:	bfa2b444 	.word	0xbfa2b444
 801d578:	52defd9a 	.word	0x52defd9a
 801d57c:	3fadde2d 	.word	0x3fadde2d
 801d580:	af749a6d 	.word	0xaf749a6d
 801d584:	3fb3b0f2 	.word	0x3fb3b0f2
 801d588:	fe231671 	.word	0xfe231671
 801d58c:	3fbc71c6 	.word	0x3fbc71c6
 801d590:	9998ebc4 	.word	0x9998ebc4
 801d594:	3fc99999 	.word	0x3fc99999
 801d598:	54442d18 	.word	0x54442d18
 801d59c:	bff921fb 	.word	0xbff921fb
 801d5a0:	440fffff 	.word	0x440fffff
 801d5a4:	7ff00000 	.word	0x7ff00000
 801d5a8:	3fdbffff 	.word	0x3fdbffff
 801d5ac:	3ff00000 	.word	0x3ff00000
 801d5b0:	3ff2ffff 	.word	0x3ff2ffff
 801d5b4:	40037fff 	.word	0x40037fff
 801d5b8:	3ff80000 	.word	0x3ff80000
 801d5bc:	bff00000 	.word	0xbff00000
 801d5c0:	08022ae8 	.word	0x08022ae8
 801d5c4:	08022ac8 	.word	0x08022ac8

0801d5c8 <fabs>:
 801d5c8:	ec51 0b10 	vmov	r0, r1, d0
 801d5cc:	ee10 2a10 	vmov	r2, s0
 801d5d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d5d4:	ec43 2b10 	vmov	d0, r2, r3
 801d5d8:	4770      	bx	lr

0801d5da <matherr>:
 801d5da:	2000      	movs	r0, #0
 801d5dc:	4770      	bx	lr
	...

0801d5e0 <nan>:
 801d5e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d5e8 <nan+0x8>
 801d5e4:	4770      	bx	lr
 801d5e6:	bf00      	nop
 801d5e8:	00000000 	.word	0x00000000
 801d5ec:	7ff80000 	.word	0x7ff80000

0801d5f0 <fabsf>:
 801d5f0:	ee10 3a10 	vmov	r3, s0
 801d5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d5f8:	ee00 3a10 	vmov	s0, r3
 801d5fc:	4770      	bx	lr
	...

0801d600 <scalbnf>:
 801d600:	b508      	push	{r3, lr}
 801d602:	ee10 2a10 	vmov	r2, s0
 801d606:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801d60a:	ed2d 8b02 	vpush	{d8}
 801d60e:	eef0 0a40 	vmov.f32	s1, s0
 801d612:	d004      	beq.n	801d61e <scalbnf+0x1e>
 801d614:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d618:	d306      	bcc.n	801d628 <scalbnf+0x28>
 801d61a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801d61e:	ecbd 8b02 	vpop	{d8}
 801d622:	eeb0 0a60 	vmov.f32	s0, s1
 801d626:	bd08      	pop	{r3, pc}
 801d628:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d62c:	d21c      	bcs.n	801d668 <scalbnf+0x68>
 801d62e:	4b1f      	ldr	r3, [pc, #124]	; (801d6ac <scalbnf+0xac>)
 801d630:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801d6b0 <scalbnf+0xb0>
 801d634:	4298      	cmp	r0, r3
 801d636:	ee60 0a27 	vmul.f32	s1, s0, s15
 801d63a:	db10      	blt.n	801d65e <scalbnf+0x5e>
 801d63c:	ee10 2a90 	vmov	r2, s1
 801d640:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801d644:	3b19      	subs	r3, #25
 801d646:	4403      	add	r3, r0
 801d648:	2bfe      	cmp	r3, #254	; 0xfe
 801d64a:	dd0f      	ble.n	801d66c <scalbnf+0x6c>
 801d64c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801d6b4 <scalbnf+0xb4>
 801d650:	eeb0 0a48 	vmov.f32	s0, s16
 801d654:	f000 f834 	bl	801d6c0 <copysignf>
 801d658:	ee60 0a08 	vmul.f32	s1, s0, s16
 801d65c:	e7df      	b.n	801d61e <scalbnf+0x1e>
 801d65e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801d6b8 <scalbnf+0xb8>
 801d662:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801d666:	e7da      	b.n	801d61e <scalbnf+0x1e>
 801d668:	0ddb      	lsrs	r3, r3, #23
 801d66a:	e7ec      	b.n	801d646 <scalbnf+0x46>
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	dd06      	ble.n	801d67e <scalbnf+0x7e>
 801d670:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801d674:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801d678:	ee00 3a90 	vmov	s1, r3
 801d67c:	e7cf      	b.n	801d61e <scalbnf+0x1e>
 801d67e:	f113 0f16 	cmn.w	r3, #22
 801d682:	da06      	bge.n	801d692 <scalbnf+0x92>
 801d684:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d688:	4298      	cmp	r0, r3
 801d68a:	dcdf      	bgt.n	801d64c <scalbnf+0x4c>
 801d68c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801d6b8 <scalbnf+0xb8>
 801d690:	e7de      	b.n	801d650 <scalbnf+0x50>
 801d692:	3319      	adds	r3, #25
 801d694:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801d698:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801d69c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801d6bc <scalbnf+0xbc>
 801d6a0:	ee07 3a10 	vmov	s14, r3
 801d6a4:	ee67 0a27 	vmul.f32	s1, s14, s15
 801d6a8:	e7b9      	b.n	801d61e <scalbnf+0x1e>
 801d6aa:	bf00      	nop
 801d6ac:	ffff3cb0 	.word	0xffff3cb0
 801d6b0:	4c000000 	.word	0x4c000000
 801d6b4:	7149f2ca 	.word	0x7149f2ca
 801d6b8:	0da24260 	.word	0x0da24260
 801d6bc:	33000000 	.word	0x33000000

0801d6c0 <copysignf>:
 801d6c0:	ee10 3a10 	vmov	r3, s0
 801d6c4:	ee10 2a90 	vmov	r2, s1
 801d6c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d6cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801d6d0:	4313      	orrs	r3, r2
 801d6d2:	ee00 3a10 	vmov	s0, r3
 801d6d6:	4770      	bx	lr

0801d6d8 <__assert_func>:
 801d6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d6da:	461c      	mov	r4, r3
 801d6dc:	4b09      	ldr	r3, [pc, #36]	; (801d704 <__assert_func+0x2c>)
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	4605      	mov	r5, r0
 801d6e2:	68d8      	ldr	r0, [r3, #12]
 801d6e4:	b152      	cbz	r2, 801d6fc <__assert_func+0x24>
 801d6e6:	4b08      	ldr	r3, [pc, #32]	; (801d708 <__assert_func+0x30>)
 801d6e8:	9100      	str	r1, [sp, #0]
 801d6ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d6ee:	4907      	ldr	r1, [pc, #28]	; (801d70c <__assert_func+0x34>)
 801d6f0:	462b      	mov	r3, r5
 801d6f2:	4622      	mov	r2, r4
 801d6f4:	f000 f814 	bl	801d720 <fiprintf>
 801d6f8:	f002 f888 	bl	801f80c <abort>
 801d6fc:	4b04      	ldr	r3, [pc, #16]	; (801d710 <__assert_func+0x38>)
 801d6fe:	461a      	mov	r2, r3
 801d700:	e7f2      	b.n	801d6e8 <__assert_func+0x10>
 801d702:	bf00      	nop
 801d704:	200000e0 	.word	0x200000e0
 801d708:	08022b08 	.word	0x08022b08
 801d70c:	08022b15 	.word	0x08022b15
 801d710:	08022b43 	.word	0x08022b43

0801d714 <__errno>:
 801d714:	4b01      	ldr	r3, [pc, #4]	; (801d71c <__errno+0x8>)
 801d716:	6818      	ldr	r0, [r3, #0]
 801d718:	4770      	bx	lr
 801d71a:	bf00      	nop
 801d71c:	200000e0 	.word	0x200000e0

0801d720 <fiprintf>:
 801d720:	b40e      	push	{r1, r2, r3}
 801d722:	b503      	push	{r0, r1, lr}
 801d724:	4601      	mov	r1, r0
 801d726:	ab03      	add	r3, sp, #12
 801d728:	4805      	ldr	r0, [pc, #20]	; (801d740 <fiprintf+0x20>)
 801d72a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d72e:	6800      	ldr	r0, [r0, #0]
 801d730:	9301      	str	r3, [sp, #4]
 801d732:	f000 f867 	bl	801d804 <_vfiprintf_r>
 801d736:	b002      	add	sp, #8
 801d738:	f85d eb04 	ldr.w	lr, [sp], #4
 801d73c:	b003      	add	sp, #12
 801d73e:	4770      	bx	lr
 801d740:	200000e0 	.word	0x200000e0

0801d744 <__libc_init_array>:
 801d744:	b570      	push	{r4, r5, r6, lr}
 801d746:	4e0d      	ldr	r6, [pc, #52]	; (801d77c <__libc_init_array+0x38>)
 801d748:	4c0d      	ldr	r4, [pc, #52]	; (801d780 <__libc_init_array+0x3c>)
 801d74a:	1ba4      	subs	r4, r4, r6
 801d74c:	10a4      	asrs	r4, r4, #2
 801d74e:	2500      	movs	r5, #0
 801d750:	42a5      	cmp	r5, r4
 801d752:	d109      	bne.n	801d768 <__libc_init_array+0x24>
 801d754:	4e0b      	ldr	r6, [pc, #44]	; (801d784 <__libc_init_array+0x40>)
 801d756:	4c0c      	ldr	r4, [pc, #48]	; (801d788 <__libc_init_array+0x44>)
 801d758:	f004 fb46 	bl	8021de8 <_init>
 801d75c:	1ba4      	subs	r4, r4, r6
 801d75e:	10a4      	asrs	r4, r4, #2
 801d760:	2500      	movs	r5, #0
 801d762:	42a5      	cmp	r5, r4
 801d764:	d105      	bne.n	801d772 <__libc_init_array+0x2e>
 801d766:	bd70      	pop	{r4, r5, r6, pc}
 801d768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d76c:	4798      	blx	r3
 801d76e:	3501      	adds	r5, #1
 801d770:	e7ee      	b.n	801d750 <__libc_init_array+0xc>
 801d772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d776:	4798      	blx	r3
 801d778:	3501      	adds	r5, #1
 801d77a:	e7f2      	b.n	801d762 <__libc_init_array+0x1e>
 801d77c:	08022e70 	.word	0x08022e70
 801d780:	08022e70 	.word	0x08022e70
 801d784:	08022e70 	.word	0x08022e70
 801d788:	08022e80 	.word	0x08022e80

0801d78c <memcpy>:
 801d78c:	b510      	push	{r4, lr}
 801d78e:	1e43      	subs	r3, r0, #1
 801d790:	440a      	add	r2, r1
 801d792:	4291      	cmp	r1, r2
 801d794:	d100      	bne.n	801d798 <memcpy+0xc>
 801d796:	bd10      	pop	{r4, pc}
 801d798:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d79c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d7a0:	e7f7      	b.n	801d792 <memcpy+0x6>

0801d7a2 <memset>:
 801d7a2:	4402      	add	r2, r0
 801d7a4:	4603      	mov	r3, r0
 801d7a6:	4293      	cmp	r3, r2
 801d7a8:	d100      	bne.n	801d7ac <memset+0xa>
 801d7aa:	4770      	bx	lr
 801d7ac:	f803 1b01 	strb.w	r1, [r3], #1
 801d7b0:	e7f9      	b.n	801d7a6 <memset+0x4>

0801d7b2 <__sfputc_r>:
 801d7b2:	6893      	ldr	r3, [r2, #8]
 801d7b4:	3b01      	subs	r3, #1
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	b410      	push	{r4}
 801d7ba:	6093      	str	r3, [r2, #8]
 801d7bc:	da08      	bge.n	801d7d0 <__sfputc_r+0x1e>
 801d7be:	6994      	ldr	r4, [r2, #24]
 801d7c0:	42a3      	cmp	r3, r4
 801d7c2:	db01      	blt.n	801d7c8 <__sfputc_r+0x16>
 801d7c4:	290a      	cmp	r1, #10
 801d7c6:	d103      	bne.n	801d7d0 <__sfputc_r+0x1e>
 801d7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7cc:	f001 bf5e 	b.w	801f68c <__swbuf_r>
 801d7d0:	6813      	ldr	r3, [r2, #0]
 801d7d2:	1c58      	adds	r0, r3, #1
 801d7d4:	6010      	str	r0, [r2, #0]
 801d7d6:	7019      	strb	r1, [r3, #0]
 801d7d8:	4608      	mov	r0, r1
 801d7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7de:	4770      	bx	lr

0801d7e0 <__sfputs_r>:
 801d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7e2:	4606      	mov	r6, r0
 801d7e4:	460f      	mov	r7, r1
 801d7e6:	4614      	mov	r4, r2
 801d7e8:	18d5      	adds	r5, r2, r3
 801d7ea:	42ac      	cmp	r4, r5
 801d7ec:	d101      	bne.n	801d7f2 <__sfputs_r+0x12>
 801d7ee:	2000      	movs	r0, #0
 801d7f0:	e007      	b.n	801d802 <__sfputs_r+0x22>
 801d7f2:	463a      	mov	r2, r7
 801d7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7f8:	4630      	mov	r0, r6
 801d7fa:	f7ff ffda 	bl	801d7b2 <__sfputc_r>
 801d7fe:	1c43      	adds	r3, r0, #1
 801d800:	d1f3      	bne.n	801d7ea <__sfputs_r+0xa>
 801d802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d804 <_vfiprintf_r>:
 801d804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d808:	460c      	mov	r4, r1
 801d80a:	b09d      	sub	sp, #116	; 0x74
 801d80c:	4617      	mov	r7, r2
 801d80e:	461d      	mov	r5, r3
 801d810:	4606      	mov	r6, r0
 801d812:	b118      	cbz	r0, 801d81c <_vfiprintf_r+0x18>
 801d814:	6983      	ldr	r3, [r0, #24]
 801d816:	b90b      	cbnz	r3, 801d81c <_vfiprintf_r+0x18>
 801d818:	f002 ff36 	bl	8020688 <__sinit>
 801d81c:	4b7c      	ldr	r3, [pc, #496]	; (801da10 <_vfiprintf_r+0x20c>)
 801d81e:	429c      	cmp	r4, r3
 801d820:	d158      	bne.n	801d8d4 <_vfiprintf_r+0xd0>
 801d822:	6874      	ldr	r4, [r6, #4]
 801d824:	89a3      	ldrh	r3, [r4, #12]
 801d826:	0718      	lsls	r0, r3, #28
 801d828:	d55e      	bpl.n	801d8e8 <_vfiprintf_r+0xe4>
 801d82a:	6923      	ldr	r3, [r4, #16]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d05b      	beq.n	801d8e8 <_vfiprintf_r+0xe4>
 801d830:	2300      	movs	r3, #0
 801d832:	9309      	str	r3, [sp, #36]	; 0x24
 801d834:	2320      	movs	r3, #32
 801d836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d83a:	2330      	movs	r3, #48	; 0x30
 801d83c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d840:	9503      	str	r5, [sp, #12]
 801d842:	f04f 0b01 	mov.w	fp, #1
 801d846:	46b8      	mov	r8, r7
 801d848:	4645      	mov	r5, r8
 801d84a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d84e:	b10b      	cbz	r3, 801d854 <_vfiprintf_r+0x50>
 801d850:	2b25      	cmp	r3, #37	; 0x25
 801d852:	d154      	bne.n	801d8fe <_vfiprintf_r+0xfa>
 801d854:	ebb8 0a07 	subs.w	sl, r8, r7
 801d858:	d00b      	beq.n	801d872 <_vfiprintf_r+0x6e>
 801d85a:	4653      	mov	r3, sl
 801d85c:	463a      	mov	r2, r7
 801d85e:	4621      	mov	r1, r4
 801d860:	4630      	mov	r0, r6
 801d862:	f7ff ffbd 	bl	801d7e0 <__sfputs_r>
 801d866:	3001      	adds	r0, #1
 801d868:	f000 80c2 	beq.w	801d9f0 <_vfiprintf_r+0x1ec>
 801d86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d86e:	4453      	add	r3, sl
 801d870:	9309      	str	r3, [sp, #36]	; 0x24
 801d872:	f898 3000 	ldrb.w	r3, [r8]
 801d876:	2b00      	cmp	r3, #0
 801d878:	f000 80ba 	beq.w	801d9f0 <_vfiprintf_r+0x1ec>
 801d87c:	2300      	movs	r3, #0
 801d87e:	f04f 32ff 	mov.w	r2, #4294967295
 801d882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d886:	9304      	str	r3, [sp, #16]
 801d888:	9307      	str	r3, [sp, #28]
 801d88a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d88e:	931a      	str	r3, [sp, #104]	; 0x68
 801d890:	46a8      	mov	r8, r5
 801d892:	2205      	movs	r2, #5
 801d894:	f818 1b01 	ldrb.w	r1, [r8], #1
 801d898:	485e      	ldr	r0, [pc, #376]	; (801da14 <_vfiprintf_r+0x210>)
 801d89a:	f7e2 fcb1 	bl	8000200 <memchr>
 801d89e:	9b04      	ldr	r3, [sp, #16]
 801d8a0:	bb78      	cbnz	r0, 801d902 <_vfiprintf_r+0xfe>
 801d8a2:	06d9      	lsls	r1, r3, #27
 801d8a4:	bf44      	itt	mi
 801d8a6:	2220      	movmi	r2, #32
 801d8a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d8ac:	071a      	lsls	r2, r3, #28
 801d8ae:	bf44      	itt	mi
 801d8b0:	222b      	movmi	r2, #43	; 0x2b
 801d8b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d8b6:	782a      	ldrb	r2, [r5, #0]
 801d8b8:	2a2a      	cmp	r2, #42	; 0x2a
 801d8ba:	d02a      	beq.n	801d912 <_vfiprintf_r+0x10e>
 801d8bc:	9a07      	ldr	r2, [sp, #28]
 801d8be:	46a8      	mov	r8, r5
 801d8c0:	2000      	movs	r0, #0
 801d8c2:	250a      	movs	r5, #10
 801d8c4:	4641      	mov	r1, r8
 801d8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8ca:	3b30      	subs	r3, #48	; 0x30
 801d8cc:	2b09      	cmp	r3, #9
 801d8ce:	d969      	bls.n	801d9a4 <_vfiprintf_r+0x1a0>
 801d8d0:	b360      	cbz	r0, 801d92c <_vfiprintf_r+0x128>
 801d8d2:	e024      	b.n	801d91e <_vfiprintf_r+0x11a>
 801d8d4:	4b50      	ldr	r3, [pc, #320]	; (801da18 <_vfiprintf_r+0x214>)
 801d8d6:	429c      	cmp	r4, r3
 801d8d8:	d101      	bne.n	801d8de <_vfiprintf_r+0xda>
 801d8da:	68b4      	ldr	r4, [r6, #8]
 801d8dc:	e7a2      	b.n	801d824 <_vfiprintf_r+0x20>
 801d8de:	4b4f      	ldr	r3, [pc, #316]	; (801da1c <_vfiprintf_r+0x218>)
 801d8e0:	429c      	cmp	r4, r3
 801d8e2:	bf08      	it	eq
 801d8e4:	68f4      	ldreq	r4, [r6, #12]
 801d8e6:	e79d      	b.n	801d824 <_vfiprintf_r+0x20>
 801d8e8:	4621      	mov	r1, r4
 801d8ea:	4630      	mov	r0, r6
 801d8ec:	f001 ff20 	bl	801f730 <__swsetup_r>
 801d8f0:	2800      	cmp	r0, #0
 801d8f2:	d09d      	beq.n	801d830 <_vfiprintf_r+0x2c>
 801d8f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d8f8:	b01d      	add	sp, #116	; 0x74
 801d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8fe:	46a8      	mov	r8, r5
 801d900:	e7a2      	b.n	801d848 <_vfiprintf_r+0x44>
 801d902:	4a44      	ldr	r2, [pc, #272]	; (801da14 <_vfiprintf_r+0x210>)
 801d904:	1a80      	subs	r0, r0, r2
 801d906:	fa0b f000 	lsl.w	r0, fp, r0
 801d90a:	4318      	orrs	r0, r3
 801d90c:	9004      	str	r0, [sp, #16]
 801d90e:	4645      	mov	r5, r8
 801d910:	e7be      	b.n	801d890 <_vfiprintf_r+0x8c>
 801d912:	9a03      	ldr	r2, [sp, #12]
 801d914:	1d11      	adds	r1, r2, #4
 801d916:	6812      	ldr	r2, [r2, #0]
 801d918:	9103      	str	r1, [sp, #12]
 801d91a:	2a00      	cmp	r2, #0
 801d91c:	db01      	blt.n	801d922 <_vfiprintf_r+0x11e>
 801d91e:	9207      	str	r2, [sp, #28]
 801d920:	e004      	b.n	801d92c <_vfiprintf_r+0x128>
 801d922:	4252      	negs	r2, r2
 801d924:	f043 0302 	orr.w	r3, r3, #2
 801d928:	9207      	str	r2, [sp, #28]
 801d92a:	9304      	str	r3, [sp, #16]
 801d92c:	f898 3000 	ldrb.w	r3, [r8]
 801d930:	2b2e      	cmp	r3, #46	; 0x2e
 801d932:	d10e      	bne.n	801d952 <_vfiprintf_r+0x14e>
 801d934:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d938:	2b2a      	cmp	r3, #42	; 0x2a
 801d93a:	d138      	bne.n	801d9ae <_vfiprintf_r+0x1aa>
 801d93c:	9b03      	ldr	r3, [sp, #12]
 801d93e:	1d1a      	adds	r2, r3, #4
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	9203      	str	r2, [sp, #12]
 801d944:	2b00      	cmp	r3, #0
 801d946:	bfb8      	it	lt
 801d948:	f04f 33ff 	movlt.w	r3, #4294967295
 801d94c:	f108 0802 	add.w	r8, r8, #2
 801d950:	9305      	str	r3, [sp, #20]
 801d952:	4d33      	ldr	r5, [pc, #204]	; (801da20 <_vfiprintf_r+0x21c>)
 801d954:	f898 1000 	ldrb.w	r1, [r8]
 801d958:	2203      	movs	r2, #3
 801d95a:	4628      	mov	r0, r5
 801d95c:	f7e2 fc50 	bl	8000200 <memchr>
 801d960:	b140      	cbz	r0, 801d974 <_vfiprintf_r+0x170>
 801d962:	2340      	movs	r3, #64	; 0x40
 801d964:	1b40      	subs	r0, r0, r5
 801d966:	fa03 f000 	lsl.w	r0, r3, r0
 801d96a:	9b04      	ldr	r3, [sp, #16]
 801d96c:	4303      	orrs	r3, r0
 801d96e:	f108 0801 	add.w	r8, r8, #1
 801d972:	9304      	str	r3, [sp, #16]
 801d974:	f898 1000 	ldrb.w	r1, [r8]
 801d978:	482a      	ldr	r0, [pc, #168]	; (801da24 <_vfiprintf_r+0x220>)
 801d97a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d97e:	2206      	movs	r2, #6
 801d980:	f108 0701 	add.w	r7, r8, #1
 801d984:	f7e2 fc3c 	bl	8000200 <memchr>
 801d988:	2800      	cmp	r0, #0
 801d98a:	d037      	beq.n	801d9fc <_vfiprintf_r+0x1f8>
 801d98c:	4b26      	ldr	r3, [pc, #152]	; (801da28 <_vfiprintf_r+0x224>)
 801d98e:	bb1b      	cbnz	r3, 801d9d8 <_vfiprintf_r+0x1d4>
 801d990:	9b03      	ldr	r3, [sp, #12]
 801d992:	3307      	adds	r3, #7
 801d994:	f023 0307 	bic.w	r3, r3, #7
 801d998:	3308      	adds	r3, #8
 801d99a:	9303      	str	r3, [sp, #12]
 801d99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d99e:	444b      	add	r3, r9
 801d9a0:	9309      	str	r3, [sp, #36]	; 0x24
 801d9a2:	e750      	b.n	801d846 <_vfiprintf_r+0x42>
 801d9a4:	fb05 3202 	mla	r2, r5, r2, r3
 801d9a8:	2001      	movs	r0, #1
 801d9aa:	4688      	mov	r8, r1
 801d9ac:	e78a      	b.n	801d8c4 <_vfiprintf_r+0xc0>
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	f108 0801 	add.w	r8, r8, #1
 801d9b4:	9305      	str	r3, [sp, #20]
 801d9b6:	4619      	mov	r1, r3
 801d9b8:	250a      	movs	r5, #10
 801d9ba:	4640      	mov	r0, r8
 801d9bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9c0:	3a30      	subs	r2, #48	; 0x30
 801d9c2:	2a09      	cmp	r2, #9
 801d9c4:	d903      	bls.n	801d9ce <_vfiprintf_r+0x1ca>
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d0c3      	beq.n	801d952 <_vfiprintf_r+0x14e>
 801d9ca:	9105      	str	r1, [sp, #20]
 801d9cc:	e7c1      	b.n	801d952 <_vfiprintf_r+0x14e>
 801d9ce:	fb05 2101 	mla	r1, r5, r1, r2
 801d9d2:	2301      	movs	r3, #1
 801d9d4:	4680      	mov	r8, r0
 801d9d6:	e7f0      	b.n	801d9ba <_vfiprintf_r+0x1b6>
 801d9d8:	ab03      	add	r3, sp, #12
 801d9da:	9300      	str	r3, [sp, #0]
 801d9dc:	4622      	mov	r2, r4
 801d9de:	4b13      	ldr	r3, [pc, #76]	; (801da2c <_vfiprintf_r+0x228>)
 801d9e0:	a904      	add	r1, sp, #16
 801d9e2:	4630      	mov	r0, r6
 801d9e4:	f000 f8b8 	bl	801db58 <_printf_float>
 801d9e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d9ec:	4681      	mov	r9, r0
 801d9ee:	d1d5      	bne.n	801d99c <_vfiprintf_r+0x198>
 801d9f0:	89a3      	ldrh	r3, [r4, #12]
 801d9f2:	065b      	lsls	r3, r3, #25
 801d9f4:	f53f af7e 	bmi.w	801d8f4 <_vfiprintf_r+0xf0>
 801d9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9fa:	e77d      	b.n	801d8f8 <_vfiprintf_r+0xf4>
 801d9fc:	ab03      	add	r3, sp, #12
 801d9fe:	9300      	str	r3, [sp, #0]
 801da00:	4622      	mov	r2, r4
 801da02:	4b0a      	ldr	r3, [pc, #40]	; (801da2c <_vfiprintf_r+0x228>)
 801da04:	a904      	add	r1, sp, #16
 801da06:	4630      	mov	r0, r6
 801da08:	f000 fb5c 	bl	801e0c4 <_printf_i>
 801da0c:	e7ec      	b.n	801d9e8 <_vfiprintf_r+0x1e4>
 801da0e:	bf00      	nop
 801da10:	08022c18 	.word	0x08022c18
 801da14:	08022b48 	.word	0x08022b48
 801da18:	08022c38 	.word	0x08022c38
 801da1c:	08022bf8 	.word	0x08022bf8
 801da20:	08022b4e 	.word	0x08022b4e
 801da24:	08022b52 	.word	0x08022b52
 801da28:	0801db59 	.word	0x0801db59
 801da2c:	0801d7e1 	.word	0x0801d7e1

0801da30 <__cvt>:
 801da30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801da34:	ec55 4b10 	vmov	r4, r5, d0
 801da38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801da3a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801da3e:	2d00      	cmp	r5, #0
 801da40:	460e      	mov	r6, r1
 801da42:	4691      	mov	r9, r2
 801da44:	4619      	mov	r1, r3
 801da46:	bfb8      	it	lt
 801da48:	4622      	movlt	r2, r4
 801da4a:	462b      	mov	r3, r5
 801da4c:	f027 0720 	bic.w	r7, r7, #32
 801da50:	bfbb      	ittet	lt
 801da52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801da56:	461d      	movlt	r5, r3
 801da58:	2300      	movge	r3, #0
 801da5a:	232d      	movlt	r3, #45	; 0x2d
 801da5c:	bfb8      	it	lt
 801da5e:	4614      	movlt	r4, r2
 801da60:	2f46      	cmp	r7, #70	; 0x46
 801da62:	700b      	strb	r3, [r1, #0]
 801da64:	d004      	beq.n	801da70 <__cvt+0x40>
 801da66:	2f45      	cmp	r7, #69	; 0x45
 801da68:	d100      	bne.n	801da6c <__cvt+0x3c>
 801da6a:	3601      	adds	r6, #1
 801da6c:	2102      	movs	r1, #2
 801da6e:	e000      	b.n	801da72 <__cvt+0x42>
 801da70:	2103      	movs	r1, #3
 801da72:	ab03      	add	r3, sp, #12
 801da74:	9301      	str	r3, [sp, #4]
 801da76:	ab02      	add	r3, sp, #8
 801da78:	9300      	str	r3, [sp, #0]
 801da7a:	4632      	mov	r2, r6
 801da7c:	4653      	mov	r3, sl
 801da7e:	ec45 4b10 	vmov	d0, r4, r5
 801da82:	f001 ff59 	bl	801f938 <_dtoa_r>
 801da86:	2f47      	cmp	r7, #71	; 0x47
 801da88:	4680      	mov	r8, r0
 801da8a:	d102      	bne.n	801da92 <__cvt+0x62>
 801da8c:	f019 0f01 	tst.w	r9, #1
 801da90:	d026      	beq.n	801dae0 <__cvt+0xb0>
 801da92:	2f46      	cmp	r7, #70	; 0x46
 801da94:	eb08 0906 	add.w	r9, r8, r6
 801da98:	d111      	bne.n	801dabe <__cvt+0x8e>
 801da9a:	f898 3000 	ldrb.w	r3, [r8]
 801da9e:	2b30      	cmp	r3, #48	; 0x30
 801daa0:	d10a      	bne.n	801dab8 <__cvt+0x88>
 801daa2:	2200      	movs	r2, #0
 801daa4:	2300      	movs	r3, #0
 801daa6:	4620      	mov	r0, r4
 801daa8:	4629      	mov	r1, r5
 801daaa:	f7e3 f81d 	bl	8000ae8 <__aeabi_dcmpeq>
 801daae:	b918      	cbnz	r0, 801dab8 <__cvt+0x88>
 801dab0:	f1c6 0601 	rsb	r6, r6, #1
 801dab4:	f8ca 6000 	str.w	r6, [sl]
 801dab8:	f8da 3000 	ldr.w	r3, [sl]
 801dabc:	4499      	add	r9, r3
 801dabe:	2200      	movs	r2, #0
 801dac0:	2300      	movs	r3, #0
 801dac2:	4620      	mov	r0, r4
 801dac4:	4629      	mov	r1, r5
 801dac6:	f7e3 f80f 	bl	8000ae8 <__aeabi_dcmpeq>
 801daca:	b938      	cbnz	r0, 801dadc <__cvt+0xac>
 801dacc:	2230      	movs	r2, #48	; 0x30
 801dace:	9b03      	ldr	r3, [sp, #12]
 801dad0:	454b      	cmp	r3, r9
 801dad2:	d205      	bcs.n	801dae0 <__cvt+0xb0>
 801dad4:	1c59      	adds	r1, r3, #1
 801dad6:	9103      	str	r1, [sp, #12]
 801dad8:	701a      	strb	r2, [r3, #0]
 801dada:	e7f8      	b.n	801dace <__cvt+0x9e>
 801dadc:	f8cd 900c 	str.w	r9, [sp, #12]
 801dae0:	9b03      	ldr	r3, [sp, #12]
 801dae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dae4:	eba3 0308 	sub.w	r3, r3, r8
 801dae8:	4640      	mov	r0, r8
 801daea:	6013      	str	r3, [r2, #0]
 801daec:	b004      	add	sp, #16
 801daee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801daf2 <__exponent>:
 801daf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801daf4:	2900      	cmp	r1, #0
 801daf6:	4604      	mov	r4, r0
 801daf8:	bfba      	itte	lt
 801dafa:	4249      	neglt	r1, r1
 801dafc:	232d      	movlt	r3, #45	; 0x2d
 801dafe:	232b      	movge	r3, #43	; 0x2b
 801db00:	2909      	cmp	r1, #9
 801db02:	f804 2b02 	strb.w	r2, [r4], #2
 801db06:	7043      	strb	r3, [r0, #1]
 801db08:	dd20      	ble.n	801db4c <__exponent+0x5a>
 801db0a:	f10d 0307 	add.w	r3, sp, #7
 801db0e:	461f      	mov	r7, r3
 801db10:	260a      	movs	r6, #10
 801db12:	fb91 f5f6 	sdiv	r5, r1, r6
 801db16:	fb06 1115 	mls	r1, r6, r5, r1
 801db1a:	3130      	adds	r1, #48	; 0x30
 801db1c:	2d09      	cmp	r5, #9
 801db1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801db22:	f103 32ff 	add.w	r2, r3, #4294967295
 801db26:	4629      	mov	r1, r5
 801db28:	dc09      	bgt.n	801db3e <__exponent+0x4c>
 801db2a:	3130      	adds	r1, #48	; 0x30
 801db2c:	3b02      	subs	r3, #2
 801db2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 801db32:	42bb      	cmp	r3, r7
 801db34:	4622      	mov	r2, r4
 801db36:	d304      	bcc.n	801db42 <__exponent+0x50>
 801db38:	1a10      	subs	r0, r2, r0
 801db3a:	b003      	add	sp, #12
 801db3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db3e:	4613      	mov	r3, r2
 801db40:	e7e7      	b.n	801db12 <__exponent+0x20>
 801db42:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db46:	f804 2b01 	strb.w	r2, [r4], #1
 801db4a:	e7f2      	b.n	801db32 <__exponent+0x40>
 801db4c:	2330      	movs	r3, #48	; 0x30
 801db4e:	4419      	add	r1, r3
 801db50:	7083      	strb	r3, [r0, #2]
 801db52:	1d02      	adds	r2, r0, #4
 801db54:	70c1      	strb	r1, [r0, #3]
 801db56:	e7ef      	b.n	801db38 <__exponent+0x46>

0801db58 <_printf_float>:
 801db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db5c:	b08d      	sub	sp, #52	; 0x34
 801db5e:	460c      	mov	r4, r1
 801db60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801db64:	4616      	mov	r6, r2
 801db66:	461f      	mov	r7, r3
 801db68:	4605      	mov	r5, r0
 801db6a:	f003 f943 	bl	8020df4 <_localeconv_r>
 801db6e:	6803      	ldr	r3, [r0, #0]
 801db70:	9304      	str	r3, [sp, #16]
 801db72:	4618      	mov	r0, r3
 801db74:	f7e2 fb3c 	bl	80001f0 <strlen>
 801db78:	2300      	movs	r3, #0
 801db7a:	930a      	str	r3, [sp, #40]	; 0x28
 801db7c:	f8d8 3000 	ldr.w	r3, [r8]
 801db80:	9005      	str	r0, [sp, #20]
 801db82:	3307      	adds	r3, #7
 801db84:	f023 0307 	bic.w	r3, r3, #7
 801db88:	f103 0208 	add.w	r2, r3, #8
 801db8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801db90:	f8d4 b000 	ldr.w	fp, [r4]
 801db94:	f8c8 2000 	str.w	r2, [r8]
 801db98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801dba0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801dba4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dba8:	9307      	str	r3, [sp, #28]
 801dbaa:	f8cd 8018 	str.w	r8, [sp, #24]
 801dbae:	f04f 32ff 	mov.w	r2, #4294967295
 801dbb2:	4ba7      	ldr	r3, [pc, #668]	; (801de50 <_printf_float+0x2f8>)
 801dbb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dbb8:	f7e2 ffc8 	bl	8000b4c <__aeabi_dcmpun>
 801dbbc:	bb70      	cbnz	r0, 801dc1c <_printf_float+0xc4>
 801dbbe:	f04f 32ff 	mov.w	r2, #4294967295
 801dbc2:	4ba3      	ldr	r3, [pc, #652]	; (801de50 <_printf_float+0x2f8>)
 801dbc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dbc8:	f7e2 ffa2 	bl	8000b10 <__aeabi_dcmple>
 801dbcc:	bb30      	cbnz	r0, 801dc1c <_printf_float+0xc4>
 801dbce:	2200      	movs	r2, #0
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	4640      	mov	r0, r8
 801dbd4:	4649      	mov	r1, r9
 801dbd6:	f7e2 ff91 	bl	8000afc <__aeabi_dcmplt>
 801dbda:	b110      	cbz	r0, 801dbe2 <_printf_float+0x8a>
 801dbdc:	232d      	movs	r3, #45	; 0x2d
 801dbde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dbe2:	4a9c      	ldr	r2, [pc, #624]	; (801de54 <_printf_float+0x2fc>)
 801dbe4:	4b9c      	ldr	r3, [pc, #624]	; (801de58 <_printf_float+0x300>)
 801dbe6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801dbea:	bf8c      	ite	hi
 801dbec:	4690      	movhi	r8, r2
 801dbee:	4698      	movls	r8, r3
 801dbf0:	2303      	movs	r3, #3
 801dbf2:	f02b 0204 	bic.w	r2, fp, #4
 801dbf6:	6123      	str	r3, [r4, #16]
 801dbf8:	6022      	str	r2, [r4, #0]
 801dbfa:	f04f 0900 	mov.w	r9, #0
 801dbfe:	9700      	str	r7, [sp, #0]
 801dc00:	4633      	mov	r3, r6
 801dc02:	aa0b      	add	r2, sp, #44	; 0x2c
 801dc04:	4621      	mov	r1, r4
 801dc06:	4628      	mov	r0, r5
 801dc08:	f000 f9e6 	bl	801dfd8 <_printf_common>
 801dc0c:	3001      	adds	r0, #1
 801dc0e:	f040 808d 	bne.w	801dd2c <_printf_float+0x1d4>
 801dc12:	f04f 30ff 	mov.w	r0, #4294967295
 801dc16:	b00d      	add	sp, #52	; 0x34
 801dc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc1c:	4642      	mov	r2, r8
 801dc1e:	464b      	mov	r3, r9
 801dc20:	4640      	mov	r0, r8
 801dc22:	4649      	mov	r1, r9
 801dc24:	f7e2 ff92 	bl	8000b4c <__aeabi_dcmpun>
 801dc28:	b110      	cbz	r0, 801dc30 <_printf_float+0xd8>
 801dc2a:	4a8c      	ldr	r2, [pc, #560]	; (801de5c <_printf_float+0x304>)
 801dc2c:	4b8c      	ldr	r3, [pc, #560]	; (801de60 <_printf_float+0x308>)
 801dc2e:	e7da      	b.n	801dbe6 <_printf_float+0x8e>
 801dc30:	6861      	ldr	r1, [r4, #4]
 801dc32:	1c4b      	adds	r3, r1, #1
 801dc34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801dc38:	a80a      	add	r0, sp, #40	; 0x28
 801dc3a:	d13e      	bne.n	801dcba <_printf_float+0x162>
 801dc3c:	2306      	movs	r3, #6
 801dc3e:	6063      	str	r3, [r4, #4]
 801dc40:	2300      	movs	r3, #0
 801dc42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801dc46:	ab09      	add	r3, sp, #36	; 0x24
 801dc48:	9300      	str	r3, [sp, #0]
 801dc4a:	ec49 8b10 	vmov	d0, r8, r9
 801dc4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801dc52:	6022      	str	r2, [r4, #0]
 801dc54:	f8cd a004 	str.w	sl, [sp, #4]
 801dc58:	6861      	ldr	r1, [r4, #4]
 801dc5a:	4628      	mov	r0, r5
 801dc5c:	f7ff fee8 	bl	801da30 <__cvt>
 801dc60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801dc64:	2b47      	cmp	r3, #71	; 0x47
 801dc66:	4680      	mov	r8, r0
 801dc68:	d109      	bne.n	801dc7e <_printf_float+0x126>
 801dc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc6c:	1cd8      	adds	r0, r3, #3
 801dc6e:	db02      	blt.n	801dc76 <_printf_float+0x11e>
 801dc70:	6862      	ldr	r2, [r4, #4]
 801dc72:	4293      	cmp	r3, r2
 801dc74:	dd47      	ble.n	801dd06 <_printf_float+0x1ae>
 801dc76:	f1aa 0a02 	sub.w	sl, sl, #2
 801dc7a:	fa5f fa8a 	uxtb.w	sl, sl
 801dc7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801dc82:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc84:	d824      	bhi.n	801dcd0 <_printf_float+0x178>
 801dc86:	3901      	subs	r1, #1
 801dc88:	4652      	mov	r2, sl
 801dc8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801dc8e:	9109      	str	r1, [sp, #36]	; 0x24
 801dc90:	f7ff ff2f 	bl	801daf2 <__exponent>
 801dc94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dc96:	1813      	adds	r3, r2, r0
 801dc98:	2a01      	cmp	r2, #1
 801dc9a:	4681      	mov	r9, r0
 801dc9c:	6123      	str	r3, [r4, #16]
 801dc9e:	dc02      	bgt.n	801dca6 <_printf_float+0x14e>
 801dca0:	6822      	ldr	r2, [r4, #0]
 801dca2:	07d1      	lsls	r1, r2, #31
 801dca4:	d501      	bpl.n	801dcaa <_printf_float+0x152>
 801dca6:	3301      	adds	r3, #1
 801dca8:	6123      	str	r3, [r4, #16]
 801dcaa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d0a5      	beq.n	801dbfe <_printf_float+0xa6>
 801dcb2:	232d      	movs	r3, #45	; 0x2d
 801dcb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dcb8:	e7a1      	b.n	801dbfe <_printf_float+0xa6>
 801dcba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801dcbe:	f000 8177 	beq.w	801dfb0 <_printf_float+0x458>
 801dcc2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801dcc6:	d1bb      	bne.n	801dc40 <_printf_float+0xe8>
 801dcc8:	2900      	cmp	r1, #0
 801dcca:	d1b9      	bne.n	801dc40 <_printf_float+0xe8>
 801dccc:	2301      	movs	r3, #1
 801dcce:	e7b6      	b.n	801dc3e <_printf_float+0xe6>
 801dcd0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801dcd4:	d119      	bne.n	801dd0a <_printf_float+0x1b2>
 801dcd6:	2900      	cmp	r1, #0
 801dcd8:	6863      	ldr	r3, [r4, #4]
 801dcda:	dd0c      	ble.n	801dcf6 <_printf_float+0x19e>
 801dcdc:	6121      	str	r1, [r4, #16]
 801dcde:	b913      	cbnz	r3, 801dce6 <_printf_float+0x18e>
 801dce0:	6822      	ldr	r2, [r4, #0]
 801dce2:	07d2      	lsls	r2, r2, #31
 801dce4:	d502      	bpl.n	801dcec <_printf_float+0x194>
 801dce6:	3301      	adds	r3, #1
 801dce8:	440b      	add	r3, r1
 801dcea:	6123      	str	r3, [r4, #16]
 801dcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcee:	65a3      	str	r3, [r4, #88]	; 0x58
 801dcf0:	f04f 0900 	mov.w	r9, #0
 801dcf4:	e7d9      	b.n	801dcaa <_printf_float+0x152>
 801dcf6:	b913      	cbnz	r3, 801dcfe <_printf_float+0x1a6>
 801dcf8:	6822      	ldr	r2, [r4, #0]
 801dcfa:	07d0      	lsls	r0, r2, #31
 801dcfc:	d501      	bpl.n	801dd02 <_printf_float+0x1aa>
 801dcfe:	3302      	adds	r3, #2
 801dd00:	e7f3      	b.n	801dcea <_printf_float+0x192>
 801dd02:	2301      	movs	r3, #1
 801dd04:	e7f1      	b.n	801dcea <_printf_float+0x192>
 801dd06:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801dd0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801dd0e:	4293      	cmp	r3, r2
 801dd10:	db05      	blt.n	801dd1e <_printf_float+0x1c6>
 801dd12:	6822      	ldr	r2, [r4, #0]
 801dd14:	6123      	str	r3, [r4, #16]
 801dd16:	07d1      	lsls	r1, r2, #31
 801dd18:	d5e8      	bpl.n	801dcec <_printf_float+0x194>
 801dd1a:	3301      	adds	r3, #1
 801dd1c:	e7e5      	b.n	801dcea <_printf_float+0x192>
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	bfd4      	ite	le
 801dd22:	f1c3 0302 	rsble	r3, r3, #2
 801dd26:	2301      	movgt	r3, #1
 801dd28:	4413      	add	r3, r2
 801dd2a:	e7de      	b.n	801dcea <_printf_float+0x192>
 801dd2c:	6823      	ldr	r3, [r4, #0]
 801dd2e:	055a      	lsls	r2, r3, #21
 801dd30:	d407      	bmi.n	801dd42 <_printf_float+0x1ea>
 801dd32:	6923      	ldr	r3, [r4, #16]
 801dd34:	4642      	mov	r2, r8
 801dd36:	4631      	mov	r1, r6
 801dd38:	4628      	mov	r0, r5
 801dd3a:	47b8      	blx	r7
 801dd3c:	3001      	adds	r0, #1
 801dd3e:	d12b      	bne.n	801dd98 <_printf_float+0x240>
 801dd40:	e767      	b.n	801dc12 <_printf_float+0xba>
 801dd42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801dd46:	f240 80dc 	bls.w	801df02 <_printf_float+0x3aa>
 801dd4a:	2200      	movs	r2, #0
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801dd52:	f7e2 fec9 	bl	8000ae8 <__aeabi_dcmpeq>
 801dd56:	2800      	cmp	r0, #0
 801dd58:	d033      	beq.n	801ddc2 <_printf_float+0x26a>
 801dd5a:	2301      	movs	r3, #1
 801dd5c:	4a41      	ldr	r2, [pc, #260]	; (801de64 <_printf_float+0x30c>)
 801dd5e:	4631      	mov	r1, r6
 801dd60:	4628      	mov	r0, r5
 801dd62:	47b8      	blx	r7
 801dd64:	3001      	adds	r0, #1
 801dd66:	f43f af54 	beq.w	801dc12 <_printf_float+0xba>
 801dd6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801dd6e:	429a      	cmp	r2, r3
 801dd70:	db02      	blt.n	801dd78 <_printf_float+0x220>
 801dd72:	6823      	ldr	r3, [r4, #0]
 801dd74:	07d8      	lsls	r0, r3, #31
 801dd76:	d50f      	bpl.n	801dd98 <_printf_float+0x240>
 801dd78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dd7c:	4631      	mov	r1, r6
 801dd7e:	4628      	mov	r0, r5
 801dd80:	47b8      	blx	r7
 801dd82:	3001      	adds	r0, #1
 801dd84:	f43f af45 	beq.w	801dc12 <_printf_float+0xba>
 801dd88:	f04f 0800 	mov.w	r8, #0
 801dd8c:	f104 091a 	add.w	r9, r4, #26
 801dd90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd92:	3b01      	subs	r3, #1
 801dd94:	4543      	cmp	r3, r8
 801dd96:	dc09      	bgt.n	801ddac <_printf_float+0x254>
 801dd98:	6823      	ldr	r3, [r4, #0]
 801dd9a:	079b      	lsls	r3, r3, #30
 801dd9c:	f100 8103 	bmi.w	801dfa6 <_printf_float+0x44e>
 801dda0:	68e0      	ldr	r0, [r4, #12]
 801dda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dda4:	4298      	cmp	r0, r3
 801dda6:	bfb8      	it	lt
 801dda8:	4618      	movlt	r0, r3
 801ddaa:	e734      	b.n	801dc16 <_printf_float+0xbe>
 801ddac:	2301      	movs	r3, #1
 801ddae:	464a      	mov	r2, r9
 801ddb0:	4631      	mov	r1, r6
 801ddb2:	4628      	mov	r0, r5
 801ddb4:	47b8      	blx	r7
 801ddb6:	3001      	adds	r0, #1
 801ddb8:	f43f af2b 	beq.w	801dc12 <_printf_float+0xba>
 801ddbc:	f108 0801 	add.w	r8, r8, #1
 801ddc0:	e7e6      	b.n	801dd90 <_printf_float+0x238>
 801ddc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	dc2b      	bgt.n	801de20 <_printf_float+0x2c8>
 801ddc8:	2301      	movs	r3, #1
 801ddca:	4a26      	ldr	r2, [pc, #152]	; (801de64 <_printf_float+0x30c>)
 801ddcc:	4631      	mov	r1, r6
 801ddce:	4628      	mov	r0, r5
 801ddd0:	47b8      	blx	r7
 801ddd2:	3001      	adds	r0, #1
 801ddd4:	f43f af1d 	beq.w	801dc12 <_printf_float+0xba>
 801ddd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddda:	b923      	cbnz	r3, 801dde6 <_printf_float+0x28e>
 801dddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddde:	b913      	cbnz	r3, 801dde6 <_printf_float+0x28e>
 801dde0:	6823      	ldr	r3, [r4, #0]
 801dde2:	07d9      	lsls	r1, r3, #31
 801dde4:	d5d8      	bpl.n	801dd98 <_printf_float+0x240>
 801dde6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ddea:	4631      	mov	r1, r6
 801ddec:	4628      	mov	r0, r5
 801ddee:	47b8      	blx	r7
 801ddf0:	3001      	adds	r0, #1
 801ddf2:	f43f af0e 	beq.w	801dc12 <_printf_float+0xba>
 801ddf6:	f04f 0900 	mov.w	r9, #0
 801ddfa:	f104 0a1a 	add.w	sl, r4, #26
 801ddfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de00:	425b      	negs	r3, r3
 801de02:	454b      	cmp	r3, r9
 801de04:	dc01      	bgt.n	801de0a <_printf_float+0x2b2>
 801de06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de08:	e794      	b.n	801dd34 <_printf_float+0x1dc>
 801de0a:	2301      	movs	r3, #1
 801de0c:	4652      	mov	r2, sl
 801de0e:	4631      	mov	r1, r6
 801de10:	4628      	mov	r0, r5
 801de12:	47b8      	blx	r7
 801de14:	3001      	adds	r0, #1
 801de16:	f43f aefc 	beq.w	801dc12 <_printf_float+0xba>
 801de1a:	f109 0901 	add.w	r9, r9, #1
 801de1e:	e7ee      	b.n	801ddfe <_printf_float+0x2a6>
 801de20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801de24:	429a      	cmp	r2, r3
 801de26:	bfa8      	it	ge
 801de28:	461a      	movge	r2, r3
 801de2a:	2a00      	cmp	r2, #0
 801de2c:	4691      	mov	r9, r2
 801de2e:	dd07      	ble.n	801de40 <_printf_float+0x2e8>
 801de30:	4613      	mov	r3, r2
 801de32:	4631      	mov	r1, r6
 801de34:	4642      	mov	r2, r8
 801de36:	4628      	mov	r0, r5
 801de38:	47b8      	blx	r7
 801de3a:	3001      	adds	r0, #1
 801de3c:	f43f aee9 	beq.w	801dc12 <_printf_float+0xba>
 801de40:	f104 031a 	add.w	r3, r4, #26
 801de44:	f04f 0b00 	mov.w	fp, #0
 801de48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801de4c:	9306      	str	r3, [sp, #24]
 801de4e:	e015      	b.n	801de7c <_printf_float+0x324>
 801de50:	7fefffff 	.word	0x7fefffff
 801de54:	08022b5d 	.word	0x08022b5d
 801de58:	08022b59 	.word	0x08022b59
 801de5c:	08022b65 	.word	0x08022b65
 801de60:	08022b61 	.word	0x08022b61
 801de64:	08022b69 	.word	0x08022b69
 801de68:	2301      	movs	r3, #1
 801de6a:	9a06      	ldr	r2, [sp, #24]
 801de6c:	4631      	mov	r1, r6
 801de6e:	4628      	mov	r0, r5
 801de70:	47b8      	blx	r7
 801de72:	3001      	adds	r0, #1
 801de74:	f43f aecd 	beq.w	801dc12 <_printf_float+0xba>
 801de78:	f10b 0b01 	add.w	fp, fp, #1
 801de7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801de80:	ebaa 0309 	sub.w	r3, sl, r9
 801de84:	455b      	cmp	r3, fp
 801de86:	dcef      	bgt.n	801de68 <_printf_float+0x310>
 801de88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801de8c:	429a      	cmp	r2, r3
 801de8e:	44d0      	add	r8, sl
 801de90:	db15      	blt.n	801debe <_printf_float+0x366>
 801de92:	6823      	ldr	r3, [r4, #0]
 801de94:	07da      	lsls	r2, r3, #31
 801de96:	d412      	bmi.n	801debe <_printf_float+0x366>
 801de98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801de9c:	eba3 020a 	sub.w	r2, r3, sl
 801dea0:	eba3 0a01 	sub.w	sl, r3, r1
 801dea4:	4592      	cmp	sl, r2
 801dea6:	bfa8      	it	ge
 801dea8:	4692      	movge	sl, r2
 801deaa:	f1ba 0f00 	cmp.w	sl, #0
 801deae:	dc0e      	bgt.n	801dece <_printf_float+0x376>
 801deb0:	f04f 0800 	mov.w	r8, #0
 801deb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801deb8:	f104 091a 	add.w	r9, r4, #26
 801debc:	e019      	b.n	801def2 <_printf_float+0x39a>
 801debe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dec2:	4631      	mov	r1, r6
 801dec4:	4628      	mov	r0, r5
 801dec6:	47b8      	blx	r7
 801dec8:	3001      	adds	r0, #1
 801deca:	d1e5      	bne.n	801de98 <_printf_float+0x340>
 801decc:	e6a1      	b.n	801dc12 <_printf_float+0xba>
 801dece:	4653      	mov	r3, sl
 801ded0:	4642      	mov	r2, r8
 801ded2:	4631      	mov	r1, r6
 801ded4:	4628      	mov	r0, r5
 801ded6:	47b8      	blx	r7
 801ded8:	3001      	adds	r0, #1
 801deda:	d1e9      	bne.n	801deb0 <_printf_float+0x358>
 801dedc:	e699      	b.n	801dc12 <_printf_float+0xba>
 801dede:	2301      	movs	r3, #1
 801dee0:	464a      	mov	r2, r9
 801dee2:	4631      	mov	r1, r6
 801dee4:	4628      	mov	r0, r5
 801dee6:	47b8      	blx	r7
 801dee8:	3001      	adds	r0, #1
 801deea:	f43f ae92 	beq.w	801dc12 <_printf_float+0xba>
 801deee:	f108 0801 	add.w	r8, r8, #1
 801def2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801def6:	1a9b      	subs	r3, r3, r2
 801def8:	eba3 030a 	sub.w	r3, r3, sl
 801defc:	4543      	cmp	r3, r8
 801defe:	dcee      	bgt.n	801dede <_printf_float+0x386>
 801df00:	e74a      	b.n	801dd98 <_printf_float+0x240>
 801df02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df04:	2a01      	cmp	r2, #1
 801df06:	dc01      	bgt.n	801df0c <_printf_float+0x3b4>
 801df08:	07db      	lsls	r3, r3, #31
 801df0a:	d53a      	bpl.n	801df82 <_printf_float+0x42a>
 801df0c:	2301      	movs	r3, #1
 801df0e:	4642      	mov	r2, r8
 801df10:	4631      	mov	r1, r6
 801df12:	4628      	mov	r0, r5
 801df14:	47b8      	blx	r7
 801df16:	3001      	adds	r0, #1
 801df18:	f43f ae7b 	beq.w	801dc12 <_printf_float+0xba>
 801df1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df20:	4631      	mov	r1, r6
 801df22:	4628      	mov	r0, r5
 801df24:	47b8      	blx	r7
 801df26:	3001      	adds	r0, #1
 801df28:	f108 0801 	add.w	r8, r8, #1
 801df2c:	f43f ae71 	beq.w	801dc12 <_printf_float+0xba>
 801df30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df32:	2200      	movs	r2, #0
 801df34:	f103 3aff 	add.w	sl, r3, #4294967295
 801df38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801df3c:	2300      	movs	r3, #0
 801df3e:	f7e2 fdd3 	bl	8000ae8 <__aeabi_dcmpeq>
 801df42:	b9c8      	cbnz	r0, 801df78 <_printf_float+0x420>
 801df44:	4653      	mov	r3, sl
 801df46:	4642      	mov	r2, r8
 801df48:	4631      	mov	r1, r6
 801df4a:	4628      	mov	r0, r5
 801df4c:	47b8      	blx	r7
 801df4e:	3001      	adds	r0, #1
 801df50:	d10e      	bne.n	801df70 <_printf_float+0x418>
 801df52:	e65e      	b.n	801dc12 <_printf_float+0xba>
 801df54:	2301      	movs	r3, #1
 801df56:	4652      	mov	r2, sl
 801df58:	4631      	mov	r1, r6
 801df5a:	4628      	mov	r0, r5
 801df5c:	47b8      	blx	r7
 801df5e:	3001      	adds	r0, #1
 801df60:	f43f ae57 	beq.w	801dc12 <_printf_float+0xba>
 801df64:	f108 0801 	add.w	r8, r8, #1
 801df68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df6a:	3b01      	subs	r3, #1
 801df6c:	4543      	cmp	r3, r8
 801df6e:	dcf1      	bgt.n	801df54 <_printf_float+0x3fc>
 801df70:	464b      	mov	r3, r9
 801df72:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801df76:	e6de      	b.n	801dd36 <_printf_float+0x1de>
 801df78:	f04f 0800 	mov.w	r8, #0
 801df7c:	f104 0a1a 	add.w	sl, r4, #26
 801df80:	e7f2      	b.n	801df68 <_printf_float+0x410>
 801df82:	2301      	movs	r3, #1
 801df84:	e7df      	b.n	801df46 <_printf_float+0x3ee>
 801df86:	2301      	movs	r3, #1
 801df88:	464a      	mov	r2, r9
 801df8a:	4631      	mov	r1, r6
 801df8c:	4628      	mov	r0, r5
 801df8e:	47b8      	blx	r7
 801df90:	3001      	adds	r0, #1
 801df92:	f43f ae3e 	beq.w	801dc12 <_printf_float+0xba>
 801df96:	f108 0801 	add.w	r8, r8, #1
 801df9a:	68e3      	ldr	r3, [r4, #12]
 801df9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801df9e:	1a9b      	subs	r3, r3, r2
 801dfa0:	4543      	cmp	r3, r8
 801dfa2:	dcf0      	bgt.n	801df86 <_printf_float+0x42e>
 801dfa4:	e6fc      	b.n	801dda0 <_printf_float+0x248>
 801dfa6:	f04f 0800 	mov.w	r8, #0
 801dfaa:	f104 0919 	add.w	r9, r4, #25
 801dfae:	e7f4      	b.n	801df9a <_printf_float+0x442>
 801dfb0:	2900      	cmp	r1, #0
 801dfb2:	f43f ae8b 	beq.w	801dccc <_printf_float+0x174>
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801dfbc:	ab09      	add	r3, sp, #36	; 0x24
 801dfbe:	9300      	str	r3, [sp, #0]
 801dfc0:	ec49 8b10 	vmov	d0, r8, r9
 801dfc4:	6022      	str	r2, [r4, #0]
 801dfc6:	f8cd a004 	str.w	sl, [sp, #4]
 801dfca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801dfce:	4628      	mov	r0, r5
 801dfd0:	f7ff fd2e 	bl	801da30 <__cvt>
 801dfd4:	4680      	mov	r8, r0
 801dfd6:	e648      	b.n	801dc6a <_printf_float+0x112>

0801dfd8 <_printf_common>:
 801dfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfdc:	4691      	mov	r9, r2
 801dfde:	461f      	mov	r7, r3
 801dfe0:	688a      	ldr	r2, [r1, #8]
 801dfe2:	690b      	ldr	r3, [r1, #16]
 801dfe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dfe8:	4293      	cmp	r3, r2
 801dfea:	bfb8      	it	lt
 801dfec:	4613      	movlt	r3, r2
 801dfee:	f8c9 3000 	str.w	r3, [r9]
 801dff2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dff6:	4606      	mov	r6, r0
 801dff8:	460c      	mov	r4, r1
 801dffa:	b112      	cbz	r2, 801e002 <_printf_common+0x2a>
 801dffc:	3301      	adds	r3, #1
 801dffe:	f8c9 3000 	str.w	r3, [r9]
 801e002:	6823      	ldr	r3, [r4, #0]
 801e004:	0699      	lsls	r1, r3, #26
 801e006:	bf42      	ittt	mi
 801e008:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e00c:	3302      	addmi	r3, #2
 801e00e:	f8c9 3000 	strmi.w	r3, [r9]
 801e012:	6825      	ldr	r5, [r4, #0]
 801e014:	f015 0506 	ands.w	r5, r5, #6
 801e018:	d107      	bne.n	801e02a <_printf_common+0x52>
 801e01a:	f104 0a19 	add.w	sl, r4, #25
 801e01e:	68e3      	ldr	r3, [r4, #12]
 801e020:	f8d9 2000 	ldr.w	r2, [r9]
 801e024:	1a9b      	subs	r3, r3, r2
 801e026:	42ab      	cmp	r3, r5
 801e028:	dc28      	bgt.n	801e07c <_printf_common+0xa4>
 801e02a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e02e:	6822      	ldr	r2, [r4, #0]
 801e030:	3300      	adds	r3, #0
 801e032:	bf18      	it	ne
 801e034:	2301      	movne	r3, #1
 801e036:	0692      	lsls	r2, r2, #26
 801e038:	d42d      	bmi.n	801e096 <_printf_common+0xbe>
 801e03a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e03e:	4639      	mov	r1, r7
 801e040:	4630      	mov	r0, r6
 801e042:	47c0      	blx	r8
 801e044:	3001      	adds	r0, #1
 801e046:	d020      	beq.n	801e08a <_printf_common+0xb2>
 801e048:	6823      	ldr	r3, [r4, #0]
 801e04a:	68e5      	ldr	r5, [r4, #12]
 801e04c:	f8d9 2000 	ldr.w	r2, [r9]
 801e050:	f003 0306 	and.w	r3, r3, #6
 801e054:	2b04      	cmp	r3, #4
 801e056:	bf08      	it	eq
 801e058:	1aad      	subeq	r5, r5, r2
 801e05a:	68a3      	ldr	r3, [r4, #8]
 801e05c:	6922      	ldr	r2, [r4, #16]
 801e05e:	bf0c      	ite	eq
 801e060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e064:	2500      	movne	r5, #0
 801e066:	4293      	cmp	r3, r2
 801e068:	bfc4      	itt	gt
 801e06a:	1a9b      	subgt	r3, r3, r2
 801e06c:	18ed      	addgt	r5, r5, r3
 801e06e:	f04f 0900 	mov.w	r9, #0
 801e072:	341a      	adds	r4, #26
 801e074:	454d      	cmp	r5, r9
 801e076:	d11a      	bne.n	801e0ae <_printf_common+0xd6>
 801e078:	2000      	movs	r0, #0
 801e07a:	e008      	b.n	801e08e <_printf_common+0xb6>
 801e07c:	2301      	movs	r3, #1
 801e07e:	4652      	mov	r2, sl
 801e080:	4639      	mov	r1, r7
 801e082:	4630      	mov	r0, r6
 801e084:	47c0      	blx	r8
 801e086:	3001      	adds	r0, #1
 801e088:	d103      	bne.n	801e092 <_printf_common+0xba>
 801e08a:	f04f 30ff 	mov.w	r0, #4294967295
 801e08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e092:	3501      	adds	r5, #1
 801e094:	e7c3      	b.n	801e01e <_printf_common+0x46>
 801e096:	18e1      	adds	r1, r4, r3
 801e098:	1c5a      	adds	r2, r3, #1
 801e09a:	2030      	movs	r0, #48	; 0x30
 801e09c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e0a0:	4422      	add	r2, r4
 801e0a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e0a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e0aa:	3302      	adds	r3, #2
 801e0ac:	e7c5      	b.n	801e03a <_printf_common+0x62>
 801e0ae:	2301      	movs	r3, #1
 801e0b0:	4622      	mov	r2, r4
 801e0b2:	4639      	mov	r1, r7
 801e0b4:	4630      	mov	r0, r6
 801e0b6:	47c0      	blx	r8
 801e0b8:	3001      	adds	r0, #1
 801e0ba:	d0e6      	beq.n	801e08a <_printf_common+0xb2>
 801e0bc:	f109 0901 	add.w	r9, r9, #1
 801e0c0:	e7d8      	b.n	801e074 <_printf_common+0x9c>
	...

0801e0c4 <_printf_i>:
 801e0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e0c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e0cc:	460c      	mov	r4, r1
 801e0ce:	7e09      	ldrb	r1, [r1, #24]
 801e0d0:	b085      	sub	sp, #20
 801e0d2:	296e      	cmp	r1, #110	; 0x6e
 801e0d4:	4617      	mov	r7, r2
 801e0d6:	4606      	mov	r6, r0
 801e0d8:	4698      	mov	r8, r3
 801e0da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e0dc:	f000 80b3 	beq.w	801e246 <_printf_i+0x182>
 801e0e0:	d822      	bhi.n	801e128 <_printf_i+0x64>
 801e0e2:	2963      	cmp	r1, #99	; 0x63
 801e0e4:	d036      	beq.n	801e154 <_printf_i+0x90>
 801e0e6:	d80a      	bhi.n	801e0fe <_printf_i+0x3a>
 801e0e8:	2900      	cmp	r1, #0
 801e0ea:	f000 80b9 	beq.w	801e260 <_printf_i+0x19c>
 801e0ee:	2958      	cmp	r1, #88	; 0x58
 801e0f0:	f000 8083 	beq.w	801e1fa <_printf_i+0x136>
 801e0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e0f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e0fc:	e032      	b.n	801e164 <_printf_i+0xa0>
 801e0fe:	2964      	cmp	r1, #100	; 0x64
 801e100:	d001      	beq.n	801e106 <_printf_i+0x42>
 801e102:	2969      	cmp	r1, #105	; 0x69
 801e104:	d1f6      	bne.n	801e0f4 <_printf_i+0x30>
 801e106:	6820      	ldr	r0, [r4, #0]
 801e108:	6813      	ldr	r3, [r2, #0]
 801e10a:	0605      	lsls	r5, r0, #24
 801e10c:	f103 0104 	add.w	r1, r3, #4
 801e110:	d52a      	bpl.n	801e168 <_printf_i+0xa4>
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	6011      	str	r1, [r2, #0]
 801e116:	2b00      	cmp	r3, #0
 801e118:	da03      	bge.n	801e122 <_printf_i+0x5e>
 801e11a:	222d      	movs	r2, #45	; 0x2d
 801e11c:	425b      	negs	r3, r3
 801e11e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e122:	486f      	ldr	r0, [pc, #444]	; (801e2e0 <_printf_i+0x21c>)
 801e124:	220a      	movs	r2, #10
 801e126:	e039      	b.n	801e19c <_printf_i+0xd8>
 801e128:	2973      	cmp	r1, #115	; 0x73
 801e12a:	f000 809d 	beq.w	801e268 <_printf_i+0x1a4>
 801e12e:	d808      	bhi.n	801e142 <_printf_i+0x7e>
 801e130:	296f      	cmp	r1, #111	; 0x6f
 801e132:	d020      	beq.n	801e176 <_printf_i+0xb2>
 801e134:	2970      	cmp	r1, #112	; 0x70
 801e136:	d1dd      	bne.n	801e0f4 <_printf_i+0x30>
 801e138:	6823      	ldr	r3, [r4, #0]
 801e13a:	f043 0320 	orr.w	r3, r3, #32
 801e13e:	6023      	str	r3, [r4, #0]
 801e140:	e003      	b.n	801e14a <_printf_i+0x86>
 801e142:	2975      	cmp	r1, #117	; 0x75
 801e144:	d017      	beq.n	801e176 <_printf_i+0xb2>
 801e146:	2978      	cmp	r1, #120	; 0x78
 801e148:	d1d4      	bne.n	801e0f4 <_printf_i+0x30>
 801e14a:	2378      	movs	r3, #120	; 0x78
 801e14c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e150:	4864      	ldr	r0, [pc, #400]	; (801e2e4 <_printf_i+0x220>)
 801e152:	e055      	b.n	801e200 <_printf_i+0x13c>
 801e154:	6813      	ldr	r3, [r2, #0]
 801e156:	1d19      	adds	r1, r3, #4
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	6011      	str	r1, [r2, #0]
 801e15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e164:	2301      	movs	r3, #1
 801e166:	e08c      	b.n	801e282 <_printf_i+0x1be>
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	6011      	str	r1, [r2, #0]
 801e16c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e170:	bf18      	it	ne
 801e172:	b21b      	sxthne	r3, r3
 801e174:	e7cf      	b.n	801e116 <_printf_i+0x52>
 801e176:	6813      	ldr	r3, [r2, #0]
 801e178:	6825      	ldr	r5, [r4, #0]
 801e17a:	1d18      	adds	r0, r3, #4
 801e17c:	6010      	str	r0, [r2, #0]
 801e17e:	0628      	lsls	r0, r5, #24
 801e180:	d501      	bpl.n	801e186 <_printf_i+0xc2>
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	e002      	b.n	801e18c <_printf_i+0xc8>
 801e186:	0668      	lsls	r0, r5, #25
 801e188:	d5fb      	bpl.n	801e182 <_printf_i+0xbe>
 801e18a:	881b      	ldrh	r3, [r3, #0]
 801e18c:	4854      	ldr	r0, [pc, #336]	; (801e2e0 <_printf_i+0x21c>)
 801e18e:	296f      	cmp	r1, #111	; 0x6f
 801e190:	bf14      	ite	ne
 801e192:	220a      	movne	r2, #10
 801e194:	2208      	moveq	r2, #8
 801e196:	2100      	movs	r1, #0
 801e198:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e19c:	6865      	ldr	r5, [r4, #4]
 801e19e:	60a5      	str	r5, [r4, #8]
 801e1a0:	2d00      	cmp	r5, #0
 801e1a2:	f2c0 8095 	blt.w	801e2d0 <_printf_i+0x20c>
 801e1a6:	6821      	ldr	r1, [r4, #0]
 801e1a8:	f021 0104 	bic.w	r1, r1, #4
 801e1ac:	6021      	str	r1, [r4, #0]
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d13d      	bne.n	801e22e <_printf_i+0x16a>
 801e1b2:	2d00      	cmp	r5, #0
 801e1b4:	f040 808e 	bne.w	801e2d4 <_printf_i+0x210>
 801e1b8:	4665      	mov	r5, ip
 801e1ba:	2a08      	cmp	r2, #8
 801e1bc:	d10b      	bne.n	801e1d6 <_printf_i+0x112>
 801e1be:	6823      	ldr	r3, [r4, #0]
 801e1c0:	07db      	lsls	r3, r3, #31
 801e1c2:	d508      	bpl.n	801e1d6 <_printf_i+0x112>
 801e1c4:	6923      	ldr	r3, [r4, #16]
 801e1c6:	6862      	ldr	r2, [r4, #4]
 801e1c8:	429a      	cmp	r2, r3
 801e1ca:	bfde      	ittt	le
 801e1cc:	2330      	movle	r3, #48	; 0x30
 801e1ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e1d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e1d6:	ebac 0305 	sub.w	r3, ip, r5
 801e1da:	6123      	str	r3, [r4, #16]
 801e1dc:	f8cd 8000 	str.w	r8, [sp]
 801e1e0:	463b      	mov	r3, r7
 801e1e2:	aa03      	add	r2, sp, #12
 801e1e4:	4621      	mov	r1, r4
 801e1e6:	4630      	mov	r0, r6
 801e1e8:	f7ff fef6 	bl	801dfd8 <_printf_common>
 801e1ec:	3001      	adds	r0, #1
 801e1ee:	d14d      	bne.n	801e28c <_printf_i+0x1c8>
 801e1f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e1f4:	b005      	add	sp, #20
 801e1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e1fa:	4839      	ldr	r0, [pc, #228]	; (801e2e0 <_printf_i+0x21c>)
 801e1fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801e200:	6813      	ldr	r3, [r2, #0]
 801e202:	6821      	ldr	r1, [r4, #0]
 801e204:	1d1d      	adds	r5, r3, #4
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	6015      	str	r5, [r2, #0]
 801e20a:	060a      	lsls	r2, r1, #24
 801e20c:	d50b      	bpl.n	801e226 <_printf_i+0x162>
 801e20e:	07ca      	lsls	r2, r1, #31
 801e210:	bf44      	itt	mi
 801e212:	f041 0120 	orrmi.w	r1, r1, #32
 801e216:	6021      	strmi	r1, [r4, #0]
 801e218:	b91b      	cbnz	r3, 801e222 <_printf_i+0x15e>
 801e21a:	6822      	ldr	r2, [r4, #0]
 801e21c:	f022 0220 	bic.w	r2, r2, #32
 801e220:	6022      	str	r2, [r4, #0]
 801e222:	2210      	movs	r2, #16
 801e224:	e7b7      	b.n	801e196 <_printf_i+0xd2>
 801e226:	064d      	lsls	r5, r1, #25
 801e228:	bf48      	it	mi
 801e22a:	b29b      	uxthmi	r3, r3
 801e22c:	e7ef      	b.n	801e20e <_printf_i+0x14a>
 801e22e:	4665      	mov	r5, ip
 801e230:	fbb3 f1f2 	udiv	r1, r3, r2
 801e234:	fb02 3311 	mls	r3, r2, r1, r3
 801e238:	5cc3      	ldrb	r3, [r0, r3]
 801e23a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801e23e:	460b      	mov	r3, r1
 801e240:	2900      	cmp	r1, #0
 801e242:	d1f5      	bne.n	801e230 <_printf_i+0x16c>
 801e244:	e7b9      	b.n	801e1ba <_printf_i+0xf6>
 801e246:	6813      	ldr	r3, [r2, #0]
 801e248:	6825      	ldr	r5, [r4, #0]
 801e24a:	6961      	ldr	r1, [r4, #20]
 801e24c:	1d18      	adds	r0, r3, #4
 801e24e:	6010      	str	r0, [r2, #0]
 801e250:	0628      	lsls	r0, r5, #24
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	d501      	bpl.n	801e25a <_printf_i+0x196>
 801e256:	6019      	str	r1, [r3, #0]
 801e258:	e002      	b.n	801e260 <_printf_i+0x19c>
 801e25a:	066a      	lsls	r2, r5, #25
 801e25c:	d5fb      	bpl.n	801e256 <_printf_i+0x192>
 801e25e:	8019      	strh	r1, [r3, #0]
 801e260:	2300      	movs	r3, #0
 801e262:	6123      	str	r3, [r4, #16]
 801e264:	4665      	mov	r5, ip
 801e266:	e7b9      	b.n	801e1dc <_printf_i+0x118>
 801e268:	6813      	ldr	r3, [r2, #0]
 801e26a:	1d19      	adds	r1, r3, #4
 801e26c:	6011      	str	r1, [r2, #0]
 801e26e:	681d      	ldr	r5, [r3, #0]
 801e270:	6862      	ldr	r2, [r4, #4]
 801e272:	2100      	movs	r1, #0
 801e274:	4628      	mov	r0, r5
 801e276:	f7e1 ffc3 	bl	8000200 <memchr>
 801e27a:	b108      	cbz	r0, 801e280 <_printf_i+0x1bc>
 801e27c:	1b40      	subs	r0, r0, r5
 801e27e:	6060      	str	r0, [r4, #4]
 801e280:	6863      	ldr	r3, [r4, #4]
 801e282:	6123      	str	r3, [r4, #16]
 801e284:	2300      	movs	r3, #0
 801e286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e28a:	e7a7      	b.n	801e1dc <_printf_i+0x118>
 801e28c:	6923      	ldr	r3, [r4, #16]
 801e28e:	462a      	mov	r2, r5
 801e290:	4639      	mov	r1, r7
 801e292:	4630      	mov	r0, r6
 801e294:	47c0      	blx	r8
 801e296:	3001      	adds	r0, #1
 801e298:	d0aa      	beq.n	801e1f0 <_printf_i+0x12c>
 801e29a:	6823      	ldr	r3, [r4, #0]
 801e29c:	079b      	lsls	r3, r3, #30
 801e29e:	d413      	bmi.n	801e2c8 <_printf_i+0x204>
 801e2a0:	68e0      	ldr	r0, [r4, #12]
 801e2a2:	9b03      	ldr	r3, [sp, #12]
 801e2a4:	4298      	cmp	r0, r3
 801e2a6:	bfb8      	it	lt
 801e2a8:	4618      	movlt	r0, r3
 801e2aa:	e7a3      	b.n	801e1f4 <_printf_i+0x130>
 801e2ac:	2301      	movs	r3, #1
 801e2ae:	464a      	mov	r2, r9
 801e2b0:	4639      	mov	r1, r7
 801e2b2:	4630      	mov	r0, r6
 801e2b4:	47c0      	blx	r8
 801e2b6:	3001      	adds	r0, #1
 801e2b8:	d09a      	beq.n	801e1f0 <_printf_i+0x12c>
 801e2ba:	3501      	adds	r5, #1
 801e2bc:	68e3      	ldr	r3, [r4, #12]
 801e2be:	9a03      	ldr	r2, [sp, #12]
 801e2c0:	1a9b      	subs	r3, r3, r2
 801e2c2:	42ab      	cmp	r3, r5
 801e2c4:	dcf2      	bgt.n	801e2ac <_printf_i+0x1e8>
 801e2c6:	e7eb      	b.n	801e2a0 <_printf_i+0x1dc>
 801e2c8:	2500      	movs	r5, #0
 801e2ca:	f104 0919 	add.w	r9, r4, #25
 801e2ce:	e7f5      	b.n	801e2bc <_printf_i+0x1f8>
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d1ac      	bne.n	801e22e <_printf_i+0x16a>
 801e2d4:	7803      	ldrb	r3, [r0, #0]
 801e2d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e2da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e2de:	e76c      	b.n	801e1ba <_printf_i+0xf6>
 801e2e0:	08022b6b 	.word	0x08022b6b
 801e2e4:	08022b7c 	.word	0x08022b7c

0801e2e8 <_scanf_float>:
 801e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ec:	469a      	mov	sl, r3
 801e2ee:	688b      	ldr	r3, [r1, #8]
 801e2f0:	4616      	mov	r6, r2
 801e2f2:	1e5a      	subs	r2, r3, #1
 801e2f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e2f8:	b087      	sub	sp, #28
 801e2fa:	bf83      	ittte	hi
 801e2fc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801e300:	189b      	addhi	r3, r3, r2
 801e302:	9301      	strhi	r3, [sp, #4]
 801e304:	2300      	movls	r3, #0
 801e306:	bf86      	itte	hi
 801e308:	f240 135d 	movwhi	r3, #349	; 0x15d
 801e30c:	608b      	strhi	r3, [r1, #8]
 801e30e:	9301      	strls	r3, [sp, #4]
 801e310:	680b      	ldr	r3, [r1, #0]
 801e312:	4688      	mov	r8, r1
 801e314:	f04f 0b00 	mov.w	fp, #0
 801e318:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801e31c:	f848 3b1c 	str.w	r3, [r8], #28
 801e320:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801e324:	4607      	mov	r7, r0
 801e326:	460c      	mov	r4, r1
 801e328:	4645      	mov	r5, r8
 801e32a:	465a      	mov	r2, fp
 801e32c:	46d9      	mov	r9, fp
 801e32e:	f8cd b008 	str.w	fp, [sp, #8]
 801e332:	68a1      	ldr	r1, [r4, #8]
 801e334:	b181      	cbz	r1, 801e358 <_scanf_float+0x70>
 801e336:	6833      	ldr	r3, [r6, #0]
 801e338:	781b      	ldrb	r3, [r3, #0]
 801e33a:	2b49      	cmp	r3, #73	; 0x49
 801e33c:	d071      	beq.n	801e422 <_scanf_float+0x13a>
 801e33e:	d84d      	bhi.n	801e3dc <_scanf_float+0xf4>
 801e340:	2b39      	cmp	r3, #57	; 0x39
 801e342:	d840      	bhi.n	801e3c6 <_scanf_float+0xde>
 801e344:	2b31      	cmp	r3, #49	; 0x31
 801e346:	f080 8088 	bcs.w	801e45a <_scanf_float+0x172>
 801e34a:	2b2d      	cmp	r3, #45	; 0x2d
 801e34c:	f000 8090 	beq.w	801e470 <_scanf_float+0x188>
 801e350:	d815      	bhi.n	801e37e <_scanf_float+0x96>
 801e352:	2b2b      	cmp	r3, #43	; 0x2b
 801e354:	f000 808c 	beq.w	801e470 <_scanf_float+0x188>
 801e358:	f1b9 0f00 	cmp.w	r9, #0
 801e35c:	d003      	beq.n	801e366 <_scanf_float+0x7e>
 801e35e:	6823      	ldr	r3, [r4, #0]
 801e360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e364:	6023      	str	r3, [r4, #0]
 801e366:	3a01      	subs	r2, #1
 801e368:	2a01      	cmp	r2, #1
 801e36a:	f200 80ea 	bhi.w	801e542 <_scanf_float+0x25a>
 801e36e:	4545      	cmp	r5, r8
 801e370:	f200 80dc 	bhi.w	801e52c <_scanf_float+0x244>
 801e374:	2601      	movs	r6, #1
 801e376:	4630      	mov	r0, r6
 801e378:	b007      	add	sp, #28
 801e37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e37e:	2b2e      	cmp	r3, #46	; 0x2e
 801e380:	f000 809f 	beq.w	801e4c2 <_scanf_float+0x1da>
 801e384:	2b30      	cmp	r3, #48	; 0x30
 801e386:	d1e7      	bne.n	801e358 <_scanf_float+0x70>
 801e388:	6820      	ldr	r0, [r4, #0]
 801e38a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801e38e:	d064      	beq.n	801e45a <_scanf_float+0x172>
 801e390:	9b01      	ldr	r3, [sp, #4]
 801e392:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801e396:	6020      	str	r0, [r4, #0]
 801e398:	f109 0901 	add.w	r9, r9, #1
 801e39c:	b11b      	cbz	r3, 801e3a6 <_scanf_float+0xbe>
 801e39e:	3b01      	subs	r3, #1
 801e3a0:	3101      	adds	r1, #1
 801e3a2:	9301      	str	r3, [sp, #4]
 801e3a4:	60a1      	str	r1, [r4, #8]
 801e3a6:	68a3      	ldr	r3, [r4, #8]
 801e3a8:	3b01      	subs	r3, #1
 801e3aa:	60a3      	str	r3, [r4, #8]
 801e3ac:	6923      	ldr	r3, [r4, #16]
 801e3ae:	3301      	adds	r3, #1
 801e3b0:	6123      	str	r3, [r4, #16]
 801e3b2:	6873      	ldr	r3, [r6, #4]
 801e3b4:	3b01      	subs	r3, #1
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	6073      	str	r3, [r6, #4]
 801e3ba:	f340 80ac 	ble.w	801e516 <_scanf_float+0x22e>
 801e3be:	6833      	ldr	r3, [r6, #0]
 801e3c0:	3301      	adds	r3, #1
 801e3c2:	6033      	str	r3, [r6, #0]
 801e3c4:	e7b5      	b.n	801e332 <_scanf_float+0x4a>
 801e3c6:	2b45      	cmp	r3, #69	; 0x45
 801e3c8:	f000 8085 	beq.w	801e4d6 <_scanf_float+0x1ee>
 801e3cc:	2b46      	cmp	r3, #70	; 0x46
 801e3ce:	d06a      	beq.n	801e4a6 <_scanf_float+0x1be>
 801e3d0:	2b41      	cmp	r3, #65	; 0x41
 801e3d2:	d1c1      	bne.n	801e358 <_scanf_float+0x70>
 801e3d4:	2a01      	cmp	r2, #1
 801e3d6:	d1bf      	bne.n	801e358 <_scanf_float+0x70>
 801e3d8:	2202      	movs	r2, #2
 801e3da:	e046      	b.n	801e46a <_scanf_float+0x182>
 801e3dc:	2b65      	cmp	r3, #101	; 0x65
 801e3de:	d07a      	beq.n	801e4d6 <_scanf_float+0x1ee>
 801e3e0:	d818      	bhi.n	801e414 <_scanf_float+0x12c>
 801e3e2:	2b54      	cmp	r3, #84	; 0x54
 801e3e4:	d066      	beq.n	801e4b4 <_scanf_float+0x1cc>
 801e3e6:	d811      	bhi.n	801e40c <_scanf_float+0x124>
 801e3e8:	2b4e      	cmp	r3, #78	; 0x4e
 801e3ea:	d1b5      	bne.n	801e358 <_scanf_float+0x70>
 801e3ec:	2a00      	cmp	r2, #0
 801e3ee:	d146      	bne.n	801e47e <_scanf_float+0x196>
 801e3f0:	f1b9 0f00 	cmp.w	r9, #0
 801e3f4:	d145      	bne.n	801e482 <_scanf_float+0x19a>
 801e3f6:	6821      	ldr	r1, [r4, #0]
 801e3f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801e3fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801e400:	d13f      	bne.n	801e482 <_scanf_float+0x19a>
 801e402:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801e406:	6021      	str	r1, [r4, #0]
 801e408:	2201      	movs	r2, #1
 801e40a:	e02e      	b.n	801e46a <_scanf_float+0x182>
 801e40c:	2b59      	cmp	r3, #89	; 0x59
 801e40e:	d01e      	beq.n	801e44e <_scanf_float+0x166>
 801e410:	2b61      	cmp	r3, #97	; 0x61
 801e412:	e7de      	b.n	801e3d2 <_scanf_float+0xea>
 801e414:	2b6e      	cmp	r3, #110	; 0x6e
 801e416:	d0e9      	beq.n	801e3ec <_scanf_float+0x104>
 801e418:	d815      	bhi.n	801e446 <_scanf_float+0x15e>
 801e41a:	2b66      	cmp	r3, #102	; 0x66
 801e41c:	d043      	beq.n	801e4a6 <_scanf_float+0x1be>
 801e41e:	2b69      	cmp	r3, #105	; 0x69
 801e420:	d19a      	bne.n	801e358 <_scanf_float+0x70>
 801e422:	f1bb 0f00 	cmp.w	fp, #0
 801e426:	d138      	bne.n	801e49a <_scanf_float+0x1b2>
 801e428:	f1b9 0f00 	cmp.w	r9, #0
 801e42c:	d197      	bne.n	801e35e <_scanf_float+0x76>
 801e42e:	6821      	ldr	r1, [r4, #0]
 801e430:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801e434:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801e438:	d195      	bne.n	801e366 <_scanf_float+0x7e>
 801e43a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801e43e:	6021      	str	r1, [r4, #0]
 801e440:	f04f 0b01 	mov.w	fp, #1
 801e444:	e011      	b.n	801e46a <_scanf_float+0x182>
 801e446:	2b74      	cmp	r3, #116	; 0x74
 801e448:	d034      	beq.n	801e4b4 <_scanf_float+0x1cc>
 801e44a:	2b79      	cmp	r3, #121	; 0x79
 801e44c:	d184      	bne.n	801e358 <_scanf_float+0x70>
 801e44e:	f1bb 0f07 	cmp.w	fp, #7
 801e452:	d181      	bne.n	801e358 <_scanf_float+0x70>
 801e454:	f04f 0b08 	mov.w	fp, #8
 801e458:	e007      	b.n	801e46a <_scanf_float+0x182>
 801e45a:	eb12 0f0b 	cmn.w	r2, fp
 801e45e:	f47f af7b 	bne.w	801e358 <_scanf_float+0x70>
 801e462:	6821      	ldr	r1, [r4, #0]
 801e464:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801e468:	6021      	str	r1, [r4, #0]
 801e46a:	702b      	strb	r3, [r5, #0]
 801e46c:	3501      	adds	r5, #1
 801e46e:	e79a      	b.n	801e3a6 <_scanf_float+0xbe>
 801e470:	6821      	ldr	r1, [r4, #0]
 801e472:	0608      	lsls	r0, r1, #24
 801e474:	f57f af70 	bpl.w	801e358 <_scanf_float+0x70>
 801e478:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801e47c:	e7f4      	b.n	801e468 <_scanf_float+0x180>
 801e47e:	2a02      	cmp	r2, #2
 801e480:	d047      	beq.n	801e512 <_scanf_float+0x22a>
 801e482:	f1bb 0f01 	cmp.w	fp, #1
 801e486:	d003      	beq.n	801e490 <_scanf_float+0x1a8>
 801e488:	f1bb 0f04 	cmp.w	fp, #4
 801e48c:	f47f af64 	bne.w	801e358 <_scanf_float+0x70>
 801e490:	f10b 0b01 	add.w	fp, fp, #1
 801e494:	fa5f fb8b 	uxtb.w	fp, fp
 801e498:	e7e7      	b.n	801e46a <_scanf_float+0x182>
 801e49a:	f1bb 0f03 	cmp.w	fp, #3
 801e49e:	d0f7      	beq.n	801e490 <_scanf_float+0x1a8>
 801e4a0:	f1bb 0f05 	cmp.w	fp, #5
 801e4a4:	e7f2      	b.n	801e48c <_scanf_float+0x1a4>
 801e4a6:	f1bb 0f02 	cmp.w	fp, #2
 801e4aa:	f47f af55 	bne.w	801e358 <_scanf_float+0x70>
 801e4ae:	f04f 0b03 	mov.w	fp, #3
 801e4b2:	e7da      	b.n	801e46a <_scanf_float+0x182>
 801e4b4:	f1bb 0f06 	cmp.w	fp, #6
 801e4b8:	f47f af4e 	bne.w	801e358 <_scanf_float+0x70>
 801e4bc:	f04f 0b07 	mov.w	fp, #7
 801e4c0:	e7d3      	b.n	801e46a <_scanf_float+0x182>
 801e4c2:	6821      	ldr	r1, [r4, #0]
 801e4c4:	0588      	lsls	r0, r1, #22
 801e4c6:	f57f af47 	bpl.w	801e358 <_scanf_float+0x70>
 801e4ca:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801e4ce:	6021      	str	r1, [r4, #0]
 801e4d0:	f8cd 9008 	str.w	r9, [sp, #8]
 801e4d4:	e7c9      	b.n	801e46a <_scanf_float+0x182>
 801e4d6:	6821      	ldr	r1, [r4, #0]
 801e4d8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801e4dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801e4e0:	d006      	beq.n	801e4f0 <_scanf_float+0x208>
 801e4e2:	0548      	lsls	r0, r1, #21
 801e4e4:	f57f af38 	bpl.w	801e358 <_scanf_float+0x70>
 801e4e8:	f1b9 0f00 	cmp.w	r9, #0
 801e4ec:	f43f af3b 	beq.w	801e366 <_scanf_float+0x7e>
 801e4f0:	0588      	lsls	r0, r1, #22
 801e4f2:	bf58      	it	pl
 801e4f4:	9802      	ldrpl	r0, [sp, #8]
 801e4f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801e4fa:	bf58      	it	pl
 801e4fc:	eba9 0000 	subpl.w	r0, r9, r0
 801e500:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801e504:	bf58      	it	pl
 801e506:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801e50a:	6021      	str	r1, [r4, #0]
 801e50c:	f04f 0900 	mov.w	r9, #0
 801e510:	e7ab      	b.n	801e46a <_scanf_float+0x182>
 801e512:	2203      	movs	r2, #3
 801e514:	e7a9      	b.n	801e46a <_scanf_float+0x182>
 801e516:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e51a:	9205      	str	r2, [sp, #20]
 801e51c:	4631      	mov	r1, r6
 801e51e:	4638      	mov	r0, r7
 801e520:	4798      	blx	r3
 801e522:	9a05      	ldr	r2, [sp, #20]
 801e524:	2800      	cmp	r0, #0
 801e526:	f43f af04 	beq.w	801e332 <_scanf_float+0x4a>
 801e52a:	e715      	b.n	801e358 <_scanf_float+0x70>
 801e52c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e530:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801e534:	4632      	mov	r2, r6
 801e536:	4638      	mov	r0, r7
 801e538:	4798      	blx	r3
 801e53a:	6923      	ldr	r3, [r4, #16]
 801e53c:	3b01      	subs	r3, #1
 801e53e:	6123      	str	r3, [r4, #16]
 801e540:	e715      	b.n	801e36e <_scanf_float+0x86>
 801e542:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e546:	2b06      	cmp	r3, #6
 801e548:	d80a      	bhi.n	801e560 <_scanf_float+0x278>
 801e54a:	f1bb 0f02 	cmp.w	fp, #2
 801e54e:	d968      	bls.n	801e622 <_scanf_float+0x33a>
 801e550:	f1ab 0b03 	sub.w	fp, fp, #3
 801e554:	fa5f fb8b 	uxtb.w	fp, fp
 801e558:	eba5 0b0b 	sub.w	fp, r5, fp
 801e55c:	455d      	cmp	r5, fp
 801e55e:	d14b      	bne.n	801e5f8 <_scanf_float+0x310>
 801e560:	6823      	ldr	r3, [r4, #0]
 801e562:	05da      	lsls	r2, r3, #23
 801e564:	d51f      	bpl.n	801e5a6 <_scanf_float+0x2be>
 801e566:	055b      	lsls	r3, r3, #21
 801e568:	d468      	bmi.n	801e63c <_scanf_float+0x354>
 801e56a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e56e:	6923      	ldr	r3, [r4, #16]
 801e570:	2965      	cmp	r1, #101	; 0x65
 801e572:	f103 33ff 	add.w	r3, r3, #4294967295
 801e576:	f105 3bff 	add.w	fp, r5, #4294967295
 801e57a:	6123      	str	r3, [r4, #16]
 801e57c:	d00d      	beq.n	801e59a <_scanf_float+0x2b2>
 801e57e:	2945      	cmp	r1, #69	; 0x45
 801e580:	d00b      	beq.n	801e59a <_scanf_float+0x2b2>
 801e582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e586:	4632      	mov	r2, r6
 801e588:	4638      	mov	r0, r7
 801e58a:	4798      	blx	r3
 801e58c:	6923      	ldr	r3, [r4, #16]
 801e58e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801e592:	3b01      	subs	r3, #1
 801e594:	f1a5 0b02 	sub.w	fp, r5, #2
 801e598:	6123      	str	r3, [r4, #16]
 801e59a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e59e:	4632      	mov	r2, r6
 801e5a0:	4638      	mov	r0, r7
 801e5a2:	4798      	blx	r3
 801e5a4:	465d      	mov	r5, fp
 801e5a6:	6826      	ldr	r6, [r4, #0]
 801e5a8:	f016 0610 	ands.w	r6, r6, #16
 801e5ac:	d17a      	bne.n	801e6a4 <_scanf_float+0x3bc>
 801e5ae:	702e      	strb	r6, [r5, #0]
 801e5b0:	6823      	ldr	r3, [r4, #0]
 801e5b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801e5b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e5ba:	d142      	bne.n	801e642 <_scanf_float+0x35a>
 801e5bc:	9b02      	ldr	r3, [sp, #8]
 801e5be:	eba9 0303 	sub.w	r3, r9, r3
 801e5c2:	425a      	negs	r2, r3
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d149      	bne.n	801e65c <_scanf_float+0x374>
 801e5c8:	2200      	movs	r2, #0
 801e5ca:	4641      	mov	r1, r8
 801e5cc:	4638      	mov	r0, r7
 801e5ce:	f000 ffbf 	bl	801f550 <_strtod_r>
 801e5d2:	6825      	ldr	r5, [r4, #0]
 801e5d4:	f8da 3000 	ldr.w	r3, [sl]
 801e5d8:	f015 0f02 	tst.w	r5, #2
 801e5dc:	f103 0204 	add.w	r2, r3, #4
 801e5e0:	ec59 8b10 	vmov	r8, r9, d0
 801e5e4:	f8ca 2000 	str.w	r2, [sl]
 801e5e8:	d043      	beq.n	801e672 <_scanf_float+0x38a>
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	e9c3 8900 	strd	r8, r9, [r3]
 801e5f0:	68e3      	ldr	r3, [r4, #12]
 801e5f2:	3301      	adds	r3, #1
 801e5f4:	60e3      	str	r3, [r4, #12]
 801e5f6:	e6be      	b.n	801e376 <_scanf_float+0x8e>
 801e5f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e5fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801e600:	4632      	mov	r2, r6
 801e602:	4638      	mov	r0, r7
 801e604:	4798      	blx	r3
 801e606:	6923      	ldr	r3, [r4, #16]
 801e608:	3b01      	subs	r3, #1
 801e60a:	6123      	str	r3, [r4, #16]
 801e60c:	e7a6      	b.n	801e55c <_scanf_float+0x274>
 801e60e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e612:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801e616:	4632      	mov	r2, r6
 801e618:	4638      	mov	r0, r7
 801e61a:	4798      	blx	r3
 801e61c:	6923      	ldr	r3, [r4, #16]
 801e61e:	3b01      	subs	r3, #1
 801e620:	6123      	str	r3, [r4, #16]
 801e622:	4545      	cmp	r5, r8
 801e624:	d8f3      	bhi.n	801e60e <_scanf_float+0x326>
 801e626:	e6a5      	b.n	801e374 <_scanf_float+0x8c>
 801e628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e62c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801e630:	4632      	mov	r2, r6
 801e632:	4638      	mov	r0, r7
 801e634:	4798      	blx	r3
 801e636:	6923      	ldr	r3, [r4, #16]
 801e638:	3b01      	subs	r3, #1
 801e63a:	6123      	str	r3, [r4, #16]
 801e63c:	4545      	cmp	r5, r8
 801e63e:	d8f3      	bhi.n	801e628 <_scanf_float+0x340>
 801e640:	e698      	b.n	801e374 <_scanf_float+0x8c>
 801e642:	9b03      	ldr	r3, [sp, #12]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d0bf      	beq.n	801e5c8 <_scanf_float+0x2e0>
 801e648:	9904      	ldr	r1, [sp, #16]
 801e64a:	230a      	movs	r3, #10
 801e64c:	4632      	mov	r2, r6
 801e64e:	3101      	adds	r1, #1
 801e650:	4638      	mov	r0, r7
 801e652:	f001 f809 	bl	801f668 <_strtol_r>
 801e656:	9b03      	ldr	r3, [sp, #12]
 801e658:	9d04      	ldr	r5, [sp, #16]
 801e65a:	1ac2      	subs	r2, r0, r3
 801e65c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801e660:	429d      	cmp	r5, r3
 801e662:	bf28      	it	cs
 801e664:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801e668:	490f      	ldr	r1, [pc, #60]	; (801e6a8 <_scanf_float+0x3c0>)
 801e66a:	4628      	mov	r0, r5
 801e66c:	f000 f936 	bl	801e8dc <siprintf>
 801e670:	e7aa      	b.n	801e5c8 <_scanf_float+0x2e0>
 801e672:	f015 0504 	ands.w	r5, r5, #4
 801e676:	d1b8      	bne.n	801e5ea <_scanf_float+0x302>
 801e678:	681f      	ldr	r7, [r3, #0]
 801e67a:	ee10 2a10 	vmov	r2, s0
 801e67e:	464b      	mov	r3, r9
 801e680:	ee10 0a10 	vmov	r0, s0
 801e684:	4649      	mov	r1, r9
 801e686:	f7e2 fa61 	bl	8000b4c <__aeabi_dcmpun>
 801e68a:	b128      	cbz	r0, 801e698 <_scanf_float+0x3b0>
 801e68c:	4628      	mov	r0, r5
 801e68e:	f000 f91f 	bl	801e8d0 <nanf>
 801e692:	ed87 0a00 	vstr	s0, [r7]
 801e696:	e7ab      	b.n	801e5f0 <_scanf_float+0x308>
 801e698:	4640      	mov	r0, r8
 801e69a:	4649      	mov	r1, r9
 801e69c:	f7e2 fab4 	bl	8000c08 <__aeabi_d2f>
 801e6a0:	6038      	str	r0, [r7, #0]
 801e6a2:	e7a5      	b.n	801e5f0 <_scanf_float+0x308>
 801e6a4:	2600      	movs	r6, #0
 801e6a6:	e666      	b.n	801e376 <_scanf_float+0x8e>
 801e6a8:	08022b8d 	.word	0x08022b8d

0801e6ac <_puts_r>:
 801e6ac:	b570      	push	{r4, r5, r6, lr}
 801e6ae:	460e      	mov	r6, r1
 801e6b0:	4605      	mov	r5, r0
 801e6b2:	b118      	cbz	r0, 801e6bc <_puts_r+0x10>
 801e6b4:	6983      	ldr	r3, [r0, #24]
 801e6b6:	b90b      	cbnz	r3, 801e6bc <_puts_r+0x10>
 801e6b8:	f001 ffe6 	bl	8020688 <__sinit>
 801e6bc:	69ab      	ldr	r3, [r5, #24]
 801e6be:	68ac      	ldr	r4, [r5, #8]
 801e6c0:	b913      	cbnz	r3, 801e6c8 <_puts_r+0x1c>
 801e6c2:	4628      	mov	r0, r5
 801e6c4:	f001 ffe0 	bl	8020688 <__sinit>
 801e6c8:	4b23      	ldr	r3, [pc, #140]	; (801e758 <_puts_r+0xac>)
 801e6ca:	429c      	cmp	r4, r3
 801e6cc:	d117      	bne.n	801e6fe <_puts_r+0x52>
 801e6ce:	686c      	ldr	r4, [r5, #4]
 801e6d0:	89a3      	ldrh	r3, [r4, #12]
 801e6d2:	071b      	lsls	r3, r3, #28
 801e6d4:	d51d      	bpl.n	801e712 <_puts_r+0x66>
 801e6d6:	6923      	ldr	r3, [r4, #16]
 801e6d8:	b1db      	cbz	r3, 801e712 <_puts_r+0x66>
 801e6da:	3e01      	subs	r6, #1
 801e6dc:	68a3      	ldr	r3, [r4, #8]
 801e6de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e6e2:	3b01      	subs	r3, #1
 801e6e4:	60a3      	str	r3, [r4, #8]
 801e6e6:	b9e9      	cbnz	r1, 801e724 <_puts_r+0x78>
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	da2e      	bge.n	801e74a <_puts_r+0x9e>
 801e6ec:	4622      	mov	r2, r4
 801e6ee:	210a      	movs	r1, #10
 801e6f0:	4628      	mov	r0, r5
 801e6f2:	f000 ffcb 	bl	801f68c <__swbuf_r>
 801e6f6:	3001      	adds	r0, #1
 801e6f8:	d011      	beq.n	801e71e <_puts_r+0x72>
 801e6fa:	200a      	movs	r0, #10
 801e6fc:	e011      	b.n	801e722 <_puts_r+0x76>
 801e6fe:	4b17      	ldr	r3, [pc, #92]	; (801e75c <_puts_r+0xb0>)
 801e700:	429c      	cmp	r4, r3
 801e702:	d101      	bne.n	801e708 <_puts_r+0x5c>
 801e704:	68ac      	ldr	r4, [r5, #8]
 801e706:	e7e3      	b.n	801e6d0 <_puts_r+0x24>
 801e708:	4b15      	ldr	r3, [pc, #84]	; (801e760 <_puts_r+0xb4>)
 801e70a:	429c      	cmp	r4, r3
 801e70c:	bf08      	it	eq
 801e70e:	68ec      	ldreq	r4, [r5, #12]
 801e710:	e7de      	b.n	801e6d0 <_puts_r+0x24>
 801e712:	4621      	mov	r1, r4
 801e714:	4628      	mov	r0, r5
 801e716:	f001 f80b 	bl	801f730 <__swsetup_r>
 801e71a:	2800      	cmp	r0, #0
 801e71c:	d0dd      	beq.n	801e6da <_puts_r+0x2e>
 801e71e:	f04f 30ff 	mov.w	r0, #4294967295
 801e722:	bd70      	pop	{r4, r5, r6, pc}
 801e724:	2b00      	cmp	r3, #0
 801e726:	da04      	bge.n	801e732 <_puts_r+0x86>
 801e728:	69a2      	ldr	r2, [r4, #24]
 801e72a:	429a      	cmp	r2, r3
 801e72c:	dc06      	bgt.n	801e73c <_puts_r+0x90>
 801e72e:	290a      	cmp	r1, #10
 801e730:	d004      	beq.n	801e73c <_puts_r+0x90>
 801e732:	6823      	ldr	r3, [r4, #0]
 801e734:	1c5a      	adds	r2, r3, #1
 801e736:	6022      	str	r2, [r4, #0]
 801e738:	7019      	strb	r1, [r3, #0]
 801e73a:	e7cf      	b.n	801e6dc <_puts_r+0x30>
 801e73c:	4622      	mov	r2, r4
 801e73e:	4628      	mov	r0, r5
 801e740:	f000 ffa4 	bl	801f68c <__swbuf_r>
 801e744:	3001      	adds	r0, #1
 801e746:	d1c9      	bne.n	801e6dc <_puts_r+0x30>
 801e748:	e7e9      	b.n	801e71e <_puts_r+0x72>
 801e74a:	6823      	ldr	r3, [r4, #0]
 801e74c:	200a      	movs	r0, #10
 801e74e:	1c5a      	adds	r2, r3, #1
 801e750:	6022      	str	r2, [r4, #0]
 801e752:	7018      	strb	r0, [r3, #0]
 801e754:	e7e5      	b.n	801e722 <_puts_r+0x76>
 801e756:	bf00      	nop
 801e758:	08022c18 	.word	0x08022c18
 801e75c:	08022c38 	.word	0x08022c38
 801e760:	08022bf8 	.word	0x08022bf8

0801e764 <puts>:
 801e764:	4b02      	ldr	r3, [pc, #8]	; (801e770 <puts+0xc>)
 801e766:	4601      	mov	r1, r0
 801e768:	6818      	ldr	r0, [r3, #0]
 801e76a:	f7ff bf9f 	b.w	801e6ac <_puts_r>
 801e76e:	bf00      	nop
 801e770:	200000e0 	.word	0x200000e0

0801e774 <setvbuf>:
 801e774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e778:	461d      	mov	r5, r3
 801e77a:	4b51      	ldr	r3, [pc, #324]	; (801e8c0 <setvbuf+0x14c>)
 801e77c:	681e      	ldr	r6, [r3, #0]
 801e77e:	4604      	mov	r4, r0
 801e780:	460f      	mov	r7, r1
 801e782:	4690      	mov	r8, r2
 801e784:	b126      	cbz	r6, 801e790 <setvbuf+0x1c>
 801e786:	69b3      	ldr	r3, [r6, #24]
 801e788:	b913      	cbnz	r3, 801e790 <setvbuf+0x1c>
 801e78a:	4630      	mov	r0, r6
 801e78c:	f001 ff7c 	bl	8020688 <__sinit>
 801e790:	4b4c      	ldr	r3, [pc, #304]	; (801e8c4 <setvbuf+0x150>)
 801e792:	429c      	cmp	r4, r3
 801e794:	d152      	bne.n	801e83c <setvbuf+0xc8>
 801e796:	6874      	ldr	r4, [r6, #4]
 801e798:	f1b8 0f02 	cmp.w	r8, #2
 801e79c:	d006      	beq.n	801e7ac <setvbuf+0x38>
 801e79e:	f1b8 0f01 	cmp.w	r8, #1
 801e7a2:	f200 8089 	bhi.w	801e8b8 <setvbuf+0x144>
 801e7a6:	2d00      	cmp	r5, #0
 801e7a8:	f2c0 8086 	blt.w	801e8b8 <setvbuf+0x144>
 801e7ac:	4621      	mov	r1, r4
 801e7ae:	4630      	mov	r0, r6
 801e7b0:	f001 ff00 	bl	80205b4 <_fflush_r>
 801e7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e7b6:	b141      	cbz	r1, 801e7ca <setvbuf+0x56>
 801e7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e7bc:	4299      	cmp	r1, r3
 801e7be:	d002      	beq.n	801e7c6 <setvbuf+0x52>
 801e7c0:	4630      	mov	r0, r6
 801e7c2:	f002 ffc9 	bl	8021758 <_free_r>
 801e7c6:	2300      	movs	r3, #0
 801e7c8:	6363      	str	r3, [r4, #52]	; 0x34
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	61a3      	str	r3, [r4, #24]
 801e7ce:	6063      	str	r3, [r4, #4]
 801e7d0:	89a3      	ldrh	r3, [r4, #12]
 801e7d2:	061b      	lsls	r3, r3, #24
 801e7d4:	d503      	bpl.n	801e7de <setvbuf+0x6a>
 801e7d6:	6921      	ldr	r1, [r4, #16]
 801e7d8:	4630      	mov	r0, r6
 801e7da:	f002 ffbd 	bl	8021758 <_free_r>
 801e7de:	89a3      	ldrh	r3, [r4, #12]
 801e7e0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801e7e4:	f023 0303 	bic.w	r3, r3, #3
 801e7e8:	f1b8 0f02 	cmp.w	r8, #2
 801e7ec:	81a3      	strh	r3, [r4, #12]
 801e7ee:	d05d      	beq.n	801e8ac <setvbuf+0x138>
 801e7f0:	ab01      	add	r3, sp, #4
 801e7f2:	466a      	mov	r2, sp
 801e7f4:	4621      	mov	r1, r4
 801e7f6:	4630      	mov	r0, r6
 801e7f8:	f002 fb0a 	bl	8020e10 <__swhatbuf_r>
 801e7fc:	89a3      	ldrh	r3, [r4, #12]
 801e7fe:	4318      	orrs	r0, r3
 801e800:	81a0      	strh	r0, [r4, #12]
 801e802:	bb2d      	cbnz	r5, 801e850 <setvbuf+0xdc>
 801e804:	9d00      	ldr	r5, [sp, #0]
 801e806:	4628      	mov	r0, r5
 801e808:	f002 fb66 	bl	8020ed8 <malloc>
 801e80c:	4607      	mov	r7, r0
 801e80e:	2800      	cmp	r0, #0
 801e810:	d14e      	bne.n	801e8b0 <setvbuf+0x13c>
 801e812:	f8dd 9000 	ldr.w	r9, [sp]
 801e816:	45a9      	cmp	r9, r5
 801e818:	d13c      	bne.n	801e894 <setvbuf+0x120>
 801e81a:	f04f 30ff 	mov.w	r0, #4294967295
 801e81e:	89a3      	ldrh	r3, [r4, #12]
 801e820:	f043 0302 	orr.w	r3, r3, #2
 801e824:	81a3      	strh	r3, [r4, #12]
 801e826:	2300      	movs	r3, #0
 801e828:	60a3      	str	r3, [r4, #8]
 801e82a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e82e:	6023      	str	r3, [r4, #0]
 801e830:	6123      	str	r3, [r4, #16]
 801e832:	2301      	movs	r3, #1
 801e834:	6163      	str	r3, [r4, #20]
 801e836:	b003      	add	sp, #12
 801e838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e83c:	4b22      	ldr	r3, [pc, #136]	; (801e8c8 <setvbuf+0x154>)
 801e83e:	429c      	cmp	r4, r3
 801e840:	d101      	bne.n	801e846 <setvbuf+0xd2>
 801e842:	68b4      	ldr	r4, [r6, #8]
 801e844:	e7a8      	b.n	801e798 <setvbuf+0x24>
 801e846:	4b21      	ldr	r3, [pc, #132]	; (801e8cc <setvbuf+0x158>)
 801e848:	429c      	cmp	r4, r3
 801e84a:	bf08      	it	eq
 801e84c:	68f4      	ldreq	r4, [r6, #12]
 801e84e:	e7a3      	b.n	801e798 <setvbuf+0x24>
 801e850:	2f00      	cmp	r7, #0
 801e852:	d0d8      	beq.n	801e806 <setvbuf+0x92>
 801e854:	69b3      	ldr	r3, [r6, #24]
 801e856:	b913      	cbnz	r3, 801e85e <setvbuf+0xea>
 801e858:	4630      	mov	r0, r6
 801e85a:	f001 ff15 	bl	8020688 <__sinit>
 801e85e:	f1b8 0f01 	cmp.w	r8, #1
 801e862:	bf08      	it	eq
 801e864:	89a3      	ldrheq	r3, [r4, #12]
 801e866:	6027      	str	r7, [r4, #0]
 801e868:	bf04      	itt	eq
 801e86a:	f043 0301 	orreq.w	r3, r3, #1
 801e86e:	81a3      	strheq	r3, [r4, #12]
 801e870:	89a3      	ldrh	r3, [r4, #12]
 801e872:	f013 0008 	ands.w	r0, r3, #8
 801e876:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801e87a:	d01b      	beq.n	801e8b4 <setvbuf+0x140>
 801e87c:	f013 0001 	ands.w	r0, r3, #1
 801e880:	bf18      	it	ne
 801e882:	426d      	negne	r5, r5
 801e884:	f04f 0300 	mov.w	r3, #0
 801e888:	bf1d      	ittte	ne
 801e88a:	60a3      	strne	r3, [r4, #8]
 801e88c:	61a5      	strne	r5, [r4, #24]
 801e88e:	4618      	movne	r0, r3
 801e890:	60a5      	streq	r5, [r4, #8]
 801e892:	e7d0      	b.n	801e836 <setvbuf+0xc2>
 801e894:	4648      	mov	r0, r9
 801e896:	f002 fb1f 	bl	8020ed8 <malloc>
 801e89a:	4607      	mov	r7, r0
 801e89c:	2800      	cmp	r0, #0
 801e89e:	d0bc      	beq.n	801e81a <setvbuf+0xa6>
 801e8a0:	89a3      	ldrh	r3, [r4, #12]
 801e8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8a6:	81a3      	strh	r3, [r4, #12]
 801e8a8:	464d      	mov	r5, r9
 801e8aa:	e7d3      	b.n	801e854 <setvbuf+0xe0>
 801e8ac:	2000      	movs	r0, #0
 801e8ae:	e7b6      	b.n	801e81e <setvbuf+0xaa>
 801e8b0:	46a9      	mov	r9, r5
 801e8b2:	e7f5      	b.n	801e8a0 <setvbuf+0x12c>
 801e8b4:	60a0      	str	r0, [r4, #8]
 801e8b6:	e7be      	b.n	801e836 <setvbuf+0xc2>
 801e8b8:	f04f 30ff 	mov.w	r0, #4294967295
 801e8bc:	e7bb      	b.n	801e836 <setvbuf+0xc2>
 801e8be:	bf00      	nop
 801e8c0:	200000e0 	.word	0x200000e0
 801e8c4:	08022c18 	.word	0x08022c18
 801e8c8:	08022c38 	.word	0x08022c38
 801e8cc:	08022bf8 	.word	0x08022bf8

0801e8d0 <nanf>:
 801e8d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801e8d8 <nanf+0x8>
 801e8d4:	4770      	bx	lr
 801e8d6:	bf00      	nop
 801e8d8:	7fc00000 	.word	0x7fc00000

0801e8dc <siprintf>:
 801e8dc:	b40e      	push	{r1, r2, r3}
 801e8de:	b500      	push	{lr}
 801e8e0:	b09c      	sub	sp, #112	; 0x70
 801e8e2:	ab1d      	add	r3, sp, #116	; 0x74
 801e8e4:	9002      	str	r0, [sp, #8]
 801e8e6:	9006      	str	r0, [sp, #24]
 801e8e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e8ec:	4809      	ldr	r0, [pc, #36]	; (801e914 <siprintf+0x38>)
 801e8ee:	9107      	str	r1, [sp, #28]
 801e8f0:	9104      	str	r1, [sp, #16]
 801e8f2:	4909      	ldr	r1, [pc, #36]	; (801e918 <siprintf+0x3c>)
 801e8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8f8:	9105      	str	r1, [sp, #20]
 801e8fa:	6800      	ldr	r0, [r0, #0]
 801e8fc:	9301      	str	r3, [sp, #4]
 801e8fe:	a902      	add	r1, sp, #8
 801e900:	f003 f852 	bl	80219a8 <_svfiprintf_r>
 801e904:	9b02      	ldr	r3, [sp, #8]
 801e906:	2200      	movs	r2, #0
 801e908:	701a      	strb	r2, [r3, #0]
 801e90a:	b01c      	add	sp, #112	; 0x70
 801e90c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e910:	b003      	add	sp, #12
 801e912:	4770      	bx	lr
 801e914:	200000e0 	.word	0x200000e0
 801e918:	ffff0208 	.word	0xffff0208

0801e91c <strcpy>:
 801e91c:	4603      	mov	r3, r0
 801e91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e922:	f803 2b01 	strb.w	r2, [r3], #1
 801e926:	2a00      	cmp	r2, #0
 801e928:	d1f9      	bne.n	801e91e <strcpy+0x2>
 801e92a:	4770      	bx	lr

0801e92c <sulp>:
 801e92c:	b570      	push	{r4, r5, r6, lr}
 801e92e:	4604      	mov	r4, r0
 801e930:	460d      	mov	r5, r1
 801e932:	ec45 4b10 	vmov	d0, r4, r5
 801e936:	4616      	mov	r6, r2
 801e938:	f002 fdcc 	bl	80214d4 <__ulp>
 801e93c:	ec51 0b10 	vmov	r0, r1, d0
 801e940:	b17e      	cbz	r6, 801e962 <sulp+0x36>
 801e942:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801e946:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	dd09      	ble.n	801e962 <sulp+0x36>
 801e94e:	051b      	lsls	r3, r3, #20
 801e950:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801e954:	2400      	movs	r4, #0
 801e956:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801e95a:	4622      	mov	r2, r4
 801e95c:	462b      	mov	r3, r5
 801e95e:	f7e1 fe5b 	bl	8000618 <__aeabi_dmul>
 801e962:	bd70      	pop	{r4, r5, r6, pc}
 801e964:	0000      	movs	r0, r0
	...

0801e968 <_strtod_l>:
 801e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e96c:	461f      	mov	r7, r3
 801e96e:	b0a1      	sub	sp, #132	; 0x84
 801e970:	2300      	movs	r3, #0
 801e972:	4681      	mov	r9, r0
 801e974:	4638      	mov	r0, r7
 801e976:	460e      	mov	r6, r1
 801e978:	9217      	str	r2, [sp, #92]	; 0x5c
 801e97a:	931c      	str	r3, [sp, #112]	; 0x70
 801e97c:	f002 fa37 	bl	8020dee <__localeconv_l>
 801e980:	4680      	mov	r8, r0
 801e982:	6800      	ldr	r0, [r0, #0]
 801e984:	f7e1 fc34 	bl	80001f0 <strlen>
 801e988:	f04f 0a00 	mov.w	sl, #0
 801e98c:	4604      	mov	r4, r0
 801e98e:	f04f 0b00 	mov.w	fp, #0
 801e992:	961b      	str	r6, [sp, #108]	; 0x6c
 801e994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e996:	781a      	ldrb	r2, [r3, #0]
 801e998:	2a0d      	cmp	r2, #13
 801e99a:	d832      	bhi.n	801ea02 <_strtod_l+0x9a>
 801e99c:	2a09      	cmp	r2, #9
 801e99e:	d236      	bcs.n	801ea0e <_strtod_l+0xa6>
 801e9a0:	2a00      	cmp	r2, #0
 801e9a2:	d03e      	beq.n	801ea22 <_strtod_l+0xba>
 801e9a4:	2300      	movs	r3, #0
 801e9a6:	930d      	str	r3, [sp, #52]	; 0x34
 801e9a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801e9aa:	782b      	ldrb	r3, [r5, #0]
 801e9ac:	2b30      	cmp	r3, #48	; 0x30
 801e9ae:	f040 80ac 	bne.w	801eb0a <_strtod_l+0x1a2>
 801e9b2:	786b      	ldrb	r3, [r5, #1]
 801e9b4:	2b58      	cmp	r3, #88	; 0x58
 801e9b6:	d001      	beq.n	801e9bc <_strtod_l+0x54>
 801e9b8:	2b78      	cmp	r3, #120	; 0x78
 801e9ba:	d167      	bne.n	801ea8c <_strtod_l+0x124>
 801e9bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9be:	9301      	str	r3, [sp, #4]
 801e9c0:	ab1c      	add	r3, sp, #112	; 0x70
 801e9c2:	9300      	str	r3, [sp, #0]
 801e9c4:	9702      	str	r7, [sp, #8]
 801e9c6:	ab1d      	add	r3, sp, #116	; 0x74
 801e9c8:	4a88      	ldr	r2, [pc, #544]	; (801ebec <_strtod_l+0x284>)
 801e9ca:	a91b      	add	r1, sp, #108	; 0x6c
 801e9cc:	4648      	mov	r0, r9
 801e9ce:	f001 ff34 	bl	802083a <__gethex>
 801e9d2:	f010 0407 	ands.w	r4, r0, #7
 801e9d6:	4606      	mov	r6, r0
 801e9d8:	d005      	beq.n	801e9e6 <_strtod_l+0x7e>
 801e9da:	2c06      	cmp	r4, #6
 801e9dc:	d12b      	bne.n	801ea36 <_strtod_l+0xce>
 801e9de:	3501      	adds	r5, #1
 801e9e0:	2300      	movs	r3, #0
 801e9e2:	951b      	str	r5, [sp, #108]	; 0x6c
 801e9e4:	930d      	str	r3, [sp, #52]	; 0x34
 801e9e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	f040 859a 	bne.w	801f522 <_strtod_l+0xbba>
 801e9ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9f0:	b1e3      	cbz	r3, 801ea2c <_strtod_l+0xc4>
 801e9f2:	4652      	mov	r2, sl
 801e9f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801e9f8:	ec43 2b10 	vmov	d0, r2, r3
 801e9fc:	b021      	add	sp, #132	; 0x84
 801e9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea02:	2a2b      	cmp	r2, #43	; 0x2b
 801ea04:	d015      	beq.n	801ea32 <_strtod_l+0xca>
 801ea06:	2a2d      	cmp	r2, #45	; 0x2d
 801ea08:	d004      	beq.n	801ea14 <_strtod_l+0xac>
 801ea0a:	2a20      	cmp	r2, #32
 801ea0c:	d1ca      	bne.n	801e9a4 <_strtod_l+0x3c>
 801ea0e:	3301      	adds	r3, #1
 801ea10:	931b      	str	r3, [sp, #108]	; 0x6c
 801ea12:	e7bf      	b.n	801e994 <_strtod_l+0x2c>
 801ea14:	2201      	movs	r2, #1
 801ea16:	920d      	str	r2, [sp, #52]	; 0x34
 801ea18:	1c5a      	adds	r2, r3, #1
 801ea1a:	921b      	str	r2, [sp, #108]	; 0x6c
 801ea1c:	785b      	ldrb	r3, [r3, #1]
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d1c2      	bne.n	801e9a8 <_strtod_l+0x40>
 801ea22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ea24:	961b      	str	r6, [sp, #108]	; 0x6c
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	f040 8579 	bne.w	801f51e <_strtod_l+0xbb6>
 801ea2c:	4652      	mov	r2, sl
 801ea2e:	465b      	mov	r3, fp
 801ea30:	e7e2      	b.n	801e9f8 <_strtod_l+0x90>
 801ea32:	2200      	movs	r2, #0
 801ea34:	e7ef      	b.n	801ea16 <_strtod_l+0xae>
 801ea36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ea38:	b13a      	cbz	r2, 801ea4a <_strtod_l+0xe2>
 801ea3a:	2135      	movs	r1, #53	; 0x35
 801ea3c:	a81e      	add	r0, sp, #120	; 0x78
 801ea3e:	f002 fe41 	bl	80216c4 <__copybits>
 801ea42:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ea44:	4648      	mov	r0, r9
 801ea46:	f002 faae 	bl	8020fa6 <_Bfree>
 801ea4a:	3c01      	subs	r4, #1
 801ea4c:	2c04      	cmp	r4, #4
 801ea4e:	d806      	bhi.n	801ea5e <_strtod_l+0xf6>
 801ea50:	e8df f004 	tbb	[pc, r4]
 801ea54:	1714030a 	.word	0x1714030a
 801ea58:	0a          	.byte	0x0a
 801ea59:	00          	.byte	0x00
 801ea5a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801ea5e:	0730      	lsls	r0, r6, #28
 801ea60:	d5c1      	bpl.n	801e9e6 <_strtod_l+0x7e>
 801ea62:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ea66:	e7be      	b.n	801e9e6 <_strtod_l+0x7e>
 801ea68:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801ea6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ea6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ea72:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ea76:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ea7a:	e7f0      	b.n	801ea5e <_strtod_l+0xf6>
 801ea7c:	f8df b170 	ldr.w	fp, [pc, #368]	; 801ebf0 <_strtod_l+0x288>
 801ea80:	e7ed      	b.n	801ea5e <_strtod_l+0xf6>
 801ea82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ea86:	f04f 3aff 	mov.w	sl, #4294967295
 801ea8a:	e7e8      	b.n	801ea5e <_strtod_l+0xf6>
 801ea8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ea8e:	1c5a      	adds	r2, r3, #1
 801ea90:	921b      	str	r2, [sp, #108]	; 0x6c
 801ea92:	785b      	ldrb	r3, [r3, #1]
 801ea94:	2b30      	cmp	r3, #48	; 0x30
 801ea96:	d0f9      	beq.n	801ea8c <_strtod_l+0x124>
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d0a4      	beq.n	801e9e6 <_strtod_l+0x7e>
 801ea9c:	2301      	movs	r3, #1
 801ea9e:	2500      	movs	r5, #0
 801eaa0:	9306      	str	r3, [sp, #24]
 801eaa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eaa4:	9308      	str	r3, [sp, #32]
 801eaa6:	9507      	str	r5, [sp, #28]
 801eaa8:	9505      	str	r5, [sp, #20]
 801eaaa:	220a      	movs	r2, #10
 801eaac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801eaae:	7807      	ldrb	r7, [r0, #0]
 801eab0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801eab4:	b2d9      	uxtb	r1, r3
 801eab6:	2909      	cmp	r1, #9
 801eab8:	d929      	bls.n	801eb0e <_strtod_l+0x1a6>
 801eaba:	4622      	mov	r2, r4
 801eabc:	f8d8 1000 	ldr.w	r1, [r8]
 801eac0:	f003 f901 	bl	8021cc6 <strncmp>
 801eac4:	2800      	cmp	r0, #0
 801eac6:	d031      	beq.n	801eb2c <_strtod_l+0x1c4>
 801eac8:	2000      	movs	r0, #0
 801eaca:	9c05      	ldr	r4, [sp, #20]
 801eacc:	9004      	str	r0, [sp, #16]
 801eace:	463b      	mov	r3, r7
 801ead0:	4602      	mov	r2, r0
 801ead2:	2b65      	cmp	r3, #101	; 0x65
 801ead4:	d001      	beq.n	801eada <_strtod_l+0x172>
 801ead6:	2b45      	cmp	r3, #69	; 0x45
 801ead8:	d114      	bne.n	801eb04 <_strtod_l+0x19c>
 801eada:	b924      	cbnz	r4, 801eae6 <_strtod_l+0x17e>
 801eadc:	b910      	cbnz	r0, 801eae4 <_strtod_l+0x17c>
 801eade:	9b06      	ldr	r3, [sp, #24]
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	d09e      	beq.n	801ea22 <_strtod_l+0xba>
 801eae4:	2400      	movs	r4, #0
 801eae6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801eae8:	1c73      	adds	r3, r6, #1
 801eaea:	931b      	str	r3, [sp, #108]	; 0x6c
 801eaec:	7873      	ldrb	r3, [r6, #1]
 801eaee:	2b2b      	cmp	r3, #43	; 0x2b
 801eaf0:	d078      	beq.n	801ebe4 <_strtod_l+0x27c>
 801eaf2:	2b2d      	cmp	r3, #45	; 0x2d
 801eaf4:	d070      	beq.n	801ebd8 <_strtod_l+0x270>
 801eaf6:	f04f 0c00 	mov.w	ip, #0
 801eafa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801eafe:	2f09      	cmp	r7, #9
 801eb00:	d97c      	bls.n	801ebfc <_strtod_l+0x294>
 801eb02:	961b      	str	r6, [sp, #108]	; 0x6c
 801eb04:	f04f 0e00 	mov.w	lr, #0
 801eb08:	e09a      	b.n	801ec40 <_strtod_l+0x2d8>
 801eb0a:	2300      	movs	r3, #0
 801eb0c:	e7c7      	b.n	801ea9e <_strtod_l+0x136>
 801eb0e:	9905      	ldr	r1, [sp, #20]
 801eb10:	2908      	cmp	r1, #8
 801eb12:	bfdd      	ittte	le
 801eb14:	9907      	ldrle	r1, [sp, #28]
 801eb16:	fb02 3301 	mlale	r3, r2, r1, r3
 801eb1a:	9307      	strle	r3, [sp, #28]
 801eb1c:	fb02 3505 	mlagt	r5, r2, r5, r3
 801eb20:	9b05      	ldr	r3, [sp, #20]
 801eb22:	3001      	adds	r0, #1
 801eb24:	3301      	adds	r3, #1
 801eb26:	9305      	str	r3, [sp, #20]
 801eb28:	901b      	str	r0, [sp, #108]	; 0x6c
 801eb2a:	e7bf      	b.n	801eaac <_strtod_l+0x144>
 801eb2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eb2e:	191a      	adds	r2, r3, r4
 801eb30:	921b      	str	r2, [sp, #108]	; 0x6c
 801eb32:	9a05      	ldr	r2, [sp, #20]
 801eb34:	5d1b      	ldrb	r3, [r3, r4]
 801eb36:	2a00      	cmp	r2, #0
 801eb38:	d037      	beq.n	801ebaa <_strtod_l+0x242>
 801eb3a:	9c05      	ldr	r4, [sp, #20]
 801eb3c:	4602      	mov	r2, r0
 801eb3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801eb42:	2909      	cmp	r1, #9
 801eb44:	d913      	bls.n	801eb6e <_strtod_l+0x206>
 801eb46:	2101      	movs	r1, #1
 801eb48:	9104      	str	r1, [sp, #16]
 801eb4a:	e7c2      	b.n	801ead2 <_strtod_l+0x16a>
 801eb4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eb4e:	1c5a      	adds	r2, r3, #1
 801eb50:	921b      	str	r2, [sp, #108]	; 0x6c
 801eb52:	785b      	ldrb	r3, [r3, #1]
 801eb54:	3001      	adds	r0, #1
 801eb56:	2b30      	cmp	r3, #48	; 0x30
 801eb58:	d0f8      	beq.n	801eb4c <_strtod_l+0x1e4>
 801eb5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801eb5e:	2a08      	cmp	r2, #8
 801eb60:	f200 84e4 	bhi.w	801f52c <_strtod_l+0xbc4>
 801eb64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801eb66:	9208      	str	r2, [sp, #32]
 801eb68:	4602      	mov	r2, r0
 801eb6a:	2000      	movs	r0, #0
 801eb6c:	4604      	mov	r4, r0
 801eb6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801eb72:	f100 0101 	add.w	r1, r0, #1
 801eb76:	d012      	beq.n	801eb9e <_strtod_l+0x236>
 801eb78:	440a      	add	r2, r1
 801eb7a:	eb00 0c04 	add.w	ip, r0, r4
 801eb7e:	4621      	mov	r1, r4
 801eb80:	270a      	movs	r7, #10
 801eb82:	458c      	cmp	ip, r1
 801eb84:	d113      	bne.n	801ebae <_strtod_l+0x246>
 801eb86:	1821      	adds	r1, r4, r0
 801eb88:	2908      	cmp	r1, #8
 801eb8a:	f104 0401 	add.w	r4, r4, #1
 801eb8e:	4404      	add	r4, r0
 801eb90:	dc19      	bgt.n	801ebc6 <_strtod_l+0x25e>
 801eb92:	9b07      	ldr	r3, [sp, #28]
 801eb94:	210a      	movs	r1, #10
 801eb96:	fb01 e303 	mla	r3, r1, r3, lr
 801eb9a:	9307      	str	r3, [sp, #28]
 801eb9c:	2100      	movs	r1, #0
 801eb9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eba0:	1c58      	adds	r0, r3, #1
 801eba2:	901b      	str	r0, [sp, #108]	; 0x6c
 801eba4:	785b      	ldrb	r3, [r3, #1]
 801eba6:	4608      	mov	r0, r1
 801eba8:	e7c9      	b.n	801eb3e <_strtod_l+0x1d6>
 801ebaa:	9805      	ldr	r0, [sp, #20]
 801ebac:	e7d3      	b.n	801eb56 <_strtod_l+0x1ee>
 801ebae:	2908      	cmp	r1, #8
 801ebb0:	f101 0101 	add.w	r1, r1, #1
 801ebb4:	dc03      	bgt.n	801ebbe <_strtod_l+0x256>
 801ebb6:	9b07      	ldr	r3, [sp, #28]
 801ebb8:	437b      	muls	r3, r7
 801ebba:	9307      	str	r3, [sp, #28]
 801ebbc:	e7e1      	b.n	801eb82 <_strtod_l+0x21a>
 801ebbe:	2910      	cmp	r1, #16
 801ebc0:	bfd8      	it	le
 801ebc2:	437d      	mulle	r5, r7
 801ebc4:	e7dd      	b.n	801eb82 <_strtod_l+0x21a>
 801ebc6:	2c10      	cmp	r4, #16
 801ebc8:	bfdc      	itt	le
 801ebca:	210a      	movle	r1, #10
 801ebcc:	fb01 e505 	mlale	r5, r1, r5, lr
 801ebd0:	e7e4      	b.n	801eb9c <_strtod_l+0x234>
 801ebd2:	2301      	movs	r3, #1
 801ebd4:	9304      	str	r3, [sp, #16]
 801ebd6:	e781      	b.n	801eadc <_strtod_l+0x174>
 801ebd8:	f04f 0c01 	mov.w	ip, #1
 801ebdc:	1cb3      	adds	r3, r6, #2
 801ebde:	931b      	str	r3, [sp, #108]	; 0x6c
 801ebe0:	78b3      	ldrb	r3, [r6, #2]
 801ebe2:	e78a      	b.n	801eafa <_strtod_l+0x192>
 801ebe4:	f04f 0c00 	mov.w	ip, #0
 801ebe8:	e7f8      	b.n	801ebdc <_strtod_l+0x274>
 801ebea:	bf00      	nop
 801ebec:	08022b94 	.word	0x08022b94
 801ebf0:	7ff00000 	.word	0x7ff00000
 801ebf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ebf6:	1c5f      	adds	r7, r3, #1
 801ebf8:	971b      	str	r7, [sp, #108]	; 0x6c
 801ebfa:	785b      	ldrb	r3, [r3, #1]
 801ebfc:	2b30      	cmp	r3, #48	; 0x30
 801ebfe:	d0f9      	beq.n	801ebf4 <_strtod_l+0x28c>
 801ec00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801ec04:	2f08      	cmp	r7, #8
 801ec06:	f63f af7d 	bhi.w	801eb04 <_strtod_l+0x19c>
 801ec0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801ec0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ec10:	930a      	str	r3, [sp, #40]	; 0x28
 801ec12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ec14:	1c5f      	adds	r7, r3, #1
 801ec16:	971b      	str	r7, [sp, #108]	; 0x6c
 801ec18:	785b      	ldrb	r3, [r3, #1]
 801ec1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801ec1e:	f1b8 0f09 	cmp.w	r8, #9
 801ec22:	d937      	bls.n	801ec94 <_strtod_l+0x32c>
 801ec24:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ec26:	1a7f      	subs	r7, r7, r1
 801ec28:	2f08      	cmp	r7, #8
 801ec2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801ec2e:	dc37      	bgt.n	801eca0 <_strtod_l+0x338>
 801ec30:	45be      	cmp	lr, r7
 801ec32:	bfa8      	it	ge
 801ec34:	46be      	movge	lr, r7
 801ec36:	f1bc 0f00 	cmp.w	ip, #0
 801ec3a:	d001      	beq.n	801ec40 <_strtod_l+0x2d8>
 801ec3c:	f1ce 0e00 	rsb	lr, lr, #0
 801ec40:	2c00      	cmp	r4, #0
 801ec42:	d151      	bne.n	801ece8 <_strtod_l+0x380>
 801ec44:	2800      	cmp	r0, #0
 801ec46:	f47f aece 	bne.w	801e9e6 <_strtod_l+0x7e>
 801ec4a:	9a06      	ldr	r2, [sp, #24]
 801ec4c:	2a00      	cmp	r2, #0
 801ec4e:	f47f aeca 	bne.w	801e9e6 <_strtod_l+0x7e>
 801ec52:	9a04      	ldr	r2, [sp, #16]
 801ec54:	2a00      	cmp	r2, #0
 801ec56:	f47f aee4 	bne.w	801ea22 <_strtod_l+0xba>
 801ec5a:	2b4e      	cmp	r3, #78	; 0x4e
 801ec5c:	d027      	beq.n	801ecae <_strtod_l+0x346>
 801ec5e:	dc21      	bgt.n	801eca4 <_strtod_l+0x33c>
 801ec60:	2b49      	cmp	r3, #73	; 0x49
 801ec62:	f47f aede 	bne.w	801ea22 <_strtod_l+0xba>
 801ec66:	49a0      	ldr	r1, [pc, #640]	; (801eee8 <_strtod_l+0x580>)
 801ec68:	a81b      	add	r0, sp, #108	; 0x6c
 801ec6a:	f002 f819 	bl	8020ca0 <__match>
 801ec6e:	2800      	cmp	r0, #0
 801ec70:	f43f aed7 	beq.w	801ea22 <_strtod_l+0xba>
 801ec74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ec76:	499d      	ldr	r1, [pc, #628]	; (801eeec <_strtod_l+0x584>)
 801ec78:	3b01      	subs	r3, #1
 801ec7a:	a81b      	add	r0, sp, #108	; 0x6c
 801ec7c:	931b      	str	r3, [sp, #108]	; 0x6c
 801ec7e:	f002 f80f 	bl	8020ca0 <__match>
 801ec82:	b910      	cbnz	r0, 801ec8a <_strtod_l+0x322>
 801ec84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ec86:	3301      	adds	r3, #1
 801ec88:	931b      	str	r3, [sp, #108]	; 0x6c
 801ec8a:	f8df b274 	ldr.w	fp, [pc, #628]	; 801ef00 <_strtod_l+0x598>
 801ec8e:	f04f 0a00 	mov.w	sl, #0
 801ec92:	e6a8      	b.n	801e9e6 <_strtod_l+0x7e>
 801ec94:	210a      	movs	r1, #10
 801ec96:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ec9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ec9e:	e7b8      	b.n	801ec12 <_strtod_l+0x2aa>
 801eca0:	46be      	mov	lr, r7
 801eca2:	e7c8      	b.n	801ec36 <_strtod_l+0x2ce>
 801eca4:	2b69      	cmp	r3, #105	; 0x69
 801eca6:	d0de      	beq.n	801ec66 <_strtod_l+0x2fe>
 801eca8:	2b6e      	cmp	r3, #110	; 0x6e
 801ecaa:	f47f aeba 	bne.w	801ea22 <_strtod_l+0xba>
 801ecae:	4990      	ldr	r1, [pc, #576]	; (801eef0 <_strtod_l+0x588>)
 801ecb0:	a81b      	add	r0, sp, #108	; 0x6c
 801ecb2:	f001 fff5 	bl	8020ca0 <__match>
 801ecb6:	2800      	cmp	r0, #0
 801ecb8:	f43f aeb3 	beq.w	801ea22 <_strtod_l+0xba>
 801ecbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ecbe:	781b      	ldrb	r3, [r3, #0]
 801ecc0:	2b28      	cmp	r3, #40	; 0x28
 801ecc2:	d10e      	bne.n	801ece2 <_strtod_l+0x37a>
 801ecc4:	aa1e      	add	r2, sp, #120	; 0x78
 801ecc6:	498b      	ldr	r1, [pc, #556]	; (801eef4 <_strtod_l+0x58c>)
 801ecc8:	a81b      	add	r0, sp, #108	; 0x6c
 801ecca:	f001 fffd 	bl	8020cc8 <__hexnan>
 801ecce:	2805      	cmp	r0, #5
 801ecd0:	d107      	bne.n	801ece2 <_strtod_l+0x37a>
 801ecd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ecd4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801ecd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ecdc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ece0:	e681      	b.n	801e9e6 <_strtod_l+0x7e>
 801ece2:	f8df b224 	ldr.w	fp, [pc, #548]	; 801ef08 <_strtod_l+0x5a0>
 801ece6:	e7d2      	b.n	801ec8e <_strtod_l+0x326>
 801ece8:	ebae 0302 	sub.w	r3, lr, r2
 801ecec:	9306      	str	r3, [sp, #24]
 801ecee:	9b05      	ldr	r3, [sp, #20]
 801ecf0:	9807      	ldr	r0, [sp, #28]
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	bf08      	it	eq
 801ecf6:	4623      	moveq	r3, r4
 801ecf8:	2c10      	cmp	r4, #16
 801ecfa:	9305      	str	r3, [sp, #20]
 801ecfc:	46a0      	mov	r8, r4
 801ecfe:	bfa8      	it	ge
 801ed00:	f04f 0810 	movge.w	r8, #16
 801ed04:	f7e1 fc0e 	bl	8000524 <__aeabi_ui2d>
 801ed08:	2c09      	cmp	r4, #9
 801ed0a:	4682      	mov	sl, r0
 801ed0c:	468b      	mov	fp, r1
 801ed0e:	dc13      	bgt.n	801ed38 <_strtod_l+0x3d0>
 801ed10:	9b06      	ldr	r3, [sp, #24]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	f43f ae67 	beq.w	801e9e6 <_strtod_l+0x7e>
 801ed18:	9b06      	ldr	r3, [sp, #24]
 801ed1a:	dd7a      	ble.n	801ee12 <_strtod_l+0x4aa>
 801ed1c:	2b16      	cmp	r3, #22
 801ed1e:	dc61      	bgt.n	801ede4 <_strtod_l+0x47c>
 801ed20:	4a75      	ldr	r2, [pc, #468]	; (801eef8 <_strtod_l+0x590>)
 801ed22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801ed26:	e9de 0100 	ldrd	r0, r1, [lr]
 801ed2a:	4652      	mov	r2, sl
 801ed2c:	465b      	mov	r3, fp
 801ed2e:	f7e1 fc73 	bl	8000618 <__aeabi_dmul>
 801ed32:	4682      	mov	sl, r0
 801ed34:	468b      	mov	fp, r1
 801ed36:	e656      	b.n	801e9e6 <_strtod_l+0x7e>
 801ed38:	4b6f      	ldr	r3, [pc, #444]	; (801eef8 <_strtod_l+0x590>)
 801ed3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ed3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ed42:	f7e1 fc69 	bl	8000618 <__aeabi_dmul>
 801ed46:	4606      	mov	r6, r0
 801ed48:	4628      	mov	r0, r5
 801ed4a:	460f      	mov	r7, r1
 801ed4c:	f7e1 fbea 	bl	8000524 <__aeabi_ui2d>
 801ed50:	4602      	mov	r2, r0
 801ed52:	460b      	mov	r3, r1
 801ed54:	4630      	mov	r0, r6
 801ed56:	4639      	mov	r1, r7
 801ed58:	f7e1 faa8 	bl	80002ac <__adddf3>
 801ed5c:	2c0f      	cmp	r4, #15
 801ed5e:	4682      	mov	sl, r0
 801ed60:	468b      	mov	fp, r1
 801ed62:	ddd5      	ble.n	801ed10 <_strtod_l+0x3a8>
 801ed64:	9b06      	ldr	r3, [sp, #24]
 801ed66:	eba4 0808 	sub.w	r8, r4, r8
 801ed6a:	4498      	add	r8, r3
 801ed6c:	f1b8 0f00 	cmp.w	r8, #0
 801ed70:	f340 8096 	ble.w	801eea0 <_strtod_l+0x538>
 801ed74:	f018 030f 	ands.w	r3, r8, #15
 801ed78:	d00a      	beq.n	801ed90 <_strtod_l+0x428>
 801ed7a:	495f      	ldr	r1, [pc, #380]	; (801eef8 <_strtod_l+0x590>)
 801ed7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ed80:	4652      	mov	r2, sl
 801ed82:	465b      	mov	r3, fp
 801ed84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed88:	f7e1 fc46 	bl	8000618 <__aeabi_dmul>
 801ed8c:	4682      	mov	sl, r0
 801ed8e:	468b      	mov	fp, r1
 801ed90:	f038 080f 	bics.w	r8, r8, #15
 801ed94:	d073      	beq.n	801ee7e <_strtod_l+0x516>
 801ed96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ed9a:	dd47      	ble.n	801ee2c <_strtod_l+0x4c4>
 801ed9c:	2400      	movs	r4, #0
 801ed9e:	46a0      	mov	r8, r4
 801eda0:	9407      	str	r4, [sp, #28]
 801eda2:	9405      	str	r4, [sp, #20]
 801eda4:	2322      	movs	r3, #34	; 0x22
 801eda6:	f8df b158 	ldr.w	fp, [pc, #344]	; 801ef00 <_strtod_l+0x598>
 801edaa:	f8c9 3000 	str.w	r3, [r9]
 801edae:	f04f 0a00 	mov.w	sl, #0
 801edb2:	9b07      	ldr	r3, [sp, #28]
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	f43f ae16 	beq.w	801e9e6 <_strtod_l+0x7e>
 801edba:	991c      	ldr	r1, [sp, #112]	; 0x70
 801edbc:	4648      	mov	r0, r9
 801edbe:	f002 f8f2 	bl	8020fa6 <_Bfree>
 801edc2:	9905      	ldr	r1, [sp, #20]
 801edc4:	4648      	mov	r0, r9
 801edc6:	f002 f8ee 	bl	8020fa6 <_Bfree>
 801edca:	4641      	mov	r1, r8
 801edcc:	4648      	mov	r0, r9
 801edce:	f002 f8ea 	bl	8020fa6 <_Bfree>
 801edd2:	9907      	ldr	r1, [sp, #28]
 801edd4:	4648      	mov	r0, r9
 801edd6:	f002 f8e6 	bl	8020fa6 <_Bfree>
 801edda:	4621      	mov	r1, r4
 801eddc:	4648      	mov	r0, r9
 801edde:	f002 f8e2 	bl	8020fa6 <_Bfree>
 801ede2:	e600      	b.n	801e9e6 <_strtod_l+0x7e>
 801ede4:	9a06      	ldr	r2, [sp, #24]
 801ede6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801edea:	4293      	cmp	r3, r2
 801edec:	dbba      	blt.n	801ed64 <_strtod_l+0x3fc>
 801edee:	4d42      	ldr	r5, [pc, #264]	; (801eef8 <_strtod_l+0x590>)
 801edf0:	f1c4 040f 	rsb	r4, r4, #15
 801edf4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801edf8:	4652      	mov	r2, sl
 801edfa:	465b      	mov	r3, fp
 801edfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee00:	f7e1 fc0a 	bl	8000618 <__aeabi_dmul>
 801ee04:	9b06      	ldr	r3, [sp, #24]
 801ee06:	1b1c      	subs	r4, r3, r4
 801ee08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801ee0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ee10:	e78d      	b.n	801ed2e <_strtod_l+0x3c6>
 801ee12:	f113 0f16 	cmn.w	r3, #22
 801ee16:	dba5      	blt.n	801ed64 <_strtod_l+0x3fc>
 801ee18:	4a37      	ldr	r2, [pc, #220]	; (801eef8 <_strtod_l+0x590>)
 801ee1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801ee1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 801ee22:	4650      	mov	r0, sl
 801ee24:	4659      	mov	r1, fp
 801ee26:	f7e1 fd21 	bl	800086c <__aeabi_ddiv>
 801ee2a:	e782      	b.n	801ed32 <_strtod_l+0x3ca>
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	4e33      	ldr	r6, [pc, #204]	; (801eefc <_strtod_l+0x594>)
 801ee30:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ee34:	4650      	mov	r0, sl
 801ee36:	4659      	mov	r1, fp
 801ee38:	461d      	mov	r5, r3
 801ee3a:	f1b8 0f01 	cmp.w	r8, #1
 801ee3e:	dc21      	bgt.n	801ee84 <_strtod_l+0x51c>
 801ee40:	b10b      	cbz	r3, 801ee46 <_strtod_l+0x4de>
 801ee42:	4682      	mov	sl, r0
 801ee44:	468b      	mov	fp, r1
 801ee46:	4b2d      	ldr	r3, [pc, #180]	; (801eefc <_strtod_l+0x594>)
 801ee48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ee4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801ee50:	4652      	mov	r2, sl
 801ee52:	465b      	mov	r3, fp
 801ee54:	e9d5 0100 	ldrd	r0, r1, [r5]
 801ee58:	f7e1 fbde 	bl	8000618 <__aeabi_dmul>
 801ee5c:	4b28      	ldr	r3, [pc, #160]	; (801ef00 <_strtod_l+0x598>)
 801ee5e:	460a      	mov	r2, r1
 801ee60:	400b      	ands	r3, r1
 801ee62:	4928      	ldr	r1, [pc, #160]	; (801ef04 <_strtod_l+0x59c>)
 801ee64:	428b      	cmp	r3, r1
 801ee66:	4682      	mov	sl, r0
 801ee68:	d898      	bhi.n	801ed9c <_strtod_l+0x434>
 801ee6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ee6e:	428b      	cmp	r3, r1
 801ee70:	bf86      	itte	hi
 801ee72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801ef0c <_strtod_l+0x5a4>
 801ee76:	f04f 3aff 	movhi.w	sl, #4294967295
 801ee7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ee7e:	2300      	movs	r3, #0
 801ee80:	9304      	str	r3, [sp, #16]
 801ee82:	e077      	b.n	801ef74 <_strtod_l+0x60c>
 801ee84:	f018 0f01 	tst.w	r8, #1
 801ee88:	d006      	beq.n	801ee98 <_strtod_l+0x530>
 801ee8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee92:	f7e1 fbc1 	bl	8000618 <__aeabi_dmul>
 801ee96:	2301      	movs	r3, #1
 801ee98:	3501      	adds	r5, #1
 801ee9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ee9e:	e7cc      	b.n	801ee3a <_strtod_l+0x4d2>
 801eea0:	d0ed      	beq.n	801ee7e <_strtod_l+0x516>
 801eea2:	f1c8 0800 	rsb	r8, r8, #0
 801eea6:	f018 020f 	ands.w	r2, r8, #15
 801eeaa:	d00a      	beq.n	801eec2 <_strtod_l+0x55a>
 801eeac:	4b12      	ldr	r3, [pc, #72]	; (801eef8 <_strtod_l+0x590>)
 801eeae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eeb2:	4650      	mov	r0, sl
 801eeb4:	4659      	mov	r1, fp
 801eeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeba:	f7e1 fcd7 	bl	800086c <__aeabi_ddiv>
 801eebe:	4682      	mov	sl, r0
 801eec0:	468b      	mov	fp, r1
 801eec2:	ea5f 1828 	movs.w	r8, r8, asr #4
 801eec6:	d0da      	beq.n	801ee7e <_strtod_l+0x516>
 801eec8:	f1b8 0f1f 	cmp.w	r8, #31
 801eecc:	dd20      	ble.n	801ef10 <_strtod_l+0x5a8>
 801eece:	2400      	movs	r4, #0
 801eed0:	46a0      	mov	r8, r4
 801eed2:	9407      	str	r4, [sp, #28]
 801eed4:	9405      	str	r4, [sp, #20]
 801eed6:	2322      	movs	r3, #34	; 0x22
 801eed8:	f04f 0a00 	mov.w	sl, #0
 801eedc:	f04f 0b00 	mov.w	fp, #0
 801eee0:	f8c9 3000 	str.w	r3, [r9]
 801eee4:	e765      	b.n	801edb2 <_strtod_l+0x44a>
 801eee6:	bf00      	nop
 801eee8:	08022b5e 	.word	0x08022b5e
 801eeec:	08022beb 	.word	0x08022beb
 801eef0:	08022b66 	.word	0x08022b66
 801eef4:	08022ba8 	.word	0x08022ba8
 801eef8:	08022c90 	.word	0x08022c90
 801eefc:	08022c68 	.word	0x08022c68
 801ef00:	7ff00000 	.word	0x7ff00000
 801ef04:	7ca00000 	.word	0x7ca00000
 801ef08:	fff80000 	.word	0xfff80000
 801ef0c:	7fefffff 	.word	0x7fefffff
 801ef10:	f018 0310 	ands.w	r3, r8, #16
 801ef14:	bf18      	it	ne
 801ef16:	236a      	movne	r3, #106	; 0x6a
 801ef18:	4da0      	ldr	r5, [pc, #640]	; (801f19c <_strtod_l+0x834>)
 801ef1a:	9304      	str	r3, [sp, #16]
 801ef1c:	4650      	mov	r0, sl
 801ef1e:	4659      	mov	r1, fp
 801ef20:	2300      	movs	r3, #0
 801ef22:	f1b8 0f00 	cmp.w	r8, #0
 801ef26:	f300 810a 	bgt.w	801f13e <_strtod_l+0x7d6>
 801ef2a:	b10b      	cbz	r3, 801ef30 <_strtod_l+0x5c8>
 801ef2c:	4682      	mov	sl, r0
 801ef2e:	468b      	mov	fp, r1
 801ef30:	9b04      	ldr	r3, [sp, #16]
 801ef32:	b1bb      	cbz	r3, 801ef64 <_strtod_l+0x5fc>
 801ef34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801ef38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	4659      	mov	r1, fp
 801ef40:	dd10      	ble.n	801ef64 <_strtod_l+0x5fc>
 801ef42:	2b1f      	cmp	r3, #31
 801ef44:	f340 8107 	ble.w	801f156 <_strtod_l+0x7ee>
 801ef48:	2b34      	cmp	r3, #52	; 0x34
 801ef4a:	bfde      	ittt	le
 801ef4c:	3b20      	suble	r3, #32
 801ef4e:	f04f 32ff 	movle.w	r2, #4294967295
 801ef52:	fa02 f303 	lslle.w	r3, r2, r3
 801ef56:	f04f 0a00 	mov.w	sl, #0
 801ef5a:	bfcc      	ite	gt
 801ef5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ef60:	ea03 0b01 	andle.w	fp, r3, r1
 801ef64:	2200      	movs	r2, #0
 801ef66:	2300      	movs	r3, #0
 801ef68:	4650      	mov	r0, sl
 801ef6a:	4659      	mov	r1, fp
 801ef6c:	f7e1 fdbc 	bl	8000ae8 <__aeabi_dcmpeq>
 801ef70:	2800      	cmp	r0, #0
 801ef72:	d1ac      	bne.n	801eece <_strtod_l+0x566>
 801ef74:	9b07      	ldr	r3, [sp, #28]
 801ef76:	9300      	str	r3, [sp, #0]
 801ef78:	9a05      	ldr	r2, [sp, #20]
 801ef7a:	9908      	ldr	r1, [sp, #32]
 801ef7c:	4623      	mov	r3, r4
 801ef7e:	4648      	mov	r0, r9
 801ef80:	f002 f863 	bl	802104a <__s2b>
 801ef84:	9007      	str	r0, [sp, #28]
 801ef86:	2800      	cmp	r0, #0
 801ef88:	f43f af08 	beq.w	801ed9c <_strtod_l+0x434>
 801ef8c:	9a06      	ldr	r2, [sp, #24]
 801ef8e:	9b06      	ldr	r3, [sp, #24]
 801ef90:	2a00      	cmp	r2, #0
 801ef92:	f1c3 0300 	rsb	r3, r3, #0
 801ef96:	bfa8      	it	ge
 801ef98:	2300      	movge	r3, #0
 801ef9a:	930e      	str	r3, [sp, #56]	; 0x38
 801ef9c:	2400      	movs	r4, #0
 801ef9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801efa2:	9316      	str	r3, [sp, #88]	; 0x58
 801efa4:	46a0      	mov	r8, r4
 801efa6:	9b07      	ldr	r3, [sp, #28]
 801efa8:	4648      	mov	r0, r9
 801efaa:	6859      	ldr	r1, [r3, #4]
 801efac:	f001 ffc7 	bl	8020f3e <_Balloc>
 801efb0:	9005      	str	r0, [sp, #20]
 801efb2:	2800      	cmp	r0, #0
 801efb4:	f43f aef6 	beq.w	801eda4 <_strtod_l+0x43c>
 801efb8:	9b07      	ldr	r3, [sp, #28]
 801efba:	691a      	ldr	r2, [r3, #16]
 801efbc:	3202      	adds	r2, #2
 801efbe:	f103 010c 	add.w	r1, r3, #12
 801efc2:	0092      	lsls	r2, r2, #2
 801efc4:	300c      	adds	r0, #12
 801efc6:	f7fe fbe1 	bl	801d78c <memcpy>
 801efca:	aa1e      	add	r2, sp, #120	; 0x78
 801efcc:	a91d      	add	r1, sp, #116	; 0x74
 801efce:	ec4b ab10 	vmov	d0, sl, fp
 801efd2:	4648      	mov	r0, r9
 801efd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801efd8:	f002 faf2 	bl	80215c0 <__d2b>
 801efdc:	901c      	str	r0, [sp, #112]	; 0x70
 801efde:	2800      	cmp	r0, #0
 801efe0:	f43f aee0 	beq.w	801eda4 <_strtod_l+0x43c>
 801efe4:	2101      	movs	r1, #1
 801efe6:	4648      	mov	r0, r9
 801efe8:	f002 f8bb 	bl	8021162 <__i2b>
 801efec:	4680      	mov	r8, r0
 801efee:	2800      	cmp	r0, #0
 801eff0:	f43f aed8 	beq.w	801eda4 <_strtod_l+0x43c>
 801eff4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801eff6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801eff8:	2e00      	cmp	r6, #0
 801effa:	bfab      	itete	ge
 801effc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801effe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801f000:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801f002:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801f004:	bfac      	ite	ge
 801f006:	18f7      	addge	r7, r6, r3
 801f008:	1b9d      	sublt	r5, r3, r6
 801f00a:	9b04      	ldr	r3, [sp, #16]
 801f00c:	1af6      	subs	r6, r6, r3
 801f00e:	4416      	add	r6, r2
 801f010:	4b63      	ldr	r3, [pc, #396]	; (801f1a0 <_strtod_l+0x838>)
 801f012:	3e01      	subs	r6, #1
 801f014:	429e      	cmp	r6, r3
 801f016:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f01a:	f280 80af 	bge.w	801f17c <_strtod_l+0x814>
 801f01e:	1b9b      	subs	r3, r3, r6
 801f020:	2b1f      	cmp	r3, #31
 801f022:	eba2 0203 	sub.w	r2, r2, r3
 801f026:	f04f 0101 	mov.w	r1, #1
 801f02a:	f300 809b 	bgt.w	801f164 <_strtod_l+0x7fc>
 801f02e:	fa01 f303 	lsl.w	r3, r1, r3
 801f032:	930f      	str	r3, [sp, #60]	; 0x3c
 801f034:	2300      	movs	r3, #0
 801f036:	930a      	str	r3, [sp, #40]	; 0x28
 801f038:	18be      	adds	r6, r7, r2
 801f03a:	9b04      	ldr	r3, [sp, #16]
 801f03c:	42b7      	cmp	r7, r6
 801f03e:	4415      	add	r5, r2
 801f040:	441d      	add	r5, r3
 801f042:	463b      	mov	r3, r7
 801f044:	bfa8      	it	ge
 801f046:	4633      	movge	r3, r6
 801f048:	42ab      	cmp	r3, r5
 801f04a:	bfa8      	it	ge
 801f04c:	462b      	movge	r3, r5
 801f04e:	2b00      	cmp	r3, #0
 801f050:	bfc2      	ittt	gt
 801f052:	1af6      	subgt	r6, r6, r3
 801f054:	1aed      	subgt	r5, r5, r3
 801f056:	1aff      	subgt	r7, r7, r3
 801f058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f05a:	b1bb      	cbz	r3, 801f08c <_strtod_l+0x724>
 801f05c:	4641      	mov	r1, r8
 801f05e:	461a      	mov	r2, r3
 801f060:	4648      	mov	r0, r9
 801f062:	f002 f91d 	bl	80212a0 <__pow5mult>
 801f066:	4680      	mov	r8, r0
 801f068:	2800      	cmp	r0, #0
 801f06a:	f43f ae9b 	beq.w	801eda4 <_strtod_l+0x43c>
 801f06e:	4601      	mov	r1, r0
 801f070:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801f072:	4648      	mov	r0, r9
 801f074:	f002 f87e 	bl	8021174 <__multiply>
 801f078:	900c      	str	r0, [sp, #48]	; 0x30
 801f07a:	2800      	cmp	r0, #0
 801f07c:	f43f ae92 	beq.w	801eda4 <_strtod_l+0x43c>
 801f080:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f082:	4648      	mov	r0, r9
 801f084:	f001 ff8f 	bl	8020fa6 <_Bfree>
 801f088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f08a:	931c      	str	r3, [sp, #112]	; 0x70
 801f08c:	2e00      	cmp	r6, #0
 801f08e:	dc7a      	bgt.n	801f186 <_strtod_l+0x81e>
 801f090:	9b06      	ldr	r3, [sp, #24]
 801f092:	2b00      	cmp	r3, #0
 801f094:	dd08      	ble.n	801f0a8 <_strtod_l+0x740>
 801f096:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f098:	9905      	ldr	r1, [sp, #20]
 801f09a:	4648      	mov	r0, r9
 801f09c:	f002 f900 	bl	80212a0 <__pow5mult>
 801f0a0:	9005      	str	r0, [sp, #20]
 801f0a2:	2800      	cmp	r0, #0
 801f0a4:	f43f ae7e 	beq.w	801eda4 <_strtod_l+0x43c>
 801f0a8:	2d00      	cmp	r5, #0
 801f0aa:	dd08      	ble.n	801f0be <_strtod_l+0x756>
 801f0ac:	462a      	mov	r2, r5
 801f0ae:	9905      	ldr	r1, [sp, #20]
 801f0b0:	4648      	mov	r0, r9
 801f0b2:	f002 f943 	bl	802133c <__lshift>
 801f0b6:	9005      	str	r0, [sp, #20]
 801f0b8:	2800      	cmp	r0, #0
 801f0ba:	f43f ae73 	beq.w	801eda4 <_strtod_l+0x43c>
 801f0be:	2f00      	cmp	r7, #0
 801f0c0:	dd08      	ble.n	801f0d4 <_strtod_l+0x76c>
 801f0c2:	4641      	mov	r1, r8
 801f0c4:	463a      	mov	r2, r7
 801f0c6:	4648      	mov	r0, r9
 801f0c8:	f002 f938 	bl	802133c <__lshift>
 801f0cc:	4680      	mov	r8, r0
 801f0ce:	2800      	cmp	r0, #0
 801f0d0:	f43f ae68 	beq.w	801eda4 <_strtod_l+0x43c>
 801f0d4:	9a05      	ldr	r2, [sp, #20]
 801f0d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f0d8:	4648      	mov	r0, r9
 801f0da:	f002 f99d 	bl	8021418 <__mdiff>
 801f0de:	4604      	mov	r4, r0
 801f0e0:	2800      	cmp	r0, #0
 801f0e2:	f43f ae5f 	beq.w	801eda4 <_strtod_l+0x43c>
 801f0e6:	68c3      	ldr	r3, [r0, #12]
 801f0e8:	930c      	str	r3, [sp, #48]	; 0x30
 801f0ea:	2300      	movs	r3, #0
 801f0ec:	60c3      	str	r3, [r0, #12]
 801f0ee:	4641      	mov	r1, r8
 801f0f0:	f002 f978 	bl	80213e4 <__mcmp>
 801f0f4:	2800      	cmp	r0, #0
 801f0f6:	da55      	bge.n	801f1a4 <_strtod_l+0x83c>
 801f0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f0fa:	b9e3      	cbnz	r3, 801f136 <_strtod_l+0x7ce>
 801f0fc:	f1ba 0f00 	cmp.w	sl, #0
 801f100:	d119      	bne.n	801f136 <_strtod_l+0x7ce>
 801f102:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f106:	b9b3      	cbnz	r3, 801f136 <_strtod_l+0x7ce>
 801f108:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f10c:	0d1b      	lsrs	r3, r3, #20
 801f10e:	051b      	lsls	r3, r3, #20
 801f110:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801f114:	d90f      	bls.n	801f136 <_strtod_l+0x7ce>
 801f116:	6963      	ldr	r3, [r4, #20]
 801f118:	b913      	cbnz	r3, 801f120 <_strtod_l+0x7b8>
 801f11a:	6923      	ldr	r3, [r4, #16]
 801f11c:	2b01      	cmp	r3, #1
 801f11e:	dd0a      	ble.n	801f136 <_strtod_l+0x7ce>
 801f120:	4621      	mov	r1, r4
 801f122:	2201      	movs	r2, #1
 801f124:	4648      	mov	r0, r9
 801f126:	f002 f909 	bl	802133c <__lshift>
 801f12a:	4641      	mov	r1, r8
 801f12c:	4604      	mov	r4, r0
 801f12e:	f002 f959 	bl	80213e4 <__mcmp>
 801f132:	2800      	cmp	r0, #0
 801f134:	dc67      	bgt.n	801f206 <_strtod_l+0x89e>
 801f136:	9b04      	ldr	r3, [sp, #16]
 801f138:	2b00      	cmp	r3, #0
 801f13a:	d171      	bne.n	801f220 <_strtod_l+0x8b8>
 801f13c:	e63d      	b.n	801edba <_strtod_l+0x452>
 801f13e:	f018 0f01 	tst.w	r8, #1
 801f142:	d004      	beq.n	801f14e <_strtod_l+0x7e6>
 801f144:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f148:	f7e1 fa66 	bl	8000618 <__aeabi_dmul>
 801f14c:	2301      	movs	r3, #1
 801f14e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801f152:	3508      	adds	r5, #8
 801f154:	e6e5      	b.n	801ef22 <_strtod_l+0x5ba>
 801f156:	f04f 32ff 	mov.w	r2, #4294967295
 801f15a:	fa02 f303 	lsl.w	r3, r2, r3
 801f15e:	ea03 0a0a 	and.w	sl, r3, sl
 801f162:	e6ff      	b.n	801ef64 <_strtod_l+0x5fc>
 801f164:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801f168:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801f16c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801f170:	36e2      	adds	r6, #226	; 0xe2
 801f172:	fa01 f306 	lsl.w	r3, r1, r6
 801f176:	930a      	str	r3, [sp, #40]	; 0x28
 801f178:	910f      	str	r1, [sp, #60]	; 0x3c
 801f17a:	e75d      	b.n	801f038 <_strtod_l+0x6d0>
 801f17c:	2300      	movs	r3, #0
 801f17e:	930a      	str	r3, [sp, #40]	; 0x28
 801f180:	2301      	movs	r3, #1
 801f182:	930f      	str	r3, [sp, #60]	; 0x3c
 801f184:	e758      	b.n	801f038 <_strtod_l+0x6d0>
 801f186:	4632      	mov	r2, r6
 801f188:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f18a:	4648      	mov	r0, r9
 801f18c:	f002 f8d6 	bl	802133c <__lshift>
 801f190:	901c      	str	r0, [sp, #112]	; 0x70
 801f192:	2800      	cmp	r0, #0
 801f194:	f47f af7c 	bne.w	801f090 <_strtod_l+0x728>
 801f198:	e604      	b.n	801eda4 <_strtod_l+0x43c>
 801f19a:	bf00      	nop
 801f19c:	08022bc0 	.word	0x08022bc0
 801f1a0:	fffffc02 	.word	0xfffffc02
 801f1a4:	465d      	mov	r5, fp
 801f1a6:	f040 8086 	bne.w	801f2b6 <_strtod_l+0x94e>
 801f1aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f1ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f1b0:	b32a      	cbz	r2, 801f1fe <_strtod_l+0x896>
 801f1b2:	4aaf      	ldr	r2, [pc, #700]	; (801f470 <_strtod_l+0xb08>)
 801f1b4:	4293      	cmp	r3, r2
 801f1b6:	d153      	bne.n	801f260 <_strtod_l+0x8f8>
 801f1b8:	9b04      	ldr	r3, [sp, #16]
 801f1ba:	4650      	mov	r0, sl
 801f1bc:	b1d3      	cbz	r3, 801f1f4 <_strtod_l+0x88c>
 801f1be:	4aad      	ldr	r2, [pc, #692]	; (801f474 <_strtod_l+0xb0c>)
 801f1c0:	402a      	ands	r2, r5
 801f1c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801f1c6:	f04f 31ff 	mov.w	r1, #4294967295
 801f1ca:	d816      	bhi.n	801f1fa <_strtod_l+0x892>
 801f1cc:	0d12      	lsrs	r2, r2, #20
 801f1ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801f1d2:	fa01 f303 	lsl.w	r3, r1, r3
 801f1d6:	4298      	cmp	r0, r3
 801f1d8:	d142      	bne.n	801f260 <_strtod_l+0x8f8>
 801f1da:	4ba7      	ldr	r3, [pc, #668]	; (801f478 <_strtod_l+0xb10>)
 801f1dc:	429d      	cmp	r5, r3
 801f1de:	d102      	bne.n	801f1e6 <_strtod_l+0x87e>
 801f1e0:	3001      	adds	r0, #1
 801f1e2:	f43f addf 	beq.w	801eda4 <_strtod_l+0x43c>
 801f1e6:	4ba3      	ldr	r3, [pc, #652]	; (801f474 <_strtod_l+0xb0c>)
 801f1e8:	402b      	ands	r3, r5
 801f1ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801f1ee:	f04f 0a00 	mov.w	sl, #0
 801f1f2:	e7a0      	b.n	801f136 <_strtod_l+0x7ce>
 801f1f4:	f04f 33ff 	mov.w	r3, #4294967295
 801f1f8:	e7ed      	b.n	801f1d6 <_strtod_l+0x86e>
 801f1fa:	460b      	mov	r3, r1
 801f1fc:	e7eb      	b.n	801f1d6 <_strtod_l+0x86e>
 801f1fe:	bb7b      	cbnz	r3, 801f260 <_strtod_l+0x8f8>
 801f200:	f1ba 0f00 	cmp.w	sl, #0
 801f204:	d12c      	bne.n	801f260 <_strtod_l+0x8f8>
 801f206:	9904      	ldr	r1, [sp, #16]
 801f208:	4a9a      	ldr	r2, [pc, #616]	; (801f474 <_strtod_l+0xb0c>)
 801f20a:	465b      	mov	r3, fp
 801f20c:	b1f1      	cbz	r1, 801f24c <_strtod_l+0x8e4>
 801f20e:	ea02 010b 	and.w	r1, r2, fp
 801f212:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801f216:	dc19      	bgt.n	801f24c <_strtod_l+0x8e4>
 801f218:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801f21c:	f77f ae5b 	ble.w	801eed6 <_strtod_l+0x56e>
 801f220:	4a96      	ldr	r2, [pc, #600]	; (801f47c <_strtod_l+0xb14>)
 801f222:	2300      	movs	r3, #0
 801f224:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801f228:	4650      	mov	r0, sl
 801f22a:	4659      	mov	r1, fp
 801f22c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801f230:	f7e1 f9f2 	bl	8000618 <__aeabi_dmul>
 801f234:	4682      	mov	sl, r0
 801f236:	468b      	mov	fp, r1
 801f238:	2900      	cmp	r1, #0
 801f23a:	f47f adbe 	bne.w	801edba <_strtod_l+0x452>
 801f23e:	2800      	cmp	r0, #0
 801f240:	f47f adbb 	bne.w	801edba <_strtod_l+0x452>
 801f244:	2322      	movs	r3, #34	; 0x22
 801f246:	f8c9 3000 	str.w	r3, [r9]
 801f24a:	e5b6      	b.n	801edba <_strtod_l+0x452>
 801f24c:	4013      	ands	r3, r2
 801f24e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801f252:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801f256:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801f25a:	f04f 3aff 	mov.w	sl, #4294967295
 801f25e:	e76a      	b.n	801f136 <_strtod_l+0x7ce>
 801f260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f262:	b193      	cbz	r3, 801f28a <_strtod_l+0x922>
 801f264:	422b      	tst	r3, r5
 801f266:	f43f af66 	beq.w	801f136 <_strtod_l+0x7ce>
 801f26a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f26c:	9a04      	ldr	r2, [sp, #16]
 801f26e:	4650      	mov	r0, sl
 801f270:	4659      	mov	r1, fp
 801f272:	b173      	cbz	r3, 801f292 <_strtod_l+0x92a>
 801f274:	f7ff fb5a 	bl	801e92c <sulp>
 801f278:	4602      	mov	r2, r0
 801f27a:	460b      	mov	r3, r1
 801f27c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f280:	f7e1 f814 	bl	80002ac <__adddf3>
 801f284:	4682      	mov	sl, r0
 801f286:	468b      	mov	fp, r1
 801f288:	e755      	b.n	801f136 <_strtod_l+0x7ce>
 801f28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f28c:	ea13 0f0a 	tst.w	r3, sl
 801f290:	e7e9      	b.n	801f266 <_strtod_l+0x8fe>
 801f292:	f7ff fb4b 	bl	801e92c <sulp>
 801f296:	4602      	mov	r2, r0
 801f298:	460b      	mov	r3, r1
 801f29a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f29e:	f7e1 f803 	bl	80002a8 <__aeabi_dsub>
 801f2a2:	2200      	movs	r2, #0
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	4682      	mov	sl, r0
 801f2a8:	468b      	mov	fp, r1
 801f2aa:	f7e1 fc1d 	bl	8000ae8 <__aeabi_dcmpeq>
 801f2ae:	2800      	cmp	r0, #0
 801f2b0:	f47f ae11 	bne.w	801eed6 <_strtod_l+0x56e>
 801f2b4:	e73f      	b.n	801f136 <_strtod_l+0x7ce>
 801f2b6:	4641      	mov	r1, r8
 801f2b8:	4620      	mov	r0, r4
 801f2ba:	f002 f9d0 	bl	802165e <__ratio>
 801f2be:	ec57 6b10 	vmov	r6, r7, d0
 801f2c2:	2200      	movs	r2, #0
 801f2c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f2c8:	ee10 0a10 	vmov	r0, s0
 801f2cc:	4639      	mov	r1, r7
 801f2ce:	f7e1 fc1f 	bl	8000b10 <__aeabi_dcmple>
 801f2d2:	2800      	cmp	r0, #0
 801f2d4:	d077      	beq.n	801f3c6 <_strtod_l+0xa5e>
 801f2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d04a      	beq.n	801f372 <_strtod_l+0xa0a>
 801f2dc:	4b68      	ldr	r3, [pc, #416]	; (801f480 <_strtod_l+0xb18>)
 801f2de:	2200      	movs	r2, #0
 801f2e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801f2e4:	4f66      	ldr	r7, [pc, #408]	; (801f480 <_strtod_l+0xb18>)
 801f2e6:	2600      	movs	r6, #0
 801f2e8:	4b62      	ldr	r3, [pc, #392]	; (801f474 <_strtod_l+0xb0c>)
 801f2ea:	402b      	ands	r3, r5
 801f2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 801f2ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f2f0:	4b64      	ldr	r3, [pc, #400]	; (801f484 <_strtod_l+0xb1c>)
 801f2f2:	429a      	cmp	r2, r3
 801f2f4:	f040 80ce 	bne.w	801f494 <_strtod_l+0xb2c>
 801f2f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f2fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f300:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801f304:	ec4b ab10 	vmov	d0, sl, fp
 801f308:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801f30c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801f310:	f002 f8e0 	bl	80214d4 <__ulp>
 801f314:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f318:	ec53 2b10 	vmov	r2, r3, d0
 801f31c:	f7e1 f97c 	bl	8000618 <__aeabi_dmul>
 801f320:	4652      	mov	r2, sl
 801f322:	465b      	mov	r3, fp
 801f324:	f7e0 ffc2 	bl	80002ac <__adddf3>
 801f328:	460b      	mov	r3, r1
 801f32a:	4952      	ldr	r1, [pc, #328]	; (801f474 <_strtod_l+0xb0c>)
 801f32c:	4a56      	ldr	r2, [pc, #344]	; (801f488 <_strtod_l+0xb20>)
 801f32e:	4019      	ands	r1, r3
 801f330:	4291      	cmp	r1, r2
 801f332:	4682      	mov	sl, r0
 801f334:	d95b      	bls.n	801f3ee <_strtod_l+0xa86>
 801f336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f338:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801f33c:	4293      	cmp	r3, r2
 801f33e:	d103      	bne.n	801f348 <_strtod_l+0x9e0>
 801f340:	9b08      	ldr	r3, [sp, #32]
 801f342:	3301      	adds	r3, #1
 801f344:	f43f ad2e 	beq.w	801eda4 <_strtod_l+0x43c>
 801f348:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801f478 <_strtod_l+0xb10>
 801f34c:	f04f 3aff 	mov.w	sl, #4294967295
 801f350:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f352:	4648      	mov	r0, r9
 801f354:	f001 fe27 	bl	8020fa6 <_Bfree>
 801f358:	9905      	ldr	r1, [sp, #20]
 801f35a:	4648      	mov	r0, r9
 801f35c:	f001 fe23 	bl	8020fa6 <_Bfree>
 801f360:	4641      	mov	r1, r8
 801f362:	4648      	mov	r0, r9
 801f364:	f001 fe1f 	bl	8020fa6 <_Bfree>
 801f368:	4621      	mov	r1, r4
 801f36a:	4648      	mov	r0, r9
 801f36c:	f001 fe1b 	bl	8020fa6 <_Bfree>
 801f370:	e619      	b.n	801efa6 <_strtod_l+0x63e>
 801f372:	f1ba 0f00 	cmp.w	sl, #0
 801f376:	d11a      	bne.n	801f3ae <_strtod_l+0xa46>
 801f378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f37c:	b9eb      	cbnz	r3, 801f3ba <_strtod_l+0xa52>
 801f37e:	2200      	movs	r2, #0
 801f380:	4b3f      	ldr	r3, [pc, #252]	; (801f480 <_strtod_l+0xb18>)
 801f382:	4630      	mov	r0, r6
 801f384:	4639      	mov	r1, r7
 801f386:	f7e1 fbb9 	bl	8000afc <__aeabi_dcmplt>
 801f38a:	b9c8      	cbnz	r0, 801f3c0 <_strtod_l+0xa58>
 801f38c:	4630      	mov	r0, r6
 801f38e:	4639      	mov	r1, r7
 801f390:	2200      	movs	r2, #0
 801f392:	4b3e      	ldr	r3, [pc, #248]	; (801f48c <_strtod_l+0xb24>)
 801f394:	f7e1 f940 	bl	8000618 <__aeabi_dmul>
 801f398:	4606      	mov	r6, r0
 801f39a:	460f      	mov	r7, r1
 801f39c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801f3a0:	9618      	str	r6, [sp, #96]	; 0x60
 801f3a2:	9319      	str	r3, [sp, #100]	; 0x64
 801f3a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801f3a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801f3ac:	e79c      	b.n	801f2e8 <_strtod_l+0x980>
 801f3ae:	f1ba 0f01 	cmp.w	sl, #1
 801f3b2:	d102      	bne.n	801f3ba <_strtod_l+0xa52>
 801f3b4:	2d00      	cmp	r5, #0
 801f3b6:	f43f ad8e 	beq.w	801eed6 <_strtod_l+0x56e>
 801f3ba:	2200      	movs	r2, #0
 801f3bc:	4b34      	ldr	r3, [pc, #208]	; (801f490 <_strtod_l+0xb28>)
 801f3be:	e78f      	b.n	801f2e0 <_strtod_l+0x978>
 801f3c0:	2600      	movs	r6, #0
 801f3c2:	4f32      	ldr	r7, [pc, #200]	; (801f48c <_strtod_l+0xb24>)
 801f3c4:	e7ea      	b.n	801f39c <_strtod_l+0xa34>
 801f3c6:	4b31      	ldr	r3, [pc, #196]	; (801f48c <_strtod_l+0xb24>)
 801f3c8:	4630      	mov	r0, r6
 801f3ca:	4639      	mov	r1, r7
 801f3cc:	2200      	movs	r2, #0
 801f3ce:	f7e1 f923 	bl	8000618 <__aeabi_dmul>
 801f3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3d4:	4606      	mov	r6, r0
 801f3d6:	460f      	mov	r7, r1
 801f3d8:	b933      	cbnz	r3, 801f3e8 <_strtod_l+0xa80>
 801f3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f3de:	9010      	str	r0, [sp, #64]	; 0x40
 801f3e0:	9311      	str	r3, [sp, #68]	; 0x44
 801f3e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801f3e6:	e7df      	b.n	801f3a8 <_strtod_l+0xa40>
 801f3e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801f3ec:	e7f9      	b.n	801f3e2 <_strtod_l+0xa7a>
 801f3ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801f3f2:	9b04      	ldr	r3, [sp, #16]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d1ab      	bne.n	801f350 <_strtod_l+0x9e8>
 801f3f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f3fc:	0d1b      	lsrs	r3, r3, #20
 801f3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f400:	051b      	lsls	r3, r3, #20
 801f402:	429a      	cmp	r2, r3
 801f404:	465d      	mov	r5, fp
 801f406:	d1a3      	bne.n	801f350 <_strtod_l+0x9e8>
 801f408:	4639      	mov	r1, r7
 801f40a:	4630      	mov	r0, r6
 801f40c:	f7e1 fbb4 	bl	8000b78 <__aeabi_d2iz>
 801f410:	f7e1 f898 	bl	8000544 <__aeabi_i2d>
 801f414:	460b      	mov	r3, r1
 801f416:	4602      	mov	r2, r0
 801f418:	4639      	mov	r1, r7
 801f41a:	4630      	mov	r0, r6
 801f41c:	f7e0 ff44 	bl	80002a8 <__aeabi_dsub>
 801f420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f422:	4606      	mov	r6, r0
 801f424:	460f      	mov	r7, r1
 801f426:	b933      	cbnz	r3, 801f436 <_strtod_l+0xace>
 801f428:	f1ba 0f00 	cmp.w	sl, #0
 801f42c:	d103      	bne.n	801f436 <_strtod_l+0xace>
 801f42e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801f432:	2d00      	cmp	r5, #0
 801f434:	d06d      	beq.n	801f512 <_strtod_l+0xbaa>
 801f436:	a30a      	add	r3, pc, #40	; (adr r3, 801f460 <_strtod_l+0xaf8>)
 801f438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f43c:	4630      	mov	r0, r6
 801f43e:	4639      	mov	r1, r7
 801f440:	f7e1 fb5c 	bl	8000afc <__aeabi_dcmplt>
 801f444:	2800      	cmp	r0, #0
 801f446:	f47f acb8 	bne.w	801edba <_strtod_l+0x452>
 801f44a:	a307      	add	r3, pc, #28	; (adr r3, 801f468 <_strtod_l+0xb00>)
 801f44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f450:	4630      	mov	r0, r6
 801f452:	4639      	mov	r1, r7
 801f454:	f7e1 fb70 	bl	8000b38 <__aeabi_dcmpgt>
 801f458:	2800      	cmp	r0, #0
 801f45a:	f43f af79 	beq.w	801f350 <_strtod_l+0x9e8>
 801f45e:	e4ac      	b.n	801edba <_strtod_l+0x452>
 801f460:	94a03595 	.word	0x94a03595
 801f464:	3fdfffff 	.word	0x3fdfffff
 801f468:	35afe535 	.word	0x35afe535
 801f46c:	3fe00000 	.word	0x3fe00000
 801f470:	000fffff 	.word	0x000fffff
 801f474:	7ff00000 	.word	0x7ff00000
 801f478:	7fefffff 	.word	0x7fefffff
 801f47c:	39500000 	.word	0x39500000
 801f480:	3ff00000 	.word	0x3ff00000
 801f484:	7fe00000 	.word	0x7fe00000
 801f488:	7c9fffff 	.word	0x7c9fffff
 801f48c:	3fe00000 	.word	0x3fe00000
 801f490:	bff00000 	.word	0xbff00000
 801f494:	9b04      	ldr	r3, [sp, #16]
 801f496:	b333      	cbz	r3, 801f4e6 <_strtod_l+0xb7e>
 801f498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f49a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801f49e:	d822      	bhi.n	801f4e6 <_strtod_l+0xb7e>
 801f4a0:	a327      	add	r3, pc, #156	; (adr r3, 801f540 <_strtod_l+0xbd8>)
 801f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4a6:	4630      	mov	r0, r6
 801f4a8:	4639      	mov	r1, r7
 801f4aa:	f7e1 fb31 	bl	8000b10 <__aeabi_dcmple>
 801f4ae:	b1a0      	cbz	r0, 801f4da <_strtod_l+0xb72>
 801f4b0:	4639      	mov	r1, r7
 801f4b2:	4630      	mov	r0, r6
 801f4b4:	f7e1 fb88 	bl	8000bc8 <__aeabi_d2uiz>
 801f4b8:	2800      	cmp	r0, #0
 801f4ba:	bf08      	it	eq
 801f4bc:	2001      	moveq	r0, #1
 801f4be:	f7e1 f831 	bl	8000524 <__aeabi_ui2d>
 801f4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4c4:	4606      	mov	r6, r0
 801f4c6:	460f      	mov	r7, r1
 801f4c8:	bb03      	cbnz	r3, 801f50c <_strtod_l+0xba4>
 801f4ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f4ce:	9012      	str	r0, [sp, #72]	; 0x48
 801f4d0:	9313      	str	r3, [sp, #76]	; 0x4c
 801f4d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801f4d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801f4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f4de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801f4e2:	1a9b      	subs	r3, r3, r2
 801f4e4:	930b      	str	r3, [sp, #44]	; 0x2c
 801f4e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 801f4ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801f4ee:	f001 fff1 	bl	80214d4 <__ulp>
 801f4f2:	4650      	mov	r0, sl
 801f4f4:	ec53 2b10 	vmov	r2, r3, d0
 801f4f8:	4659      	mov	r1, fp
 801f4fa:	f7e1 f88d 	bl	8000618 <__aeabi_dmul>
 801f4fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f502:	f7e0 fed3 	bl	80002ac <__adddf3>
 801f506:	4682      	mov	sl, r0
 801f508:	468b      	mov	fp, r1
 801f50a:	e772      	b.n	801f3f2 <_strtod_l+0xa8a>
 801f50c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801f510:	e7df      	b.n	801f4d2 <_strtod_l+0xb6a>
 801f512:	a30d      	add	r3, pc, #52	; (adr r3, 801f548 <_strtod_l+0xbe0>)
 801f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f518:	f7e1 faf0 	bl	8000afc <__aeabi_dcmplt>
 801f51c:	e79c      	b.n	801f458 <_strtod_l+0xaf0>
 801f51e:	2300      	movs	r3, #0
 801f520:	930d      	str	r3, [sp, #52]	; 0x34
 801f522:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f526:	6013      	str	r3, [r2, #0]
 801f528:	f7ff ba61 	b.w	801e9ee <_strtod_l+0x86>
 801f52c:	2b65      	cmp	r3, #101	; 0x65
 801f52e:	f04f 0200 	mov.w	r2, #0
 801f532:	f43f ab4e 	beq.w	801ebd2 <_strtod_l+0x26a>
 801f536:	2101      	movs	r1, #1
 801f538:	4614      	mov	r4, r2
 801f53a:	9104      	str	r1, [sp, #16]
 801f53c:	f7ff bacb 	b.w	801ead6 <_strtod_l+0x16e>
 801f540:	ffc00000 	.word	0xffc00000
 801f544:	41dfffff 	.word	0x41dfffff
 801f548:	94a03595 	.word	0x94a03595
 801f54c:	3fcfffff 	.word	0x3fcfffff

0801f550 <_strtod_r>:
 801f550:	4b05      	ldr	r3, [pc, #20]	; (801f568 <_strtod_r+0x18>)
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	b410      	push	{r4}
 801f556:	6a1b      	ldr	r3, [r3, #32]
 801f558:	4c04      	ldr	r4, [pc, #16]	; (801f56c <_strtod_r+0x1c>)
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	bf08      	it	eq
 801f55e:	4623      	moveq	r3, r4
 801f560:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f564:	f7ff ba00 	b.w	801e968 <_strtod_l>
 801f568:	200000e0 	.word	0x200000e0
 801f56c:	20000144 	.word	0x20000144

0801f570 <_strtol_l.isra.0>:
 801f570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f574:	4680      	mov	r8, r0
 801f576:	4689      	mov	r9, r1
 801f578:	4692      	mov	sl, r2
 801f57a:	461e      	mov	r6, r3
 801f57c:	460f      	mov	r7, r1
 801f57e:	463d      	mov	r5, r7
 801f580:	9808      	ldr	r0, [sp, #32]
 801f582:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f586:	f001 fc2f 	bl	8020de8 <__locale_ctype_ptr_l>
 801f58a:	4420      	add	r0, r4
 801f58c:	7843      	ldrb	r3, [r0, #1]
 801f58e:	f013 0308 	ands.w	r3, r3, #8
 801f592:	d132      	bne.n	801f5fa <_strtol_l.isra.0+0x8a>
 801f594:	2c2d      	cmp	r4, #45	; 0x2d
 801f596:	d132      	bne.n	801f5fe <_strtol_l.isra.0+0x8e>
 801f598:	787c      	ldrb	r4, [r7, #1]
 801f59a:	1cbd      	adds	r5, r7, #2
 801f59c:	2201      	movs	r2, #1
 801f59e:	2e00      	cmp	r6, #0
 801f5a0:	d05d      	beq.n	801f65e <_strtol_l.isra.0+0xee>
 801f5a2:	2e10      	cmp	r6, #16
 801f5a4:	d109      	bne.n	801f5ba <_strtol_l.isra.0+0x4a>
 801f5a6:	2c30      	cmp	r4, #48	; 0x30
 801f5a8:	d107      	bne.n	801f5ba <_strtol_l.isra.0+0x4a>
 801f5aa:	782b      	ldrb	r3, [r5, #0]
 801f5ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f5b0:	2b58      	cmp	r3, #88	; 0x58
 801f5b2:	d14f      	bne.n	801f654 <_strtol_l.isra.0+0xe4>
 801f5b4:	786c      	ldrb	r4, [r5, #1]
 801f5b6:	2610      	movs	r6, #16
 801f5b8:	3502      	adds	r5, #2
 801f5ba:	2a00      	cmp	r2, #0
 801f5bc:	bf14      	ite	ne
 801f5be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801f5c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801f5c6:	2700      	movs	r7, #0
 801f5c8:	fbb1 fcf6 	udiv	ip, r1, r6
 801f5cc:	4638      	mov	r0, r7
 801f5ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 801f5d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801f5d6:	2b09      	cmp	r3, #9
 801f5d8:	d817      	bhi.n	801f60a <_strtol_l.isra.0+0x9a>
 801f5da:	461c      	mov	r4, r3
 801f5dc:	42a6      	cmp	r6, r4
 801f5de:	dd23      	ble.n	801f628 <_strtol_l.isra.0+0xb8>
 801f5e0:	1c7b      	adds	r3, r7, #1
 801f5e2:	d007      	beq.n	801f5f4 <_strtol_l.isra.0+0x84>
 801f5e4:	4584      	cmp	ip, r0
 801f5e6:	d31c      	bcc.n	801f622 <_strtol_l.isra.0+0xb2>
 801f5e8:	d101      	bne.n	801f5ee <_strtol_l.isra.0+0x7e>
 801f5ea:	45a6      	cmp	lr, r4
 801f5ec:	db19      	blt.n	801f622 <_strtol_l.isra.0+0xb2>
 801f5ee:	fb00 4006 	mla	r0, r0, r6, r4
 801f5f2:	2701      	movs	r7, #1
 801f5f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f5f8:	e7eb      	b.n	801f5d2 <_strtol_l.isra.0+0x62>
 801f5fa:	462f      	mov	r7, r5
 801f5fc:	e7bf      	b.n	801f57e <_strtol_l.isra.0+0xe>
 801f5fe:	2c2b      	cmp	r4, #43	; 0x2b
 801f600:	bf04      	itt	eq
 801f602:	1cbd      	addeq	r5, r7, #2
 801f604:	787c      	ldrbeq	r4, [r7, #1]
 801f606:	461a      	mov	r2, r3
 801f608:	e7c9      	b.n	801f59e <_strtol_l.isra.0+0x2e>
 801f60a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801f60e:	2b19      	cmp	r3, #25
 801f610:	d801      	bhi.n	801f616 <_strtol_l.isra.0+0xa6>
 801f612:	3c37      	subs	r4, #55	; 0x37
 801f614:	e7e2      	b.n	801f5dc <_strtol_l.isra.0+0x6c>
 801f616:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801f61a:	2b19      	cmp	r3, #25
 801f61c:	d804      	bhi.n	801f628 <_strtol_l.isra.0+0xb8>
 801f61e:	3c57      	subs	r4, #87	; 0x57
 801f620:	e7dc      	b.n	801f5dc <_strtol_l.isra.0+0x6c>
 801f622:	f04f 37ff 	mov.w	r7, #4294967295
 801f626:	e7e5      	b.n	801f5f4 <_strtol_l.isra.0+0x84>
 801f628:	1c7b      	adds	r3, r7, #1
 801f62a:	d108      	bne.n	801f63e <_strtol_l.isra.0+0xce>
 801f62c:	2322      	movs	r3, #34	; 0x22
 801f62e:	f8c8 3000 	str.w	r3, [r8]
 801f632:	4608      	mov	r0, r1
 801f634:	f1ba 0f00 	cmp.w	sl, #0
 801f638:	d107      	bne.n	801f64a <_strtol_l.isra.0+0xda>
 801f63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f63e:	b102      	cbz	r2, 801f642 <_strtol_l.isra.0+0xd2>
 801f640:	4240      	negs	r0, r0
 801f642:	f1ba 0f00 	cmp.w	sl, #0
 801f646:	d0f8      	beq.n	801f63a <_strtol_l.isra.0+0xca>
 801f648:	b10f      	cbz	r7, 801f64e <_strtol_l.isra.0+0xde>
 801f64a:	f105 39ff 	add.w	r9, r5, #4294967295
 801f64e:	f8ca 9000 	str.w	r9, [sl]
 801f652:	e7f2      	b.n	801f63a <_strtol_l.isra.0+0xca>
 801f654:	2430      	movs	r4, #48	; 0x30
 801f656:	2e00      	cmp	r6, #0
 801f658:	d1af      	bne.n	801f5ba <_strtol_l.isra.0+0x4a>
 801f65a:	2608      	movs	r6, #8
 801f65c:	e7ad      	b.n	801f5ba <_strtol_l.isra.0+0x4a>
 801f65e:	2c30      	cmp	r4, #48	; 0x30
 801f660:	d0a3      	beq.n	801f5aa <_strtol_l.isra.0+0x3a>
 801f662:	260a      	movs	r6, #10
 801f664:	e7a9      	b.n	801f5ba <_strtol_l.isra.0+0x4a>
	...

0801f668 <_strtol_r>:
 801f668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f66a:	4c06      	ldr	r4, [pc, #24]	; (801f684 <_strtol_r+0x1c>)
 801f66c:	4d06      	ldr	r5, [pc, #24]	; (801f688 <_strtol_r+0x20>)
 801f66e:	6824      	ldr	r4, [r4, #0]
 801f670:	6a24      	ldr	r4, [r4, #32]
 801f672:	2c00      	cmp	r4, #0
 801f674:	bf08      	it	eq
 801f676:	462c      	moveq	r4, r5
 801f678:	9400      	str	r4, [sp, #0]
 801f67a:	f7ff ff79 	bl	801f570 <_strtol_l.isra.0>
 801f67e:	b003      	add	sp, #12
 801f680:	bd30      	pop	{r4, r5, pc}
 801f682:	bf00      	nop
 801f684:	200000e0 	.word	0x200000e0
 801f688:	20000144 	.word	0x20000144

0801f68c <__swbuf_r>:
 801f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f68e:	460e      	mov	r6, r1
 801f690:	4614      	mov	r4, r2
 801f692:	4605      	mov	r5, r0
 801f694:	b118      	cbz	r0, 801f69e <__swbuf_r+0x12>
 801f696:	6983      	ldr	r3, [r0, #24]
 801f698:	b90b      	cbnz	r3, 801f69e <__swbuf_r+0x12>
 801f69a:	f000 fff5 	bl	8020688 <__sinit>
 801f69e:	4b21      	ldr	r3, [pc, #132]	; (801f724 <__swbuf_r+0x98>)
 801f6a0:	429c      	cmp	r4, r3
 801f6a2:	d12a      	bne.n	801f6fa <__swbuf_r+0x6e>
 801f6a4:	686c      	ldr	r4, [r5, #4]
 801f6a6:	69a3      	ldr	r3, [r4, #24]
 801f6a8:	60a3      	str	r3, [r4, #8]
 801f6aa:	89a3      	ldrh	r3, [r4, #12]
 801f6ac:	071a      	lsls	r2, r3, #28
 801f6ae:	d52e      	bpl.n	801f70e <__swbuf_r+0x82>
 801f6b0:	6923      	ldr	r3, [r4, #16]
 801f6b2:	b363      	cbz	r3, 801f70e <__swbuf_r+0x82>
 801f6b4:	6923      	ldr	r3, [r4, #16]
 801f6b6:	6820      	ldr	r0, [r4, #0]
 801f6b8:	1ac0      	subs	r0, r0, r3
 801f6ba:	6963      	ldr	r3, [r4, #20]
 801f6bc:	b2f6      	uxtb	r6, r6
 801f6be:	4283      	cmp	r3, r0
 801f6c0:	4637      	mov	r7, r6
 801f6c2:	dc04      	bgt.n	801f6ce <__swbuf_r+0x42>
 801f6c4:	4621      	mov	r1, r4
 801f6c6:	4628      	mov	r0, r5
 801f6c8:	f000 ff74 	bl	80205b4 <_fflush_r>
 801f6cc:	bb28      	cbnz	r0, 801f71a <__swbuf_r+0x8e>
 801f6ce:	68a3      	ldr	r3, [r4, #8]
 801f6d0:	3b01      	subs	r3, #1
 801f6d2:	60a3      	str	r3, [r4, #8]
 801f6d4:	6823      	ldr	r3, [r4, #0]
 801f6d6:	1c5a      	adds	r2, r3, #1
 801f6d8:	6022      	str	r2, [r4, #0]
 801f6da:	701e      	strb	r6, [r3, #0]
 801f6dc:	6963      	ldr	r3, [r4, #20]
 801f6de:	3001      	adds	r0, #1
 801f6e0:	4283      	cmp	r3, r0
 801f6e2:	d004      	beq.n	801f6ee <__swbuf_r+0x62>
 801f6e4:	89a3      	ldrh	r3, [r4, #12]
 801f6e6:	07db      	lsls	r3, r3, #31
 801f6e8:	d519      	bpl.n	801f71e <__swbuf_r+0x92>
 801f6ea:	2e0a      	cmp	r6, #10
 801f6ec:	d117      	bne.n	801f71e <__swbuf_r+0x92>
 801f6ee:	4621      	mov	r1, r4
 801f6f0:	4628      	mov	r0, r5
 801f6f2:	f000 ff5f 	bl	80205b4 <_fflush_r>
 801f6f6:	b190      	cbz	r0, 801f71e <__swbuf_r+0x92>
 801f6f8:	e00f      	b.n	801f71a <__swbuf_r+0x8e>
 801f6fa:	4b0b      	ldr	r3, [pc, #44]	; (801f728 <__swbuf_r+0x9c>)
 801f6fc:	429c      	cmp	r4, r3
 801f6fe:	d101      	bne.n	801f704 <__swbuf_r+0x78>
 801f700:	68ac      	ldr	r4, [r5, #8]
 801f702:	e7d0      	b.n	801f6a6 <__swbuf_r+0x1a>
 801f704:	4b09      	ldr	r3, [pc, #36]	; (801f72c <__swbuf_r+0xa0>)
 801f706:	429c      	cmp	r4, r3
 801f708:	bf08      	it	eq
 801f70a:	68ec      	ldreq	r4, [r5, #12]
 801f70c:	e7cb      	b.n	801f6a6 <__swbuf_r+0x1a>
 801f70e:	4621      	mov	r1, r4
 801f710:	4628      	mov	r0, r5
 801f712:	f000 f80d 	bl	801f730 <__swsetup_r>
 801f716:	2800      	cmp	r0, #0
 801f718:	d0cc      	beq.n	801f6b4 <__swbuf_r+0x28>
 801f71a:	f04f 37ff 	mov.w	r7, #4294967295
 801f71e:	4638      	mov	r0, r7
 801f720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f722:	bf00      	nop
 801f724:	08022c18 	.word	0x08022c18
 801f728:	08022c38 	.word	0x08022c38
 801f72c:	08022bf8 	.word	0x08022bf8

0801f730 <__swsetup_r>:
 801f730:	4b32      	ldr	r3, [pc, #200]	; (801f7fc <__swsetup_r+0xcc>)
 801f732:	b570      	push	{r4, r5, r6, lr}
 801f734:	681d      	ldr	r5, [r3, #0]
 801f736:	4606      	mov	r6, r0
 801f738:	460c      	mov	r4, r1
 801f73a:	b125      	cbz	r5, 801f746 <__swsetup_r+0x16>
 801f73c:	69ab      	ldr	r3, [r5, #24]
 801f73e:	b913      	cbnz	r3, 801f746 <__swsetup_r+0x16>
 801f740:	4628      	mov	r0, r5
 801f742:	f000 ffa1 	bl	8020688 <__sinit>
 801f746:	4b2e      	ldr	r3, [pc, #184]	; (801f800 <__swsetup_r+0xd0>)
 801f748:	429c      	cmp	r4, r3
 801f74a:	d10f      	bne.n	801f76c <__swsetup_r+0x3c>
 801f74c:	686c      	ldr	r4, [r5, #4]
 801f74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f752:	b29a      	uxth	r2, r3
 801f754:	0715      	lsls	r5, r2, #28
 801f756:	d42c      	bmi.n	801f7b2 <__swsetup_r+0x82>
 801f758:	06d0      	lsls	r0, r2, #27
 801f75a:	d411      	bmi.n	801f780 <__swsetup_r+0x50>
 801f75c:	2209      	movs	r2, #9
 801f75e:	6032      	str	r2, [r6, #0]
 801f760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f764:	81a3      	strh	r3, [r4, #12]
 801f766:	f04f 30ff 	mov.w	r0, #4294967295
 801f76a:	e03e      	b.n	801f7ea <__swsetup_r+0xba>
 801f76c:	4b25      	ldr	r3, [pc, #148]	; (801f804 <__swsetup_r+0xd4>)
 801f76e:	429c      	cmp	r4, r3
 801f770:	d101      	bne.n	801f776 <__swsetup_r+0x46>
 801f772:	68ac      	ldr	r4, [r5, #8]
 801f774:	e7eb      	b.n	801f74e <__swsetup_r+0x1e>
 801f776:	4b24      	ldr	r3, [pc, #144]	; (801f808 <__swsetup_r+0xd8>)
 801f778:	429c      	cmp	r4, r3
 801f77a:	bf08      	it	eq
 801f77c:	68ec      	ldreq	r4, [r5, #12]
 801f77e:	e7e6      	b.n	801f74e <__swsetup_r+0x1e>
 801f780:	0751      	lsls	r1, r2, #29
 801f782:	d512      	bpl.n	801f7aa <__swsetup_r+0x7a>
 801f784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f786:	b141      	cbz	r1, 801f79a <__swsetup_r+0x6a>
 801f788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f78c:	4299      	cmp	r1, r3
 801f78e:	d002      	beq.n	801f796 <__swsetup_r+0x66>
 801f790:	4630      	mov	r0, r6
 801f792:	f001 ffe1 	bl	8021758 <_free_r>
 801f796:	2300      	movs	r3, #0
 801f798:	6363      	str	r3, [r4, #52]	; 0x34
 801f79a:	89a3      	ldrh	r3, [r4, #12]
 801f79c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f7a0:	81a3      	strh	r3, [r4, #12]
 801f7a2:	2300      	movs	r3, #0
 801f7a4:	6063      	str	r3, [r4, #4]
 801f7a6:	6923      	ldr	r3, [r4, #16]
 801f7a8:	6023      	str	r3, [r4, #0]
 801f7aa:	89a3      	ldrh	r3, [r4, #12]
 801f7ac:	f043 0308 	orr.w	r3, r3, #8
 801f7b0:	81a3      	strh	r3, [r4, #12]
 801f7b2:	6923      	ldr	r3, [r4, #16]
 801f7b4:	b94b      	cbnz	r3, 801f7ca <__swsetup_r+0x9a>
 801f7b6:	89a3      	ldrh	r3, [r4, #12]
 801f7b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f7c0:	d003      	beq.n	801f7ca <__swsetup_r+0x9a>
 801f7c2:	4621      	mov	r1, r4
 801f7c4:	4630      	mov	r0, r6
 801f7c6:	f001 fb47 	bl	8020e58 <__smakebuf_r>
 801f7ca:	89a2      	ldrh	r2, [r4, #12]
 801f7cc:	f012 0301 	ands.w	r3, r2, #1
 801f7d0:	d00c      	beq.n	801f7ec <__swsetup_r+0xbc>
 801f7d2:	2300      	movs	r3, #0
 801f7d4:	60a3      	str	r3, [r4, #8]
 801f7d6:	6963      	ldr	r3, [r4, #20]
 801f7d8:	425b      	negs	r3, r3
 801f7da:	61a3      	str	r3, [r4, #24]
 801f7dc:	6923      	ldr	r3, [r4, #16]
 801f7de:	b953      	cbnz	r3, 801f7f6 <__swsetup_r+0xc6>
 801f7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f7e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801f7e8:	d1ba      	bne.n	801f760 <__swsetup_r+0x30>
 801f7ea:	bd70      	pop	{r4, r5, r6, pc}
 801f7ec:	0792      	lsls	r2, r2, #30
 801f7ee:	bf58      	it	pl
 801f7f0:	6963      	ldrpl	r3, [r4, #20]
 801f7f2:	60a3      	str	r3, [r4, #8]
 801f7f4:	e7f2      	b.n	801f7dc <__swsetup_r+0xac>
 801f7f6:	2000      	movs	r0, #0
 801f7f8:	e7f7      	b.n	801f7ea <__swsetup_r+0xba>
 801f7fa:	bf00      	nop
 801f7fc:	200000e0 	.word	0x200000e0
 801f800:	08022c18 	.word	0x08022c18
 801f804:	08022c38 	.word	0x08022c38
 801f808:	08022bf8 	.word	0x08022bf8

0801f80c <abort>:
 801f80c:	b508      	push	{r3, lr}
 801f80e:	2006      	movs	r0, #6
 801f810:	f002 f9fa 	bl	8021c08 <raise>
 801f814:	2001      	movs	r0, #1
 801f816:	f7ea ffc5 	bl	800a7a4 <_exit>

0801f81a <quorem>:
 801f81a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f81e:	6903      	ldr	r3, [r0, #16]
 801f820:	690c      	ldr	r4, [r1, #16]
 801f822:	42a3      	cmp	r3, r4
 801f824:	4680      	mov	r8, r0
 801f826:	f2c0 8082 	blt.w	801f92e <quorem+0x114>
 801f82a:	3c01      	subs	r4, #1
 801f82c:	f101 0714 	add.w	r7, r1, #20
 801f830:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801f834:	f100 0614 	add.w	r6, r0, #20
 801f838:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801f83c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801f840:	eb06 030c 	add.w	r3, r6, ip
 801f844:	3501      	adds	r5, #1
 801f846:	eb07 090c 	add.w	r9, r7, ip
 801f84a:	9301      	str	r3, [sp, #4]
 801f84c:	fbb0 f5f5 	udiv	r5, r0, r5
 801f850:	b395      	cbz	r5, 801f8b8 <quorem+0x9e>
 801f852:	f04f 0a00 	mov.w	sl, #0
 801f856:	4638      	mov	r0, r7
 801f858:	46b6      	mov	lr, r6
 801f85a:	46d3      	mov	fp, sl
 801f85c:	f850 2b04 	ldr.w	r2, [r0], #4
 801f860:	b293      	uxth	r3, r2
 801f862:	fb05 a303 	mla	r3, r5, r3, sl
 801f866:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f86a:	b29b      	uxth	r3, r3
 801f86c:	ebab 0303 	sub.w	r3, fp, r3
 801f870:	0c12      	lsrs	r2, r2, #16
 801f872:	f8de b000 	ldr.w	fp, [lr]
 801f876:	fb05 a202 	mla	r2, r5, r2, sl
 801f87a:	fa13 f38b 	uxtah	r3, r3, fp
 801f87e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801f882:	fa1f fb82 	uxth.w	fp, r2
 801f886:	f8de 2000 	ldr.w	r2, [lr]
 801f88a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801f88e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f892:	b29b      	uxth	r3, r3
 801f894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f898:	4581      	cmp	r9, r0
 801f89a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801f89e:	f84e 3b04 	str.w	r3, [lr], #4
 801f8a2:	d2db      	bcs.n	801f85c <quorem+0x42>
 801f8a4:	f856 300c 	ldr.w	r3, [r6, ip]
 801f8a8:	b933      	cbnz	r3, 801f8b8 <quorem+0x9e>
 801f8aa:	9b01      	ldr	r3, [sp, #4]
 801f8ac:	3b04      	subs	r3, #4
 801f8ae:	429e      	cmp	r6, r3
 801f8b0:	461a      	mov	r2, r3
 801f8b2:	d330      	bcc.n	801f916 <quorem+0xfc>
 801f8b4:	f8c8 4010 	str.w	r4, [r8, #16]
 801f8b8:	4640      	mov	r0, r8
 801f8ba:	f001 fd93 	bl	80213e4 <__mcmp>
 801f8be:	2800      	cmp	r0, #0
 801f8c0:	db25      	blt.n	801f90e <quorem+0xf4>
 801f8c2:	3501      	adds	r5, #1
 801f8c4:	4630      	mov	r0, r6
 801f8c6:	f04f 0c00 	mov.w	ip, #0
 801f8ca:	f857 2b04 	ldr.w	r2, [r7], #4
 801f8ce:	f8d0 e000 	ldr.w	lr, [r0]
 801f8d2:	b293      	uxth	r3, r2
 801f8d4:	ebac 0303 	sub.w	r3, ip, r3
 801f8d8:	0c12      	lsrs	r2, r2, #16
 801f8da:	fa13 f38e 	uxtah	r3, r3, lr
 801f8de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801f8e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f8e6:	b29b      	uxth	r3, r3
 801f8e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f8ec:	45b9      	cmp	r9, r7
 801f8ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f8f2:	f840 3b04 	str.w	r3, [r0], #4
 801f8f6:	d2e8      	bcs.n	801f8ca <quorem+0xb0>
 801f8f8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801f8fc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801f900:	b92a      	cbnz	r2, 801f90e <quorem+0xf4>
 801f902:	3b04      	subs	r3, #4
 801f904:	429e      	cmp	r6, r3
 801f906:	461a      	mov	r2, r3
 801f908:	d30b      	bcc.n	801f922 <quorem+0x108>
 801f90a:	f8c8 4010 	str.w	r4, [r8, #16]
 801f90e:	4628      	mov	r0, r5
 801f910:	b003      	add	sp, #12
 801f912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f916:	6812      	ldr	r2, [r2, #0]
 801f918:	3b04      	subs	r3, #4
 801f91a:	2a00      	cmp	r2, #0
 801f91c:	d1ca      	bne.n	801f8b4 <quorem+0x9a>
 801f91e:	3c01      	subs	r4, #1
 801f920:	e7c5      	b.n	801f8ae <quorem+0x94>
 801f922:	6812      	ldr	r2, [r2, #0]
 801f924:	3b04      	subs	r3, #4
 801f926:	2a00      	cmp	r2, #0
 801f928:	d1ef      	bne.n	801f90a <quorem+0xf0>
 801f92a:	3c01      	subs	r4, #1
 801f92c:	e7ea      	b.n	801f904 <quorem+0xea>
 801f92e:	2000      	movs	r0, #0
 801f930:	e7ee      	b.n	801f910 <quorem+0xf6>
 801f932:	0000      	movs	r0, r0
 801f934:	0000      	movs	r0, r0
	...

0801f938 <_dtoa_r>:
 801f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f93c:	ec57 6b10 	vmov	r6, r7, d0
 801f940:	b097      	sub	sp, #92	; 0x5c
 801f942:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f944:	9106      	str	r1, [sp, #24]
 801f946:	4604      	mov	r4, r0
 801f948:	920b      	str	r2, [sp, #44]	; 0x2c
 801f94a:	9312      	str	r3, [sp, #72]	; 0x48
 801f94c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801f950:	e9cd 6700 	strd	r6, r7, [sp]
 801f954:	b93d      	cbnz	r5, 801f966 <_dtoa_r+0x2e>
 801f956:	2010      	movs	r0, #16
 801f958:	f001 fabe 	bl	8020ed8 <malloc>
 801f95c:	6260      	str	r0, [r4, #36]	; 0x24
 801f95e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f962:	6005      	str	r5, [r0, #0]
 801f964:	60c5      	str	r5, [r0, #12]
 801f966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f968:	6819      	ldr	r1, [r3, #0]
 801f96a:	b151      	cbz	r1, 801f982 <_dtoa_r+0x4a>
 801f96c:	685a      	ldr	r2, [r3, #4]
 801f96e:	604a      	str	r2, [r1, #4]
 801f970:	2301      	movs	r3, #1
 801f972:	4093      	lsls	r3, r2
 801f974:	608b      	str	r3, [r1, #8]
 801f976:	4620      	mov	r0, r4
 801f978:	f001 fb15 	bl	8020fa6 <_Bfree>
 801f97c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f97e:	2200      	movs	r2, #0
 801f980:	601a      	str	r2, [r3, #0]
 801f982:	1e3b      	subs	r3, r7, #0
 801f984:	bfbb      	ittet	lt
 801f986:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801f98a:	9301      	strlt	r3, [sp, #4]
 801f98c:	2300      	movge	r3, #0
 801f98e:	2201      	movlt	r2, #1
 801f990:	bfac      	ite	ge
 801f992:	f8c8 3000 	strge.w	r3, [r8]
 801f996:	f8c8 2000 	strlt.w	r2, [r8]
 801f99a:	4baf      	ldr	r3, [pc, #700]	; (801fc58 <_dtoa_r+0x320>)
 801f99c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f9a0:	ea33 0308 	bics.w	r3, r3, r8
 801f9a4:	d114      	bne.n	801f9d0 <_dtoa_r+0x98>
 801f9a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f9a8:	f242 730f 	movw	r3, #9999	; 0x270f
 801f9ac:	6013      	str	r3, [r2, #0]
 801f9ae:	9b00      	ldr	r3, [sp, #0]
 801f9b0:	b923      	cbnz	r3, 801f9bc <_dtoa_r+0x84>
 801f9b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801f9b6:	2800      	cmp	r0, #0
 801f9b8:	f000 8542 	beq.w	8020440 <_dtoa_r+0xb08>
 801f9bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f9be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801fc6c <_dtoa_r+0x334>
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	f000 8544 	beq.w	8020450 <_dtoa_r+0xb18>
 801f9c8:	f10b 0303 	add.w	r3, fp, #3
 801f9cc:	f000 bd3e 	b.w	802044c <_dtoa_r+0xb14>
 801f9d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801f9d4:	2200      	movs	r2, #0
 801f9d6:	2300      	movs	r3, #0
 801f9d8:	4630      	mov	r0, r6
 801f9da:	4639      	mov	r1, r7
 801f9dc:	f7e1 f884 	bl	8000ae8 <__aeabi_dcmpeq>
 801f9e0:	4681      	mov	r9, r0
 801f9e2:	b168      	cbz	r0, 801fa00 <_dtoa_r+0xc8>
 801f9e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f9e6:	2301      	movs	r3, #1
 801f9e8:	6013      	str	r3, [r2, #0]
 801f9ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	f000 8524 	beq.w	802043a <_dtoa_r+0xb02>
 801f9f2:	4b9a      	ldr	r3, [pc, #616]	; (801fc5c <_dtoa_r+0x324>)
 801f9f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f9f6:	f103 3bff 	add.w	fp, r3, #4294967295
 801f9fa:	6013      	str	r3, [r2, #0]
 801f9fc:	f000 bd28 	b.w	8020450 <_dtoa_r+0xb18>
 801fa00:	aa14      	add	r2, sp, #80	; 0x50
 801fa02:	a915      	add	r1, sp, #84	; 0x54
 801fa04:	ec47 6b10 	vmov	d0, r6, r7
 801fa08:	4620      	mov	r0, r4
 801fa0a:	f001 fdd9 	bl	80215c0 <__d2b>
 801fa0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801fa12:	9004      	str	r0, [sp, #16]
 801fa14:	2d00      	cmp	r5, #0
 801fa16:	d07c      	beq.n	801fb12 <_dtoa_r+0x1da>
 801fa18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fa1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801fa20:	46b2      	mov	sl, r6
 801fa22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801fa26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fa2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801fa2e:	2200      	movs	r2, #0
 801fa30:	4b8b      	ldr	r3, [pc, #556]	; (801fc60 <_dtoa_r+0x328>)
 801fa32:	4650      	mov	r0, sl
 801fa34:	4659      	mov	r1, fp
 801fa36:	f7e0 fc37 	bl	80002a8 <__aeabi_dsub>
 801fa3a:	a381      	add	r3, pc, #516	; (adr r3, 801fc40 <_dtoa_r+0x308>)
 801fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa40:	f7e0 fdea 	bl	8000618 <__aeabi_dmul>
 801fa44:	a380      	add	r3, pc, #512	; (adr r3, 801fc48 <_dtoa_r+0x310>)
 801fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa4a:	f7e0 fc2f 	bl	80002ac <__adddf3>
 801fa4e:	4606      	mov	r6, r0
 801fa50:	4628      	mov	r0, r5
 801fa52:	460f      	mov	r7, r1
 801fa54:	f7e0 fd76 	bl	8000544 <__aeabi_i2d>
 801fa58:	a37d      	add	r3, pc, #500	; (adr r3, 801fc50 <_dtoa_r+0x318>)
 801fa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa5e:	f7e0 fddb 	bl	8000618 <__aeabi_dmul>
 801fa62:	4602      	mov	r2, r0
 801fa64:	460b      	mov	r3, r1
 801fa66:	4630      	mov	r0, r6
 801fa68:	4639      	mov	r1, r7
 801fa6a:	f7e0 fc1f 	bl	80002ac <__adddf3>
 801fa6e:	4606      	mov	r6, r0
 801fa70:	460f      	mov	r7, r1
 801fa72:	f7e1 f881 	bl	8000b78 <__aeabi_d2iz>
 801fa76:	2200      	movs	r2, #0
 801fa78:	4682      	mov	sl, r0
 801fa7a:	2300      	movs	r3, #0
 801fa7c:	4630      	mov	r0, r6
 801fa7e:	4639      	mov	r1, r7
 801fa80:	f7e1 f83c 	bl	8000afc <__aeabi_dcmplt>
 801fa84:	b148      	cbz	r0, 801fa9a <_dtoa_r+0x162>
 801fa86:	4650      	mov	r0, sl
 801fa88:	f7e0 fd5c 	bl	8000544 <__aeabi_i2d>
 801fa8c:	4632      	mov	r2, r6
 801fa8e:	463b      	mov	r3, r7
 801fa90:	f7e1 f82a 	bl	8000ae8 <__aeabi_dcmpeq>
 801fa94:	b908      	cbnz	r0, 801fa9a <_dtoa_r+0x162>
 801fa96:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fa9a:	f1ba 0f16 	cmp.w	sl, #22
 801fa9e:	d859      	bhi.n	801fb54 <_dtoa_r+0x21c>
 801faa0:	4970      	ldr	r1, [pc, #448]	; (801fc64 <_dtoa_r+0x32c>)
 801faa2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801faa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801faaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801faae:	f7e1 f843 	bl	8000b38 <__aeabi_dcmpgt>
 801fab2:	2800      	cmp	r0, #0
 801fab4:	d050      	beq.n	801fb58 <_dtoa_r+0x220>
 801fab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801faba:	2300      	movs	r3, #0
 801fabc:	930f      	str	r3, [sp, #60]	; 0x3c
 801fabe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fac0:	1b5d      	subs	r5, r3, r5
 801fac2:	f1b5 0801 	subs.w	r8, r5, #1
 801fac6:	bf49      	itett	mi
 801fac8:	f1c5 0301 	rsbmi	r3, r5, #1
 801facc:	2300      	movpl	r3, #0
 801face:	9305      	strmi	r3, [sp, #20]
 801fad0:	f04f 0800 	movmi.w	r8, #0
 801fad4:	bf58      	it	pl
 801fad6:	9305      	strpl	r3, [sp, #20]
 801fad8:	f1ba 0f00 	cmp.w	sl, #0
 801fadc:	db3e      	blt.n	801fb5c <_dtoa_r+0x224>
 801fade:	2300      	movs	r3, #0
 801fae0:	44d0      	add	r8, sl
 801fae2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801fae6:	9307      	str	r3, [sp, #28]
 801fae8:	9b06      	ldr	r3, [sp, #24]
 801faea:	2b09      	cmp	r3, #9
 801faec:	f200 8090 	bhi.w	801fc10 <_dtoa_r+0x2d8>
 801faf0:	2b05      	cmp	r3, #5
 801faf2:	bfc4      	itt	gt
 801faf4:	3b04      	subgt	r3, #4
 801faf6:	9306      	strgt	r3, [sp, #24]
 801faf8:	9b06      	ldr	r3, [sp, #24]
 801fafa:	f1a3 0302 	sub.w	r3, r3, #2
 801fafe:	bfcc      	ite	gt
 801fb00:	2500      	movgt	r5, #0
 801fb02:	2501      	movle	r5, #1
 801fb04:	2b03      	cmp	r3, #3
 801fb06:	f200 808f 	bhi.w	801fc28 <_dtoa_r+0x2f0>
 801fb0a:	e8df f003 	tbb	[pc, r3]
 801fb0e:	7f7d      	.short	0x7f7d
 801fb10:	7131      	.short	0x7131
 801fb12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801fb16:	441d      	add	r5, r3
 801fb18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801fb1c:	2820      	cmp	r0, #32
 801fb1e:	dd13      	ble.n	801fb48 <_dtoa_r+0x210>
 801fb20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801fb24:	9b00      	ldr	r3, [sp, #0]
 801fb26:	fa08 f800 	lsl.w	r8, r8, r0
 801fb2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801fb2e:	fa23 f000 	lsr.w	r0, r3, r0
 801fb32:	ea48 0000 	orr.w	r0, r8, r0
 801fb36:	f7e0 fcf5 	bl	8000524 <__aeabi_ui2d>
 801fb3a:	2301      	movs	r3, #1
 801fb3c:	4682      	mov	sl, r0
 801fb3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801fb42:	3d01      	subs	r5, #1
 801fb44:	9313      	str	r3, [sp, #76]	; 0x4c
 801fb46:	e772      	b.n	801fa2e <_dtoa_r+0xf6>
 801fb48:	9b00      	ldr	r3, [sp, #0]
 801fb4a:	f1c0 0020 	rsb	r0, r0, #32
 801fb4e:	fa03 f000 	lsl.w	r0, r3, r0
 801fb52:	e7f0      	b.n	801fb36 <_dtoa_r+0x1fe>
 801fb54:	2301      	movs	r3, #1
 801fb56:	e7b1      	b.n	801fabc <_dtoa_r+0x184>
 801fb58:	900f      	str	r0, [sp, #60]	; 0x3c
 801fb5a:	e7b0      	b.n	801fabe <_dtoa_r+0x186>
 801fb5c:	9b05      	ldr	r3, [sp, #20]
 801fb5e:	eba3 030a 	sub.w	r3, r3, sl
 801fb62:	9305      	str	r3, [sp, #20]
 801fb64:	f1ca 0300 	rsb	r3, sl, #0
 801fb68:	9307      	str	r3, [sp, #28]
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	930e      	str	r3, [sp, #56]	; 0x38
 801fb6e:	e7bb      	b.n	801fae8 <_dtoa_r+0x1b0>
 801fb70:	2301      	movs	r3, #1
 801fb72:	930a      	str	r3, [sp, #40]	; 0x28
 801fb74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	dd59      	ble.n	801fc2e <_dtoa_r+0x2f6>
 801fb7a:	9302      	str	r3, [sp, #8]
 801fb7c:	4699      	mov	r9, r3
 801fb7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801fb80:	2200      	movs	r2, #0
 801fb82:	6072      	str	r2, [r6, #4]
 801fb84:	2204      	movs	r2, #4
 801fb86:	f102 0014 	add.w	r0, r2, #20
 801fb8a:	4298      	cmp	r0, r3
 801fb8c:	6871      	ldr	r1, [r6, #4]
 801fb8e:	d953      	bls.n	801fc38 <_dtoa_r+0x300>
 801fb90:	4620      	mov	r0, r4
 801fb92:	f001 f9d4 	bl	8020f3e <_Balloc>
 801fb96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb98:	6030      	str	r0, [r6, #0]
 801fb9a:	f1b9 0f0e 	cmp.w	r9, #14
 801fb9e:	f8d3 b000 	ldr.w	fp, [r3]
 801fba2:	f200 80e6 	bhi.w	801fd72 <_dtoa_r+0x43a>
 801fba6:	2d00      	cmp	r5, #0
 801fba8:	f000 80e3 	beq.w	801fd72 <_dtoa_r+0x43a>
 801fbac:	ed9d 7b00 	vldr	d7, [sp]
 801fbb0:	f1ba 0f00 	cmp.w	sl, #0
 801fbb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801fbb8:	dd74      	ble.n	801fca4 <_dtoa_r+0x36c>
 801fbba:	4a2a      	ldr	r2, [pc, #168]	; (801fc64 <_dtoa_r+0x32c>)
 801fbbc:	f00a 030f 	and.w	r3, sl, #15
 801fbc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801fbc4:	ed93 7b00 	vldr	d7, [r3]
 801fbc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 801fbcc:	06f0      	lsls	r0, r6, #27
 801fbce:	ed8d 7b08 	vstr	d7, [sp, #32]
 801fbd2:	d565      	bpl.n	801fca0 <_dtoa_r+0x368>
 801fbd4:	4b24      	ldr	r3, [pc, #144]	; (801fc68 <_dtoa_r+0x330>)
 801fbd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801fbda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801fbde:	f7e0 fe45 	bl	800086c <__aeabi_ddiv>
 801fbe2:	e9cd 0100 	strd	r0, r1, [sp]
 801fbe6:	f006 060f 	and.w	r6, r6, #15
 801fbea:	2503      	movs	r5, #3
 801fbec:	4f1e      	ldr	r7, [pc, #120]	; (801fc68 <_dtoa_r+0x330>)
 801fbee:	e04c      	b.n	801fc8a <_dtoa_r+0x352>
 801fbf0:	2301      	movs	r3, #1
 801fbf2:	930a      	str	r3, [sp, #40]	; 0x28
 801fbf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fbf6:	4453      	add	r3, sl
 801fbf8:	f103 0901 	add.w	r9, r3, #1
 801fbfc:	9302      	str	r3, [sp, #8]
 801fbfe:	464b      	mov	r3, r9
 801fc00:	2b01      	cmp	r3, #1
 801fc02:	bfb8      	it	lt
 801fc04:	2301      	movlt	r3, #1
 801fc06:	e7ba      	b.n	801fb7e <_dtoa_r+0x246>
 801fc08:	2300      	movs	r3, #0
 801fc0a:	e7b2      	b.n	801fb72 <_dtoa_r+0x23a>
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	e7f0      	b.n	801fbf2 <_dtoa_r+0x2ba>
 801fc10:	2501      	movs	r5, #1
 801fc12:	2300      	movs	r3, #0
 801fc14:	9306      	str	r3, [sp, #24]
 801fc16:	950a      	str	r5, [sp, #40]	; 0x28
 801fc18:	f04f 33ff 	mov.w	r3, #4294967295
 801fc1c:	9302      	str	r3, [sp, #8]
 801fc1e:	4699      	mov	r9, r3
 801fc20:	2200      	movs	r2, #0
 801fc22:	2312      	movs	r3, #18
 801fc24:	920b      	str	r2, [sp, #44]	; 0x2c
 801fc26:	e7aa      	b.n	801fb7e <_dtoa_r+0x246>
 801fc28:	2301      	movs	r3, #1
 801fc2a:	930a      	str	r3, [sp, #40]	; 0x28
 801fc2c:	e7f4      	b.n	801fc18 <_dtoa_r+0x2e0>
 801fc2e:	2301      	movs	r3, #1
 801fc30:	9302      	str	r3, [sp, #8]
 801fc32:	4699      	mov	r9, r3
 801fc34:	461a      	mov	r2, r3
 801fc36:	e7f5      	b.n	801fc24 <_dtoa_r+0x2ec>
 801fc38:	3101      	adds	r1, #1
 801fc3a:	6071      	str	r1, [r6, #4]
 801fc3c:	0052      	lsls	r2, r2, #1
 801fc3e:	e7a2      	b.n	801fb86 <_dtoa_r+0x24e>
 801fc40:	636f4361 	.word	0x636f4361
 801fc44:	3fd287a7 	.word	0x3fd287a7
 801fc48:	8b60c8b3 	.word	0x8b60c8b3
 801fc4c:	3fc68a28 	.word	0x3fc68a28
 801fc50:	509f79fb 	.word	0x509f79fb
 801fc54:	3fd34413 	.word	0x3fd34413
 801fc58:	7ff00000 	.word	0x7ff00000
 801fc5c:	08022b6a 	.word	0x08022b6a
 801fc60:	3ff80000 	.word	0x3ff80000
 801fc64:	08022c90 	.word	0x08022c90
 801fc68:	08022c68 	.word	0x08022c68
 801fc6c:	08022bf1 	.word	0x08022bf1
 801fc70:	07f1      	lsls	r1, r6, #31
 801fc72:	d508      	bpl.n	801fc86 <_dtoa_r+0x34e>
 801fc74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801fc78:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fc7c:	f7e0 fccc 	bl	8000618 <__aeabi_dmul>
 801fc80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801fc84:	3501      	adds	r5, #1
 801fc86:	1076      	asrs	r6, r6, #1
 801fc88:	3708      	adds	r7, #8
 801fc8a:	2e00      	cmp	r6, #0
 801fc8c:	d1f0      	bne.n	801fc70 <_dtoa_r+0x338>
 801fc8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fc92:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fc96:	f7e0 fde9 	bl	800086c <__aeabi_ddiv>
 801fc9a:	e9cd 0100 	strd	r0, r1, [sp]
 801fc9e:	e01a      	b.n	801fcd6 <_dtoa_r+0x39e>
 801fca0:	2502      	movs	r5, #2
 801fca2:	e7a3      	b.n	801fbec <_dtoa_r+0x2b4>
 801fca4:	f000 80a0 	beq.w	801fde8 <_dtoa_r+0x4b0>
 801fca8:	f1ca 0600 	rsb	r6, sl, #0
 801fcac:	4b9f      	ldr	r3, [pc, #636]	; (801ff2c <_dtoa_r+0x5f4>)
 801fcae:	4fa0      	ldr	r7, [pc, #640]	; (801ff30 <_dtoa_r+0x5f8>)
 801fcb0:	f006 020f 	and.w	r2, r6, #15
 801fcb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801fcc0:	f7e0 fcaa 	bl	8000618 <__aeabi_dmul>
 801fcc4:	e9cd 0100 	strd	r0, r1, [sp]
 801fcc8:	1136      	asrs	r6, r6, #4
 801fcca:	2300      	movs	r3, #0
 801fccc:	2502      	movs	r5, #2
 801fcce:	2e00      	cmp	r6, #0
 801fcd0:	d17f      	bne.n	801fdd2 <_dtoa_r+0x49a>
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d1e1      	bne.n	801fc9a <_dtoa_r+0x362>
 801fcd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	f000 8087 	beq.w	801fdec <_dtoa_r+0x4b4>
 801fcde:	e9dd 6700 	ldrd	r6, r7, [sp]
 801fce2:	2200      	movs	r2, #0
 801fce4:	4b93      	ldr	r3, [pc, #588]	; (801ff34 <_dtoa_r+0x5fc>)
 801fce6:	4630      	mov	r0, r6
 801fce8:	4639      	mov	r1, r7
 801fcea:	f7e0 ff07 	bl	8000afc <__aeabi_dcmplt>
 801fcee:	2800      	cmp	r0, #0
 801fcf0:	d07c      	beq.n	801fdec <_dtoa_r+0x4b4>
 801fcf2:	f1b9 0f00 	cmp.w	r9, #0
 801fcf6:	d079      	beq.n	801fdec <_dtoa_r+0x4b4>
 801fcf8:	9b02      	ldr	r3, [sp, #8]
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	dd35      	ble.n	801fd6a <_dtoa_r+0x432>
 801fcfe:	f10a 33ff 	add.w	r3, sl, #4294967295
 801fd02:	9308      	str	r3, [sp, #32]
 801fd04:	4639      	mov	r1, r7
 801fd06:	2200      	movs	r2, #0
 801fd08:	4b8b      	ldr	r3, [pc, #556]	; (801ff38 <_dtoa_r+0x600>)
 801fd0a:	4630      	mov	r0, r6
 801fd0c:	f7e0 fc84 	bl	8000618 <__aeabi_dmul>
 801fd10:	e9cd 0100 	strd	r0, r1, [sp]
 801fd14:	9f02      	ldr	r7, [sp, #8]
 801fd16:	3501      	adds	r5, #1
 801fd18:	4628      	mov	r0, r5
 801fd1a:	f7e0 fc13 	bl	8000544 <__aeabi_i2d>
 801fd1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fd22:	f7e0 fc79 	bl	8000618 <__aeabi_dmul>
 801fd26:	2200      	movs	r2, #0
 801fd28:	4b84      	ldr	r3, [pc, #528]	; (801ff3c <_dtoa_r+0x604>)
 801fd2a:	f7e0 fabf 	bl	80002ac <__adddf3>
 801fd2e:	4605      	mov	r5, r0
 801fd30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801fd34:	2f00      	cmp	r7, #0
 801fd36:	d15d      	bne.n	801fdf4 <_dtoa_r+0x4bc>
 801fd38:	2200      	movs	r2, #0
 801fd3a:	4b81      	ldr	r3, [pc, #516]	; (801ff40 <_dtoa_r+0x608>)
 801fd3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fd40:	f7e0 fab2 	bl	80002a8 <__aeabi_dsub>
 801fd44:	462a      	mov	r2, r5
 801fd46:	4633      	mov	r3, r6
 801fd48:	e9cd 0100 	strd	r0, r1, [sp]
 801fd4c:	f7e0 fef4 	bl	8000b38 <__aeabi_dcmpgt>
 801fd50:	2800      	cmp	r0, #0
 801fd52:	f040 8288 	bne.w	8020266 <_dtoa_r+0x92e>
 801fd56:	462a      	mov	r2, r5
 801fd58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801fd5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fd60:	f7e0 fecc 	bl	8000afc <__aeabi_dcmplt>
 801fd64:	2800      	cmp	r0, #0
 801fd66:	f040 827c 	bne.w	8020262 <_dtoa_r+0x92a>
 801fd6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801fd6e:	e9cd 2300 	strd	r2, r3, [sp]
 801fd72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	f2c0 8150 	blt.w	802001a <_dtoa_r+0x6e2>
 801fd7a:	f1ba 0f0e 	cmp.w	sl, #14
 801fd7e:	f300 814c 	bgt.w	802001a <_dtoa_r+0x6e2>
 801fd82:	4b6a      	ldr	r3, [pc, #424]	; (801ff2c <_dtoa_r+0x5f4>)
 801fd84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801fd88:	ed93 7b00 	vldr	d7, [r3]
 801fd8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	ed8d 7b02 	vstr	d7, [sp, #8]
 801fd94:	f280 80d8 	bge.w	801ff48 <_dtoa_r+0x610>
 801fd98:	f1b9 0f00 	cmp.w	r9, #0
 801fd9c:	f300 80d4 	bgt.w	801ff48 <_dtoa_r+0x610>
 801fda0:	f040 825e 	bne.w	8020260 <_dtoa_r+0x928>
 801fda4:	2200      	movs	r2, #0
 801fda6:	4b66      	ldr	r3, [pc, #408]	; (801ff40 <_dtoa_r+0x608>)
 801fda8:	ec51 0b17 	vmov	r0, r1, d7
 801fdac:	f7e0 fc34 	bl	8000618 <__aeabi_dmul>
 801fdb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fdb4:	f7e0 feb6 	bl	8000b24 <__aeabi_dcmpge>
 801fdb8:	464f      	mov	r7, r9
 801fdba:	464e      	mov	r6, r9
 801fdbc:	2800      	cmp	r0, #0
 801fdbe:	f040 8234 	bne.w	802022a <_dtoa_r+0x8f2>
 801fdc2:	2331      	movs	r3, #49	; 0x31
 801fdc4:	f10b 0501 	add.w	r5, fp, #1
 801fdc8:	f88b 3000 	strb.w	r3, [fp]
 801fdcc:	f10a 0a01 	add.w	sl, sl, #1
 801fdd0:	e22f      	b.n	8020232 <_dtoa_r+0x8fa>
 801fdd2:	07f2      	lsls	r2, r6, #31
 801fdd4:	d505      	bpl.n	801fde2 <_dtoa_r+0x4aa>
 801fdd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fdda:	f7e0 fc1d 	bl	8000618 <__aeabi_dmul>
 801fdde:	3501      	adds	r5, #1
 801fde0:	2301      	movs	r3, #1
 801fde2:	1076      	asrs	r6, r6, #1
 801fde4:	3708      	adds	r7, #8
 801fde6:	e772      	b.n	801fcce <_dtoa_r+0x396>
 801fde8:	2502      	movs	r5, #2
 801fdea:	e774      	b.n	801fcd6 <_dtoa_r+0x39e>
 801fdec:	f8cd a020 	str.w	sl, [sp, #32]
 801fdf0:	464f      	mov	r7, r9
 801fdf2:	e791      	b.n	801fd18 <_dtoa_r+0x3e0>
 801fdf4:	4b4d      	ldr	r3, [pc, #308]	; (801ff2c <_dtoa_r+0x5f4>)
 801fdf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801fdfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801fdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe00:	2b00      	cmp	r3, #0
 801fe02:	d047      	beq.n	801fe94 <_dtoa_r+0x55c>
 801fe04:	4602      	mov	r2, r0
 801fe06:	460b      	mov	r3, r1
 801fe08:	2000      	movs	r0, #0
 801fe0a:	494e      	ldr	r1, [pc, #312]	; (801ff44 <_dtoa_r+0x60c>)
 801fe0c:	f7e0 fd2e 	bl	800086c <__aeabi_ddiv>
 801fe10:	462a      	mov	r2, r5
 801fe12:	4633      	mov	r3, r6
 801fe14:	f7e0 fa48 	bl	80002a8 <__aeabi_dsub>
 801fe18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801fe1c:	465d      	mov	r5, fp
 801fe1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fe22:	f7e0 fea9 	bl	8000b78 <__aeabi_d2iz>
 801fe26:	4606      	mov	r6, r0
 801fe28:	f7e0 fb8c 	bl	8000544 <__aeabi_i2d>
 801fe2c:	4602      	mov	r2, r0
 801fe2e:	460b      	mov	r3, r1
 801fe30:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fe34:	f7e0 fa38 	bl	80002a8 <__aeabi_dsub>
 801fe38:	3630      	adds	r6, #48	; 0x30
 801fe3a:	f805 6b01 	strb.w	r6, [r5], #1
 801fe3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801fe42:	e9cd 0100 	strd	r0, r1, [sp]
 801fe46:	f7e0 fe59 	bl	8000afc <__aeabi_dcmplt>
 801fe4a:	2800      	cmp	r0, #0
 801fe4c:	d163      	bne.n	801ff16 <_dtoa_r+0x5de>
 801fe4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fe52:	2000      	movs	r0, #0
 801fe54:	4937      	ldr	r1, [pc, #220]	; (801ff34 <_dtoa_r+0x5fc>)
 801fe56:	f7e0 fa27 	bl	80002a8 <__aeabi_dsub>
 801fe5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801fe5e:	f7e0 fe4d 	bl	8000afc <__aeabi_dcmplt>
 801fe62:	2800      	cmp	r0, #0
 801fe64:	f040 80b7 	bne.w	801ffd6 <_dtoa_r+0x69e>
 801fe68:	eba5 030b 	sub.w	r3, r5, fp
 801fe6c:	429f      	cmp	r7, r3
 801fe6e:	f77f af7c 	ble.w	801fd6a <_dtoa_r+0x432>
 801fe72:	2200      	movs	r2, #0
 801fe74:	4b30      	ldr	r3, [pc, #192]	; (801ff38 <_dtoa_r+0x600>)
 801fe76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801fe7a:	f7e0 fbcd 	bl	8000618 <__aeabi_dmul>
 801fe7e:	2200      	movs	r2, #0
 801fe80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801fe84:	4b2c      	ldr	r3, [pc, #176]	; (801ff38 <_dtoa_r+0x600>)
 801fe86:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fe8a:	f7e0 fbc5 	bl	8000618 <__aeabi_dmul>
 801fe8e:	e9cd 0100 	strd	r0, r1, [sp]
 801fe92:	e7c4      	b.n	801fe1e <_dtoa_r+0x4e6>
 801fe94:	462a      	mov	r2, r5
 801fe96:	4633      	mov	r3, r6
 801fe98:	f7e0 fbbe 	bl	8000618 <__aeabi_dmul>
 801fe9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801fea0:	eb0b 0507 	add.w	r5, fp, r7
 801fea4:	465e      	mov	r6, fp
 801fea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801feaa:	f7e0 fe65 	bl	8000b78 <__aeabi_d2iz>
 801feae:	4607      	mov	r7, r0
 801feb0:	f7e0 fb48 	bl	8000544 <__aeabi_i2d>
 801feb4:	3730      	adds	r7, #48	; 0x30
 801feb6:	4602      	mov	r2, r0
 801feb8:	460b      	mov	r3, r1
 801feba:	e9dd 0100 	ldrd	r0, r1, [sp]
 801febe:	f7e0 f9f3 	bl	80002a8 <__aeabi_dsub>
 801fec2:	f806 7b01 	strb.w	r7, [r6], #1
 801fec6:	42ae      	cmp	r6, r5
 801fec8:	e9cd 0100 	strd	r0, r1, [sp]
 801fecc:	f04f 0200 	mov.w	r2, #0
 801fed0:	d126      	bne.n	801ff20 <_dtoa_r+0x5e8>
 801fed2:	4b1c      	ldr	r3, [pc, #112]	; (801ff44 <_dtoa_r+0x60c>)
 801fed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801fed8:	f7e0 f9e8 	bl	80002ac <__adddf3>
 801fedc:	4602      	mov	r2, r0
 801fede:	460b      	mov	r3, r1
 801fee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fee4:	f7e0 fe28 	bl	8000b38 <__aeabi_dcmpgt>
 801fee8:	2800      	cmp	r0, #0
 801feea:	d174      	bne.n	801ffd6 <_dtoa_r+0x69e>
 801feec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801fef0:	2000      	movs	r0, #0
 801fef2:	4914      	ldr	r1, [pc, #80]	; (801ff44 <_dtoa_r+0x60c>)
 801fef4:	f7e0 f9d8 	bl	80002a8 <__aeabi_dsub>
 801fef8:	4602      	mov	r2, r0
 801fefa:	460b      	mov	r3, r1
 801fefc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ff00:	f7e0 fdfc 	bl	8000afc <__aeabi_dcmplt>
 801ff04:	2800      	cmp	r0, #0
 801ff06:	f43f af30 	beq.w	801fd6a <_dtoa_r+0x432>
 801ff0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ff0e:	2b30      	cmp	r3, #48	; 0x30
 801ff10:	f105 32ff 	add.w	r2, r5, #4294967295
 801ff14:	d002      	beq.n	801ff1c <_dtoa_r+0x5e4>
 801ff16:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ff1a:	e04a      	b.n	801ffb2 <_dtoa_r+0x67a>
 801ff1c:	4615      	mov	r5, r2
 801ff1e:	e7f4      	b.n	801ff0a <_dtoa_r+0x5d2>
 801ff20:	4b05      	ldr	r3, [pc, #20]	; (801ff38 <_dtoa_r+0x600>)
 801ff22:	f7e0 fb79 	bl	8000618 <__aeabi_dmul>
 801ff26:	e9cd 0100 	strd	r0, r1, [sp]
 801ff2a:	e7bc      	b.n	801fea6 <_dtoa_r+0x56e>
 801ff2c:	08022c90 	.word	0x08022c90
 801ff30:	08022c68 	.word	0x08022c68
 801ff34:	3ff00000 	.word	0x3ff00000
 801ff38:	40240000 	.word	0x40240000
 801ff3c:	401c0000 	.word	0x401c0000
 801ff40:	40140000 	.word	0x40140000
 801ff44:	3fe00000 	.word	0x3fe00000
 801ff48:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ff4c:	465d      	mov	r5, fp
 801ff4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ff52:	4630      	mov	r0, r6
 801ff54:	4639      	mov	r1, r7
 801ff56:	f7e0 fc89 	bl	800086c <__aeabi_ddiv>
 801ff5a:	f7e0 fe0d 	bl	8000b78 <__aeabi_d2iz>
 801ff5e:	4680      	mov	r8, r0
 801ff60:	f7e0 faf0 	bl	8000544 <__aeabi_i2d>
 801ff64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ff68:	f7e0 fb56 	bl	8000618 <__aeabi_dmul>
 801ff6c:	4602      	mov	r2, r0
 801ff6e:	460b      	mov	r3, r1
 801ff70:	4630      	mov	r0, r6
 801ff72:	4639      	mov	r1, r7
 801ff74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801ff78:	f7e0 f996 	bl	80002a8 <__aeabi_dsub>
 801ff7c:	f805 6b01 	strb.w	r6, [r5], #1
 801ff80:	eba5 060b 	sub.w	r6, r5, fp
 801ff84:	45b1      	cmp	r9, r6
 801ff86:	4602      	mov	r2, r0
 801ff88:	460b      	mov	r3, r1
 801ff8a:	d139      	bne.n	8020000 <_dtoa_r+0x6c8>
 801ff8c:	f7e0 f98e 	bl	80002ac <__adddf3>
 801ff90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ff94:	4606      	mov	r6, r0
 801ff96:	460f      	mov	r7, r1
 801ff98:	f7e0 fdce 	bl	8000b38 <__aeabi_dcmpgt>
 801ff9c:	b9c8      	cbnz	r0, 801ffd2 <_dtoa_r+0x69a>
 801ff9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ffa2:	4630      	mov	r0, r6
 801ffa4:	4639      	mov	r1, r7
 801ffa6:	f7e0 fd9f 	bl	8000ae8 <__aeabi_dcmpeq>
 801ffaa:	b110      	cbz	r0, 801ffb2 <_dtoa_r+0x67a>
 801ffac:	f018 0f01 	tst.w	r8, #1
 801ffb0:	d10f      	bne.n	801ffd2 <_dtoa_r+0x69a>
 801ffb2:	9904      	ldr	r1, [sp, #16]
 801ffb4:	4620      	mov	r0, r4
 801ffb6:	f000 fff6 	bl	8020fa6 <_Bfree>
 801ffba:	2300      	movs	r3, #0
 801ffbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ffbe:	702b      	strb	r3, [r5, #0]
 801ffc0:	f10a 0301 	add.w	r3, sl, #1
 801ffc4:	6013      	str	r3, [r2, #0]
 801ffc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	f000 8241 	beq.w	8020450 <_dtoa_r+0xb18>
 801ffce:	601d      	str	r5, [r3, #0]
 801ffd0:	e23e      	b.n	8020450 <_dtoa_r+0xb18>
 801ffd2:	f8cd a020 	str.w	sl, [sp, #32]
 801ffd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ffda:	2a39      	cmp	r2, #57	; 0x39
 801ffdc:	f105 33ff 	add.w	r3, r5, #4294967295
 801ffe0:	d108      	bne.n	801fff4 <_dtoa_r+0x6bc>
 801ffe2:	459b      	cmp	fp, r3
 801ffe4:	d10a      	bne.n	801fffc <_dtoa_r+0x6c4>
 801ffe6:	9b08      	ldr	r3, [sp, #32]
 801ffe8:	3301      	adds	r3, #1
 801ffea:	9308      	str	r3, [sp, #32]
 801ffec:	2330      	movs	r3, #48	; 0x30
 801ffee:	f88b 3000 	strb.w	r3, [fp]
 801fff2:	465b      	mov	r3, fp
 801fff4:	781a      	ldrb	r2, [r3, #0]
 801fff6:	3201      	adds	r2, #1
 801fff8:	701a      	strb	r2, [r3, #0]
 801fffa:	e78c      	b.n	801ff16 <_dtoa_r+0x5de>
 801fffc:	461d      	mov	r5, r3
 801fffe:	e7ea      	b.n	801ffd6 <_dtoa_r+0x69e>
 8020000:	2200      	movs	r2, #0
 8020002:	4b9b      	ldr	r3, [pc, #620]	; (8020270 <_dtoa_r+0x938>)
 8020004:	f7e0 fb08 	bl	8000618 <__aeabi_dmul>
 8020008:	2200      	movs	r2, #0
 802000a:	2300      	movs	r3, #0
 802000c:	4606      	mov	r6, r0
 802000e:	460f      	mov	r7, r1
 8020010:	f7e0 fd6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8020014:	2800      	cmp	r0, #0
 8020016:	d09a      	beq.n	801ff4e <_dtoa_r+0x616>
 8020018:	e7cb      	b.n	801ffb2 <_dtoa_r+0x67a>
 802001a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802001c:	2a00      	cmp	r2, #0
 802001e:	f000 808b 	beq.w	8020138 <_dtoa_r+0x800>
 8020022:	9a06      	ldr	r2, [sp, #24]
 8020024:	2a01      	cmp	r2, #1
 8020026:	dc6e      	bgt.n	8020106 <_dtoa_r+0x7ce>
 8020028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802002a:	2a00      	cmp	r2, #0
 802002c:	d067      	beq.n	80200fe <_dtoa_r+0x7c6>
 802002e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020032:	9f07      	ldr	r7, [sp, #28]
 8020034:	9d05      	ldr	r5, [sp, #20]
 8020036:	9a05      	ldr	r2, [sp, #20]
 8020038:	2101      	movs	r1, #1
 802003a:	441a      	add	r2, r3
 802003c:	4620      	mov	r0, r4
 802003e:	9205      	str	r2, [sp, #20]
 8020040:	4498      	add	r8, r3
 8020042:	f001 f88e 	bl	8021162 <__i2b>
 8020046:	4606      	mov	r6, r0
 8020048:	2d00      	cmp	r5, #0
 802004a:	dd0c      	ble.n	8020066 <_dtoa_r+0x72e>
 802004c:	f1b8 0f00 	cmp.w	r8, #0
 8020050:	dd09      	ble.n	8020066 <_dtoa_r+0x72e>
 8020052:	4545      	cmp	r5, r8
 8020054:	9a05      	ldr	r2, [sp, #20]
 8020056:	462b      	mov	r3, r5
 8020058:	bfa8      	it	ge
 802005a:	4643      	movge	r3, r8
 802005c:	1ad2      	subs	r2, r2, r3
 802005e:	9205      	str	r2, [sp, #20]
 8020060:	1aed      	subs	r5, r5, r3
 8020062:	eba8 0803 	sub.w	r8, r8, r3
 8020066:	9b07      	ldr	r3, [sp, #28]
 8020068:	b1eb      	cbz	r3, 80200a6 <_dtoa_r+0x76e>
 802006a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802006c:	2b00      	cmp	r3, #0
 802006e:	d067      	beq.n	8020140 <_dtoa_r+0x808>
 8020070:	b18f      	cbz	r7, 8020096 <_dtoa_r+0x75e>
 8020072:	4631      	mov	r1, r6
 8020074:	463a      	mov	r2, r7
 8020076:	4620      	mov	r0, r4
 8020078:	f001 f912 	bl	80212a0 <__pow5mult>
 802007c:	9a04      	ldr	r2, [sp, #16]
 802007e:	4601      	mov	r1, r0
 8020080:	4606      	mov	r6, r0
 8020082:	4620      	mov	r0, r4
 8020084:	f001 f876 	bl	8021174 <__multiply>
 8020088:	9904      	ldr	r1, [sp, #16]
 802008a:	9008      	str	r0, [sp, #32]
 802008c:	4620      	mov	r0, r4
 802008e:	f000 ff8a 	bl	8020fa6 <_Bfree>
 8020092:	9b08      	ldr	r3, [sp, #32]
 8020094:	9304      	str	r3, [sp, #16]
 8020096:	9b07      	ldr	r3, [sp, #28]
 8020098:	1bda      	subs	r2, r3, r7
 802009a:	d004      	beq.n	80200a6 <_dtoa_r+0x76e>
 802009c:	9904      	ldr	r1, [sp, #16]
 802009e:	4620      	mov	r0, r4
 80200a0:	f001 f8fe 	bl	80212a0 <__pow5mult>
 80200a4:	9004      	str	r0, [sp, #16]
 80200a6:	2101      	movs	r1, #1
 80200a8:	4620      	mov	r0, r4
 80200aa:	f001 f85a 	bl	8021162 <__i2b>
 80200ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200b0:	4607      	mov	r7, r0
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	f000 81d0 	beq.w	8020458 <_dtoa_r+0xb20>
 80200b8:	461a      	mov	r2, r3
 80200ba:	4601      	mov	r1, r0
 80200bc:	4620      	mov	r0, r4
 80200be:	f001 f8ef 	bl	80212a0 <__pow5mult>
 80200c2:	9b06      	ldr	r3, [sp, #24]
 80200c4:	2b01      	cmp	r3, #1
 80200c6:	4607      	mov	r7, r0
 80200c8:	dc40      	bgt.n	802014c <_dtoa_r+0x814>
 80200ca:	9b00      	ldr	r3, [sp, #0]
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d139      	bne.n	8020144 <_dtoa_r+0x80c>
 80200d0:	9b01      	ldr	r3, [sp, #4]
 80200d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d136      	bne.n	8020148 <_dtoa_r+0x810>
 80200da:	9b01      	ldr	r3, [sp, #4]
 80200dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80200e0:	0d1b      	lsrs	r3, r3, #20
 80200e2:	051b      	lsls	r3, r3, #20
 80200e4:	b12b      	cbz	r3, 80200f2 <_dtoa_r+0x7ba>
 80200e6:	9b05      	ldr	r3, [sp, #20]
 80200e8:	3301      	adds	r3, #1
 80200ea:	9305      	str	r3, [sp, #20]
 80200ec:	f108 0801 	add.w	r8, r8, #1
 80200f0:	2301      	movs	r3, #1
 80200f2:	9307      	str	r3, [sp, #28]
 80200f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	d12a      	bne.n	8020150 <_dtoa_r+0x818>
 80200fa:	2001      	movs	r0, #1
 80200fc:	e030      	b.n	8020160 <_dtoa_r+0x828>
 80200fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020100:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020104:	e795      	b.n	8020032 <_dtoa_r+0x6fa>
 8020106:	9b07      	ldr	r3, [sp, #28]
 8020108:	f109 37ff 	add.w	r7, r9, #4294967295
 802010c:	42bb      	cmp	r3, r7
 802010e:	bfbf      	itttt	lt
 8020110:	9b07      	ldrlt	r3, [sp, #28]
 8020112:	9707      	strlt	r7, [sp, #28]
 8020114:	1afa      	sublt	r2, r7, r3
 8020116:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8020118:	bfbb      	ittet	lt
 802011a:	189b      	addlt	r3, r3, r2
 802011c:	930e      	strlt	r3, [sp, #56]	; 0x38
 802011e:	1bdf      	subge	r7, r3, r7
 8020120:	2700      	movlt	r7, #0
 8020122:	f1b9 0f00 	cmp.w	r9, #0
 8020126:	bfb5      	itete	lt
 8020128:	9b05      	ldrlt	r3, [sp, #20]
 802012a:	9d05      	ldrge	r5, [sp, #20]
 802012c:	eba3 0509 	sublt.w	r5, r3, r9
 8020130:	464b      	movge	r3, r9
 8020132:	bfb8      	it	lt
 8020134:	2300      	movlt	r3, #0
 8020136:	e77e      	b.n	8020036 <_dtoa_r+0x6fe>
 8020138:	9f07      	ldr	r7, [sp, #28]
 802013a:	9d05      	ldr	r5, [sp, #20]
 802013c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802013e:	e783      	b.n	8020048 <_dtoa_r+0x710>
 8020140:	9a07      	ldr	r2, [sp, #28]
 8020142:	e7ab      	b.n	802009c <_dtoa_r+0x764>
 8020144:	2300      	movs	r3, #0
 8020146:	e7d4      	b.n	80200f2 <_dtoa_r+0x7ba>
 8020148:	9b00      	ldr	r3, [sp, #0]
 802014a:	e7d2      	b.n	80200f2 <_dtoa_r+0x7ba>
 802014c:	2300      	movs	r3, #0
 802014e:	9307      	str	r3, [sp, #28]
 8020150:	693b      	ldr	r3, [r7, #16]
 8020152:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8020156:	6918      	ldr	r0, [r3, #16]
 8020158:	f000 ffb5 	bl	80210c6 <__hi0bits>
 802015c:	f1c0 0020 	rsb	r0, r0, #32
 8020160:	4440      	add	r0, r8
 8020162:	f010 001f 	ands.w	r0, r0, #31
 8020166:	d047      	beq.n	80201f8 <_dtoa_r+0x8c0>
 8020168:	f1c0 0320 	rsb	r3, r0, #32
 802016c:	2b04      	cmp	r3, #4
 802016e:	dd3b      	ble.n	80201e8 <_dtoa_r+0x8b0>
 8020170:	9b05      	ldr	r3, [sp, #20]
 8020172:	f1c0 001c 	rsb	r0, r0, #28
 8020176:	4403      	add	r3, r0
 8020178:	9305      	str	r3, [sp, #20]
 802017a:	4405      	add	r5, r0
 802017c:	4480      	add	r8, r0
 802017e:	9b05      	ldr	r3, [sp, #20]
 8020180:	2b00      	cmp	r3, #0
 8020182:	dd05      	ble.n	8020190 <_dtoa_r+0x858>
 8020184:	461a      	mov	r2, r3
 8020186:	9904      	ldr	r1, [sp, #16]
 8020188:	4620      	mov	r0, r4
 802018a:	f001 f8d7 	bl	802133c <__lshift>
 802018e:	9004      	str	r0, [sp, #16]
 8020190:	f1b8 0f00 	cmp.w	r8, #0
 8020194:	dd05      	ble.n	80201a2 <_dtoa_r+0x86a>
 8020196:	4639      	mov	r1, r7
 8020198:	4642      	mov	r2, r8
 802019a:	4620      	mov	r0, r4
 802019c:	f001 f8ce 	bl	802133c <__lshift>
 80201a0:	4607      	mov	r7, r0
 80201a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80201a4:	b353      	cbz	r3, 80201fc <_dtoa_r+0x8c4>
 80201a6:	4639      	mov	r1, r7
 80201a8:	9804      	ldr	r0, [sp, #16]
 80201aa:	f001 f91b 	bl	80213e4 <__mcmp>
 80201ae:	2800      	cmp	r0, #0
 80201b0:	da24      	bge.n	80201fc <_dtoa_r+0x8c4>
 80201b2:	2300      	movs	r3, #0
 80201b4:	220a      	movs	r2, #10
 80201b6:	9904      	ldr	r1, [sp, #16]
 80201b8:	4620      	mov	r0, r4
 80201ba:	f000 ff0b 	bl	8020fd4 <__multadd>
 80201be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201c0:	9004      	str	r0, [sp, #16]
 80201c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80201c6:	2b00      	cmp	r3, #0
 80201c8:	f000 814d 	beq.w	8020466 <_dtoa_r+0xb2e>
 80201cc:	2300      	movs	r3, #0
 80201ce:	4631      	mov	r1, r6
 80201d0:	220a      	movs	r2, #10
 80201d2:	4620      	mov	r0, r4
 80201d4:	f000 fefe 	bl	8020fd4 <__multadd>
 80201d8:	9b02      	ldr	r3, [sp, #8]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	4606      	mov	r6, r0
 80201de:	dc4f      	bgt.n	8020280 <_dtoa_r+0x948>
 80201e0:	9b06      	ldr	r3, [sp, #24]
 80201e2:	2b02      	cmp	r3, #2
 80201e4:	dd4c      	ble.n	8020280 <_dtoa_r+0x948>
 80201e6:	e011      	b.n	802020c <_dtoa_r+0x8d4>
 80201e8:	d0c9      	beq.n	802017e <_dtoa_r+0x846>
 80201ea:	9a05      	ldr	r2, [sp, #20]
 80201ec:	331c      	adds	r3, #28
 80201ee:	441a      	add	r2, r3
 80201f0:	9205      	str	r2, [sp, #20]
 80201f2:	441d      	add	r5, r3
 80201f4:	4498      	add	r8, r3
 80201f6:	e7c2      	b.n	802017e <_dtoa_r+0x846>
 80201f8:	4603      	mov	r3, r0
 80201fa:	e7f6      	b.n	80201ea <_dtoa_r+0x8b2>
 80201fc:	f1b9 0f00 	cmp.w	r9, #0
 8020200:	dc38      	bgt.n	8020274 <_dtoa_r+0x93c>
 8020202:	9b06      	ldr	r3, [sp, #24]
 8020204:	2b02      	cmp	r3, #2
 8020206:	dd35      	ble.n	8020274 <_dtoa_r+0x93c>
 8020208:	f8cd 9008 	str.w	r9, [sp, #8]
 802020c:	9b02      	ldr	r3, [sp, #8]
 802020e:	b963      	cbnz	r3, 802022a <_dtoa_r+0x8f2>
 8020210:	4639      	mov	r1, r7
 8020212:	2205      	movs	r2, #5
 8020214:	4620      	mov	r0, r4
 8020216:	f000 fedd 	bl	8020fd4 <__multadd>
 802021a:	4601      	mov	r1, r0
 802021c:	4607      	mov	r7, r0
 802021e:	9804      	ldr	r0, [sp, #16]
 8020220:	f001 f8e0 	bl	80213e4 <__mcmp>
 8020224:	2800      	cmp	r0, #0
 8020226:	f73f adcc 	bgt.w	801fdc2 <_dtoa_r+0x48a>
 802022a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802022c:	465d      	mov	r5, fp
 802022e:	ea6f 0a03 	mvn.w	sl, r3
 8020232:	f04f 0900 	mov.w	r9, #0
 8020236:	4639      	mov	r1, r7
 8020238:	4620      	mov	r0, r4
 802023a:	f000 feb4 	bl	8020fa6 <_Bfree>
 802023e:	2e00      	cmp	r6, #0
 8020240:	f43f aeb7 	beq.w	801ffb2 <_dtoa_r+0x67a>
 8020244:	f1b9 0f00 	cmp.w	r9, #0
 8020248:	d005      	beq.n	8020256 <_dtoa_r+0x91e>
 802024a:	45b1      	cmp	r9, r6
 802024c:	d003      	beq.n	8020256 <_dtoa_r+0x91e>
 802024e:	4649      	mov	r1, r9
 8020250:	4620      	mov	r0, r4
 8020252:	f000 fea8 	bl	8020fa6 <_Bfree>
 8020256:	4631      	mov	r1, r6
 8020258:	4620      	mov	r0, r4
 802025a:	f000 fea4 	bl	8020fa6 <_Bfree>
 802025e:	e6a8      	b.n	801ffb2 <_dtoa_r+0x67a>
 8020260:	2700      	movs	r7, #0
 8020262:	463e      	mov	r6, r7
 8020264:	e7e1      	b.n	802022a <_dtoa_r+0x8f2>
 8020266:	f8dd a020 	ldr.w	sl, [sp, #32]
 802026a:	463e      	mov	r6, r7
 802026c:	e5a9      	b.n	801fdc2 <_dtoa_r+0x48a>
 802026e:	bf00      	nop
 8020270:	40240000 	.word	0x40240000
 8020274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020276:	f8cd 9008 	str.w	r9, [sp, #8]
 802027a:	2b00      	cmp	r3, #0
 802027c:	f000 80fa 	beq.w	8020474 <_dtoa_r+0xb3c>
 8020280:	2d00      	cmp	r5, #0
 8020282:	dd05      	ble.n	8020290 <_dtoa_r+0x958>
 8020284:	4631      	mov	r1, r6
 8020286:	462a      	mov	r2, r5
 8020288:	4620      	mov	r0, r4
 802028a:	f001 f857 	bl	802133c <__lshift>
 802028e:	4606      	mov	r6, r0
 8020290:	9b07      	ldr	r3, [sp, #28]
 8020292:	2b00      	cmp	r3, #0
 8020294:	d04c      	beq.n	8020330 <_dtoa_r+0x9f8>
 8020296:	6871      	ldr	r1, [r6, #4]
 8020298:	4620      	mov	r0, r4
 802029a:	f000 fe50 	bl	8020f3e <_Balloc>
 802029e:	6932      	ldr	r2, [r6, #16]
 80202a0:	3202      	adds	r2, #2
 80202a2:	4605      	mov	r5, r0
 80202a4:	0092      	lsls	r2, r2, #2
 80202a6:	f106 010c 	add.w	r1, r6, #12
 80202aa:	300c      	adds	r0, #12
 80202ac:	f7fd fa6e 	bl	801d78c <memcpy>
 80202b0:	2201      	movs	r2, #1
 80202b2:	4629      	mov	r1, r5
 80202b4:	4620      	mov	r0, r4
 80202b6:	f001 f841 	bl	802133c <__lshift>
 80202ba:	9b00      	ldr	r3, [sp, #0]
 80202bc:	f8cd b014 	str.w	fp, [sp, #20]
 80202c0:	f003 0301 	and.w	r3, r3, #1
 80202c4:	46b1      	mov	r9, r6
 80202c6:	9307      	str	r3, [sp, #28]
 80202c8:	4606      	mov	r6, r0
 80202ca:	4639      	mov	r1, r7
 80202cc:	9804      	ldr	r0, [sp, #16]
 80202ce:	f7ff faa4 	bl	801f81a <quorem>
 80202d2:	4649      	mov	r1, r9
 80202d4:	4605      	mov	r5, r0
 80202d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80202da:	9804      	ldr	r0, [sp, #16]
 80202dc:	f001 f882 	bl	80213e4 <__mcmp>
 80202e0:	4632      	mov	r2, r6
 80202e2:	9000      	str	r0, [sp, #0]
 80202e4:	4639      	mov	r1, r7
 80202e6:	4620      	mov	r0, r4
 80202e8:	f001 f896 	bl	8021418 <__mdiff>
 80202ec:	68c3      	ldr	r3, [r0, #12]
 80202ee:	4602      	mov	r2, r0
 80202f0:	bb03      	cbnz	r3, 8020334 <_dtoa_r+0x9fc>
 80202f2:	4601      	mov	r1, r0
 80202f4:	9008      	str	r0, [sp, #32]
 80202f6:	9804      	ldr	r0, [sp, #16]
 80202f8:	f001 f874 	bl	80213e4 <__mcmp>
 80202fc:	9a08      	ldr	r2, [sp, #32]
 80202fe:	4603      	mov	r3, r0
 8020300:	4611      	mov	r1, r2
 8020302:	4620      	mov	r0, r4
 8020304:	9308      	str	r3, [sp, #32]
 8020306:	f000 fe4e 	bl	8020fa6 <_Bfree>
 802030a:	9b08      	ldr	r3, [sp, #32]
 802030c:	b9a3      	cbnz	r3, 8020338 <_dtoa_r+0xa00>
 802030e:	9a06      	ldr	r2, [sp, #24]
 8020310:	b992      	cbnz	r2, 8020338 <_dtoa_r+0xa00>
 8020312:	9a07      	ldr	r2, [sp, #28]
 8020314:	b982      	cbnz	r2, 8020338 <_dtoa_r+0xa00>
 8020316:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802031a:	d029      	beq.n	8020370 <_dtoa_r+0xa38>
 802031c:	9b00      	ldr	r3, [sp, #0]
 802031e:	2b00      	cmp	r3, #0
 8020320:	dd01      	ble.n	8020326 <_dtoa_r+0x9ee>
 8020322:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8020326:	9b05      	ldr	r3, [sp, #20]
 8020328:	1c5d      	adds	r5, r3, #1
 802032a:	f883 8000 	strb.w	r8, [r3]
 802032e:	e782      	b.n	8020236 <_dtoa_r+0x8fe>
 8020330:	4630      	mov	r0, r6
 8020332:	e7c2      	b.n	80202ba <_dtoa_r+0x982>
 8020334:	2301      	movs	r3, #1
 8020336:	e7e3      	b.n	8020300 <_dtoa_r+0x9c8>
 8020338:	9a00      	ldr	r2, [sp, #0]
 802033a:	2a00      	cmp	r2, #0
 802033c:	db04      	blt.n	8020348 <_dtoa_r+0xa10>
 802033e:	d125      	bne.n	802038c <_dtoa_r+0xa54>
 8020340:	9a06      	ldr	r2, [sp, #24]
 8020342:	bb1a      	cbnz	r2, 802038c <_dtoa_r+0xa54>
 8020344:	9a07      	ldr	r2, [sp, #28]
 8020346:	bb0a      	cbnz	r2, 802038c <_dtoa_r+0xa54>
 8020348:	2b00      	cmp	r3, #0
 802034a:	ddec      	ble.n	8020326 <_dtoa_r+0x9ee>
 802034c:	2201      	movs	r2, #1
 802034e:	9904      	ldr	r1, [sp, #16]
 8020350:	4620      	mov	r0, r4
 8020352:	f000 fff3 	bl	802133c <__lshift>
 8020356:	4639      	mov	r1, r7
 8020358:	9004      	str	r0, [sp, #16]
 802035a:	f001 f843 	bl	80213e4 <__mcmp>
 802035e:	2800      	cmp	r0, #0
 8020360:	dc03      	bgt.n	802036a <_dtoa_r+0xa32>
 8020362:	d1e0      	bne.n	8020326 <_dtoa_r+0x9ee>
 8020364:	f018 0f01 	tst.w	r8, #1
 8020368:	d0dd      	beq.n	8020326 <_dtoa_r+0x9ee>
 802036a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802036e:	d1d8      	bne.n	8020322 <_dtoa_r+0x9ea>
 8020370:	9b05      	ldr	r3, [sp, #20]
 8020372:	9a05      	ldr	r2, [sp, #20]
 8020374:	1c5d      	adds	r5, r3, #1
 8020376:	2339      	movs	r3, #57	; 0x39
 8020378:	7013      	strb	r3, [r2, #0]
 802037a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802037e:	2b39      	cmp	r3, #57	; 0x39
 8020380:	f105 32ff 	add.w	r2, r5, #4294967295
 8020384:	d04f      	beq.n	8020426 <_dtoa_r+0xaee>
 8020386:	3301      	adds	r3, #1
 8020388:	7013      	strb	r3, [r2, #0]
 802038a:	e754      	b.n	8020236 <_dtoa_r+0x8fe>
 802038c:	9a05      	ldr	r2, [sp, #20]
 802038e:	2b00      	cmp	r3, #0
 8020390:	f102 0501 	add.w	r5, r2, #1
 8020394:	dd06      	ble.n	80203a4 <_dtoa_r+0xa6c>
 8020396:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802039a:	d0e9      	beq.n	8020370 <_dtoa_r+0xa38>
 802039c:	f108 0801 	add.w	r8, r8, #1
 80203a0:	9b05      	ldr	r3, [sp, #20]
 80203a2:	e7c2      	b.n	802032a <_dtoa_r+0x9f2>
 80203a4:	9a02      	ldr	r2, [sp, #8]
 80203a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80203aa:	eba5 030b 	sub.w	r3, r5, fp
 80203ae:	4293      	cmp	r3, r2
 80203b0:	d021      	beq.n	80203f6 <_dtoa_r+0xabe>
 80203b2:	2300      	movs	r3, #0
 80203b4:	220a      	movs	r2, #10
 80203b6:	9904      	ldr	r1, [sp, #16]
 80203b8:	4620      	mov	r0, r4
 80203ba:	f000 fe0b 	bl	8020fd4 <__multadd>
 80203be:	45b1      	cmp	r9, r6
 80203c0:	9004      	str	r0, [sp, #16]
 80203c2:	f04f 0300 	mov.w	r3, #0
 80203c6:	f04f 020a 	mov.w	r2, #10
 80203ca:	4649      	mov	r1, r9
 80203cc:	4620      	mov	r0, r4
 80203ce:	d105      	bne.n	80203dc <_dtoa_r+0xaa4>
 80203d0:	f000 fe00 	bl	8020fd4 <__multadd>
 80203d4:	4681      	mov	r9, r0
 80203d6:	4606      	mov	r6, r0
 80203d8:	9505      	str	r5, [sp, #20]
 80203da:	e776      	b.n	80202ca <_dtoa_r+0x992>
 80203dc:	f000 fdfa 	bl	8020fd4 <__multadd>
 80203e0:	4631      	mov	r1, r6
 80203e2:	4681      	mov	r9, r0
 80203e4:	2300      	movs	r3, #0
 80203e6:	220a      	movs	r2, #10
 80203e8:	4620      	mov	r0, r4
 80203ea:	f000 fdf3 	bl	8020fd4 <__multadd>
 80203ee:	4606      	mov	r6, r0
 80203f0:	e7f2      	b.n	80203d8 <_dtoa_r+0xaa0>
 80203f2:	f04f 0900 	mov.w	r9, #0
 80203f6:	2201      	movs	r2, #1
 80203f8:	9904      	ldr	r1, [sp, #16]
 80203fa:	4620      	mov	r0, r4
 80203fc:	f000 ff9e 	bl	802133c <__lshift>
 8020400:	4639      	mov	r1, r7
 8020402:	9004      	str	r0, [sp, #16]
 8020404:	f000 ffee 	bl	80213e4 <__mcmp>
 8020408:	2800      	cmp	r0, #0
 802040a:	dcb6      	bgt.n	802037a <_dtoa_r+0xa42>
 802040c:	d102      	bne.n	8020414 <_dtoa_r+0xadc>
 802040e:	f018 0f01 	tst.w	r8, #1
 8020412:	d1b2      	bne.n	802037a <_dtoa_r+0xa42>
 8020414:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020418:	2b30      	cmp	r3, #48	; 0x30
 802041a:	f105 32ff 	add.w	r2, r5, #4294967295
 802041e:	f47f af0a 	bne.w	8020236 <_dtoa_r+0x8fe>
 8020422:	4615      	mov	r5, r2
 8020424:	e7f6      	b.n	8020414 <_dtoa_r+0xadc>
 8020426:	4593      	cmp	fp, r2
 8020428:	d105      	bne.n	8020436 <_dtoa_r+0xafe>
 802042a:	2331      	movs	r3, #49	; 0x31
 802042c:	f10a 0a01 	add.w	sl, sl, #1
 8020430:	f88b 3000 	strb.w	r3, [fp]
 8020434:	e6ff      	b.n	8020236 <_dtoa_r+0x8fe>
 8020436:	4615      	mov	r5, r2
 8020438:	e79f      	b.n	802037a <_dtoa_r+0xa42>
 802043a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80204a0 <_dtoa_r+0xb68>
 802043e:	e007      	b.n	8020450 <_dtoa_r+0xb18>
 8020440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020442:	f8df b060 	ldr.w	fp, [pc, #96]	; 80204a4 <_dtoa_r+0xb6c>
 8020446:	b11b      	cbz	r3, 8020450 <_dtoa_r+0xb18>
 8020448:	f10b 0308 	add.w	r3, fp, #8
 802044c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802044e:	6013      	str	r3, [r2, #0]
 8020450:	4658      	mov	r0, fp
 8020452:	b017      	add	sp, #92	; 0x5c
 8020454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020458:	9b06      	ldr	r3, [sp, #24]
 802045a:	2b01      	cmp	r3, #1
 802045c:	f77f ae35 	ble.w	80200ca <_dtoa_r+0x792>
 8020460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020462:	9307      	str	r3, [sp, #28]
 8020464:	e649      	b.n	80200fa <_dtoa_r+0x7c2>
 8020466:	9b02      	ldr	r3, [sp, #8]
 8020468:	2b00      	cmp	r3, #0
 802046a:	dc03      	bgt.n	8020474 <_dtoa_r+0xb3c>
 802046c:	9b06      	ldr	r3, [sp, #24]
 802046e:	2b02      	cmp	r3, #2
 8020470:	f73f aecc 	bgt.w	802020c <_dtoa_r+0x8d4>
 8020474:	465d      	mov	r5, fp
 8020476:	4639      	mov	r1, r7
 8020478:	9804      	ldr	r0, [sp, #16]
 802047a:	f7ff f9ce 	bl	801f81a <quorem>
 802047e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8020482:	f805 8b01 	strb.w	r8, [r5], #1
 8020486:	9a02      	ldr	r2, [sp, #8]
 8020488:	eba5 030b 	sub.w	r3, r5, fp
 802048c:	429a      	cmp	r2, r3
 802048e:	ddb0      	ble.n	80203f2 <_dtoa_r+0xaba>
 8020490:	2300      	movs	r3, #0
 8020492:	220a      	movs	r2, #10
 8020494:	9904      	ldr	r1, [sp, #16]
 8020496:	4620      	mov	r0, r4
 8020498:	f000 fd9c 	bl	8020fd4 <__multadd>
 802049c:	9004      	str	r0, [sp, #16]
 802049e:	e7ea      	b.n	8020476 <_dtoa_r+0xb3e>
 80204a0:	08022b69 	.word	0x08022b69
 80204a4:	08022be8 	.word	0x08022be8

080204a8 <__sflush_r>:
 80204a8:	898a      	ldrh	r2, [r1, #12]
 80204aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204ae:	4605      	mov	r5, r0
 80204b0:	0710      	lsls	r0, r2, #28
 80204b2:	460c      	mov	r4, r1
 80204b4:	d458      	bmi.n	8020568 <__sflush_r+0xc0>
 80204b6:	684b      	ldr	r3, [r1, #4]
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	dc05      	bgt.n	80204c8 <__sflush_r+0x20>
 80204bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80204be:	2b00      	cmp	r3, #0
 80204c0:	dc02      	bgt.n	80204c8 <__sflush_r+0x20>
 80204c2:	2000      	movs	r0, #0
 80204c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80204ca:	2e00      	cmp	r6, #0
 80204cc:	d0f9      	beq.n	80204c2 <__sflush_r+0x1a>
 80204ce:	2300      	movs	r3, #0
 80204d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80204d4:	682f      	ldr	r7, [r5, #0]
 80204d6:	6a21      	ldr	r1, [r4, #32]
 80204d8:	602b      	str	r3, [r5, #0]
 80204da:	d032      	beq.n	8020542 <__sflush_r+0x9a>
 80204dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80204de:	89a3      	ldrh	r3, [r4, #12]
 80204e0:	075a      	lsls	r2, r3, #29
 80204e2:	d505      	bpl.n	80204f0 <__sflush_r+0x48>
 80204e4:	6863      	ldr	r3, [r4, #4]
 80204e6:	1ac0      	subs	r0, r0, r3
 80204e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80204ea:	b10b      	cbz	r3, 80204f0 <__sflush_r+0x48>
 80204ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80204ee:	1ac0      	subs	r0, r0, r3
 80204f0:	2300      	movs	r3, #0
 80204f2:	4602      	mov	r2, r0
 80204f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80204f6:	6a21      	ldr	r1, [r4, #32]
 80204f8:	4628      	mov	r0, r5
 80204fa:	47b0      	blx	r6
 80204fc:	1c43      	adds	r3, r0, #1
 80204fe:	89a3      	ldrh	r3, [r4, #12]
 8020500:	d106      	bne.n	8020510 <__sflush_r+0x68>
 8020502:	6829      	ldr	r1, [r5, #0]
 8020504:	291d      	cmp	r1, #29
 8020506:	d848      	bhi.n	802059a <__sflush_r+0xf2>
 8020508:	4a29      	ldr	r2, [pc, #164]	; (80205b0 <__sflush_r+0x108>)
 802050a:	40ca      	lsrs	r2, r1
 802050c:	07d6      	lsls	r6, r2, #31
 802050e:	d544      	bpl.n	802059a <__sflush_r+0xf2>
 8020510:	2200      	movs	r2, #0
 8020512:	6062      	str	r2, [r4, #4]
 8020514:	04d9      	lsls	r1, r3, #19
 8020516:	6922      	ldr	r2, [r4, #16]
 8020518:	6022      	str	r2, [r4, #0]
 802051a:	d504      	bpl.n	8020526 <__sflush_r+0x7e>
 802051c:	1c42      	adds	r2, r0, #1
 802051e:	d101      	bne.n	8020524 <__sflush_r+0x7c>
 8020520:	682b      	ldr	r3, [r5, #0]
 8020522:	b903      	cbnz	r3, 8020526 <__sflush_r+0x7e>
 8020524:	6560      	str	r0, [r4, #84]	; 0x54
 8020526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020528:	602f      	str	r7, [r5, #0]
 802052a:	2900      	cmp	r1, #0
 802052c:	d0c9      	beq.n	80204c2 <__sflush_r+0x1a>
 802052e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020532:	4299      	cmp	r1, r3
 8020534:	d002      	beq.n	802053c <__sflush_r+0x94>
 8020536:	4628      	mov	r0, r5
 8020538:	f001 f90e 	bl	8021758 <_free_r>
 802053c:	2000      	movs	r0, #0
 802053e:	6360      	str	r0, [r4, #52]	; 0x34
 8020540:	e7c0      	b.n	80204c4 <__sflush_r+0x1c>
 8020542:	2301      	movs	r3, #1
 8020544:	4628      	mov	r0, r5
 8020546:	47b0      	blx	r6
 8020548:	1c41      	adds	r1, r0, #1
 802054a:	d1c8      	bne.n	80204de <__sflush_r+0x36>
 802054c:	682b      	ldr	r3, [r5, #0]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d0c5      	beq.n	80204de <__sflush_r+0x36>
 8020552:	2b1d      	cmp	r3, #29
 8020554:	d001      	beq.n	802055a <__sflush_r+0xb2>
 8020556:	2b16      	cmp	r3, #22
 8020558:	d101      	bne.n	802055e <__sflush_r+0xb6>
 802055a:	602f      	str	r7, [r5, #0]
 802055c:	e7b1      	b.n	80204c2 <__sflush_r+0x1a>
 802055e:	89a3      	ldrh	r3, [r4, #12]
 8020560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020564:	81a3      	strh	r3, [r4, #12]
 8020566:	e7ad      	b.n	80204c4 <__sflush_r+0x1c>
 8020568:	690f      	ldr	r7, [r1, #16]
 802056a:	2f00      	cmp	r7, #0
 802056c:	d0a9      	beq.n	80204c2 <__sflush_r+0x1a>
 802056e:	0793      	lsls	r3, r2, #30
 8020570:	680e      	ldr	r6, [r1, #0]
 8020572:	bf08      	it	eq
 8020574:	694b      	ldreq	r3, [r1, #20]
 8020576:	600f      	str	r7, [r1, #0]
 8020578:	bf18      	it	ne
 802057a:	2300      	movne	r3, #0
 802057c:	eba6 0807 	sub.w	r8, r6, r7
 8020580:	608b      	str	r3, [r1, #8]
 8020582:	f1b8 0f00 	cmp.w	r8, #0
 8020586:	dd9c      	ble.n	80204c2 <__sflush_r+0x1a>
 8020588:	4643      	mov	r3, r8
 802058a:	463a      	mov	r2, r7
 802058c:	6a21      	ldr	r1, [r4, #32]
 802058e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020590:	4628      	mov	r0, r5
 8020592:	47b0      	blx	r6
 8020594:	2800      	cmp	r0, #0
 8020596:	dc06      	bgt.n	80205a6 <__sflush_r+0xfe>
 8020598:	89a3      	ldrh	r3, [r4, #12]
 802059a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802059e:	81a3      	strh	r3, [r4, #12]
 80205a0:	f04f 30ff 	mov.w	r0, #4294967295
 80205a4:	e78e      	b.n	80204c4 <__sflush_r+0x1c>
 80205a6:	4407      	add	r7, r0
 80205a8:	eba8 0800 	sub.w	r8, r8, r0
 80205ac:	e7e9      	b.n	8020582 <__sflush_r+0xda>
 80205ae:	bf00      	nop
 80205b0:	20400001 	.word	0x20400001

080205b4 <_fflush_r>:
 80205b4:	b538      	push	{r3, r4, r5, lr}
 80205b6:	690b      	ldr	r3, [r1, #16]
 80205b8:	4605      	mov	r5, r0
 80205ba:	460c      	mov	r4, r1
 80205bc:	b1db      	cbz	r3, 80205f6 <_fflush_r+0x42>
 80205be:	b118      	cbz	r0, 80205c8 <_fflush_r+0x14>
 80205c0:	6983      	ldr	r3, [r0, #24]
 80205c2:	b90b      	cbnz	r3, 80205c8 <_fflush_r+0x14>
 80205c4:	f000 f860 	bl	8020688 <__sinit>
 80205c8:	4b0c      	ldr	r3, [pc, #48]	; (80205fc <_fflush_r+0x48>)
 80205ca:	429c      	cmp	r4, r3
 80205cc:	d109      	bne.n	80205e2 <_fflush_r+0x2e>
 80205ce:	686c      	ldr	r4, [r5, #4]
 80205d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80205d4:	b17b      	cbz	r3, 80205f6 <_fflush_r+0x42>
 80205d6:	4621      	mov	r1, r4
 80205d8:	4628      	mov	r0, r5
 80205da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80205de:	f7ff bf63 	b.w	80204a8 <__sflush_r>
 80205e2:	4b07      	ldr	r3, [pc, #28]	; (8020600 <_fflush_r+0x4c>)
 80205e4:	429c      	cmp	r4, r3
 80205e6:	d101      	bne.n	80205ec <_fflush_r+0x38>
 80205e8:	68ac      	ldr	r4, [r5, #8]
 80205ea:	e7f1      	b.n	80205d0 <_fflush_r+0x1c>
 80205ec:	4b05      	ldr	r3, [pc, #20]	; (8020604 <_fflush_r+0x50>)
 80205ee:	429c      	cmp	r4, r3
 80205f0:	bf08      	it	eq
 80205f2:	68ec      	ldreq	r4, [r5, #12]
 80205f4:	e7ec      	b.n	80205d0 <_fflush_r+0x1c>
 80205f6:	2000      	movs	r0, #0
 80205f8:	bd38      	pop	{r3, r4, r5, pc}
 80205fa:	bf00      	nop
 80205fc:	08022c18 	.word	0x08022c18
 8020600:	08022c38 	.word	0x08022c38
 8020604:	08022bf8 	.word	0x08022bf8

08020608 <std>:
 8020608:	2300      	movs	r3, #0
 802060a:	b510      	push	{r4, lr}
 802060c:	4604      	mov	r4, r0
 802060e:	e9c0 3300 	strd	r3, r3, [r0]
 8020612:	6083      	str	r3, [r0, #8]
 8020614:	8181      	strh	r1, [r0, #12]
 8020616:	6643      	str	r3, [r0, #100]	; 0x64
 8020618:	81c2      	strh	r2, [r0, #14]
 802061a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802061e:	6183      	str	r3, [r0, #24]
 8020620:	4619      	mov	r1, r3
 8020622:	2208      	movs	r2, #8
 8020624:	305c      	adds	r0, #92	; 0x5c
 8020626:	f7fd f8bc 	bl	801d7a2 <memset>
 802062a:	4b05      	ldr	r3, [pc, #20]	; (8020640 <std+0x38>)
 802062c:	6263      	str	r3, [r4, #36]	; 0x24
 802062e:	4b05      	ldr	r3, [pc, #20]	; (8020644 <std+0x3c>)
 8020630:	62a3      	str	r3, [r4, #40]	; 0x28
 8020632:	4b05      	ldr	r3, [pc, #20]	; (8020648 <std+0x40>)
 8020634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020636:	4b05      	ldr	r3, [pc, #20]	; (802064c <std+0x44>)
 8020638:	6224      	str	r4, [r4, #32]
 802063a:	6323      	str	r3, [r4, #48]	; 0x30
 802063c:	bd10      	pop	{r4, pc}
 802063e:	bf00      	nop
 8020640:	08021c41 	.word	0x08021c41
 8020644:	08021c63 	.word	0x08021c63
 8020648:	08021c9b 	.word	0x08021c9b
 802064c:	08021cbf 	.word	0x08021cbf

08020650 <_cleanup_r>:
 8020650:	4901      	ldr	r1, [pc, #4]	; (8020658 <_cleanup_r+0x8>)
 8020652:	f000 b885 	b.w	8020760 <_fwalk_reent>
 8020656:	bf00      	nop
 8020658:	080205b5 	.word	0x080205b5

0802065c <__sfmoreglue>:
 802065c:	b570      	push	{r4, r5, r6, lr}
 802065e:	1e4a      	subs	r2, r1, #1
 8020660:	2568      	movs	r5, #104	; 0x68
 8020662:	4355      	muls	r5, r2
 8020664:	460e      	mov	r6, r1
 8020666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802066a:	f001 f8c3 	bl	80217f4 <_malloc_r>
 802066e:	4604      	mov	r4, r0
 8020670:	b140      	cbz	r0, 8020684 <__sfmoreglue+0x28>
 8020672:	2100      	movs	r1, #0
 8020674:	e9c0 1600 	strd	r1, r6, [r0]
 8020678:	300c      	adds	r0, #12
 802067a:	60a0      	str	r0, [r4, #8]
 802067c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020680:	f7fd f88f 	bl	801d7a2 <memset>
 8020684:	4620      	mov	r0, r4
 8020686:	bd70      	pop	{r4, r5, r6, pc}

08020688 <__sinit>:
 8020688:	6983      	ldr	r3, [r0, #24]
 802068a:	b510      	push	{r4, lr}
 802068c:	4604      	mov	r4, r0
 802068e:	bb33      	cbnz	r3, 80206de <__sinit+0x56>
 8020690:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8020694:	6503      	str	r3, [r0, #80]	; 0x50
 8020696:	4b12      	ldr	r3, [pc, #72]	; (80206e0 <__sinit+0x58>)
 8020698:	4a12      	ldr	r2, [pc, #72]	; (80206e4 <__sinit+0x5c>)
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	6282      	str	r2, [r0, #40]	; 0x28
 802069e:	4298      	cmp	r0, r3
 80206a0:	bf04      	itt	eq
 80206a2:	2301      	moveq	r3, #1
 80206a4:	6183      	streq	r3, [r0, #24]
 80206a6:	f000 f81f 	bl	80206e8 <__sfp>
 80206aa:	6060      	str	r0, [r4, #4]
 80206ac:	4620      	mov	r0, r4
 80206ae:	f000 f81b 	bl	80206e8 <__sfp>
 80206b2:	60a0      	str	r0, [r4, #8]
 80206b4:	4620      	mov	r0, r4
 80206b6:	f000 f817 	bl	80206e8 <__sfp>
 80206ba:	2200      	movs	r2, #0
 80206bc:	60e0      	str	r0, [r4, #12]
 80206be:	2104      	movs	r1, #4
 80206c0:	6860      	ldr	r0, [r4, #4]
 80206c2:	f7ff ffa1 	bl	8020608 <std>
 80206c6:	2201      	movs	r2, #1
 80206c8:	2109      	movs	r1, #9
 80206ca:	68a0      	ldr	r0, [r4, #8]
 80206cc:	f7ff ff9c 	bl	8020608 <std>
 80206d0:	2202      	movs	r2, #2
 80206d2:	2112      	movs	r1, #18
 80206d4:	68e0      	ldr	r0, [r4, #12]
 80206d6:	f7ff ff97 	bl	8020608 <std>
 80206da:	2301      	movs	r3, #1
 80206dc:	61a3      	str	r3, [r4, #24]
 80206de:	bd10      	pop	{r4, pc}
 80206e0:	08022b44 	.word	0x08022b44
 80206e4:	08020651 	.word	0x08020651

080206e8 <__sfp>:
 80206e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206ea:	4b1b      	ldr	r3, [pc, #108]	; (8020758 <__sfp+0x70>)
 80206ec:	681e      	ldr	r6, [r3, #0]
 80206ee:	69b3      	ldr	r3, [r6, #24]
 80206f0:	4607      	mov	r7, r0
 80206f2:	b913      	cbnz	r3, 80206fa <__sfp+0x12>
 80206f4:	4630      	mov	r0, r6
 80206f6:	f7ff ffc7 	bl	8020688 <__sinit>
 80206fa:	3648      	adds	r6, #72	; 0x48
 80206fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020700:	3b01      	subs	r3, #1
 8020702:	d503      	bpl.n	802070c <__sfp+0x24>
 8020704:	6833      	ldr	r3, [r6, #0]
 8020706:	b133      	cbz	r3, 8020716 <__sfp+0x2e>
 8020708:	6836      	ldr	r6, [r6, #0]
 802070a:	e7f7      	b.n	80206fc <__sfp+0x14>
 802070c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020710:	b16d      	cbz	r5, 802072e <__sfp+0x46>
 8020712:	3468      	adds	r4, #104	; 0x68
 8020714:	e7f4      	b.n	8020700 <__sfp+0x18>
 8020716:	2104      	movs	r1, #4
 8020718:	4638      	mov	r0, r7
 802071a:	f7ff ff9f 	bl	802065c <__sfmoreglue>
 802071e:	6030      	str	r0, [r6, #0]
 8020720:	2800      	cmp	r0, #0
 8020722:	d1f1      	bne.n	8020708 <__sfp+0x20>
 8020724:	230c      	movs	r3, #12
 8020726:	603b      	str	r3, [r7, #0]
 8020728:	4604      	mov	r4, r0
 802072a:	4620      	mov	r0, r4
 802072c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802072e:	4b0b      	ldr	r3, [pc, #44]	; (802075c <__sfp+0x74>)
 8020730:	6665      	str	r5, [r4, #100]	; 0x64
 8020732:	e9c4 5500 	strd	r5, r5, [r4]
 8020736:	60a5      	str	r5, [r4, #8]
 8020738:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802073c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8020740:	2208      	movs	r2, #8
 8020742:	4629      	mov	r1, r5
 8020744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020748:	f7fd f82b 	bl	801d7a2 <memset>
 802074c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020754:	e7e9      	b.n	802072a <__sfp+0x42>
 8020756:	bf00      	nop
 8020758:	08022b44 	.word	0x08022b44
 802075c:	ffff0001 	.word	0xffff0001

08020760 <_fwalk_reent>:
 8020760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020764:	4680      	mov	r8, r0
 8020766:	4689      	mov	r9, r1
 8020768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802076c:	2600      	movs	r6, #0
 802076e:	b914      	cbnz	r4, 8020776 <_fwalk_reent+0x16>
 8020770:	4630      	mov	r0, r6
 8020772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020776:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802077a:	3f01      	subs	r7, #1
 802077c:	d501      	bpl.n	8020782 <_fwalk_reent+0x22>
 802077e:	6824      	ldr	r4, [r4, #0]
 8020780:	e7f5      	b.n	802076e <_fwalk_reent+0xe>
 8020782:	89ab      	ldrh	r3, [r5, #12]
 8020784:	2b01      	cmp	r3, #1
 8020786:	d907      	bls.n	8020798 <_fwalk_reent+0x38>
 8020788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802078c:	3301      	adds	r3, #1
 802078e:	d003      	beq.n	8020798 <_fwalk_reent+0x38>
 8020790:	4629      	mov	r1, r5
 8020792:	4640      	mov	r0, r8
 8020794:	47c8      	blx	r9
 8020796:	4306      	orrs	r6, r0
 8020798:	3568      	adds	r5, #104	; 0x68
 802079a:	e7ee      	b.n	802077a <_fwalk_reent+0x1a>

0802079c <rshift>:
 802079c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802079e:	6906      	ldr	r6, [r0, #16]
 80207a0:	114b      	asrs	r3, r1, #5
 80207a2:	429e      	cmp	r6, r3
 80207a4:	f100 0414 	add.w	r4, r0, #20
 80207a8:	dd30      	ble.n	802080c <rshift+0x70>
 80207aa:	f011 011f 	ands.w	r1, r1, #31
 80207ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80207b2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80207b6:	d108      	bne.n	80207ca <rshift+0x2e>
 80207b8:	4621      	mov	r1, r4
 80207ba:	42b2      	cmp	r2, r6
 80207bc:	460b      	mov	r3, r1
 80207be:	d211      	bcs.n	80207e4 <rshift+0x48>
 80207c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80207c4:	f841 3b04 	str.w	r3, [r1], #4
 80207c8:	e7f7      	b.n	80207ba <rshift+0x1e>
 80207ca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80207ce:	f1c1 0c20 	rsb	ip, r1, #32
 80207d2:	40cd      	lsrs	r5, r1
 80207d4:	3204      	adds	r2, #4
 80207d6:	4623      	mov	r3, r4
 80207d8:	42b2      	cmp	r2, r6
 80207da:	4617      	mov	r7, r2
 80207dc:	d30c      	bcc.n	80207f8 <rshift+0x5c>
 80207de:	601d      	str	r5, [r3, #0]
 80207e0:	b105      	cbz	r5, 80207e4 <rshift+0x48>
 80207e2:	3304      	adds	r3, #4
 80207e4:	1b1a      	subs	r2, r3, r4
 80207e6:	42a3      	cmp	r3, r4
 80207e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80207ec:	bf08      	it	eq
 80207ee:	2300      	moveq	r3, #0
 80207f0:	6102      	str	r2, [r0, #16]
 80207f2:	bf08      	it	eq
 80207f4:	6143      	streq	r3, [r0, #20]
 80207f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207f8:	683f      	ldr	r7, [r7, #0]
 80207fa:	fa07 f70c 	lsl.w	r7, r7, ip
 80207fe:	433d      	orrs	r5, r7
 8020800:	f843 5b04 	str.w	r5, [r3], #4
 8020804:	f852 5b04 	ldr.w	r5, [r2], #4
 8020808:	40cd      	lsrs	r5, r1
 802080a:	e7e5      	b.n	80207d8 <rshift+0x3c>
 802080c:	4623      	mov	r3, r4
 802080e:	e7e9      	b.n	80207e4 <rshift+0x48>

08020810 <__hexdig_fun>:
 8020810:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020814:	2b09      	cmp	r3, #9
 8020816:	d802      	bhi.n	802081e <__hexdig_fun+0xe>
 8020818:	3820      	subs	r0, #32
 802081a:	b2c0      	uxtb	r0, r0
 802081c:	4770      	bx	lr
 802081e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8020822:	2b05      	cmp	r3, #5
 8020824:	d801      	bhi.n	802082a <__hexdig_fun+0x1a>
 8020826:	3847      	subs	r0, #71	; 0x47
 8020828:	e7f7      	b.n	802081a <__hexdig_fun+0xa>
 802082a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802082e:	2b05      	cmp	r3, #5
 8020830:	d801      	bhi.n	8020836 <__hexdig_fun+0x26>
 8020832:	3827      	subs	r0, #39	; 0x27
 8020834:	e7f1      	b.n	802081a <__hexdig_fun+0xa>
 8020836:	2000      	movs	r0, #0
 8020838:	4770      	bx	lr

0802083a <__gethex>:
 802083a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083e:	b08b      	sub	sp, #44	; 0x2c
 8020840:	468a      	mov	sl, r1
 8020842:	9002      	str	r0, [sp, #8]
 8020844:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020846:	9306      	str	r3, [sp, #24]
 8020848:	4690      	mov	r8, r2
 802084a:	f000 fad0 	bl	8020dee <__localeconv_l>
 802084e:	6803      	ldr	r3, [r0, #0]
 8020850:	9303      	str	r3, [sp, #12]
 8020852:	4618      	mov	r0, r3
 8020854:	f7df fccc 	bl	80001f0 <strlen>
 8020858:	9b03      	ldr	r3, [sp, #12]
 802085a:	9001      	str	r0, [sp, #4]
 802085c:	4403      	add	r3, r0
 802085e:	f04f 0b00 	mov.w	fp, #0
 8020862:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020866:	9307      	str	r3, [sp, #28]
 8020868:	f8da 3000 	ldr.w	r3, [sl]
 802086c:	3302      	adds	r3, #2
 802086e:	461f      	mov	r7, r3
 8020870:	f813 0b01 	ldrb.w	r0, [r3], #1
 8020874:	2830      	cmp	r0, #48	; 0x30
 8020876:	d06c      	beq.n	8020952 <__gethex+0x118>
 8020878:	f7ff ffca 	bl	8020810 <__hexdig_fun>
 802087c:	4604      	mov	r4, r0
 802087e:	2800      	cmp	r0, #0
 8020880:	d16a      	bne.n	8020958 <__gethex+0x11e>
 8020882:	9a01      	ldr	r2, [sp, #4]
 8020884:	9903      	ldr	r1, [sp, #12]
 8020886:	4638      	mov	r0, r7
 8020888:	f001 fa1d 	bl	8021cc6 <strncmp>
 802088c:	2800      	cmp	r0, #0
 802088e:	d166      	bne.n	802095e <__gethex+0x124>
 8020890:	9b01      	ldr	r3, [sp, #4]
 8020892:	5cf8      	ldrb	r0, [r7, r3]
 8020894:	18fe      	adds	r6, r7, r3
 8020896:	f7ff ffbb 	bl	8020810 <__hexdig_fun>
 802089a:	2800      	cmp	r0, #0
 802089c:	d062      	beq.n	8020964 <__gethex+0x12a>
 802089e:	4633      	mov	r3, r6
 80208a0:	7818      	ldrb	r0, [r3, #0]
 80208a2:	2830      	cmp	r0, #48	; 0x30
 80208a4:	461f      	mov	r7, r3
 80208a6:	f103 0301 	add.w	r3, r3, #1
 80208aa:	d0f9      	beq.n	80208a0 <__gethex+0x66>
 80208ac:	f7ff ffb0 	bl	8020810 <__hexdig_fun>
 80208b0:	fab0 f580 	clz	r5, r0
 80208b4:	096d      	lsrs	r5, r5, #5
 80208b6:	4634      	mov	r4, r6
 80208b8:	f04f 0b01 	mov.w	fp, #1
 80208bc:	463a      	mov	r2, r7
 80208be:	4616      	mov	r6, r2
 80208c0:	3201      	adds	r2, #1
 80208c2:	7830      	ldrb	r0, [r6, #0]
 80208c4:	f7ff ffa4 	bl	8020810 <__hexdig_fun>
 80208c8:	2800      	cmp	r0, #0
 80208ca:	d1f8      	bne.n	80208be <__gethex+0x84>
 80208cc:	9a01      	ldr	r2, [sp, #4]
 80208ce:	9903      	ldr	r1, [sp, #12]
 80208d0:	4630      	mov	r0, r6
 80208d2:	f001 f9f8 	bl	8021cc6 <strncmp>
 80208d6:	b950      	cbnz	r0, 80208ee <__gethex+0xb4>
 80208d8:	b954      	cbnz	r4, 80208f0 <__gethex+0xb6>
 80208da:	9b01      	ldr	r3, [sp, #4]
 80208dc:	18f4      	adds	r4, r6, r3
 80208de:	4622      	mov	r2, r4
 80208e0:	4616      	mov	r6, r2
 80208e2:	3201      	adds	r2, #1
 80208e4:	7830      	ldrb	r0, [r6, #0]
 80208e6:	f7ff ff93 	bl	8020810 <__hexdig_fun>
 80208ea:	2800      	cmp	r0, #0
 80208ec:	d1f8      	bne.n	80208e0 <__gethex+0xa6>
 80208ee:	b10c      	cbz	r4, 80208f4 <__gethex+0xba>
 80208f0:	1ba4      	subs	r4, r4, r6
 80208f2:	00a4      	lsls	r4, r4, #2
 80208f4:	7833      	ldrb	r3, [r6, #0]
 80208f6:	2b50      	cmp	r3, #80	; 0x50
 80208f8:	d001      	beq.n	80208fe <__gethex+0xc4>
 80208fa:	2b70      	cmp	r3, #112	; 0x70
 80208fc:	d140      	bne.n	8020980 <__gethex+0x146>
 80208fe:	7873      	ldrb	r3, [r6, #1]
 8020900:	2b2b      	cmp	r3, #43	; 0x2b
 8020902:	d031      	beq.n	8020968 <__gethex+0x12e>
 8020904:	2b2d      	cmp	r3, #45	; 0x2d
 8020906:	d033      	beq.n	8020970 <__gethex+0x136>
 8020908:	1c71      	adds	r1, r6, #1
 802090a:	f04f 0900 	mov.w	r9, #0
 802090e:	7808      	ldrb	r0, [r1, #0]
 8020910:	f7ff ff7e 	bl	8020810 <__hexdig_fun>
 8020914:	1e43      	subs	r3, r0, #1
 8020916:	b2db      	uxtb	r3, r3
 8020918:	2b18      	cmp	r3, #24
 802091a:	d831      	bhi.n	8020980 <__gethex+0x146>
 802091c:	f1a0 0210 	sub.w	r2, r0, #16
 8020920:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020924:	f7ff ff74 	bl	8020810 <__hexdig_fun>
 8020928:	1e43      	subs	r3, r0, #1
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b18      	cmp	r3, #24
 802092e:	d922      	bls.n	8020976 <__gethex+0x13c>
 8020930:	f1b9 0f00 	cmp.w	r9, #0
 8020934:	d000      	beq.n	8020938 <__gethex+0xfe>
 8020936:	4252      	negs	r2, r2
 8020938:	4414      	add	r4, r2
 802093a:	f8ca 1000 	str.w	r1, [sl]
 802093e:	b30d      	cbz	r5, 8020984 <__gethex+0x14a>
 8020940:	f1bb 0f00 	cmp.w	fp, #0
 8020944:	bf0c      	ite	eq
 8020946:	2706      	moveq	r7, #6
 8020948:	2700      	movne	r7, #0
 802094a:	4638      	mov	r0, r7
 802094c:	b00b      	add	sp, #44	; 0x2c
 802094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020952:	f10b 0b01 	add.w	fp, fp, #1
 8020956:	e78a      	b.n	802086e <__gethex+0x34>
 8020958:	2500      	movs	r5, #0
 802095a:	462c      	mov	r4, r5
 802095c:	e7ae      	b.n	80208bc <__gethex+0x82>
 802095e:	463e      	mov	r6, r7
 8020960:	2501      	movs	r5, #1
 8020962:	e7c7      	b.n	80208f4 <__gethex+0xba>
 8020964:	4604      	mov	r4, r0
 8020966:	e7fb      	b.n	8020960 <__gethex+0x126>
 8020968:	f04f 0900 	mov.w	r9, #0
 802096c:	1cb1      	adds	r1, r6, #2
 802096e:	e7ce      	b.n	802090e <__gethex+0xd4>
 8020970:	f04f 0901 	mov.w	r9, #1
 8020974:	e7fa      	b.n	802096c <__gethex+0x132>
 8020976:	230a      	movs	r3, #10
 8020978:	fb03 0202 	mla	r2, r3, r2, r0
 802097c:	3a10      	subs	r2, #16
 802097e:	e7cf      	b.n	8020920 <__gethex+0xe6>
 8020980:	4631      	mov	r1, r6
 8020982:	e7da      	b.n	802093a <__gethex+0x100>
 8020984:	1bf3      	subs	r3, r6, r7
 8020986:	3b01      	subs	r3, #1
 8020988:	4629      	mov	r1, r5
 802098a:	2b07      	cmp	r3, #7
 802098c:	dc49      	bgt.n	8020a22 <__gethex+0x1e8>
 802098e:	9802      	ldr	r0, [sp, #8]
 8020990:	f000 fad5 	bl	8020f3e <_Balloc>
 8020994:	9b01      	ldr	r3, [sp, #4]
 8020996:	f100 0914 	add.w	r9, r0, #20
 802099a:	f04f 0b00 	mov.w	fp, #0
 802099e:	f1c3 0301 	rsb	r3, r3, #1
 80209a2:	4605      	mov	r5, r0
 80209a4:	f8cd 9010 	str.w	r9, [sp, #16]
 80209a8:	46da      	mov	sl, fp
 80209aa:	9308      	str	r3, [sp, #32]
 80209ac:	42b7      	cmp	r7, r6
 80209ae:	d33b      	bcc.n	8020a28 <__gethex+0x1ee>
 80209b0:	9804      	ldr	r0, [sp, #16]
 80209b2:	f840 ab04 	str.w	sl, [r0], #4
 80209b6:	eba0 0009 	sub.w	r0, r0, r9
 80209ba:	1080      	asrs	r0, r0, #2
 80209bc:	6128      	str	r0, [r5, #16]
 80209be:	0147      	lsls	r7, r0, #5
 80209c0:	4650      	mov	r0, sl
 80209c2:	f000 fb80 	bl	80210c6 <__hi0bits>
 80209c6:	f8d8 6000 	ldr.w	r6, [r8]
 80209ca:	1a3f      	subs	r7, r7, r0
 80209cc:	42b7      	cmp	r7, r6
 80209ce:	dd64      	ble.n	8020a9a <__gethex+0x260>
 80209d0:	1bbf      	subs	r7, r7, r6
 80209d2:	4639      	mov	r1, r7
 80209d4:	4628      	mov	r0, r5
 80209d6:	f000 fe8f 	bl	80216f8 <__any_on>
 80209da:	4682      	mov	sl, r0
 80209dc:	b178      	cbz	r0, 80209fe <__gethex+0x1c4>
 80209de:	1e7b      	subs	r3, r7, #1
 80209e0:	1159      	asrs	r1, r3, #5
 80209e2:	f003 021f 	and.w	r2, r3, #31
 80209e6:	f04f 0a01 	mov.w	sl, #1
 80209ea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80209ee:	fa0a f202 	lsl.w	r2, sl, r2
 80209f2:	420a      	tst	r2, r1
 80209f4:	d003      	beq.n	80209fe <__gethex+0x1c4>
 80209f6:	4553      	cmp	r3, sl
 80209f8:	dc46      	bgt.n	8020a88 <__gethex+0x24e>
 80209fa:	f04f 0a02 	mov.w	sl, #2
 80209fe:	4639      	mov	r1, r7
 8020a00:	4628      	mov	r0, r5
 8020a02:	f7ff fecb 	bl	802079c <rshift>
 8020a06:	443c      	add	r4, r7
 8020a08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020a0c:	42a3      	cmp	r3, r4
 8020a0e:	da52      	bge.n	8020ab6 <__gethex+0x27c>
 8020a10:	4629      	mov	r1, r5
 8020a12:	9802      	ldr	r0, [sp, #8]
 8020a14:	f000 fac7 	bl	8020fa6 <_Bfree>
 8020a18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020a1a:	2300      	movs	r3, #0
 8020a1c:	6013      	str	r3, [r2, #0]
 8020a1e:	27a3      	movs	r7, #163	; 0xa3
 8020a20:	e793      	b.n	802094a <__gethex+0x110>
 8020a22:	3101      	adds	r1, #1
 8020a24:	105b      	asrs	r3, r3, #1
 8020a26:	e7b0      	b.n	802098a <__gethex+0x150>
 8020a28:	1e73      	subs	r3, r6, #1
 8020a2a:	9305      	str	r3, [sp, #20]
 8020a2c:	9a07      	ldr	r2, [sp, #28]
 8020a2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8020a32:	4293      	cmp	r3, r2
 8020a34:	d018      	beq.n	8020a68 <__gethex+0x22e>
 8020a36:	f1bb 0f20 	cmp.w	fp, #32
 8020a3a:	d107      	bne.n	8020a4c <__gethex+0x212>
 8020a3c:	9b04      	ldr	r3, [sp, #16]
 8020a3e:	f8c3 a000 	str.w	sl, [r3]
 8020a42:	3304      	adds	r3, #4
 8020a44:	f04f 0a00 	mov.w	sl, #0
 8020a48:	9304      	str	r3, [sp, #16]
 8020a4a:	46d3      	mov	fp, sl
 8020a4c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8020a50:	f7ff fede 	bl	8020810 <__hexdig_fun>
 8020a54:	f000 000f 	and.w	r0, r0, #15
 8020a58:	fa00 f00b 	lsl.w	r0, r0, fp
 8020a5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8020a60:	f10b 0b04 	add.w	fp, fp, #4
 8020a64:	9b05      	ldr	r3, [sp, #20]
 8020a66:	e00d      	b.n	8020a84 <__gethex+0x24a>
 8020a68:	9b05      	ldr	r3, [sp, #20]
 8020a6a:	9a08      	ldr	r2, [sp, #32]
 8020a6c:	4413      	add	r3, r2
 8020a6e:	42bb      	cmp	r3, r7
 8020a70:	d3e1      	bcc.n	8020a36 <__gethex+0x1fc>
 8020a72:	4618      	mov	r0, r3
 8020a74:	9a01      	ldr	r2, [sp, #4]
 8020a76:	9903      	ldr	r1, [sp, #12]
 8020a78:	9309      	str	r3, [sp, #36]	; 0x24
 8020a7a:	f001 f924 	bl	8021cc6 <strncmp>
 8020a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a80:	2800      	cmp	r0, #0
 8020a82:	d1d8      	bne.n	8020a36 <__gethex+0x1fc>
 8020a84:	461e      	mov	r6, r3
 8020a86:	e791      	b.n	80209ac <__gethex+0x172>
 8020a88:	1eb9      	subs	r1, r7, #2
 8020a8a:	4628      	mov	r0, r5
 8020a8c:	f000 fe34 	bl	80216f8 <__any_on>
 8020a90:	2800      	cmp	r0, #0
 8020a92:	d0b2      	beq.n	80209fa <__gethex+0x1c0>
 8020a94:	f04f 0a03 	mov.w	sl, #3
 8020a98:	e7b1      	b.n	80209fe <__gethex+0x1c4>
 8020a9a:	da09      	bge.n	8020ab0 <__gethex+0x276>
 8020a9c:	1bf7      	subs	r7, r6, r7
 8020a9e:	4629      	mov	r1, r5
 8020aa0:	463a      	mov	r2, r7
 8020aa2:	9802      	ldr	r0, [sp, #8]
 8020aa4:	f000 fc4a 	bl	802133c <__lshift>
 8020aa8:	1be4      	subs	r4, r4, r7
 8020aaa:	4605      	mov	r5, r0
 8020aac:	f100 0914 	add.w	r9, r0, #20
 8020ab0:	f04f 0a00 	mov.w	sl, #0
 8020ab4:	e7a8      	b.n	8020a08 <__gethex+0x1ce>
 8020ab6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020aba:	42a0      	cmp	r0, r4
 8020abc:	dd6a      	ble.n	8020b94 <__gethex+0x35a>
 8020abe:	1b04      	subs	r4, r0, r4
 8020ac0:	42a6      	cmp	r6, r4
 8020ac2:	dc2e      	bgt.n	8020b22 <__gethex+0x2e8>
 8020ac4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020ac8:	2b02      	cmp	r3, #2
 8020aca:	d022      	beq.n	8020b12 <__gethex+0x2d8>
 8020acc:	2b03      	cmp	r3, #3
 8020ace:	d024      	beq.n	8020b1a <__gethex+0x2e0>
 8020ad0:	2b01      	cmp	r3, #1
 8020ad2:	d115      	bne.n	8020b00 <__gethex+0x2c6>
 8020ad4:	42a6      	cmp	r6, r4
 8020ad6:	d113      	bne.n	8020b00 <__gethex+0x2c6>
 8020ad8:	2e01      	cmp	r6, #1
 8020ada:	dc0b      	bgt.n	8020af4 <__gethex+0x2ba>
 8020adc:	9a06      	ldr	r2, [sp, #24]
 8020ade:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020ae2:	6013      	str	r3, [r2, #0]
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	612b      	str	r3, [r5, #16]
 8020ae8:	f8c9 3000 	str.w	r3, [r9]
 8020aec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020aee:	2762      	movs	r7, #98	; 0x62
 8020af0:	601d      	str	r5, [r3, #0]
 8020af2:	e72a      	b.n	802094a <__gethex+0x110>
 8020af4:	1e71      	subs	r1, r6, #1
 8020af6:	4628      	mov	r0, r5
 8020af8:	f000 fdfe 	bl	80216f8 <__any_on>
 8020afc:	2800      	cmp	r0, #0
 8020afe:	d1ed      	bne.n	8020adc <__gethex+0x2a2>
 8020b00:	4629      	mov	r1, r5
 8020b02:	9802      	ldr	r0, [sp, #8]
 8020b04:	f000 fa4f 	bl	8020fa6 <_Bfree>
 8020b08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b0a:	2300      	movs	r3, #0
 8020b0c:	6013      	str	r3, [r2, #0]
 8020b0e:	2750      	movs	r7, #80	; 0x50
 8020b10:	e71b      	b.n	802094a <__gethex+0x110>
 8020b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d0e1      	beq.n	8020adc <__gethex+0x2a2>
 8020b18:	e7f2      	b.n	8020b00 <__gethex+0x2c6>
 8020b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d1dd      	bne.n	8020adc <__gethex+0x2a2>
 8020b20:	e7ee      	b.n	8020b00 <__gethex+0x2c6>
 8020b22:	1e67      	subs	r7, r4, #1
 8020b24:	f1ba 0f00 	cmp.w	sl, #0
 8020b28:	d131      	bne.n	8020b8e <__gethex+0x354>
 8020b2a:	b127      	cbz	r7, 8020b36 <__gethex+0x2fc>
 8020b2c:	4639      	mov	r1, r7
 8020b2e:	4628      	mov	r0, r5
 8020b30:	f000 fde2 	bl	80216f8 <__any_on>
 8020b34:	4682      	mov	sl, r0
 8020b36:	117a      	asrs	r2, r7, #5
 8020b38:	2301      	movs	r3, #1
 8020b3a:	f007 071f 	and.w	r7, r7, #31
 8020b3e:	fa03 f707 	lsl.w	r7, r3, r7
 8020b42:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8020b46:	4621      	mov	r1, r4
 8020b48:	421f      	tst	r7, r3
 8020b4a:	4628      	mov	r0, r5
 8020b4c:	bf18      	it	ne
 8020b4e:	f04a 0a02 	orrne.w	sl, sl, #2
 8020b52:	1b36      	subs	r6, r6, r4
 8020b54:	f7ff fe22 	bl	802079c <rshift>
 8020b58:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8020b5c:	2702      	movs	r7, #2
 8020b5e:	f1ba 0f00 	cmp.w	sl, #0
 8020b62:	d048      	beq.n	8020bf6 <__gethex+0x3bc>
 8020b64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020b68:	2b02      	cmp	r3, #2
 8020b6a:	d015      	beq.n	8020b98 <__gethex+0x35e>
 8020b6c:	2b03      	cmp	r3, #3
 8020b6e:	d017      	beq.n	8020ba0 <__gethex+0x366>
 8020b70:	2b01      	cmp	r3, #1
 8020b72:	d109      	bne.n	8020b88 <__gethex+0x34e>
 8020b74:	f01a 0f02 	tst.w	sl, #2
 8020b78:	d006      	beq.n	8020b88 <__gethex+0x34e>
 8020b7a:	f8d9 3000 	ldr.w	r3, [r9]
 8020b7e:	ea4a 0a03 	orr.w	sl, sl, r3
 8020b82:	f01a 0f01 	tst.w	sl, #1
 8020b86:	d10e      	bne.n	8020ba6 <__gethex+0x36c>
 8020b88:	f047 0710 	orr.w	r7, r7, #16
 8020b8c:	e033      	b.n	8020bf6 <__gethex+0x3bc>
 8020b8e:	f04f 0a01 	mov.w	sl, #1
 8020b92:	e7d0      	b.n	8020b36 <__gethex+0x2fc>
 8020b94:	2701      	movs	r7, #1
 8020b96:	e7e2      	b.n	8020b5e <__gethex+0x324>
 8020b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020b9a:	f1c3 0301 	rsb	r3, r3, #1
 8020b9e:	9315      	str	r3, [sp, #84]	; 0x54
 8020ba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	d0f0      	beq.n	8020b88 <__gethex+0x34e>
 8020ba6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8020baa:	f105 0314 	add.w	r3, r5, #20
 8020bae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8020bb2:	eb03 010a 	add.w	r1, r3, sl
 8020bb6:	f04f 0c00 	mov.w	ip, #0
 8020bba:	4618      	mov	r0, r3
 8020bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8020bc0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8020bc4:	d01c      	beq.n	8020c00 <__gethex+0x3c6>
 8020bc6:	3201      	adds	r2, #1
 8020bc8:	6002      	str	r2, [r0, #0]
 8020bca:	2f02      	cmp	r7, #2
 8020bcc:	f105 0314 	add.w	r3, r5, #20
 8020bd0:	d138      	bne.n	8020c44 <__gethex+0x40a>
 8020bd2:	f8d8 2000 	ldr.w	r2, [r8]
 8020bd6:	3a01      	subs	r2, #1
 8020bd8:	42b2      	cmp	r2, r6
 8020bda:	d10a      	bne.n	8020bf2 <__gethex+0x3b8>
 8020bdc:	1171      	asrs	r1, r6, #5
 8020bde:	2201      	movs	r2, #1
 8020be0:	f006 061f 	and.w	r6, r6, #31
 8020be4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020be8:	fa02 f606 	lsl.w	r6, r2, r6
 8020bec:	421e      	tst	r6, r3
 8020bee:	bf18      	it	ne
 8020bf0:	4617      	movne	r7, r2
 8020bf2:	f047 0720 	orr.w	r7, r7, #32
 8020bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020bf8:	601d      	str	r5, [r3, #0]
 8020bfa:	9b06      	ldr	r3, [sp, #24]
 8020bfc:	601c      	str	r4, [r3, #0]
 8020bfe:	e6a4      	b.n	802094a <__gethex+0x110>
 8020c00:	4299      	cmp	r1, r3
 8020c02:	f843 cc04 	str.w	ip, [r3, #-4]
 8020c06:	d8d8      	bhi.n	8020bba <__gethex+0x380>
 8020c08:	68ab      	ldr	r3, [r5, #8]
 8020c0a:	4599      	cmp	r9, r3
 8020c0c:	db12      	blt.n	8020c34 <__gethex+0x3fa>
 8020c0e:	6869      	ldr	r1, [r5, #4]
 8020c10:	9802      	ldr	r0, [sp, #8]
 8020c12:	3101      	adds	r1, #1
 8020c14:	f000 f993 	bl	8020f3e <_Balloc>
 8020c18:	692a      	ldr	r2, [r5, #16]
 8020c1a:	3202      	adds	r2, #2
 8020c1c:	f105 010c 	add.w	r1, r5, #12
 8020c20:	4683      	mov	fp, r0
 8020c22:	0092      	lsls	r2, r2, #2
 8020c24:	300c      	adds	r0, #12
 8020c26:	f7fc fdb1 	bl	801d78c <memcpy>
 8020c2a:	4629      	mov	r1, r5
 8020c2c:	9802      	ldr	r0, [sp, #8]
 8020c2e:	f000 f9ba 	bl	8020fa6 <_Bfree>
 8020c32:	465d      	mov	r5, fp
 8020c34:	692b      	ldr	r3, [r5, #16]
 8020c36:	1c5a      	adds	r2, r3, #1
 8020c38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8020c3c:	612a      	str	r2, [r5, #16]
 8020c3e:	2201      	movs	r2, #1
 8020c40:	615a      	str	r2, [r3, #20]
 8020c42:	e7c2      	b.n	8020bca <__gethex+0x390>
 8020c44:	692a      	ldr	r2, [r5, #16]
 8020c46:	454a      	cmp	r2, r9
 8020c48:	dd0b      	ble.n	8020c62 <__gethex+0x428>
 8020c4a:	2101      	movs	r1, #1
 8020c4c:	4628      	mov	r0, r5
 8020c4e:	f7ff fda5 	bl	802079c <rshift>
 8020c52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020c56:	3401      	adds	r4, #1
 8020c58:	42a3      	cmp	r3, r4
 8020c5a:	f6ff aed9 	blt.w	8020a10 <__gethex+0x1d6>
 8020c5e:	2701      	movs	r7, #1
 8020c60:	e7c7      	b.n	8020bf2 <__gethex+0x3b8>
 8020c62:	f016 061f 	ands.w	r6, r6, #31
 8020c66:	d0fa      	beq.n	8020c5e <__gethex+0x424>
 8020c68:	449a      	add	sl, r3
 8020c6a:	f1c6 0620 	rsb	r6, r6, #32
 8020c6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8020c72:	f000 fa28 	bl	80210c6 <__hi0bits>
 8020c76:	42b0      	cmp	r0, r6
 8020c78:	dbe7      	blt.n	8020c4a <__gethex+0x410>
 8020c7a:	e7f0      	b.n	8020c5e <__gethex+0x424>

08020c7c <L_shift>:
 8020c7c:	f1c2 0208 	rsb	r2, r2, #8
 8020c80:	0092      	lsls	r2, r2, #2
 8020c82:	b570      	push	{r4, r5, r6, lr}
 8020c84:	f1c2 0620 	rsb	r6, r2, #32
 8020c88:	6843      	ldr	r3, [r0, #4]
 8020c8a:	6804      	ldr	r4, [r0, #0]
 8020c8c:	fa03 f506 	lsl.w	r5, r3, r6
 8020c90:	432c      	orrs	r4, r5
 8020c92:	40d3      	lsrs	r3, r2
 8020c94:	6004      	str	r4, [r0, #0]
 8020c96:	f840 3f04 	str.w	r3, [r0, #4]!
 8020c9a:	4288      	cmp	r0, r1
 8020c9c:	d3f4      	bcc.n	8020c88 <L_shift+0xc>
 8020c9e:	bd70      	pop	{r4, r5, r6, pc}

08020ca0 <__match>:
 8020ca0:	b530      	push	{r4, r5, lr}
 8020ca2:	6803      	ldr	r3, [r0, #0]
 8020ca4:	3301      	adds	r3, #1
 8020ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020caa:	b914      	cbnz	r4, 8020cb2 <__match+0x12>
 8020cac:	6003      	str	r3, [r0, #0]
 8020cae:	2001      	movs	r0, #1
 8020cb0:	bd30      	pop	{r4, r5, pc}
 8020cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020cb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020cba:	2d19      	cmp	r5, #25
 8020cbc:	bf98      	it	ls
 8020cbe:	3220      	addls	r2, #32
 8020cc0:	42a2      	cmp	r2, r4
 8020cc2:	d0f0      	beq.n	8020ca6 <__match+0x6>
 8020cc4:	2000      	movs	r0, #0
 8020cc6:	e7f3      	b.n	8020cb0 <__match+0x10>

08020cc8 <__hexnan>:
 8020cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ccc:	680b      	ldr	r3, [r1, #0]
 8020cce:	6801      	ldr	r1, [r0, #0]
 8020cd0:	115f      	asrs	r7, r3, #5
 8020cd2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8020cd6:	f013 031f 	ands.w	r3, r3, #31
 8020cda:	b087      	sub	sp, #28
 8020cdc:	bf18      	it	ne
 8020cde:	3704      	addne	r7, #4
 8020ce0:	2500      	movs	r5, #0
 8020ce2:	1f3e      	subs	r6, r7, #4
 8020ce4:	4682      	mov	sl, r0
 8020ce6:	4690      	mov	r8, r2
 8020ce8:	9301      	str	r3, [sp, #4]
 8020cea:	f847 5c04 	str.w	r5, [r7, #-4]
 8020cee:	46b1      	mov	r9, r6
 8020cf0:	4634      	mov	r4, r6
 8020cf2:	9502      	str	r5, [sp, #8]
 8020cf4:	46ab      	mov	fp, r5
 8020cf6:	784a      	ldrb	r2, [r1, #1]
 8020cf8:	1c4b      	adds	r3, r1, #1
 8020cfa:	9303      	str	r3, [sp, #12]
 8020cfc:	b342      	cbz	r2, 8020d50 <__hexnan+0x88>
 8020cfe:	4610      	mov	r0, r2
 8020d00:	9105      	str	r1, [sp, #20]
 8020d02:	9204      	str	r2, [sp, #16]
 8020d04:	f7ff fd84 	bl	8020810 <__hexdig_fun>
 8020d08:	2800      	cmp	r0, #0
 8020d0a:	d143      	bne.n	8020d94 <__hexnan+0xcc>
 8020d0c:	9a04      	ldr	r2, [sp, #16]
 8020d0e:	9905      	ldr	r1, [sp, #20]
 8020d10:	2a20      	cmp	r2, #32
 8020d12:	d818      	bhi.n	8020d46 <__hexnan+0x7e>
 8020d14:	9b02      	ldr	r3, [sp, #8]
 8020d16:	459b      	cmp	fp, r3
 8020d18:	dd13      	ble.n	8020d42 <__hexnan+0x7a>
 8020d1a:	454c      	cmp	r4, r9
 8020d1c:	d206      	bcs.n	8020d2c <__hexnan+0x64>
 8020d1e:	2d07      	cmp	r5, #7
 8020d20:	dc04      	bgt.n	8020d2c <__hexnan+0x64>
 8020d22:	462a      	mov	r2, r5
 8020d24:	4649      	mov	r1, r9
 8020d26:	4620      	mov	r0, r4
 8020d28:	f7ff ffa8 	bl	8020c7c <L_shift>
 8020d2c:	4544      	cmp	r4, r8
 8020d2e:	d944      	bls.n	8020dba <__hexnan+0xf2>
 8020d30:	2300      	movs	r3, #0
 8020d32:	f1a4 0904 	sub.w	r9, r4, #4
 8020d36:	f844 3c04 	str.w	r3, [r4, #-4]
 8020d3a:	f8cd b008 	str.w	fp, [sp, #8]
 8020d3e:	464c      	mov	r4, r9
 8020d40:	461d      	mov	r5, r3
 8020d42:	9903      	ldr	r1, [sp, #12]
 8020d44:	e7d7      	b.n	8020cf6 <__hexnan+0x2e>
 8020d46:	2a29      	cmp	r2, #41	; 0x29
 8020d48:	d14a      	bne.n	8020de0 <__hexnan+0x118>
 8020d4a:	3102      	adds	r1, #2
 8020d4c:	f8ca 1000 	str.w	r1, [sl]
 8020d50:	f1bb 0f00 	cmp.w	fp, #0
 8020d54:	d044      	beq.n	8020de0 <__hexnan+0x118>
 8020d56:	454c      	cmp	r4, r9
 8020d58:	d206      	bcs.n	8020d68 <__hexnan+0xa0>
 8020d5a:	2d07      	cmp	r5, #7
 8020d5c:	dc04      	bgt.n	8020d68 <__hexnan+0xa0>
 8020d5e:	462a      	mov	r2, r5
 8020d60:	4649      	mov	r1, r9
 8020d62:	4620      	mov	r0, r4
 8020d64:	f7ff ff8a 	bl	8020c7c <L_shift>
 8020d68:	4544      	cmp	r4, r8
 8020d6a:	d928      	bls.n	8020dbe <__hexnan+0xf6>
 8020d6c:	4643      	mov	r3, r8
 8020d6e:	f854 2b04 	ldr.w	r2, [r4], #4
 8020d72:	f843 2b04 	str.w	r2, [r3], #4
 8020d76:	42a6      	cmp	r6, r4
 8020d78:	d2f9      	bcs.n	8020d6e <__hexnan+0xa6>
 8020d7a:	2200      	movs	r2, #0
 8020d7c:	f843 2b04 	str.w	r2, [r3], #4
 8020d80:	429e      	cmp	r6, r3
 8020d82:	d2fb      	bcs.n	8020d7c <__hexnan+0xb4>
 8020d84:	6833      	ldr	r3, [r6, #0]
 8020d86:	b91b      	cbnz	r3, 8020d90 <__hexnan+0xc8>
 8020d88:	4546      	cmp	r6, r8
 8020d8a:	d127      	bne.n	8020ddc <__hexnan+0x114>
 8020d8c:	2301      	movs	r3, #1
 8020d8e:	6033      	str	r3, [r6, #0]
 8020d90:	2005      	movs	r0, #5
 8020d92:	e026      	b.n	8020de2 <__hexnan+0x11a>
 8020d94:	3501      	adds	r5, #1
 8020d96:	2d08      	cmp	r5, #8
 8020d98:	f10b 0b01 	add.w	fp, fp, #1
 8020d9c:	dd06      	ble.n	8020dac <__hexnan+0xe4>
 8020d9e:	4544      	cmp	r4, r8
 8020da0:	d9cf      	bls.n	8020d42 <__hexnan+0x7a>
 8020da2:	2300      	movs	r3, #0
 8020da4:	f844 3c04 	str.w	r3, [r4, #-4]
 8020da8:	2501      	movs	r5, #1
 8020daa:	3c04      	subs	r4, #4
 8020dac:	6822      	ldr	r2, [r4, #0]
 8020dae:	f000 000f 	and.w	r0, r0, #15
 8020db2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8020db6:	6020      	str	r0, [r4, #0]
 8020db8:	e7c3      	b.n	8020d42 <__hexnan+0x7a>
 8020dba:	2508      	movs	r5, #8
 8020dbc:	e7c1      	b.n	8020d42 <__hexnan+0x7a>
 8020dbe:	9b01      	ldr	r3, [sp, #4]
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d0df      	beq.n	8020d84 <__hexnan+0xbc>
 8020dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8020dc8:	f1c3 0320 	rsb	r3, r3, #32
 8020dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8020dd0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8020dd4:	401a      	ands	r2, r3
 8020dd6:	f847 2c04 	str.w	r2, [r7, #-4]
 8020dda:	e7d3      	b.n	8020d84 <__hexnan+0xbc>
 8020ddc:	3e04      	subs	r6, #4
 8020dde:	e7d1      	b.n	8020d84 <__hexnan+0xbc>
 8020de0:	2004      	movs	r0, #4
 8020de2:	b007      	add	sp, #28
 8020de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020de8 <__locale_ctype_ptr_l>:
 8020de8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8020dec:	4770      	bx	lr

08020dee <__localeconv_l>:
 8020dee:	30f0      	adds	r0, #240	; 0xf0
 8020df0:	4770      	bx	lr
	...

08020df4 <_localeconv_r>:
 8020df4:	4b04      	ldr	r3, [pc, #16]	; (8020e08 <_localeconv_r+0x14>)
 8020df6:	681b      	ldr	r3, [r3, #0]
 8020df8:	6a18      	ldr	r0, [r3, #32]
 8020dfa:	4b04      	ldr	r3, [pc, #16]	; (8020e0c <_localeconv_r+0x18>)
 8020dfc:	2800      	cmp	r0, #0
 8020dfe:	bf08      	it	eq
 8020e00:	4618      	moveq	r0, r3
 8020e02:	30f0      	adds	r0, #240	; 0xf0
 8020e04:	4770      	bx	lr
 8020e06:	bf00      	nop
 8020e08:	200000e0 	.word	0x200000e0
 8020e0c:	20000144 	.word	0x20000144

08020e10 <__swhatbuf_r>:
 8020e10:	b570      	push	{r4, r5, r6, lr}
 8020e12:	460e      	mov	r6, r1
 8020e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e18:	2900      	cmp	r1, #0
 8020e1a:	b096      	sub	sp, #88	; 0x58
 8020e1c:	4614      	mov	r4, r2
 8020e1e:	461d      	mov	r5, r3
 8020e20:	da07      	bge.n	8020e32 <__swhatbuf_r+0x22>
 8020e22:	2300      	movs	r3, #0
 8020e24:	602b      	str	r3, [r5, #0]
 8020e26:	89b3      	ldrh	r3, [r6, #12]
 8020e28:	061a      	lsls	r2, r3, #24
 8020e2a:	d410      	bmi.n	8020e4e <__swhatbuf_r+0x3e>
 8020e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020e30:	e00e      	b.n	8020e50 <__swhatbuf_r+0x40>
 8020e32:	466a      	mov	r2, sp
 8020e34:	f000 ff88 	bl	8021d48 <_fstat_r>
 8020e38:	2800      	cmp	r0, #0
 8020e3a:	dbf2      	blt.n	8020e22 <__swhatbuf_r+0x12>
 8020e3c:	9a01      	ldr	r2, [sp, #4]
 8020e3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020e42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020e46:	425a      	negs	r2, r3
 8020e48:	415a      	adcs	r2, r3
 8020e4a:	602a      	str	r2, [r5, #0]
 8020e4c:	e7ee      	b.n	8020e2c <__swhatbuf_r+0x1c>
 8020e4e:	2340      	movs	r3, #64	; 0x40
 8020e50:	2000      	movs	r0, #0
 8020e52:	6023      	str	r3, [r4, #0]
 8020e54:	b016      	add	sp, #88	; 0x58
 8020e56:	bd70      	pop	{r4, r5, r6, pc}

08020e58 <__smakebuf_r>:
 8020e58:	898b      	ldrh	r3, [r1, #12]
 8020e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020e5c:	079d      	lsls	r5, r3, #30
 8020e5e:	4606      	mov	r6, r0
 8020e60:	460c      	mov	r4, r1
 8020e62:	d507      	bpl.n	8020e74 <__smakebuf_r+0x1c>
 8020e64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020e68:	6023      	str	r3, [r4, #0]
 8020e6a:	6123      	str	r3, [r4, #16]
 8020e6c:	2301      	movs	r3, #1
 8020e6e:	6163      	str	r3, [r4, #20]
 8020e70:	b002      	add	sp, #8
 8020e72:	bd70      	pop	{r4, r5, r6, pc}
 8020e74:	ab01      	add	r3, sp, #4
 8020e76:	466a      	mov	r2, sp
 8020e78:	f7ff ffca 	bl	8020e10 <__swhatbuf_r>
 8020e7c:	9900      	ldr	r1, [sp, #0]
 8020e7e:	4605      	mov	r5, r0
 8020e80:	4630      	mov	r0, r6
 8020e82:	f000 fcb7 	bl	80217f4 <_malloc_r>
 8020e86:	b948      	cbnz	r0, 8020e9c <__smakebuf_r+0x44>
 8020e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020e8c:	059a      	lsls	r2, r3, #22
 8020e8e:	d4ef      	bmi.n	8020e70 <__smakebuf_r+0x18>
 8020e90:	f023 0303 	bic.w	r3, r3, #3
 8020e94:	f043 0302 	orr.w	r3, r3, #2
 8020e98:	81a3      	strh	r3, [r4, #12]
 8020e9a:	e7e3      	b.n	8020e64 <__smakebuf_r+0xc>
 8020e9c:	4b0d      	ldr	r3, [pc, #52]	; (8020ed4 <__smakebuf_r+0x7c>)
 8020e9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8020ea0:	89a3      	ldrh	r3, [r4, #12]
 8020ea2:	6020      	str	r0, [r4, #0]
 8020ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ea8:	81a3      	strh	r3, [r4, #12]
 8020eaa:	9b00      	ldr	r3, [sp, #0]
 8020eac:	6163      	str	r3, [r4, #20]
 8020eae:	9b01      	ldr	r3, [sp, #4]
 8020eb0:	6120      	str	r0, [r4, #16]
 8020eb2:	b15b      	cbz	r3, 8020ecc <__smakebuf_r+0x74>
 8020eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020eb8:	4630      	mov	r0, r6
 8020eba:	f000 ff57 	bl	8021d6c <_isatty_r>
 8020ebe:	b128      	cbz	r0, 8020ecc <__smakebuf_r+0x74>
 8020ec0:	89a3      	ldrh	r3, [r4, #12]
 8020ec2:	f023 0303 	bic.w	r3, r3, #3
 8020ec6:	f043 0301 	orr.w	r3, r3, #1
 8020eca:	81a3      	strh	r3, [r4, #12]
 8020ecc:	89a3      	ldrh	r3, [r4, #12]
 8020ece:	431d      	orrs	r5, r3
 8020ed0:	81a5      	strh	r5, [r4, #12]
 8020ed2:	e7cd      	b.n	8020e70 <__smakebuf_r+0x18>
 8020ed4:	08020651 	.word	0x08020651

08020ed8 <malloc>:
 8020ed8:	4b02      	ldr	r3, [pc, #8]	; (8020ee4 <malloc+0xc>)
 8020eda:	4601      	mov	r1, r0
 8020edc:	6818      	ldr	r0, [r3, #0]
 8020ede:	f000 bc89 	b.w	80217f4 <_malloc_r>
 8020ee2:	bf00      	nop
 8020ee4:	200000e0 	.word	0x200000e0

08020ee8 <__ascii_mbtowc>:
 8020ee8:	b082      	sub	sp, #8
 8020eea:	b901      	cbnz	r1, 8020eee <__ascii_mbtowc+0x6>
 8020eec:	a901      	add	r1, sp, #4
 8020eee:	b142      	cbz	r2, 8020f02 <__ascii_mbtowc+0x1a>
 8020ef0:	b14b      	cbz	r3, 8020f06 <__ascii_mbtowc+0x1e>
 8020ef2:	7813      	ldrb	r3, [r2, #0]
 8020ef4:	600b      	str	r3, [r1, #0]
 8020ef6:	7812      	ldrb	r2, [r2, #0]
 8020ef8:	1c10      	adds	r0, r2, #0
 8020efa:	bf18      	it	ne
 8020efc:	2001      	movne	r0, #1
 8020efe:	b002      	add	sp, #8
 8020f00:	4770      	bx	lr
 8020f02:	4610      	mov	r0, r2
 8020f04:	e7fb      	b.n	8020efe <__ascii_mbtowc+0x16>
 8020f06:	f06f 0001 	mvn.w	r0, #1
 8020f0a:	e7f8      	b.n	8020efe <__ascii_mbtowc+0x16>

08020f0c <memmove>:
 8020f0c:	4288      	cmp	r0, r1
 8020f0e:	b510      	push	{r4, lr}
 8020f10:	eb01 0302 	add.w	r3, r1, r2
 8020f14:	d807      	bhi.n	8020f26 <memmove+0x1a>
 8020f16:	1e42      	subs	r2, r0, #1
 8020f18:	4299      	cmp	r1, r3
 8020f1a:	d00a      	beq.n	8020f32 <memmove+0x26>
 8020f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020f20:	f802 4f01 	strb.w	r4, [r2, #1]!
 8020f24:	e7f8      	b.n	8020f18 <memmove+0xc>
 8020f26:	4283      	cmp	r3, r0
 8020f28:	d9f5      	bls.n	8020f16 <memmove+0xa>
 8020f2a:	1881      	adds	r1, r0, r2
 8020f2c:	1ad2      	subs	r2, r2, r3
 8020f2e:	42d3      	cmn	r3, r2
 8020f30:	d100      	bne.n	8020f34 <memmove+0x28>
 8020f32:	bd10      	pop	{r4, pc}
 8020f34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020f38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8020f3c:	e7f7      	b.n	8020f2e <memmove+0x22>

08020f3e <_Balloc>:
 8020f3e:	b570      	push	{r4, r5, r6, lr}
 8020f40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020f42:	4604      	mov	r4, r0
 8020f44:	460e      	mov	r6, r1
 8020f46:	b93d      	cbnz	r5, 8020f58 <_Balloc+0x1a>
 8020f48:	2010      	movs	r0, #16
 8020f4a:	f7ff ffc5 	bl	8020ed8 <malloc>
 8020f4e:	6260      	str	r0, [r4, #36]	; 0x24
 8020f50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020f54:	6005      	str	r5, [r0, #0]
 8020f56:	60c5      	str	r5, [r0, #12]
 8020f58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8020f5a:	68eb      	ldr	r3, [r5, #12]
 8020f5c:	b183      	cbz	r3, 8020f80 <_Balloc+0x42>
 8020f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f60:	68db      	ldr	r3, [r3, #12]
 8020f62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8020f66:	b9b8      	cbnz	r0, 8020f98 <_Balloc+0x5a>
 8020f68:	2101      	movs	r1, #1
 8020f6a:	fa01 f506 	lsl.w	r5, r1, r6
 8020f6e:	1d6a      	adds	r2, r5, #5
 8020f70:	0092      	lsls	r2, r2, #2
 8020f72:	4620      	mov	r0, r4
 8020f74:	f000 fbe1 	bl	802173a <_calloc_r>
 8020f78:	b160      	cbz	r0, 8020f94 <_Balloc+0x56>
 8020f7a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8020f7e:	e00e      	b.n	8020f9e <_Balloc+0x60>
 8020f80:	2221      	movs	r2, #33	; 0x21
 8020f82:	2104      	movs	r1, #4
 8020f84:	4620      	mov	r0, r4
 8020f86:	f000 fbd8 	bl	802173a <_calloc_r>
 8020f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020f8c:	60e8      	str	r0, [r5, #12]
 8020f8e:	68db      	ldr	r3, [r3, #12]
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	d1e4      	bne.n	8020f5e <_Balloc+0x20>
 8020f94:	2000      	movs	r0, #0
 8020f96:	bd70      	pop	{r4, r5, r6, pc}
 8020f98:	6802      	ldr	r2, [r0, #0]
 8020f9a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8020f9e:	2300      	movs	r3, #0
 8020fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020fa4:	e7f7      	b.n	8020f96 <_Balloc+0x58>

08020fa6 <_Bfree>:
 8020fa6:	b570      	push	{r4, r5, r6, lr}
 8020fa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8020faa:	4606      	mov	r6, r0
 8020fac:	460d      	mov	r5, r1
 8020fae:	b93c      	cbnz	r4, 8020fc0 <_Bfree+0x1a>
 8020fb0:	2010      	movs	r0, #16
 8020fb2:	f7ff ff91 	bl	8020ed8 <malloc>
 8020fb6:	6270      	str	r0, [r6, #36]	; 0x24
 8020fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020fbc:	6004      	str	r4, [r0, #0]
 8020fbe:	60c4      	str	r4, [r0, #12]
 8020fc0:	b13d      	cbz	r5, 8020fd2 <_Bfree+0x2c>
 8020fc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8020fc4:	686a      	ldr	r2, [r5, #4]
 8020fc6:	68db      	ldr	r3, [r3, #12]
 8020fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020fcc:	6029      	str	r1, [r5, #0]
 8020fce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8020fd2:	bd70      	pop	{r4, r5, r6, pc}

08020fd4 <__multadd>:
 8020fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020fd8:	690d      	ldr	r5, [r1, #16]
 8020fda:	461f      	mov	r7, r3
 8020fdc:	4606      	mov	r6, r0
 8020fde:	460c      	mov	r4, r1
 8020fe0:	f101 0c14 	add.w	ip, r1, #20
 8020fe4:	2300      	movs	r3, #0
 8020fe6:	f8dc 0000 	ldr.w	r0, [ip]
 8020fea:	b281      	uxth	r1, r0
 8020fec:	fb02 7101 	mla	r1, r2, r1, r7
 8020ff0:	0c0f      	lsrs	r7, r1, #16
 8020ff2:	0c00      	lsrs	r0, r0, #16
 8020ff4:	fb02 7000 	mla	r0, r2, r0, r7
 8020ff8:	b289      	uxth	r1, r1
 8020ffa:	3301      	adds	r3, #1
 8020ffc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8021000:	429d      	cmp	r5, r3
 8021002:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8021006:	f84c 1b04 	str.w	r1, [ip], #4
 802100a:	dcec      	bgt.n	8020fe6 <__multadd+0x12>
 802100c:	b1d7      	cbz	r7, 8021044 <__multadd+0x70>
 802100e:	68a3      	ldr	r3, [r4, #8]
 8021010:	42ab      	cmp	r3, r5
 8021012:	dc12      	bgt.n	802103a <__multadd+0x66>
 8021014:	6861      	ldr	r1, [r4, #4]
 8021016:	4630      	mov	r0, r6
 8021018:	3101      	adds	r1, #1
 802101a:	f7ff ff90 	bl	8020f3e <_Balloc>
 802101e:	6922      	ldr	r2, [r4, #16]
 8021020:	3202      	adds	r2, #2
 8021022:	f104 010c 	add.w	r1, r4, #12
 8021026:	4680      	mov	r8, r0
 8021028:	0092      	lsls	r2, r2, #2
 802102a:	300c      	adds	r0, #12
 802102c:	f7fc fbae 	bl	801d78c <memcpy>
 8021030:	4621      	mov	r1, r4
 8021032:	4630      	mov	r0, r6
 8021034:	f7ff ffb7 	bl	8020fa6 <_Bfree>
 8021038:	4644      	mov	r4, r8
 802103a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802103e:	3501      	adds	r5, #1
 8021040:	615f      	str	r7, [r3, #20]
 8021042:	6125      	str	r5, [r4, #16]
 8021044:	4620      	mov	r0, r4
 8021046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802104a <__s2b>:
 802104a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802104e:	460c      	mov	r4, r1
 8021050:	4615      	mov	r5, r2
 8021052:	461f      	mov	r7, r3
 8021054:	2209      	movs	r2, #9
 8021056:	3308      	adds	r3, #8
 8021058:	4606      	mov	r6, r0
 802105a:	fb93 f3f2 	sdiv	r3, r3, r2
 802105e:	2100      	movs	r1, #0
 8021060:	2201      	movs	r2, #1
 8021062:	429a      	cmp	r2, r3
 8021064:	db20      	blt.n	80210a8 <__s2b+0x5e>
 8021066:	4630      	mov	r0, r6
 8021068:	f7ff ff69 	bl	8020f3e <_Balloc>
 802106c:	9b08      	ldr	r3, [sp, #32]
 802106e:	6143      	str	r3, [r0, #20]
 8021070:	2d09      	cmp	r5, #9
 8021072:	f04f 0301 	mov.w	r3, #1
 8021076:	6103      	str	r3, [r0, #16]
 8021078:	dd19      	ble.n	80210ae <__s2b+0x64>
 802107a:	f104 0809 	add.w	r8, r4, #9
 802107e:	46c1      	mov	r9, r8
 8021080:	442c      	add	r4, r5
 8021082:	f819 3b01 	ldrb.w	r3, [r9], #1
 8021086:	4601      	mov	r1, r0
 8021088:	3b30      	subs	r3, #48	; 0x30
 802108a:	220a      	movs	r2, #10
 802108c:	4630      	mov	r0, r6
 802108e:	f7ff ffa1 	bl	8020fd4 <__multadd>
 8021092:	45a1      	cmp	r9, r4
 8021094:	d1f5      	bne.n	8021082 <__s2b+0x38>
 8021096:	eb08 0405 	add.w	r4, r8, r5
 802109a:	3c08      	subs	r4, #8
 802109c:	1b2d      	subs	r5, r5, r4
 802109e:	1963      	adds	r3, r4, r5
 80210a0:	42bb      	cmp	r3, r7
 80210a2:	db07      	blt.n	80210b4 <__s2b+0x6a>
 80210a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80210a8:	0052      	lsls	r2, r2, #1
 80210aa:	3101      	adds	r1, #1
 80210ac:	e7d9      	b.n	8021062 <__s2b+0x18>
 80210ae:	340a      	adds	r4, #10
 80210b0:	2509      	movs	r5, #9
 80210b2:	e7f3      	b.n	802109c <__s2b+0x52>
 80210b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80210b8:	4601      	mov	r1, r0
 80210ba:	3b30      	subs	r3, #48	; 0x30
 80210bc:	220a      	movs	r2, #10
 80210be:	4630      	mov	r0, r6
 80210c0:	f7ff ff88 	bl	8020fd4 <__multadd>
 80210c4:	e7eb      	b.n	802109e <__s2b+0x54>

080210c6 <__hi0bits>:
 80210c6:	0c02      	lsrs	r2, r0, #16
 80210c8:	0412      	lsls	r2, r2, #16
 80210ca:	4603      	mov	r3, r0
 80210cc:	b9b2      	cbnz	r2, 80210fc <__hi0bits+0x36>
 80210ce:	0403      	lsls	r3, r0, #16
 80210d0:	2010      	movs	r0, #16
 80210d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80210d6:	bf04      	itt	eq
 80210d8:	021b      	lsleq	r3, r3, #8
 80210da:	3008      	addeq	r0, #8
 80210dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80210e0:	bf04      	itt	eq
 80210e2:	011b      	lsleq	r3, r3, #4
 80210e4:	3004      	addeq	r0, #4
 80210e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80210ea:	bf04      	itt	eq
 80210ec:	009b      	lsleq	r3, r3, #2
 80210ee:	3002      	addeq	r0, #2
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	db06      	blt.n	8021102 <__hi0bits+0x3c>
 80210f4:	005b      	lsls	r3, r3, #1
 80210f6:	d503      	bpl.n	8021100 <__hi0bits+0x3a>
 80210f8:	3001      	adds	r0, #1
 80210fa:	4770      	bx	lr
 80210fc:	2000      	movs	r0, #0
 80210fe:	e7e8      	b.n	80210d2 <__hi0bits+0xc>
 8021100:	2020      	movs	r0, #32
 8021102:	4770      	bx	lr

08021104 <__lo0bits>:
 8021104:	6803      	ldr	r3, [r0, #0]
 8021106:	f013 0207 	ands.w	r2, r3, #7
 802110a:	4601      	mov	r1, r0
 802110c:	d00b      	beq.n	8021126 <__lo0bits+0x22>
 802110e:	07da      	lsls	r2, r3, #31
 8021110:	d423      	bmi.n	802115a <__lo0bits+0x56>
 8021112:	0798      	lsls	r0, r3, #30
 8021114:	bf49      	itett	mi
 8021116:	085b      	lsrmi	r3, r3, #1
 8021118:	089b      	lsrpl	r3, r3, #2
 802111a:	2001      	movmi	r0, #1
 802111c:	600b      	strmi	r3, [r1, #0]
 802111e:	bf5c      	itt	pl
 8021120:	600b      	strpl	r3, [r1, #0]
 8021122:	2002      	movpl	r0, #2
 8021124:	4770      	bx	lr
 8021126:	b298      	uxth	r0, r3
 8021128:	b9a8      	cbnz	r0, 8021156 <__lo0bits+0x52>
 802112a:	0c1b      	lsrs	r3, r3, #16
 802112c:	2010      	movs	r0, #16
 802112e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021132:	bf04      	itt	eq
 8021134:	0a1b      	lsreq	r3, r3, #8
 8021136:	3008      	addeq	r0, #8
 8021138:	071a      	lsls	r2, r3, #28
 802113a:	bf04      	itt	eq
 802113c:	091b      	lsreq	r3, r3, #4
 802113e:	3004      	addeq	r0, #4
 8021140:	079a      	lsls	r2, r3, #30
 8021142:	bf04      	itt	eq
 8021144:	089b      	lsreq	r3, r3, #2
 8021146:	3002      	addeq	r0, #2
 8021148:	07da      	lsls	r2, r3, #31
 802114a:	d402      	bmi.n	8021152 <__lo0bits+0x4e>
 802114c:	085b      	lsrs	r3, r3, #1
 802114e:	d006      	beq.n	802115e <__lo0bits+0x5a>
 8021150:	3001      	adds	r0, #1
 8021152:	600b      	str	r3, [r1, #0]
 8021154:	4770      	bx	lr
 8021156:	4610      	mov	r0, r2
 8021158:	e7e9      	b.n	802112e <__lo0bits+0x2a>
 802115a:	2000      	movs	r0, #0
 802115c:	4770      	bx	lr
 802115e:	2020      	movs	r0, #32
 8021160:	4770      	bx	lr

08021162 <__i2b>:
 8021162:	b510      	push	{r4, lr}
 8021164:	460c      	mov	r4, r1
 8021166:	2101      	movs	r1, #1
 8021168:	f7ff fee9 	bl	8020f3e <_Balloc>
 802116c:	2201      	movs	r2, #1
 802116e:	6144      	str	r4, [r0, #20]
 8021170:	6102      	str	r2, [r0, #16]
 8021172:	bd10      	pop	{r4, pc}

08021174 <__multiply>:
 8021174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021178:	4614      	mov	r4, r2
 802117a:	690a      	ldr	r2, [r1, #16]
 802117c:	6923      	ldr	r3, [r4, #16]
 802117e:	429a      	cmp	r2, r3
 8021180:	bfb8      	it	lt
 8021182:	460b      	movlt	r3, r1
 8021184:	4688      	mov	r8, r1
 8021186:	bfbc      	itt	lt
 8021188:	46a0      	movlt	r8, r4
 802118a:	461c      	movlt	r4, r3
 802118c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021190:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021194:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021198:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802119c:	eb07 0609 	add.w	r6, r7, r9
 80211a0:	42b3      	cmp	r3, r6
 80211a2:	bfb8      	it	lt
 80211a4:	3101      	addlt	r1, #1
 80211a6:	f7ff feca 	bl	8020f3e <_Balloc>
 80211aa:	f100 0514 	add.w	r5, r0, #20
 80211ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80211b2:	462b      	mov	r3, r5
 80211b4:	2200      	movs	r2, #0
 80211b6:	4573      	cmp	r3, lr
 80211b8:	d316      	bcc.n	80211e8 <__multiply+0x74>
 80211ba:	f104 0214 	add.w	r2, r4, #20
 80211be:	f108 0114 	add.w	r1, r8, #20
 80211c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80211c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80211ca:	9300      	str	r3, [sp, #0]
 80211cc:	9b00      	ldr	r3, [sp, #0]
 80211ce:	9201      	str	r2, [sp, #4]
 80211d0:	4293      	cmp	r3, r2
 80211d2:	d80c      	bhi.n	80211ee <__multiply+0x7a>
 80211d4:	2e00      	cmp	r6, #0
 80211d6:	dd03      	ble.n	80211e0 <__multiply+0x6c>
 80211d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80211dc:	2b00      	cmp	r3, #0
 80211de:	d05d      	beq.n	802129c <__multiply+0x128>
 80211e0:	6106      	str	r6, [r0, #16]
 80211e2:	b003      	add	sp, #12
 80211e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211e8:	f843 2b04 	str.w	r2, [r3], #4
 80211ec:	e7e3      	b.n	80211b6 <__multiply+0x42>
 80211ee:	f8b2 b000 	ldrh.w	fp, [r2]
 80211f2:	f1bb 0f00 	cmp.w	fp, #0
 80211f6:	d023      	beq.n	8021240 <__multiply+0xcc>
 80211f8:	4689      	mov	r9, r1
 80211fa:	46ac      	mov	ip, r5
 80211fc:	f04f 0800 	mov.w	r8, #0
 8021200:	f859 4b04 	ldr.w	r4, [r9], #4
 8021204:	f8dc a000 	ldr.w	sl, [ip]
 8021208:	b2a3      	uxth	r3, r4
 802120a:	fa1f fa8a 	uxth.w	sl, sl
 802120e:	fb0b a303 	mla	r3, fp, r3, sl
 8021212:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021216:	f8dc 4000 	ldr.w	r4, [ip]
 802121a:	4443      	add	r3, r8
 802121c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8021220:	fb0b 840a 	mla	r4, fp, sl, r8
 8021224:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8021228:	46e2      	mov	sl, ip
 802122a:	b29b      	uxth	r3, r3
 802122c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8021230:	454f      	cmp	r7, r9
 8021232:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8021236:	f84a 3b04 	str.w	r3, [sl], #4
 802123a:	d82b      	bhi.n	8021294 <__multiply+0x120>
 802123c:	f8cc 8004 	str.w	r8, [ip, #4]
 8021240:	9b01      	ldr	r3, [sp, #4]
 8021242:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8021246:	3204      	adds	r2, #4
 8021248:	f1ba 0f00 	cmp.w	sl, #0
 802124c:	d020      	beq.n	8021290 <__multiply+0x11c>
 802124e:	682b      	ldr	r3, [r5, #0]
 8021250:	4689      	mov	r9, r1
 8021252:	46a8      	mov	r8, r5
 8021254:	f04f 0b00 	mov.w	fp, #0
 8021258:	f8b9 c000 	ldrh.w	ip, [r9]
 802125c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8021260:	fb0a 440c 	mla	r4, sl, ip, r4
 8021264:	445c      	add	r4, fp
 8021266:	46c4      	mov	ip, r8
 8021268:	b29b      	uxth	r3, r3
 802126a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802126e:	f84c 3b04 	str.w	r3, [ip], #4
 8021272:	f859 3b04 	ldr.w	r3, [r9], #4
 8021276:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802127a:	0c1b      	lsrs	r3, r3, #16
 802127c:	fb0a b303 	mla	r3, sl, r3, fp
 8021280:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8021284:	454f      	cmp	r7, r9
 8021286:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802128a:	d805      	bhi.n	8021298 <__multiply+0x124>
 802128c:	f8c8 3004 	str.w	r3, [r8, #4]
 8021290:	3504      	adds	r5, #4
 8021292:	e79b      	b.n	80211cc <__multiply+0x58>
 8021294:	46d4      	mov	ip, sl
 8021296:	e7b3      	b.n	8021200 <__multiply+0x8c>
 8021298:	46e0      	mov	r8, ip
 802129a:	e7dd      	b.n	8021258 <__multiply+0xe4>
 802129c:	3e01      	subs	r6, #1
 802129e:	e799      	b.n	80211d4 <__multiply+0x60>

080212a0 <__pow5mult>:
 80212a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212a4:	4615      	mov	r5, r2
 80212a6:	f012 0203 	ands.w	r2, r2, #3
 80212aa:	4606      	mov	r6, r0
 80212ac:	460f      	mov	r7, r1
 80212ae:	d007      	beq.n	80212c0 <__pow5mult+0x20>
 80212b0:	3a01      	subs	r2, #1
 80212b2:	4c21      	ldr	r4, [pc, #132]	; (8021338 <__pow5mult+0x98>)
 80212b4:	2300      	movs	r3, #0
 80212b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80212ba:	f7ff fe8b 	bl	8020fd4 <__multadd>
 80212be:	4607      	mov	r7, r0
 80212c0:	10ad      	asrs	r5, r5, #2
 80212c2:	d035      	beq.n	8021330 <__pow5mult+0x90>
 80212c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80212c6:	b93c      	cbnz	r4, 80212d8 <__pow5mult+0x38>
 80212c8:	2010      	movs	r0, #16
 80212ca:	f7ff fe05 	bl	8020ed8 <malloc>
 80212ce:	6270      	str	r0, [r6, #36]	; 0x24
 80212d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80212d4:	6004      	str	r4, [r0, #0]
 80212d6:	60c4      	str	r4, [r0, #12]
 80212d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80212dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80212e0:	b94c      	cbnz	r4, 80212f6 <__pow5mult+0x56>
 80212e2:	f240 2171 	movw	r1, #625	; 0x271
 80212e6:	4630      	mov	r0, r6
 80212e8:	f7ff ff3b 	bl	8021162 <__i2b>
 80212ec:	2300      	movs	r3, #0
 80212ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80212f2:	4604      	mov	r4, r0
 80212f4:	6003      	str	r3, [r0, #0]
 80212f6:	f04f 0800 	mov.w	r8, #0
 80212fa:	07eb      	lsls	r3, r5, #31
 80212fc:	d50a      	bpl.n	8021314 <__pow5mult+0x74>
 80212fe:	4639      	mov	r1, r7
 8021300:	4622      	mov	r2, r4
 8021302:	4630      	mov	r0, r6
 8021304:	f7ff ff36 	bl	8021174 <__multiply>
 8021308:	4639      	mov	r1, r7
 802130a:	4681      	mov	r9, r0
 802130c:	4630      	mov	r0, r6
 802130e:	f7ff fe4a 	bl	8020fa6 <_Bfree>
 8021312:	464f      	mov	r7, r9
 8021314:	106d      	asrs	r5, r5, #1
 8021316:	d00b      	beq.n	8021330 <__pow5mult+0x90>
 8021318:	6820      	ldr	r0, [r4, #0]
 802131a:	b938      	cbnz	r0, 802132c <__pow5mult+0x8c>
 802131c:	4622      	mov	r2, r4
 802131e:	4621      	mov	r1, r4
 8021320:	4630      	mov	r0, r6
 8021322:	f7ff ff27 	bl	8021174 <__multiply>
 8021326:	6020      	str	r0, [r4, #0]
 8021328:	f8c0 8000 	str.w	r8, [r0]
 802132c:	4604      	mov	r4, r0
 802132e:	e7e4      	b.n	80212fa <__pow5mult+0x5a>
 8021330:	4638      	mov	r0, r7
 8021332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021336:	bf00      	nop
 8021338:	08022d58 	.word	0x08022d58

0802133c <__lshift>:
 802133c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021340:	460c      	mov	r4, r1
 8021342:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021346:	6923      	ldr	r3, [r4, #16]
 8021348:	6849      	ldr	r1, [r1, #4]
 802134a:	eb0a 0903 	add.w	r9, sl, r3
 802134e:	68a3      	ldr	r3, [r4, #8]
 8021350:	4607      	mov	r7, r0
 8021352:	4616      	mov	r6, r2
 8021354:	f109 0501 	add.w	r5, r9, #1
 8021358:	42ab      	cmp	r3, r5
 802135a:	db32      	blt.n	80213c2 <__lshift+0x86>
 802135c:	4638      	mov	r0, r7
 802135e:	f7ff fdee 	bl	8020f3e <_Balloc>
 8021362:	2300      	movs	r3, #0
 8021364:	4680      	mov	r8, r0
 8021366:	f100 0114 	add.w	r1, r0, #20
 802136a:	461a      	mov	r2, r3
 802136c:	4553      	cmp	r3, sl
 802136e:	db2b      	blt.n	80213c8 <__lshift+0x8c>
 8021370:	6920      	ldr	r0, [r4, #16]
 8021372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021376:	f104 0314 	add.w	r3, r4, #20
 802137a:	f016 021f 	ands.w	r2, r6, #31
 802137e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021382:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021386:	d025      	beq.n	80213d4 <__lshift+0x98>
 8021388:	f1c2 0e20 	rsb	lr, r2, #32
 802138c:	2000      	movs	r0, #0
 802138e:	681e      	ldr	r6, [r3, #0]
 8021390:	468a      	mov	sl, r1
 8021392:	4096      	lsls	r6, r2
 8021394:	4330      	orrs	r0, r6
 8021396:	f84a 0b04 	str.w	r0, [sl], #4
 802139a:	f853 0b04 	ldr.w	r0, [r3], #4
 802139e:	459c      	cmp	ip, r3
 80213a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80213a4:	d814      	bhi.n	80213d0 <__lshift+0x94>
 80213a6:	6048      	str	r0, [r1, #4]
 80213a8:	b108      	cbz	r0, 80213ae <__lshift+0x72>
 80213aa:	f109 0502 	add.w	r5, r9, #2
 80213ae:	3d01      	subs	r5, #1
 80213b0:	4638      	mov	r0, r7
 80213b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80213b6:	4621      	mov	r1, r4
 80213b8:	f7ff fdf5 	bl	8020fa6 <_Bfree>
 80213bc:	4640      	mov	r0, r8
 80213be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213c2:	3101      	adds	r1, #1
 80213c4:	005b      	lsls	r3, r3, #1
 80213c6:	e7c7      	b.n	8021358 <__lshift+0x1c>
 80213c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80213cc:	3301      	adds	r3, #1
 80213ce:	e7cd      	b.n	802136c <__lshift+0x30>
 80213d0:	4651      	mov	r1, sl
 80213d2:	e7dc      	b.n	802138e <__lshift+0x52>
 80213d4:	3904      	subs	r1, #4
 80213d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80213da:	f841 2f04 	str.w	r2, [r1, #4]!
 80213de:	459c      	cmp	ip, r3
 80213e0:	d8f9      	bhi.n	80213d6 <__lshift+0x9a>
 80213e2:	e7e4      	b.n	80213ae <__lshift+0x72>

080213e4 <__mcmp>:
 80213e4:	6903      	ldr	r3, [r0, #16]
 80213e6:	690a      	ldr	r2, [r1, #16]
 80213e8:	1a9b      	subs	r3, r3, r2
 80213ea:	b530      	push	{r4, r5, lr}
 80213ec:	d10c      	bne.n	8021408 <__mcmp+0x24>
 80213ee:	0092      	lsls	r2, r2, #2
 80213f0:	3014      	adds	r0, #20
 80213f2:	3114      	adds	r1, #20
 80213f4:	1884      	adds	r4, r0, r2
 80213f6:	4411      	add	r1, r2
 80213f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80213fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8021400:	4295      	cmp	r5, r2
 8021402:	d003      	beq.n	802140c <__mcmp+0x28>
 8021404:	d305      	bcc.n	8021412 <__mcmp+0x2e>
 8021406:	2301      	movs	r3, #1
 8021408:	4618      	mov	r0, r3
 802140a:	bd30      	pop	{r4, r5, pc}
 802140c:	42a0      	cmp	r0, r4
 802140e:	d3f3      	bcc.n	80213f8 <__mcmp+0x14>
 8021410:	e7fa      	b.n	8021408 <__mcmp+0x24>
 8021412:	f04f 33ff 	mov.w	r3, #4294967295
 8021416:	e7f7      	b.n	8021408 <__mcmp+0x24>

08021418 <__mdiff>:
 8021418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802141c:	460d      	mov	r5, r1
 802141e:	4607      	mov	r7, r0
 8021420:	4611      	mov	r1, r2
 8021422:	4628      	mov	r0, r5
 8021424:	4614      	mov	r4, r2
 8021426:	f7ff ffdd 	bl	80213e4 <__mcmp>
 802142a:	1e06      	subs	r6, r0, #0
 802142c:	d108      	bne.n	8021440 <__mdiff+0x28>
 802142e:	4631      	mov	r1, r6
 8021430:	4638      	mov	r0, r7
 8021432:	f7ff fd84 	bl	8020f3e <_Balloc>
 8021436:	2301      	movs	r3, #1
 8021438:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802143c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021440:	bfa4      	itt	ge
 8021442:	4623      	movge	r3, r4
 8021444:	462c      	movge	r4, r5
 8021446:	4638      	mov	r0, r7
 8021448:	6861      	ldr	r1, [r4, #4]
 802144a:	bfa6      	itte	ge
 802144c:	461d      	movge	r5, r3
 802144e:	2600      	movge	r6, #0
 8021450:	2601      	movlt	r6, #1
 8021452:	f7ff fd74 	bl	8020f3e <_Balloc>
 8021456:	692b      	ldr	r3, [r5, #16]
 8021458:	60c6      	str	r6, [r0, #12]
 802145a:	6926      	ldr	r6, [r4, #16]
 802145c:	f105 0914 	add.w	r9, r5, #20
 8021460:	f104 0214 	add.w	r2, r4, #20
 8021464:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8021468:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802146c:	f100 0514 	add.w	r5, r0, #20
 8021470:	f04f 0e00 	mov.w	lr, #0
 8021474:	f852 ab04 	ldr.w	sl, [r2], #4
 8021478:	f859 4b04 	ldr.w	r4, [r9], #4
 802147c:	fa1e f18a 	uxtah	r1, lr, sl
 8021480:	b2a3      	uxth	r3, r4
 8021482:	1ac9      	subs	r1, r1, r3
 8021484:	0c23      	lsrs	r3, r4, #16
 8021486:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802148a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802148e:	b289      	uxth	r1, r1
 8021490:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8021494:	45c8      	cmp	r8, r9
 8021496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802149a:	4694      	mov	ip, r2
 802149c:	f845 3b04 	str.w	r3, [r5], #4
 80214a0:	d8e8      	bhi.n	8021474 <__mdiff+0x5c>
 80214a2:	45bc      	cmp	ip, r7
 80214a4:	d304      	bcc.n	80214b0 <__mdiff+0x98>
 80214a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80214aa:	b183      	cbz	r3, 80214ce <__mdiff+0xb6>
 80214ac:	6106      	str	r6, [r0, #16]
 80214ae:	e7c5      	b.n	802143c <__mdiff+0x24>
 80214b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80214b4:	fa1e f381 	uxtah	r3, lr, r1
 80214b8:	141a      	asrs	r2, r3, #16
 80214ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80214be:	b29b      	uxth	r3, r3
 80214c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80214c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80214c8:	f845 3b04 	str.w	r3, [r5], #4
 80214cc:	e7e9      	b.n	80214a2 <__mdiff+0x8a>
 80214ce:	3e01      	subs	r6, #1
 80214d0:	e7e9      	b.n	80214a6 <__mdiff+0x8e>
	...

080214d4 <__ulp>:
 80214d4:	4b12      	ldr	r3, [pc, #72]	; (8021520 <__ulp+0x4c>)
 80214d6:	ee10 2a90 	vmov	r2, s1
 80214da:	401a      	ands	r2, r3
 80214dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	dd04      	ble.n	80214ee <__ulp+0x1a>
 80214e4:	2000      	movs	r0, #0
 80214e6:	4619      	mov	r1, r3
 80214e8:	ec41 0b10 	vmov	d0, r0, r1
 80214ec:	4770      	bx	lr
 80214ee:	425b      	negs	r3, r3
 80214f0:	151b      	asrs	r3, r3, #20
 80214f2:	2b13      	cmp	r3, #19
 80214f4:	f04f 0000 	mov.w	r0, #0
 80214f8:	f04f 0100 	mov.w	r1, #0
 80214fc:	dc04      	bgt.n	8021508 <__ulp+0x34>
 80214fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8021502:	fa42 f103 	asr.w	r1, r2, r3
 8021506:	e7ef      	b.n	80214e8 <__ulp+0x14>
 8021508:	3b14      	subs	r3, #20
 802150a:	2b1e      	cmp	r3, #30
 802150c:	f04f 0201 	mov.w	r2, #1
 8021510:	bfda      	itte	le
 8021512:	f1c3 031f 	rsble	r3, r3, #31
 8021516:	fa02 f303 	lslle.w	r3, r2, r3
 802151a:	4613      	movgt	r3, r2
 802151c:	4618      	mov	r0, r3
 802151e:	e7e3      	b.n	80214e8 <__ulp+0x14>
 8021520:	7ff00000 	.word	0x7ff00000

08021524 <__b2d>:
 8021524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021526:	6905      	ldr	r5, [r0, #16]
 8021528:	f100 0714 	add.w	r7, r0, #20
 802152c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8021530:	1f2e      	subs	r6, r5, #4
 8021532:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8021536:	4620      	mov	r0, r4
 8021538:	f7ff fdc5 	bl	80210c6 <__hi0bits>
 802153c:	f1c0 0320 	rsb	r3, r0, #32
 8021540:	280a      	cmp	r0, #10
 8021542:	600b      	str	r3, [r1, #0]
 8021544:	f8df c074 	ldr.w	ip, [pc, #116]	; 80215bc <__b2d+0x98>
 8021548:	dc14      	bgt.n	8021574 <__b2d+0x50>
 802154a:	f1c0 0e0b 	rsb	lr, r0, #11
 802154e:	fa24 f10e 	lsr.w	r1, r4, lr
 8021552:	42b7      	cmp	r7, r6
 8021554:	ea41 030c 	orr.w	r3, r1, ip
 8021558:	bf34      	ite	cc
 802155a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802155e:	2100      	movcs	r1, #0
 8021560:	3015      	adds	r0, #21
 8021562:	fa04 f000 	lsl.w	r0, r4, r0
 8021566:	fa21 f10e 	lsr.w	r1, r1, lr
 802156a:	ea40 0201 	orr.w	r2, r0, r1
 802156e:	ec43 2b10 	vmov	d0, r2, r3
 8021572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021574:	42b7      	cmp	r7, r6
 8021576:	bf3a      	itte	cc
 8021578:	f1a5 0608 	subcc.w	r6, r5, #8
 802157c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021580:	2100      	movcs	r1, #0
 8021582:	380b      	subs	r0, #11
 8021584:	d015      	beq.n	80215b2 <__b2d+0x8e>
 8021586:	4084      	lsls	r4, r0
 8021588:	f1c0 0520 	rsb	r5, r0, #32
 802158c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8021590:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8021594:	42be      	cmp	r6, r7
 8021596:	fa21 fc05 	lsr.w	ip, r1, r5
 802159a:	ea44 030c 	orr.w	r3, r4, ip
 802159e:	bf8c      	ite	hi
 80215a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80215a4:	2400      	movls	r4, #0
 80215a6:	fa01 f000 	lsl.w	r0, r1, r0
 80215aa:	40ec      	lsrs	r4, r5
 80215ac:	ea40 0204 	orr.w	r2, r0, r4
 80215b0:	e7dd      	b.n	802156e <__b2d+0x4a>
 80215b2:	ea44 030c 	orr.w	r3, r4, ip
 80215b6:	460a      	mov	r2, r1
 80215b8:	e7d9      	b.n	802156e <__b2d+0x4a>
 80215ba:	bf00      	nop
 80215bc:	3ff00000 	.word	0x3ff00000

080215c0 <__d2b>:
 80215c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80215c4:	460e      	mov	r6, r1
 80215c6:	2101      	movs	r1, #1
 80215c8:	ec59 8b10 	vmov	r8, r9, d0
 80215cc:	4615      	mov	r5, r2
 80215ce:	f7ff fcb6 	bl	8020f3e <_Balloc>
 80215d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80215d6:	4607      	mov	r7, r0
 80215d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80215dc:	bb34      	cbnz	r4, 802162c <__d2b+0x6c>
 80215de:	9301      	str	r3, [sp, #4]
 80215e0:	f1b8 0300 	subs.w	r3, r8, #0
 80215e4:	d027      	beq.n	8021636 <__d2b+0x76>
 80215e6:	a802      	add	r0, sp, #8
 80215e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80215ec:	f7ff fd8a 	bl	8021104 <__lo0bits>
 80215f0:	9900      	ldr	r1, [sp, #0]
 80215f2:	b1f0      	cbz	r0, 8021632 <__d2b+0x72>
 80215f4:	9a01      	ldr	r2, [sp, #4]
 80215f6:	f1c0 0320 	rsb	r3, r0, #32
 80215fa:	fa02 f303 	lsl.w	r3, r2, r3
 80215fe:	430b      	orrs	r3, r1
 8021600:	40c2      	lsrs	r2, r0
 8021602:	617b      	str	r3, [r7, #20]
 8021604:	9201      	str	r2, [sp, #4]
 8021606:	9b01      	ldr	r3, [sp, #4]
 8021608:	61bb      	str	r3, [r7, #24]
 802160a:	2b00      	cmp	r3, #0
 802160c:	bf14      	ite	ne
 802160e:	2102      	movne	r1, #2
 8021610:	2101      	moveq	r1, #1
 8021612:	6139      	str	r1, [r7, #16]
 8021614:	b1c4      	cbz	r4, 8021648 <__d2b+0x88>
 8021616:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802161a:	4404      	add	r4, r0
 802161c:	6034      	str	r4, [r6, #0]
 802161e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021622:	6028      	str	r0, [r5, #0]
 8021624:	4638      	mov	r0, r7
 8021626:	b003      	add	sp, #12
 8021628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802162c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021630:	e7d5      	b.n	80215de <__d2b+0x1e>
 8021632:	6179      	str	r1, [r7, #20]
 8021634:	e7e7      	b.n	8021606 <__d2b+0x46>
 8021636:	a801      	add	r0, sp, #4
 8021638:	f7ff fd64 	bl	8021104 <__lo0bits>
 802163c:	9b01      	ldr	r3, [sp, #4]
 802163e:	617b      	str	r3, [r7, #20]
 8021640:	2101      	movs	r1, #1
 8021642:	6139      	str	r1, [r7, #16]
 8021644:	3020      	adds	r0, #32
 8021646:	e7e5      	b.n	8021614 <__d2b+0x54>
 8021648:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802164c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021650:	6030      	str	r0, [r6, #0]
 8021652:	6918      	ldr	r0, [r3, #16]
 8021654:	f7ff fd37 	bl	80210c6 <__hi0bits>
 8021658:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802165c:	e7e1      	b.n	8021622 <__d2b+0x62>

0802165e <__ratio>:
 802165e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021662:	4688      	mov	r8, r1
 8021664:	4669      	mov	r1, sp
 8021666:	4681      	mov	r9, r0
 8021668:	f7ff ff5c 	bl	8021524 <__b2d>
 802166c:	a901      	add	r1, sp, #4
 802166e:	4640      	mov	r0, r8
 8021670:	ec57 6b10 	vmov	r6, r7, d0
 8021674:	f7ff ff56 	bl	8021524 <__b2d>
 8021678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802167c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021680:	eba3 0c02 	sub.w	ip, r3, r2
 8021684:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021688:	1a9b      	subs	r3, r3, r2
 802168a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802168e:	ec5b ab10 	vmov	sl, fp, d0
 8021692:	2b00      	cmp	r3, #0
 8021694:	bfce      	itee	gt
 8021696:	463a      	movgt	r2, r7
 8021698:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802169c:	465a      	movle	r2, fp
 802169e:	4659      	mov	r1, fp
 80216a0:	463d      	mov	r5, r7
 80216a2:	bfd4      	ite	le
 80216a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80216a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80216ac:	4630      	mov	r0, r6
 80216ae:	ee10 2a10 	vmov	r2, s0
 80216b2:	460b      	mov	r3, r1
 80216b4:	4629      	mov	r1, r5
 80216b6:	f7df f8d9 	bl	800086c <__aeabi_ddiv>
 80216ba:	ec41 0b10 	vmov	d0, r0, r1
 80216be:	b003      	add	sp, #12
 80216c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080216c4 <__copybits>:
 80216c4:	3901      	subs	r1, #1
 80216c6:	b510      	push	{r4, lr}
 80216c8:	1149      	asrs	r1, r1, #5
 80216ca:	6914      	ldr	r4, [r2, #16]
 80216cc:	3101      	adds	r1, #1
 80216ce:	f102 0314 	add.w	r3, r2, #20
 80216d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80216d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80216da:	42a3      	cmp	r3, r4
 80216dc:	4602      	mov	r2, r0
 80216de:	d303      	bcc.n	80216e8 <__copybits+0x24>
 80216e0:	2300      	movs	r3, #0
 80216e2:	428a      	cmp	r2, r1
 80216e4:	d305      	bcc.n	80216f2 <__copybits+0x2e>
 80216e6:	bd10      	pop	{r4, pc}
 80216e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80216ec:	f840 2b04 	str.w	r2, [r0], #4
 80216f0:	e7f3      	b.n	80216da <__copybits+0x16>
 80216f2:	f842 3b04 	str.w	r3, [r2], #4
 80216f6:	e7f4      	b.n	80216e2 <__copybits+0x1e>

080216f8 <__any_on>:
 80216f8:	f100 0214 	add.w	r2, r0, #20
 80216fc:	6900      	ldr	r0, [r0, #16]
 80216fe:	114b      	asrs	r3, r1, #5
 8021700:	4298      	cmp	r0, r3
 8021702:	b510      	push	{r4, lr}
 8021704:	db11      	blt.n	802172a <__any_on+0x32>
 8021706:	dd0a      	ble.n	802171e <__any_on+0x26>
 8021708:	f011 011f 	ands.w	r1, r1, #31
 802170c:	d007      	beq.n	802171e <__any_on+0x26>
 802170e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8021712:	fa24 f001 	lsr.w	r0, r4, r1
 8021716:	fa00 f101 	lsl.w	r1, r0, r1
 802171a:	428c      	cmp	r4, r1
 802171c:	d10b      	bne.n	8021736 <__any_on+0x3e>
 802171e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021722:	4293      	cmp	r3, r2
 8021724:	d803      	bhi.n	802172e <__any_on+0x36>
 8021726:	2000      	movs	r0, #0
 8021728:	bd10      	pop	{r4, pc}
 802172a:	4603      	mov	r3, r0
 802172c:	e7f7      	b.n	802171e <__any_on+0x26>
 802172e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8021732:	2900      	cmp	r1, #0
 8021734:	d0f5      	beq.n	8021722 <__any_on+0x2a>
 8021736:	2001      	movs	r0, #1
 8021738:	e7f6      	b.n	8021728 <__any_on+0x30>

0802173a <_calloc_r>:
 802173a:	b538      	push	{r3, r4, r5, lr}
 802173c:	fb02 f401 	mul.w	r4, r2, r1
 8021740:	4621      	mov	r1, r4
 8021742:	f000 f857 	bl	80217f4 <_malloc_r>
 8021746:	4605      	mov	r5, r0
 8021748:	b118      	cbz	r0, 8021752 <_calloc_r+0x18>
 802174a:	4622      	mov	r2, r4
 802174c:	2100      	movs	r1, #0
 802174e:	f7fc f828 	bl	801d7a2 <memset>
 8021752:	4628      	mov	r0, r5
 8021754:	bd38      	pop	{r3, r4, r5, pc}
	...

08021758 <_free_r>:
 8021758:	b538      	push	{r3, r4, r5, lr}
 802175a:	4605      	mov	r5, r0
 802175c:	2900      	cmp	r1, #0
 802175e:	d045      	beq.n	80217ec <_free_r+0x94>
 8021760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021764:	1f0c      	subs	r4, r1, #4
 8021766:	2b00      	cmp	r3, #0
 8021768:	bfb8      	it	lt
 802176a:	18e4      	addlt	r4, r4, r3
 802176c:	f000 fb20 	bl	8021db0 <__malloc_lock>
 8021770:	4a1f      	ldr	r2, [pc, #124]	; (80217f0 <_free_r+0x98>)
 8021772:	6813      	ldr	r3, [r2, #0]
 8021774:	4610      	mov	r0, r2
 8021776:	b933      	cbnz	r3, 8021786 <_free_r+0x2e>
 8021778:	6063      	str	r3, [r4, #4]
 802177a:	6014      	str	r4, [r2, #0]
 802177c:	4628      	mov	r0, r5
 802177e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021782:	f000 bb16 	b.w	8021db2 <__malloc_unlock>
 8021786:	42a3      	cmp	r3, r4
 8021788:	d90c      	bls.n	80217a4 <_free_r+0x4c>
 802178a:	6821      	ldr	r1, [r4, #0]
 802178c:	1862      	adds	r2, r4, r1
 802178e:	4293      	cmp	r3, r2
 8021790:	bf04      	itt	eq
 8021792:	681a      	ldreq	r2, [r3, #0]
 8021794:	685b      	ldreq	r3, [r3, #4]
 8021796:	6063      	str	r3, [r4, #4]
 8021798:	bf04      	itt	eq
 802179a:	1852      	addeq	r2, r2, r1
 802179c:	6022      	streq	r2, [r4, #0]
 802179e:	6004      	str	r4, [r0, #0]
 80217a0:	e7ec      	b.n	802177c <_free_r+0x24>
 80217a2:	4613      	mov	r3, r2
 80217a4:	685a      	ldr	r2, [r3, #4]
 80217a6:	b10a      	cbz	r2, 80217ac <_free_r+0x54>
 80217a8:	42a2      	cmp	r2, r4
 80217aa:	d9fa      	bls.n	80217a2 <_free_r+0x4a>
 80217ac:	6819      	ldr	r1, [r3, #0]
 80217ae:	1858      	adds	r0, r3, r1
 80217b0:	42a0      	cmp	r0, r4
 80217b2:	d10b      	bne.n	80217cc <_free_r+0x74>
 80217b4:	6820      	ldr	r0, [r4, #0]
 80217b6:	4401      	add	r1, r0
 80217b8:	1858      	adds	r0, r3, r1
 80217ba:	4282      	cmp	r2, r0
 80217bc:	6019      	str	r1, [r3, #0]
 80217be:	d1dd      	bne.n	802177c <_free_r+0x24>
 80217c0:	6810      	ldr	r0, [r2, #0]
 80217c2:	6852      	ldr	r2, [r2, #4]
 80217c4:	605a      	str	r2, [r3, #4]
 80217c6:	4401      	add	r1, r0
 80217c8:	6019      	str	r1, [r3, #0]
 80217ca:	e7d7      	b.n	802177c <_free_r+0x24>
 80217cc:	d902      	bls.n	80217d4 <_free_r+0x7c>
 80217ce:	230c      	movs	r3, #12
 80217d0:	602b      	str	r3, [r5, #0]
 80217d2:	e7d3      	b.n	802177c <_free_r+0x24>
 80217d4:	6820      	ldr	r0, [r4, #0]
 80217d6:	1821      	adds	r1, r4, r0
 80217d8:	428a      	cmp	r2, r1
 80217da:	bf04      	itt	eq
 80217dc:	6811      	ldreq	r1, [r2, #0]
 80217de:	6852      	ldreq	r2, [r2, #4]
 80217e0:	6062      	str	r2, [r4, #4]
 80217e2:	bf04      	itt	eq
 80217e4:	1809      	addeq	r1, r1, r0
 80217e6:	6021      	streq	r1, [r4, #0]
 80217e8:	605c      	str	r4, [r3, #4]
 80217ea:	e7c7      	b.n	802177c <_free_r+0x24>
 80217ec:	bd38      	pop	{r3, r4, r5, pc}
 80217ee:	bf00      	nop
 80217f0:	200054b0 	.word	0x200054b0

080217f4 <_malloc_r>:
 80217f4:	b570      	push	{r4, r5, r6, lr}
 80217f6:	1ccd      	adds	r5, r1, #3
 80217f8:	f025 0503 	bic.w	r5, r5, #3
 80217fc:	3508      	adds	r5, #8
 80217fe:	2d0c      	cmp	r5, #12
 8021800:	bf38      	it	cc
 8021802:	250c      	movcc	r5, #12
 8021804:	2d00      	cmp	r5, #0
 8021806:	4606      	mov	r6, r0
 8021808:	db01      	blt.n	802180e <_malloc_r+0x1a>
 802180a:	42a9      	cmp	r1, r5
 802180c:	d903      	bls.n	8021816 <_malloc_r+0x22>
 802180e:	230c      	movs	r3, #12
 8021810:	6033      	str	r3, [r6, #0]
 8021812:	2000      	movs	r0, #0
 8021814:	bd70      	pop	{r4, r5, r6, pc}
 8021816:	f000 facb 	bl	8021db0 <__malloc_lock>
 802181a:	4a21      	ldr	r2, [pc, #132]	; (80218a0 <_malloc_r+0xac>)
 802181c:	6814      	ldr	r4, [r2, #0]
 802181e:	4621      	mov	r1, r4
 8021820:	b991      	cbnz	r1, 8021848 <_malloc_r+0x54>
 8021822:	4c20      	ldr	r4, [pc, #128]	; (80218a4 <_malloc_r+0xb0>)
 8021824:	6823      	ldr	r3, [r4, #0]
 8021826:	b91b      	cbnz	r3, 8021830 <_malloc_r+0x3c>
 8021828:	4630      	mov	r0, r6
 802182a:	f000 f9b5 	bl	8021b98 <_sbrk_r>
 802182e:	6020      	str	r0, [r4, #0]
 8021830:	4629      	mov	r1, r5
 8021832:	4630      	mov	r0, r6
 8021834:	f000 f9b0 	bl	8021b98 <_sbrk_r>
 8021838:	1c43      	adds	r3, r0, #1
 802183a:	d124      	bne.n	8021886 <_malloc_r+0x92>
 802183c:	230c      	movs	r3, #12
 802183e:	6033      	str	r3, [r6, #0]
 8021840:	4630      	mov	r0, r6
 8021842:	f000 fab6 	bl	8021db2 <__malloc_unlock>
 8021846:	e7e4      	b.n	8021812 <_malloc_r+0x1e>
 8021848:	680b      	ldr	r3, [r1, #0]
 802184a:	1b5b      	subs	r3, r3, r5
 802184c:	d418      	bmi.n	8021880 <_malloc_r+0x8c>
 802184e:	2b0b      	cmp	r3, #11
 8021850:	d90f      	bls.n	8021872 <_malloc_r+0x7e>
 8021852:	600b      	str	r3, [r1, #0]
 8021854:	50cd      	str	r5, [r1, r3]
 8021856:	18cc      	adds	r4, r1, r3
 8021858:	4630      	mov	r0, r6
 802185a:	f000 faaa 	bl	8021db2 <__malloc_unlock>
 802185e:	f104 000b 	add.w	r0, r4, #11
 8021862:	1d23      	adds	r3, r4, #4
 8021864:	f020 0007 	bic.w	r0, r0, #7
 8021868:	1ac3      	subs	r3, r0, r3
 802186a:	d0d3      	beq.n	8021814 <_malloc_r+0x20>
 802186c:	425a      	negs	r2, r3
 802186e:	50e2      	str	r2, [r4, r3]
 8021870:	e7d0      	b.n	8021814 <_malloc_r+0x20>
 8021872:	428c      	cmp	r4, r1
 8021874:	684b      	ldr	r3, [r1, #4]
 8021876:	bf16      	itet	ne
 8021878:	6063      	strne	r3, [r4, #4]
 802187a:	6013      	streq	r3, [r2, #0]
 802187c:	460c      	movne	r4, r1
 802187e:	e7eb      	b.n	8021858 <_malloc_r+0x64>
 8021880:	460c      	mov	r4, r1
 8021882:	6849      	ldr	r1, [r1, #4]
 8021884:	e7cc      	b.n	8021820 <_malloc_r+0x2c>
 8021886:	1cc4      	adds	r4, r0, #3
 8021888:	f024 0403 	bic.w	r4, r4, #3
 802188c:	42a0      	cmp	r0, r4
 802188e:	d005      	beq.n	802189c <_malloc_r+0xa8>
 8021890:	1a21      	subs	r1, r4, r0
 8021892:	4630      	mov	r0, r6
 8021894:	f000 f980 	bl	8021b98 <_sbrk_r>
 8021898:	3001      	adds	r0, #1
 802189a:	d0cf      	beq.n	802183c <_malloc_r+0x48>
 802189c:	6025      	str	r5, [r4, #0]
 802189e:	e7db      	b.n	8021858 <_malloc_r+0x64>
 80218a0:	200054b0 	.word	0x200054b0
 80218a4:	200054b4 	.word	0x200054b4

080218a8 <_realloc_r>:
 80218a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80218aa:	4607      	mov	r7, r0
 80218ac:	4614      	mov	r4, r2
 80218ae:	460e      	mov	r6, r1
 80218b0:	b921      	cbnz	r1, 80218bc <_realloc_r+0x14>
 80218b2:	4611      	mov	r1, r2
 80218b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80218b8:	f7ff bf9c 	b.w	80217f4 <_malloc_r>
 80218bc:	b922      	cbnz	r2, 80218c8 <_realloc_r+0x20>
 80218be:	f7ff ff4b 	bl	8021758 <_free_r>
 80218c2:	4625      	mov	r5, r4
 80218c4:	4628      	mov	r0, r5
 80218c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80218c8:	f000 fa74 	bl	8021db4 <_malloc_usable_size_r>
 80218cc:	42a0      	cmp	r0, r4
 80218ce:	d20f      	bcs.n	80218f0 <_realloc_r+0x48>
 80218d0:	4621      	mov	r1, r4
 80218d2:	4638      	mov	r0, r7
 80218d4:	f7ff ff8e 	bl	80217f4 <_malloc_r>
 80218d8:	4605      	mov	r5, r0
 80218da:	2800      	cmp	r0, #0
 80218dc:	d0f2      	beq.n	80218c4 <_realloc_r+0x1c>
 80218de:	4631      	mov	r1, r6
 80218e0:	4622      	mov	r2, r4
 80218e2:	f7fb ff53 	bl	801d78c <memcpy>
 80218e6:	4631      	mov	r1, r6
 80218e8:	4638      	mov	r0, r7
 80218ea:	f7ff ff35 	bl	8021758 <_free_r>
 80218ee:	e7e9      	b.n	80218c4 <_realloc_r+0x1c>
 80218f0:	4635      	mov	r5, r6
 80218f2:	e7e7      	b.n	80218c4 <_realloc_r+0x1c>

080218f4 <__ssputs_r>:
 80218f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80218f8:	688e      	ldr	r6, [r1, #8]
 80218fa:	429e      	cmp	r6, r3
 80218fc:	4682      	mov	sl, r0
 80218fe:	460c      	mov	r4, r1
 8021900:	4690      	mov	r8, r2
 8021902:	4699      	mov	r9, r3
 8021904:	d837      	bhi.n	8021976 <__ssputs_r+0x82>
 8021906:	898a      	ldrh	r2, [r1, #12]
 8021908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802190c:	d031      	beq.n	8021972 <__ssputs_r+0x7e>
 802190e:	6825      	ldr	r5, [r4, #0]
 8021910:	6909      	ldr	r1, [r1, #16]
 8021912:	1a6f      	subs	r7, r5, r1
 8021914:	6965      	ldr	r5, [r4, #20]
 8021916:	2302      	movs	r3, #2
 8021918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802191c:	fb95 f5f3 	sdiv	r5, r5, r3
 8021920:	f109 0301 	add.w	r3, r9, #1
 8021924:	443b      	add	r3, r7
 8021926:	429d      	cmp	r5, r3
 8021928:	bf38      	it	cc
 802192a:	461d      	movcc	r5, r3
 802192c:	0553      	lsls	r3, r2, #21
 802192e:	d530      	bpl.n	8021992 <__ssputs_r+0x9e>
 8021930:	4629      	mov	r1, r5
 8021932:	f7ff ff5f 	bl	80217f4 <_malloc_r>
 8021936:	4606      	mov	r6, r0
 8021938:	b950      	cbnz	r0, 8021950 <__ssputs_r+0x5c>
 802193a:	230c      	movs	r3, #12
 802193c:	f8ca 3000 	str.w	r3, [sl]
 8021940:	89a3      	ldrh	r3, [r4, #12]
 8021942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021946:	81a3      	strh	r3, [r4, #12]
 8021948:	f04f 30ff 	mov.w	r0, #4294967295
 802194c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021950:	463a      	mov	r2, r7
 8021952:	6921      	ldr	r1, [r4, #16]
 8021954:	f7fb ff1a 	bl	801d78c <memcpy>
 8021958:	89a3      	ldrh	r3, [r4, #12]
 802195a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802195e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021962:	81a3      	strh	r3, [r4, #12]
 8021964:	6126      	str	r6, [r4, #16]
 8021966:	6165      	str	r5, [r4, #20]
 8021968:	443e      	add	r6, r7
 802196a:	1bed      	subs	r5, r5, r7
 802196c:	6026      	str	r6, [r4, #0]
 802196e:	60a5      	str	r5, [r4, #8]
 8021970:	464e      	mov	r6, r9
 8021972:	454e      	cmp	r6, r9
 8021974:	d900      	bls.n	8021978 <__ssputs_r+0x84>
 8021976:	464e      	mov	r6, r9
 8021978:	4632      	mov	r2, r6
 802197a:	4641      	mov	r1, r8
 802197c:	6820      	ldr	r0, [r4, #0]
 802197e:	f7ff fac5 	bl	8020f0c <memmove>
 8021982:	68a3      	ldr	r3, [r4, #8]
 8021984:	1b9b      	subs	r3, r3, r6
 8021986:	60a3      	str	r3, [r4, #8]
 8021988:	6823      	ldr	r3, [r4, #0]
 802198a:	441e      	add	r6, r3
 802198c:	6026      	str	r6, [r4, #0]
 802198e:	2000      	movs	r0, #0
 8021990:	e7dc      	b.n	802194c <__ssputs_r+0x58>
 8021992:	462a      	mov	r2, r5
 8021994:	f7ff ff88 	bl	80218a8 <_realloc_r>
 8021998:	4606      	mov	r6, r0
 802199a:	2800      	cmp	r0, #0
 802199c:	d1e2      	bne.n	8021964 <__ssputs_r+0x70>
 802199e:	6921      	ldr	r1, [r4, #16]
 80219a0:	4650      	mov	r0, sl
 80219a2:	f7ff fed9 	bl	8021758 <_free_r>
 80219a6:	e7c8      	b.n	802193a <__ssputs_r+0x46>

080219a8 <_svfiprintf_r>:
 80219a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219ac:	461d      	mov	r5, r3
 80219ae:	898b      	ldrh	r3, [r1, #12]
 80219b0:	061f      	lsls	r7, r3, #24
 80219b2:	b09d      	sub	sp, #116	; 0x74
 80219b4:	4680      	mov	r8, r0
 80219b6:	460c      	mov	r4, r1
 80219b8:	4616      	mov	r6, r2
 80219ba:	d50f      	bpl.n	80219dc <_svfiprintf_r+0x34>
 80219bc:	690b      	ldr	r3, [r1, #16]
 80219be:	b96b      	cbnz	r3, 80219dc <_svfiprintf_r+0x34>
 80219c0:	2140      	movs	r1, #64	; 0x40
 80219c2:	f7ff ff17 	bl	80217f4 <_malloc_r>
 80219c6:	6020      	str	r0, [r4, #0]
 80219c8:	6120      	str	r0, [r4, #16]
 80219ca:	b928      	cbnz	r0, 80219d8 <_svfiprintf_r+0x30>
 80219cc:	230c      	movs	r3, #12
 80219ce:	f8c8 3000 	str.w	r3, [r8]
 80219d2:	f04f 30ff 	mov.w	r0, #4294967295
 80219d6:	e0c8      	b.n	8021b6a <_svfiprintf_r+0x1c2>
 80219d8:	2340      	movs	r3, #64	; 0x40
 80219da:	6163      	str	r3, [r4, #20]
 80219dc:	2300      	movs	r3, #0
 80219de:	9309      	str	r3, [sp, #36]	; 0x24
 80219e0:	2320      	movs	r3, #32
 80219e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80219e6:	2330      	movs	r3, #48	; 0x30
 80219e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80219ec:	9503      	str	r5, [sp, #12]
 80219ee:	f04f 0b01 	mov.w	fp, #1
 80219f2:	4637      	mov	r7, r6
 80219f4:	463d      	mov	r5, r7
 80219f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80219fa:	b10b      	cbz	r3, 8021a00 <_svfiprintf_r+0x58>
 80219fc:	2b25      	cmp	r3, #37	; 0x25
 80219fe:	d13e      	bne.n	8021a7e <_svfiprintf_r+0xd6>
 8021a00:	ebb7 0a06 	subs.w	sl, r7, r6
 8021a04:	d00b      	beq.n	8021a1e <_svfiprintf_r+0x76>
 8021a06:	4653      	mov	r3, sl
 8021a08:	4632      	mov	r2, r6
 8021a0a:	4621      	mov	r1, r4
 8021a0c:	4640      	mov	r0, r8
 8021a0e:	f7ff ff71 	bl	80218f4 <__ssputs_r>
 8021a12:	3001      	adds	r0, #1
 8021a14:	f000 80a4 	beq.w	8021b60 <_svfiprintf_r+0x1b8>
 8021a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a1a:	4453      	add	r3, sl
 8021a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8021a1e:	783b      	ldrb	r3, [r7, #0]
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	f000 809d 	beq.w	8021b60 <_svfiprintf_r+0x1b8>
 8021a26:	2300      	movs	r3, #0
 8021a28:	f04f 32ff 	mov.w	r2, #4294967295
 8021a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021a30:	9304      	str	r3, [sp, #16]
 8021a32:	9307      	str	r3, [sp, #28]
 8021a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021a38:	931a      	str	r3, [sp, #104]	; 0x68
 8021a3a:	462f      	mov	r7, r5
 8021a3c:	2205      	movs	r2, #5
 8021a3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021a42:	4850      	ldr	r0, [pc, #320]	; (8021b84 <_svfiprintf_r+0x1dc>)
 8021a44:	f7de fbdc 	bl	8000200 <memchr>
 8021a48:	9b04      	ldr	r3, [sp, #16]
 8021a4a:	b9d0      	cbnz	r0, 8021a82 <_svfiprintf_r+0xda>
 8021a4c:	06d9      	lsls	r1, r3, #27
 8021a4e:	bf44      	itt	mi
 8021a50:	2220      	movmi	r2, #32
 8021a52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021a56:	071a      	lsls	r2, r3, #28
 8021a58:	bf44      	itt	mi
 8021a5a:	222b      	movmi	r2, #43	; 0x2b
 8021a5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021a60:	782a      	ldrb	r2, [r5, #0]
 8021a62:	2a2a      	cmp	r2, #42	; 0x2a
 8021a64:	d015      	beq.n	8021a92 <_svfiprintf_r+0xea>
 8021a66:	9a07      	ldr	r2, [sp, #28]
 8021a68:	462f      	mov	r7, r5
 8021a6a:	2000      	movs	r0, #0
 8021a6c:	250a      	movs	r5, #10
 8021a6e:	4639      	mov	r1, r7
 8021a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021a74:	3b30      	subs	r3, #48	; 0x30
 8021a76:	2b09      	cmp	r3, #9
 8021a78:	d94d      	bls.n	8021b16 <_svfiprintf_r+0x16e>
 8021a7a:	b1b8      	cbz	r0, 8021aac <_svfiprintf_r+0x104>
 8021a7c:	e00f      	b.n	8021a9e <_svfiprintf_r+0xf6>
 8021a7e:	462f      	mov	r7, r5
 8021a80:	e7b8      	b.n	80219f4 <_svfiprintf_r+0x4c>
 8021a82:	4a40      	ldr	r2, [pc, #256]	; (8021b84 <_svfiprintf_r+0x1dc>)
 8021a84:	1a80      	subs	r0, r0, r2
 8021a86:	fa0b f000 	lsl.w	r0, fp, r0
 8021a8a:	4318      	orrs	r0, r3
 8021a8c:	9004      	str	r0, [sp, #16]
 8021a8e:	463d      	mov	r5, r7
 8021a90:	e7d3      	b.n	8021a3a <_svfiprintf_r+0x92>
 8021a92:	9a03      	ldr	r2, [sp, #12]
 8021a94:	1d11      	adds	r1, r2, #4
 8021a96:	6812      	ldr	r2, [r2, #0]
 8021a98:	9103      	str	r1, [sp, #12]
 8021a9a:	2a00      	cmp	r2, #0
 8021a9c:	db01      	blt.n	8021aa2 <_svfiprintf_r+0xfa>
 8021a9e:	9207      	str	r2, [sp, #28]
 8021aa0:	e004      	b.n	8021aac <_svfiprintf_r+0x104>
 8021aa2:	4252      	negs	r2, r2
 8021aa4:	f043 0302 	orr.w	r3, r3, #2
 8021aa8:	9207      	str	r2, [sp, #28]
 8021aaa:	9304      	str	r3, [sp, #16]
 8021aac:	783b      	ldrb	r3, [r7, #0]
 8021aae:	2b2e      	cmp	r3, #46	; 0x2e
 8021ab0:	d10c      	bne.n	8021acc <_svfiprintf_r+0x124>
 8021ab2:	787b      	ldrb	r3, [r7, #1]
 8021ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8021ab6:	d133      	bne.n	8021b20 <_svfiprintf_r+0x178>
 8021ab8:	9b03      	ldr	r3, [sp, #12]
 8021aba:	1d1a      	adds	r2, r3, #4
 8021abc:	681b      	ldr	r3, [r3, #0]
 8021abe:	9203      	str	r2, [sp, #12]
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	bfb8      	it	lt
 8021ac4:	f04f 33ff 	movlt.w	r3, #4294967295
 8021ac8:	3702      	adds	r7, #2
 8021aca:	9305      	str	r3, [sp, #20]
 8021acc:	4d2e      	ldr	r5, [pc, #184]	; (8021b88 <_svfiprintf_r+0x1e0>)
 8021ace:	7839      	ldrb	r1, [r7, #0]
 8021ad0:	2203      	movs	r2, #3
 8021ad2:	4628      	mov	r0, r5
 8021ad4:	f7de fb94 	bl	8000200 <memchr>
 8021ad8:	b138      	cbz	r0, 8021aea <_svfiprintf_r+0x142>
 8021ada:	2340      	movs	r3, #64	; 0x40
 8021adc:	1b40      	subs	r0, r0, r5
 8021ade:	fa03 f000 	lsl.w	r0, r3, r0
 8021ae2:	9b04      	ldr	r3, [sp, #16]
 8021ae4:	4303      	orrs	r3, r0
 8021ae6:	3701      	adds	r7, #1
 8021ae8:	9304      	str	r3, [sp, #16]
 8021aea:	7839      	ldrb	r1, [r7, #0]
 8021aec:	4827      	ldr	r0, [pc, #156]	; (8021b8c <_svfiprintf_r+0x1e4>)
 8021aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021af2:	2206      	movs	r2, #6
 8021af4:	1c7e      	adds	r6, r7, #1
 8021af6:	f7de fb83 	bl	8000200 <memchr>
 8021afa:	2800      	cmp	r0, #0
 8021afc:	d038      	beq.n	8021b70 <_svfiprintf_r+0x1c8>
 8021afe:	4b24      	ldr	r3, [pc, #144]	; (8021b90 <_svfiprintf_r+0x1e8>)
 8021b00:	bb13      	cbnz	r3, 8021b48 <_svfiprintf_r+0x1a0>
 8021b02:	9b03      	ldr	r3, [sp, #12]
 8021b04:	3307      	adds	r3, #7
 8021b06:	f023 0307 	bic.w	r3, r3, #7
 8021b0a:	3308      	adds	r3, #8
 8021b0c:	9303      	str	r3, [sp, #12]
 8021b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b10:	444b      	add	r3, r9
 8021b12:	9309      	str	r3, [sp, #36]	; 0x24
 8021b14:	e76d      	b.n	80219f2 <_svfiprintf_r+0x4a>
 8021b16:	fb05 3202 	mla	r2, r5, r2, r3
 8021b1a:	2001      	movs	r0, #1
 8021b1c:	460f      	mov	r7, r1
 8021b1e:	e7a6      	b.n	8021a6e <_svfiprintf_r+0xc6>
 8021b20:	2300      	movs	r3, #0
 8021b22:	3701      	adds	r7, #1
 8021b24:	9305      	str	r3, [sp, #20]
 8021b26:	4619      	mov	r1, r3
 8021b28:	250a      	movs	r5, #10
 8021b2a:	4638      	mov	r0, r7
 8021b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b30:	3a30      	subs	r2, #48	; 0x30
 8021b32:	2a09      	cmp	r2, #9
 8021b34:	d903      	bls.n	8021b3e <_svfiprintf_r+0x196>
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d0c8      	beq.n	8021acc <_svfiprintf_r+0x124>
 8021b3a:	9105      	str	r1, [sp, #20]
 8021b3c:	e7c6      	b.n	8021acc <_svfiprintf_r+0x124>
 8021b3e:	fb05 2101 	mla	r1, r5, r1, r2
 8021b42:	2301      	movs	r3, #1
 8021b44:	4607      	mov	r7, r0
 8021b46:	e7f0      	b.n	8021b2a <_svfiprintf_r+0x182>
 8021b48:	ab03      	add	r3, sp, #12
 8021b4a:	9300      	str	r3, [sp, #0]
 8021b4c:	4622      	mov	r2, r4
 8021b4e:	4b11      	ldr	r3, [pc, #68]	; (8021b94 <_svfiprintf_r+0x1ec>)
 8021b50:	a904      	add	r1, sp, #16
 8021b52:	4640      	mov	r0, r8
 8021b54:	f7fc f800 	bl	801db58 <_printf_float>
 8021b58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8021b5c:	4681      	mov	r9, r0
 8021b5e:	d1d6      	bne.n	8021b0e <_svfiprintf_r+0x166>
 8021b60:	89a3      	ldrh	r3, [r4, #12]
 8021b62:	065b      	lsls	r3, r3, #25
 8021b64:	f53f af35 	bmi.w	80219d2 <_svfiprintf_r+0x2a>
 8021b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021b6a:	b01d      	add	sp, #116	; 0x74
 8021b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b70:	ab03      	add	r3, sp, #12
 8021b72:	9300      	str	r3, [sp, #0]
 8021b74:	4622      	mov	r2, r4
 8021b76:	4b07      	ldr	r3, [pc, #28]	; (8021b94 <_svfiprintf_r+0x1ec>)
 8021b78:	a904      	add	r1, sp, #16
 8021b7a:	4640      	mov	r0, r8
 8021b7c:	f7fc faa2 	bl	801e0c4 <_printf_i>
 8021b80:	e7ea      	b.n	8021b58 <_svfiprintf_r+0x1b0>
 8021b82:	bf00      	nop
 8021b84:	08022b48 	.word	0x08022b48
 8021b88:	08022b4e 	.word	0x08022b4e
 8021b8c:	08022b52 	.word	0x08022b52
 8021b90:	0801db59 	.word	0x0801db59
 8021b94:	080218f5 	.word	0x080218f5

08021b98 <_sbrk_r>:
 8021b98:	b538      	push	{r3, r4, r5, lr}
 8021b9a:	4c06      	ldr	r4, [pc, #24]	; (8021bb4 <_sbrk_r+0x1c>)
 8021b9c:	2300      	movs	r3, #0
 8021b9e:	4605      	mov	r5, r0
 8021ba0:	4608      	mov	r0, r1
 8021ba2:	6023      	str	r3, [r4, #0]
 8021ba4:	f7e8 fe76 	bl	800a894 <_sbrk>
 8021ba8:	1c43      	adds	r3, r0, #1
 8021baa:	d102      	bne.n	8021bb2 <_sbrk_r+0x1a>
 8021bac:	6823      	ldr	r3, [r4, #0]
 8021bae:	b103      	cbz	r3, 8021bb2 <_sbrk_r+0x1a>
 8021bb0:	602b      	str	r3, [r5, #0]
 8021bb2:	bd38      	pop	{r3, r4, r5, pc}
 8021bb4:	2000f224 	.word	0x2000f224

08021bb8 <_raise_r>:
 8021bb8:	291f      	cmp	r1, #31
 8021bba:	b538      	push	{r3, r4, r5, lr}
 8021bbc:	4604      	mov	r4, r0
 8021bbe:	460d      	mov	r5, r1
 8021bc0:	d904      	bls.n	8021bcc <_raise_r+0x14>
 8021bc2:	2316      	movs	r3, #22
 8021bc4:	6003      	str	r3, [r0, #0]
 8021bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8021bca:	bd38      	pop	{r3, r4, r5, pc}
 8021bcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021bce:	b112      	cbz	r2, 8021bd6 <_raise_r+0x1e>
 8021bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021bd4:	b94b      	cbnz	r3, 8021bea <_raise_r+0x32>
 8021bd6:	4620      	mov	r0, r4
 8021bd8:	f000 f830 	bl	8021c3c <_getpid_r>
 8021bdc:	462a      	mov	r2, r5
 8021bde:	4601      	mov	r1, r0
 8021be0:	4620      	mov	r0, r4
 8021be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021be6:	f000 b817 	b.w	8021c18 <_kill_r>
 8021bea:	2b01      	cmp	r3, #1
 8021bec:	d00a      	beq.n	8021c04 <_raise_r+0x4c>
 8021bee:	1c59      	adds	r1, r3, #1
 8021bf0:	d103      	bne.n	8021bfa <_raise_r+0x42>
 8021bf2:	2316      	movs	r3, #22
 8021bf4:	6003      	str	r3, [r0, #0]
 8021bf6:	2001      	movs	r0, #1
 8021bf8:	e7e7      	b.n	8021bca <_raise_r+0x12>
 8021bfa:	2400      	movs	r4, #0
 8021bfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021c00:	4628      	mov	r0, r5
 8021c02:	4798      	blx	r3
 8021c04:	2000      	movs	r0, #0
 8021c06:	e7e0      	b.n	8021bca <_raise_r+0x12>

08021c08 <raise>:
 8021c08:	4b02      	ldr	r3, [pc, #8]	; (8021c14 <raise+0xc>)
 8021c0a:	4601      	mov	r1, r0
 8021c0c:	6818      	ldr	r0, [r3, #0]
 8021c0e:	f7ff bfd3 	b.w	8021bb8 <_raise_r>
 8021c12:	bf00      	nop
 8021c14:	200000e0 	.word	0x200000e0

08021c18 <_kill_r>:
 8021c18:	b538      	push	{r3, r4, r5, lr}
 8021c1a:	4c07      	ldr	r4, [pc, #28]	; (8021c38 <_kill_r+0x20>)
 8021c1c:	2300      	movs	r3, #0
 8021c1e:	4605      	mov	r5, r0
 8021c20:	4608      	mov	r0, r1
 8021c22:	4611      	mov	r1, r2
 8021c24:	6023      	str	r3, [r4, #0]
 8021c26:	f7e8 fdad 	bl	800a784 <_kill>
 8021c2a:	1c43      	adds	r3, r0, #1
 8021c2c:	d102      	bne.n	8021c34 <_kill_r+0x1c>
 8021c2e:	6823      	ldr	r3, [r4, #0]
 8021c30:	b103      	cbz	r3, 8021c34 <_kill_r+0x1c>
 8021c32:	602b      	str	r3, [r5, #0]
 8021c34:	bd38      	pop	{r3, r4, r5, pc}
 8021c36:	bf00      	nop
 8021c38:	2000f224 	.word	0x2000f224

08021c3c <_getpid_r>:
 8021c3c:	f7e8 bd9a 	b.w	800a774 <_getpid>

08021c40 <__sread>:
 8021c40:	b510      	push	{r4, lr}
 8021c42:	460c      	mov	r4, r1
 8021c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c48:	f000 f8bc 	bl	8021dc4 <_read_r>
 8021c4c:	2800      	cmp	r0, #0
 8021c4e:	bfab      	itete	ge
 8021c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021c52:	89a3      	ldrhlt	r3, [r4, #12]
 8021c54:	181b      	addge	r3, r3, r0
 8021c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021c5a:	bfac      	ite	ge
 8021c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8021c5e:	81a3      	strhlt	r3, [r4, #12]
 8021c60:	bd10      	pop	{r4, pc}

08021c62 <__swrite>:
 8021c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c66:	461f      	mov	r7, r3
 8021c68:	898b      	ldrh	r3, [r1, #12]
 8021c6a:	05db      	lsls	r3, r3, #23
 8021c6c:	4605      	mov	r5, r0
 8021c6e:	460c      	mov	r4, r1
 8021c70:	4616      	mov	r6, r2
 8021c72:	d505      	bpl.n	8021c80 <__swrite+0x1e>
 8021c74:	2302      	movs	r3, #2
 8021c76:	2200      	movs	r2, #0
 8021c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c7c:	f000 f886 	bl	8021d8c <_lseek_r>
 8021c80:	89a3      	ldrh	r3, [r4, #12]
 8021c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021c8a:	81a3      	strh	r3, [r4, #12]
 8021c8c:	4632      	mov	r2, r6
 8021c8e:	463b      	mov	r3, r7
 8021c90:	4628      	mov	r0, r5
 8021c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021c96:	f000 b835 	b.w	8021d04 <_write_r>

08021c9a <__sseek>:
 8021c9a:	b510      	push	{r4, lr}
 8021c9c:	460c      	mov	r4, r1
 8021c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021ca2:	f000 f873 	bl	8021d8c <_lseek_r>
 8021ca6:	1c43      	adds	r3, r0, #1
 8021ca8:	89a3      	ldrh	r3, [r4, #12]
 8021caa:	bf15      	itete	ne
 8021cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8021cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021cb6:	81a3      	strheq	r3, [r4, #12]
 8021cb8:	bf18      	it	ne
 8021cba:	81a3      	strhne	r3, [r4, #12]
 8021cbc:	bd10      	pop	{r4, pc}

08021cbe <__sclose>:
 8021cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021cc2:	f000 b831 	b.w	8021d28 <_close_r>

08021cc6 <strncmp>:
 8021cc6:	b510      	push	{r4, lr}
 8021cc8:	b16a      	cbz	r2, 8021ce6 <strncmp+0x20>
 8021cca:	3901      	subs	r1, #1
 8021ccc:	1884      	adds	r4, r0, r2
 8021cce:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021cd2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8021cd6:	4293      	cmp	r3, r2
 8021cd8:	d103      	bne.n	8021ce2 <strncmp+0x1c>
 8021cda:	42a0      	cmp	r0, r4
 8021cdc:	d001      	beq.n	8021ce2 <strncmp+0x1c>
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d1f5      	bne.n	8021cce <strncmp+0x8>
 8021ce2:	1a98      	subs	r0, r3, r2
 8021ce4:	bd10      	pop	{r4, pc}
 8021ce6:	4610      	mov	r0, r2
 8021ce8:	e7fc      	b.n	8021ce4 <strncmp+0x1e>

08021cea <__ascii_wctomb>:
 8021cea:	b149      	cbz	r1, 8021d00 <__ascii_wctomb+0x16>
 8021cec:	2aff      	cmp	r2, #255	; 0xff
 8021cee:	bf85      	ittet	hi
 8021cf0:	238a      	movhi	r3, #138	; 0x8a
 8021cf2:	6003      	strhi	r3, [r0, #0]
 8021cf4:	700a      	strbls	r2, [r1, #0]
 8021cf6:	f04f 30ff 	movhi.w	r0, #4294967295
 8021cfa:	bf98      	it	ls
 8021cfc:	2001      	movls	r0, #1
 8021cfe:	4770      	bx	lr
 8021d00:	4608      	mov	r0, r1
 8021d02:	4770      	bx	lr

08021d04 <_write_r>:
 8021d04:	b538      	push	{r3, r4, r5, lr}
 8021d06:	4c07      	ldr	r4, [pc, #28]	; (8021d24 <_write_r+0x20>)
 8021d08:	4605      	mov	r5, r0
 8021d0a:	4608      	mov	r0, r1
 8021d0c:	4611      	mov	r1, r2
 8021d0e:	2200      	movs	r2, #0
 8021d10:	6022      	str	r2, [r4, #0]
 8021d12:	461a      	mov	r2, r3
 8021d14:	f7e8 fd6d 	bl	800a7f2 <_write>
 8021d18:	1c43      	adds	r3, r0, #1
 8021d1a:	d102      	bne.n	8021d22 <_write_r+0x1e>
 8021d1c:	6823      	ldr	r3, [r4, #0]
 8021d1e:	b103      	cbz	r3, 8021d22 <_write_r+0x1e>
 8021d20:	602b      	str	r3, [r5, #0]
 8021d22:	bd38      	pop	{r3, r4, r5, pc}
 8021d24:	2000f224 	.word	0x2000f224

08021d28 <_close_r>:
 8021d28:	b538      	push	{r3, r4, r5, lr}
 8021d2a:	4c06      	ldr	r4, [pc, #24]	; (8021d44 <_close_r+0x1c>)
 8021d2c:	2300      	movs	r3, #0
 8021d2e:	4605      	mov	r5, r0
 8021d30:	4608      	mov	r0, r1
 8021d32:	6023      	str	r3, [r4, #0]
 8021d34:	f7e8 fd79 	bl	800a82a <_close>
 8021d38:	1c43      	adds	r3, r0, #1
 8021d3a:	d102      	bne.n	8021d42 <_close_r+0x1a>
 8021d3c:	6823      	ldr	r3, [r4, #0]
 8021d3e:	b103      	cbz	r3, 8021d42 <_close_r+0x1a>
 8021d40:	602b      	str	r3, [r5, #0]
 8021d42:	bd38      	pop	{r3, r4, r5, pc}
 8021d44:	2000f224 	.word	0x2000f224

08021d48 <_fstat_r>:
 8021d48:	b538      	push	{r3, r4, r5, lr}
 8021d4a:	4c07      	ldr	r4, [pc, #28]	; (8021d68 <_fstat_r+0x20>)
 8021d4c:	2300      	movs	r3, #0
 8021d4e:	4605      	mov	r5, r0
 8021d50:	4608      	mov	r0, r1
 8021d52:	4611      	mov	r1, r2
 8021d54:	6023      	str	r3, [r4, #0]
 8021d56:	f7e8 fd74 	bl	800a842 <_fstat>
 8021d5a:	1c43      	adds	r3, r0, #1
 8021d5c:	d102      	bne.n	8021d64 <_fstat_r+0x1c>
 8021d5e:	6823      	ldr	r3, [r4, #0]
 8021d60:	b103      	cbz	r3, 8021d64 <_fstat_r+0x1c>
 8021d62:	602b      	str	r3, [r5, #0]
 8021d64:	bd38      	pop	{r3, r4, r5, pc}
 8021d66:	bf00      	nop
 8021d68:	2000f224 	.word	0x2000f224

08021d6c <_isatty_r>:
 8021d6c:	b538      	push	{r3, r4, r5, lr}
 8021d6e:	4c06      	ldr	r4, [pc, #24]	; (8021d88 <_isatty_r+0x1c>)
 8021d70:	2300      	movs	r3, #0
 8021d72:	4605      	mov	r5, r0
 8021d74:	4608      	mov	r0, r1
 8021d76:	6023      	str	r3, [r4, #0]
 8021d78:	f7e8 fd73 	bl	800a862 <_isatty>
 8021d7c:	1c43      	adds	r3, r0, #1
 8021d7e:	d102      	bne.n	8021d86 <_isatty_r+0x1a>
 8021d80:	6823      	ldr	r3, [r4, #0]
 8021d82:	b103      	cbz	r3, 8021d86 <_isatty_r+0x1a>
 8021d84:	602b      	str	r3, [r5, #0]
 8021d86:	bd38      	pop	{r3, r4, r5, pc}
 8021d88:	2000f224 	.word	0x2000f224

08021d8c <_lseek_r>:
 8021d8c:	b538      	push	{r3, r4, r5, lr}
 8021d8e:	4c07      	ldr	r4, [pc, #28]	; (8021dac <_lseek_r+0x20>)
 8021d90:	4605      	mov	r5, r0
 8021d92:	4608      	mov	r0, r1
 8021d94:	4611      	mov	r1, r2
 8021d96:	2200      	movs	r2, #0
 8021d98:	6022      	str	r2, [r4, #0]
 8021d9a:	461a      	mov	r2, r3
 8021d9c:	f7e8 fd6c 	bl	800a878 <_lseek>
 8021da0:	1c43      	adds	r3, r0, #1
 8021da2:	d102      	bne.n	8021daa <_lseek_r+0x1e>
 8021da4:	6823      	ldr	r3, [r4, #0]
 8021da6:	b103      	cbz	r3, 8021daa <_lseek_r+0x1e>
 8021da8:	602b      	str	r3, [r5, #0]
 8021daa:	bd38      	pop	{r3, r4, r5, pc}
 8021dac:	2000f224 	.word	0x2000f224

08021db0 <__malloc_lock>:
 8021db0:	4770      	bx	lr

08021db2 <__malloc_unlock>:
 8021db2:	4770      	bx	lr

08021db4 <_malloc_usable_size_r>:
 8021db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021db8:	1f18      	subs	r0, r3, #4
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	bfbc      	itt	lt
 8021dbe:	580b      	ldrlt	r3, [r1, r0]
 8021dc0:	18c0      	addlt	r0, r0, r3
 8021dc2:	4770      	bx	lr

08021dc4 <_read_r>:
 8021dc4:	b538      	push	{r3, r4, r5, lr}
 8021dc6:	4c07      	ldr	r4, [pc, #28]	; (8021de4 <_read_r+0x20>)
 8021dc8:	4605      	mov	r5, r0
 8021dca:	4608      	mov	r0, r1
 8021dcc:	4611      	mov	r1, r2
 8021dce:	2200      	movs	r2, #0
 8021dd0:	6022      	str	r2, [r4, #0]
 8021dd2:	461a      	mov	r2, r3
 8021dd4:	f7e8 fcf0 	bl	800a7b8 <_read>
 8021dd8:	1c43      	adds	r3, r0, #1
 8021dda:	d102      	bne.n	8021de2 <_read_r+0x1e>
 8021ddc:	6823      	ldr	r3, [r4, #0]
 8021dde:	b103      	cbz	r3, 8021de2 <_read_r+0x1e>
 8021de0:	602b      	str	r3, [r5, #0]
 8021de2:	bd38      	pop	{r3, r4, r5, pc}
 8021de4:	2000f224 	.word	0x2000f224

08021de8 <_init>:
 8021de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021dea:	bf00      	nop
 8021dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021dee:	bc08      	pop	{r3}
 8021df0:	469e      	mov	lr, r3
 8021df2:	4770      	bx	lr

08021df4 <_fini>:
 8021df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021df6:	bf00      	nop
 8021df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021dfa:	bc08      	pop	{r3}
 8021dfc:	469e      	mov	lr, r3
 8021dfe:	4770      	bx	lr
